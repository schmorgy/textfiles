IncludeClass(BaseHtml);
VOID ReOpen()
{
}
						
BaseHtml::LoadTranslationFile(Setup,CMSetupTrans,CMSetupTrans); // parent directory, category,filename
VOID DefineImageViewingParametersDialog()
{
	hGap = vGap = 10;
	PromptHeight = 20;		PromptWidth = 140;		ValueWidth = 180;
	ButtonWidth = 90;		ButtonHeight = 20;	
	LeftX = $hGap;			CurrentY = $vGap;		CurrentRight = 0;

	Define: ImageViewingParametersDialog Using DDWinDef
		Fields:	POSITION				100, 100, 610,600 
				TITLE					~Color Management for <$app.UserName> on <$app.ComputerName>~
				TYPENAME				Dialog 
				OACTIONSTEXT			ACTION EXEC ( CloseDialog() )
				HACTIONSTEXT			ACTION SHOWHELPPAGE ( KPISHelpFile "ImageViewingParameters.htm" ) 

		Contains: INLISTORDER
		{
			Define: MonitorProfileComboPrompt Using DDWinCtrlDef AsSymbol MonitorProfileComboPrompt
				Fields:	TypeName		StaticText
						Text			~Monitor Profile~
						Position		$LeftX $CurrentY, $PromptWidth $ButtonHeight

			Define: MonitorProfileComboBox Using DDWinCtrlDef AsSymbol MonitorProfileComboBox
				Fields:	TypeName		SComboBox
						Position		MonitorProfileComboPrompt(GetRight,Position) + $hGap,
										MonitorProfileComboPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		MonitorProfileName
						IsTabStop		1
						DropDownActionsText ACTION CALL ( RefreshProfilesComboBox(Monitor) )
						DActionsText	ACTIONS ( Save "Exec(NewMonitorProfile())" )
						Tooltip			~Set the monitor profile~;

			Define: OutputProfileComboPrompt Using DDWinCtrlDef AsSymbol OutputProfileComboPrompt
				Fields:	TypeName		StaticText
						Text			~Output Viewing Profile~
						Position		$LeftX, MonitorProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap, 
										$PromptWidth $ButtonHeight
						
			Define: OutputProfileComboBox Using DDWinCtrlDef AsSymbol OutputProfileComboBox
				Fields:	TypeName		SComboBox
						Position		OutputProfileComboPrompt(GetRight,Position) + $hGap,
										OutputProfileComboPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		ViewingProfileName
						IsTabStop		1
						DropDownActionsText ACTION CALL ( RefreshProfilesComboBox2(Output,WorkingSpace,~~,OutputProfileComboBox) )
						DActionsText	ACTIONS  ( Save "Exec(NewViewingProfile())" ) 
						Tooltip			~Set an output profile when an image is displayed on the screen.  Not used in layouts and jobs~;

				Define: PrintingRenderingIntentPrompt Using DDWinCtrlDef AsSymbol PrintingRenderingIntentPrompt
				Fields:	TypeName		StaticText
						Text			~Printing Rendering Intent~
						Position		OutputProfileComboBox(GetRight,Position) +30, OutputProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap, 
										$PromptWidth $ButtonHeight
				Define: PrintingRenderingIntentComboBox Using DDWinCtrlDef AsSymbol PrintingRenderingIntentComboBox
				Fields:	TypeName		SComboBox
						Position		PrintingRenderingIntentPrompt(GetRight,Position) + $hGap,
										PrintingRenderingIntentPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		PrintingRenderingIntent
						IsTabStop		0
						IsIndex			1
						DropDownActionsText ACTION CALL ( RefreshRenderingIntentCombo1() )
						DActionsText	ACTIONS ( Save "Exec(NewRenderingIntent1())" )
						Tooltip			~<$tr.CMSetupTrans(PrintingRenderingIntentTT)>~;

				Define: SoftProofRenderingIntentPrompt Using DDWinCtrlDef AsSymbol SoftProofRenderingIntentPrompt
				Fields:	TypeName		StaticText
						Text			~Soft Proof Rendering Intent~
						Position		PrintingRenderingIntentPrompt(GetLeft,Position), PrintingRenderingIntentComboBox(GetTop,Position) + $ButtonHeight + $vGap, 
										$PromptWidth $ButtonHeight
				Define: SoftProofRenderingIntentCombo Using DDWinCtrlDef AsSymbol SoftProofRenderingIntentCombo
				Fields:	TypeName		SComboBox
						Position		SoftProofRenderingIntentPrompt(GetRight,Position) + $hGap,
										SoftProofRenderingIntentPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		SoftProofRenderingIntent
						IsTabStop		0
						IsIndex			1
						DropDownActionsText ACTION CALL ( RefreshRenderingIntentCombo2() )
						DActionsText	ACTIONS ( Save "Exec(NewRenderingIntent2())" )
						Tooltip			~<$tr.CMSetupTrans(SoftProofRenderingIntentTT)>~;

				groupBoxYPos1 = PrintingRenderingIntentPrompt(GetTop,Position) - 20;
				groupBoxYPos2 = SoftProofRenderingIntentCombo(GetTop,Position) + 40;
				groupBoxXPos1 = PrintingRenderingIntentPrompt(GetLeft,Position) - 15;
				groupBoxXPos2 = SoftProofRenderingIntentCombo(GetRight,Position) + 15;

				Define: ZZRenderingIntentGroupBox Using DDWinCtrlDef
				fields:	TypeName GroupBox
						Text ~Rendering Intents used with the Output Viewing Profile:~
						Position <groupBoxXPos1> <groupBoxYPos1> <groupBoxXPos2>-<groupBoxXPos1>  <groupBoxYPos2>-<groupBoxYPos1>;

				Define: WorkingSpaceComboPrompt Using DDWinCtrlDef AsSymbol WorkingSpaceComboPrompt
				Fields:	TypeName		StaticText
						Text			~Working Space Profile~
						Position		$LeftX, OutputProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap, 
										$PromptWidth $ButtonHeight
						
				Define: WorkingSpaceProfileComboBox Using DDWinCtrlDef AsSymbol WorkingSpaceProfileComboBox
				Fields:	TypeName		SComboBox
						Position		WorkingSpaceComboPrompt(GetRight,Position) + $hGap,
										WorkingSpaceComboPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		WorkingSpaceProfileName
						IsTabStop		1
						DropDownActionsText ACTION CALL ( RefreshProfilesComboBox(WorkingSpace) )
						DActionsText	ACTIONS  ( Save "Exec(NewWorkingSpaceProfile())" ) 
						Tooltip			~Set the working space profile.  Selecting 'None' will turn off color management~;

			Define: DefaultInputProfileComboPrompt Using DDWinCtrlDef AsSymbol DefaultInputProfileComboPrompt
				Fields:	TypeName		StaticText
						Text			~Default Input Profile~
						Position		$LeftX, WorkingSpaceProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap, 
										$PromptWidth $ButtonHeight
						
			Define: InputProfileComboBox Using DDWinCtrlDef AsSymbol InputProfileComboBox
				Fields:	TypeName		SComboBox
						Position		DefaultInputProfileComboPrompt(GetRight,Position) + $hGap,
										DefaultInputProfileComboPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		DefaultInputProfileName
						IsTabStop		1
						DropDownActionsText ACTION CALL ( RefreshProfilesComboBox2(Input, WorkingSpace, ~~, InputProfileComboBox) )
						DActionsText	ACTIONS  ( Save "Exec(NewDefaultInputProfile())" ) 
						Tooltip			~Set the default input profile, used for images without assigned profiles and without embedded ICC input profiles.~;

			Define: DefaultColorProfileComboPrompt Using DDWinCtrlDef AsSymbol DefaultColorProfileComboPrompt
				Fields:	TypeName		StaticText
						Text			~Default Color Profile~
						Position		$LeftX, InputProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap, 
										$PromptWidth $ButtonHeight
						
			Define: ColorProfileComboBox Using DDWinCtrlDef AsSymbol ColorProfileComboBox
				Fields:	TypeName		SComboBox
						Position		DefaultColorProfileComboPrompt(GetRight,Position) + $hGap,
										DefaultColorProfileComboPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		DefaultColorProfileName
						IsTabStop		1
						DropDownActionsText ACTION CALL ( RefreshProfilesComboBox2(Input,WorkingSpace,~~,ColorProfileComboBox) )
						DActionsText	ACTIONS  ( Save "Exec(NewDefaultColorProfile())" ) 
						Tooltip			~Set the default Color profile, used for text and background colors in layouts and jobs.~;


/*
			Define: DefaultCMYKProfileComboPrompt Using DDWinCtrlDef AsSymbol DefaultCMYKProfileComboPrompt
				Fields:	TypeName		StaticText
						Text			~Default CMYK Profile~
						Position		$LeftX, ColorProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap, 
										$PromptWidth $ButtonHeight
						
			Define: CMYKProfileComboBox Using DDWinCtrlDef AsSymbol CMYKProfileComboBox
				Fields:	TypeName		SComboBox
						Position		DefaultCMYKProfileComboPrompt(GetRight,Position) + $hGap,
										DefaultCMYKProfileComboPrompt(GetTop,Position),
										$ValueWidth, ($ButtonHeight * 10)
						GenConName		THIS
						GenConField		DefaultCMYKProfileName
						IsTabStop		1
						DropDownActionsText ACTION CALL ( RefreshProfilesComboBox2(Input,~~,~~,CMYKProfileComboBox) )
						DActionsText	ACTIONS  ( Save "Exec(NewDefaultColorProfile())" ) 
						Tooltip			~Set the default color profile, used for text and background colors in layouts and jobs.~;
*/

			Define: WarnColorMgtMissing Using DDWinCtrlDef AsSymbol WarnColorMgtMissing
				Fields:	TypeName		CheckBox
						Position		$LeftX,
										ColorProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap,
//										CMYKProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap,
										230, 20
						GenConName		THIS
						GenConField		WarnIfColorMgtMissing
						IsTabStop		1
						IActionsText	ACTIONS  ( CopyGenConField( [GenCons] PreviewOptions WarnIfColorMgtMissing [GENCONS] ImageViewingParameters  WarnIfColorMgtMissing) Get)
						DActionsText	ACTIONS  ( 
													Save CopyGenConField(  [GENCONS] ImageViewingParameters  WarnIfColorMgtMissing [GenCons] PreviewOptions WarnIfColorMgtMissing)
													Doc(UpdateViewPreferences Open UpdateUserSettings "UpdateViewPreferences();" ) 
												) 
						Text			~Show color management warnings~
						Tooltip			~Warn me if and why color management is not applied when previewing jobs and layouts.  If you plan on running a color managed system, check this box;  if not it's best to clear this box~;
		
			CurrentRight = ColorProfileComboBox(GetRight,Position) + $hGap;

			Define: SeeOtherBox Using DDWinCtrlDef AsSymbol SeeOtherBox
				Fields:	GENCONNAME		This
						DACTIONSTEXT	ACTION EXEC ( OnSeeOtherBox() )
						POSITION		WarnColorMgtMissing(GetRight,Position) + 25, WarnColorMgtMissing(GetTop,Position),70,20
						TEXT			~Advanced ->~
						TOOLTIP			~See rendering intents~
						TYPENAME		Button;

			Define: ProfilesButton Using DDWinCtrlDef AsSymbol ProfilesButton
				Fields:	GENCONNAME		This
						IsTabStop		1
						DACTIONSTEXT	ACTION EXEC ( OnProfilesButton() )
						POSITION		(($CurrentRight - $LeftX) / 2) - ($ButtonWidth + $hGap) ,
										WarnColorMgtMissing(GetTop,Position) + $ButtonHeight + $vGap,$ButtonWidth, $ButtonHeight
						TEXT			~ICC Profile Data~
						TOOLTIP			~Display the ICC Profile Data window~
						TYPENAME		BUTTON
	

			Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
				Fields:	GENCONNAME		This
						IsTabStop		1
						DACTIONSTEXT	ACTION EXEC ( CloseDialog() )
						POSITION		ProfilesButton(GetRight,Position) + $hGap ,
										ProfilesButton(GetTop,Position),$ButtonWidth, $ButtonHeight
						TEXT			~Close~
						TOOLTIP			~Close this dialog using the current settings~
						TYPENAME		BUTTON
		}

	CurrentY = CancelButton(GetBottom,Position) + $vGap + 30;
	ImageViewingParametersDialog( Set,Position,~20  20  <CurrentRight>  <CurrentY>~ );
	Global(CurrentRight);
	Global(CurrentY);
	Global( ImageViewingParametersDialog );
}


VOID CloseDialog()
{
	dlg( End );
	Exit();
}


VOID OnProfilesButton()
{
	action = ACTION DOC ( ProfilesDoc Open ProfilesDoc "Init(~~,~Select * From Profiles Order By Type, Name~);" );
	PerformActions( action );
}

VOID OnSeeOtherBox()
{
	Extra = 400;
	BigRight = <CurrentRight>+<Extra>;
	if (!Defined(advanced) )
	{

		dlg( SetWindowSize,~<BigRight>~,~<CurrentY>~ );
		advanced = 1;
	}
	else if (!<advanced>)
	{
		dlg( SetWindowSize,~<BigRight>~,~<CurrentY>~ );
		advanced = 1;
	}
	else
	{
		dlg( SetWindowSize,~<CurrentRight>~,~<CurrentY>~ );
		advanced = 0;
	}

	if (<advanced>)
	{
		dlg(SetControlTitle,SeeOtherBox,~<- Normal ~);
	}
	else
	{
		dlg(SetControlTitle,SeeOtherBox,~Advanced ->~);
	}
	Global(advanced);
}



STR GetProfilePath( Type,Name )
{
	Query = ~Select Path From Profiles Where Type = '<Type>' And Name = '<Name>'~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.  <theErr>.  <Query>~ ) ); 
		return ~~;
	}

	if ( !ProfilesList( GetFirst,Profile ) )
		{ return ~~; }

	return ~<$pcon.Profile[Path]>~;
}


VOID NewMonitorProfile()
{
	app( Application );

	ImageViewingParameters( Get,MonitorProfileName,Name );

	NoCurrentMonitorProfileName = FALSE;
	if (!Application( GetMonitorProfileName,CurrentMonitorProfileName ))
	{
		NoCurrentMonitorProfileName = TRUE;
	}

	if ( ~<Name>~ == None || ~<Name>~ == ~~ )	// TRANSLATE??
	{
		Application( SetMonitorProfile,~~ );
	}
	else		
	{
		if (!Application( SetMonitorProfile,~<Name>~ ))
		{
			Warning( ~The monitor profile path is invalid.~ );
			if ( (~<CurrentMonitorProfileName>~ == ~None~) || (~<CurrentMonitorProfileName>~ == ~~) || <NoCurrentMonitorProfileName> )		// TRANSLATE??
			{
				Application( SetMonitorProfile,~~ );
				ImageViewingParameters( Set,MonitorProfileName,~None~ );
			}
			else
			{
				Application( SetMonitorProfile,~<CurrentMonitorProfileName>~ );
				ImageViewingParameters( Set,MonitorProfileName,~<CurrentMonitorProfileName>~ );
			}

			dlg( SetControlFromStringList,MonitorProfileComboBox,MonitorProfiles,Selection,Update );
			return;
		}
	}

	Application( GetMonitorProfilePath,CurrentMonitorProfilePath );

	EnableOutputProfile( ~<Name>~ );

	RememberProfile( MonitorProfile,~<Name>~ );
}


VOID NewViewingProfile()
{	
	app( Application );

	ImageViewingParameters( Get,ViewingProfileName,Name );

	Application( GetViewingProfileName,CurrentViewingProfileName );

	if ( (~<Name>~ == ~None~) || (~<Name>~ == ~~) )		// TRANSLATE??
	{
		Application( SetViewingProfile,~~ );
	}
	else	
	{
		if (!Application( SetViewingProfile,~<Name>~ ))
		{
			Warning( ~The output viewing profile path is invalid.~ );
			if ( (~<CurrentViewingProfileName>~ == ~None~) || (~<CurrentViewingProfileName>~ == ~~) )		// TRANSLATE??
			{
				Application( SetViewingProfile,~~ );
				ImageViewingParameters( Set,ViewingProfileName,~None~ );
			}
			else
			{
				Application( SetViewingProfile,~<CurrentViewingProfileName>~ );
				ImageViewingParameters( Set,ViewingProfileName,~<CurrentViewingProfileName>~ );
			}

			dlg( SetControlFromStringList,OutputProfileComboBox,OutputProfiles,Selection,Update );
			return;
		}
	}

	Application( GetViewingProfilePath,CurrentViewingProfilePath );

	RememberProfile( OutputProfile,~<Name>~ );
}


VOID NewWorkingSpaceProfile()
{	
	app( Application );

	ImageViewingParameters( Get,WorkingSpaceProfileName,Name );

	Application( GetWorkingSpaceProfileName,CurrentWorkingSpaceProfileName );

	if ( (~<Name>~ == ~None~) || (~<Name>~ == ~~) )		// TRANSLATE??
	{
		Application( SetWorkingSpaceProfile,~~ );
	}
	else	
	{
		if (!Application( SetWorkingSpaceProfile,~<Name>~ ))
		{
			Warning( ~The working space profile path is invalid.~ );
			if ( (~<CurrentWorkingSpaceProfileName>~ == ~None~) || (~<CurrentWorkingSpaceProfileName>~ == ~~) )		// TRANSLATE??
			{
				Application( SetWorkingSpaceProfile,~~ );
				ImageViewingParameters( Set,WorkingSpaceProfileName,~None~ );
			}
			else
			{
				Application( SetWorkingSpaceProfile,~<CurrentWorkingSpaceProfileName>~ );
				ImageViewingParameters( Set,WorkingSpaceProfileName,~<CurrentWorkingSpaceProfileName>~ );
			}

			dlg( SetControlFromStringList,WorkingSpaceProfileComboBox,WorkingSpaceProfiles,Selection,Update );
			return;
		}
	}

	Application( GetWorkingSpaceProfilePath,CurrentWorkingSpaceProfilePath );

	RememberProfile( WorkingSpaceProfile,~<Name>~ );
}

VOID NewDefaultInputProfile()
{	
	app( Application );

	ImageViewingParameters( Get,DefaultInputProfileName,Name );

	Application( GetDefaultInputProfileName,DefaultInputProfile );

	if ( (~<Name>~ == ~None~) || (~<Name>~ == ~~) )		// TRANSLATE??
	{
		Application( SetDefaultInputProfile,~~ );
	}
	else	
	{
		if (!Application( SetDefaultInputProfile,~<Name>~ ))
		{
			Warning( ~The working space profile path is invalid.~ );
			if ( (~<CurrentDefaultInputProfileName>~ == ~None~) || (~<CurrentDefaultInputProfileName>~ == ~~) )		// TRANSLATE??
			{
				Application( SetDefaultInputProfile,~~ );
				ImageViewingParameters( Set,DefaultInputProfileName,~None~ );
			}
			else
			{
				Application( SetDefaultInputProfile,~<CurrentDefaultInputProfileName>~ );
				ImageViewingParameters( Set,DefaultInputProfileName,~<CurrentDefaultInputProfileName>~ );
			}

			dlg( SetControlFromStringList,InputProfileComboBox,InputProfiles,Selection,Update );
			return;
		}
	}

	Application( GetDefaultInputProfilePath,CurrentDefaultInputProfilePath );

	RememberProfile( DefaultInputProfile,~<Name>~ );
}

VOID NewDefaultColorProfile()
{	
	app( Application );

	ImageViewingParameters( Get,DefaultColorProfileName,Name );

	Application( GetDefaultColorProfileName,DefaultColorProfile );

	if ( (~<Name>~ == ~None~) || (~<Name>~ == ~~) )		// TRANSLATE??
	{
		Application( SetDefaultColorProfile,~~ );
	}
	else	
	{
		if (!Application( SetDefaultColorProfile,~<Name>~ ))
		{
			Warning( ~The working space profile path is invalid.~ );
			if ( (~<CurrentDefaultColorProfileName>~ == ~None~) || (~<CurrentDefaultColorProfileName>~ == ~~) )		// TRANSLATE??
			{
				Application( SetDefaultColorProfile,~~ );
				ImageViewingParameters( Set,DefaultColorProfileName,~None~ );
			}
			else
			{
				Application( SetDefaultColorProfile,~<CurrentDefaultColorProfileName>~ );
				ImageViewingParameters( Set,DefaultColorProfileName,~<CurrentDefaultColorProfileName>~ );
			}

			dlg( SetControlFromStringList,ColorProfileComboBox,ColorProfiles,Selection,Update );
			return;
		}
	}

	Application( GetDefaultColorProfilePath,CurrentDefaultColorProfilePath );

	RememberProfile( DefaultColorProfile,~<Name>~ );
}

VOID NewDefaultCMYKProfile()
{	
	app( Application );

	ImageViewingParameters( Get,DefaultCMYKProfileName,Name );

	Application( GetDefaultCMYKProfileName,DefaultCMYKProfile );

	if ( (~<Name>~ == ~None~) || (~<Name>~ == ~~) )		// TRANSLATE??
	{
		Application( SetDefaultCMYKProfile,~~ );
	}
	else	
	{
		if (!Application( SetDefaultCMYKProfile,~<Name>~ ))
		{
			Warning( ~The working space profile path is invalid.~ );
			if ( (~<CurrentDefaultCMYKProfileName>~ == ~None~) || (~<CurrentDefaultColorProfileName>~ == ~~) )		// TRANSLATE??
			{
				Application( SetDefaultColorProfile,~~ );
				ImageViewingParameters( Set,DefaultColorProfileName,~None~ );
			}
			else
			{
				Application( SetDefaultColorProfile,~<CurrentDefaultColorProfileName>~ );
				ImageViewingParameters( Set,DefaultColorProfileName,~<CurrentDefaultColorProfileName>~ );
			}

			dlg( SetControlFromStringList,ColorProfileComboBox,ColorProfiles,Selection,Update );
			return;
		}
	}

	Application( GetDefaultColorProfilePath,CurrentDefaultColorProfilePath );

	RememberProfile( DefaultColorProfile,~<Name>~ );
}


VOID EnableOutputProfile( MonitorProfileName )
{
	WantEnabled = ~<MonitorProfileName>~ != ~~ && ~<MonitorProfileName>~ != ~None~;

	dlg( EnableControls,<WantEnabled>,OutputProfileComboBox );
}

NUMERIC RememberIntent( IntentType, IntentValue)
{
	Query = ~Select ComputerName,UserName From ViewProfiles Where ComputerName = '<$app.ComputerName>' AND UserName = '<$app.UserName>'~;

	Found = ADO( dBase,Connect,GetValuesFor,~<Query>~,ComputerName,UserName );

	cmd = <Found> ? ~Update ViewProfiles Set <IntentType> = <IntentValue> Where ComputerName = '<$app.ComputerName>' AND UserName = '<$app.UserName>'~ : 
					~Insert Into ViewProfiles(ComputerName,UserName,<IntentType>) Values('<$app.ComputerName>','<$app.UserName>',<IntentValue>)~ ;

	if ( !dBase( Cmd,~<cmd>~ ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Database update failed: <cmd>. <theErr>~ );
	}

	return TRUE;
}

NUMERIC RememberProfile( ProfileType,ProfileName )
{
	Query = ~Select ComputerName,UserName From ViewProfiles Where ComputerName = '<$app.ComputerName>' AND UserName = '<$app.UserName>'~;

	Found = ADO( dBase,Connect,GetValuesFor,~<Query>~,ComputerName,UserName );

	cmd = <Found> ? ~Update ViewProfiles Set <ProfileType> = '<ProfileName>' Where ComputerName = '<$app.ComputerName>' AND UserName = '<$app.UserName>'~ : 
					~Insert Into ViewProfiles(ComputerName,UserName,<ProfileType>) Values('<$app.ComputerName>','<$app.UserName>','<ProfileName>')~ ;

	if ( !dBase( Cmd,~<cmd>~ ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Database update failed: <cmd>. <theErr>~ );
	}

	return TRUE;
}


// Makes a stringlist of <Type1>Profiles
VOID GetProfiles2( Type1, Type2, Type3 )
{
	if ( IsNull( ~<Type1>~ ) )
	{
		return;
	}

	TypeClause = ~(Type = '<Type1>'~;

	if ( !IsNull( ~<Type2>~ ) )
	{
		TypeClause = ~<TypeClause> OR Type = '<Type2>'~;
	}

	if ( !IsNull( ~<Type3>~ ) )
	{
		TypeClause = ~<TypeClause> OR Type = '<Type3>'~;
	}

	TypeClause = ~<TypeClause>)~;

	Query = ~Select * From Profiles Where <TypeClause> And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.  <theErr>~ ) ); 
		return;
	}

	ForgetGlobal( <Type1>Profiles );

	ProfilesList( MakeStringList,<Type1>Profiles,Name );

	<Type1>Profiles( AddString,~None~ );

	Global( <Type1>Profiles );
}



VOID GetProfiles( Type,Control )
{
	Query = ~Select * From Profiles Where Type = '<Type>' And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.  <theErr>~ ) ); 
		return;
	}

	ForgetGlobal( <Type>Profiles );

	ProfilesList( MakeStringList,<Type>Profiles,Name );

	<Type>Profiles( AddString,~None~ );

	Global( <Type>Profiles );
}


VOID RefreshProfilesComboBox( ProfileType )
{
	GetProfiles( ~<ProfileType>~,<ProfileType>ProfileComboBox );

	dlg( SetControlFromStringList,<ProfileType>ProfileComboBox,<ProfileType>Profiles,NoSelection, Update );
}


VOID RefreshProfilesComboBox3( ProfileType, Control )
{
	GetProfiles( ~<ProfileType>~,<Control> );

	dlg( SetControlFromStringList,<Control>,<ProfileType>Profiles,NoSelection, Update );
}

VOID NewRenderingIntent1()
{
	app( Application );
	dlg(GetControlValue,PrintingRenderingIntentComboBox,value);
	ImageViewingParameters(SetValue,PrintingRenderingIntent,Numeric(~<value>~));
	Application( SetPrintingRenderingIntent,Numeric(~<value>~) );
	RememberIntent( PrintingRenderingIntent,Numeric(~<value>~) );
}

VOID NewRenderingIntent2()
{
	app( Application );
	dlg(GetControlValue,SoftProofRenderingIntentCombo,value);
	ImageViewingParameters(SetValue,SoftProofRenderingIntent,Numeric(~<value>~));
	Application( SetSoftProofRenderingIntent,Numeric(~<value>~));
	RememberIntent( SoftProofRenderingIntent,Numeric(~<value>~) );
}

VOID RefreshRenderingIntentCombo1()
{

	StringList(RenderingIntents,New);
	RenderingIntents(AddString,Perceptual);
	RenderingIntents(AddString,Colorimetric);

	Query = ~Select * From ViewProfiles Where ComputerName = '<$app.ComputerName>' AND UserName = '<$app.UserName>'~;
	if ( !PGenConList( IntentsList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		IntentsList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.  <theErr>~ ) ); 
		return;
	}

	if ( !IntentsList( GetFirst,Intent ) )
		{ return ~~; }

	RenderingIntentVal = ~<$pcon.Intent[PrintingRenderingIntent]>~;
	ImageViewingParameters(SetValue,PrintingRenderingIntent,Numeric(~<RenderingIntentVal>~));
	dlg( SetControlFromStringList,PrintingRenderingIntentComboBox,RenderingIntents,Selection,Update );

}

VOID RefreshRenderingIntentCombo2()
{
	StringList(RenderingIntents,New);
	RenderingIntents(AddString,Perceptual);
	RenderingIntents(AddString,Colorimetric);

	Query = ~Select * From ViewProfiles Where ComputerName = '<$app.ComputerName>' AND UserName = '<$app.UserName>'~;
	if ( !PGenConList( IntentsList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		IntentsList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.  <theErr>~ ) ); 
		return;
	}

	if ( !IntentsList( GetFirst,Intent ) )
		{ return ~~; }

	RenderingIntentVal = ~<$pcon.Intent[SoftProofRenderingIntent]>~;
	ImageViewingParameters(SetValue,SoftProofRenderingIntent,Numeric(~<RenderingIntentVal>~));
	dlg( SetControlFromStringList,SoftProofRenderingIntentCombo,RenderingIntents,Selection,Update );

}

VOID RefreshProfilesComboBox2( ProfileType1, ProfileType2, ProfileType3, ComboBoxName )
{

	GetProfiles2( ~<ProfileType1>~, ~<ProfileType2>~ , ~<ProfileType3>~  );

	dlg( SetControlFromStringList,~<ComboBoxName>~,<ProfileType1>Profiles,NoSelection, Update );
}

VOID EditViewingParameters()	// BRINGS UP THE DIALOG 
{
	GetProfiles2( Output,WorkingSpace,~~ );
	GetProfiles( Monitor,MonitorProfileComboBox );
	GetProfiles( WorkingSpace,WorkingSpaceProfileComboBox );
	GetProfiles2( Input, WorkingSpace, Monitor );
	GetProfiles2( Color, WorkingSpace, Monitor );

	app( Application );

	if ( WantOutputProfileEnabled = Application( GetMonitorProfileName,MonitorProfileName ) )
	{ 
		ImageViewingParameters( Set,MonitorProfileName,~<MonitorProfileName>~ );
		WantOutputProfileEnabled = ~<MonitorProfileName>~ != ~None~ && ~<MonitorProfileName>~ != ~~;
	}
	else
	{	
		ImageViewingParameters( Set,MonitorProfileName,~None~ );
	}

	if ( Application( GetViewingProfileName,ProfileName ) )
		{ ImageViewingParameters( Set,ViewingProfileName,~<ProfileName>~ ); }
	else
		{ ImageViewingParameters( Set,ViewingProfileName,~None~ ); }

	if ( Application( GetWorkingSpaceProfileName,ProfileName ) )
		{ ImageViewingParameters( Set,WorkingSpaceProfileName,~<ProfileName>~ ); }
	else
		{ ImageViewingParameters( Set,WorkingSpaceProfileName,~None~ ); }

	if ( Application( GetDefaultInputProfileName,ProfileName ) )
		{ ImageViewingParameters( Set,DefaultInputProfileName,~<ProfileName>~ ); }
	else
		{ ImageViewingParameters( Set,DefaultInputProfileName,~None~ ); }

	if ( Application( GetDefaultColorProfileName,ProfileName ) )
		{ ImageViewingParameters( Set,DefaultColorProfileName,~<ProfileName>~ ); }
	else
		{ ImageViewingParameters( Set,DefaultColorProfileName,~None~ ); }

	Application(GetPrintingRenderingIntent,PrintingIntent);
	Application(GetSoftProofRenderingIntent,SoftProofIntent);

	GenDlg( dlg,Definition,ImageViewingParametersDialog,Data,ImageViewingParameters,Document,$Doc.This,New,Temporary );
	

	dlg( SetControlFromStringList,OutputProfileComboBox,OutputProfiles,Selection,Update );
	dlg( SetControlFromStringList,MonitorProfileComboBox,MonitorProfiles,Selection,Update );
	dlg( SetControlFromStringList,WorkingSpaceProfileComboBox,WorkingSpaceProfiles,Selection,Update );
	dlg( SetControlFromStringList,InputProfileComboBox,InputProfiles,Selection,Update );
	dlg( SetControlFromStringList,ColorProfileComboBox,InputProfiles,Selection,Update );
	Global( dlg );
	RefreshRenderingIntentCombo1();
	RefreshRenderingIntentCombo2();

	EnableOutputProfile( ~<$Con.ImageViewingParameters[MonitorProfileName]>~ );
}


if ( !GenCon( ImageViewingParameters,GetGenCon,ImageViewingParameters ) )
	{ Exit( ~Could not find ImageViewingParameters~ ); }

DefineImageViewingParametersDialog();

EditViewingParameters();
