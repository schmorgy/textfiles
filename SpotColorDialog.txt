LeftMargin = 20;
StaticTextWidth = 150;
EditTextWidth = 70; 
MediumEditTextWidth = 120; 
SliderWidth = 170;
VerticalGap = 10;
HelpButtonXOffset = 15;	HelpButtonYOffset = 35;
HelpButtonWidth = 30;	HelpButtonLength = 20;
CropButtonWidth = 70;

// Note:  DActions fields in dialogs should be set up to save
// values each time the user moves a slider, edits a text field, etc.
// The reason is that UGenDlg is set up to copy data from its source GenCon
// to the control each time a view is activated.  If we activate a UGenDlg
// to move a slider, then click in the view, we copy the data from its GenCon
// to its control.  If we hadn't saved the new slider value as it changed, it
// can be wiped out.

Define: SpotColorDialog Using DDWinDef // if the name is ever changed, you must also change UGenDlgBar::GetWindowPosition
fields: Position 390 20 260 260
		Title ~Spot color for NexPress printer~
		AutoPosition 1
		TypeName ~DialogBar~
		Purpose ~SpotColor~
		IActionsText ~[NULL]~
		OActionsText ~[PerformOActions]~
		HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "INEdit.htm" );

Contains:
{

	ypos =  15 ;
	Define: SpotColorImage Using DDWinCtrlDef AsSymbol SpotColorImage
	fields:	TypeName CheckBox
			GenConField ~ISpotColorImage:~
			Text ~Image~
			Position $LeftMargin <ypos> $StaticTextWidth  20
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			Tooltip ~Apply spot color over the image~;

	ypos = <ypos> + 30;
	Define: SpotColorFrame Using DDWinCtrlDef AsSymbol SpotColorFrame
	fields:	TypeName CheckBox
			GenConField ~ISpotColorFrame:~
			Text ~Frame~
			Position SpotColorImage(GetLeft,Position) ,<ypos> $StaticTextWidth 20
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			Tooltip ~Apply spot color over the frame~;

	ypos = <ypos> + 30;
	Define: SpotColorStroke Using DDWinCtrlDef AsSymbol SpotColorStroke
	fields:	TypeName CheckBox
			GenConField ~ISpotColorStroke:~
			Text ~Stroke~
			Position SpotColorFrame(GetLeft,Position) ,<ypos> $StaticTextWidth 20
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			Tooltip ~Apply spot color over the image stroke~;

	ypos = <ypos> + 30;
	Define: SpotColorBevel Using DDWinCtrlDef AsSymbol SpotColorBevel
	fields:	TypeName CheckBox
			GenConField ~ISpotColorBevel:~
			Text ~Bevel~
			Position SpotColorStroke(GetLeft,Position) ,<ypos> $StaticTextWidth 20
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			Tooltip ~Apply spot color over the image bevel~;

	ypos = <ypos> + 30;
	Define: SpotColorFillColor Using DDWinCtrlDef AsSymbol SpotColorFillColor
	fields:	TypeName CheckBox
			GenConField ~ISpotColorIColor:~
			Text ~Background color~
			Position SpotColorBevel(GetLeft,Position) ,<ypos> $StaticTextWidth 20
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			Tooltip ~Apply spot color over the fill color~;

	ypos = <ypos> + 30;
	Define: SpotColorShadow Using DDWinCtrlDef AsSymbol SpotColorShadow
	fields:	TypeName CheckBox
			GenConField ~ISpotColorShadow:~
			Text ~Image and Shadow~
			Position SpotColorFillColor(GetLeft,Position) ,<ypos> $StaticTextWidth 20
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			Tooltip ~Apply spot color over the drop shadow~;

				
	Define: HelpButton Using DDWinCtrlDef
	fields:	TypeName		Button
			Text			~Help~
			Position		10,
							$ypos + 35,
							$HelpButtonWidth $HelpButtonLength
//			DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "RotateNode.htm" ) ;

	Define: OKButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Close~
			Position 50 
			$ypos + 35,
			80  20
			Tooltip ~Close window~;

	Define: PreviewButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Preview~
			IActionsText ~[EnableIfImageNode]~
			DActionsText ~[HandleViewActions([UpdateViewDialogs Preview Invalidate])]~
			OActionsText ~[NULL]~
			Position 140  $ypos + 35,
			80  20
			Tooltip ~Preview Changes~;

}

Hang: SpotColorDialog ~[UI Dialogs]~ ;
