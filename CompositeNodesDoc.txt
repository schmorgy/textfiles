// CompositeNodesDoc.txt

Define:	CompositeNodesMessages Using DDSymbol
	Fields:	Value	~These strings are CompositeNodes related strings used by the user interface.~
	Contains:
	{
		Define: Title				using DDText	Fields: Text ~CompositeNodes Data~
		Define: ReadingRecords		using DDText	Fields: Text ~Reading %1 CompositeNodes~
		Define: ReadRecords			using DDText	Fields: Text ~Read %1 CompositeNodes in %2 seconds~
		Define: DeletingRecord		using DDText	Fields: Text ~Deleting record %1~
		Define: RemovingAllFor		using DDText	Fields:	Text ~Are you sure you want to delete the %1 selected CompositeNodes(s)?~
		Define: MenuChangeField		using DDText	Fields:	Text ~Change Field~
	}

// Hang:	CompositeNodesMessages	~[STRINGS]~ ;	No need to hang these


Include: ~FormattingRoutines~;

//** [Refresh], "Refresh", Refresh Action, F5
NUMERIC RefreshListView()
{
	if ( CompositeNodesDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	Start = Ticks();

	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	if ( FALSE )
	{
		if ( MessageBox( Translate(DBMessages,LargeQuery,~<DocumentQuery>~,~<Count>~),YESNO ) != YES )
		{
			return TRUE;
		}
	}

	CompositeNodesDataWindow( StatusBar,Text,Translate( CompositeNodesMessages,ReadingRecords,<Count> ) );

	SetDocumentData( List(GetObject) );	
	CompositeNodesDataWindow( RefreshWindow );

	Duration = (Ticks() - <Start>) / 1000;

//	GetChoicesList();

	return CompositeNodesDataWindow( StatusBar,Text,Translate(CompositeNodesMessages,ReadRecords,~<Count>~,~<Duration>~) );
}


// Select field that is a Combo Box
NUMERIC RefreshComboBox()
{
	CompositeNodesDataView( GetActiveCell,row,col );

	CompositeNodesDataView( GetColumnName,<col>,ColumnName );

	if ( ~<ColumnName>~ == ~PRODUCTID~ )  // name must be capitalized
	{	GetChoicesList();	}

	return TRUE;

}


//** [Options]
NUMERIC AllOptions()
{
	return CompositeNodesDataView( DisplayMenu,CompositeNodesListViewMenu,0,0 );

}


//** [New], "New"
NUMERIC AddRecord()
{
	Document( Doc,This );
	theProductID = ~~;

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	if ( CompositeNodesDataView( GetSelectedRows,SelectedRows ) )		
	{
		SelectedRows( GetFirst,theRecord );
		theProductID = ~<$con.theRecord[ProductID]>~;
	}

	NewRow( Set,ProductID,~<theProductID>~ );

	RowBeingAdded = CompositeNodesDataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate(UIMessages,AddRowFailed) ); }

	CompositeNodesDataView( SetActiveCell,<RowBeingAdded>,~ProductID~ );

	return TRUE;
}



//** [Find], "Find"
NUMERIC Search()
{
	Actions = ACTIONS ( Doc( ~Search~ Open SearchDoc "Search( CompositeNodes );" ) );
	return PerformActions( Actions );
}


//** [Save], "Save Changes"
NUMERIC SaveAllChanges()
{
	while ( CompositeNodesDataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


//** [Cancel], "Cancel Changes"
NUMERIC RollBackAllChanges()
{
	if ( !CompositeNodesDataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( Translate(UIMessages,CancelChanges),YESNO ) != YES )
		{ return FALSE; }
				
	while ( CompositeNodesDataView( PendingChanges ) )
	{
		CompositeNodesDataView( RollBackChanges );
	}

	return TRUE;
}

//** [Delete], "Delete", DeleteRecords Action
NUMERIC DeleteRecord()
{

	if ( !CompositeNodesDataView( GetSelectedRows,RecordsToDelete ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	count = RecordsToDelete( ChildCount );

	if ( MessageBox( Translate(CompositeNodesMessages,RemovingAllFor,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	StringList( RowsToDelete,New );

	num = 1;
	while ( RecordsToDelete( GetNext,theRecord ) )
	{
		CompositeNodesDataWindow( StatusBar,Text,Translate(CompositeNodesMessages,DeletingRecord,~<$con.theRecord[ProductID]>, <$con.theRecord[NodeName]>~) );
		Cmd = ~Delete From CompositeNodes Where ProductID = '<$con.theRecord[ProductID]>' AND NodeName = '<$con.theRecord[NodeName]>'~;

		if ( !dBase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		RowsToDelete( AddString,RecordsToDelete(GetCurrentPosition) );

		dBase( LogActivity,Msg,~Deleted CompositeNodes <$con.theRecord[OrderID]> - <$con.theRecord[Choice]~,Type,Info );

		++num;
	}

	CompositeNodesDataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}



Include: ~ChgFldDlg~;
NUMERIC SeeChangeField()
{
	return DisplayChangeFieldDlg(CompositeNodesDataView);
}


VOID OnKeydown()
{
	GenCon( View,GetActiveView );

	Key = View( GetLastKeyStateless,KeyString );
	
	if (  !View( PerformMenuAction,CompositeNodesListViewMenu,~<KeyString>~ ) )
	{
		CompositeNodesDataView( DisplayMenu,CompositeNodesListViewMenu,0,0  );
	}
}


//** ChangeRecord Action, (and result of Save)
// Following 3 routines are all only used as result of changing the record
//     ChangeRecord(), AddNew(), UpdateExisting()
NUMERIC ChangeRecord()
{
	if ( !CompositeNodesDataView( GetChangedRow,ChangedCompositeNodes,OrigCompositeNodes,ChangedRow,IsNewRow ) )
		{ return Warning(  Translate(UIMessages,NoRowsSelected) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	Key = STR ( ProductID = '<$con.OrigCompositeNodes[ProductID]>' AND NodeName = '<$con.OrigCompositeNodes[NodeName]>');
	Query = ~Select * From CompositeNodes Where <Key>~;

	if ( <IsNewRow> )
	{
		if (!AddNew( ChangedCompositeNodes,OrigCompositeNodes,Query,Key ))
			{ return FALSE; }
	}
	else
	{
		if (!UpdateExisting( ChangedCompositeNodes,OrigCompositeNodes,Query,Key ))
			{ return FALSE; }
	}

	return TRUE;
}


NUMERIC AddNew( &ChangedCompositeNodes,&OrigCompositeNodes,&Query,&Key )
{
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( UpdateFrom,ChangedCompositeNodes,~<Key>~,TRUE ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
	}

	CompositeNodesDataView( CommitChanges );

	return TRUE;
}



NUMERIC UpdateExisting( &ChangedCompositeNodes,&OrigCompositeNodes,&Query,&Key )
{
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( UpdateFrom,ChangedCompositeNodes,~<Key>~,FALSE ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
	}

	CompositeNodesDataView( CommitChanges );

	return TRUE;
}


//** Close Action
NUMERIC OnCloseCompositeNodesDataView()
{
	if ( CompositeNodesDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	CompositeNodesDataWindow( ForceCloseWindow );

	return TRUE;
}


//** RightClick Action
NUMERIC RightClickInListView()
{
	return CompositeNodesDataView( DisplayMenu,CompositeNodesListViewMenu );
}


// Get list of all available products
NUMERIC GetChoicesList()
{
//	StringList(ProdChoicesList,New);

	theQuery = ~Select ID From Products where Multiple <> 0 Order By Sequence~;	
	
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);

	if (<count> > 0)
	{
		List( MakeStringList,ProdChoicesList,ID );
		GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );
		Fields( GetByName,ProductID,ColumnDefinition );
		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,ProdChoicesList(GetCopyOf) );
		CompositeNodesDataView( SetComboBox,ColumnDefinition,ProductID);
	}

	else
	{
	}

	return TRUE;
}





FirstTime = TRUE;

NUMERIC Init(WhichTitle,DocumentQuery)
{

	theTitle = Translate(CompositeNodesMessages,Title);
	theTitle = ~<WhichTitle>~ == ~~ ? ~<theTitle>~ : ~<theTitle> - <WhichTitle>~;

	CompositeNodesDataWindow( Set,Title,~<theTitle>~ );
	Global( WhichTitle,DocumentQuery);

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !PGenConList( List,Connect,CursorLocation,Client,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{ 
			List(GetErrorDescription,0,theErr);
			Error( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
		}

		Count = List( NumEntries );

		StatusBarText( Translate(CompositeNodesMessages,ReadingRecords,<Count>) );

		Start = Ticks();

		SetDocumentData( List(GetObject) );

		WindowLocation = ~<$User.WindowLocation[List]>~;

		if ( ~<WindowLocation>~ != ~~ )
			{ CompositeNodesDataWindow( Set,Position,~<WindowLocation>~ ); }

		DefineMenu( );

		if ( !CompositeNodesDataWindow( CreateWindow,~CompositeNodes~ ) )
			{ Error( Translate(UIMessages,CreateWindowFailed,~CompositeNodes~) ); }

//		GetChoicesList();

		Duration = (Ticks() - <Start>) / 1000;

		return CompositeNodesDataWindow( StatusBar,Text,Translate(CompositeNodesMessages,ReadRecords,~<Count>~,~<Duration>~) );
	}

	Document( Doc,This,SetTitle,~<theTitle>~ );
	return RefreshListView();
}



Include: ~ExportSelectedToFile~;


VOID DefineMenu()
{
	Define:	CompositeNodesListViewMenu Using DDMenuDef AsSymbol CompositeNodesListViewMenu
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			Define:	AddRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuAdd )
						IDText		~ID~
						ActionsText  ACTION Exec ( AddRecord() )
						AcceleratorKey	~N~

			Define:	Search	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuFind )
						IDText		~ID~
						ActionsText  ACTION Exec ( Search() )
						//AcceleratorKey	~S~

			Define:	NULL1 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SaveAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuSaveChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( SaveAllChanges() )

			Define:	ForgetAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuCancelChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( RollBackAllChanges() )

			Define:	DeleteRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuDelete )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteRecord() )

			Define:	Refresh	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuRefresh )
						IDText		~ID~
						ActionsText  ACTION Exec ( RefreshListView() )

			Define:	NULL2 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SeeChangeField	using	DDMenuItemDef
				Fields:	Text		Translate( CompositeNodesMessages,MenuChangeField )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeChangeField() )

			Define:	NULL4 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	Export	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuExport )
						IDText		~ID~
						ActionsText  ACTION Exec ( ExportSelectedToFile(CompositeNodesDataView,CompositeNodes) )

		}

	Global( CompositeNodesListViewMenu );
}




Include: ~DefineStdGridButtons~;

	if ( !GenCon( TableDefinition,GetFrom,CompositeNodes,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The CompositeNodes Table is not properly defined~ ); }

	ButtonWidth = 55;  ButtonHeight = 20;  hGap = 1; vGap = 2;

	Define: CompositeNodesDataWindow Using DDWinDef
		Fields:	Title					Translate(CompositeNodesMessages,Title)
				Position				0 0 50 35
				IsPositionPercent		T
				EnableStatusBar			F
				TypeName				SplitterWnd
				SplitterRows			~2 10 90~
				SplitterColumns			1

		Contains: INLISTORDER
		{
		Define: ControlView Using DDViewDef AsSymbol ControlView
			Fields:			ViewType				FormView
							KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
							HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "OpenTableData.htm" )
				Contains:
				{
					position = DefineStdGridButtons(CompositeNode) + 10;
				}
			
		Define: CompositeNodesDataView Using DDViewDef AsSymbol CompositeNodesDataView
			Fields:	ViewType				~ListView~
					GridControlTypes		TableDefinition( GetReferenceTo,Fields )
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					RefreshActionsText		ACTION Exec ( RefreshListView() )
					ComboBoxActionsText		ACTION Call ( RefreshComboBox() )
					KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
					CloseActionsText		ACTION Call ( OnCloseCompositeNodesDataView() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "OpenTableData.htm" )
					ViewDataType			Text

		}

