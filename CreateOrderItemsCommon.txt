// CreateOrderItems.txt
//
// Entry Point:  CreateOrderItems(&dBase,&SelectedImages,ProductID,OrderID,Qty,ItemType,&Stop);
//		Where: SelectedImages is a ScannerUGenCon with list of ScannerUGenCon children
//							  w/ "Path" field for Image - this can either be:
//							  1) actual complete image path
//							  2) <$@Image.PathOfOrderRollFrame['<OrderID>','<Roll>','<Frame>']>
//							  3) or any other valid macro.
//				Stop is optional Boolean arguement which when set to TRUE will stop creating
//					order items. 
//               CreateOrderItemsFromImage( &dBase,ImageFile,ProductID,OrderID,Qty,ItemType )
//		Where: ImageFile is an ascii string of the Path for the Image, as specified above.
//

// Globals used defined outside this function to cause actions to occur
// If want the product to be opened after created, define the variable "OpenLayoutAfterCreating"
// If you want the OrderItems thumbnail to update, define the variable "UpdateItemsAfterCreating"
//    updating of the OrderItems thumbnails cannot be done from a Thread

// Most of these functions are called from a Thread.  All are Thread safe.
// It is assumed the thread has a function ShowWarning(msg) to display Warning msgs,
//	and a functionShowProgress(msg) to display progress on the status bar,
// and that nonThreads do not have these function.

// Want entry point that takes a ScannerPGenConList of SelectedImages?

// 1 images -> 1 product (could be single Layout, Package, or Multiple)

IncludeClass(BaseOrderItem);
NUMERIC CreateOrderItemsFromImage( &dBase,ImageFile,ProductID,OrderID,Qty,ItemType )
{
	if (~<Qty>~ == ~~ )
	{
		Qty = 1;
	}
	GenCon( SelectedImages,NewFrom,DDPath );
	GenCon( SelectedImage,NewFrom,DDPath );
	SelectedImage( Set,Path,~<ImageFile>~ );
	SelectedImages( InsertBack,SelectedImage );

	return CreateOrderItems( dBase,SelectedImages,~<ProductID>~,~<OrderID>~,<Qty>,~<ItemType>~ );

}

// n images -> 1 product (could be single Layout, Package, or Multiple)
// SelectImages is a ScannerUGenCon
NUMERIC CreateOrderItems( &dBase,&SelectedImages,ProductID,OrderID,Qty,ItemType,&Stop )
{
	if (!DefinedAndNotNull( Stop ) )
	{
		Stop = FALSE;
	}

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
		{ return TRUE; }

	Query = ~Select * From Products Where ID = '<ProductID>'~;
	if ( !PGenConList( List,Connection,dBase,Cursor,KeySet,GetRecordFor,~<Query>~,ProductRec ) )
	{
		dBase( GetErrorDescription,theErr );
		return	DoWarning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( ProductRec( GetNumeric,Package ) )
	{
		success = CreatePackagesForSelectedImages( dBase,~<ProductID>~,~<OrderID>~,SelectedImages,
												   <Qty>,~<ItemType>~,Stop );
		// SetTimer( 1,2000,~DelayedNotifyAffectedDocuments()~ );
		//   Needed? Display thumbnail at lower levels.
		// Need WaitCursor( End ); Even if SetTimer?

		// Log # of order items added to order? (at next level)

		return <success>;
	}

	// individual layout

	IsMultiple = FALSE;
	JobPath = GetFullLayout( ~<$pcon.ProductRec[ProductLayoutPath]>~,IsMultiple );

	if ( IsNull( ~<JobPath>~ ) )
		{ return FALSE; }
		
	DoStatusBarText( ~Reading <JobPath>~ );
	// disadvantage instead of going through ImagesThumbnailView?

	if ( !Document( Job,ParseFile,~<JobPath>~ ) )
	{
		DoWarning( ~An error occured while parsing the job at <JobPath>~ );
		return FALSE;
	}

	Index = 0;

	if ( !Job( GetRenderList,<Index++>,RenderList ) )
	{ 
		return DoWarning( ~There was no render list for <JobPath>~ );
	}

	if ( <IsMultiple> )
	{
		RenderList( SetLayoutPath,~<$pcon.ProductRec[ProductLayoutPath]>~ );
		// Is anything done with this?
	}

	pos = Count = 0;

	FillCount = RenderList( Fill,SelectedImages );

	if (<FillCount> < 1)
	{
		if ( !WriteOrderItemFromRenderList( dBase,~<OrderID>~,RenderList,~<ProductID>~,~~,
											-1,<Qty>*<ImagesCount>,~<ItemType>~ ) )
		{ 
			return FALSE;
		}
		Count = 1;
	}

	while ( (<FillCount> > 0 ) && !<Stop> )
	{
		if ( !WriteOrderItemFromRenderList( dBase,~<OrderID>~,RenderList,~<ProductID>~,~~,
											-1,<Qty>,~<ItemType>~ ) )
		{ 
			return FALSE;
		}

		FillCount = RenderList( Fill,SelectedImages );
		++Count;

	}

	DoStatusBarText( ~Added <Count> Items to Order <OrderID> with <ProductID>~ );

	return TRUE; //SetTimer( 1,2000,~DelayedNotifyAffectedDocuments()~ ); already commented out
}


NUMERIC CreatePackagesForSelectedImages( &dBase,PackageID,OrderID,&SelectedImages,Qty,ItemType,&Stop )
{

	Query = ~Select * From Packages Where PackageID = '<PackageID>' Order By PackageID,Sequence~;

	if ( !PGenConList( PackageList,Connection,dBase,Cursor,Static,Query,~<Query>~ ) )
	{
		dBase( GetErrorDescription,theErr );
		return DoWarning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}
	ItemsPerPkg = PackageList(NumEntries);
	Count = 0;

	TypeName = ~<PackageID>~;
	while ( ( SelectedImages( GetNext,Image ) ) && !<Stop> )
	{
		PkgQty = <Qty>;
		while ( <PkgQty--> > 0 )
		{
			CreatePackage( dBase,PackageList,~<OrderID>~,~<$con.Image[Path]>~,~<ItemType>~,~<TypeName>~ );
			// Should check != ~~ (error)?  What do if is? 
			Count = <Count> + <ItemsPerPkg>;
		}
	}

	DoStatusBarText( ~Added <Count> Items to Order <OrderID> with <PackageID>~ );

	return TRUE;

}


NUMERIC CreatePackage( &dBase,&PackageList,OrderID,ImagePath,ItemType,TypeName )
{
	PackageList( GetConnection,dBase );  // Is this needed? Had where passing in dBase, and when not

	More = PackageList( GetFirst,Product );

	while ( <More> )
	{
		ProductID = ~<$pcon.Product[ProductID]>~;
		TargetNode = ~<$pcon.Product[TargetNode]>~;
		Quantity = ~<$pcon.Product[Quantity]>~;

		if ( ~<ProductID>~ == ~~ )	{ continue; }
		
		if ( dBase( GetValuesFor,~Select ProductLayoutPath From Products Where ID = '<ProductID>'~,ProductLayoutPath ) )
		{
			CreateOrderItem( dBase,~<OrderID>~,~<ProductID>~,~<ProductLayoutPath>~,~<TargetNode>~,
							~<ImagePath>~,~<Quantity>~,~<ItemType>~,~<TypeName>~ );
		}

		More = PackageList( GetNext,Product );
	}

	return TRUE;
}


// 1 image -> 1 layout
// Currently, this routine is only called when Product is a Package
// A Package cannot contain a Multiple layout.  Remove Multiple handling or Keep?
// Returns path of Job that was created, or Null string if not created.
STR CreateOrderItem( &dBase,OrderID,ProductID,TheLayoutPath,TargetNode,ImagePath,Quantity,ItemType,TypeName )
{
	IsMultiple = FALSE;
	LayoutPath = GetFullLayout( ~<TheLayoutPath>~,IsMultiple );

	if ( IsNull( ~<LayoutPath>~ ) )
		{ return ~~; }

	if ( !Defined( Quantity ) ) { Quantity = 1; }

	newSeq=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );
	NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );

	DoStatusBarText( ~Filling Item <NextOrderItem> for Order <OrderID>~ );

	JobPath = CreateJobPath( ~<OrderID>~,~<NextOrderItem>~ );

	if ( !File( Job,Open,~<JobPath>~,Create,Write ) )	// CREATE AND OPEN THE JOB
	{
		DoWarning( Translate(UIMessages,CouldNotOpen,~<JobPath>~ ));
		return ~~;
	}

	Job( ~FileType: Job~ );
	Job( ~Use: |<LayoutPath>|~ );

	if ( <IsMultiple> )
	{
		Job( ~LayoutPath: |<TheLayoutPath>|~ );
	}

	if ( <TargetNode> <= 0 )
	{
		Job( ~Main:~ );
	}
	else if ( <IsMultiple> )
	{
		Job( ~CC: <TargetNode>~ );
	}
	else
	{		
		Job( ~IC: <TargetNode>~ );
	}
	Job( ~     IFile: |<ImagePath>|~ );

	Job( Close );

	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );
	Files( Delete,~<OrderItemPreviewPath>~ );

	if ( !AddOrderItemToDataBase(dBase,<NextOrderItem>,~<OrderID>~,~<ProductID>~,~<Quantity>~,<newSequence>,~<JobPath>~,~<ItemType>~,~<TypeName>~ ) )	// ADD THE ORDER ITEM TO THE DATABASE
	{
		Files( Delete,~<JobPath>~,Delete,~<OrderItemPreviewPath>~ );
		// Need to delete OrderItemPreviewPath? Only path created.  Not done below.
		return ~~;
	}

	MaintainThisOrderItem( dBase,~<OrderID>~,<NextOrderItem>,~<JobPath>~ );

	if (Defined(OpenLayoutAfterCreating))
	{
		Open( Any,~<JobPath>~ );
	}

	return ~<JobPath>~;
}

NUMERIC MaintainThisOrderItem( &Connection,OrderID,ID,ItemJobPath )
{
	if ( GetWorkStationSettings( ~MaintainOrderItemImages_<$App.Instance>~,Manual,Manual,Enabled ) )
	{
		if ( <Enabled> && MakeNumber(~<Manual>~) )
		{
			return TRUE;
		}
	}	

	if ( !Document( Job,ParseFile,~<ItemJobPath>~ ) )
	{
		return Warning( Translate( ~An error occured while parsing the layout at <ItemJobPath>~ ) );
	}

	if ( !Job( GetRenderList,0,RenderList ) )
	{ 
		return Warning( Translate( ~There was no render list for <ItemJobPath>~ ) );
	}

	RenderList( SetConnection,Connection );
	RenderList( SetOrderID, ~<OrderID>~ );
	RenderList( SetItemID, ~<ID>~ );

	RenderList( CreatePreviewIcon, ~<ItemJobPath>~ );

	if ( !RenderList( MaintainCrossReference,~<OrderID>~,~<ID>~,TRUE ) )
	{
		return Warning( Translate( ~Error maintaining OrderItem for <OrderID>,<ID>~ ) );
	}

	return TRUE;
}


// Returns OrderItemID item written to.
NUMERIC WriteOrderItemFromRenderList( &dBase,OrderID,&RenderList,ProductID,SrcJobPath,NextOrderItem,Qty,ItemType )
{
	JobPath = ~<SrcJobPath>~;

	NewItem = $NextOrderItem < 0;

	if ( <NewItem> )
	{
		NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID )
		newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence )

		JobPath = CreateJobPath( ~<OrderID>~,<NextOrderItem> );
	}

	DoStatusBarText( ~Filling Item <NextOrderItem> for Order <OrderID>~ );

	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );
	Files( Delete,~<OrderItemPreviewPath>~ );
	
	RenderList( CreatePreviewIcon, ~<JobPath>~ );

	if ( <NewItem> )
	{
		if ( !AddOrderItemToDataBase(dBase,<NextOrderItem>,~<OrderID>~,~<ProductID>~,<Qty>,<newSequence>,~<JobPath>~,~<ItemType>~,~~ ) )	
		{
			Files( Delete,~<JobPath>~ );	// ON FAILURE, REMOVE THE JOB
			return FALSE;
		}
	}

	RenderList( SetConnection, dBase );
	RenderList( SetOrderID, ~<OrderID>~ );
	RenderList( SetItemID, ~<NextOrderItem>~ );

	RenderList( SetFileType,~Job~ );

	if ( !RenderList( WriteJob,~<JobPath>~ ) )
		{ return DoWarning( ~Failed to write <JobPath>~ ); }

	//RenderList( SetImageChange,TRUE ); // Now do it!

//	if ( !RenderList( MaintainCrossReference,~<OrderID>~,~<NextOrderItem>~,TRUE ) )
//		{ return DoWarning( ~Failed to MaintainCrossReference for <JobPath>~ ); }



	if (Defined(OpenLayoutAfterCreating))
	{
		Open( Any,~<JobPath>~ );
	}

	if ( Authorized( ~DP1~ ) )
	{
		// Tell the Print Preview (PrintSequenceWin.txt to update the view if it is open)
		Action = STR ( PrintingSequenceWin "AddOrderItem( ~<OrderID>~, <NextOrderItem> );" );
		PerformDocActions( Action );
	}

	return <NextOrderItem>;
}

NUMERIC AddOrderItemToDataBase(&dBase,ID,OrderID,ProductID,Quantity,Sequence,JobPath,ItemType,TypeName,Subsequence,GroupID)
{
	Subsequence =  Numeric(~<Subsequence>~);
	GroupID =  Numeric(~<GroupID>~);
	
	PreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );

	theSQL = ~Insert Into OrderItems (ID,OrderID,ProductID,Quantity,Sequence,Type,TypeName,JobPath,PreviewPath,Printable,Subsequence,GroupID)
							VALUES (<ID>,'<OrderID>','<ProductID>',<Quantity>,<Sequence>,'<ItemType>','<TypeName>','<JobPath>','<PreviewPath>',1,<Subsequence>,<GroupID>)~;

	if ( !dBase( CMD,~<theSQL>~ ) )
	{
		dBase( GetErrorDescription,theErr );
		DoWarning( Translate(DBMessages,CmdFailed,~<theSQL>~,~<theErr>~) );
		return FALSE;
	}

	Log( Session,~Created Job for Order <OrderID>, Item <ID>. Path is <JobPath>~ );

	
	if ( Defined(UpdateItemsAfterCreating) && (!FunctionDefined(ShowWarning)) ) // want displayed & not a Thread
	{
		ShowNewOrderItem( ~<OrderID>~,~<ID>~ );  // Keep for SubjectInfo and OrderDeliverables?
	}

	return TRUE;
}


// Can not be called from a Thread
VOID ShowNewOrderItem( OrderID,ID )
{
	Actions = ACTION Doc ( <UpdateItemsAfterCreating> "AddOrderItemToList( ~<OrderID>~,~<ID>~ );" );
	QueueContentsAfter( Actions,1000 );
}


// Not currently called
VOID DelayedNotifyAffectedDocuments()
{
	KillTimer( 1 );

//	ImagesThumbNailWindow( NotifyAffectedDocuments,~OrderID ProductID~ );
	NotifyAffectedDocuments(~OrderID ProductID~ );
}



STR CreateJobPath( OrderID,Item )
{
	JobPath = ~<$App.ShareDirectory>\OrderJobs\<OrderID>~;
	JobName = ~Job_<OrderID>_<Item>~;

	Directory( Create,~<JobPath>~ );

	return ~<JobPath>\<JobName>~;
}


STR MakePreviewPathFromPath( Path,CreateDirectory )
{
	if ( $CreateDirectory )
		{ Directory( Create,~<$str.$Path.Path>\Preview~ ); }

	Path = ~<$str.$Path.Path>\Preview\<$str.$Path.FileName>.jpg~;

	return ~<Path>~;
}


NUMERIC DoWarning( Msg )
{
	if ( FunctionDefined(ShowWarning) ) // Thread's function
	{	Invoke( ShowWarning,~<Msg>~ );	}

	else
	{	Warning( ~<Msg>~ );	}

	return FALSE;

}

VOID DoStatusBarText( Msg )
{
	if ( FunctionDefined(ShowWarning) ) // Thread's function
	{	Invoke( ShowProgress,~<Msg>~ );	}

	else
	{	StatusBarText( ~<Msg>~ );	}
}


