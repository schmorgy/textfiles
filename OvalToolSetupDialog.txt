DialogWidth = 300;
DialogHeight = 260;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 200;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;
hGap = vGap = 5;


EditTextWidth = 50;
EditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 50;
ButtonHeight = 20; 
VerticalSeparation = 30;
InitialVerticalPosition = 70;
IncludeClass(BaseHtml);
GenCon(OvalToolParameters,GetGenCon,OvalToolParameters);

VOID CreateDialog()
{
	Define: OvalToolSetupDialog Using DDWinDef
	fields: Position 100 100 <DialogWidth> <DialogHeight>
			Title ~<$TR.LayoutsAndJobs(OvalToolProperties)>~
			TypeName ~Dialog~
			OActionsText ACTION EXEC ( CancelPressed() )
			HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "Ovaltool.htm" )

	Contains: INLISTORDER
	{

		ypos = 10;
		Define: ZZOvalExpansionTypeGroupBox Using DDWinCtrlDef AsSymbol OvalExpansionTypeGroupBox
		fields:	TypeName GroupBox
				Text ~<$TR.LayoutsAndJobs(RectToolStyle)>~
				Position $LeftMargin <ypos> 250  110;

		Define: NormalRadioButton Using DDWinCtrlDef AsSymbol NormalRadioButton
		fields: TypeName RadioButton  
				Position $LeftMargin + 10 , OvalExpansionTypeGroupBox(GetTop,position) + $vGap * 3 ,220 ,20 
				IActionsText ~[Get]~
				DActionsText	~[
								EXEC("dlg( EnableControls,FALSE,UnitsComboBox )")								
								CheckButton(NormalRadioButton) 
								UncheckButton(ConstantAspectRatioRadioButton) 
								UncheckButton(FixedSizeRadioButton) 
								Disable(WidthEditText)
								Disable(HeightEditText)
								Save
								]~
				OActionsText ~[Save]~
				GenConName OvalToolParameters
				GenConField ~Style~
				RadioTrueValue ~N~
 				Text ~<$TR.LayoutsAndJobs(RectToolNormal)>~
				Tooltip ~<$TR.LayoutsAndJobs(OvalTooltip)>~;

		Define: ConstantAspectRatioRadioButton Using DDWinCtrlDef AsSymbol ConstantAspectRatioRadioButton
		fields: TypeName RadioButton  
				Position $LeftMargin + 10 ,  NormalRadioButton(GetBottom,position) + $vGap ,220 ,20 
				IActionsText ~[Get]~
				DActionsText	~[
								EXEC("dlg( EnableControls,FALSE,UnitsComboBox )")								
								CheckButton(ConstantAspectRatioRadioButton) 
								UncheckButton(NormalRadioButton)
								UncheckButton(FixedSizeRadioButton)
								Enable(WidthEditText)
								Enable(HeightEditText)
								Save
								]~
				OActionsText ~[Save]~
				GenConName OvalToolParameters
				GenConField ~Style~
				RadioTrueValue ~C~
 				Text ~<$TR.LayoutsAndJobs(RectToolConstrain)>~
				Tooltip ~<$TR.LayoutsAndJobs(OvalConstantAspectRatioTooltip)>~;

		Define: FixedSizeRadioButton Using DDWinCtrlDef AsSymbol FixedSizeRadioButton
		fields: TypeName RadioButton  
				Position $LeftMargin + 10 , ConstantAspectRatioRadioButton(GetBottom,position) + $vGap ,220 ,20 
				IActionsText ~[Get]~
				DActionsText	~[
								EXEC("dlg( EnableControls,TRUE,UnitsComboBox )")								
								CheckButton(FixedSizeRadioButton) 
								UncheckButton(ConstantAspectRatioRadioButton)
								UncheckButton(NormalRadioButton);
								Enable(WidthEditText)
								Enable(HeightEditText)
								Save
								]~
				OActionsText ~[Save]~
				GenConName OvalToolParameters
				GenConField ~Style~
				RadioTrueValue ~F~
 				Text ~<$TR.LayoutsAndJobs(RectToolFixedSize)>~
				Tooltip ~<$TR.LayoutsAndJobs(OvalFixedSizeTooltip)>~;

		Define: WidthStaticText Using DDWinCtrlDef AsSymbol WidthStaticText
		fields:	TypeName StaticText
				Text ~<$TR.LayoutsAndJobs(RectToolWidth)>~
				Position $LeftMargin + 10, OvalExpansionTypeGroupBox(GetBottom,position) + $vGap , $StaticTextWidth,  20;
		Define: WidthEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position (WidthStaticText(GetRight,Position) + $hGap) OvalExpansionTypeGroupBox(GetBottom,position) + $vGap 80 20
				GenConName OvalToolParameters
				GenConField ~Width~
				IActionsText ~[GET]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~<$TR.LayoutsAndJobs(OvalToolWidth)>~		
				IsEnabled (~<$con.OvalToolParameters[Style]>~ != N) ? T : F;


		Define: HeightStaticText Using DDWinCtrlDef AsSymbol HeightStaticText
		fields:	TypeName StaticText
				Text ~<$TR.LayoutsAndJobs(RectToolHeight)>~
				Position $LeftMargin + 10, WidthStaticText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: HeightEditText Using DDWinCtrlDef AsSymbol HeightEditText
		fields:	TypeName MaskedEditText
				Position (HeightStaticText(GetRight,Position) + $hGap) HeightStaticText(GetY,position) 80 20
				GenConName OvalToolParameters
				GenConField ~Height~
				IActionsText ~[GET]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip ~Enter the height of the oval~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~<$TR.LayoutsAndJobs(OvalToolHeight)>~		
				IsEnabled (~<$con.OvalToolParameters[Style]>~ != N) ? T : F;

		Define: UnitsStaticText Using DDWinCtrlDef AsSymbol UnitsStaticText
		fields:	TypeName StaticText
				Text ~<$TR.LayoutsAndJobs(RectToolUnits)>~
				Position $LeftMargin + 10 HeightStaticText(GetBottom,position)+ $vGap  $StaticTextWidth  20

		Define: UnitsComboBox Using DDWinCtrlDef AsSymbol UnitsComboBox
		fields:	TypeName SComboBox
				Position HeightEditText(GetX,position)  UnitsStaticText(GetY,position)  100  90
				GenConName OvalToolParameters
				GenConField ~UnitOfMeasure~
				DropDownActionsText ACTION EXEC ( SetUnitsComboList(); )
				DActionsText ACTION EXEC ( SaveUnitsComboList(); )
				Tooltip ~<$TR.LayoutsAndJobs(RectToolUnitsTooltip)>~

		Define: FeatherStaticText Using DDWinCtrlDef AsSymbol FeatherStaticText
		fields:	TypeName StaticText
				Text ~<$TR.LayoutsAndJobs(RectToolFeather)>~
				Position $LeftMargin + 10 UnitsStaticText(GetBottom,position)+ $vGap  $StaticTextWidth  20

		Define: FeatherEditText Using DDWinCtrlDef AsSymbol FeatherEditText
		fields:	TypeName MaskedEditText
				Position (FeatherStaticText(GetRight,Position) + $hGap) FeatherStaticText(GetY,position) 80 20
				GenConName OvalToolParameters
				GenConField ~Feathering~
				IActionsText ~[GET]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				Tooltip ~<$TR.LayoutsAndJobs(OvalToolFeatherTooltip)>~;


		Define: OKButton Using DDWinCtrlDef AsSymbol OKButton
		fields:	TypeName DefaultButton
				Text ~OK~
				Position <DialogWidth> - 80 , FeatherEditText(GetBottom,position) + $vGap,  <SmallButtonWidth> , <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( Done() )
				OActionsText ~[NULL]~
				Tooltip ~<$TR.LayoutsAndJobs(RectToolSaveTooltip)>~;
	}

	ypos = OKButton(GetBottom,Position) + 50;

	if ( !Defined(dlg) )
	{
		OvalToolSetupDialog(Set,Position,~350 60 <DialogWidth> <ypos> ~);
		GenDlg( dlg,Definition,OvalToolSetupDialog,Data,OvalToolParameters,Document,$Doc.This,New,Temporary );
		Global( dlg );
	}

	else
	{
		dlg (SetFocus);
	}

}

Include: ~UpdateUserSettings~;


VOID Done()
{
	dlg( GetInput );

	UpdateUserSettings( OvalToolParameters,OvalToolParameters );
	
	dlg( End );
	Exit();
}

VOID CancelPressed()
{
	dlg( End );
	Exit();
}

VOID ReOpen()
{
	dlg( SetFocus );
}


VOID EnableOrDisableUnitsCombo()
{
	if ( ~<$Con.OvalToolParameters[Style]>~ == ~C~ )
	{
		dlg( EnableControls,FALSE,UnitsComboBox );
	}
	else if ( ~<$Con.OvalToolParameters[Style]>~ == ~N~ )
	{
		dlg( EnableControls,FALSE,UnitsComboBox );
	}
	else if ( ~<$Con.OvalToolParameters[Style]>~ == ~F~ )
	{
		dlg( EnableControls,TRUE,UnitsComboBox );
	}

}
VOID SaveUnitsComboList()
{
	// called when the user changes the value in the combo box
	// saves the translation of either "Inches" or "Centimeters" or "Millimeters"
	// or "Pixels" inRectToolParameters GenCon, UnitOfMeasure field
	SelectedIndex = dlg( ComboBox,UnitsComboBox, GetSelectedIndex); 

	StringList(MyUnitsList,New);
	if ( GenCon( PreviewOptions,GetFrom,PreviewOptions,~[GENCONS]~ ) )
	{
		if (<SelectedIndex> == 0)
		{
			PreviewOptions( GetValue, PreferredUnits, CurrentUnits);
			OvalToolParameters( SetValue, UnitOfMeasure, ~<$Tr.LayoutsAndJobs(<CurrentUnits>)>~);
			// inches, centimeters or millimeters
		}
		else if (<SelectedIndex> == 1)
		{
			OvalToolParameters( SetValue, UnitOfMeasure, ~<$Tr.LayoutsAndJobs(Pixels)>~);
		}
	}
	else
	{
		// should never happen
		OvalToolParameters( SetValue, UnitOfMeasure, ~<$Tr.LayoutsAndJobs(<CurrentUnits>)>~);
	}
}

VOID SetUnitsComboList()
{
	// sets up the translated strings for the UnitsComboBox,
	// adds the strings to the Units combo box,
	// selects the proper value,
	// and sets the translated tooltip
	StringList(MyUnitsList,New);
	if ( GenCon( PreviewOptions,GetFrom,PreviewOptions,~[GENCONS]~ ) )
	{
		// Does user prefer inches, centimeters, or millimeters?
		PreviewOptions( GetValue, PreferredUnits, CurrentUnits);
		TranslatedValue = ~<$TR.LayoutsAndJobs(<CurrentUnits>)>~;
		MyUnitsList(AddString,~<TranslatedValue>~);
	}
	else
	{
		TranslatedValue = ~<$TR.LayoutsAndJobs(Inches)>~;
		MyUnitsList(AddString,~Inches~);
	}

	MyUnitsList(AddString,~<$TR.LayoutsAndJobs(Pixels)>~);

	// Does user prefer pixels or (inches, cm or mm)?
	// CurrentUnits returns translated in the user's language
	OvalToolParameters( GetValue, UnitOfMeasure, TranslatedUnits);
	dlg( SetControlFromStringList,UnitsComboBox,MyUnitsList,NoSelection );

	if (SimilarStr(~<TranslatedUnits>~,~<$Tr.LayoutsAndJobs(Pixels)>~))
	{
		dlg( SetControlValue,UnitsComboBox, ~<$TR.LayoutsAndJobs(Pixels)>~);
		dlg( SetValueInCtrlDef, UnitsComboBox, ~Tooltip~, ~<$TR.LayoutsAndJobs(Pixels)>~);
 
	}
	else
	{
		dlg( SetControlValue,UnitsComboBox, ~<TranslatedValue>~); 
		dlg( SetValueInCtrlDef, UnitsComboBox, ~Tooltip~, ~<TranslatedValue>~);
	}
}

// SelectUnits is called from UpdateUserSettings.txt, method OvalToolParametersUnits()
VOID SelectUnits()
{
	SetUnitsComboList();
}

BaseHtml::LoadTranslationFile(LayoutsAndJobs,LayoutsAndJobs,LayoutsAndJobs);
CreateDialog();
SetUnitsComboList();	// for some reason the IActions are not executed when this dialog comes up 							
EnableOrDisableUnitsCombo();
