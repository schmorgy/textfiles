IncludeClass( BaseGrid);

VOID BooksAttrGrid::BooksAttrGrid()					// CONSTRUCTOR
{
	TableName = ~BookAttributes~;
	DocumentQuery = ~Select * from <TableName> Order By OrderID,GroupID,Sequence~;
	Title = ~BookAttributes~;
	WindowWidth = WindowHeight = 30;
	HelpFile = ~AdminHelpFile~;
	HelpPage = ~OrderItems.htm~;
}

STR BooksAttrGrid::GetKey( &Item )			{ return ~GroupID = <$con.Item[GroupID]> And OrderID = '<$con.Item[OrderID]>' And Sequence = <$con.Item[Sequence]>~; }  // PRIMARY KEY FOR THE TABLE

VOID BooksAttrGrid::OnAddRecord( &NewRow )	{ NewRow( SetValues,GroupID,0,OrderID,~~,Sequence,0 ); }

NUMERIC BooksAttrGrid::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[GroupID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  GroupID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[OrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  OrderID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Sequence]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Sequence cannot be blank.~ ) ); }


	return TRUE;
}


NUMERIC BooksAttrGrid::OnDuplicateRecord( &NewRow )		// A CHANCE TO CHANGE THINGS BEFORE THE ROW IS INSERTED
{ 
	return NewRow( SetValues,Sequence,NewRow(GetNumeric,Sequence) + 10 );
}	


VOID BooksAttrGrid::SetQuery(Query)
{
	DocumentQuery = ~<Query>~;
}

VOID BooksAttrGrid::SetParams(TheTitle,Query)
{
	DocumentQuery = ~<Query>~;
	Title = ~<TheTitle>~;
	SetTitle(~<TheTitle>~);
}
NUMERIC Init(ThisTitle,Query)
{
	if (Defined(Grid))
	{
		Grid.SetParams(~<ThisTitle>~,~<Query>~);
		Grid.RefreshListView();
		return TRUE;
	}

	Class( BooksAttrGrid,Extends,BaseGrid );

	BooksAttrGrid( New,Grid );
	Grid.DefineWindow();
	Grid.SetParams(~<ThisTitle>~,~<Query>~);
	Grid.Init();

	return Global( Grid );
}
