// GenCompMacroDlg.txt


Define:	GenMacroMessages Using DDSymbol
	Fields:	Value	~These strings are Generate Composite Macro related strings used by the user interface.~
	Contains:
	{
		Define: Title				using DDText	Fields: Text ~Composite Generator Macros~
		Define: MacroHeader			using DDText	Fields: Text ~Composite Job Macros~
		Define: FromText			using DDText	Fields: Text ~From~
		Define: DescFldPrompt		using DDText	Fields: Text ~Field~
		Define: MacroFldPrompt		using DDText	Fields: Text ~Macro~
		Define: ShootDescText		using DDText	Fields: Text ~Shoot Table~
		Define: SubjectInfoText		using DDText	Fields: Text ~SubjectInfo Table~
		Define: SubjInfoListName	using DDText	Fields:	Text ~SubjectInfo~
		Define: ShootDescListName	using DDText	Fields: Text ~ShootDescription~
		Define: UserMacrosListName	using DDText	Fields: Text ~UserMacros~
		Define: CloseButton			using DDText	Fields: Text ~Close~
		Define: CopyClipboardButton using DDText	Fields: Text ~Copy To Clipboard~
		Define: CopyClipboardToolTip using DDText	Fields: Text ~Copy Macro Text to Clipboard~
		Define: CopyToTextButton	using DDText	Fields: Text ~Copy To Text~
		Define: CopyToTextToolTip	using DDText	Fields: Text ~Copy Macro Text to Text field~
		Define: CopyToImageButton	using DDText	Fields: Text ~Copy To Image~
		Define: CopyToImageToolTip	using DDText	Fields: Text ~Copy Macro Text to Image field~
		Define: CloseToolTip		using DDText	Fields: Text ~Close dialog~
		Define: CCToolTip			using DDText	Fields: Text ~Copies Text in Macro field to Clipboard~
		Define: FromFldToolTip		using DDText	Fields: Text ~What to generate the macros from~
		Define: DescFldToolTip		using DDText	Fields: Text ~Field or Name of Macro~
		Define: MacroFldToolTip		using DDText	Fields: Text ~The macro to be used~
	}

// ** Entry point for the dialog **
// dlgShootDescType,dlgInfoType - default ShootDescType and SubjectInfoType to display fields for
// displaySelections = TRUE if want fields to choose type of ShootDesc and SubjectInfo displayed in dialog
NUMERIC DisplayFieldsMacroDlg(dlgShootDescType,dlgInfoType,displaySelections)
{

	ForgetGlobal(GenMacroDefinition,dlgMacroData,dlgGenMacro);

	if (!DictionaryExists(GenMacroDialog) )
	{
		Dictionary: GenMacroDialog
			Fields: Name ShootTable		Type Text
			Fields: Name SubjectTable	Type Text
			Fields: Name MacroType		Type Text
			Fields: Name MacroField		Type Text
			Fields: Name MacroText		Type Text
	}

	
	if ( !Tree( Name,MacroTypeChoices,Location,~[STRINGS]~,Exists ) )
	{
		StringList: Name		MacroTypeChoices
			Fields:	String	Translate(GenMacroMessages,SubjInfoListName)
			Fields:	String	Translate(GenMacroMessages,ShootDescListName)
	//		Fields:	String	Translate(GenMacroMessages,UserMacrosListName)
		Hang:	MacroTypeChoices		~[STRINGS]~
	}

	Define: dlgMacroData Using GenMacroDialog;

	EditTextWidth = 150;	EditTextHeight = 20;
	ComboBoxHeight = 20 * 6;
	StaticTextWidth = 50;	StaticTextHeight = 20;
	BoxTitleTextWidth = 100;
	ButtonLongWidth = 100;	ButtonHeight = 20;		
	x = 4;					y = 5;
			
	Define: GenMacroDefinition	Using	DDWinDef
            Fields: Position			180 180 200 200
                    Title				Translate( GenMacroMessages,Title )
                    TypeName			~Dialog~
					WantsMinimizeBox	TRUE
//					StatusBar			~1 100~
					HACTIONSTEXT		ACTION SHOWHELPPAGE ( KPISHelpFile "GenCompMacros.htm" ) 
                    OACTIONSTEXT		ACTION EXEC ( GenMacroCloseDialog() ) ;

		Contains: InListOrder
		{
			if (<displaySelections>)
			{
			Define: ShootDescPrompt Using DDWinCtrlDef AsSymbol ShootDescPrompt 
			    Fields: TypeName		StaticText
				        Position		$x + $StaticTextWidth,
										$y,
										$BoxTitleTextWidth,$StaticTextHeight
						RightJustified	TRUE
					    Text			Translate( GenMacroMessages,ShootDescText )

			Define: ShootDescFld Using DDWinCtrlDef AsSymbol ShootDescFld 
				Fields: TypeName		SComboBox  
					    Position		ShootDescPrompt(GetLeft,Position),
										ShootDescPrompt(GetBottom,Position) + $vGap,
										$EditTextWidth,$ComboBoxHeight 
						GenConName		THIS
						GenConField		~ShootTable~
						IActionsText	ACTIONS ( Get )
						DropDownActionsText	ACTION EXEC ( GetShootTableList() )
						DActionsText	~[Save Exec("OnShootDescTableChanges()")]~
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( GenMacroMessages,FromFldToolTip );

			Define: SubjectInfoPrompt Using DDWinCtrlDef AsSymbol SubjectInfoPrompt 
		        Fields: TypeName		StaticText
			            Position		ShootDescFld(GetRight,Position) + $StaticTextWidth + $hGap*3,
										ShootDescPrompt(GetTop,Position),
										$BoxTitleTextWidth,$StaticTextHeight
						Text			Translate( GenMacroMessages,SubjectInfoText )
						RightJustified	TRUE;

			Define: SubjectInfoFld Using DDWinCtrlDef AsSymbol SubjectInfoFld 
		        Fields: TypeName		SComboBox
					    Position		SubjectInfoPrompt(GetLeft,Position),
										SubjectInfoPrompt(GetBottom,Position) + $vGap,
										$EditTextWidth, $ComboBoxHeight
						GenConName		THIS
						GenConField		~SubjectTable~
						DropDownActionsText	ACTION EXEC ( GetSubjectTableList() )
						IActionsText	~[Get]~
						DActionsText	~[Save Exec("OnSubjectInfoTableChanges()")]~
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( GenMacroMessages,DescFldToolTip );

				y = ShootDescPrompt(GetBottom,Position) + ($EditTextHeight+$vGap) + 50;
			}
			

			Define: FromText Using DDWinCtrlDef AsSymbol FromText 
			    Fields: TypeName		StaticText
				        Position		$x,
										$y,
										$StaticTextWidth,$StaticTextHeight
						RightJustified	TRUE
					    Text			Translate( GenMacroMessages,FromText )

			Define: FromFld Using DDWinCtrlDef AsSymbol FromFld 
				Fields: TypeName		SComboBox  
					    Position		FromText(GetRight,Position) + $hGap,
										FromText(GetTop,Position),
										$EditTextWidth,$ComboBoxHeight 
						GenConName		THIS
						GenConField		~MacroType~
						IActionsText	ACTIONS ( GetList(MacroTypeChoices) GetMacroTextList() Get )
						DActionsText	~[Save Exec("GetMacroTextList()")]~
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( GenMacroMessages,FromFldToolTip );

			Define: DescPrompt Using DDWinCtrlDef AsSymbol DescPrompt 
		        Fields: TypeName		StaticText
			            Position		FromFld(GetRight,Position) + $hGap*3,
										FromFld(GetTop,Position),
										$StaticTextWidth,$StaticTextHeight
						Text			Translate( GenMacroMessages,DescFldPrompt )
						RightJustified	TRUE;

			Define: DescFld Using DDWinCtrlDef AsSymbol DescFld 
		        Fields: TypeName		SComboBox
			            Position		DescPrompt(GetRight,Position) + $hGap,
										DescPrompt(GetTop,Position),
										$EditTextWidth, $ComboBoxHeight
						GenConName		THIS
						GenConField		~MacroField~
						DropDownActionsText	ACTION EXEC ( GetMacroTextList() )
						IActionsText	~[Get]~
						DActionsText	~[Save Exec("OnMacroMacroFieldChanges()")]~
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( GenMacroMessages,DescFldToolTip );

			DialogWidth = DescFld(GetRight,Position) + $x + 10;

			Define: MacroPrompt Using DDWinCtrlDef AsSymbol MacroPrompt 
		        Fields: TypeName		StaticText
			            Position		FromText(GetLeft,Position),
										FromText(GetBottom,Position) + 3*$vGap,
										$StaticTextWidth,$StaticTextHeight
			            Text			Translate( GenMacroMessages,MacroFldPrompt )
						RightJustified	TRUE;

			MacroFldWidth = DescFld(GetRight,Position) - FromFld(GetLeft,Position);

			Define: MacroFld Using DDWinCtrlDef AsSymbol MacroFld 
		        Fields: TypeName		EditText
			            Position		MacroPrompt(GetRight,Position) + $hGap,
										MacroPrompt(GetTop,Position),
										$MacroFldWidth,$EditTextHeight
						GenConName		THIS
						GenConField		~MacroText~
						IActionsText	ACTIONS ( Get )
						DActionsText	ACTIONS ( Save )
						OActionsText	ACTIONS ( Save )
//						Tooltip			Translate( GenMacroMessages,MacroFldToolTip );

			Define: CloseButton	Using	DDWinCtrlDef AsSymbol	CloseButton
				Fields: TypeName	Button
						Text		Translate(GenMacroMessages,CloseButton)
						Position	$DialogWidth/2 - 2*$ButtonLongWidth,
									MacroFld(GetBottom,Position) + 20 ,
									$ButtonLongWidth, $ButtonHeight
						DActionsText	ACTION EXEC ( GenMacroCloseDialog() )
						IsTabStop	2
						IsEnabled	T 
						Tooltip		Translate(GenMacroMessages,CloseToolTip);

			Define: MacroCCButton Using DDWinCtrlDef AsSymbol MacroCCButton 
				Fields:	TypeName		Button
						Text			Translate( GenMacroMessages,CopyClipboardButton)
						Position		$DialogWidth/2 + $ButtonLongWidth,
										CloseButton(GetTop,Position),
										$ButtonLongWidth,$ButtonHeight
						DActionsText	ACTION EXEC  ( OnSaveMacro2ToClipBoard() ) 
						Tooltip			Translate( GenMacroMessages,CopyClipboardToolTip );
if (0)
{

			Define: MacroCTButton Using DDWinCtrlDef AsSymbol MacroCTButton 
				Fields:	TypeName		Button
						Text			Translate( GenMacroMessages,CopyToTextButton)
						Position		CloseButton(GetRight,Position) + (2*15),
										CloseButton(GetTop,Position),
										$ButtonLongWidth,$ButtonHeight
						DActionsText	ACTION EXEC  ( OnSaveMacro3ToClipBoard(~Text~) ) 
						Tooltip			Translate( GenMacroMessages,CopyClipboardToolTip );

			Define: MacroCIButton Using DDWinCtrlDef AsSymbol MacroCIButton 
				Fields:	TypeName		Button
						Text			Translate( GenMacroMessages,CopyToImageButton)
						Position		MacroCTButton(GetRight,Position) + (15),
										MacroCTButton(GetTop,Position),
										$ButtonLongWidth,$ButtonHeight
						DActionsText	ACTION EXEC  ( OnSaveMacro3ToClipBoard(~Image~) ) 
						Tooltip			Translate( GenMacroMessages,CopyClipboardToolTip );
}


		};

	DialogLength = CloseButton(GetBottom, Position) + $vGap + $5 + 20 + 10;

//	CompDlgDefinition( GetWindowPosition,DlgXPos,DlgYPos ); // when had off Composites 
//	DlgXPos = <DlgXPos> + 280;
//	DlgYPos = <DlgYPos> + 450;
	DlgXPos = 480;
	DlgYPos = 0;
	GenMacroDefinition(Set,Position, ~<DlgXPos> <DlgYPos> <DialogWidth> <DialogLength>~);

	GenDlg(dlgGenMacro, Definition, GenMacroDefinition, Data,dlgMacroData,Document,$Doc.This,New,Temporary);
	Global(dlgGenMacro,GenMacroDefinition,dlgMacroData);

	if (<displaySelections>)
	{
		GetShootTableList();
		GetSubjectTableList();
	}
	dlgGenMacro(SetValue,ShootTable,~ShootDescription<dlgShootDescType>~);
	dlgGenMacro(SetValue,SubjectTable,~SubjectInfo<dlgInfoType>~);
	dlgGenMacro( Update );
	GetMacroTextList();
			
	// Put cursor in Value field
	dlgGenMacro( SetControlFocus,FromText );

	dlgGenMacro( SetWindowOrder,TOP ); // TOPMOST : NOTOPMOST

	return TRUE;
}


NUMERIC GenMacroCloseDialog()
{
	dlgGenMacro( end );

	return TRUE;
}


VOID OnSaveMacro2ToClipBoard(SaveTo)
{
	dlgGenMacro( GetControlValue,MacroFld,MacroString);

	SetSpecialMacroExpansion(FALSE);

	dlgGenMacro(CopyToClipboard, ~<MacroString>~);

	SetSpecialMacroExpansion(TRUE);
}


VOID OnSaveMacro3ToClipBoard(SaveTo)
{
	dlgGenMacro( GetControlValue,MacroFld,MacroString);

	SetSpecialMacroExpansion(FALSE);
	if (~<SaveTo>~ == ~Clipboard~)  // Clipboard
	{	
		dlgGenMacro(CopyToClipboard, ~<MacroString>~);
	}

	if (~<SaveTo>~ == ~Image~)  // Image
	{	
		if ( KeyState( CONTROL ) )  // append text   LSHIFT,RSHIFT, CONTROL
		{
			dlgCompData(GetValue,NodeImage,theImage);
			theImage = ~<theImage><MacroString>~;
		}
		else  // replace text
		{
			theImage = ~<MacroString>~;
		}
		dlgComp(SetString,~<theImage>~,NodeImage,0);	
	}
	else  // SaveTo = Text
	{	
		if ( KeyState( CONTROL ) )  // append text   LSHIFT,RSHIFT, CONTROL
		{
			dlgCompData(GetValue,NodeText,theText);
			theText = ~<theText><MacroString>~;
		}
		else  // replace text
		{
			theText = ~<MacroString>~;
		}
		dlgComp(SetString,~<theText>~,NodeText,0);
	}

	SetSpecialMacroExpansion(TRUE);
}

NUMERIC GenerateTableFieldList(Table,&FieldList)
{
	if ( !ADO( dBase,Connect,MakePrimaryKeyFrom,~<Table>~,Dummy,Key ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( DBMessages,ConnectionFailed,~<TranslatedTableName>~,~<theErr>~ ) );
	}

	Query = ~Select * From <Table>~;	// WANT A QUERY THAT RETURNS NO RECORDS

	if ( !IsNull(~<Key>~) )
	{
		Query = ~<Query> Where <Key>~;  // WILL BE A QUERY THAT RETURNS NO RECORDS
	}

	// get all the fields in the SubjectInfo table
	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,SetMaxRecords,1,SetCacheSize,1,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( DBMessages,QueryFailed,~<Query>~,~<theErr>~ ) );
	}

	Index = 0;
	while ( List( FieldInfo,<Index>,Name,theFieldName ) )
	{
		FieldList(AddString,~<theFieldName>~);
		++Index;
	}

	return TRUE;	
}


NUMERIC GenerateUserMacroFldList(&MacroNameList)
{
	theQuery = ~Select Name from CompositeMacros Order by Name~;
	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List( NumEntries );
	List( MakeStringList,MacroNameList,Name,TRUE );

	return TRUE;
}


VOID GetMacroTextList()
{
	dlgGenMacro(GetInput);

	theMacroType = ~<$con.dlgMacroData[MacroType]>~;

	if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,SubjInfoListName ) )
	{
		StringList(FieldList,New);
		theTable = ~<$con.dlgMacroData[SubjectTable]>~;
		if ( GenerateTableFieldList(~<theTable>~,FieldList) )
		{	dlgGenMacro( SetControlFromStringList,DescFld,FieldList,NoSelection );	}
	}
	else if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,ShootDescListName ) )
	{
		StringList(FieldList,New);
		theTable = ~<$con.dlgMacroData[ShootTable]>~;
		if ( GenerateTableFieldList(~<theTable>~,FieldList) )
		{	dlgGenMacro( SetControlFromStringList,DescFld,FieldList,NoSelection );	}
	}
	else if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,UserMacrosListName ) )
	{
		StringList(FieldList,New);
		if ( GenerateUserMacroFldList(FieldList) )
		{	dlgGenMacro( SetControlFromStringList,DescFld,FieldList,NoSelection );	}
	}

	OnMacroMacroFieldChanges();
}


VOID OnMacroMacroFieldChanges()
{
	dlgGenMacro(GetInput);

	theFieldName = ~<$con.dlgMacroData[MacroField]>~;

	if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,SubjInfoListName ) )
	{
		SetSpecialMacroExpansion(FALSE);
		theMacro = ~<$func.SI(<theFieldName>)>~;
		SetSpecialMacroExpansion(TRUE);
	}
	else if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,ShootDescListName ) )
	{
		SetSpecialMacroExpansion(FALSE);
		theMacro = ~<$func.SD(<theFieldName>)>~;
//		theMacro = ~<$<theMacro>>~;
		SetSpecialMacroExpansion(TRUE);
	}
	else if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,UserMacrosListName ) )
	{
		// Get macro text from CompositeMacros
		theQuery = ~Select Activate from CompositeMacros where Name = '<theFieldName>'~;

		if (!ADO(dbase,Connect,GetValuesFor,~<theQuery>~,theMacro))
		{
			dbase( GetErrorDescription,theErr );
			Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
			return;
		}
	}

	SetSpecialMacroExpansion(FALSE);

	dlgGenMacro(SetStrings,MacroText,~<theMacro>~);

	SetSpecialMacroExpansion(TRUE);
}

VOID GetShootTableList()
{
	if ( !PGenConList( SchemaList,Connect,Cursor,Keyset,Schema,Tables ) )
	{ 
		SchemaList( GetErrorDescription,0,theErr );
		return Warning( Translate( DBMessages, SchemaQueryFailed, ~Tables~, ~<theErr>~) );
	}

	SchemaList( Filter,~Table_Name Like 'ShootDescription%'~ );

	Count = 0;
	StringList(ShootDescTypeList,New);

	while ( SchemaList( GetNext,Table ) )
	{
		ShootDescTypeList(AddString,~<$pcon.Table[Table_Name]>~);
		++Count;
	}

	if (<Count> > 0)
	{
		dlgGenMacro( SetControlFromStringList,ShootDescFld,ShootDescTypeList,NoSelection );
	}

}


VOID GetSubjectTableList()
{
	if ( !PGenConList( SchemaList,Connect,Cursor,Keyset,Schema,Tables ) )
	{ 
		SchemaList( GetErrorDescription,0,theErr );
		return Warning( Translate( DBMessages, SchemaQueryFailed, ~Tables~, ~<theErr>~) );
	}

	SchemaList( Filter,~Table_Name Like 'SubjectInfo%'~ );

	Count = 0;
	StringList(InfoTypeList,New);

	while ( SchemaList( GetNext,Table ) )
	{
		if ( !SimilarStr( ~<$pcon.Table[Table_Name]>~,~SubjectInfoColumns~ ) )
		{
			InfoTypeList(AddString,~<$pcon.Table[Table_Name]>~);
			++Count;
		}
	}

	if (<Count> > 0)
	{
		dlgGenMacro( SetControlFromStringList,SubjectInfoFld,InfoTypeList,NoSelection );
	}

}


VOID OnShootDescTableChanges()
{
	dlgGenMacro(GetInput);

	ShootTable = ~<$con.dlgMacroData[ShootTable]>~;

	if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,ShootDescListName ) )
	{
		StringList(FieldList,New);
		if ( GenerateTableFieldList(~<ShootTable>~,FieldList) )
		{	
			dlgGenMacro( SetControlFromStringList,DescFld,FieldList,NoSelection );
			OnMacroMacroFieldChanges();
		}
	}
}


VOID OnSubjectInfoTableChanges()
{
	dlgGenMacro(GetInput);

	SubjectTable = ~<$con.dlgMacroData[SubjectTable]>~;

	if (~<$con.dlgMacroData[MacroType]>~ == Translate( GenMacroMessages,SubjInfoListName ) )
	{
		StringList(FieldList,New);
		if ( GenerateTableFieldList(~<SubjectTable>~,FieldList) )
		{	
			dlgGenMacro( SetControlFromStringList,DescFld,FieldList,NoSelection );
			OnMacroMacroFieldChanges();
		}
	}
}