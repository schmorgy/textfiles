// DP2 Uses a Static Toolbar; that is it comes up at startup and stays there for the life of the app.
// DPVAC uses a more dynamic toolbar in that it only appears when an image is on the screen
// and goes away when an image is not there.  To facilitate this, the DP2.txt code defines a permanent
// symbol, WantStaticToolbars to be true.  If that symbol is defined and true, toolbars behave like
// static toolbars.  If that symbol is not there or defined to be false, toolbars behave dynamically
// which is the desired behavior for DPVAC
if (Authorized(DP2))
{
	if ( DefinedAndNotNull( WantStaticToolbars ) )
	{
		if (<WantStaticToolbars> )
		{
			OActions = ~~; // (DP2 behavior)
		}
		else
		{
			OActions = ~HideToolbar(JobToolbar)~; // (DPVAC behavior)
		}

	}
	else
	{
		OActions = ~HideToolbar(JobToolbar)~; // (DPVAC behavior)
	}
}
else
{
	OActions = ~~; // (DP1 behavior)
}
if (Authorized(DP2))
{
	if (RunningVersion(8.1))
	{
		LayoutInputActions = ~[
									CreateToolbar(JobToolbar)
									EnableTool(CropTool RectTool OvalTool WandTool GridTool) 
									EnableTool(ResizeTool ZoomTool SelectTool PolygonTool) 
									EnableTool(CurveTool) 
									PerformNodeActions (NodeActions1)
									ShowViewStatusBar
								]~;
	}
	else
	{
		LayoutInputActions = ~[
									CreateToolbar(JobToolbar)
									EnableTool(CropTool RectTool OvalTool WandTool GridTool) 
									EnableTool(ResizeTool ZoomTool SelectTool PolygonTool) 
									PerformNodeActions (NodeActions1)
									ShowViewStatusBar
								]~;
	}
}
else
{
	LayoutInputActions = ~~;
}
Define:  LayoutView Using DDViewDef
	Fields:		ViewType ~LayoutView~
				RClickUpActionsText ~[GETMENU(NodeMenuObj)]~
				TabKeyDnActionsText ~[SelectNextNode]~
				HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "LayoutWindowHelp.htm" )
				PreferredUnits	Inches
				HeightPercentOfMainframe	80			// percentage , allow room for status bar
				WidthPercentOfMainframe		100			// percentage
				WidthCascadeOffsetInPixels	24			// percentage
				HeightCascadeOffsetInPixels	24			// percentage
				InitialViewXPosition		0			// in pixels
				InitialViewYPosition		0			// in pixels
				DropTypes					~Image Products OrderItems~
				OActionsText	~[ <OActions> ]~
				DropProductMenuName	DropProductMenu
				IActionsText   ~<LayoutInputActions>~;
Hang: LayoutView ~[UI Views]~;


/**********************    Layout Window Definitions *********************/
Define: LayoutWindow Using DDWinDef
	Fields:	
		Title					~Layout Window~
		Position				0 0 100 100 
		IsPositionPercent		T
		IsCenteredVertical		F
		IsCenteredHorizontal	F
		IsMaximized				F
		SplitterRows			0
		SplitterColumns			0
		EnableStatusBar			T
		Contains:	INLISTORDER
		{
		Define: LayoutView
		}


Hang: LayoutWindow ~[UI Windows]~ ;



/* to edit and run the magic wand dialog without restarting the application, enable the
	following three lines.

Define: MagicWandToolSetupDialog Using DDPath
Fields: Path ~D:/Apps/Exe/MagicWandToolSetupDialog.txt~
Hang: MagicWandToolSetupDialog ~[PATHS]~


	In addition, remove MagicWandToolSetupDialog from the textfiles directory and
	place it in D:/Apps/Exe/ 

	Also, create a dynamic job containing this line:
Tree(Name, MagicWandToolSetupDialog, Location, ~[UI Dialogs]~, PluckAndFree);

	Place the dynamic job in the Jobs/Dynamic jobs folder.  Then run this dynamic job
	after editing the file.  This will remove it from the tree and recreate it
	each time.

	When editing and testing is complete re-comment the three lines above and
	place MagicWandToolSetupDialog.txt in the textfiles folder.

*/

//Define: LayoutNewDialog Using DDPath
//Fields: Path ~D:/Apps/Exe/LayoutNewDialog.txt~
//Hang: LayoutNewDialog ~[PATHS]~


