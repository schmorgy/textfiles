//TraceParse( scan ) ;

//HeapCheck( Keywords );

//	THIS IS THE NEW VERSION OF APPLICATION.TXT
//	IT USES THE NEW SYNTAX FOR CREATING GENCONS
//	AND DATA DICTIONARIES AS WELL AS SETTING UP
//	SYMBOLS, PATHS, MENUS, AND OTHER THINGS.

//TraceParse( SetGlobal,512,TRUE );

App(OurApp);
//OurApp(MessagePumpRate, 10);

// Define the name of the application.
AppNameString = ~KODAK PROFESSIONAL Digital Print Production Software~;

Define: AppName	USING	DDSymbol	Fields:	Value	~<AppNameString>~;
Hang:	AppName ~[SYMBOLS]~;

// Define the symbol of the application.
Define: AppNameSymbol	USING	DDSymbol	Fields:	Value	~DP2~;
Hang:	AppNameSymbol ~[SYMBOLS]~;

// Define the splash screen bitmap file name.
SplashFileNameString = ~Setup.bmp~;

Define: SplashFileName	USING	DDSymbol	Fields:	Value	~<SplashFileNameString>~;
Hang:	SplashFileName ~[SYMBOLS]~;

Dictionary:	DDSplashVersionInfo
	Fields:	Name Red		Type Long
	Fields:	Name Green		Type Long
	Fields:	Name Blue		Type Long
	Fields:	Name XPos		Type Long
	Fields:	Name YPos		Type Long
	Fields:	Name FontWeight	Type Long
	Fields:	Name FontHeight	Type Long;

Define:	SplashVersionInfo Using DDSplashVersionInfo
	Fields:	Red			160
			Green		160
			Blue		160
			XPos		17
			YPos		82
			FontWeight	700
			FontHeight	14
Hang:	SplashVersionInfo	~[GENCONS]~ ;

// Update these version and build strings for each build.
VersionString = ~Version 15.0.61~;
BuildString = ~07/12/12 12:55:47PM~;

Define: Version	USING	DDSymbol	Fields:	Value	~<VersionString>~
Hang:	Version	~[SYMBOLS]~

Define: BuildDate	USING	DDSymbol	Fields:	Value	~<BuildString>~
Hang:	BuildDate	~[SYMBOLS]~;

PieVersion = Debug( IsPieVersion ) ? ~PIE Pre-Alpha Release~ : ~~;

Log(Session, ~<VersionString>    <PieVersion>~);
Log(Session, ~Build Date:  <BuildString>~);

Define:	ApplicationFonts	Using DDSymbol
	Fields:	Value	~These are fonts used in various places by the app~
	Contains:
	{
		Define:	Main			using DDText	Fields:	Text ~MS Sans Serif~
		Define:	Thumbnail		using DDText	Fields:	Text ~MS Sans Serif~
		Define:	Splash			using DDText	Fields:	Text ~Arial~
		Define:	Control			using DDText	Fields:	Text ~MS Sans Serif~
		Define:	FormView		using DDText	Fields:	Text ~Courier~
		Define:	Dialog			using DDText	Fields:	Text ~MS Sans Serif~
		Define:	GridView		using DDText	Fields:	Text ~Arial~
		Define:	Debug			using DDText	Fields:	Text ~Courier~
		Define:	Tree			using DDText	Fields:	Text ~Courier~
		Define:	View			using DDText	Fields:	Text ~Courier~
		Define:	EditView		using DDText	Fields:	Text ~Courier~
	}
Hang:	ApplicationFonts	~[STRINGS]~

Define:	CountryDefaultFonts	Using DDSymbol
	Fields:	Value	~These are fonts used in various places by the app~
	Contains:
	{
		Define:	enu				using DDText	Fields:	Text ~Arial~
		Define:	esp				using DDText	Fields:	Text ~Arial~
		Define:	ptb				using DDText	Fields:	Text ~Arial~
		Define:	deu				using DDText	Fields:	Text ~Arial~
		Define:	cht				using DDText	Fields:	Text ~SimHei~
		Define:	chs				using DDText	Fields:	Text ~SimHei~
		Define:	tha				using DDText	Fields:	Text ~Arial~
		Define:	tur				using DDText	Fields:	Text ~Arial~
		Define:	vie				using DDText	Fields:	Text ~Arial~
		Define:	kor				using DDText	Fields:	Text ~Arial~
		Define:	jpn				using DDText	Fields:	Text ~MS Gothic~
		Define:	rus				using DDText	Fields:	Text ~Arial~
		Define:	fra				using DDText	Fields:	Text ~Arial~
	}
Hang:	CountryDefaultFonts	~[STRINGS]~

//	THEN DEFINE THE STANDARD DATA DICTIONARIES
Include:	~DictionariesStd.txt~;

OptionalInclude( ~<$App.Directory>\DP2_Startup.txt~ );

//	DEFINE THE VMM SYSTEM - THESE NEED TO BE BEFORE THE SplashScreen
//  FOR WHEN WE USE PIE TO RENDER THE SPLASH SCREEN BITMAP
Include:	~VMM.txt~;
Include:	~ImageMem.txt~;

SplashScreen();

//	THE 'C' INTERPRETER AND KPL DEBUGGER
Include:	~Debug.txt~ ;

Define:	HelpFiles	Using DDSymbol
	Fields:	Value	~These are the names of the Help files~
	Contains:
	{
		Define:	Contents					using DDText	Fields:	Text ~+NT2.chm~				// PLUS MEANS TO FIND IT IN THE CURRENT LANGUAGE
		Define:	Admin						using DDText	Fields:	Text ~+NT2.chm~
		Define:	Tutorial					using DDText	Fields:	Text ~+Tutor.chm~
		Define:	KPL							using DDText	Fields:	Text ~+KPL.chm~
		Define: KPDAW						using DDText	Fields: Text ~+DigitalAnalyzer.chm~	
		Define: ARBatch						using DDText	Fields: Text ~+NT2.chm~				
		Define: ARInteractive				using DDText	Fields: Text ~+KPARS.chm~			
	}
Hang:	HelpFiles	~[STRINGS]~;

Define:	HelpLocations	Using DDSymbol
	Fields:	Value	~These are the names of the Help files~
	Contains:
	{
		Define:	English			using DDText	Fields:	Text ~<$App.Directory>\Help~
		Define:	Spanish			using DDText	Fields:	Text ~<$App.Directory>\Help~
		Define: Portuguese		using DDText	Fields:	Text ~<$App.Directory>\Help~
		Define:	enu				using DDText	Fields:	Text ~<$App.Directory>\Help~
		Define:	esp				using DDText	Fields:	Text ~<$App.Directory>\Help~
		Define: ptb				using DDText	Fields:	Text ~<$App.Directory>\Help~		
	}
Hang:	HelpLocations	~[STRINGS]~;

Define: HelpLanguage	USING	DDSymbol			Fields:	Value	~enu~
Hang:	HelpLanguage	~[SYMBOLS]~;

Define: LanguageCode	USING	DDSymbol			Fields:	Value	~enu~
Hang:	LanguageCode	~[SYMBOLS]~;

Define:	KPISHelpFile Using DDPath					Fields: Path	~<$[STRINGS/HelpFiles].Contents[Text]>~
Hang:	KPISHelpFile ~[PATHS]~;

Define:	KPDAWHelpFile Using DDPath					Fields: Path	~<$[STRINGS/HelpFiles].KPDAW[Text]>~
Hang:	KPDAWHelpFile ~[PATHS]~;

Define:	ARBatchHelpFile Using DDPath				Fields: Path	~<$[STRINGS/HelpFiles].ARBatch[Text]>~
Hang:	ARBatchHelpFile ~[PATHS]~;

Define:	ARInteractiveHelpFile Using DDPath			Fields: Path	~<$[STRINGS/HelpFiles].ARInteractive[Text]>~
Hang:	ARInteractiveHelpFile ~[PATHS]~;

Define:	AdminHelpFile Using DDPath					Fields: Path	~<$[STRINGS/HelpFiles].Admin[Text]>~
Hang:	AdminHelpFile ~[PATHS]~;

Define:	TutorialHelpFile Using DDPath				Fields: Path	~<$[STRINGS/HelpFiles].Tutorial[Text]>~
Hang:	TutorialHelpFile ~[PATHS]~;

Define:	KPLHelpFile Using DDPath					Fields: Path	~<$[STRINGS/HelpFiles].KPL[Text]>~
Hang:	KPLHelpFile ~[PATHS]~;

//Define: OptimalProfilePerformance	USING	DDSymbol	Fields:	Value	~0~
//Hang:	OptimalProfilePerformance	~[GenCons]~


Define: UseIPAddress	USING	DDSymbol			Fields:	Value	~0~
Hang:	UseIPAddress	~[SYMBOLS]~;

// PLACE FOR SCRIPT OVERRIDES TO BE SPECIFIED
//Define:	~<$App.ScriptLibrary.FileName.withoutext>~ 	USING DDSymbol
//Hang:	~<$App.ScriptLibrary.FileName.withoutext>~ 	~[ScriptLibraryOverrides <$App.MajorVersion>]~;

//	FIRST DEFINE THE STANDARD ERROR MESSAGES
Include:	~Strings.txt~;

//  Include Dialog error messages
Include:	~DialogStrings.txt~;

Define: MainWindow	USING	DDSymbol	Fields:	Value	~TheMainWindow~
Hang:	MainWindow	~[SYMBOLS]~

Define:	GenConDebugWindow	USING	DDSymbol	Fields:	Value ~TheGenConDebugWindow~
Hang:	GenConDebugWindow	~[SYMBOLS]~;

OptionallyEnableDebugger();

if ( !Files( FileExists,~WorkStation.Prf~ ) )
{
	Warning(~Workstation preferences (Workstation.prf) file not found.\n\nThis file is required for DP2 to run.  You can get this file by\ncopying it from the Program Files folder on the DP2 CD into\nthe directory where DP2 is installed.  You can also reinstall\nDP2 to the directory where it is currently installed to recover\nthis file.  If you choose to reinstall DP2,  you do NOT need to\nuninstall DP2 first.~);
	Abort();
}
Include: ~WorkStation.Prf~;

//	THEN DEFINE THE OUTPUT SUBSYSTEM DATA DICTIONARIES
Include:	~DictionariesOutput.txt~;

//	DEFINE THE APPLICATION SPECIFIC THINGS

//	BRING IN THIS APPLICATIONS KEYWORDS SO THAT WE CAN PARSE OTHER FILES.
Include:	~Keywords.txt~;

//	BRING IN THIS APPLICATIONS KEYWORD DICTIONARIES
Include:	~DictionariesKeywords.txt~;
Include:	~DictionariesDevices.txt~;
Include:	~DefaultsKeywords.txt~;

// DP2 Uses a Static Toolbar; that is it comes up at startup and stays there for the life of the app.
// DPVAC uses a more dynamic toolbar in that it only appears when an image is on the screen
// and goes away when an image is not there.  To facilitate this, the DP2.txt code defines a permanent
// symbol, WantStaticToolbars to be true.  If that symbol is defined and true, toolbars behave like
// static toolbars.  If that symbol is not there or defined to be false, toolbars behave dynamically
// which is the desired behavior for DPVAC

WantStaticToolbars = TRUE;
PermanentSymbol( WantStaticToolbars );

Include:	~JobWindowDefinition.txt~;

//	DEFINE THE LAYOUT SUBSYSTEM
Include:	~Layout.txt~; 


//	DEFINE THE IMAGE VIEW
Include:	~ImageEdit.txt~;

//	DEFINE THE IMAGE EDIT VIEW
Include:	~Image.txt~;

//	DEFINE THE CUSTOMER MENU
Include:	~Customer.txt~;

//	DEFINE THE ORDER SUBSYSTEM
Include:	~Order.txt~;

//	DEFINE THE IMAGES SUBSYSTEM
Include:	~Images.txt~;

//	DEFINE THE JOB QUEUE SUBSYSTEM
Include:	~JobQueue.txt~;

//	DEFINE THE SCANNER SUBSYSTEM
Include:	~SizzleMenu.txt~;

//	DEFINE THE PRINTER SUBSYSTEM
Include:	~Printers.txt~;

//	DEFINE THE RENDERING SUBSYSTEM
Include:	~Render.txt~;

//	DEFINE THE PIE SYSTEM
Include:	~PIE.txt~;

//  GEN CON DEBUG WINDOW DEFINITIONS
Include:    ~GenConDebugWindow.txt~ ;

//  MAIN WINDOW DEFINITIONS
Include:    ~MainWindow.txt~ ;

//  THUMBNAIL VIEW DEFINITIONS
Include:    ~ThumbnailViews.txt~ ;

//  THUMBNAIL WINDOW DEFINITIONS
Include:    ~ThumbnailWindow.txt~ ;

//  THUMBNAIL WINDOW DEFINITIONS
Include:    ~TraceLevels.txt~ ;

//  IMAGE CONTAINER STRINGS
Include:	~ImageContainerStrings.txt~;

//  DYNAMIC JOBS TOOLBAR
Include:	~DynamicJobsToolBar.txt~;

//	GRAPHICS SYSTEM
Include:	~Graphics.txt~ ;

//	COS SUBSYSTEM
//Include:	~Cos.txt~;


//	Define the digital camera definitions
Include:	~DigitalCamera.txt~;


//	SQL WORDS THAT SHOW UP IN POPUPS
Include:	~SQLTranslations.txt~;

//	DEFINE THE RECORD STRUCTURES FOR THE INTERFACE TO THE BREMSON ACCUNET SYSTEM
Include:	~DictionariesBremson.txt~;

Define: KPLStartupScript USING DDSymbol	Fields:	Value	~Startup.txt~
Hang:	KPLStartupScript	~[SYMBOLS]~

Define: ShootIsSubject	USING	DDSymbol	Fields:	Value	~0~
Hang:	ShootIsSubject	~[SYMBOLS]~

Define:	LowOnVirtualMemory Using DDLowOnVirtualMemory
	Fields:	LargestBlock	262144000  // 256 meg
			FreeMemory		524288000	// 500 meg
Hang:	LowOnVirtualMemory	~[GENCONS]~ ;

Define:	CompactWorkstationDatabase Using DDPath
	Fields: Path	~CompactWorkstationDatabase.txt~
Hang:	CompactWorkstationDatabase ~[PATHS]~ ;
