//******************************************************************************
//  FILE:			C_NexPress_PrintComplete.txt		
//                                                                                                         
//******************************************************************************

ExecC() ;

int		 FALSE = 0 ;
int		 TRUE  = ! FALSE ;
char	*NULL ;
int		 gTesting = FALSE ;

UGenCon	*gRELookAhead ;
long	 gLogAmount ;
UList	*gMultiPageProductList = NULL ;

main()
{
//	Debug(1) ;
	gRELookAhead = GetTreeObject(_T("RELookAhead"),_T("[GenCons]")) ;
	gLogAmount	= gRELookAhead->GetLongValue(_T("RELogLevel")) ;
}

/*
	Version 1.00		Original
	Version 1.01		?
	Version 1.02		Added the ability to get the GroupQty
*/

int Advertize()
{
	SessionLogDirect( _T("C_NexPress_PrintComplete.Advertize: (V1.1)")) ;
	return( TRUE ) ;
}


int Init( UGenCon *fSOrder, UGenCon *CompletePrint )
{
	TCHAR	 CmdPath[2048] ;
	TCHAR	 NewOrderID[1024] ;
	TCHAR	 SortTime[2048] ;
	TCHAR	 TmpPath[1024] ;
	long	 PageID = CompletePrint->GetLongValue(_T("JobID")) ;
	int		 isDirectory ;
	int		 Count = 0L ;
	TCHAR	 finalPath[2048];
	TCHAR	 cmdfilename[2048];
	TCHAR	 BackupFolder[2048];
	TCHAR	 Msg[1024] ;		//	ERROR HANDLING
	long	 ErrorType = 4L ;

	TCHAR	*ImagePath	= CompletePrint->GetStringValue(_T("ImagePath")) ;
	if( ImagePath == NULL )
	{
		SessionLogDirect( _T("C_NexPress_PrintComplete.Init: No ImagePath for PageID: %ld"), PageID ) ;
		DumpPage( CompletePrint ) ;
		return( FALSE ) ;
	}

	UGenCon	*PrinterSetup	= fSOrder->GetLongValue(_T("PrinterSetup")) ;
	TCHAR	*ControlFolder	= PrinterSetup->GetStringValue(_T("ControlFolder")) ;

	gMultiPageProductList	= fSOrder->GetLongValue(_T("MultiPageProductList")) ;

	long	 CurrentPage = CompletePrint->GetLongValue(_T("ProductPageSeqCurrent")) ;
	long	 LastPage	 = CompletePrint->GetLongValue(_T("ProductPageSeqLast")) ;
	
	SessionLogDirect( _T("C_NexPress_PrintComplete.Init: PageID: P%09ld, Page: %ld of %ld"), PageID, CurrentPage, LastPage ) ;
	if(LastPage != 1)
	{ //really a multipage product (not 1 of 1)

		if( CurrentPage && LastPage )
		{

			if( CurrentPage == 1L && gMultiPageProductList )
			{
				//	WE HAVE AN ERROR: LAST MULTIPAGE PRODUCT WAS NOT COMPLETED.
				SessionLogDirect( _T("C_NexPress_PrintComplete: ERROR: Last Multi-Page Product was not completed.")) ;
				DumpMultiPageIDs() ;
				
				//	SHOULD WE GENERATE ERROR RESPONSES FOR PAGES THAT SHOWED UP HERE ?
				UListIterator	*anIter = new UListIterator( gMultiPageProductList ) ;
				UGenCon			*aPage  = (UGenCon *) anIter->GetFirst() ;
				while( aPage )
				{
					sprintf( Msg, _T("ERROR: Last Multi-Page Product was not completed. JobID: P%09ld"), aPage->GetLongValue(_T("JobID"))) ;
					aPage->SetLongValue(_T("ResponseCode"), -101L ) ;
					aPage->SetAttrValue(_T("ResponseText"), Msg ) ;
					WriteErrorResponseFile( fSOrder, aPage, -101, ErrorType, Msg ) ;
					ErrorType = 5L ;	//	SAY WE HAVE ALREADY OUTPUT THE MESSAGE.
					aPage  = (UGenCon *) anIter->GetNext() ;
				}
				delete anIter ;
				
				CleanMultiPageProductList(fSOrder) ;
			}
			
			if( CurrentPage < LastPage )
			{
				if( gMultiPageProductList == NULL )
				{
					gMultiPageProductList = new UList ; 
					fSOrder->SetLongValue(_T("MultiPageProductList"), gMultiPageProductList ) ;
				}
				gMultiPageProductList->InsertBack( CompletePrint ) ;
				
//				SessionLogDirect( _T("C_NexPress_PrintComplete.Init: PageID: P%09ld, Page: %ld of %ld, Number of Entries In Queue: %ld"),
//				 PageID, CurrentPage, LastPage, gMultiPageProductList->GetNumEntries() ) ;
				return( TRUE ) ;// don't write xml file until all the pages are done
			}
			
//	SessionLogDirect( _T("C_NexPress_PrintComplete.Init: PageID: P%09ld, Page: %ld of %ld"), PageID, CurrentPage, LastPage ) ;

			if( CurrentPage == LastPage )
			{
				if( gMultiPageProductList )
				{
					gMultiPageProductList->InsertBack( CompletePrint ) ;
					
//	SessionLogDirect( _T("C_NexPress_PrintComplete.Init: PageID: P%09ld, Page: %ld of %ld, Number of Entries In Queue: %ld"),
//				 PageID, CurrentPage, LastPage, gMultiPageProductList->GetNumEntries() ) ;

					if( gMultiPageProductList->GetNumEntries() != LastPage )
					{
						//	WE HAVE AN ERROR NOT ENOUGH PAGES WERE RENDERED.
						HandleIncompleteError(fSOrder,CompletePrint, _T("Is Missing Page(s)."));
						return( FALSE ) ;
					}
				}
				else
				{
					HandleIncompleteError(fSOrder,CompletePrint, _T("Is Missing First Page.")) ;
					return( FALSE ) ;
				}
			}
		}
	} 
	else
	{ //null out multipage list, not really multipage (1 of 1)
		gMultiPageProductList = NULL;
	}

//	GetSortableTimeNow(SortTime);
//	sprintf( TmpPath, _T("%s\\%s"), ControlFolder, SortTime) ;
	TCHAR	*ResponseFolder	= PrinterSetup->GetStringValue(_T("ResponseFolder")) ;
	sprintf( BackupFolder, _T("%s\\Backup"), ResponseFolder ) ; //write an extra cmd file to this folder first in case NJP shuts down, then copy to control folder when completely written
	CreateFullDirectoryPath( BackupFolder ) ;	
	sprintf( TmpPath, _T("%s\\%09ld"), BackupFolder,PageID ) ; 
	sprintf( cmdfilename, _T("%09ld.xml"), PageID); //save for copy file (no path, just name)

	strcpy( CmdPath, TmpPath ) ;
	strcat( CmdPath, _T(".xml")) ;
//	while( FileOrDirectoryExists( CmdPath, &isDirectory ))
//	{
//		Count++ ;
//		sprintf( CmdPath, _T("%s_%04d.xml"), TmpPath, Count ) ;
//	}
			 
	if( gMultiPageProductList )
	{
//		SessionLogDirect( _T("C_NexPress_PrintComplete.Init (after CmdText): PageID: P%09ld, Page: %ld of %ld, Number of Entries In Queue: %ld"),
//					PageID, CurrentPage, LastPage, gMultiPageProductList->GetNumEntries() ) ;

		char	*fp = fopen( CmdPath, _T("ab")) ;
		if( fp )
		{
			TCHAR	IOBuff[10] ;
			IOBuff[0] = 0xFEFF ;
			IOBuff[1] = 0x0000 ;
			WriteUnicodeFile( fp, IOBuff ) ;

			long			 PageNumber = 1L ;
			UListIterator	*anIter = new UListIterator( gMultiPageProductList ) ;
			UGenCon			*aPage  = (UGenCon *) anIter->GetFirst() ;
			while( aPage )
			{
				AddPageToCommandFile(fp, fSOrder, aPage, PageNumber++ ) ;
				aPage->SetLongValue(_T("CommandSent"), 1L ) ;
				aPage  = (UGenCon *) anIter->GetNext() ;
			}
			delete anIter ;
			fclose( fp ) ;
			//copy file to NJP hot folder (ControlFolder)
			sprintf( finalPath, _T("%s\\%s"), ControlFolder,cmdfilename );
			CopyFile( CmdPath, finalPath );
		}
		else
		{
			SessionLogDirect( _T("C_NexPress_PrintComplete.Init: Could not create \"%s\"."), CmdPath ) ;
		}

		CleanMultiPageProductList(fSOrder) ;
	}
	else
	{
		SessionLogDirect( _T("We have a NULL gMultiPageProductList.")) ;
		char	*fp = fopen( CmdPath, _T("wb")) ;
		if( fp )
		{
			TCHAR	IOBuff[10] ;
			IOBuff[0] = 0xFEFF ;
			IOBuff[1] = 0x0000 ;
			WriteUnicodeFile( fp, IOBuff ) ;
				
			AddPageToCommandFile(fp, fSOrder, CompletePrint, 1L ) ;
			fclose( fp ) ;
			//copy file to NJP hot folder (ControlFolder)
			sprintf( finalPath, _T("%s\\%s"), ControlFolder,cmdfilename );
			CopyFile( CmdPath, finalPath );

			CompletePrint->SetLongValue(_T("CommandSent"), 1L ) ;
		}
	}
	

	return( TRUE ) ;
}



int AddPageToCommandFile(char *fp, UGenCon *fSOrder, UGenCon *CompletePrint, long PageNumber)
{
	TCHAR	 NewImgPath[2048] ;
	TCHAR	 IOBuff[2048] ;
	UADO	*theADO = NULL ;

	TCHAR	*ImagePath	= CompletePrint->GetStringValue(_T("ImagePath")) ;
	RenameFile( ImagePath, NewImgPath ) ;

	if( gLogAmount >= 4 )
	{
		SessionLogDirect( _T("C_NexPress_PrintComplete: AddPageToCommandFile: Adding Page %ld."), PageNumber ) ;
	}

	UGenCon	*PrinterSetup	= fSOrder->GetLongValue(_T("PrinterSetup")) ;
	TCHAR	*ResponseFolder	= PrinterSetup->GetStringValue(_T("ResponseFolder")) ;
	long	 PageID			= CompletePrint->GetLongValue(_T("JobID")) ;
	TCHAR	*BatchID		= fSOrder->GetStringValue(_T("BatchID")) ;
	TCHAR	*OrderID		= fSOrder->GetStringValue(_T("OrderID")) ;
	long	 GroupID		= CompletePrint->GetLongValue( _T("GroupID")) ;
	long	 GroupQty		= CompletePrint->GetLongValue(_T("GroupQty")) ;
	if(GroupQty == 0)
	{
		GroupQty = 1;
	}

	TCHAR	*GroupTmplt		= CompletePrint->GetStringValue( _T("GroupTemplateName")) ;
	long	 Qty			= CompletePrint->GetLongValue(_T("Quantity")) ;
	long	 resolution		= CompletePrint->GetDoubleValue(_T("Resolution"));
	long	 LastPage		= CompletePrint->GetLongValue(_T("ProductPageSeqLast")) ;
	TCHAR	*SpotColorType	= CompletePrint->GetStringValue(_T("SpotColorMaskType"));	
	TCHAR	*SpotColorPath	= CompletePrint->GetStringValue(_T("SpotColorMaskPath"));	
	double	 width			= CompletePrint->GetDoubleValue(_T("ImageWidth"));
	double	 height			= CompletePrint->GetDoubleValue(_T("ImageLines"));
	TCHAR	 WidthText[32] ;
	TCHAR	 HeightText[32] ;
	TCHAR	*Inkname		= CompletePrint->GetStringValue(_T("Inkname"));
	double	 Bleed			= CompletePrint->GetDoubleValue( _T("SpillOver")) ;

	TCHAR	*outputTmplt		= CompletePrint->GetStringValue(_T("Template"));	
	TCHAR	*outputAttrString	= CompletePrint->GetStringValue(_T("TemplateOverride"));	

//SessionLogDirect( _T("C_NexPress_PrintComplete:  outputTmplt = %s, outputAttrString = %s"), outputTmplt, outputAttrString ) ;

	width	= width  + 2 * Bleed ;
	height	= height + 2 * Bleed ;

	sprintf( WidthText, _T("%lf"), width ) ;
	StripTrailingZeros( WidthText ) ;
	sprintf( HeightText, _T("%lf"), height ) ;
	StripTrailingZeros( HeightText ) ;

	int		isDirectory ;
	int		exists;

	TCHAR	*BookAttrString = (TCHAR *) malloc( 100 * 1024 ) ;

//	DumpPage( CompletePrint ) ;

	if( PageNumber == 1L )
	{
		if( gLogAmount >= 4 )
		{
			SessionLogDirect( _T("C_NexPress_PrintComplete: Adding 1st Page %ld: P%09ld, \"%s\"."), PageNumber, PageID, NewImgPath ) ;
		}
		sprintf(IOBuff, _T("<?xml version=\"1.0\" encoding=\"utf-16\"?>")) ;
//		sprintf(IOBuff, _T("<?xml version=\"1.0\" encoding=\"utf-8\"?>")) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf(IOBuff, _T("<DP2Intent xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">")) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("<JobTicketData>") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("<Order order_id=\"%s_%s_%ld_%ld\">"), BatchID, OrderID, GroupID, PageID ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("<Items>") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		if(GroupID == 0)
		{ //not a book, look in output spec for template and overrides and MultiPage (book) qty.
			long	 MultiPageQty = CompletePrint->GetLongValue(_T("MultiPageQty")) ;
			if(MultiPageQty == 0)
			{
				MultiPageQty = 1;
			}

			if(outputTmplt == NULL)
			{
				sprintf( IOBuff, _T("<Item product_id=\"default\" quantity=\"%ld\">"),MultiPageQty ) ;
			}
			else
			{
				if( gLogAmount >= 4 )
				{
					SessionLogDirect( _T("C_NexPress_PrintComplete: Not a book: outputAttrString = %s, outputTmplt = %s, MultiPageQty = %ld"), outputAttrString, outputTmplt, MultiPageQty ) ;
				}	
				if(outputAttrString == NULL)
				{
					sprintf( IOBuff, _T("<Item product_id=\"%s\" quantity=\"%ld\">"), outputTmplt, MultiPageQty ) ;		
				}
				else
				{
					sprintf( IOBuff, _T("<Item product_id=\"%s\" quantity=\"%ld\" %s>"), outputTmplt, MultiPageQty, outputAttrString  ) ;		
				}
			}
		}
		else
		{ //it's a book
			//get substrate overrides (book attribute string)
			theADO = ConnectToADO() ;
			if( theADO )
			{
				TCHAR	 Attribute[1024] ;
				TCHAR	 Value[1024] ;
				TCHAR	 Line[1024] ;

				BookAttrString[0] = 0x00 ;

				UPGenConList	*BookAttrs = GetBookAttributeList( theADO, OrderID, GroupID ) ;
				if( BookAttrs )
				{
					UPGenCon	*aPGC = (UPGenCon *) BookAttrs->GetFirst() ;
					while( aPGC )
					{
						aPGC->GetAttrValue( _T("Attribute"), Attribute ) ;
						aPGC->GetAttrValue( _T("Value"), Value ) ;
						StripTrailingBlanks( Attribute ) ;
						StripTrailingBlanks( Value ) ;
						StripLeadingBlanks( Attribute );
						StripLeadingBlanks( Value );
						sprintf( Line, _T("%s=\"%s\""), Attribute, Value ) ;

						strcat( BookAttrString, Line ) ;
						
						aPGC = (UPGenCon *) BookAttrs->GetNext() ;

						if( aPGC )
							{ strcat( BookAttrString, _T(" ")) ; }
					}
				}
				if( gLogAmount >= 4 )
				{
					SessionLogDirect( _T("C_NexPress_PrintComplete: BookAttrString = %s"), BookAttrString ) ;
				}		
				delete theADO ;
				theADO = NULL ;
			}

			if(GroupTmplt == NULL)
			{
				sprintf( IOBuff, _T("<Item product_id=\"default\" quantity=\"%ld\">"), GroupQty) ;
			}
			else
			{
				if(GroupTmplt[0] == 0x00)
				{
					sprintf( IOBuff, _T("<Item product_id=\"default\" quantity=\"%ld\">"), GroupQty) ;
				}
				else
				{
					sprintf( IOBuff, _T("<Item product_id=\"%s\" quantity=\"%ld\" %s>"), GroupTmplt, GroupQty, BookAttrString ) ;
				}
			}
		} //else it's a book

		WriteUnicodeFile( fp, IOBuff ) ;

		exists = FileOrDirectoryExists(SpotColorPath, &isDirectory);
		if( gLogAmount >= 4 )
		{
			SessionLogDirect( _T("C_NexPress_PrintComplete: SpotColorPath = %s, exists = %d"), SpotColorPath, exists ) ;
		}

		if(exists)
		{
			if( Inkname == NULL )
			{
				//	IF NO INK IS DEFINED DEFAULT IT.
				Inkname = _T("NexPress DryInk clear") ;
				SessionLogDirect( _T("C_NexPress_PrintComplete: WARNING: SpotColor File: \"%s\" exists however, no SpotColor Ink is defined."),
					SpotColorPath ) ;
				SessionLogDirect( _T("C_NexPress_PrintComplete: WARNING: SpotColor Ink being defaulted to: \"%s\"."), Inkname ) ;
			}

			//	BECAUSE NEXPRESS NEEDS THE SPOT COLOR MASK INVERTED, WE WILL DO IT HERE !
			InvertSpotColorMask( PrinterSetup, SpotColorPath ) ;

			sprintf( IOBuff, _T("<filespec page_id=\"%09d\" quantity=\"%d\" width=\"%s\" height=\"%s\" overprint_image=\"%s\" overprint_offset=\"0.0\" overprint_spotcolor=\"%s\">%s</filespec>"),
				PageID, Qty, WidthText, HeightText, SpotColorPath, Inkname  ,NewImgPath ) ;
		}
		else 
		{
			sprintf( IOBuff, _T("<filespec page_id=\"%09d\" quantity=\"%d\" width=\"%s\" height=\"%s\">%s</filespec>"),
				PageID, Qty, WidthText, HeightText, NewImgPath ) ;
		}
		WriteUnicodeFile( fp, IOBuff ) ;
	}
	else	//	PageNumber > 1L 
	{	
		exists = FileOrDirectoryExists(SpotColorPath, &isDirectory);
		if( gLogAmount >= 4 )
		{
			SessionLogDirect( _T("C_NexPress_PrintComplete: SpotColorPath = %s, exists = %d"), SpotColorPath, exists ) ;
		}

		if(exists)
		{
			if( Inkname == NULL )
			{
				//	IF NO INK IS DEFINED DEFAULT IT.
				Inkname = _T("NexPress DryInk clear") ;
				SessionLogDirect( _T("C_NexPress_PrintComplete: WARNING: SpotColor File: \"%s\" exists however, no SpotColor Ink is defined."),
					SpotColorPath ) ;
				SessionLogDirect( _T("C_NexPress_PrintComplete: WARNING: SpotColor Ink being defaulted to: \"%s\"."), Inkname ) ;
			}

			//	BECAUSE NEXPRESS NEEDS THE SPOT COLOR MASK INVERTED, WE WILL DO IT HERE !
			InvertSpotColorMask( PrinterSetup, SpotColorPath ) ;

			sprintf( IOBuff, _T("<filespec page_id=\"%09d\" quantity=\"%d\" width=\"%s\" height=\"%s\" overprint_image=\"%s\" overprint_offset=\"0.0\" overprint_spotcolor=\"%s\">%s</filespec>"),
				PageID, Qty, WidthText, HeightText, SpotColorPath, Inkname  ,NewImgPath ) ;
		}
		else 
		{
			sprintf( IOBuff, _T("<filespec page_id=\"%09d\" quantity=\"%d\" width=\"%s\" height=\"%s\">%s</filespec>"),
				PageID, Qty, WidthText, HeightText, NewImgPath ) ;
		}
		WriteUnicodeFile( fp, IOBuff ) ;

	}
	 
	if( (LastPage == 0) || (LastPage == PageNumber) )
	{ //we are on the last page of the group, add the trailing xml stuff and banner info
					
		//get banner text
		TCHAR *BannerText = CompletePrint->GetStringValue(_T("BannerText"));
		if( gLogAmount >= 4 )
		{
			SessionLogDirect( _T("C_NexPress_PrintComplete: BannerText = \"%s\""), BannerText ) ;
		}
		sprintf( IOBuff, _T("</Item>") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("</Items>") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("<ResponseFolder>%s</ResponseFolder>"), ResponseFolder ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("</Order>") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("</JobTicketData>") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		if(BannerText != NULL) 
		{//add banner page info if we have text
			if(BannerText[0] != 0x00)
			{
				if( gLogAmount >= 4 )
				{
					SessionLogDirect( _T("C_NexPress_PrintComplete: calling WriteBannerText") ) ;
				}
				//in Scripts\\BannerScript.h 
				WriteBannerText(fp, BannerText, CompletePrint, fSOrder);
			}
		}

		sprintf( IOBuff, _T("</DP2Intent>") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;
	}

	free (BookAttrString);
	return( TRUE ) ;
}

int InvertSpotColorMask( UGenCon *PrinterSetup, TCHAR *SpotColorPath )
{
	return( TRUE ) ;	//	NOW DONE IN THE ENGINE !
	int Result = FALSE ;
	ImageMem *theSpotColorImage = ReadImage( SpotColorPath ) ;
	if( theSpotColorImage )
	{
		PIEUtils	*Inverter = new PIEUtils ;
		Inverter->InvertImage( theSpotColorImage ) ;
		delete Inverter ;

		TCHAR		 FileType[64] ;
		PrinterSetup->GetAttrValue( _T("SpotColorMaskType"), FileType ) ;
		if( FileType[0] == 'T' )
			{ WriteTiffImage( theSpotColorImage, SpotColorPath ) ; }
		else
		{
			if( FileType[0] == 'E' )
				{ WriteExifImage( theSpotColorImage, SpotColorPath, 0L ) ; }
			else
				{ WriteJpegImage( theSpotColorImage, SpotColorPath, 0L ) ; }
		}

		delete theSpotColorImage ;
		Result = TRUE ;
	}
	return( Result ) ;
}


UPGenConList *GetBookAttributeList( UADO *theADO, TCHAR *OrderID, long GroupID )
{
	TCHAR			 theQuery[2048] ;
	TCHAR			*theQueryTemplate = _T("SELECT * FROM BookAttributes WHERE OrderID = '%s' AND GroupID = %d Order By Sequence") ;

	sprintf( theQuery, theQueryTemplate, OrderID, GroupID ) ;
	
	UPGenConList *gOrderItems = new UPGenConList( theADO ) ;
	if( gOrderItems )
	{
		int Result = gOrderItems->Query( theQuery, _T("ReadOnly"), _T("Static") ) ;
		if( Result != 1 )
		{
			HandleDBError( theADO ) ;
			delete gOrderItems ;
			return( NULL ) ;
		}
	}
	return( gOrderItems ) ;
}

UPGenConList *GetBookRecord( UADO *theADO, TCHAR *OrderID, long GroupID )
{
	TCHAR			 theQuery[2048] ;
	TCHAR			*theQueryTemplate = _T("SELECT * FROM Books WHERE OrderID = '%s' AND GroupID = %d") ;

	sprintf( theQuery, theQueryTemplate, OrderID, GroupID ) ;
	
	UPGenConList *gOrderItems = new UPGenConList( theADO ) ;
	if( gOrderItems )
	{
		int Result = gOrderItems->Query( theQuery, _T("ReadOnly"), _T("Static") ) ;
		if( Result != 1 )
		{
			HandleDBError( theADO ) ;
			delete gOrderItems ;
			return( NULL ) ;
		}
	}
	return( gOrderItems ) ;
}

int HandleIncompleteError(UGenCon *fSOrder, UGenCon *CompletePrint, TCHAR *SrcMsg)
{
	TCHAR	Msg[1024] ;
	
	//	WE HAVE AN ERROR NOT ENOUGH PAGES WERE RENDERED.
	SessionLogDirect( _T("C_NexPress_PrintComplete: ERROR: This Multi-Page Product %s"), SrcMsg ) ;
	DumpMultiPageIDs() ;

	sprintf( Msg, _T("Multi-Page Product %s: JobID: P%09ld"), SrcMsg,CompletePrint->GetLongValue(_T("JobID"))) ;
	CompletePrint->SetLongValue(_T("ResponseCode"), -102L ) ;
	CompletePrint->SetAttrValue(_T("ResponseText"), Msg ) ;
	
	//	SHOULD WE GENERATE ERROR RESPONSES FOR PAGES THAT SHOWED UP HERE ?
	long ErrorType = 4L ;
	UListIterator	*anIter = new UListIterator( gMultiPageProductList ) ;
	UGenCon			*aPage  = (UGenCon *) anIter->GetFirst() ;
	while( aPage )
	{
		aPage->SetLongValue(_T("ResponseCode"), -102L ) ;
		aPage->SetAttrValue(_T("ResponseText"), Msg ) ;
		WriteErrorResponseFile( fSOrder, aPage, -101, ErrorType, Msg ) ;
		ErrorType = 5L ;	//	SAY WE HAVE ALREADY OUTPUT THE MESSAGE.
		aPage  = (UGenCon *) anIter->GetNext() ;
	}
	delete anIter ;
	return( TRUE ) ;
}


int WriteErrorResponseFile( UGenCon *fSOrder, UGenCon *CompletePrint, 
							long ErrorCode, long ErrorType, TCHAR *ErrorText )
{
	int		 Result = FALSE ;
	TCHAR	 ResponsePath[1024] ;
	UGenCon	*PrinterSetup	= fSOrder->GetLongValue(_T("PrinterSetup")) ;
	TCHAR	*ResponseFolder	= PrinterSetup->GetStringValue(_T("ResponseFolder")) ;
	long	 PageID			= CompletePrint->GetLongValue(_T("JobID")) ;
	TCHAR	*BatchID	= fSOrder->GetStringValue(_T("BatchID")) ;
	TCHAR	*OrderID	= fSOrder->GetStringValue(_T("OrderID")) ;
	
	sprintf( ResponsePath, _T("%s\\P%09ld.rsp"), ResponseFolder, PageID ) ;
	
	TCHAR	theDate[64] ;			
	GetTimeNow(theDate,  _T("%m/%d/%y %H:%M:%S")) ;
	
	char	*fp = fopen( ResponsePath, _T("wb")) ;
	if( fp )
	{
		TCHAR	IOBuff[1024] ;
		IOBuff[0] = 0xFEFF ;
		IOBuff[1] = 0x0000 ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("TYPE: RESPONSE\n") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("PAGE_ID: %ld\n"), PageID ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("ORDER_ID: %s\n"), OrderID ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("BATCH_ID: %s\n"), BatchID ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("ACTION: 0\n") ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("CODE: %ld\n"), ErrorCode ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("ERROR_TYPE: %ld\n"), ErrorType ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("DATE_TIME: %s\n"), theDate ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		sprintf( IOBuff, _T("MSG: \"C_NexPress_PrintComplete: %s\"\n"), ErrorText ) ;
		WriteUnicodeFile( fp, IOBuff ) ;

		fclose( fp ) ;
		Result = TRUE ;
	}
	return( Result ) ;
}


int DumpPage( UGenCon *aGC )
{
	TCHAR		*AttrName ;
	TCHAR		 AttrValue[2048] ;

	UDataDict	*theDict = aGC->GetDataDict() ;

	TCHAR		*GCName = aGC->GetName() ;
	TCHAR		*DDName = theDict->GetName() ;

	SessionLogDirect( _T("Create \"%s\" Using \"%s\"\r\n{\r\n"), GCName, DDName ) ;
	UListIterator	*anIter = new UListIterator( theDict ) ;
	UAttribute		*anAttr = (UAttribute *) anIter->GetFirst() ;
	while( anAttr )
	{
		AttrName = anAttr->GetName() ;
		if( aGC->AttrChanged( AttrName ))
		{
			aGC->GetAttrValue( AttrName, AttrValue ) ;
			SessionLogDirect( _T("\t%s\t\t\"%s\"\r\n"), AttrName, AttrValue ) ;
		}
		anAttr = (UAttribute *) anIter->GetNext() ;
	}
	SessionLogDirect( _T("\r\n%c ;\r\n"), 0x0x7D) ;
	delete anIter ;
	return( TRUE ) ;
}

int CleanMultiPageProductList(UGenCon *fSOrder)
{
	gMultiPageProductList->RemoveAll() ;
	delete gMultiPageProductList ;
	gMultiPageProductList = NULL ;
	fSOrder->SetLongValue(_T("MultiPageProductList"), NULL ) ;
}


int DumpMultiPageIDs()
{
	long	 PageID ;
	UListIterator	*anIter = new UListIterator( gMultiPageProductList ) ;
	UGenCon			*aPage  = (UGenCon *) anIter->GetFirst() ;
	while( aPage )
	{
		PageID		= aPage->GetLongValue(_T("JobID")) ;
		SessionLogDirect( _T("\tPageID: P%09ld"), PageID ) ;
		aPage  = (UGenCon *) anIter->GetNext() ;
	}
	delete anIter ;
	return( TRUE ) ;
}

WriteUnicodeFile( char *fp, TCHAR *Text )
{
	long	Length = strlen( Text ) ;
	fwrite( Text, 2, Length, fp ) ;

//	long	EndOfLine = 0x000A000D ;
//	fwrite( &EndOfLine, 2, 2, fp ) ;
}


TCHAR *RenameFile( TCHAR *ImagePath, TCHAR *NewImgPath )
{
	long	SrcPos, DstPos ;
	SrcPos = 0L ;
	DstPos = 0L ;

	while( ImagePath[SrcPos] )
	{
		if( IsLegalFileChar( ImagePath[SrcPos] ))
		{
			NewImgPath[DstPos] = ImagePath[SrcPos] ;
			DstPos++ ;
		}
		SrcPos++ ;
	}

	if( gLogAmount >= 7 )
	{
		SessionLogDirect( _T("Original File: \"%s\""), ImagePath ) ;
		SessionLogDirect( _T("New File: \"%s\""), NewImgPath ) ;
	}

	if( stricmp( ImagePath, NewImgPath ) == 0 )
	{
		return( NewImgPath ) ;
	}

	//	SOMETIMES IMA STILL HAS THE FILE.
	//	SO DO SOME WAITING AND TRY AGAIN.
	int Result = rename( ImagePath, NewImgPath ) ;
	long	StartClock = Clock() ;
	long	EndClock ;
	while( Result )
	{
		Result = rename( ImagePath, NewImgPath ) ;
		if( gLogAmount >= 4 )
		{
			SessionLogDirect( _T("New File: \"%s\" Result = %ld\r\n"), NewImgPath, Result ) ;
		}

		EndClock = Clock() ;
		if( EndClock - StartClock > 10000 )
		{
			Result = 0 ;
		}
		else
		{
			Sleep( 500 ) ;
		}
	}

	return( NewImgPath ) ;
}

int IsLegalFileChar( TCHAR aChar )
{
	if( aChar >= 'A' && aChar <= 'Z' )	{ return( TRUE ) ; }
	if( aChar >= 'a' && aChar <= 'z' )	{ return( TRUE ) ; }
	if( aChar >= '0' && aChar <= '9' )	{ return( TRUE ) ; }
	if( aChar == '_' || aChar == '.' )	{ return( TRUE ) ; }
	if( aChar == ':' || aChar == '\\' )	{ return( TRUE ) ; }
	if( aChar == ' ' || aChar == '-'  )	{ return( TRUE ) ; }
	return( FALSE ) ;
}

//	CONNECT TO THE ACCESS DATA OBJECT (THE DATABASE)
UADO *ConnectToADO()
{
	int		 result ;

	UADO	*theADO = new UADO ;

	if( theADO == NULL )
	{
		return(NULL) ;
	}

	result = ConnectKPIS( theADO ) ;
	if( result )
	{
		delete theADO ;
		return(NULL) ;
	}

	return( theADO ) ;
}


//	GET ENGLISH LANGUAGE TRANSLATION OF DATABASE ERROR
void HandleDBError(UADO *anADO)
{
	long	ErrorCount, ErrorIndex ;
	TCHAR	ADOErrDesc[2048] ;
	TCHAR	theMsg[4096] ;
	long	StopHere = 0 ;

	Debug(StopHere) ;

	ErrorCount = GetErrorCount( anADO ) ;
	if( ErrorCount == 0L )
	{
		SessionLogDirect( _T("Lost Database Connection.") ) ;
		MessageBox( _T("Lost Database Connection."), _T("MB_OK")) ;
//		ShowDialog( _T("Lost Database Connection."), 0L ) ;
	}
	else
	{
		for( ErrorIndex = 0L ; ErrorIndex < ErrorCount ; ErrorIndex++ )
		{
			GetErrorDescription( anADO, ErrorIndex, ADOErrDesc ) ;
			sprintf( theMsg, "Database Error: %s", ADOErrDesc ) ;
			SessionLogDirect( theMsg ) ;
			MessageBox( theMsg, _T("MB_OK")) ;
//			ShowDialog( theMsg, 0L ) ;
		}
	}
}

void StripTrailingZeros( TCHAR *Source )
{
	long	Pos = strlen( Source ) - 1L ;

	while(	Source[Pos]	== 0x30 )	{ Pos-- ; }
	if(		Source[Pos] == 0x2E )	{ Pos-- ; }
	Pos++ ;
	Source[Pos] = 0x00 ;
}

void StripTrailingBlanks( TCHAR *Source )
{
	long	Pos = strlen( Source ) - 1L ;

	while( Source[Pos] == 0x20 )	{ Pos-- ; }
	Pos++ ;
	Source[Pos] = 0x00 ;
}

void StripLeadingBlanks( TCHAR *Source )
{
	long	Pos = 0 ;
	long	len = strlen( Source ) - 1L ;

	while( Source[Pos] == 0x20 )	{ Pos++ ; }
	long x=0;
	while( Pos <= len)
	{
		Source[x] = Source[Pos] ;
		x++;
		Pos++;
	}
	Source[x] = 0x00;
}

//	IMAGE I/O ROUTINES
ImageMem *ReadImage( TCHAR *FilePath )
{
	PIEReadImage *anImageRdr = new PIEReadImage ;
	anImageRdr->Init(FilePath, 1L) ;
	anImageRdr->DoOp( NULL, NULL, NULL ) ;
	ImageMem *theImage = anImageRdr->GetImage() ;
	delete anImageRdr ;
	return( theImage ) ;
}

void WriteJpegImage( ImageMem *theImage, TCHAR *SrcImageName, long SubSampleSize )
{
	PIEJpeg *PJpeg = new PIEJpeg ;
	int err = PJpeg->CompressToFile(SrcImageName,theImage,SubSampleSize);
	delete PJpeg ;
}

// int WriteExifFile( TCHAR *FilePath, ImageMem *SrcImg, long FRQuality, long SSSize, long SSQuality ) ;
void WriteExifImage( ImageMem *theImage, TCHAR *SrcImageName, long SubSampleSize )
{
	long	FullResQuality = 100L ;
	long	SubSampleQuality = 100L ;

	PIEExif *PExif = new PIEExif ;
	int err = PExif->WriteExifFile( SrcImageName, theImage, FullResQuality, SubSampleSize, SubSampleQuality ) ;
	delete PExif ;
}

void WriteTiffImage( ImageMem *theImage, TCHAR *SrcImageName )
{
	long	SSWidth, SSHeight ;
	long	Depth = theImage->GetDepth() ;
	double	Resolution = 300.0 ;

	PIETiff *PTiff = new PIETiff ;
	PTiff->WriteTiffFile( SrcImageName, theImage, Resolution, Resolution, 0L, 0L, 0L );
	delete PTiff ;
}

int CopyFile( TCHAR *SrcFileName, TCHAR *DstFileName )
{
	TCHAR	 Msg[1024] ;
	int		 Error ;
	int		 Result = TRUE ;
	long	 Length = 0L ;
	long	 BytesWritten = 0L ;

	char	*FileData = GetTheFile( SrcFileName, &Length ) ;
	if( FileData )
	{
		char	*fp = fopen( DstFileName, _T("wb")) ;
		if( fp )
		{
			BytesWritten = fwrite( FileData, 1L, Length, fp ) ;
			if( BytesWritten != Length )
			{
				Error = errno( Msg ) ;
				printf( _T("Could not write \"%s\", Error: %d, %s\r\n"), DstFileName, Error, Msg ) ;
				Result = FALSE ;
			}
			fclose( fp ) ;
		}
		else
		{
			Error = errno( Msg ) ;
			printf( _T("Could not open \"%s\", Error: %d, %s\r\n"), DstFileName, Error, Msg ) ;
			Result = FALSE ;
		}

		free( FileData ) ;
	}
	else
	{
		Error = errno( Msg ) ;
		printf( _T("Could not open \"%s\", Error: %d, %s\r\n"), SrcFileName, Error, Msg ) ;
		Result = FALSE ;
	}

	return( Result ) ;
}

TCHAR *GetTheFile(TCHAR *Path, long *Len)
{
	TCHAR	*Text = NULL ;

	char *fp = fopen( Path, _T("rb")) ;
	if( fp )
	{
		fseek( fp, 0L, 2 ) ;
		int	Length = ftell(fp) ;
		fseek( fp, 0L, 0 ) ;
		Text = malloc( (Length + 32) * 2 ) ;
		fread( Text, 2, Length, fp ) ;
		fclose( fp ) ;
	}
	*Len = Length ;
	return( Text ) ;
}


#include "[S]\\Scripts\\BannerText.h"

