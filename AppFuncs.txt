NUMERIC GetKsp( moduleName,isStandalone,warningThreshold )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, long );
	DDKFunc( Add, P3, Type, long );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,1 );
	KFuncGC( Set,P1,~<moduleName>~ );
	KFuncGC( Set,P2,<isStandalone> );
	KFuncGC( Set,P3,<warningThreshold> );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );
	
	return <result>;
}

VOID UpgradeKInfo(LabUniqueID,killOldLicense)
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, long );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,2 );
	KFuncGC( Set,P1,~<LabUniqueID>~ );
	KFuncGC( Set,P2,<killOldLicense> );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );
}

NUMERIC GetKspI( moduleName,LabUniqueID,&licenseSiteCode,&licenseStartDate,&licenseEndDate,&licenseDaysAllowed,&licenseDaysUsed,&numLicenses )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, text );
	DDKFunc( Add, Result, Type, long );
	DDKFunc( Add, RV1, Type, text );
	DDKFunc( Add, RV2, Type, text );
	DDKFunc( Add, RV3, Type, text );
	DDKFunc( Add, RV4, Type, long );
	DDKFunc( Add, RV5, Type, long );
	DDKFunc( Add, RV6, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,4 );
	KFuncGC( Set,P1,~<moduleName>~ );
	KFuncGC( Set,P2,~<LabUniqueID>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );

	if ( <result> == 1 )
	{
		KFuncGC( Get,RV1,licenseSiteCode );
		KFuncGC( Get,RV2,licenseStartDate );
		KFuncGC( Get,RV3,licenseEndDate );
		KFuncGC( Get,RV4,licenseDaysAllowed );
		KFuncGC( Get,RV5,licenseDaysUsed );
		KFuncGC( Get,RV6,numLicenses );
	}

	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC GetKspL( &licenseLevel )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, Result, Type, long );
	DDKFunc( Add, RV1, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,5 );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	KFuncGC( Get,RV1,licenseLevel );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );
	
	return <result>;
}

NUMERIC GetKspT( moduleName,LabUniqueID )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,7 );
	KFuncGC( Set,P1,~<moduleName>~ );
	KFuncGC( Set,P2,~<LabUniqueID>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

VOID LogKsp()
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,8 );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );
}

NUMERIC RlsKspL( moduleName )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,9 );
	KFuncGC( Set,P1,~<moduleName>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC ReleaseKspS( moduleName,computerName,instanceName )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, text );
	DDKFunc( Add, P3, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,10 );
	KFuncGC( Set,P1,~<moduleName>~ );
	KFuncGC( Set,P2,~<computerName>~ );
	KFuncGC( Set,P3,~<instanceName>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC SaveKsp( moduleName,siteKey,LabID,NewLabID )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, text );
	DDKFunc( Add, P3, Type, text );
	DDKFunc( Add, P4, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,11 );
	KFuncGC( Set,P1,~<moduleName>~ );
	KFuncGC( Set,P2,~<siteKey>~ );
	KFuncGC( Set,P3,~<LabID>~ );
	KFuncGC( Set,P4,~<NewLabID>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC DoKspI( LicenseFileToImport,LabUniqueID )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,12 );
	KFuncGC( Set,P1,~<LicenseFileToImport>~ );
	KFuncGC( Set,P2,~<LabUniqueID>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );

	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC GetKspLRF( &ModuleList,&LabInfo,SiteCode,LicenseSeats,LicenseDays,AddToExisting,WriteAsXML )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, long );
	DDKFunc( Add, P2, Type, long );
	DDKFunc( Add, P3, Type, text );
	DDKFunc( Add, P4, Type, long );
	DDKFunc( Add, P5, Type, long );
	DDKFunc( Add, P6, Type, long );
	DDKFunc( Add, P7, Type, long );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,13 );
	KFuncGC( Set,P1,ModuleList(GetObject) );
	KFuncGC( Set,P2,LabInfo(GetObject) );
	KFuncGC( Set,P3,~<SiteCode>~ );
	KFuncGC( Set,P4,~<LicenseSeats>~ );
	KFuncGC( Set,P5,~<LicenseDays>~ );
	KFuncGC( Set,P6,~<AddToExisting>~ );
	KFuncGC( Set,P7,~<WriteAsXML>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );

	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC HaveKsp()
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,14 );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );

	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

VOID AddKspM( moduleName )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,15 );
	KFuncGC( Set,P1,~<moduleName>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );

	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );
}

VOID SetKspHandler( scriptFileName )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,16 );
	KFuncGC( Set,P1,~<scriptFileName>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );

	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );
}

NUMERIC COKspS( moduleName,labID )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, P2, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,21 );
	KFuncGC( Set,P1,~<moduleName>~ );
	KFuncGC( Set,P2,~<labID>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC GetKspSt( moduleName,&licenseStatus )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, Result, Type, long );
	DDKFunc( Add, RV1, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,22 );
	KFuncGC( Set,P1,~<moduleName>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	
	if ( <result> == 1 )
	{
		KFuncGC( Get,RV1,licenseStatus );
	}
	
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC CIKspS( moduleName )
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, P1, Type, text );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,23 );
	KFuncGC( Set,P1,~<moduleName>~ );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

NUMERIC KspISL()
{
	DataDict( DDKFunc, New );
	DDKFunc( Add, Op, Type, long );
	DDKFunc( Add, Result, Type, long );
	Global( DDKFunc );

	GenCon( KFuncGC,New,DDKFunc );

	KFuncGC( Set,Op,25 );

	KFunc(KFuncGC);
	KFuncGC( Get,Result,result );
	ForgetLocal( KFuncGC );
	ForgetGlobal( DDKFunc );

	return <result>;
}

