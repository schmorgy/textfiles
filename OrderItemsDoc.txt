//FasterParsing(TRUE);



// OrderItemsDoc.txt
//	Globals: WhichOrders - Order(s) #
//			 WhichTitle - Title for Window, contains Order(s) # and additional Title Tex
//			 DocumentQuery
//			 ViewIsImages

Include: ~Utilities.txt~;
Include: ~FormattingRoutines~;
Include: ~GetFullLayout~;
Include: ~NumPadDoc~;
Include: ~CreateOrderItems~;
Include: ~CreateProofSheet~;
IncludeClass(BaseHtml);
IncludeClass(BaseHTMLWin);
IncludeClass(BaseOrderItem);
IncludeClass(BookProduct);
IncludeClass(Book);
IncludeClass(BasePDF);


BaseHtml::LoadTranslationFile(OrderItems,OrderItemTranslation,OrderItem);
Include: ~NewAnimotoBookDoc~;
Include: ~AuditCoats~;

Define:	OrderItemsMessages Using DDSymbol
	Fields:	Value	~These strings are OrderItems related strings used by the user interface.~
	Contains:
	{
		Define: ReadingRecords		using DDText	Fields: Text ~Reading %1 Order Items~
		Define: ReadRecords			using DDText	Fields: Text ~Read %1 Order Items in %2 seconds~
		Define: Querying			using DDText	Fields: Text ~Querying OrderItems~
		Define: NoOrderItem			using DDText	Fields: Text ~Could not find OrderItem %1 for Order = %2~
		Define: RemovingFor			using DDText	Fields: Text ~Are you sure you want to delete the %1 selected Order Items(s)?~
		Define: WantToResequence	using DDText	Fields: Text ~Do you want to resequence %1 selected Order Items(s)?~
		Define: DuplicateFor		using DDText	Fields: Text ~Are you sure you want to duplicate the selected Order Items?~
		Define: NoItemsSelected		using DDText	Fields: Text ~There were no Order Items selected~ 
		Define: NoOrderItems		using DDText	Fields: Text ~There are no Order Items.~
		Define: NoImagesSelected	using DDText	Fields: Text ~There were no images selected~ 
		Define: NoOrderID			using DDText	Fields: Text ~There is no Order ID~
		Define: SetQuantityNoneSelected using DDText Fields: Text ~If you want to set the quantity for one of these items you must select one or more items first.~
		Define: SetQuantityNoneInBook using DDText Fields: Text ~If you want to set the quantity for a book you must select one or more items that are in a book first.~
		Define: NoFindNotepad		using DDText	Fields: Text ~Could not find NotePad.exe at %1~
		Define: CantOpenFile		using DDText	Fields: Text ~Could not open %1. %2~
		Define: TooManySelected		using DDText	Fields: Text ~You have selected too many items. Please limit your selection to %1 items~
		Define:	RunOnHold			using DDText	Fields: Text ~The Order Status is Hold.  Are you sure you want to continue?~
	}

// Extracting strings from text NOT Complete.

VOID RefreshDoc()
{
	KillTimer( 1 );

	if ( <ViewIsImages> )
	{
		RefreshThumbNailView();
	}
	else
	{
		RefreshListView();
	}
}


VOID DelayedRefreshDoc()
{
	SetTimer( 1,2000,~RefreshDoc()~ );
}



NUMERIC RefreshListView()
{
	if ( !OrderItemsDataWindow(GetWindowAddress) )
		{ return FALSE; }
		
		
	if ( IsNull(~<DocumentQuery>~) )
	{
		return PopupMsg(~You can't refresh this view because it was generated by another window~);
	}

	if ( OrderItemsDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	OrderItemsDataWindow( SetWindowTitle,~Order Items Data - <WhichTitle>~ );

	StatusBarText( Translate(OrderItemsMessages,Querying) );

	Start = Ticks();

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	//SetDocumentData( List(GetObject), TRUE );
	SetDocumentData( List(GetObject) );

	StatusBarText( Translate(OrderItemsMessages,ReadingRecords,<Count>) );

	OrderItemsDataWindow( RefreshWindow );

	Duration = (Ticks() - <Start>) / 1000;

	StatusBarText( Translate(OrderItemsMessages,ReadRecords,<Count>,<Duration>) );

	return TRUE;
}


NUMERIC RefreshThumbNailView()
{
	if ( !OrderItemsWindow(GetWindowAddress) )
		{ return FALSE; }
		
	if ( IsNull(~<DocumentQuery>~) )
	{
		return PopupMsg(~You can't refresh this view because it was generated by another window~);
	}

	WaitCursor( Begin );

	OrderItemsWindow( SetWindowTitle,~Order Items - <WhichTitle>~ );

	StatusBarText( Translate(OrderItemsMessages,Querying) );

	Start = Ticks();

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		WaitCursor( End );
		return Warning( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );
	SetDocumentData( List(GetObject) );

	StatusBarText( Translate(OrderItemsMessages,ReadingRecords,~<Count>~) );
	// CreateThumbNailViews4 calls AreOrderItemsInSequence
	OrderItemsWindow( CreateThumbNailViews4,OrderItemsView,OrderItemsThumbNailImage,List,OrderID,Item,~<WhichOrders>~ );
	OrderItemsWindow( RefreshWindow );
	WaitCursor( End );

	Duration = (Ticks() - <Start>) / 1000;

	return StatusBarText( Translate(OrderItemsMessages,ReadRecords,~<Count>~,<Duration>) );
}


QueuedCount = 0;

NUMERIC AddOrderItemToList( OrderID,ID )	// QUEUED FROM OTHER DOCUMENTS
{
	if ( !OrderItemsWindow( FindI,ViewDataFor,~<OrderID>~,Where,View ) )
		{ return TRUE; }

	View( GetName,ViewName );
	OrderItemsWindow( ChangeView,~<ViewName>~ );

	Query = ~Select * From OrderItems Where OrderID = '<OrderID>' AND ID = <ID>~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( GetFirst,Item ) )	// WE ARE TOO SOON ... DATABASE HASN'T FLUSHED YET.
	{
		if ( <++QueuedCount> < 10 )
		{
			Action = STR ( AddOrderItemToList(~<OrderID>~,~<ID>~) );
			QueueContentsAfter( Action,2000 );
			return FALSE;
		}
		else
		{
			Log( Session,~Failed to display OrderItem <OrderID>,<ID> after 20 seconds and 10 tries~ );
			QueuedCount = 0;
			return FALSE;
		}
	}

	QueuedCount = 0;

	if ( View( FindI,Key,~OrderID = '<OrderID>' AND ID = <ID>~,Where,DuplicateImage ) )
	{  
		View( RemoveThumbNailFor,DuplicateImage );
		View( RefreshView );
	}

	GenCon( AnotherThumbNailImage,New,DDICImageDef,SetValues,
			Info1,		~~,
			Info2,		~<$pcon.Item[ID]> Q<$pcon.Item[Quantity]> <$pcon.Item[Remake].IndexValue__R>  <$pcon.Item[ProductID]>~,
			Info3,		~<$pcon.Item[LayoutName]>,<$pcon.Item[Status]>,<$pcon.Item[Type].orNoType>,<$pcon.Item[TypeName].orNoTypeName>,<$pcon.Item[ProdType].orNoProdType>,<$pcon.Item[PackageID].orNoPkgID> <$pcon.Item[PackageGroup].numeric>~,
			Path,		~<$pcon.Item[JobPath].Path>\Preview\<$pcon.Item[JobPath].Filename>.jpg~,
			IsDeleted,	FALSE,
			IsSelected,	TRUE,
			DropTypes,	~Products Image~,
			DataType,	~OrderItems~, 
			Table,		~OrderItems~,
			Group,		~<$pcon.Item[GroupID]>~,
			Spotlit,	~<$pcon.Item[Spotlit]>~,
			Key,		~OrderID = '<$pcon.Item[OrderID]>' AND ID = <$pcon.Item[ID]>~ );

	OrderItemsWindow( AddThumbNailToExistingView,AnotherThumbNailImage,~<OrderID>~,OrderItems,Item );

	return TRUE;
}



// extracted from previous internal AddOrderItemsToDataBase()
NUMERIC UpdateOrderItemsDisplay( &dbase,ID,OrderID,ProductID,Selected,Index)
{
	if ( ~<ProductID>~ != ~~ )
	{
		Query = ~Select OrderItems.*,Products.LayoutName From OrderItems,Products Where OrderID = '<OrderID>' AND OrderItems.ID = <ID> And OrderItems.ProductID = Products.ID~;
	}
	else
	{
		Query = ~Select OrderItems.* From OrderItems Where OrderID = '<OrderID>' AND OrderItems.ID = <ID>~;
	}

	if ( !PGenConList( List,Connection,dBase,Cursor,Static,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( GetFirst,Item ) )
	{
		return FALSE; // Not worth a user response. Warning( Translate( OrderItemsMessages,NoOrderItem,~<ID>~,~<OrderID>~ ) );
	}

	if ( !OrderItemsWindow( FindI,ViewDataFor,~<OrderID>~,Where,View ) )
		{ return TRUE; }

	if ( View( FindI,Key,~OrderID = '<OrderID>' AND ID = <ID>~,Where,DuplicateImage ) )
	{  
		View( RemoveThumbNailFor,DuplicateImage );
		View( RefreshView );
	}
	
	GenCon( AnotherThumbNailImage,New,DDICImageDef,SetValues,
			Info1,		~~,
			Info2,		~<$pcon.Item[ID]> Q<$pcon.Item[Quantity]> <$pcon.Item[Remake].IndexValue__R>  <$pcon.Item[ProductID]>~,
			Info3,		~<$pcon.Item[LayoutName]>,<$pcon.Item[Status]>,<$pcon.Item[Type].orNoType>,<$pcon.Item[TypeName].orNoTypeName>,<$pcon.Item[ProdType].orNoProdType>,<$pcon.Item[PackageID].orNoPkgID> <$pcon.Item[PackageGroup].numeric>~,
			Path,		~<$pcon.Item[JobPath].Path>\Preview\<$pcon.Item[JobPath].Filename>.jpg~,
			IsDeleted,	FALSE,
			IsSelected,	<Selected>,
			DropTypes,	~Products Image~,
			DataType,	OrderItems, 
			Table,		OrderItems,
			Group,		~<$pcon.Item[GroupID]>~,
			Spotlit,	~<$pcon.Item[Spotlit]>~,
			Key,		~OrderID = '<$pcon.Item[OrderID]>' AND ID = <$pcon.Item[ID]>~ );

	if (IsNull(~<Index>~) || Numeric(~<Index>~) < 0)
	{
		OrderItemsWindow( AddThumbNailToExistingView,AnotherThumbNailImage,~<OrderID>~,OrderItems,Item );
	}
	else
	{
		OrderItemsWindow( InsertThumbNailInExistingView,AnotherThumbNailImage,~<OrderID>~,OrderItems,Item,<Index> );
	}

	return View( RefreshView );

}


NUMERIC ViewAsText()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !OrderItemCategory( GetSelected,OrderItemsToView ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = OrderItemsToView( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate(OrderItemsMessages,NoItemsSelected) ); }

	while ( OrderItemsToView(GetNext,OrderItem) )
	{
		if ( !ViewFileInNotepad( ~<$con.OrderItem[JobPath]>~ ) )
		{
			GetLastError( ErrorString,theErr );
			return Warning( Translate( OrderItemsMessages,CantOpenFile,~<$con.OrderItem[JobPath]>~,~<theErr>~ ) );
		}
	}

	return TRUE;
}


NUMERIC DeleteSelectedOrderItems()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( ~<$con.OrderItemCategory[ViewDataType]>~ != OrderItems )
		{ return Warning( ~The view does not contain Order Items~ ); }

	if ( !OrderItemCategory( GetSelected,OrderItemsToDelete ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = OrderItemsToDelete( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate(OrderItemsMessages,NoItemsSelected) ); }

	if ( MessageBox( Translate(OrderItemsMessages,RemovingFor,~<Count>~),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	more = OrderItemsToDelete(GetLast,OrderItem);

	while ( <more> )
	{
		Path = ~<$Con.OrderItem[JobPath].Path>\Preview\<$Con.OrderItem[JobPath].Filename>.jpg~;
		if ( ~<Path>~ != ~~ )
		{
			if ( !BroadcastMessageToAllViews( CanReleaseImage,~<Path>~ ) )
				{ return Warning( Translate( ~Could not delete\n\n<Path>\n\nbecause it is still open in a job or layout.~ ) ); }

			MessagePump();

			if ( !BroadcastMessageToAllViews( ReleaseImage,~<Path>~ ) )		
				{ return Warning( Translate( ~Could not delete\n\n<Path>\n\nbecause it is still open in a job or layout.~ ) ); }

			MessagePump();

			Files( ChMod,~<Path>~,ReadWrite );

			if ( !Files( Delete,~<Path>~ ) )
			{ 
				err = GetLastErrorMsg();
				Warning( ~Could not delete <Path>.  <err>~ );
			}
		}

		GroupID = ~<$Con.OrderItem[GroupID]>~;

		Key	= ~ItemOrderID = '<$Con.OrderItem[OrderID]>' AND ItemID = <$Con.OrderItem[ID]>~;

		OrderID = ~<$Con.OrderItem[OrderID]>~;

		cmd = ~DELETE FROM OrderItemImages WHERE <Key>~;

		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			DocumentRefresh( OrderItemsDoc,~RefreshThumbNailView();~ );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		Key	= ~OrderID = '<$Con.OrderItem[OrderID]>' AND ID = <$Con.OrderItem[ID]>~;

		cmd = ~DELETE FROM OrderItems WHERE <Key>~;

		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			DocumentRefresh( OrderItemsDoc,~RefreshThumbNailView();~ );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		Files( ChMod,~<$con.OrderItem[JobPath]>~,ReadWrite );

		if ( !Files( Delete,~<$con.OrderItem[JobPath]>~ ) )
		{ 
			Warning( ~Could not delete <$con.OrderItem[JobPath]>.  <$Func.GetLastErrorMsg()>~ );
		}

		BaseOrderItem::DeleteUnusedBooks(dbase,<GroupID>,~<$Con.OrderItem[OrderID]>~);

		//if ( OrderItemCategory( FindI,Key,~OrderID = '<$Con.OrderItem[OrderID]>' And ID = <$con.OrderItem[ID]>~,Where,TheIcon ) )
		//{  
		//	OrderItemCategory( Delete,TheIcon );
		//}

		OrderItemsWindow( StatusBar,Text,Translate( ~Deleted Order <$Con.OrderItem[OrderID]>   Item <$con.OrderItem[ID]>~ ) );

		more = OrderItemsToDelete(GetPrev,OrderItem);
	}

	// Example:: to delete the all the entries for a group ID in the books table
	// Query  = 'Delete From Books Where OrderID = 'A' And Group ID = 10 And Not Exists 
	// (Select ID from OrderItems Where GroupdID = 10)

	OrderItemsWindow( AreOrderItemsInSequence);	// Sets the DontAllowDragDrop flag
	SetGroupSpacing(dbase,OrderItemCategory,~<OrderID>~);			// Sets the group spacing flag
	OrderItemCategory( RefreshView );

	return TRUE;
}


// start of scale order items
FirstTime = TRUE;

VOID InitScaleDlg( ID )
{
	if ( <FirstTime> )
	{
		DefineScaleDialog(  );
		FirstTime = FALSE;
	}
	
}


NUMERIC DefineScaleDialog(  )
{
	if ( !DictionaryExists( DDScaleOrderItemsDialog ) )
	{
        Dictionary: DDScaleOrderItemsDialog 
			Fields: Name	Width			type double
			Fields: Name	Height			type double
			Fields: Name	Units			type text
 	}

	Define: DlgData Using DDScaleOrderItemsDialog

	Left = 100;	Top = 100;	DialogWidth = 520;	DialogHeight = 300;
	StaticTextWidth = 90;   StaticTextHeight = 20;
	EditTextWidth = 150;     EditTextHeight = 20;
	vGap = 5; hGap = 5;		ButtonWidth = 90;	ButtonHeight = 20;

	Define: aDialog Using DDWinDef
		Fields:	POSITION				100,100,$DialogWidth,$DialogHeight 
				TITLE					~Scale OrderItem(s) to a New Size~
				TYPENAME				~Dialog~ 
				STATUSBAR				~1 100~
				OACTIONSTEXT			ACTION EXEC ( DoCancelButton() )
				HACTIONSTEXT			ACTION SHOWHELPPAGE ( KPISHelpFile "ScaleLayout.htm" ) 

		Contains: INLISTORDER
		{
			 Define: AdviceStaticText Using DDWinCtrlDef AsSymbol AdviceStaticText 
				Fields: TypeName        StaticText
						Text            ~Enter either the width or height.  The other will be calculated.~
						RightJustified	TRUE
						Position		($DialogWidth/2) - 150 , <vGap>,300, <StaticTextHeight>;

			 Define: WidthPromptStaticText Using DDWinCtrlDef AsSymbol WidthPromptStaticText 
				Fields: TypeName        StaticText
						Text            ~Width~
						RightJustified	TRUE
						Position		115 , AdviceStaticText(GetBottom,Position) + 10,<StaticTextWidth>, <StaticTextHeight>

			 Define: WidthEditText Using DDWinCtrlDef AsSymbol WidthEditText 
				Fields: TypeName        MaskedEditText
						Mask			~########~
						AllowedChars	~.~
						GenConName		THIS
						GenConField		~Width~
						Position		WidthPromptStaticText(GetRight,Position)+$hGap,WidthPromptStaticText(GetTop,Position),<StaticTextWidth>, <StaticTextHeight>

			 Define: WidthUnitsStaticText Using DDWinCtrlDef AsSymbol WidthUnitsStaticText 
				Fields: TypeName        StaticText
						GenConField		~Units~
						Position		WidthEditText(GetRight,Position)+$hGap,WidthEditText(GetTop,Position),<StaticTextWidth>, <StaticTextHeight>

			 Define: HeightPromptStaticText Using DDWinCtrlDef AsSymbol HeightPromptStaticText 
				Fields: TypeName        StaticText
						Text            ~Height~
						RightJustified	TRUE
						Position		WidthPromptStaticText(GetLeft,Position),WidthPromptStaticText(GetBottom,Position)+$vGap,<StaticTextWidth>, <StaticTextHeight>

			 Define: HeightEditText Using DDWinCtrlDef AsSymbol HeightEditText 
				Fields: TypeName        MaskedEditText
						Mask			~########~
						AllowedChars	~.~
						GenConName		THIS
						GenConField		~Height~
						Position		HeightPromptStaticText(GetRight,Position)+$hGap,HeightPromptStaticText(GetTop,Position),<StaticTextWidth>, <StaticTextHeight>
	
			 Define: HeightUnitsStaticText Using DDWinCtrlDef AsSymbol HeightUnitsStaticText 
				Fields: TypeName        StaticText
						GenConField		~Units~
						Position		HeightEditText(GetRight,Position)+$hGap,HeightEditText(GetTop,Position),<StaticTextWidth>, <StaticTextHeight>

			Define: GoButton Using DDWinCtrlDef AsSymbol GoButton 
				Fields:	GENCONNAME		THIS
						DACTIONSTEXT	ACTION EXEC ( GoButton() )
						POSITION		($DialogWidth/2) - ($ButtonWidth) - $hGap,HeightPromptStaticText(GetBottom,Position)+$vGap, $ButtonWidth, $ButtonHeight
						TEXT			Translate( ~Go~ )
						TOOLTIP			Translate( ~Perform the main function of this dialog~ )
						TYPENAME		BUTTON

			Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
				Fields:	GENCONNAME		THIS
						DACTIONSTEXT	ACTION EXEC ( DoCancelButton() )
						POSITION		GoButton(GetRight,Position) + $hGap,GoButton(GetTop,Position),
										$ButtonWidth, $ButtonHeight
						TEXT			Translate( ~Cancel~ )
						TOOLTIP			Translate( ~Exit without performing the operation~ )
						TYPENAME		BUTTON
		}


	DialogHeight = aDialog(GetMaxBottom,Position) + $vGap + 30;

	aDialog( Set,Position,~<Left> <Top> <DialogWidth> <DialogHeight>~ );

	if ( GenCon( PreviewOptions,GetFrom,PreviewOptions,~[GENCONS]~ ) )
	{
		PreviewOptions(GetValue,PreferredUnits,value);
		DlgData(SetValue,Units,~<value>~);
	}
	GenDlg( scaledlg,Definition,aDialog,Data,DlgData,Document,$Doc.This,New,Temporary );
	Global( scaledlg,aDialog,DlgData );

	return TRUE;
}

NUMERIC GoButton()
{
	scaledlg( GetInput );

	Width = DlgData( GetNumeric,Width );
	Height = DlgData( GetNumeric,Height );
	DlgData( GetValue,Units ,Units);

	if ( <Width> == 0 && <Height> == 0  )
	{
		return Warning( Translate(~Select either the new width or the new height.  The other dimension will be calculated.~ ) );
	}
	
	if ( <Width> != 0 && <Height> != 0 )
	{
		return Warning( Translate(~Select either the new width or the new height.  The other dimension will be calculated.~ ) );
	}

	if ( ~<Units>~ == ~Centimeters~)
	{
		// convert to inches
		Width = <Width> / 2.54;
		Height = <Height>/ 2.54;
	}
 
	else if ( ~<Units>~ == ~Millimeters~)
	{

		// convert to inches
		Width = <Width> / 25.4;
		Height = <Height>/ 25.4;
	}

	ScaleSelectedOrderItems( ~<Width>~,~<Height>~  );

	return TRUE;
}

VOID DoCancelButton()
{
	scaledlg( End );
	ForgetGlobal(scaledlg);
	ForgetGlobal(DlgData);
	ForgetGlobal(aDialog);
	FirstTime = TRUE;
}


NUMERIC AuditSelectedOrderItems()
{

	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( ~<$con.OrderItemCategory[ViewDataType]>~ != OrderItems )
		{ return Warning( ~The view on top does not contain Order Items.  Please bring the order items window to the top.~ ); }

	if ( !OrderItemCategory( GetSelected,OrderItemsToAudit ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = OrderItemsToAudit( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate(OrderItemsMessages,NoItemsSelected) ); }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}
	
	saveSpotColorType = 0;
	SavedMessage = ~~;


	more = OrderItemsToAudit(GetFirst,OrderItem);
	count = 0;
	errorCount = 0;
	countSpots = 0;
	countTextures = 0;
	while ( <more> )
	{
		Path = ~<$Con.OrderItem[JobPath]>~;		
		ID = ~<$Con.OrderItem[ID]>~;
		if ( ~<Path>~ != ~~ )
		{
			
			spotColorType = 0;
			ErrorString = AuditTheOrderItem( ~<Path>~, OrderItem, spotColorType );
			if (<spotColorType> == 1) { ++countSpots ;}
			else if (<spotColorType> == 2) { ++countTextures ;}
			
			if (!IsNull(~<ErrorString>~))
			{
				MessageBox( ~Order item ID <ID> <ErrorString>~ ) ;
				return FALSE;
			}
			else if (<saveSpotColorType> > 0 && <saveSpotColorType> != <spotColorType>)
			{
				if (<spotColorType> == 1)
				{
					currentType = ~spot color~;
					previousType = ~spot texture~;
				}
				else
				{
					currentType = ~spot texture~;
					previousType = ~spot color~;
				}
				
				SavedMessage = ~<SavedMessage> <$Chr.CRLF> Order item <ID> has <currentType> and Order item <saveID> has <previousType>~;
			}
			else
			{
				saveSpotColorType = Numeric(~<spotColorType>~);
				saveID = ~<ID>~;
			}

			++count;			

		}


		OrderItemsWindow( StatusBar,Text,Translate( ~Item <$con.OrderItem[ID]> : Audited <Path]>~ ) );

		more = OrderItemsToAudit(GetNext,OrderItem);
	}
	
	if (IsNull(~<SavedMessage>~))
	{
		SavedMessage = ~<count> order items have <countSpots> with spot color and <countTextures> with spot texture~;
	}
	
	if (!IsNull(~<SavedMessage>~))
	{
		MessageBox(~<SavedMessage>~);
	}
	return TRUE;
}

STR AuditTheOrderItem(Path,OrderItem,&spotColorType)
{
	if ( !Document( Job ) )
	{
		return Warning( ~Unable to create document object in GetJobInfo.~ );
	}

	if ( !Job( Create ) )
	{
		Return Warning( ~Unable to create document object in GetJobInfo.~ );
	}

	if ( !Job( ParseFile,~<Path>~ ) )
	{
		return Warning( Translate( ~An error occured while parsing the layout at <Path>~ ) );
	}

	if ( !Job( GetRenderList,0,RenderList ) )
	{ 
		return Warning( Translate( ~There was no render list for <Path>~ ) );
	}
	
	RenderList(AuditSpotColor,ErrorString,spotColorType);
		
	return ~<ErrorString>~;
}

NUMERIC ScaleSelectedOrderItems(Width,Height)
{

	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( ~<$con.OrderItemCategory[ViewDataType]>~ != OrderItems )
		{ return Warning( ~The view on top does not contain Order Items.  Please bring the order items window to the top.~ ); }

	if ( !OrderItemCategory( GetSelected,OrderItemsToScale ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = OrderItemsToScale( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate(OrderItemsMessages,NoItemsSelected) ); }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	more = OrderItemsToScale(GetFirst,OrderItem);
	count = 0;
	while ( <more> )
	{
		Path = ~<$Con.OrderItem[JobPath]>~;		
		ID = ~<$Con.OrderItem[ID]>~;
		if ( ~<Path>~ != ~~ )
		{
			if ( !BroadcastMessageToAllViews( CanReleaseImage,~<Path>~ ) )
				{ return Warning( Translate( ~Could not scale\n\n<Path>\n\nbecause it is still open in a job or layout.~ ) ); }

			MessagePump();

			if ( !BroadcastMessageToAllViews( ReleaseImage,~<Path>~ ) )		
				{ return Warning( Translate( ~Could not scale\n\n<Path>\n\nbecause it is still open in a job or layout.~ ) ); }

			MessagePump();

			Files( ChMod,~<Path>~,ReadWrite );
			
			if (!ScaleTheOrderItem( ~<Path>~,~<Width>~,~<Height>~, OrderItem ))
			{
				scaledlg( SetStatus,0,~Stopping after <count> order items were scaled.~ );
				return FALSE;
			}
			++count;			

		}


		OrderItemsWindow( StatusBar,Text,Translate( ~Item <$con.OrderItem[ID]> : Scaled <Path]>~ ) );

		more = OrderItemsToScale(GetNext,OrderItem);
	}

	scaledlg( SetStatus,0,~Scaled <count> order items.~ );

	OrderItemsWindow( AreOrderItemsInSequence);	// Sets the DontAllowDragDrop flag
	SetGroupSpacing(dbase,OrderItemCategory,~<OrderID>~);			// Sets the group spacing flag
	OrderItemCategory( RefreshView );

	return TRUE;
}

NUMERIC ScaleTheOrderItem( Path,Width,Height,&OrderItem )
{
	if ( !Document( theLayout,ParseFile,~<Path>~ ) )
	{
		Warning( ~An error occured while parsing the job for item having ID <$con.OrderItem[ID]> at <Path> ~ );
		return FALSE;
	}

	if ( !theLayout( GetRenderList,0,aRenderList ) )
	{ 
		return Warning( ~There was no render list for <Path>~ );
	}

	if ( !aRenderList( Scale,~<Width>~,~<Height>~ ) )
	{
		minWidthPixels = aRenderList(minWidthPixels);
		maxWidth = aRenderList(maxWidth);
		if ( GenCon( PreviewOptions,GetFrom,PreviewOptions,~[GENCONS]~ ) )
		{
			PreviewOptions(GetValue,PreferredUnits,Units);
		}
		if (SimilarStr(~<Units>~,Inches))
		{
			Msg =~Failed to scale item having ID <$con.OrderItem[ID]> at <Path>.  One of the sides would be less than <minWidthPixels> pixels or greater than <maxWidth> inches.~;
		}
		else if (SimilarStr(~<Units>~,Centimeters))
		{
			maxWidth *= 2.54;
			Msg = ~Failed to scale ID <$con.OrderItem[ID]> at <Path>.  One of the sides would be less than <minWidthPixels> pixels or greater than <maxWidth> centimeters.~;
		}
		else if (SimilarStr(~<Units>~,Millimeters))
		{
			maxWidth *= 25.4;
			Msg = ~Failed to scale item having ID <$con.OrderItem[ID]> at <Path>.  One of the sides would be less than <minWidthPixels> pixels or greater than <maxWidth> millimeters.~;
		}
		else
		{
			Msg =~Failed to scale item having ID <$con.OrderItem[ID]> at <Path>.  One of the sides would be less than <minWidthPixels> pixels or greater than <maxWidth> inches.~;
		}
		return Warning( ~<Msg>~ );
	}

	if ( !aRenderList( WriteJob,~<Path>~ ) )
	{
		return Warning( ~Failed to write item having ID <$con.OrderItem[ID]> at <Path>.~ );
	}

	scaledlg( SetStatus,0,~Scaled item having ID <$con.OrderItem[ID]> at <Path>~ );

	return TRUE;
}

// End of scale order items

NUMERIC SetGroupSpacing(&dbase,&OrderItemCategory,OrderID)
{
	OrderItemCount = BaseOrderItem::CountItemsInAnyBook(dBase,~'<OrderID>'~);
	if (<OrderItemCount> <= 0)
	{
		OrderItemCategory(SetAllowGroupIconSpacing,0); 
	}
	else
	{
		OrderItemCategory(SetAllowGroupIconSpacing,1); 
	}
	return 1;
}




Include: ~ChgFldDlg.txt~;
// Options list - Change Field, and [ChangeField] button
NUMERIC ChangeSelectedColumn()
{
	return DisplayChangeFieldDlg(OrderItemsDataView);

}


NUMERIC OnOrderSummary()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( View( IsGridView ) )
	{
		if ( !View( GetSelected,SelectedImages ) )
			{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

		if ( !SelectedImages( GetFirst,Item ) )
			{ return Warning( Translate(OrderItemsMessages,NoImagesSelected) ); }

		OrderID = ~<$con.Item[OrderID]>~;
	}
	else
	{
		View( GetName,OrderID );
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}
	
	Actions = ACTION Doc ( BrowserDoc Open BrowserDoc "Init(~Reports/OrderSummary.kpl?OrderID=<OrderID>~,~<OrderID> Summary Report~,25,0,50,90,0,0,0);" );
	return PerformActions( Actions );
}


NUMERIC DisplayProducts(WantEqual)
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	JoinClause =  ~LEFT OUTER JOIN OrderItems On OrderItems.ProductID = Products.ID~;

	Query = ~Select Distinct ProductID From OrderItems Where OrderID='<OrderID>' AND ProductID Is NOT Null Order By ProductID~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Products table: <Query>. <theErr>~ );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		GenCon( Category<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~<Count>)  <$pcon.Item[ProductID]>~,
				IDText,		~ID~ );

		ActionsText = ACTION Exec ( ViewOrderItemsForProduct(~<$pcon.Item[ProductID]>~,<WantEqual>); );

		Category<Count>( SetValuesFrom,ActionsText,ActionsText );
	}
	
	View( DisplayMenu,ListMenu,2,2 );

	return TRUE;
}


NUMERIC ViewOrderItemsForProduct(ID,WantEqual)
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	Operator = <WantEqual> ? ~=~ : ~<>~;

	TitleClause =  <WantEqual> ? ~- Items Using Product <ID>~ : ~- Items Not Using Product <ID>~;

	View( GetName,OrderID );
	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID = '<OrderID>' AND OrderItems.ProductID <Operator> '<ID>' Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~'<OrderID>'~,~<TitleClause>~,~<Query>~,TRUE);" );
	return PerformActions( action );
}


NUMERIC DisplayProductCategories(WantEqual)
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	JoinClause =  ~LEFT OUTER JOIN OrderItems On OrderItems.ProductID = Products.ID~;

	Query = ~Select Distinct Products.Category From Products <JoinClause> Where OrderItems.OrderID='<OrderID>' AND Products.Category Is NOT Null Order By Category~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Products table: <Query>. <theErr>~ );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		GenCon( Category<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~<Count>)  <$pcon.Item[Category]>~,
				IDText,		~ID~ );

		ActionsText = ACTION Exec ( ViewOrderItemsForCategory(~<$pcon.Item[Category]>~,<WantEqual>); );

		Category<Count>( SetValuesFrom,ActionsText,ActionsText );
	}
	

	View( DisplayMenu,ListMenu,2,2 );

	return TRUE;
}



NUMERIC ViewOrderItemsForCategory(Category,WantEqual)
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	Operator = <WantEqual> ? ~=~ : ~<>~;

	TitleClause =  <WantEqual> ? ~- Items using Products from <Category>~ : ~- Items Not Using Products from <Category>~;

	View( GetName,OrderID );
	Query = ~Select OrderItems.*, Products.LayoutName From OrderItems  LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID = '<OrderID>' AND Products.Category <Operator> '<Category>' Order By OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~'<OrderID>'~,~<TitleClause>~,~<Query>~,TRUE);" );
	return PerformActions( action );
}


NUMERIC ViewBooks(WantEqual)
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	Operator = <WantEqual> ? ~<>~ : ~=~;

	TitleClause =  <WantEqual> ? ~- Items in a Book~ : ~- Items not in a Book~;

	View( GetName,OrderID );
	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID = '<OrderID>' AND OrderItems.GroupID <Operator> 0 Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~'<OrderID>'~,~<TitleClause>~,~<Query>~,TRUE);" );
	return PerformActions( action );
}


NUMERIC ViewPrinted(WantEqual)
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	Operator = <WantEqual> ? ~<>~ : ~=~;

	TitleClause =  <WantEqual> ? ~- Items that have been printed~ : ~- Items that have not been printed~;

	View( GetName,OrderID );
	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID = '<OrderID>' AND OrderItems.PrintCount <Operator> 0 Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~'<OrderID>'~,~<TitleClause>~,~<Query>~,TRUE);" );
	return PerformActions( action );
}


NUMERIC DisplayTypes(WantEqual)
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	Query = ~Select Distinct Type From OrderItems Where OrderID='<OrderID>' AND Type Is NOT Null Order By Type~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Products table: <Query>. <theErr>~ );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		if ( !IsNULLOrWhite(~<$pcon.Item[Type]>~) )
		{
			GenCon( Category<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
					Text,		~<Count>)  <$pcon.Item[Type]>~,
					IDText,		~ID~ );

			ActionsText = ACTION Exec ( ViewOrderItemsForType(~<$pcon.Item[Type]>~,<WantEqual>); );

			Category<Count>( SetValuesFrom,ActionsText,ActionsText );
		}
	}

	if ( !<Count> )
	{
		return Warning( ~None of the OrderItems for Order '<OrderID>' have their Type set~ );
	}

	View( DisplayMenu,ListMenu,2,2 );

	return TRUE;
}


NUMERIC ViewOrderItemsForType(TheType,WantEqual)
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	Operator = <WantEqual> ? ~=~ : ~<>~;

	TitleClause =  <WantEqual> ? ~- Items of Type <TheType>~ : ~- Items Not of Type <TheType>~;

	View( GetName,OrderID );
	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID = '<OrderID>' AND OrderItems.Type <Operator> '<TheType>' Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~'<OrderID>'~,~<TitleClause>~,~<Query>~,TRUE);" );
	return PerformActions( action );
}



NUMERIC DisplayTypeNames(WantEqual)
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	Query = ~Select Distinct TypeName From OrderItems Where OrderID='<OrderID>' AND TypeName Is NOT Null Order By TypeName~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Products table: <Query>. <theErr>~ );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		if ( !IsNULLOrWhite(~<$pcon.Item[TypeName]>~) )
		{
			GenCon( Category<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
					Text,		~<Count>)  <$pcon.Item[TypeName]>~,
					IDText,		~ID~ );

			ActionsText = ACTION Exec ( ViewOrderItemsForTypeName(~<$pcon.Item[TypeName]>~,<WantEqual>); );

			Category<Count>( SetValuesFrom,ActionsText,ActionsText );
		}
	}

	if ( !<Count> )
	{
		return Warning( ~None of the OrderItems for Order '<OrderID>' have their TypeName set~ );
	}

	View( DisplayMenu,ListMenu,2,2 );

	return TRUE;
}


NUMERIC ViewOrderItemsForTypeName(TheTypeName,WantEqual)
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	Operator = <WantEqual> ? ~=~ : ~<>~;

	TitleClause =  <WantEqual> ? ~- Items of TypeName <TheTypeName>~ : ~- Items Not of TypeName <TheTypeName>~;

	View( GetName,OrderID );
	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID = '<OrderID>' AND OrderItems.TypeName <Operator> '<TheTypeName>' Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~'<OrderID>'~,~<TitleClause>~,~<Query>~,TRUE);" );
	return PerformActions( action );
}

NUMERIC ViewRemakes()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( View( IsGridView ) )
	{
		if ( !View( GetSelected,SelectedImages ) )
			{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

		if ( !SelectedImages( GetFirst,Item ) )
			{ return Warning( Translate(OrderItemsMessages,NoImagesSelected) ); }

		OrderID = ~<$con.Item[OrderID]>~;
	}
	else
	{
		View( GetName,OrderID );
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}
	Query = ~Select OrderItems.*, Products.LayoutName From OrderItems  LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID = '<OrderID>' AND (NOT Remake = 0) Order By OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~'<OrderID>'~,~Remakes~,~<Query>~,TRUE);" );
	return PerformActions( action );
}

NUMERIC OrderItemsBySequence()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( View( IsGridView ) )
	{
		return Warning( ~Grid view not supported~ );
	}
	else
	{
		View( GetName,OrderID );
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}
	Query = ~Select * From OrderItems Where OrderID In ('<OrderID>') Order By Sequence,Subsequence~;
	action = ACTION DOC ( OrderItemsDoc OpenOnce OrderItemsDoc "Init2(~<OrderID>~,~Sorted by Sequence~,~<Query>~,TRUE);" );
	return PerformActions( action );
}


NUMERIC MarkForRescan()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( View( IsGridView ) )
	{
		if ( !View( GetSelected,SelectedImages ) )
			{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

		if ( !SelectedImages( GetFirst,Item ) )
			{ return Warning( Translate(OrderItemsMessages,NoImagesSelected) ); }

		OrderID = ~<$con.Item[OrderID]>~;
	}
	else
	{
		View( GetName,OrderID );
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}

	Action = ACTION DOC ( ~SetScanfromOrderItemsDoc~ OpenOnce SetScanfromOrderItemsDoc "Init(~<OrderID>~);" );
	
	return PerformActions( Action );	
}


NUMERIC ViewOrderItemImages()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( View( IsGridView ) )
	{
		if ( !View( GetSelected,SelectedImages ) )
			{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

		if ( !SelectedImages( GetFirst,Item ) )
			{ return Warning( Translate(OrderItemsMessages,NoImagesSelected) ); }

		OrderID = ~<$con.Item[OrderID]>~;
	}
	else
	{
		View( GetName,OrderID );
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}

	Query = ~Select * From OrderItemImages Where ItemOrderID = '<OrderID>' ORDER BY ItemID~;
	
	action = ACTION DOC ( OrderItemsImagesDoc Open OrderItemsImagesDoc "Init(~<OrderID>~,~<Query>~);" );
	return PerformActions( action );
}


NUMERIC NavigateOrder()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( View( IsGridView ) )
	{
		if ( !View( GetSelected,SelectedImages ) )
			{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

		if ( !SelectedImages( GetFirst,Item ) )
			{ return Warning( Translate(OrderItemsMessages,NoImagesSelected) ); }

		OrderID = ~<$con.Item[OrderID]>~;
	}
	else
	{
		View( GetName,OrderID );
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}
	
	Action = ACTION DOC ( Navigator OpenOnce FrameSelectorDoc "HandleOrderIDReturnKey(~<OrderID>~);" );
	return PerformActions( Action );
}


NUMERIC SetQuantityFromNumPad()
{
	NumPadDlg( GetInput,GetStrings,Qty,Qty );

	if ( IsNull( ~Qty~ ) )
	{
		return FALSE;
	}

	retval = SetQuantity( ~<Qty>~ );

	OrderItemsWindow( EnableWindow,TRUE,SetWindowOrder,Top );

	return <retval>;
}

NUMERIC NumPadCancel()
{
	OrderItemsWindow( EnableWindow,TRUE,SetWindowOrder,Top );

	return TRUE;
}


NUMERIC SetBookQuantity(Quantity)
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( SelectedOrderItems( ChildCount ) <= 0 )
		{ return  FALSE; }

	WaitCursor( Begin );

	if ( !Ado( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	lastGroupID = 0;
	lastOrderID = ~~;
	while ( SelectedOrderItems(GetNext,OrderItem) )
	{
		thisGroupID = Numeric(~<$Con.OrderItem[GroupID]>~);
		if (<thisGroupID> != 0 && (!SimilarStr(~<lastOrderID>~,~<$Con.OrderItem[OrderID]>~) || <lastGroupID> != <thisGroupID> ))
		{
			Key	= STR ( OrderID = '<$Con.OrderItem[OrderID]>' AND GroupID = <$Con.OrderItem[GroupID]> );

			Cmd = ~Update Books Set Quantity = <Quantity> Where <Key>~;

			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				WaitCursor( End );
				dBase( GetErrorDescription,theErr );
				return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
			}
			lastGroupID = <thisGroupID>;
			lastOrderID = ~<$Con.OrderItem[OrderID]>~;
		}
	}

	OrderItemsWindow( StatusBar,Text,Translate( ~Book Quantity Set to <Quantity>~ ) );

	return  WaitCursor( End );
}


NUMERIC PreviewBookAsPDF(Corrected)
{
	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedItems ) )		
		{  return FALSE; }
	
	if ( !SelectedItems( GetFirst,Item ) )
	{
		return Warning( ~Select one of the items in the book and try again.~ );
	}
	
	OrderID = ~<$con.Item[OrderID]>~;
	GroupID = Numeric(~<$con.Item[GroupID]>~);
	
	if ( !<GroupID> )
	{
		return Warning( ~The selected item is not in a book.  Select one of the items in the book and try again.~ );
	}
	
	if ( <Corrected> )
	{
		Actions = ACTIONS ( Doc( OpenPDFDoc Open OpenPDFDoc "PreviewBookCorrected( ~Corrected PDF for Order <OrderID> - Book <GroupID>~,~<OrderID>~,~<GroupID>~,200,1,1 );" ) );
	}
	else
	{
		Actions = ACTIONS ( Doc( OpenPDFDoc Open OpenPDFDoc "PreviewBook( ~<OrderID>~,~<GroupID>~ );" ) );
	}
	
	return PerformActions( Actions );
}


NUMERIC ImportPDF()
{
	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return FALSE; }
		
	View( GetName,OrderID );
	
	Action = STR ( ImportPDFDoc Open ImportPDFDoc "Init(~<OrderID>~);" );
	return PerformDocActions( Action );
}



NUMERIC SetQuantity( Quantity )
{
	if ( Defined(WantBookQuantity) && <WantBookQuantity>)
	{
		return SetBookQuantity(<Quantity>);
	}
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( SelectedOrderItems( ChildCount ) <= 0 )
		{ return  FALSE; }

	WaitCursor( Begin );

	if ( !Ado( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	while ( SelectedOrderItems(GetNext,OrderItem) )
	{
		Key	= STR ( OrderID = '<$Con.OrderItem[OrderID]>' AND ID = <$Con.OrderItem[ID]> );

		Cmd = ~Update OrderItems Set Quantity = <Quantity> Where <Key>~;

		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			WaitCursor( End );
			dBase( GetErrorDescription,theErr );
			return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
		}

		if ( OrderItem( GetThumbNailInfo,ThumbNail ) )
		{
			ThumbNail( Set,Info2,~<$Con.OrderItem[ID]> Q<Quantity> <$Con.OrderItem[Remake].IndexValue__R> <$Con.OrderItem[ProductID]>~ );
			if ( ThumbNail( GetData,Data ) )
			{
				Data( Set,Quantity,<Quantity> );
			}

			View( RedrawThumbNail,ThumbNail,FALSE );
		}
	}

	OrderItemsWindow( StatusBar,Text,Translate( ~Quantity Set to <Quantity>~ ) );

	return  WaitCursor( End );
}

NUMERIC ShowBookQuantityMenu()
{
	WantBookQuantity = 1;
	Global(WantBookQuantity);
	return DoBookQuantityMenu();
}

NUMERIC ShowQuantityMenu()
{
	WantBookQuantity = 0;
	Global(WantBookQuantity);
	return DoQuantityMenu();

}

NUMERIC DoQuantityMenu()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( SelectedOrderItems( ChildCount ) <= 0 )
		{ return Warning( Translate(OrderItemsMessages,SetQuantityNoneSelected) ); }

	return View( DisplayMenu,QuantityListMenu,2,2 );
}

NUMERIC DoBookQuantityMenu()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	count = HowManyInBook(SelectedOrderItems);

	if (<count> <= 0)
		{ return Warning( Translate(OrderItemsMessages,SetQuantityNoneInBook) ); }
	
	return View( DisplayMenu,QuantityListMenu,2,2 );
}


NUMERIC DisplayProdTypeMenu()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }
		
	ItemCount = SelectedOrderItems( ChildCount );

	if ( <ItemCount> <= 0 )
		{ return Warning( Translate(OrderItemsMessages,SetQuantityNoneSelected) ); }
		
	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );
	
	Query = ~Select BackgroundType From BackgroundTypes Order By BackgroundType~;
	
	if ( !PGenConList( List,Connect,Query,~<Query>~) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}
	
	ProdType = ~~;
	
	if ( <ItemCount> == 1 )
	{
		SelectedOrderItems( GetFirst,OrderItem );
		
		List( GetConnection,dBase );
		
		dBase( GetValuesFor,~Select ProdType From OrderItems Where OrderID='<$con.OrderItem[OrderID]>' AND ID=<$con.OrderItem[ID]>~,ProdType );
	}

	Count = 0;
	
	GenCon( ProdType<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~<Count>)  None~,
			IsChecked,	SimilarStr( ~~,~<ProdType>~ ) ? ~T~ : ~F~,
			IDText,		~ID~ );

	ActionsText = ACTION Exec ( SetProdType(~~); );

	ProdType<Count>( SetValuesFrom,ActionsText,ActionsText );

	while ( List( GetNext,Item ) )
	{
		GenCon( ProdType<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~<Count>)  <$pcon.Item[BackgroundType]>~,
				IsChecked,	SimilarStr( ~<$pcon.Item[BackgroundType]>~,~<ProdType>~ ) ? ~T~ : ~F~,
				IDText,		~ID~ );

		ActionsText = ACTION Exec ( SetProdType(~<$pcon.Item[BackgroundType]>~); );

		ProdType<Count>( SetValuesFrom,ActionsText,ActionsText );
	}
	
	return View( DisplayMenu,ListMenu );
}



NUMERIC SetProdType( theType )
{	
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( SelectedOrderItems( ChildCount ) <= 0 )
		{ return  FALSE; }

	WaitCursor( Begin );

	if ( !Ado( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}
	
	LastOrderID = ~~;
	
	
	while ( SelectedOrderItems(GetNext,OrderItem) )
	{
		if ( String(BeginsWith,~PACKAGE~,Upper(~<theType>~)) != ~~ )
		{
			if ( ~<$Con.OrderItem[OrderID]>~ != ~<LastOrderID>~ )
			{
				PackageGroup = UniquePackageGroup(dBase,~<$Con.OrderItem[OrderID]>~);
				LastOrderID = ~<$Con.OrderItem[OrderID]>~;
			}
		}
		else
		{	
			PackageGroup = 0;
		}
	
		Key	= STR ( OrderID = '<$Con.OrderItem[OrderID]>' AND ID = <$Con.OrderItem[ID]> );

		Cmd = ~Update OrderItems Set ProdType = '<theType>',PackageGroup=<PackageGroup> Where <Key>~;

		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			WaitCursor( End );
			dBase( GetErrorDescription,theErr );
			return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
		}

		if ( OrderItem( GetThumbNailInfo,ThumbNail ) )
		{
			ThumbNail( Set,Info3,~<$Con.OrderItem[LayoutName]>,<$Con.OrderItem[Status]>,<$Con.OrderItem[Type].orNoType>,<$Con.OrderItem[TypeName].orNoTypeName>,<$str.$theType.orNoProdType>,<$Con.OrderItem[PackageID].orNoPkgID> <PackageGroup>~ );
			
			if ( ThumbNail( GetData,Data ) )
			{
				Data( Set,ProdType,~<theType>~ );
				Data( Set,PackgeGroup,~<PackageGroup>~ );
			}

			View( RedrawThumbNail,ThumbNail,FALSE );
		}
	}

	OrderItemsWindow( StatusBar,Text,Translate( ~Product Type Set to <theType>~ ) );

	return  WaitCursor( End );
}



STR CreateEmptyJobForThisProduct( OrderID,Item,TheLayoutPath,PackageNode,Book )
{
	IsMultiple = FALSE;

	LayoutPath = GetFullLayout( ~<TheLayoutPath>~,IsMultiple );

	if ( IsNull( ~<LayoutPath>~ ) )
		{ return ~~; }

	JobPath = CreateJobPath( ~<OrderID>~,~<Item>~ );

	if ( !File( Job,Open,~<JobPath>~,Create,Write ) )	// CREATE AND OPEN THE JOB
	{
		Warning( ~Could not open the job file <JobPath>~ );
		return ~~;
	}

	Job( ~FileType: Job~ );

	if (<Book> != 0)
	{
		Job( ~Book: 1 ~);
	}
	else if ( <PackageNode> >= 0 )
	{
		Job( ~PackageNode: <PackageNode>~ );
	}

	//Job( ~Order:~ );
	//Job( ~     OrderNumber: |<OrderID>|~ );
	//Job( ~     OrderItem: |<Item>|~ );
	//Job( ~     OrderItemQty: 1~ );


	
	if ( <IsMultiple> )
	{
		NumNodes = MakeNumber(~<$Str.$LayoutPath.ext>~);
		if (<NumNodes> <= 0)
		{
			Warning( ~Could not open the job file <JobPath>.  You must select a layout file in folder <TheLayoutPath> which has a number as an extension.~ );
			return ~~;
		}

		Job( ~LayoutPath: |<TheLayoutPath>|;~ );
		
		Job(~ ~);
		i = 0;
		while (<++i> <= <NumNodes>)
		{
			Job(~cc: <i>~);
		}

	}
	else
	{
		Job( ~Use: |<LayoutPath>|~ );
	}
	
	Job( Close );

	ProductPreviewPath = MakePreviewPathFromPath( ~<LayoutPath>~,FALSE );

	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );

	BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );

	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );

	Files( Delete,~<OrderItemPreviewPath>~ );

	Files( Copy,~<ProductPreviewPath>~,~<OrderItemPreviewPath>~ );

	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );

	Log( Session,~Created Job for Order <OrderID>, Item <Item>. Path is <JobPath>~ );

	return ~<JobPath>~;
}

NUMERIC SetOrderStatus()	
{
	if ( <ViewIsImages> )
	{
		if ( !GenCon( View,GETACTIVEVIEW ) )
		{ 
			return Warning( Translate(UIMessages,NoActiveView) );
		}
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	View( GetName,OrderID );

	if ( IsNull( ~<OrderID>~ ) ) { return FALSE; }

	OrderItemsWindow( GetWindowPosition,Left,Top);

	Actions = ACTIONS ( Doc( ~SetOrderStatusDoc~ Open SetOrderStatusDoc "Init( ~<OrderID>~,~<Left>~,~<Top>~ );" ) );
	return PerformActions( Actions );
}


NUMERIC DuplicateOrderItem()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,SelectedOrdersItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( SelectedOrdersItems( ChildCount ) <= 0 )
		{ return Warning( Translate(OrderItemsMessages,NoItemsSelected) ); }

	if ( MessageBox( Translate( OrderItemsMessages,DuplicateFor ),YESNO ) != YES )
		{ return FALSE; }

	Count = 0;

	WaitCursor( Begin );

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	while ( SelectedOrdersItems( GetNext,OrderItem ) )
	{
		OrderID = ~<$con.OrderItem[OrderID]>~;

		NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );
		newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );

		OrderItemsWindow( StatusBar,Text,~Adding Item <NextOrderItem> for Order <OrderID>~ );

		JobPath = CreateJobPath( ~<OrderID>~,~<NextOrderItem>~ );

		Files( ChMod,~<JobPath>~,ReadWrite );

		Files( Delete,~<JobPath>~ );

		if ( !Files( Copy,~<$con.OrderItem[JobPath]>~,~<JobPath>~ ) )
		{
			WaitCursor( End );
			return Warning( ~Could not copy '<$con.OrderItem[JobPath]>' to '<JobPath>'~ );
		}

		Files( ChMod,~<JobPath>~,ReadWrite );

		OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );

		BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );

		MessagePump();

		Files( ChMod,~<$con.OrderItem[OrderItemPreviewPath]>~,ReadWrite );

		Files( Delete,~<$con.OrderItem[OrderItemPreviewPath]>~ );

		//if ( ~<$con.OrderItem[PreviewPath]>~ != ~~ )
		//{
		//	Files( Copy,~<$con.OrderItem[PreviewPath]>~,~<OrderItemPreviewPath>~ );
		//	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
		//}
		
		// Duplicate Order Items
		if ( !AddOrderItemToDataBase( dbase,<NextOrderItem>,~<OrderID>~,~<$con.OrderItem[ProductID]>~,~<$con.OrderItem[Quantity]>~,
										<newSequence>,~<JobPath>~,~<$con.OrderItem[type]>~,~<$con.OrderItem[TypeName]>~,
										0,0,~<$con.OrderItem[ProductCode]>~,~~ ,0,~<$con.OrderItem[ProdType]>~,~<$con.OrderItem[ImagesOrderID]>~,~<$con.OrderItem[ImagesSubjectID]>~) ) 
		{
			BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
			Files( ChMod,~<JobPath>~,ReadWrite );
			Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
			Files( Delete,~<JobPath>~,Delete,~<OrderItemPreviewPath>~ );
			return WaitCursor( End );
		}

		MaintainOrderItemImages( dBase,~<OrderID>~,~<NextOrderItem>~,~<JobPath>~ );

		UpdateOrderItemsDisplay(dbase,<NextOrderItem>,~<OrderID>~,~<$con.OrderItem[ProductID]>~,FALSE);

		++Count;
	}

	if ( $Count )
		{ OrderItemsWindow( StatusBar,Text,~Added <Count> Items to Order <OrderID>~ ); }

	WaitCursor( End );

	return TRUE;
}


NUMERIC MaintainOrderItemImages( &Connection,OrderID,ItemID,JobPath )
{
	if ( !Document( Job,ParseFile,~<JobPath>~ ) )
	{
		return Warning( ~An error occured while parsing the job at <JobPath>~ );
	}

	if ( !Job( GetRenderList,0,aRenderList ) )
	{ 
		return Warning( ~There was no render list for <JobPath>~ );
	}

	aRenderList( SetConnection,Connection );

	if ( !aRenderList( MaintainCrossReference,~<OrderID>~,~<ItemID>~,TRUE ) )
	{ 
		return Warning( ~Failed to MaintainCrossReference for <JobPath>~ );
	}

	return TRUE;
}



NUMERIC AddItemForProduct( ProductID )		// Called from ProductsDoc
{
	if ( !OrderItemsWindow( GetActiveViewOfWindow,View ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	View( GetName,OrderID );

	WaitCursor( Begin );

	if ( !ADO( dBase,Connect ) ) 
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	Query = ~Select * From Products Where ID = '<ProductID>'~;

	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( GetFirst,Product ) )
	{
		return Warning( Translate( ~Could not find a product with ID = <ProductID>~ );
	}

	if ( Product( GetNumeric,Package ) )
	{
		if (Product(GetNumeric,Book)) { groupID = UniqueGroupID(dbase,~<OrderID>~); } 
		else { groupID = 0; }
		OIResult =  CreateOrderItemsForPackage( dBase,~<ProductID>~,~<OrderID>~,<groupID> );
		if (<OIResult> < 0)
		{
			return FALSE;
		}
	}

	NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );
	newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );

	OrderItemsWindow( StatusBar,Text,~Adding Item <NextOrderItem> for Order <OrderID>~ );

	if ( ~<$pcon.Product[ProductType]>~ == ~Digital~ )	// IS THIS A DIGITAL PRODUCT
	{
		JobPath = CreateEmptyJobForThisProduct( ~<OrderID>~,<NextOrderItem>,~<$pcon.Product[ProductLayoutPath]>~,-1,0 );
		
		if ( IsNull( ~<JobPath>~ ) )
			{ return FALSE; }
	}

	ProductPreviewPath = MakePreviewPathFromPath( ~<$pcon.Product[ProductLayoutPath]>~,FALSE );
	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );

	BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
	Files( Delete,~<OrderItemPreviewPath>~ );
	Files( Copy,~<ProductPreviewPath>~,~<OrderItemPreviewPath>~ );

	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );

	//AddItemForProduct
	if ( !AddOrderItemToDataBase( dbase,<NextOrderItem>,~<OrderID>~,~<$pcon.Product[ID]>~,1,<newSequence>,~<JobPath>~,~~,~~,
										0,0,~~,~~,0,~<$pcon.Product[ProdType]>~ ) )	// ADD THE ORDER ITEM TO THE DATABASE
	{
		BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
		Files( ChMod,~<JobPath>~,ReadWrite );
		Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
		Files( Delete,~<JobPath>~,Delete,~<OrderItemPreviewPath>~ );
		break;
	}

	MaintainOrderItemImages( dBase,~<OrderID>~,~<NextOrderItem>~,~<JobPath>~ );

	UpdateOrderItemsDisplay(dbase,<NextOrderItem>,~<OrderID>~,~<$pcon.Product[ID]>~,TRUE);

	WaitCursor( End );

	OrderItemsWindow( StatusBar,Text,~Added and OrderItem for Product <ProductID> to Order <OrderID>~ );

	//DocumentRefresh( OrderItemsDoc,~RefreshListView();~ );

	return TRUE;
}




NUMERIC AddAnOrderItem( &dBase,OrderID,Quantity,ProductID,ProductType,ProductLayoutPath,
						ProductPreviewPath,PackageNode,Sequence,Subsequence,GroupID,Index,
						PackageID,PackageGroup,ProdType )
{
	NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );

	if (IsNull(~<Sequence>~))
	{		
		Sequence = BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence ); 
	}

	Sequence =  Numeric(~<Sequence>~);
	Subsequence =  Numeric(~<Subsequence>~);
	GroupID =  Numeric(~<GroupID>~);
	PackageGroup =  Numeric(~<PackageGroup>~);

	OrderItemsWindow( StatusBar,Text,~Adding Item <NextOrderItem> for Order <OrderID>~ );

	if ( ~<ProductType>~ == ~Digital~ )	// IS THIS A DIGITAL PRODUCT
	{
		JobPath = CreateEmptyJobForThisProduct( ~<OrderID>~,<NextOrderItem>,~<ProductLayoutPath>~,~<PackageNode>~, <groupID>,~<ProdType>~);
		
		if ( IsNull( ~<JobPath>~ ) )
			{ return FALSE; }	
	}

	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );

	BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
	Files( Delete,~<OrderItemPreviewPath>~ );
	Files( Copy,~<ProductPreviewPath>~,~<OrderItemPreviewPath>~ );

	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );

	if ( !AddOrderItemToDataBase( dbase,<NextOrderItem>,~<OrderID>~,~<ProductID>~,<Quantity>,<Sequence>,~<JobPath>~,~~,~~,<Subsequence>,<GroupID>,~~,~<PackageID>~,~<PackageGroup>~,~<ProdType>~ ) )	// ADD THE ORDER ITEM TO THE DATABASE
	{
		BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
		Files( ChMod,~<JobPath>~,ReadWrite );
		Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
		Files( Delete,~<JobPath>~,Delete,~<OrderItemPreviewPath>~ );
		return FALSE;
	}

	MaintainOrderItemImages( dBase,~<OrderID>~,~<NextOrderItem>~,~<JobPath>~ );
	UpdateOrderItemsDisplay(dbase,<NextOrderItem>,~<OrderID>~,~<ProductID>~,TRUE,~<Index>~);
	

	return TRUE;
}

// if groupID is nonzero, this is a book
NUMERIC CreateOrderItemsForPackage( &dBase,PackageID,OrderID ,groupID)
{
	groupID = Numeric(~<groupID>~);
	Query = ~Select * From Packages Where PackageID = '<PackageID>' Order By PackageID,Sequence~;

	if ( !PGenConList( PackageList,Connection,dBase,Cursor,Forward,Query,~<Query>~ ) )
	{
		dBase( GetErrorDescription,theErr );
		Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
		return -1;
	}

	Count = 0;
	
	PackageGroup = UniquePackageGroup(dBase,~<OrderID>~);

	while ( PackageList( GetNext,Product ) )
	{
		Quantity = ~<$pcon.Product[Quantity]>~;
		ProductID = ~<$pcon.Product[ProductID]>~;

		if ( !dBase( GetValuesFor,~Select ProductType,ProductLayoutPath,PreviewPath From Products Where ID = '<ProductID>'~,ProductType,LayoutPath,PreviewPath ) )
		{
			dBase( GetErrorDescription,theErr );
			Warning( ~Error getting the layout path for product <ProductID>: <theErr>~ );
			return -1;
		}

		newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );
		newsubsequence = 0;
		currentPosition = -1;				// place the package icon at end of the order items window

		if ( !AddAnOrderItem( dBase,~<OrderID>~,~<Quantity>~,~<ProductID>~,~<ProductType>~,~<LayoutPath>~,
								~<PreviewPath>~,~<$pcon.Product[TargetNode]>~,<newSequence>,<newSubsequence>,
								<groupID>,<currentPosition>,~<PackageID>~,~<PackageGroup>~,
								<groupID> ? ~Book~ : ~Package~ ) )
		{
			return -1;
		}


		++Count;
	}
	if (<groupID>)
	{
		// get the device type, such as NexPress from the products table, and the book boolean in the products table
		// if the book boolean is true, generate a new unique group id for the order and pass this
		// into the call to AddAnOrderItem below
		if ( !dBase( GetValuesFor,~Select DeviceType,Book,ProductLayoutPath From Products Where ID = '<PackageID>'~,DeviceType,isBook,LayoutPath ) )
		{
			dBase( GetErrorDescription,theErr );
			Warning( ~Error getting the layout path for product <ProductID>: <theErr>~ );
			return -1;
		}
		TemplateName = ~~;
		Banner = ~~;
		InkName = ~~;
		Bleed = 0;
		if (Numeric(~<isBook>~) && !IsNull(~<DeviceType>~) && SimilarStr(~<DeviceType>~,NexPress))
		{
			MyQuery = ~Select * From BookProductsFor<DeviceType> Where ProductID = '<PackageID>'~;
			if ( !PGenConList( MyList,Connection,dBase,Cursor,Forward,QUERY,~<MyQuery>~ ) )
			{ 
				MyList( GetErrorDescription,0,theErr );
				Log(Session, ~Unable to query database. Query: <MyQuery>; <theErr>~ );
				return FALSE;
			}

			if (!MyList(GetFirst,Record))
			{
				Log(Session, ~Error: Missing record in table BookProductsFor<DeviceType> for product <PackageID>.  Default values used for Templatename, bleed, inkname, banner~ );
				TemplateName = ~~;
				Bleed = 0.0;
				InkName = ~~;
				Banner = ~~;
				DontOverrideTemplateBleed = 0;
				DontRenderBleed = 0;
			}
			else
			{
				TemplateName = ~<$pcon.Record[TemplateName]>~;
				Banner = ~<$pcon.Record[Banner]>~;
				InkName = ~<$pcon.Record[InkName]>~;
				Bleed = ~<$pcon.Record[Bleed]>~;
				DontOverrideTemplateBleed = Numeric(~<$pcon.Record[DontOverrideTemplateBleed]>~);
				DontRenderBleed = Numeric(~<$pcon.Record[DontRenderBleed]>~);
			}
		}
		Book( New,aBook );
		
		if (!aBook.UpdateBooksTable(~<OrderID>~,<groupID>,~<TemplateName>~,1,~<Banner>~,~<InkName>~,~<Bleed>~,~<DeviceType>~,~<LayoutPath>~,<DontOverrideTemplateBleed>,<DontRenderBleed>))
		{
			return -1;
		}
		if (!UpdateBookAttributesTable(~<PackageID>~, ~<OrderID>~,~<groupID>~))
		{
			return -1;
		}
	}

	return <Count>;
}


NUMERIC CopyOrderItemToOrder( &dBase,&OrderItem,OrderID,DeleteOriginal )
{
	newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );
	NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );

	Verb = <DeleteOriginal> ? ~Moving~ : ~Copying~;

	OrderItemsWindow( StatusBar,Text,~<Verb> Item <$con.OrderItem[ID]> of Order <$con.OrderItem[OrderID]> to Item <NextOrderItem> Of Order <OrderID>~ );

	Log( Session,~<Verb> Item <$con.OrderItem[ID]> of Order <$con.OrderItem[OrderID]> to Item <NextOrderItem> Of Order <OrderID>~ );

	JobPath = CreateJobPath( ~<OrderID>~,~<NextOrderItem>~ );

	Files( ChMod,~<JobPath>~,ReadWrite );
	Files( Delete,~<JobPath>~ );

	if ( !Files( Copy,~<$con.OrderItem[JobPath]>~,~<JobPath>~ ) )
	{
		return Warning( ~Could not copy '<$con.OrderItem[JobPath]>' to '<JobPath>'~ );
	}

	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );
	BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
	MessagePump();

	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
	Files( Delete,~<OrderItemPreviewPath>~ );

	// CopyOrderItemToOrder
		
	if ( !AddOrderItemToDataBase( dbase,<NextOrderItem>,~<OrderID>~,~<$con.OrderItem[ProductID]>~,~<$con.OrderItem[Quantity]>~,
										<newSequence>,~<JobPath>~,~<$con.OrderItem[type]>~,~<$con.OrderItem[TypeName]>~,
										0,0,~<$con.OrderItem[ProductCode]>~,~~ ,0,~<$con.OrderItem[ProdType]>~,~<$con.OrderItem[ImagesOrderID]>~,~<$con.OrderItem[ImagesSubjectID]>~) ) 
	{
		BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
		Files( ChMod,~<JobPath>~,ReadWrite );
		Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
		Files( Delete,~<JobPath>~,Delete,~<OrderItemPreviewPath>~ );
		return FALSE;
	}

	if ( <DeleteOriginal> )
	{
		Files( ChMod,~<$con.OrderItem[JobPath]>~,ReadWrite );
		Files( Delete,~<$con.OrderItem[JobPath]>~ );

		Key	= ~ItemOrderID = '<$Con.OrderItem[OrderID]>' AND ItemID = <$Con.OrderItem[ID]>~;

		cmd = ~DELETE FROM OrderItemImages WHERE <Key>~;

		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			DocumentRefresh( OrderItemsDoc,~RefreshThumbNailView();~ );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		Key	= ~OrderID = '<$Con.OrderItem[OrderID]>' AND ID = <$Con.OrderItem[ID]>~;

		cmd = ~DELETE FROM OrderItems WHERE <Key>~;

		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			DocumentRefresh( OrderItemsDoc,~RefreshThumbNailView();~ );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		if ( !IsNull(~<$con.OrderItem[PreviewPath]>~) )
		{
			OrderItemPreviewPath = ~<$con.OrderItem[PreviewPath]>~;
			BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
			MessagePump();
			Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
			Files( Delete,~<OrderItemPreviewPath>~ );
		}

		OrderItemPreviewPath = MakePreviewPathFromPath( ~<$con.OrderItem[JobPath]>~,TRUE );
			
		BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );
		MessagePump();
		Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );
		Files( Delete,~<OrderItemPreviewPath>~ );
	}

	MaintainOrderItemImages( dBase,~<OrderID>~,~<NextOrderItem>~,~<JobPath>~ );

	UpdateOrderItemsDisplay(dbase,<NextOrderItem>,~<OrderID>~,~<$con.OrderItem[ProductID]>~,FALSE);

	return TRUE;
}
/*
Behavior for dragging and dropping order items within the same window

1.  if dragging and dropping a complete book
	if groupInfoType == 0 (end of a book)
	add the order items to the end of a book

2.  if dragging and dropping a complete book
	between two complete books (cursor outside book on each side
	move the book to the new position

3.  if dragging and dropping a complete book to the beginning of a book
	add the order items to the beginning of a book

4.  Drag and drop items from within a book to the end of another book
    Items are moved to the end of the book

5.  Drag and drop items from within a book to outside of a book
	Items are moved from the book to outside the book

6.  Drag and drop items from within a book to the beginning of another book
    Items are added to the beginning of a book

7.  Drag and drop items not in a book to the end of a book
    Items are moved to the end of the book

8.  Drag and drop items not in a book to another position within the order
	items window not in a book.  Items are moved to the new position

9.  Drag and drop items not in a book to the beginning of another book
    Items are added to the beginning of a book  
*/
NUMERIC OrderItemDrop( &SelectedOrderItems, &SrcView,&DragDropInfo )
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
	{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		Log( Session, ~LoadCategories(): Unable to connect to the database. <theError>~ );
		Warning( ~Unable to connect to database.  Please see the session log for further information~);
		return FALSE;
	}
	SrcView( Get,DontAllowDragDrop,DontAllowDragDrop);
	if (<DontAllowDragDrop>)		// if the items are sorted by ID do not drag/drop
	{	 
		return TRUE;	
	}
	SrcView( Get,Text,OrderID );		
	WaitCursor( Begin );

	// if no items are selected, no work to do
	if ( !SelectedOrderItems( GetFirst,Item))
	{
		return TRUE;
	}

	GroupInfoType = ~<$con.DragDropInfo[GroupInfo]>~;

	// Get the sequence number of the item dropped onto
	newPosition = ~<$CON.DragDropInfo[DropLocation]>~;				// Zero based

	SrcView( GetAll, OrderItemsList );

	totalOrderItems = OrderItemsList(ChildCount);
	if (OrderItemsList(GetAt,<newPosition>,DroppedOntoItem))
	{
		if (<GroupInfoType> == 0)
		{
			// into the tail end of a book
			// newPosition points to first one after the book
			OrderItemsList(GetAt,<newPosition>-1,PreviousItem);
			DroppedOntoSequence = Numeric(~<$con.PreviousItem[Sequence]>~);
			DroppedOntoSubsequence = Numeric(~<$con.PreviousItem[Subsequence]>~) + 1;
			DroppedOntoGroupID = ~<$con.PreviousItem[GroupID]>~;
		}
		else
		{
			// inside a book
			// newPosition and DroppedOntoItem points to an item in the book.  Want to insert just before this item
			OrderID = ~<$con.DroppedOntoItem[OrderID]>~;
			DroppedOntoSequence = ~<$con.DroppedOntoItem[Sequence]>~;
			DroppedOntoSubsequence = ~<$con.DroppedOntoItem[Subsequence].numeric>~;
			DroppedOntoGroupID = ~<$con.DroppedOntoItem[GroupID]>~;
		}
	}
	else if (<newPosition> == <totalOrderItems>)
	{
		if (<GroupInfoType> == 1)
		{
			// end of the order, not in a book.  Get the last item in the order
			// 
			OrderItemsList(GetAt,<totalOrderItems>-1,DroppedOntoItem);
			DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~);
			DroppedOntoSubsequence = Numeric(~<$con.DroppedOntoItem[Subsequence]>~) + 1;
			DroppedOntoGroupID = 0;
			OrderID = ~<$con.DroppedOntoItem[OrderID]>~;
		}
		else if (<GroupInfoType> == 0)
		{
			// end of the order, into the tail end of a book
			OrderItemsList(GetAt,<totalOrderItems>-1,DroppedOntoItem);
			DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~);
			DroppedOntoSubsequence = Numeric(~<$con.DroppedOntoItem[Subsequence]>~) + 1 ;
			DroppedOntoGroupID = ~<$con.DroppedOntoItem[GroupID]>~;
		}
		else // can get groupinfotype of -1 here
		{
			// into the tail end of a book
			OrderItemsList(GetAt,<totalOrderItems>-1,DroppedOntoItem);
			DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~);
			DroppedOntoSubsequence = Numeric(~<$con.DroppedOntoItem[Subsequence]>~) + 1;
			DroppedOntoGroupID = ~<$con.DroppedOntoItem[GroupID]>~;
		}
	}
	else
	{
		// unknown error
		Log(Session,~Unknown error dropping order items Order = <OrderID>, Position = <newPosition>, Total Order Items = <totalOrderItems>, GroupInfoType = <GroupInfoType>~);
		return FALSE;
	}

	PrevousItemGroupID = 0;
	if (<newPosition> > 0)
	{
		if (OrderItemsList(GetAt,<newPosition>-1,PreviousItem))
		{
			PrevousItemGroupID = ~<$con.PreviousItem[GroupID]>~;
		}
	}

	// how many items were selected?
	selectedItemsCount = SelectedOrderItems( ChildCount );

	count = 0;

	GroupIDToUse = 0;

	completeBook = IsCompleteBook(dbase,SelectedOrderItems);

	if (<completeBook>)
	{
		if (!HandleEntireBook(dbase,SelectedOrderItems,<selectedItemsCount>,<DroppedOntoSequence>,<DroppedOntoSubsequence>,<PrevousItemGroupID>,<DroppedOntoGroupID>,<GroupInfoType>,<newPosition>))
			{ return TRUE; }
	}
	else
	{
		// at least one of the order items is in a different book
		if (<GroupInfoType> == 0)
		{
			GroupIDToUse = <PrevousItemGroupID>;
		}
		else if (<GroupInfoType> == 1)
		{
			if (<PrevousItemGroupID> == <DroppedOntoGroupID> && <PrevousItemGroupID> > 0)
			{
				// inside a book
				GroupIDToUse = <DroppedOntoGroupID>;
			}
			else
			{
				// place the dragged item outside of the group
				GroupIDToUse = 0;
			}
		}
		else if (<GroupInfoType> == 2)
		{
			// beginning of a group
			GroupIDToUse = <DroppedOntoGroupID>;
		}
		// Increment all order items (in memory) having a sequence == droppedOntoSequence and subsequence >= DroppedOntoSubsequence by the number selected.  Also sets the group ID
		// Then sets the subsequence number of all selected items to DroppedOntoSubsequence+0,+1,+2, etc. and sequence number to DroppedOntoSequence
		//OrderItemCategory(UpdateOrderItemsList,<DroppedOntoSequence>,<DroppedOntoSubsequence>,<GroupIDToUse>,~<OrderID>~,<selectedItemsCount>);
		OrderItemCategory(UpdateImagesList,Sequence,<DroppedOntoSequence>,Subsequence,<DroppedOntoSubsequence>,<selectedItemsCount>,Data,GroupID,<GroupIDToUse>,ViewDefinition,Group,<GroupIDToUse>);

		// Sorts the list by removing each selected item's DDICImageDef GenCon from the list and re-inserting it starting at newPosition 
		OrderItemCategory(InsertSelectedAt,<newPosition>);

		// Increment all order items (in database) having a sequence == droppedOntoSequence and subsequence >= DroppedOntoSubsequence by the number selected
		UpdateOrderItemsSubseqRange(dbase,<selectedItemsCount>,<DroppedOntoSequence>,<DroppedOntoSubsequence>,~<OrderID>~);

		// Increment selected order items (in database and memory) to sequence = droppedOntoSequence and subsequence = DroppedOntoSubsequence, GroupID = GroupIDToUse and DroppedOntoSubsequence+ 1, ....etc
		UpdateOrderItems(dbase,SelectedOrderItems,<DroppedOntoSequence>,<DroppedOntoSubsequence>,<GroupIDToUse>);
	}

	SetGroupSpacing(dbase,OrderItemCategory,~<OrderID>~);
	OrderItemCategory(FreeCachedImageCorrections);
	OrderItemCategory( RefreshView );
	WaitCursor( End );
	
	return TRUE;

}

NUMERIC IsCompleteBook( &dbase,&SelectedOrderItems)
{
	// if no items are selected, no work to do
	if ( !SelectedOrderItems( GetFirst,Item))
	{
		return TRUE;
	}

	selectedItemsCount = SelectedOrderItems( ChildCount );

	gr = ~<$con.Item[GroupID]>~;
	gr = NUMERIC(~<gr>~);

	if (<gr> == 0)
		{ return FALSE; }


	// how many of the selected order items are in the same book as the first selected order item? 
	countSelectedInThisBook = GetCountInBook(SelectedOrderItems,~<$con.Item[GroupID]>~);

	// how many of the order items does the book of the first select?
	countTotalItemsInBook = BaseOrderItem::CountItemsInBook(dBase,~<$con.Item[GroupID]>~,~<$con.Item[OrderID]>~);

	if (<countSelectedInThisBook> == <selectedItemsCount> && <selectedItemsCount> == <countTotalItemsInBook>)
	{
		return TRUE;
	}
	return FALSE;

}

NUMERIC UpdateOrderItems(&dbase,&SelectedOrderItems,Sequence,Subsequence,GroupID)
{
	// update the order items that were dragged, one by one.
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
	{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	count = 0;
	ItemExists = SelectedOrderItems(GetFirst,Item);
	while (<ItemExists>)
	{
		NewSubsequence = <Subsequence> + <count>;
		theID = ~<$con.Item[ID]>~;  // the order item id of an item that was dragged
		OrderID = ~<$con.Item[OrderID]>~;  // the order id of an item that was dragged
		OrigGroupID = ~<$con.Item[GroupID]>~;
		SQLCommand = ~Update OrderItems Set Sequence = <Sequence>, GroupID = <GroupID>, Subsequence = <NewSubsequence>   Where ID = <theID> AND OrderID = '<OrderID>'~;
		if (!dBase(Cmd, ~<SQLCommand>~))
		{
			dBase(GetErrorDescription, theErr);
			return Warning( ~Unable to update the sequence and subsequence in order item having Order Number <$con.Item[OrderID]> and Item ID <theID> to new sequence number <Sequence> and new sub sequence number <Subsequence> + <count>.  <theErr>~ );
		}

		if (<OrigGroupID> != <GroupID>)
		{
			BaseOrderItem::DeleteUnusedBooks(dbase,<OrigGroupID>,~<OrderID>~);
		}
		++count;
		Item(SetValue,Sequence, <Sequence>);
		Item(SetValue,Subsequence, <Subsequence>);
		Item(SetValue,GroupID, <GroupID>);
		ItemExists = SelectedOrderItems(GetNext,Item);
	}
	return TRUE;
}

NUMERIC HandleEntireBook(&dbase,&SelectedOrderItems,selectedItemsCount,DroppedOntoSequence,DroppedOntoSubsequence,PrevGroupID,DroppedOntoGroupID,GroupInfoType,newPosition)
{
	if (!SelectedOrderItems(GetFirst,Item))
	{	return FALSE;	}

	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
	{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	ItemGroupID = Item(GetNumeric,GroupID);
	OrderID = ~<$con.Item[OrderID]>~;
	if (<PrevGroupID> > 0)
	{
		if (<PrevGroupID> == <DroppedOntoGroupID>)
		{
			if (<ItemGroupID> == <PrevGroupID>)
			{
				//user drags an entire group anywhere inside itself
				return FALSE;
			}
			else
			{
				//user drags entire book inside another book
				//combine the two books.
				GroupIDToUse = <DroppedOntoGroupID>;
			}
		}
		else
		{
			//User drags an entire book between two books
			if (<GroupInfoType> == 0)
			{
				// combine the dragged group at the end of the first book.
				GroupIDToUse = <PrevGroupID>;
			}
			else if (<GroupInfoType> == 1)
			{
				//move the book
				GroupIDToUse = <ItemGroupID>;
			}
			else
			{
				if ( <DroppedOntoGroupID> != 0)
				{
					//combine the dragged group with the beginning of the second book
					GroupIDToUse = <DroppedOntoGroupID>;
				}
				else
				{
					// ICView error?
					// dropped onto item is not a book, keep the same groupID for selected items
					GroupIDToUse = <ItemGroupID>;
				}
			}
		}
	}
	else
	{
		//user drags the book to the beginning of a book, where the previous item was not in a book
		if (<GroupInfoType> == 0)
		{
			// should not happen
			return TRUE;
		}
		else if (<GroupInfoType> == 1)
		{
			// move the book
			GroupIDToUse = <ItemGroupID>;

		}
		else
		{
			// combine with the dropped onto book.
			GroupIDToUse = <DroppedOntoGroupID>;
		}
	}

	// Increment all order items (in memory) having a sequence == droppedOntoSequence and subsequence >= DroppedOntoSubsequence by the number selected.  Also sets the group ID
	// Then sets the subsequence number of all selected items to DroppedOntoSubsequence+0,+1,+2, etc. and sequence number to DroppedOntoSequence
	//OrderItemCategory(UpdateOrderItemsList,<DroppedOntoSequence>,<DroppedOntoSubsequence>,<GroupIDToUse>,~<OrderID>~,~<selectedItemsCount>~);
	OrderItemCategory(UpdateImagesList,Sequence, <DroppedOntoSequence>,Subsequence,<DroppedOntoSubsequence>,<selectedItemsCount>,Data,GroupID,<GroupIDToUse>,ViewDefinition,Group,<GroupIDToUse>);

	// Sorts the list by removing each selected item's DDICImageDef GenCon from the list and re-inserting it starting at newPosition 
	OrderItemCategory(InsertSelectedAt,<newPosition>);

	// Increment all order items subsequence field (in database) having a sequence == droppedOntoSequence and subsequence >= DroppedOntoSubsequence by the number selected
	UpdateOrderItemsSubseqRange(dbase,<selectedItemsCount>,<DroppedOntoSequence>,<DroppedOntoSubsequence>,~<OrderID>~);

	// Increment selected order items (in database and memory) to sequence = droppedOntoSequence, GroupID =DroppedOntoGroupID  and subsequence = DroppedOntoSubsequence, DroppedOntoSubsequence+ 1, ....etc
	UpdateOrderItems(dbase,SelectedOrderItems,<DroppedOntoSequence>,<DroppedOntoSubsequence>,<GroupIDToUse>);

	return TRUE;
}


// Increment all order items (in database) having a sequence == Sequence and subsequence >= Subsequence by the number selected
NUMERIC UpdateOrderItemsSubseqRange(&dbase,selectedItemsCount,Sequence,Subsequence,OrderID)
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
	{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	// update the order items having a matching sequence number and subsequence greater than or equal to the item dropped onto
	SQLCommand = ~Update OrderItems Set Subsequence = Subsequence + <selectedItemsCount> Where OrderID = '<OrderID>' AND Sequence = <Sequence> AND Subsequence >= <Subsequence> ~;
	if (!dbase(Cmd, ~<SQLCommand>~))
	{
		dBase(GetErrorDescription, theErr);
		return Warning( ~Unable to update the sequence number for items having an sequence number >= <DroppedOntoSequence>.  <theErr>~ );
	}
	return TRUE;
}

NUMERIC GetCountInBook(&SelectedOrderItems,GroupID)
{
	// how many of the order items are in a different book than the book where groupID = <GroupID> ?
	countInBooks = 0;
	ItemExists = SelectedOrderItems(GetFirst,Item);
	while (<ItemExists>)
	{
		OrigGroupID = ~<$con.Item[GroupID]>~;
		if (<OrigGroupID> == <GroupID> && <OrigGroupID> != 0)
		{
			++countInBooks;
		}
		ItemExists = SelectedOrderItems(GetNext,Item);
	}
	return <countInBooks> ;
}

// how many of the selected order items are in a book
NUMERIC HowManyInBook(&SelectedOrderItems)
{
	countInBooks = 0;
	ItemExists = SelectedOrderItems(GetFirst,Item);
	while (<ItemExists>)
	{
		GroupID = ~<$con.Item[GroupID]>~;
		if ( Numeric(~<GroupID>~) != 0)
		{
			++countInBooks;
		}
		ItemExists = SelectedOrderItems(GetNext,Item);
	}
	return <countInBooks> ;
}

VOID ShowOrderItemsForOrder(OrderID)
{
	DocumentRefresh( OrderItemsDoc,~RefreshThumbNailView();~ );
}

NUMERIC ResequenceOrderItems( &SelectedOrderItems)
{
	more = SelectedOrderItems( GetFirst,OrderItem);
	OrderID = ~<$con.OrderItem[OrderID]>~;
	ID = ~<$con.OrderItem[ID]>~;
	GroupID = 0;
		
	Sequence = 0;
	SubSequence = 0;
	
	if ( !ADO( dBase,Connect ) ) 
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}
	ReturnOnFailure(GetNextSequenceSubsequence(dbase,~<OrderID>~, ~<ID>~, Sequence,Subsequence));
	ReturnOnFailure(UpdateOrderItems(dbase,SelectedOrderItems,<Sequence>,<Subsequence>,0));

	return TRUE;
}

NUMERIC GetNextSequenceSubsequence(&dbase,OrderID, ID, &Sequence,&Subsequence)
{
	Query = ~Select Sequence From OrderItems Where OrderID = '<OrderID>' AND ID = <ID>~;
	if ( !PGenConList( List,Connection,dbase,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return FALSE;
	}
	if (!List(GetFirst,Record))
	{
		dbase( GetErrorDescription,theErr );
		return Warning( ~Error getting sequence number~,~<Query>~,~<theErr>~);
	}
	
	Record(GetValue,Sequence,Sequence);
	
	Query = ~Select MAX(Subsequence) From OrderItems Where OrderID = '<OrderID>' AND Sequence = <Sequence>~;
	
	if ( !dbase( CMD,~<Query>~,MaxSubSequence ) )
	{
		Subsequence = 0;
	}
	else
	{
		Subsequence = ~<$rs.MaxSubSequence[#0]>~ == ~~ ? ~0~ : ~<$rs.MaxSubSequence[#0]>~;
	}

	return TRUE;
}

NUMERIC HandleOrderItemDrop( &SelectedItems,&SrcView,&DstView,&DragDropInfo )
{
	SrcView( Get,Text,OrderID );	
	DstView( Get,Text,NewOrderID );
	
	if ( SimilarStr( ~<OrderID>~,~<NewOrderID>~ ) )
	{
		if (!GetUserPermissions( OrderItemResequencing ))
		{
			return TRUE;
		}
		result = OrderItemDrop( SelectedItems,SrcView,DragDropInfo);
		return TRUE;
	}

	if ( (Choice = CustomMessageBox( Title,~You are dragging OrderItem(s) to Order <NewOrderID>~,Message,~Would you prefer Copy or Move the OrderItem?~,
						Button1,~Copy~,Button2,~Move~,Button3,~Cancel~ ) ) < 1 )
	{
		return FALSE;
	}

	ReturnOnSuccess( <Choice> == 3 );

	WaitCursor( Begin );

	if ( !ADO( dBase,Connect ) ) 
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	Count = 0;

	while ( SelectedItems( GETNEXT,Item ) )
	{
		if ( SimilarStr(~<$con.Item[OrderID]>~,~<NewOrderID>~ ) )
			continue;

		if ( !CopyOrderItemToOrder(dBase,Item,~<NewOrderID>~,<Choice> == 2) )
			break;

		++Count;
	}

	WaitCursor( End );

	OrderItemsWindow( StatusBar,Text,~Added <Count> Items to Order <NewOrderID>~ );

	return TRUE;
}

// Test plan for HandleProductDrop
/*	1) Drag multiple products into order items window
		Check that order items appear in the order they appear inside the products window (also true of
		all tests below)
	2) Drag multiple products into an order items window that contains no books
		Check that the order items are inserted at the end, 
	3) Start with an order items window that contains a single book
		a) Drag and drop multiple products before the first book, not in the book
			Verify that the order items are added at the end of the order items window
		b) Drag and drop multiple products before the first book, inside the book
			Verify that the order items are added inside the book, at the beginning of the book
		c) Drag and drop in the middle the book
			Verify that the order items are added inside the book, at the dropped position
		d) Drag and drop before the last item in the book
			Verify that the order items are added inside the book, at the dropped position
		e) Drag and drop after the last item in the book, inside the book
			Verify that the order items are added inside the book, at the dropped position
		f) Drag and drop after the last item in the book, outside the book
			Verify that the order items are added at the end of the order items window
	4) Start with an order items window that contains at least two books
		a) Drop at the end of the first book, inside the book
			Verify that the order items are added inside the book, at the end of the book
		b) Drop at the end of the first book, outside the book
			Verify that the order items are added at the end of the order items window
		c) Drop at the beginning of the second book, inside the book
			Verify that the order items are added inside the book, at the beginning of the book
		d) Drop at the end of the second book, inside the book
			Verify that the order items are added inside the book, at the end of the book

*/
NUMERIC HandleProductDrop( &SelectedProducts,&SrcView,&DstView,&DragDropInfo )
{
	SrcView(GetDataDictionaryName,thesrcDict);
	DstView(GetDataDictionaryName,thedstDict);
	DstView(GetValue,DontAllowDragDrop,DontAllowDragDrop); 

	OrderID = ~<$con.DstView[ViewDataFor]>~ ;   
	DstView( Get,Text,OrderID );
	newPosition = ~<$CON.DragDropInfo[DropLocation]>~;				// Zero based, where the user dropped

	currentPosition = <newPosition>;

	Count = 0;

	WaitCursor( Begin );

	if ( !ADO( dBase,Connect ) ) 
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	addedToGroup = 0;
	while ( SelectedProducts( GETNEXT,Product ) )
	{
		if ( Product( GetNumeric,Package ) )
		{
			if (Product(GetNumeric,book)) 
			{ 
				groupID = UniqueGroupID(dBase,~<OrderID>~); 
			} 
			else { groupID = 0; }
			Count = <Count> + CreateOrderItemsForPackage( dBase,~<$con.Product[ID]>~,~<OrderID>~,<groupID> );

			if ( <Count> < 0 )
			{
				break;
			}
		}
		else
		{
			if (!<DontAllowDragDrop>)
			{
				newSequence = 0;
				newSubsequence = 0;
				groupID = 0;
				if (!GetOrderItemSequenceSubsequence(dbase,DstView,DragDropInfo,newSequence,newSubsequence,groupID))
				{						
					// not a book
					if ( !AddAnOrderItem( dBase,~<OrderID>~,1,~<$con.Product[ID]>~,~<$con.Product[ProductType]>~,
											~<$con.Product[ProductLayoutPath]>~,~<$con.Product[PreviewPath]>~,-1,
											~~,~~,~~,~~,~~,~~,~<$con.Product[ProdType]>~) )
					{
						break;
					}
				}
				else
				{
					// user dropped onto a book 
					SQLCommand = ~Update OrderItems Set Subsequence = Subsequence + 1 Where OrderID = '<OrderID>' AND Sequence = <newSequence> AND Subsequence >= <newSubsequence> ~;
					if (!dBase(Cmd, ~<SQLCommand>~))
					{
						dBase(GetErrorDescription, theErr);
						return Warning( ~Unable to update the subsequence number for items having an subsequence number >= <subsequence> and sequence = <newSequence>.  <theErr>~ );
					}
					
					if ( !AddAnOrderItem( dBase,~<OrderID>~,1,~<$con.Product[ID]>~,~<$con.Product[ProductType]>~,~<$con.Product[ProductLayoutPath]>~,~<$con.Product[PreviewPath]>~,-1,
											<newSequence>,<newSubsequence>,<groupID>,<currentPosition>,~~,~~,~Book~ ) )
					{
						break;
					}
					++currentPosition;
				}
			}
			else
			{
				if ( !AddAnOrderItem( dBase,~<OrderID>~,1,~<$con.Product[ID]>~,~<$con.Product[ProductType]>~,~<$con.Product[ProductLayoutPath]>~,~<$con.Product[PreviewPath]>~,-1,
										~~,~~,~~,~~,~~,~~,~<$con.Product[ProdType]>~) )
				{
					break;
				}

			}
			
			++Count;
		}
	}

	WaitCursor( End );
	SetGroupSpacing(dbase,DstView,~<OrderID>~);
	OrderItemsWindow( StatusBar,Text,~Added <Count> Items to Order <OrderID>~ );

	return TRUE;
}


// if it is in a book, insert the order item at the dropped point,
// otherwise insert the order item at the end
// returns true if inside a book
// returns false if not a book
NUMERIC GetOrderItemSequenceSubsequence(&dbase,&View,&DragDropInfo,&newSequence,&newSubsequence,&newGroupID)
{
	///View(GetValue,DontAllowDragDrop,DontAllowDragDrop); 
	GroupInfoType = ~<$con.DragDropInfo[GroupInfo]>~;				// 0 = at beginning of group, 1 = in middle of group, 2 at end of group
	if (<GroupInfoType> < 0 || <GroupInfoType> > 2)
	{
		GroupInfoType = 0;
	}
	// Get the sequence number of the item dropped onto
	newPosition = ~<$CON.DragDropInfo[DropLocation]>~;				// Zero based, where the user dropped
	OrderID = ~<$con.View[ViewDataFor]>~ ;   
	if (!View( GetAll, OrderItemsList ))
	{
		// no order items in the list
		return FALSE;
	}
	totalOrderItems = OrderItemsList(ChildCount);

	if (OrderItemsList(GetAt,<newPosition>,DroppedOntoItem))
	{
		DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~);
		DroppedOntoGroupID = Numeric(~<$con.DroppedOntoItem[GroupID]>~);
		if (<GroupInfoType> == 0)
		{
			// into the tail end of a book
			OrderItemsList(GetAt,<newPosition>-1,DroppedOntoItem);
			DroppedOntoSubsequence = Numeric(~<$con.DroppedOntoItem[Subsequence]>~)+1;
			DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~);
			DroppedOntoGroupID = Numeric(~<$con.DroppedOntoItem[GroupID]>~);
		}
		else if (<GroupInfoType> == 1 )
		{
			// between books, or inside a book
			PreviousGroupID = 0;
			if (OrderItemsList(GetAt,<newPosition>-1,PreviousItem))
			{
				PreviousGroupID = Numeric(~<$con.PreviousItem[GroupID]>~);
			}

			if (<PreviousGroupID> != <DroppedOntoGroupID> || ( <PreviousGroupID> == 0 && <DroppedOntoGroupID> == 0))
			{
				DroppedOntoGroupID = 0;  // between books
				OrderItemsList(GetAt,<totalOrderItems>-1,DroppedOntoItem);
				newSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~) + 1;
				newSubsequence = 0;
				newGroupID = 0;
				return FALSE;
			}
			else
			{
				// inside a book
				DroppedOntoSubsequence = Numeric(~<$con.DroppedOntoItem[Subsequence]>~);
			}
		}
		else // if (<GroupInfoType> == 2)
		{
			// beginning of a book
			DroppedOntoSubsequence = ~<$con.DroppedOntoItem[Subsequence].numeric>~;
		}
	}
	else if (<newPosition> == <totalOrderItems>)
	{
		if (<GroupInfoType> == 1)
		{
			// end of the order, not in a book
			OrderItemsList(GetAt,<totalOrderItems>-1,DroppedOntoItem);
			DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~) + 1;
			DroppedOntoSubsequence = 0;
			DroppedOntoGroupID = 0;
			OrderID = ~<$con.DroppedOntoItem[OrderID]>~;
			newSequence = <DroppedOntoSequence>;
			newSubsequence = <DroppedOntoSubsequence>;
			newGroupID = <DroppedOntoGroupID>;
			return FALSE;
		}
		else if (<GroupInfoType> == 0)
		{
			// into the tail end of a book
			OrderItemsList(GetAt,<totalOrderItems>-1,DroppedOntoItem);
			DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~);
			DroppedOntoSubsequence = Numeric(~<$con.DroppedOntoItem[Subsequence]>~) + 1;
			DroppedOntoGroupID = ~<$con.DroppedOntoItem[GroupID]>~;
		}
		else  // should not happen, but just in case
		{
			OrderItemsList(GetAt,<totalOrderItems>-1,DroppedOntoItem);
			DroppedOntoSequence = Numeric(~<$con.DroppedOntoItem[Sequence]>~);
			DroppedOntoSubsequence = Numeric(~<$con.DroppedOntoItem[Subsequence]>~) + 1;
			DroppedOntoGroupID = ~<$con.DroppedOntoItem[GroupID]>~;
		}
	}
	else
	{
		// unknown error
		return FALSE;
	}

	newSequence = <DroppedOntoSequence>;
	newSubsequence = <DroppedOntoSubsequence>;
	newGroupID = <DroppedOntoGroupID>;
	return TRUE;
}


// only difference between this and WriteOrderItemFromRenderList() is 
//last 3 parms passed in and used in RenderList(WriteJob,...) last 3 parms.
// also this routine has the Broadcast msg; out one level for regular write.
NUMERIC WriteTextOrderItemFromRenderList( &dbase,OrderID,&RenderList,ProductID,SrcJobPath,NextOrderItem,Quantity,&DataList,StartPos,EndPos )
{
	// tested 2/14/07 Happy Valentine's Day
	JobPath = ~<SrcJobPath>~;

	NewItem = $NextOrderItem < 0;

	if ( <NewItem> )
	{
		NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );
		newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );
		JobPath = CreateJobPath( ~<OrderID>~,<NextOrderItem> );
	}

	OrderItemsWindow( StatusBar,Text,~Filling Item <NextOrderItem> for Order <OrderID>~ );

	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );

	BroadcastMessageToAllViews( ReleaseCachedImageChain,~<OrderItemPreviewPath>~ );

	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );

	Files( Delete,~<OrderItemPreviewPath>~ );

	if ( <NewItem> )
	{
		//WriteTextOrderItemFromRenderList
		if ( !AddOrderItemToDataBase( dbase,<NextOrderItem>,~<OrderID>~,~<ProductID>~,<Quantity>,<newSequence>,~<JobPath>~,~~,~~ ) )	
		{
			Files( ChMod,~<JobPath>~,ReadWrite );
			Files( Delete,~<JobPath>~ );	// ON FAILURE, REMOVE THE JOB
			return FALSE;
		}
	}

	if ( !RenderList( WriteJob,~<JobPath>~,DataList,<StartPos>,<EndPos> ) )
		{ return Warning( ~Failed to write <JobPath>~ ); }

	if ( !RenderList( MaintainCrossReference,~<OrderID>~,~<NextOrderItem>~,TRUE ) )
		{ return DoWarning( ~Failed to MaintainCrossReference for <JobPath>~ ); }

	return TRUE;
}


NUMERIC HandleTextDrop( &SelectedData,&SrcView,&DstView,DropLocation )
{
	OrderID = ~<$con.DstView[ViewDataFor]>~ ;   
	
	DstView( Get,Text,OrderID );

	if ( !DstView( GetSelected,SelectedOrderItems ) )
	{
		MessageBox( Translate( ~No Order Items exist for this Order.  Order Items need to\nbe added to an Order before you can populate Order Items.~ ) );
		return 0;
	}

	Count = SelectedOrderItems( ChildCount );

	if ( <Count> > 1 )
	{
		// return Warning( ~We don't yet support populating packages~ );
	}
	else if ( <Count> <= 0 )
	{
		if ( <Count> == 1 && DstView( GetFirst,FirstOrderItem ) )
		{
			DstView( SetSelected,FirstOrderItem,TRUE );
			DstView( RefreshView );
			ForgetLocal( SelectedOrderItems );
			DstView( GetSelected,SelectedOrderItems );
		}
		else
		{
			return Warning( ~You must select an Order Item to be populated.~ );
		}
	}

	Count = SelectedData( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( ~There was not data to paste~ ); }

	WaitCursor( Begin );

	pos = 0;
	while ( SelectedOrderItems( GetNext,OrderItem ) )	// PARSE THE PRODUCTS
	{
		JobPath<pos> = ~<$con.OrderItem[JobPath]>~;
		ProductID<pos> = ~<$con.OrderItem[ProductID]>~;
		ID<pos> = ~<$con.OrderItem[ID]>~;
		Quantity = ~<$con.OrderItem[Quantity]>~;
		
		OrderItemsWindow( StatusBar,Text,~Reading <JobPath<pos>>~ );

		if ( !Document( Jobs<pos>,ParseFile,~<JobPath<pos>>~ ) )
		{
			Warning( ~An error occured while parsing the job at <JobPath<pos>>~ );
			WaitCursor( End );
			return FALSE;
		}

		Index = 0;

		if ( !Jobs<pos>( GetRenderList,<Index++>,RenderList<pos> ) )
		{ 
			WaitCursor( End );
			return Warning( ~There was no render list for <JobPath<pos>>~ );
		}

		++pos;

		// break; // FOR NOW WE WILL JUST DO THE FIRST ONE!
	}

	MaxPos = <pos>;

	pos = Count = 0;

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	WaitCursor( Begin );

	TotalRecords = SelectedData( ChildCount );

	RecordsPerJob = 1;	// ASSUME ONE RECORD PER JOB

	if ( RenderList<pos>( GetDataRecordsNode,DataRecords ) )	// WAS THERE A DATA RECORDS KEYWORD
	{
		RecordsPerJob = DataRecords( GetNumeric,~DataRecords:~ );

		if ( <RecordsPerJob> < 1 )
				{ RecordsPerJob = 1; }
	}

	StartPos = 0;
	EndPos = <StartPos> + <RecordsPerJob> - 1;

	while ( <StartPos> < <TotalRecords> )
	{
		pos = 0;

		while ( <pos> < <MaxPos> )	// FOR EACH ORDER ITEM TO BE POPULATED
		{
			OrderItemID = $Count ? ~-1~ : ~<ID<pos>>~;

			if ( !WriteTextOrderItemFromRenderList( dbase,~<OrderID>~,RenderList<pos>,~<ProductID<pos>>~,~<JobPath<pos>>~,~<OrderItemID>~,<Quantity>,SelectedData,<StartPos>,<EndPos> ) )
			{ 
				WaitCursor( End );
				return FALSE;
			}

			if ( <++pos> >= <MaxPos> )
				{ break; }
		}

		StartPos = <EndPos> + 1;
		EndPos = <StartPos> + <RecordsPerJob> - 1;

		++Count;
	}

	WaitCursor( End );

	OrderItemsWindow( StatusBar,Text,~Added <Count> Items to Order <OrderID>~ );

	return TRUE;
}

NUMERIC GetStackPrintPopulationMethod(&SelectedImages,OrderItemCount)
{
	Define:	ListMenu Using DDMenuDef AsSymbol ListMenu
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			Define:	ChoiceList1 using	DDMenuItemDef
				Fields:	Text		~Normal Order~
				IDText		~ID~
			Define:	ChoiceList2 using	DDMenuItemDef
				Fields:	Text		~Stack Print Order~
				IDText		~ID~
		}
		

	if ( !OrderItemsWindow( GetActiveViewOfWindow,aView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }
	

	selected = SelectedImages(ChildCount);
	calcNumberOfItems = <selected> * <OrderItemCount>;
	if (ListMenu(GetByName,ChoiceList1,FirstChoice))
	{
		FirstChoice(SetValue,Text,~Put in normal order~);
	}
	if (ListMenu(GetByName,ChoiceList2,SecondChoice))
	{
		SecondChoice(SetValue,Text,~Put in cut and stack order~);
	}

	aView( GetLastMousePosition,mouseX,mouseY );
	userChoice = 0;
	aView( DisplayMenu,ListMenu,<mouseX>,<mouseY>,userChoice );

	return Numeric(~<userChoice>~);

}

// Return values for GetBookPopulationMethod
// userChoice = 1 means a book but user wants to populate like a package
// userChoice = 2 means a book and user wants to populate like a book
// userChoice = 3 means a book and user wants to populate like a book and print in cut and stack order
// userChoice = 4 means populate like a package and change the product type field in the order items table to Package
NUMERIC GetBookPopulationMethod(&SelectedImages,OrderItemCount,&RenderList0,&nodes)
{
	if ( !OrderItemsWindow( GetActiveViewOfWindow,aView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	selected = SelectedImages(ChildCount);
	calcNumberOfItems = <selected> * <OrderItemCount>;

	GenCon(ListMenu,New,DDMenuDef);
	ListMenu(SetValue,Position,-1);  // -1 = popup menu

	GenCon(ChoiceList1,New,DDMenuItemDef);
	ChoiceList1(SetValue,Text,~Fill only one node per order item (like a package).  You will get <calcNumberOfItems> order items~);
	ChoiceList1(SetValue,Value,~1~);
	ListMenu(InsertBack,ChoiceList1);
	
	GenCon(ChoiceList4,New,DDMenuItemDef);
	ChoiceList4(SetValue,Text,~Fill only one node per order item (like a package).  You will get <calcNumberOfItems> order items.  Set the Product Type to 'Package'~);
	ChoiceList4(SetValue,Value,~4~);
	ListMenu(InsertBack,ChoiceList4);

	GenCon(ChoiceList2,New,DDMenuItemDef);
	ChoiceList2(SetValue,Text,~Fill all prompted nodes (like a directory page). You will get as many books as needed to use <selected> images~);
	ChoiceList2(SetValue,Value,~2~);
	ListMenu(InsertBack,ChoiceList2);
	
	if (<OrderItemCount> == 1)
	{
		nodes = RenderList0(GetNumberOfPromptedNodes);
		if (Numeric(~<nodes>~) > 1)
		{
			GenCon(ChoiceList3,New,DDMenuItemDef);
			ChoiceList3(SetValue,Value,~3~);
			ChoiceList3(SetValue,Text,~Fill all prompted nodes (like a directory page) in cut and stack order.  You will get as many books as needed to use <selected> images~);
			ListMenu(InsertBack,ChoiceList3);
		}
	}

	aView( GetLastMousePosition,mouseX,mouseY );
	userChoice = 0;
	aView( DisplayMenu,ListMenu,<mouseX>,<mouseY>,userChoice );
	ListMenu(GetAt,<userChoice>, SelectedGC);
	
	SelectedGC(GetName,Name);
	SelectedGC(GetValue,Text,theText);
	if (SimilarStr(~<Name>~,ChoiceList1))
	{
		userChoice = 1;
	}
	else if (SimilarStr(~<Name>~,ChoiceList2))
	{
		userChoice = 2;
	}
	else if (SimilarStr(~<Name>~,ChoiceList3))
	{
		userChoice = 3;
	}
	else
	{
		userChoice = 4;
	}

	return Numeric(~<userChoice>~);

}

NUMERIC HandleOrderImageDrop( &SelectedImages,&SrcView,&DstView,DropLocation )
{
	OrderID = ~<$con.DstView[ViewDataFor]>~ ;   
	
	DstView( Get,Text,OrderID );

	if ( !DstView( GetSelected,SelectedOrderItems ) )
	{
		MessageBox( Translate( ~No Order Items exist for this Order.  Order Items need to\nbe added to an Order before you can populate Order Items.~ ) );
		return 0;
	}

	Count = SelectedOrderItems( ChildCount );

	if ( <Count> > 1 )
	{
		// return Warning( ~We don't yet support populating packages~ );
	}
	else if ( <Count> <= 0 )
	{
		return Warning( ~You must first select an Order Item to be populated.~ );
	}

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	WaitCursor( Begin );

	OrderItemCount = pos = 0;
	userChoice = 0;  // valid choices are 1 (package) 2 (book)
	ControlState = KeyState( CONTROL );
	while ( SelectedOrderItems( GetNext,OrderItem ) )	// PARSE THE PRODUCTS
	{
		JobPath<pos> = ~<$con.OrderItem[JobPath]>~;
		ProductID<pos> = ~<$con.OrderItem[ProductID]>~;
		ID<pos> = ~<$con.OrderItem[ID]>~;
		Quantity<pos> = ~<$con.OrderItem[Quantity]>~;
		GroupID<pos> = ~<$con.OrderItem[GroupID]>~;
		
		PackageID<pos> = ~<$con.OrderItem[PackageID]>~;
		PackageGroup<pos> = ~<$con.OrderItem[PackageGroup]>~;
		ProdType<pos> = ~<$con.OrderItem[ProdType]>~;
		
		Global(GroupID<pos>);
		
		OrderItemsWindow( StatusBar,Text,~Reading <JobPath<pos>>~ );

		if ( !Document( Jobs<pos>,ParseFile,~<JobPath<pos>>~ ) )
		{
			Warning( ~An error occured while parsing the job at <JobPath<pos>>~ );
			WaitCursor( End );
			return FALSE;
		}

		Index = 0;

		if ( !Jobs<pos>( GetRenderList,<Index++>,RenderList<pos> ) )
		{ 
			WaitCursor( End );
			return Warning( ~There was no render list for <JobPath<pos>>~ );
		}

		++pos;
		
		++OrderItemCount;
	}

	MaxPos = <pos>;

	pos = Count = 0;

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	PopulateLikeABook = 0;
	// if any items are in a book, populate like a book; otherwise populate like a package
	while (<pos> < <MaxPos>)
	{
		if ( <GroupID<pos>> != 0)
		{
			PopulateLikeABook=1;
			break;
		}
		++pos;
	}
	pos = 0;

	WaitCursor( Begin );
	GenerateGroupID = 0;
	Global(GenerateGroupID);
	LastGroupID = 0;
	IsBook = <PopulateLikeABook>;
	changeProductTypeToPackage = 0;
	Global(changeProductTypeToPackage);
	
	// NOTE THAT A SINGLE ORDER ITEM CAN BE A PACKAGE.....

	if ( <PopulateLikeABook> && <ControlState> )
	{
		nodes = 1;
		userChoice = GetBookPopulationMethod(SelectedImages,Numeric(~<OrderItemCount>~),RenderList0,nodes);
		if (Numeric(~<userChoice>~) ==  1 || Numeric(~<userChoice>~) ==  4)
		{ 
			PopulateLikeABook = 0 ;
		}
	} 
	// userChoice = 1 means a book but user wants to populate like a package
	// userChoice = 2 means a book and user wants to populate like a book
	// userChoice = 3 means a book and user wants to populate like a book and print in cut and stack order
	// userChoice = 4 means populate like a package and change the product type field in the order items table to Package
	if ( <MaxPos> > 1 || <PopulateLikeABook> || !IsNull(~<PackageID0>~) || <userChoice> == 1 || <userChoice> == 4 )	// ARE WE DEALING WITH A PACKAGE?????
	{
		// Do we have a book?
		if ( <PopulateLikeABook> )
		{
			if (<userChoice> == 3)
			{
				result = SelectedImages(StackPrint,<nodes>);
			}
			index = 0; // gets the nth node, where n is defined by index
			ImagesUsed = 0;
			if ( SelectedImages( GetNext,Image ) )
			{
				while (true)
				{
					RenderList<pos>( GetNonNullNode,~IPrompt:~,<index>,TheNode );
					if ( Defined( TheNode ) )
					{
						TheNode( Get,~IFile:~,~Previous~ );						// got a node and an image
						Previous_<index> = ~<Previous>~;
						TheNode( Set,~IFile:~,~<$Con.Image[Path]>~ );
						TheNode(GetValue,~INTID:~,NodeID);
						++ImagesUsed;
						Log(Session,~Setting Node <NodeID> Ifile to <$Con.Image[Path]> replacing <Previous>~);
						ForgetLocal( TheNode );
						++index;						// increment to next non null node
						if (!SelectedImages( GetNext,Image))// no more images?
						{
							while (true )
							{
								// Out of images, write out the current order item (defined by pos)
								// and continue writing out order items that are part of the current book
								OrderItemID = (<Count> >= <MaxPos>) ? ~-1~ : ~<ID<pos>>~;
								OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath<pos>>~,FALSE );
								BroadcastMessageToAllViews( ReleaseCachedImageChain,~<OrderItemPreviewPath>~ );
								newGroupID = 0;
								GroupIDToUse = GetNewGroupID(pos,dbase,~<OrderID>~,<LastGroupID>,newGroupID);
								if (<newGroupID>)
								{
									Book( New,aBook );
									aBook.CopyBookData(~<OrderID>~, <LastGroupID>, ~<OrderID>~,<GroupIDToUse>);
									ThisPackageGroup = UniquePackageGroup(dBase,~<OrderID>~);
								}
								LastGroupID = <GroupIDToUse>;
																
								OrderItemID = WriteOrderItemFromRenderList( dbase,~<OrderID>~,RenderList<pos>,~<ProductID<pos>>~,~<JobPath<pos>>~,~<OrderItemID>~,<Quantity<pos>>,~~,<GroupIDToUse>,~~,false,~<PackageID<pos>>~,~<ThisPackageGroup>~);
								if ( !<OrderItemID>  )
								{ 
									WaitCursor( End );
									return FALSE;
								}

								if (<OrderItemID> != <ID<pos>>)
								{
									UpdateOrderItemsDisplay(dbase,<OrderItemID>,~<OrderID>~,~<ProductID<pos>>~,TRUE);
								}

								++pos;			// prepare to write next order item in the current book 
								if (<pos> >= <MaxPos>)
								{
									break;
								}
								posMinusOne = <pos> - 1;
								if (<GroupID<posMinusOne>>!= <GroupID<pos>>)
								{
									break;		// stop writing order items if the next order item is not in the same book
								}
							}
							break;
						}
					}
					else
					{
						// got an image but no node
						OrderItemID = (<Count> >= <MaxPos>) ? ~-1~ : ~<ID<pos>>~;	
						OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath<pos>>~,FALSE );
						BroadcastMessageToAllViews( ReleaseCachedImageChain,~<OrderItemPreviewPath>~ );
						newGroupID = 0;
						GroupIDToUse = GetNewGroupID(pos,dbase,~<OrderID>~,<LastGroupID>,newGroupID);
						
						if (<newGroupID>)
						{
							Book( New,aBook );
							aBook.CopyBookData(~<OrderID>~, <LastGroupID>, ~<OrderID>~,<GroupIDToUse>);
							ThisPackageGroup = UniquePackageGroup(dBase,~<OrderID>~);
						}
						LastGroupID = <GroupIDToUse>;
						OrderItemID = WriteOrderItemFromRenderList( dbase,~<OrderID>~,RenderList<pos>,~<ProductID<pos>>~,~<JobPath<pos>>~,~<OrderItemID>~,<Quantity<pos>>,~~,<GroupIDToUse>,~~,FALSE,~<PackageID<pos>>~,~<ThisPackageGroup>~);
						replaceIndex = 0; // replace the written over ifiles
						while (<replaceIndex> < <index>)
						{
							RenderList<pos>( GetNonNullNode,~IPrompt:~,<replaceIndex>,TheNode );
							if ( Defined( TheNode ) )
							{
								// got a node and an image
								TheNode( Set,~IFile:~,~<Previous_<replaceIndex>>~ );
								++replaceIndex;
								ForgetLocal( TheNode );
							}
							else
							{
								break;
							}
						}

						if ( !<OrderItemID>  )
						{ 
							WaitCursor( End );
							return FALSE;
						}

						if (<OrderItemID> != <ID<pos>>)
						{
							UpdateOrderItemsDisplay(dbase,<OrderItemID>,~<OrderID>~,~<ProductID<pos>>~,TRUE);
						}

						++Count;
						++pos;		
						index = 0;
						if (<pos> >= <MaxPos>)// is it time to reset the group IDs for the next book?
						{
							GenerateGroupID = 1;
							pos = 0;
						}
					}
					if (<ImagesUsed> == 0 && <pos> == 0)
					{
						// User dragged one or more images onto one or more jobs that
						// have no prompted nodes.  Better get out of the loop.
						break;
					}
				}
			}
		}
		else	// Treat it like a package
		{						
			LastPackageGroup = -1;
			if (<userChoice> == 4)
			{
				changeProductTypeToPackage = 1;
			}
			while ( SelectedImages( GetNext,Image ) )
			{
				pos = 0;
								
				ForgetLocal( TheNode );
				
				ThisPackageGroup = UniquePackageGroup(dBase,~<OrderID>~);
				
				if (<IsBook>)
				{
					newGroupID = 0;
					GroupIDToUse = GetNewGroupID(pos,dbase,~<OrderID>~,<LastGroupID>,newGroupID);
					if (<GroupIDToUse>)
					{
						Book( New,aBook );
						aBook.CopyBookData(~<OrderID>~, <LastGroupID>, ~<OrderID>~,<GroupIDToUse>);
					}
				
				}
				
				
				while ( <pos> < <MaxPos> )
				{
					if ( RenderList<pos>( GetNodeByName,~PackageNode:~,0,PackageNode ) )
					{
						TargetNode = PackageNode(GetNumeric,~PackageNode:~);

						if ( <TargetNode> == 0  )
						{
							RenderList<pos>( GetMainNode,theNode );
						}
						else
						{
							RenderList<pos>( GetNodeByID,~<TargetNode>~,0,TheNode );
						}
					}
					else
					{
						// otherwise we will have to use the first IPrompt:

						RenderList<pos>( GetNonNullNode,~IPrompt:~,0,TheNode );
					}

					if ( Defined( TheNode ) )
					{
						TheNode( Set,~IFile:~,~<$Con.Image[Path]>~ );

						OrderItemID = (<Count> >= <MaxPos>) ? ~-1~ : ~<ID<pos>>~;
						
						//if (  <PackageGroup<pos>> != <LastPackageGroup> )
						//{
						//	LastPackageGroup = <PackageGroup<pos>>;
						//	ThisPackageGroup = UniquePackageGroup(dBase,~<OrderID>~);
						//}
						TheIFile = ~<$Con.Image[Path]>~;
						ImagesOrderID = ~~;
						ImagesSubjectID = ~~;
						if (GetSubjectIDFromPath(dbase,~<TheIFile>~, ImagesOrderID,ImagesSubjectID))
						{
						}

						OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath<pos>>~,FALSE );
						BroadcastMessageToAllViews( ReleaseCachedImageChain,~<OrderItemPreviewPath>~ );																// ItemType,GroupID,ProductCode,encryptJobFile,PackageID,PackageGroup
						OrderItemID = WriteOrderItemFromRenderList( dbase,~<OrderID>~,RenderList<pos>,~<ProductID<pos>>~,~<JobPath<pos>>~,~<OrderItemID>~,<Quantity<pos>>,~~,<GroupIDToUse>,~~,FALSE,~<PackageID<pos>>~,~<ThisPackageGroup>~,~<ProdType<pos>>~,~<ImagesOrderID>~,~<ImagesSubjectID>~ );
						if ( !<OrderItemID>  )
						{ 
							WaitCursor( End );
							return FALSE;
						}

						if (<changeProductTypeToPackage>)
						{
							theProdType = Package;
							theTypeName = ~<PackageID<pos>>~;
							if (FunctionDefined(ChangeProductTypeToPackage1))
							{
								ChangeProductTypeToPackage1(dbase, ~<OrderID>~,<OrderItemID>, ~<theTypeName>~, ~<theProdType>~);
							}
						}
						
						if (<OrderItemID> != <ID<pos>>)
						{
							UpdateOrderItemsDisplay(dbase,<OrderItemID>,~<OrderID>~,~<ProductID<pos>>~,TRUE);
						}

						++Count;

						ForgetLocal( TheNode );
					}

					++pos;
				}
				
				if (<IsBook>)
				{
					GenerateGroupID = 1;
				}
				
			}
		}
	}
	else // ONLY ONE ORDER ITEM SELECTED
	{
		nodes = RenderList0( GetNumberOfPromptedNodes );
		if (<nodes> > 1)
		{
			if (<OrderItemCount> == 1 && <ControlState>)
			{
				userWantsStackPrint = GetStackPrintPopulationMethod(SelectedImages,Numeric(~<OrderItemCount>~));
				if (<userWantsStackPrint> == 2)
				{
					result = SelectedImages(StackPrint,<nodes>);
				}
			}
		}
		while ( <pos> < <MaxPos> )
		{
			while ( (FillCount = RenderList<pos>( Fill,SelectedImages )) > 0 )
			{
				OrderItemID = $Count ? ~-1~ : ~<ID<pos>>~;
				OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath<pos>>~,FALSE );
				BroadcastMessageToAllViews( ReleaseCachedImageChain,~<OrderItemPreviewPath>~ );
				OrderItemID = WriteOrderItemFromRenderList( dbase,~<OrderID>~,RenderList<pos>,~<ProductID<pos>>~,~<JobPath<pos>>~,~<OrderItemID>~,<Quantity<pos>>,~~,0,~~,FALSE,~~,~~,~<ProdType<pos>>~);
				if ( !<OrderItemID> )
				{ 
					WaitCursor( End );
					return FALSE;
				}
				if (<OrderItemID> != <ID<pos>>)
				{
					UpdateOrderItemsDisplay(dbase,<OrderItemID>,~<OrderID>~,~<ProductID<pos>>~,TRUE);
				}
				++Count;
			}
			++pos;
		}
	}

	WaitCursor( End );

	OrderItemsWindow( RefreshWindow );

	OrderItemsWindow( StatusBar,Text,~Added <Count> Items to Order <OrderID>~ );

	return TRUE;
}

NUMERIC ChangeProductTypeToPackage1(&dbase, OrderID, OrderItemID, TypeName, ProdType)
{
	Cmd = ~Update OrderItems Set ProdType = '<ProdType>', TypeName = '<TypeName>' Where OrderID = '<OrderID>' AND ID = '<OrderItemID>'~;

	if ( !dBase( CMD,~<Cmd>~ ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
	}
	return TRUE;
}

NUMERIC GetNewGroupID(&pos,&dbase,OrderID,LastGroupID,&newGroupID)
{
	newGroupID = 0;
	if (<GenerateGroupID>)
	{
		if (<pos>)
		{
			posMinus1 = <pos> - 1;
			if (<GroupID<pos>>)
			{
				if (<GroupID<pos>> != <GroupID<posMinus1>>)
				{
					GroupIDToUse = UniqueGroupID(dbase,~<OrderID>~);
					newGroupID = 1;
				}
				else
				{
					GroupIDToUse = <LastGroupID>;
				}
			}
			else
			{
				GroupIDToUse =  0;
			}
		}
		else if (<GroupID<pos>>)
		{
			GroupIDToUse = UniqueGroupID(dbase,~<OrderID>~);
			newGroupID = 1;
		}
		else
		{
			GroupIDToUse = 0;
		}
	}
	else
	{
		GroupIDToUse = <GroupID<pos>>;
	}
	return <GroupIDToUse>;
}


NUMERIC AddOrderItemFromPDF(&connection,OrderID,path)
{	
	BasePDF( new,aPDF );
	
	Global( aPDF );
	
	WaitCursor( Begin );	

	if ( !aPDF.ExtractToOrder( ~<OrderID>~,~<path>~ ) )
	{
		WaitCursor( End );
		return Warning( ~Import of PDF failed~ );
	}
	
	return WaitCursor( End );	
	
	ForgetGlobal( aPDF );
}


NUMERIC BasePDF::ShowOrderItemAdded( &Connection,OrderID,Item,Sequence,ProductID )		// Called by BasePDF 
{
	return UpdateOrderItemsDisplay(Connection,<Item>,~<OrderID>~,~<ProductID>~,TRUE);
}


NUMERIC BasePDF::ShowImageAdded(OrderID,Roll,Frame,Path)								// Called by BasePDF 
{
	Action = STR ( ImagesDoc "AddImageToList(~<OrderID>~,~<Roll>~,~<Frame>~,~<Path>~,FALSE);" );
	return PerformDocActions( Action );
}


NUMERIC AddOrderItemFromExternalJob( &dbase,OrderID,OriginalJobPath )
{
	NextOrderItem=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );
	newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );

	JobPath = CreateJobPath( ~<OrderID>~,~<NextOrderItem>~ );

	Files( ChMod,~<JobPath>~,ReadWrite );

	Files( Delete,~<JobPath>~ );

	if ( !Files( Copy,~<OriginalJobPath>~,~<JobPath>~ ) )
	{
		return Warning( ~Could not copy '<OriginalJobPath>' to '<JobPath>'~ );
	}

	Files( ChMod,~<JobPath>~,ReadWrite );

	OrderItemsWindow( StatusBar,Text,~Adding Item <NextOrderItem> for Order <OrderID>~ );

	DocumentName = ~<$str.$JobPath.FileName.WithoutExt>~;

	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );

	BroadcastMessageToAllViews( ReleaseImage,~<OrderItemPreviewPath>~ );

	Files( ChMod,~<OrderItemPreviewPath>~,ReadWrite );

	Files( Delete,~<OrderItemPreviewPath>~ );
	
	//AddOrderItemFromExternalJob
	if ( !AddOrderItemToDataBase( dBase,<NextOrderItem>,~<OrderID>~,~~,1,<newSequence>,~<JobPath>~,~~,~~ ) )
	{
		return FALSE;
	}

	MaintainOrderItemImages( dBase,~<OrderID>~,~<NextOrderItem>~,~<JobPath>~ );

	UpdateOrderItemsDisplay(dBase,<NextOrderItem>,~<OrderID>~,~~,TRUE);
		
	return TRUE;
}


NUMERIC ProcessDraggedFiles( &DraggedFileList,OrderID )
{
	count = 0;

	if ( !Ado( dBase,Connect ) )
	{ 
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) ); 
	}	

	while ( DraggedFileList( GetNext,Product ) )
	{
		DocumentPath = ~<$con.Product[Text]>~;

		if ( !SQLSafe( ~<DocumentPath>~ ) )
		{
			Warning( ~Can't handle a path with a ' in it.  <DocumentPath>~ );
			continue;
		}

		if ( !Files( IsUNC,~<DocumentPath>~ ) && NetworkOperation() )
		{
			Msg = Translate( UIMessages,UnsharedFile,~<DocumentPath>~ );

			if ( MessageBox( ~<Msg>~,YESNO ) != YES )
				{ return FALSE; }
		}

		if ( GetFileType(~<DocumentPath>~) == TEXT )
		{
			if ( SimilarStr(~<$str.$DocumentPath.ext>~,~PDF~) )
			{
				if ( !AddOrderItemFromPDF( dbase,~<OrderID>~,~<DocumentPath>~ ) )
					{ return <count>; }
			}
			else
			{
				if ( !AddOrderItemFromExternalJob( dbase,~<OrderID>~,~<DocumentPath>~ ) )
					{ return <count>; }
			}

			OrderItemsWindow( StatusBar,Text,~Added <++Count> Items to Order <OrderID>~ );
		}
	}

	return <count>;
}


NUMERIC ExternalDrop( &DragDropInfo )
{
	if ( !GenCon( DstView,Is,~<$CON.DragDropInfo[DstView]>~ ) ) 
		{ return Warning( ~The Destination View is invalid~ ); }				

	if ( ~<$con.DstView[ViewDataType]>~ != OrderItems )
		{ return Warning( ~The DstView contains <$con.DstView[ViewDataType]> instead of Order Items~ ); }

	DstView( Get,Text,OrderID );

	if ( ~<OrderID>~ == ~~  )
		{ return Warning( Translate( OrderItemsMessages,NoOrderID ) ); }

	if ( !DragDropInfo( GetDraggedFiles,DraggedFileList ) )
		{ return ~There were no files in the object you dragged~; }

	count = DraggedFileList( ChildCount );
		
	if ( $count <= 0 )
		{ return ~There were no files in the object you dragged~; }

	if ( <count> > 1 )
	{
		SortOrder = CustomMessageBox( Title,~Import Order Items~,Message,~Sort files by ...~,
										Button1,~File Name~,
										Button2,~Creation Date~,
										Button3,~Cancel~ );
		if ( <SortOrder> == 1 )
		{
			DraggedFileList( SortListBy,~Text~,~CreationTime~ );
		}
		else if ( <SortOrder> == 2 )
		{
			DraggedFileList( SortListBy,~CreationTime~,~Text~ );
		}
		else 
		{
			return FALSE;
		}
	}

	count = ProcessDraggedFiles( DraggedFileList,~<OrderID>~ );

	return TRUE;
}



NUMERIC HandleDrop()
{
	if ( !GenCon( DragDropInfo,GetDropInfo ) )
		{ return Warning( ~There was no DragDropInfo for the item dragged into the Order Items window~ ); }

	if ( !GenCon( SrcView,Is,~<$CON.DragDropInfo[SrcView]>~ ) ) 
		{ return ExternalDrop(DragDropInfo); }

	if ( !GenCon( DstView,Is,~<$CON.DragDropInfo[DstView]>~ ) ) 
		{ GenCon( DstView,GetActiveView ); }

	if ( ~<$con.DstView[ViewDataType]>~ != OrderItems )
		{ return Warning( ~The DstView contains <$con.DstView[ViewDataType]> instead of orders~ ); }

	if ( !SrcView( GETSELECTED,SelectedItems ) )
	{ 
		GenCon( SelectedItems,Is,SrcView(GetCopyOf) );
	}

	count = SelectedItems( ChildCount );

	if ( <count> <= 0 )
	{
		return Warning( ~No items were selected~ );
	}

	if ( ~<$con.SrcView[ViewDataType]>~ == ~OrderItems~ )		// IS THE ITEM AN ORDERITEM?
	{ 
		return HandleOrderItemDrop( SelectedItems,SrcView,DstView,DragDropInfo ); 
	}

	if ( ~<$con.SrcView[ViewDataType]>~ == ~Products~ )		// IS THE ITEM A PRODUCT?
		{ return HandleProductDrop( SelectedItems,SrcView,DstView,DragDropInfo ); }

	if ( ~<$con.SrcView[ViewDataType]>~ == ~Text~ )		// IS THE ITEM A LIST OF GENCONS CONTAINING TEXT?
		{ return HandleTextDrop( SelectedItems,SrcView,DstView,~<$CON.DragDropInfo[DropLocation]>~ ); }
	
	if ( ~<$con.SrcView[ViewDataType]>~ == ~Image~ )		// IS THE ITEM AN IMAGE FROM AN ORDER?
		{ return HandleOrderImageDrop( SelectedItems,SrcView,DstView,~<$CON.DragDropInfo[DropLocation]>~ ); }

	return Warning( ~Products and images are the only items that can be dragged into the Order Items window~ );
}


NUMERIC RedrawJobIcon( OrderID,OrderItemID )
{
	if ( !OrderItemsWindow( FindI,ViewDataFor,~<OrderID>~,position,View ) )  { return FALSE; }

	if ( !View( FindI,Key,~OrderID = '<OrderID>' And ID = <OrderItemID>~,position,ThumbNail ) )  { return FALSE; }

	View( RedrawThumbNail,ThumbNail,TRUE );

	return View( RefreshView );
}


NUMERIC OpenAJob( JobPath,OrderID,OrderItem )
{
	if ( ~<JobPath>~ == ~~ )
		{ return FALSE; }

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( !Window( GetNext,aView ) )
			continue;

		aView( Get,ViewType,ViewType );

		if ( ~<ViewType>~ == JobView || ~<ViewType>~ == ImageView )
		{
			aView( GetDocumentPath,DocumentPath );

			if ( ~<DocumentPath>~ == ~<JobPath>~ )
			{ 
				Window( SetWindowOrder,Top );
				return TRUE;
			}
		}
	}

	if ( ~<JobPath>~ == ~~ )
		{ return FALSE; }

	if (!GenCon( Info,New,DDDocumentInfo ) )
		{ return Warning( ~Could not create document info for <JobPath>~ ); }

	Info( SetValues,OrderID,~<OrderID>~,OrderItemID,~<OrderItem>~ );

	OrderItemsWindow( StatusBar,Text,~Opening <JobPath>~ );

	if ( !Document( aJob,Open,~<JobPath>~,Job,~~,Info ) )
		{ return Warning( ~Could not open <JobPath>~ ); }

	return TRUE;
}


NUMERIC CloseAJob( JobPath )
{
	if ( ~<JobPath>~ == ~~ )
		{ return FALSE; }

	WaitCursor( Begin );

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( !Window( GetNext,aView ) )
			continue;

		aView( Get,ViewType,ViewType );

		if ( ~<ViewType>~ == JobView )
		{
			aView( GetDocumentPath,DocumentPath );

			if ( ~<DocumentPath>~ == ~<JobPath>~ )
			{ 
				WaitCursor( End );
				return Window( CloseWindow );
			}
		}
	}

	WaitCursor( End );

	return FALSE;
}


NUMERIC CloseAllJobs()
{
	OrderItemsWindow( StatusBar,Text,~Closing all open Order Items~ );

	Count = Index = 0;

	app( ThisApp,MessagePump,3 );

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( Window( GETNEXT,aView ) )
		{
			aView( GET,ViewType,ViewType );

			if ( ~<ViewType>~ == ~JobView~ )
			{
				aView( GetDocumentPath,DocumentPath );
				Window( CloseWindow );
				++Count;
			}
		}
	}

	ThisApp( MessagePump,0 );

	return OrderItemsWindow( StatusBar,Text,Translate(~<Count> order items closed~) );
}


NUMERIC ExportOrderItems()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,SelectedOrdersItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }
	
	action = ACTION DOC ( ExportOrderItems OpenOnce "<$App.HTMLPages>\ExportOrderItems\ExportOrderItems.kpl" "InitTheWindow(TRUE);" );
	return PerformActions( action );
}

NUMERIC CreateGroupPicture()
{
	action = ACTION DOC ( GroupPictureFromClassPicture Open "<$App.Scripts>\GroupPictureFromClassPicture.txt" "Init();" );
	return PerformActions( action );
}

NUMERIC SetRemakeForOrderItem()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,SelectedOrdersItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = SelectedOrdersItems( ChildCount );

	msg = ~Update the <Count> selected Order Items?~;

	if ( !<Count> )
	{
		msg = ~You haven't selected one or more Orderitems.  Update all of the OrderItems for the entire order?~;
	}

	button = CustomMessageBox( Title,~Remake~,Message,~<msg>~,
										Button1,~&Remake~,
										Button2,~&Don't Remake~,
										Button3,~Cancel~ );

	if ( <button> == -1 || <button> == 3 )		// -1 is the x on the dialog
	{
		return FALSE;	
	}

	WaitCursor( Begin );

	Value = <Button> == 1 ? 1 : 0;
	 
	if ( !ADO( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	if ( !<Count> && View(IsThumbNailView) )
	{
		View( GetName,OrderID );

		Key	= STR ( OrderID = '<OrderID>' );

		Cmd = ~Update OrderItems Set Remake = <Value> Where <Key>~;

		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			WaitCursor( End );
			dBase( GetErrorDescription,theErr );
			return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
		}

		More = View( GetFirst,Item );

		while ( <More> )
		{
			Remake = <Value> ? ~R~ : ~~;

			Item( GetData,OrderItem );

			Item( Set,Info2,~<$Con.OrderItem[ID]> Q<$Con.OrderItem[Quantity]> <Remake>  <$Con.OrderItem[ProductID]>~ );

			OrderItem( Set,Remake,<Value> );

			More = View( GetNext,Item );	
		}
		
		View( RefreshView );		
		
		return TRUE;
	}

	while ( SelectedOrdersItems( GetNext,OrderItem ) )
	{
		if ( View(IsGridView) )
		{
			Remake = <Value> ? ~1~ : ~0~;

			View( SetCellValue,OrderItem(GetRow),Remake,~<Remake>~ );
		}
		else if ( OrderItem( GetThumbNailInfo,ThumbNail ) )	
		{
			Key	= STR ( OrderID = '<$Con.OrderItem[OrderID]>' AND ID = <$Con.OrderItem[ID]> );

			Cmd = ~Update OrderItems Set Remake = <Value> Where <Key>~;

			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				WaitCursor( End );
				dBase( GetErrorDescription,theErr );
				return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
			}

			Remake = <Value> ? ~R~ : ~~;

			ThumbNail( Set,Info2,~<$Con.OrderItem[ID]> Q<$Con.OrderItem[Quantity]> <Remake>  <$Con.OrderItem[ProductID]>~ );

			if ( ThumbNail( GetData,Data ) )
			{
				Data( Set,Remake,<Value> );
			}

			View( RedrawThumbNail,ThumbNail,FALSE );
		}	
	}

	WaitCursor( End );

	return TRUE;
}


NUMERIC CloseJobForSelectedOrderItem()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,SelectedOrdersItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( SelectedOrdersItems( ChildCount ) == 0 )	// WANT TO CLOSE THEM ALL?
	{
		return CloseAllJobs();
	}

	while ( SelectedOrdersItems( GetNext,OrderItem ) )
	{
		Operation = STR ( CloseAJob( ~<$Con.OrderItem[JobPath]>~ ) );
		QueueContentsOf( Operation );	
	}

	return TRUE;
}


NUMERIC OpenJobForSelectedOrderItem()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,SelectedOrdersItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = SelectedOrdersItems( ChildCount );

	if ( <Count> == 0 )	// WANT TO OPEN THEM ALL?
	{
		ForgetLocal( SelectedOrderItems );

		View( GetAll,SelectedOrdersItems );

		Count = SelectedOrdersItems( ChildCount );

		if ( <Count> == 0 )
			{ return Warning( ~There are no items~ ); }

	}

	WaitCursor( Begin );

	CurrentlyOpen = NumWindows( LayoutOrJob );

	MaxOpenJobsOrLayouts = ~<$[Symbols].MaxOpenJobsOrLayouts[Long]>~;

	if ( <MaxOpenJobsOrLayouts> < 1 )
	{ 
		MaxOpenJobsOrLayouts = 1;
	}
	
	NewItems = <MaxOpenJobsOrLayouts> - <CurrentlyOpen>;
	if (<CurrentlyOpen> > 0)
	{
		if ( <NewItems> > 0)
		{
			MyMessage = ~You already have <CurrentlyOpen> open order items.  You can only have <MaxOpenJobsOrLayouts> order items or layouts open at a time.  Do you want to open <NewItems> additional order items?~;
		}
		else
		{
			MyMessage = ~You can only have <MaxOpenJobsOrLayouts> order items or layouts open at a time.~;
		}	
	}
	else
	{
		MyMessage = ~You can only have <MaxOpenJobsOrLayouts> order items or layouts open at a time.  Do you want to open <MaxOpenJobsOrLayouts>  order items?~;
	}
	
	if (SelectedOrdersItems( ChildCount ) + <CurrentlyOpen> > <MaxOpenJobsOrLayouts>)
	{
		if (<NewItems> > 0)
		{
			if ( MessageBox( ~<MyMessage>~,YESNO ) != YES ) 
				{ return FALSE; }
		}
		else
		{
			Warning(~<MyMessage>~);
		}

	}

	while ( SelectedOrdersItems( GetNext,OrderItem ) )
	{
		if ( <++CurrentlyOpen> > <MaxOpenJobsOrLayouts> )
		{
		//	Warning( Translate( ~You can only have <MaxOpenJobsOrLayouts> jobs or layouts open at a time~ ) );
			break;
		}

		Operation = STR ( OpenAJob( ~<$Con.OrderItem[JobPath]>~,~<$Con.OrderItem[OrderID]>~,~<$Con.OrderItem[ID]>~ ) );
		QueueContentsOf( Operation );
	}

	WaitCursor( End );

	return TRUE;
}


NUMERIC ViewSelectedOrderItemsAsImages()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,OrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( OrderItems( ChildCount ) > 20 )
		{ return Warning( Translate(OrderItemsMessages,TooManySelected,20) ); }

	OrderItems( MakeSQLList,ListOfOrders,TRUE,OrderID );

	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems  LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID In (<ListOfOrders>) Order By OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	action = ACTION DOC ( OrderImages Open OrderItemsDoc "Init(~~,~<Query>~,TRUE);" );
	return PerformActions( action );
}


NUMERIC ViewOrdersForSelectedItems()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,OrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	if ( OrderItems( ChildCount ) > 20 )
		{ return Warning( Translate(OrderItemsMessages,TooManySelected,20) ); }

	OrderItems( MakeSQLList,ListOfOrders,TRUE,OrderID );

	Query = ~Select * from Orders where ID In (<ListOfOrders>) Order By ID~;

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	action = ACTION DOC ( Orders <OpenMethod> OrdersDoc "Init(~~,~<Query>~);" );
	return PerformActions( action );
}

NUMERIC SeeJobsInQueue()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	View( GetName,OrderID );

	Query = STR ( Select * From JobQueue Where OrderID = '<OrderID>' );

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTION Doc ( ~JobQueue~ <OpenMethod> JobQueueDoc "Init( Translate( ~Jobs For Order <OrderID>~ ),~<Query>~ );" );
	PerformActions( Actions );

	return TRUE;
}


NUMERIC ViewOrderItemsAsImages( WhichOrders)
{
	//GetThumbNailViewWindowPosition();

	//DocumentQuery = ~Select OrderItems.*, Products.LayoutName From OrderItems,Products  Where OrderID In (<WhichOrders>) And OrderItems.ProductID = Products.ID Order By OrderID,OrderItems.Sequence~;

	StatusBarText( ~Querying OrderItems~ );

	WaitCursor( Begin );

	Start = Ticks();

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		WaitCursor( End );
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	SetDocumentData( List(GetObject) );

	StatusBarText( ~Reading <Count> OrderItems~ );
	
	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~ProcessOrders:Database Connection Failed. <theErr>~) );
	}

	OrderItemsWindow( CreateThumbNailViews4,OrderItemsView,OrderItemsThumbNailImage,List,OrderID,Item,~<WhichOrders>~ );

	OrderItemsWindow( CreateWindow,~Order Items - <WhichTitle>~ );

	OrderItemsWindow( SetWindowTitle,~Order Items - <WhichTitle>~ );

	Duration = (Ticks() - <Start>) / 1000;

	StatusBarText( Translate(OrderItemsMessages,ReadRecords,~<Count>~,<Duration>) );

	WaitCursor( End );

	return TRUE;
}


NUMERIC SeeImagesForOrderItems()
{
	if ( !OrderItemsDataView( GetSelectedRows,SelectedOrders ) )		
		{ return Warning( ~There were no orders selected~ ); }

	while ( SelectedOrders( GetNext,Order ) )
	{
		ViewOrderItemsImages( ~<Order>~ );
	}

	return TRUE;
}


NUMERIC SeeImagesUsedByPDF()
{
	ReturnOnFailure( SelectBook() );
	return SeeImagesUsedByOrderItem();
}


NUMERIC SeeImagesUsedByOrderItem()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }	

	OrderItemCategory( GetName,OrderID );

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )		{ return FALSE; }

	count = SelectedItems( ChildCount );
	
	OrderItemCategory( GetName,OrderID );

	if ( <count> == 0 )		// Nothing was selected so do it for the whole order
	{
		ExistsClause = ~Select * From OrderItemImages Where ItemOrderID='<OrderID>'  AND Images.OrderID=OrderItemImages.OrderID AND Images.Roll=OrderItemImages.Roll AND Images.Frame=OrderItemImages.Frame~;
		Title = ~Images used in all OrderItems~;
		Query = ~SELECT * FROM Images WHERE EXISTS (<ExistsClause>) Order By Roll,Frame~ ;
		Actions = ACTION Doc ( ~ImagesDoc~ Open ImagesDoc "Init( ~<OrderID>~,TRUE,~<Query>~,0,~<Title>~ );" );
		return PerformActions( Actions );
	}
	
	Index = 0;
	
	while ( SelectedItems( GetNext,Item ) )
	{
		if ( <Index++> == 0 )
		{
			Title = ~Images used in <count> selected OrderItems~;
			ExistsClause = ~Select * From OrderItemImages Where ItemOrderID='<OrderID>' AND ItemID = <$con.Item[ID]> AND Images.OrderID=OrderItemImages.OrderID AND Images.Roll=OrderItemImages.Roll AND Images.Frame=OrderItemImages.Frame~;
			Query = ~SELECT * FROM Images WHERE EXISTS (<ExistsClause>) Order By Roll,Frame~ ;
			Actions = ACTION Doc ( ~ImagesDoc~ Open ImagesDoc "Init( ~<OrderID>~,TRUE,~<Query>~,0,~<Title>~ );" );
			PerformActions( Actions );
		}
		else
		{
			ExistsClause = ~Select * From OrderItemImages Where ItemOrderID='<OrderID>' AND ItemID = <$con.Item[ID]> AND Images.OrderID=OrderItemImages.OrderID AND Images.Roll=OrderItemImages.Roll AND Images.Frame=OrderItemImages.Frame~;
			Query = ~SELECT * FROM Images WHERE EXISTS (<ExistsClause>) Order By Roll,Frame~ ;
			Actions = ACTION Doc ( ImagesDoc "AddImageThumbnailsFromQuery(~<Query>~);" );
			PerformActions( Actions );
		}
		
		StatusBarText( ~<--count> Items~ );
		
		MessagePump();
	}

	Actions = ACTION Doc ( ImagesDoc "RefreshTheThumbnails();" );
	return PerformActions( Actions );
}


NUMERIC OnOkUngroupAll()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )	{ return Warning( ~There were no selected items~ ); }

	connected = 0;
	countSuccessfulUpdates = 0;
	while ( SelectedItems( GetNext,Item ) )
	{
		GroupID = ~<$con.Item[GroupID]>~;
		if (!IsNull(~<GroupID>~))
		{
			if ( !<connected> && !ADO( dBase,Connect ) )
			{
				dBase( GetErrorDescription,theErr );
				return Warning( Translate( ~GroupOrderItems:Database Connection Failed. <theErr>~) );
			}			
			Key	= STR ( OrderID = '<$con.Item[OrderID]>' AND ID = '<$con.Item[ID]>' );
			connected = 1;
			Cmd = ~Update OrderItems Set GroupID = NULL Where <Key>~;
			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				WaitCursor( End );
				dBase( GetErrorDescription,theErr );
				return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
			}
			++countSuccessfulUpdates;
		}
	}
	
	Warning( ~<countSuccessfulUpdates> Order items were removed from group printing~);
	
	return TRUE;
}

NUMERIC EditABook()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( Get,Text,Order );

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = SelectedOrderItems(ChildCount);

	if ( <Count> )	// JUST SHOW THE SELECTED ORDERITEMS?
	{
		if ( <Count> > 20 )
			{ return Warning( Translate(OrderItemsMessages,TooManySelected,20) ); }

		if ( !SelectedOrderItems( MakeSQLList,List,FALSE,GroupID ) )
			{ return Warning( ~Error creating list of Order Items~ ); }

		Title = ~Books for Order <Order> and Group ID In <List>~;

		Query = STR ( Select * From Books Where OrderID = '<Order>' AND GroupID In (<List>) Order By OrderID,GroupID );
	}
	else			// SHOW ALL ORDERITEMS FOR THIS ORDER
	{
		Query = STR ( Select * From Books Where OrderID = '<Order>' Order By OrderID,GroupID );
		Title = ~All Books for Order <Order>~;
	}
  
	Actions = ACTION Doc ( ~EditBooks Open EditBooks "Init(~<Title>~,~<Query>~);" );
	return PerformActions( Actions );
}

NUMERIC RemoveItemsFromBook()
{

	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )	{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }

	more = SelectedItems(GetFirst,Item);
	if (!<more>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ );
	}

	if ( !Ado( dbase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~RemoveItemsFromBook Connection Failed. <theErr>~) );
	}

	count = 0;
	countOrderItems = 0;
	LastGroupID = -9999999;
	OrderID = ~<$con.Item[OrderID]>~;	
	while (<more> ) 
	{
		// Item contains the data
		GroupID = Item(GetNumeric,GroupID);
		if (<GroupID> != 0)
		{
			if (<GroupID> != <LastGroupID>)
			{
				SQLCommand = ~Select Count(*) From OrderItems Where GroupID = <GroupID> AND OrderID = '<OrderID>'~;
				numRecs = dBase( RecordCountFor,~<SQLCommand>~ );
				countOrderItems += <numRecs>;
				++count;
				LastGroupID = <GroupID>;
			}
		}
		more = SelectedItems(GetNext,Item);
	}
	
	if (<count> == 0)
	{ return TRUE; }

	count = 0;
	countOrderItems = 0;
	LastGroupID = -9999999;
	OrderID = ~<$con.Item[OrderID]>~;	
	more = SelectedItems(GetFirst,Item);
	while (<more> ) 
	{
		// Item contains the data
		GroupID = Item(GetNumeric,GroupID);
		if (<GroupID> != 0)
		{
			if (<GroupID> != <LastGroupID>)
			{
				// update the in memory data first
				Query = ~Select * From OrderItems Where OrderID = '<OrderID>' AND GroupID = <GroupID>~;

				if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
				{ 
					List( GetErrorDescription,0,theErr );
					Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
					return FALSE;
				}
				while (List(GetNext,Record))
				{
					theID = ~<$pcon.Record[ID]>~;
					OrderItemCategory(UpdateOrderItemField, ~<OrderID>~, ~<theID>~, GroupID,0);		// updates data gencon
					OrderItemCategory(UpdateImageDef, ~<OrderID>~, ~<theID>~,Group,0);				// updates the image definition
				}
				LastGroupID = <GroupID>;
			}
		}
		more = SelectedItems(GetNext,Item);
	}

	// update the database
	more = SelectedItems(GetFirst,Item);
	count = 0;
	countOrderItems = 0;
	LastGroupID = -9999999;
	OrderID = ~<$con.Item[OrderID]>~;	
	while (<more> ) 
	{
		// Item contains the data
		GroupID = Item(GetNumeric,GroupID);
		if (<GroupID> != 0)
		{
			if (<GroupID> != <LastGroupID>)
			{
				SQLCommand = ~Update OrderItems Set GroupID = 0 Where OrderID = '<OrderID>' And GroupID = <GroupID>~;
				if (!dBase(Cmd, ~<SQLCommand>~))
				{
					dBase(GetErrorDescription, theErr);
					return Warning( ~Unable to update the sequence and subsequence in order item having Order Number <$con.Item[OrderID]> and Item ID <theID> to new sequence <Sequence> and new subsequence <NewSubsequence>.  <theErr>~ );
				}
				LastGroupID = <GroupID>;
				BaseOrderItem::DeleteUnusedBooks(dbase,<GroupID>,~<OrderID>~);
			}
		}
		more = SelectedItems(GetNext,Item);
	}

	OrderItemCount = BaseOrderItem::CountItemsInAnyBook(dBase,~'<OrderID>'~);

	SetGroupSpacing(dbase,OrderItemCategory,~<OrderID>~);

	OrderItemCategory( FreeCachedImageCorrections);
	OrderItemCategory( RefreshView );
	WaitCursor( End );
	return TRUE;
}

NUMERIC SelectBook()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )	{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }

	result = SelectedItems(GetFirst,Item);
	if (!<result>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ );
	}
	GroupID = ~<$con.Item[GroupID]>~;
	if (<GroupID>)
	{
		OrderItemCategory(SelectBook,~<GroupID>~);
	}
	else
	{
		ID = ~<$con.Item[ID]>~;
		Warning( ~<$Tr.OrderItemTranslation(NotInBook,<ID>)>~ );
	}

	return TRUE;

}



NUMERIC ViewMovie()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )			{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )		{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }
	
	count = SelectedItems( ChildCount );
	
	if ( <count> == 0 )											{ return Warning(~No OrderItems were selected~); }
	
	if ( !Ado( db,Connect ) )
	{
		db( GetErrorDescription,theErr );
		return Warning( ~Failed to connect to the shared database.  <theErr>~ );
	}
	
	if ( SelectedItems( GetFirst,Item ) )
	{
		if (  Numeric(~<$con.Item[GroupID]>~) == 0 )
		{
			return Warning( ~This Item is not part of a book~ );
		}
	
		Query = ~Select DeviceType From Books Where OrderID = '<$con.Item[OrderID]>' AND GroupID = <$con.Item[GroupID]>~;
		
		if ( !db( GetValuesFor,~<Query>~,DeviceType ) )
		{
			return Warning( ~The book record is missing~ );
		}
		
		if ( !SimilarStr(~<DeviceType>~,~Animoto~) )
		{
			return Warning( ~This book is of type (<DeviceType>). It is not a movie.~ );
		}
		
		Query = ~Select ID From AnimotoMovie Where OrderID='<$con.Item[OrderID]>' AND BookID = <$con.Item[GroupID]>~;
		
		if ( db( GetValuesFor,~<Query>~,MovieID ) )
		{
			Query = ~Select * From AnimotoMovie Where OrderID='<$con.Item[OrderID]>' AND BookID = <$con.Item[GroupID]>~;
			Action = ACTION DOC ( AnimotoMovieDoc Open "<$App.HtmlPages>\Animoto\AnimotoMovieDoc.txt" "Init(~Movie for Book <$con.Item[OrderID]>/<$con.Item[GroupID]> ~,~<Query>~);" );
			return PerformActions( Action );
		}
		else
		{
			return Warning( ~This book is not a movie yet~ );
		}
	}
	
	return  Warning(~No OrderItems were selected~);
}


NUMERIC ToggleSpotlit()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )			{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )		{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }
	
	count = SelectedItems( ChildCount );
	
	if ( <count> == 0 )											{ return Warning(~No OrderItems were selected~); }
	
	if ( !Ado( db,Connect ) )
	{
		db( GetErrorDescription,theErr );
		return Warning( ~Failed to connect to the shared database.  <theErr>~ );
	}
	
	while ( SelectedItems( GetNext,Item ) )
	{
		ContinueIf( !Item( GetThumbNailInfo,ThumbNail ) );
		
		ThumbNail( Get,Spotlit,SpotLit );
		
		Spotlit = !Numeric(~<Spotlit>~);
		
		if ( !db( Cmd,~Update OrderItems Set Spotlit=<SpotLit> Where OrderID = '<$con.Item[OrderID]>' And ID = <$con.Item[ID]>~ ) )
		{
			return Warning( ~Failed to set Spotlit for '<$con.Item[OrderID]>' / <$con.Item[ID]>~ );
		}
		
		ThumbNail( Set,Spotlit,<SpotLit> );
		OrderItemCategory( RedrawThumbNail,ThumbNail,FALSE,FALSE );
	}
	
	return TRUE;
}


NUMERIC CombineBookIntoFirstBook()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )			{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )		{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }
	
	count = SelectedItems( ChildCount );
	
	if ( <count> == 0 )											{ return Warning(~No OrderItems were selected~); }
	
	SelectedItems( GetFirst,Item );
	
	if ( !Numeric(~<$con.Item[GroupID]>~) )						{  return Warning( ~The first page must be part of a book~ ); }
	
	GroupID = Numeric(~<$con.Item[GroupID]>~);
	
	Sequence = Numeric(~<$con.Item[Sequence]>~);
	
	Subsequence = Numeric(~<$con.Item[Subsequence]>~);
	
	OrderID = ~<$con.Item[OrderID]>~;
	
	Subsequence = 0;
	
	if ( !ADO( db,Connect ) )
	{
		db( GetErrorDescription,theErr );
		return Warning( ~Failed to connect to the shared database.  <theErr>~ );
	}
	
	WaitCursor( Begin );
	
	StringList( BooksToDelete,New,NoDuplicateValues );
	
	while ( SelectedItems( GetNext,Item ) )
	{
		if ( Item( GetThumbNailInfo,ThumbNail ) )
		{
			if ( !ThumbNail( GetData,Data ) )
			{
				WaitCursor( End );
				return Warning(~View data is invalid.  Can't proceed~);
			}
			
			thisGroupID = Data( GetNumeric,GroupID );
			
			if (  <thisGroupID> !=  <GroupID> )
			{
				BooksToDelete( AddString,~<thisGroupID>~ );
			}
			
			Data( Set,GroupID,<GroupID> );
			Data( Set,Sequence,<Sequence> );
			Data( Set,Subsequence,<++Subsequence> );
			
			Cmd = ~Update OrderItems Set GroupID=<GroupID>,Sequence=<Sequence>,Subsequence=<Subsequence> Where OrderID='<$con.Item[OrderID]>' AND ID=<$con.Item[ID]>~;
			
			if ( !db( Cmd,~<Cmd>~ ) )
			{
				db( GetErrorDescription,theErr );
				WaitCursor( End );
				return Warning( ~Failed to update the database with the new book information.  <theErr>.  <cmd>~ );
			}
			
			ThumbNail( Set,Group,~<GroupID>~ );

			OrderItemCategory( RedrawThumbNail,ThumbNail,TRUE );
		}
	}
	
	OrderItemCategory( RefreshView );
	
	more = BooksToDelete( GetFirst,GroupID );
	
	while ( <more> )
	{
		Cmd = ~Delete From BookAttributes Where OrderID = '<OrderID>' And GroupID=<GroupID>~;
		
		if ( !db( Cmd,~<Cmd>~ ) )
		{
			db( GetErrorDescription,theErr );
			WaitCursor( End );
			return Warning( ~Failed to delete the book attributes for <OrderID>/<GroupID>.  <theErr>.  <cmd>~ );
		}
		
		
		Cmd = ~Delete From Books Where OrderID = '<OrderID>'  And GroupID=<GroupID>~;
		
		if ( !db( Cmd,~<Cmd>~ ) )
		{
			db( GetErrorDescription,theErr );
			WaitCursor( End );
			return Warning( ~Failed to delete the book for <OrderID>/<GroupID>.  <theErr>.  <cmd>~ );
		}
		
		more = BooksToDelete( GetNext,GroupID );
	}
	
	
	WaitCursor( End );
	
	return TRUE;
}

NUMERIC EditBooks()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )	{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }

	count = SelectedItems( ChildCount );
	if (!<count>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~); 
	}

	numBooks = NumberOfBooks(SelectedItems);
	if (!<numBooks>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(NoBooks)>~); 
	}

	if (<numBooks> != 1)
	{
		return Warning( ~<$Tr.OrderItemTranslation(MoreThan1Book)>~); 
	}

	OrderItemCategory( Get,DontAllowDragDrop,DontAllowDragDrop);
	OrderItemCategory( Get,DuplicateSequence,DuplicateSequence);
	if ( <DontAllowDragDrop>)
	{ 
		if ( <DuplicateSequence>)
		{
			return Warning(~You cannot edit a book because two or more order items have duplicate Sequence and Subsequence values~);
		}
		else
		{
			return Warning(~The order items must be sorted by sequence.  Please right click and Sort by Sequence~);
		}
	}


	ForgetGlobal( Obj);
	EditTemplateDlg( New,Obj );
	Global( Obj );

	Obj.CreateModalDialog(~/OrderItems/GroupOrderItems.kpl~);		// Create an HTML Window that behaves like a modal dialog
	return TRUE;
}


NUMERIC ViewBookAttributes()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )	{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }

	count = SelectedItems( ChildCount );
	if (!<count>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~); 
	}

	numBooks = NumberOfBooks(SelectedItems);
	if (!<numBooks>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(NoBooks)>~); 
	}

	if (<numBooks> != 1)
	{
		return Warning( ~<$Tr.OrderItemTranslation(MoreThan1Book)>~); 
	}
	
	SelectedItems( GetFirst,Item );
	
	Query = ~Select * From Books Where OrderID = '<$con.Item[OrderID]>' AND GroupID = <$con.Item[GroupID]>~;
	
	Actions = STR ( EditBooks Open EditBooks "Init( ~Order <$con.Item[OrderID]>/Book <$con.Item[GroupID]>~,~<Query>~);" );
	return PerformDocActions( Actions );
}


NUMERIC GroupOrderItems()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	if ( !OrderItemCategory( GetSelected,SelectedItems ) )	{ return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~ ); }

	count = SelectedItems( ChildCount );
	if (!<count>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(NoneSelected)>~); 
	}

	alreadyInBook = OrderItemsInBook(SelectedItems);
	if (<alreadyInBook>)
	{
		return Warning( ~<$Tr.OrderItemTranslation(AlreadyInBook,<alreadyInBook>)>~); 
	}

	OrderItemCategory( Get,DontAllowDragDrop,DontAllowDragDrop);
	OrderItemCategory( Get,DuplicateSequence,DuplicateSequence);
	if ( <DontAllowDragDrop>)
	{ 
		if ( <DuplicateSequence>)
		{
			return Warning(~You cannot create a book because two or more order items have duplicate Sequence and Subsequence values~);
		}
		else
		{
			if ( MessageBox( Translate(OrderItemsMessages,WantToResequence,~<Count>~),YESNO ) != YES )
				{ return FALSE; }
			ResequenceOrderItems(SelectedItems);
		}
	}
	ForgetGlobal( Obj);
	TemplateDlg( New,Obj );
	Global( Obj );

	Obj.CreateModalDialog(~/OrderItems/GroupOrderItems.kpl~);		// Create an HTML Window that behaves like a modal dialog
	return TRUE;
}
VOID LoadComplete()
{
	// null because OnLoadComplete called directly from page's javascript
}

// Template Dialog Code
Class( TemplateDlg,Extends,BaseHTMLWin,	
	  Member,fNumOverrides,Numeric,0,
	  Member,fNJPenabled,Numeric,0
 );

Class( EditTemplateDlg,Extends,TemplateDlg	
 );

VOID HelpRoutine()
{
	Obj.HelpRoutine();
}

NUMERIC TemplateDlg::HelpRoutine()
{
	TheAction = ACTION ShowHelpPage ( KPISHelpFile "OrderItems.htm#books" );
	return PerformActions( TheAction );	
}

VOID UpdateListOfTemplates()
{
	if (Defined(Obj))
	{
		Obj.UpdateTemplates();
	}
}

VOID TemplateDlg::UpdateTemplates()
{
	fHtmlView(SetInnerHtml,AttributeBlockID, 0, ~~);
	fHtmlView(SetInnerHtml,TemplateListID, 0, ~~);
	fHtmlView(SetInnerHtml,AttributeBlockID2, 0, ~~);
	SetupTemplates();
}

VOID TemplateDlg::SetupTemplates()
{
	NoPrintingTemplateMsgActive = 0;
	NexPressWithTemplates = 0;
	numTemplates = GetNumberOfPrintingTemplates();
	SavedDeviceType = ~<$Tr.OrderItemTranslation(DeviceTypeOther)>~;
	fHtmlView( Get,DeviceTypeListID, 0, value,SavedDeviceType);
	if (SimilarStr(~<SavedDeviceType>~,NexPress))
	{
		if (<numTemplates> != 0)
		{
			fLoadedTemplates = true;
			Private(fLoadedTemplates);
			AddOverrides();				// inserts the html code for the override check boxes
			UpdateCategoryList(~<SavedDeviceType>~);		// inserts the html code for the categories and displays the empty template box
			SelectInitialCategory();	// Selects the category in the category box to match the selected template
			OnSelectTemplateCategory(); // Updates the templates for the selected category
			SelectInitialTemplate();
			fHtmlView(SetStyle,NexPressDivID,0,display,block);
			if (<fNJPenabled> == 1)
			{
				fHtmlView( SetStyle,~BannerDivID~,0,~display~,~block~);
				fHtmlView(SetStyle,DimOverrideDivID,0,display,none);
			}
		
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~none~);
			NexPressWithTemplates = 1;
			fHtmlView(Set,okBtn,0,disabled,~~);
		}
		else
		{
			NoPrintingTemplateMsgActive = 1;
			fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~visible~);
			fHtmlView(Set,okBtn,0,disabled,true);
		}
	}
	else if (SimilarStr(~<SavedDeviceType>~,~C8000/Creo~))
	{
		if (<numTemplates> != 0)
		{
			fLoadedTemplates = true;
			Private(fLoadedTemplates);
			//AddOverrides();				// inserts the html code for the override check boxes
			UpdateCategoryList(~<SavedDeviceType>~);		// inserts the html code for the categories and displays the empty template box
			SelectInitialCategory();	// Selects the category in the category box to match the selected template
			OnSelectTemplateCategory(); // Updates the templates for the selected category
			SelectInitialTemplate();
			//fHtmlView(SetStyle,NexPressDivID,0,display,none);
			fHtmlView(SetStyle,BleedDivID,0,display,none);
			fHtmlView(SetStyle,AllInkDivID,0,display,none);
			fHtmlView(Set,okBtn,0,disabled,~~);
			NexPressWithTemplates = 1;
		}
		else
		{
			NoPrintingTemplateMsgActive = 1;
			fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~visible~);
			fHtmlView(Set,okBtn,0,disabled,true);
		}
	}
	else
	{
		fHtmlView(SetStyle,ConfigDivID,0,display,none);
	}

	if (<NexPressWithTemplates> == 0)
	{
		ForgetPrivate(fLoadedTemplates);
		fHtmlView(SetStyle,NexPressDivID,0,display,none);

	}
	if (<NoPrintingTemplateMsgActive> == 0)
	{
		fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~hidden~);
		fHtmlView(Set,okBtn,0,disabled,~~);
	}

}


VOID	TemplateDlg::OnLoadComplete()	
{  

	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedItems ) )		
		{ return Warning( Translate(~There are no selected order items~) ); }
	
	DFESetupFile = ~<$App.ShareDirectory>\NexPressDFESetup.txt~;
	if ( Files( FileExists,~<DFESetupFile>~ ) )
	{	
		fNJPenabled = 0;
	}
	else
	{
		fNJPenabled = 1;
	}
		
	GetBookRec();				// finds the database record associated with the book for the first orderitem in a book (edit only)
	GetBookQuantity();			// gets the quantity from the Book object and sets the html page
	GetDeviceType();			// sets the device type from the user settings (create only)
	SelectDeviceType();			// selects the device type in the html page
	SetupTemplates();			// sets the categories and templates in the html page
	UpdateNumberSelected();		// sets the number of order items selected (Create) or number of order item in the book (Edit)
	UpdateInkList();			// reads the inks from the database and inserts the inks into the html page
	SetBookData();				// Sets the banner, inkname and bleed in the html page
	PGenConList( List,Create );	// Creates a PGenConList object
	fBook.GetAttributes(List);	// database call to get the list of attributes
	CheckAdvancedBox(List);		// checks the advance box if there are book attributes
	OnAdvancedCheckBox();		// sets the appropriate window size and makes attribute check boxes div visible, substrate popups visible
	CheckOverrideBox(List);		// checks the appropriate substrate check boxes and makes the associated select lists visible
	SelectSubstr(List);			// selects the proper substrate in the select list
	SetTitle1();				// sets the title of the page
	UpdateDimCoat(List);		//set up the list choices for the 3 list under dimensional coat
	InitAnimotoRecord(List);	// set the defaults in the AnimotoBookRec
	OnSelectDeviceType();
};		// Override as needed


VOID TemplateDlg::SetTitle1()
{
	fHtmlView(SetInnerHtml,compTitle,0,~<$TR.OrderItemTranslation(CreateBook1)>~);
}
VOID EditTemplateDlg::SetTitle1()
{
	fHtmlView(SetInnerHtml,compTitle,0,~<$TR.OrderItemTranslation(EditBook1)>~);
}

NUMERIC TemplateDlg::SetWindowSize()
{	
	WindowWidth = 1000;
	WindowHeight = 670;
	return TRUE;
}

VOID EditTemplateDlg::GetFTitle(OrderID)
{
	fTitle = ~<$Tr.OrderItemTranslation(EditBook,`<OrderID>`)>~;
}
VOID TemplateDlg::GetFTitle(OrderID)
{
	fTitle = ~<$Tr.OrderItemTranslation(CreateBook,`<OrderID>`)>~;
}

VOID EditTemplateDlg::EditTemplateDlg()
{
}

VOID TemplateDlg::TemplateDlg()
{

	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return ; }

	if ( !View( GetSelected,SelectedItems ) )		
		{  return; }

	View(GetName,OrderID);
	WindowTop = 20;
	WindowLeft = 20;

	GetFTitle(~<OrderID>~);
	SetWindowSize();

	fWindowStyle = ~WS_SIZEBOX~;
	
	if (!MemberDefined(fBook))
	{
		Book( New,fBook );
		Private( fBook );
	}
	InitAnimotoObject();

}
VOID TemplateDlg::UpdateNumberSelected()
{
	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return ; }

	if ( !View( GetSelected,SelectedItems ) )		
		{  return; }

	count = SelectedItems( ChildCount );
	result = SelectedItems(GetFirst,Item);
	OrderID = ~<$con.Item[OrderID]>~;

	if (<count> == 1)
	{
		
		fHtmlView(SetInnerHtml,HowManySelectedID,0,~<$Tr.OrderItemTranslation(OneSelected,<count>,`<OrderID>`)>~);

	}
	else
	{
		fHtmlView(SetInnerHtml,HowManySelectedID,0,~<$Tr.OrderItemTranslation(MoreThanOneSelected,<count>,`<OrderID>`)>~);
	}
}

VOID EditTemplateDlg::UpdateNumberSelected()
{
	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return ; }

	if ( !View( GetSelected,SelectedItems ) )		
		{  return; }

	result = SelectedItems(GetFirst,Item);
	OrderID = ~<$con.Item[OrderID]>~;
	GroupID = Numeric(~<$con.Item[GroupID]>~);

	Query = ~Select Count(*) From OrderItems Where OrderID = '<OrderID>' AND GroupID = <GroupID>~;
	if ( !Ado( dbase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~EditTemplateDlg:UpdateNumberSelected Connection Failed. <theErr>~) );
	}
	count = dBase( RecordCountFor,~<Query>~ );

	if (<count> == 1)
	{	
		fHtmlView(SetInnerHtml,HowManySelectedID,0,~<$Tr.OrderItemTranslation(OneInBook,`<OrderID>`,`<GroupID>`)>~);
	}
	else
	{
		fHtmlView(SetInnerHtml,HowManySelectedID,0,~<$Tr.OrderItemTranslation(MoreThanOneInBook,<count>,`<OrderID>`,`<GroupID>`)>~);
	}
	InitAnimotoObject();

}

VOID	TemplateDlg::SelectInitialCategory()	
{  
	// fHtmlView(Execute,~SelectByIndex(CategoryListID,0)~); faster version below
	fHTMLView( SetSelectedOptionByIndex,CategoryListID,0,0);

};	

VOID	EditTemplateDlg::SelectInitialCategory()	
{  
	// get the first order item in a book,
	// get the group ID and Order ID for the order item
	// get the template name from the record in the books table for this group ID, order ID
	// select the category in CategoryListID
	i = 0;
	TemplateName = fBook.GetTemplateName();
	TemplatesCategory = GetCategoryForTemplate(~<TemplateName>~);
	selectLength = fHtmlView(GetSelectOptionsLength,CategoryListID,0);
	while (<i> < <selectLength>)
	{
		fHtmlView( GetSelectOption,CategoryListID, 0, <i>, CategoryText,CategoryVal);
		if (SimilarStr(~<CategoryText>~, ~<TemplatesCategory>~))
		{
			fHTMLView( SetSelectedOptionByIndex,CategoryListID,0,<i>);
			return;
		}
		++i;
	}
	fHTMLView( SetSelectedOptionByIndex,CategoryListID,0,0);

};	

STR	TemplateDlg::GetCategoryForTemplate(TemplateName)
{
	Category = ~~;
	Query = ~Select Category From Templates Where TemplateName = '<TemplateName>'~;
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}
	Description = ~~;
	if (List(GetFirst,Item))
	{
		Item(GetValue,Category,Category);
	}
	return ~<Category>~;
}

VOID	TemplateDlg::SelectInitialTemplate()	
{  
	fHtmlView(Execute,~SelectByIndex(TemplateListID,0)~); 
	fHtmlView( Get,CategoryListID, 0, value, Category);
	fHtmlView( Get,TemplateListID, 0, value, TemplateName);
	Description = ~~;
	GetDescriptionFor(~<Category>~,~<TemplateName>~,Description);
	fHtmlView(SetInnerHtml,TemplateDescriptionID,0,~<$Tr.OrderItemTranslation(TemplateDescriptionIs,`<Description>`)>~);

};

VOID	EditTemplateDlg::SelectInitialTemplate()	
{  
	// get the template name from the book
	// find the template name in TemplateListID
	// select the template name in TemplatesListID
	fHtmlView(Execute,~SelectByIndex(TemplateListID,0)~); 

	fHtmlView( Get,CategoryListID, 0, value, Category);
	fHtmlView( Get,TemplateListID, 0, value, TemplateName);
	selectLength = fHtmlView(GetSelectOptionsLength,TemplateListID,0);

	i = 0;
	TemplateName=fBook.GetTemplateName();

	while (<i> < <selectLength>)
	{
		fHtmlView( GetSelectOption,TemplateListID, 0, <i>, TemplateText,TemplateVal);
		if (SimilarStr(~<TemplateVal>~, ~<TemplateName>~))
		{
			fHTMLView( SetSelectedOptionByIndex,TemplateListID,0,<i>);
			return;
		}
		++i;
	}
	fHTMLView( SetSelectedOptionByIndex,TemplateListID,0,0);
	
	Description = ~~;
	GetDescriptionFor(~<Category>~,~<TemplateName>~,Description);
	fHtmlView(SetInnerHtml,TemplateDescriptionID,0,~<$Tr.OrderItemTranslation(TemplateDescriptionIs,`<Description>`)>~);

};

VOID TemplateDlg::GetDeviceType()
{
	if (GetUserSettings( ~Books~,~DeviceType~,SavedDeviceType, Enabled ))
	{
		fBook.Set(fDeviceType,~<SavedDeviceType>~);
	}
	else
	{
		fBook.Set(fDeviceType,~~);
	}
}

VOID EditTemplateDlg::GetDeviceType()
{
}

VOID TemplateDlg::SelectDeviceType()
{
	DeviceType = fBook.GetDeviceType();
	if (SimilarStr(~<DeviceType>~,NexPress))
	{
		DeviceType = NexPress;// handle case issues
	}
	if (!IsNull(~<DeviceType>~))
	{
		fHtmlView( SetValue,DeviceTypeListID, 0, ~<DeviceType>~);
	}
	else
	{
		fHtmlView( SetValue,DeviceTypeListID, 0, ~<$Tr.OrderItemTranslation(DeviceTypeOther)>~);
	}
}


VOID TemplateDlg::GetDescriptionFor(Category,Template,&Description)
{
	Query = ~Select * From Templates Where Category = '<Category>' And TemplateName = '<Template>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}
	Description = ~~;
	if (List(GetFirst,Item))
	{
		Item(GetValue,Description,Description);
	}	
}
NUMERIC TemplateDlg::OnSelectDeviceType()
{
	fHtmlView( Get,DeviceTypeListID, 0, value, DeviceType);
	numTemplates = GetNumberOfPrintingTemplates();
	if (SimilarStr(~<DeviceType>~,NexPress))
	{
		if (<numTemplates>)
		{
			fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~hidden~);
			fHtmlView(Set,okBtn,0,disabled,~~);
			UpdateCategoryList(~<DeviceType>~);
			SelectInitialCategory();
			OnSelectTemplateCategory();
			SelectInitialTemplate();
			if (!Defined(fLoadedTemplates))
			{
				AddOverrides();			// inserts the html code for the override check boxes
				fLoadedTemplates = true;
				Private(fLoadedTemplates);
			}
			fHtmlView(SetStyle,ConfigDivID,0,display,block);
			fHtmlView(SetStyle,NexPressDivID,0,display,block);			
			OnAdvancedCheckBox();
		}
		else
		{
			fHtmlView(SetStyle,ConfigDivID,0,display,block);
			fHtmlView(SetStyle,DimOverrideDivID,0,display,block);
			fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~visible~);
			fHtmlView(Set,okBtn,0,disabled,true);
		}
		fHtmlView(SetStyle,BleedDivID,0,display,block);
		if (<fNJPenabled> == 1)
		{
			fHtmlView( SetStyle,~BannerDivID~,0,display,block);
			fHtmlView(SetStyle,DimOverrideDivID,0,display,none);
		}
		fHtmlView(SetStyle,AllInkDivID,0,display,block);
		fHtmlView(SetStyle,animotoRequiredID,0,display,none);
		GetUsersAnimotoValues();
	}
	else if (SimilarStr(~<DeviceType>~,~C8000/Creo~))
	{
		if (<numTemplates>)
		{
			fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~hidden~);
			fHtmlView(Set,okBtn,0,disabled,~~);
			UpdateCategoryList(~<DeviceType>~);
			SelectInitialCategory();
			OnSelectTemplateCategory();
			SelectInitialTemplate();
			if (!Defined(fLoadedTemplates))
			{
				fLoadedTemplates = true;
				Private(fLoadedTemplates);
			}
			fHtmlView(SetStyle,ConfigDivID,0,display,block);
			fHtmlView(SetStyle,NexPressDivID,0,display,block);
			fHtmlView(SetStyle,BleedDivID,0,display,none);
			fHtmlView(SetStyle,BannerDivID,0,display,none);
			fHtmlView(SetStyle,AllInkDivID,0,display,none);
			OnAdvancedCheckBox();
		}
		else
		{
			fHtmlView(SetStyle,ConfigDivID,0,display,block);
			fHtmlView(SetStyle,DimOverrideDivID,0,display,block);
			fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~visible~);
			fHtmlView(Set,okBtn,0,disabled,true);
		}
		fHtmlView(SetStyle,DimOvercoatID,0,display,none);
		fHtmlView(SetStyle,animotoRequiredID,0,display,none);
		GetUsersAnimotoValues();
	}
	else if (SimilarStr(~<DeviceType>~,~Animoto~))
	{
		if (!MemberDefined(AnimotoBookRec)) // in case we get here before OnLoadComplete
		{
			PGenConList( List,Create );	// Creates a PGenConList object
			fBook.GetAttributes(List);	// database call to get the list of attributes into a pGenCon
			InitAnimotoRecord(List);	// set the defaults in the AnimotoBookRec
		}
		InitAnimotoDiv();		// with the whatever is in AnimotoBookRec
		fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~hidden~);
		fHtmlView(Set,okBtn,0,disabled,~~);
		fHtmlView(SetStyle,ConfigDivID,0,display,none);
		fHtmlView(SetStyle,NexPressDivID,0,display,none);
		fHtmlView(SetStyle,BleedDivID,0,display,none);
		fHtmlView(SetStyle,BannerDivID,0,display,none);
		fHtmlView(SetStyle,AllInkDivID,0,display,none);
		OnAdvancedCheckBox();
			
		fHtmlView(SetStyle,DimOverrideDivID,0,display,none);
		fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~hidden~);
		
		fHtmlView(SetStyle,DimOvercoatID,0,display,none);
		fHtmlView(SetStyle,animotoRequiredID,0,display,block);
		
	}
	else
	{   
		fHtmlView(SetStyle,NexPressDivID,0,display,none);
		fHtmlView(SetStyle,ConfigDivID,0,display,none);
		fHtmlView(SetStyle,DimOverrideDivID,0,display,none);
		fHtmlView(SetStyle,NoPrintingTemplatesID,0,visibility,~hidden~);
		fHtmlView(Set,okBtn,0,disabled,~~);
		fHtmlView(SetStyle,DimOvercoatID,0,display,none);	
		fHtmlView(SetStyle,animotoRequiredID,0,display,none);
	}
	return TRUE;
}

NUMERIC TemplateDlg::OnSelectTemplate()
{
	fHtmlView( Get,TemplateListID, 0, value, TemplateName);
	fHtmlView( Get,CategoryListID, 0, value, Category);

	
	Query = ~Select * From Templates Where Category = '<Category>' And TemplateName = '<TemplateName>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}
	Description = ~~;
	if (List(GetFirst,Item))
	{
		Item(GetValue,Description,Description);
	}

	fHtmlView(SetStyle,OverrideDivID,0,visibility,visible);
	fHtmlView(SetInnerHtml,TemplateDescriptionID,0,~<$Tr.OrderItemTranslation(TemplateDescriptionIs,`<Description>`)>~);
	OnAdvancedCheckBox();
	ShowSubstrates();
	return TRUE;
}

NUMERIC TemplateDlg::OnSelectTemplateCategory()
{
	fHtmlView( Get,DeviceTypeListID, 0, value, DeviceType);
	fHtmlView( Get,CategoryListID, 0, value, selectedCategory);
	UpdateTemplatesList(~<DeviceType>~,~<selectedCategory>~);
	OnSelectTemplate();
	return 1;
}

VOID TemplateDlg::OnHotOffset()
{

}
VOID TemplateDlg::OnApplyCoat()
{

}

VOID TemplateDlg::OnCoatDensity()
{

}


NUMERIC TemplateDlg::OnSelectInk()
{
	GetCurrentInk(Ink);

	if (!<fNJPenabled>)
	{			
		if ( SimilarStr(~<Ink>~,~NexPress DryInk raised clear~) || SimilarStr(~<Ink>~,~NexPress DryInk dimensional clear~) )
		{ 
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~block~);
			fHtmlView( SetStyle,~HotOffsetDivID~,0,~display~,~block~);
			fHtmlView(SetStyle,DimOverrideDivID,0,display,block);	
			//fHtmlView( Set, ~DimOvercoatCheckbox~, 0, checked, ~~ );
			
			//fHtmlView( SetStyle,~ApplyCoatDivID~,0,~display~,~none~);
			//fHtmlView( SetStyle,~CoatDensityDivID~,0,~display~,~none~);
			OnDimOvercoatCheckBox();
		}
		else
		{				
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~none~);
			fHtmlView( SetStyle,~HotOffsetDivID~,0,~display~,~none~);
			fHtmlView(SetStyle,DimOverrideDivID,0,display,none);
			//fHtmlView( Set, ~DimOvercoatCheckbox~, 0, checked, ~~ );
			
			fHtmlView( SetStyle,~ApplyCoatDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~CoatDensityDivID~,0,~display~,~none~);
			OnDimOvercoatCheckBox();
		}
	}
	return 1;
}

VOID OnNewInkCheckBox()
{
	Obj.OnNewInkCheckBox();
}
VOID TemplateDlg::OnNewInkCheckBox()
{
	fHtmlView( Get, ~NewInkCheckboxID~, 0, checked, ~isEnabled~ );
	if (
			SimilarStr(~<isEnabled>~, ~True~) 
			|| SimilarStr(~<isEnabled>~, ~on~)
		)
	{
		fHtmlView( SetStyle,NewInkID,0,display,inline);
		fHtmlView( Set,NewInkID,0,value,~<$Tr.OrderItemTranslation(EnterNewInk)>~);
		fHtmlView( Set,InkListID,0,disabled,true);	
	}
	else
	{
		fHtmlView( SetStyle,NewInkID,0,display,none);
		fHtmlView( Set,InkListID,0,disabled,~~);	
	}
}

VOID TemplateDlg::GetCurrentInk(&InkName)
{
	fHtmlView( Get, ~NewInkCheckboxID~, 0, checked, ~isEnabled~ );
	if (
			SimilarStr(~<isEnabled>~, ~True~) 
			|| SimilarStr(~<isEnabled>~, ~on~)
		)
	{
		fHtmlView( Get,NewInkID,0,value,InkName);
	}
	else
	{
		fHtmlView( Get,InkListID,0,value,InkName);
	}

}

VOID TemplateDlg::OnClickNewInk()
{
	fHtmlView( Get,NewInkID,0,value,TheText);
	if (SimilarStr(~<TheText>~,~<$Tr.OrderItemTranslation(EnterNewInk)>~))
	{
		fHtmlView( Set,NewInkID,0,value,~~);
	}
}
VOID TemplateDlg::UpdateInkList()
{
	Query = ~Select Distinct InkName From Inks Order By InkName~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	fHtmlView(Execute,~ResetList(InkListID)~ );
	
	i = 0;
	while ( List( GetNext,Item ) )
	{
		if (~<$pcon.Item[InkName]>~ != ~~)
		{
			value = ~<$pcon.Item[InkName]>~;
			++i;
			fHtmlView( Execute,~AddListOption( InkListID,'<value>','<value>')~);
			if (<i> == 1)
			{
				SelectedInk = ~<value>~;
			}
		}
	}

	if (<i> > 0)
	{
		fHtmlView( Execute,~SelectByValue( InkListID,'<SelectedInk>')~);
				
		if ( !<fNJPenabled> )
		{	
			if ( SimilarStr(~<SelectedInk>~,~NexPress DryInk raised clear~) || SimilarStr(~<SelectedInk>~,~NexPress DryInk dimensional clear~) )
			{ 
				fHtmlView(SetStyle,DimOverrideDivID,0,display,block);	
			}
			else
			{				
				fHtmlView(SetStyle,DimOverrideDivID,0,display,none);
			}
		}
	}

}
VOID EditTemplateDlg::UpdateInkList()
{
	Query = ~Select Distinct InkName From Inks Order By InkName~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	fHtmlView(Execute,~ResetList(InkListID)~ );
	
	i = 0;
	while ( List( GetNext,Item ) )
	{
		if (~<$pcon.Item[InkName]>~ != ~~)
		{
			value = ~<$pcon.Item[InkName]>~;
			++i;
			fHtmlView( Execute,~AddListOption( InkListID,'<value>','<value>')~);
			if (<i> == 1 )
			{
				SelectedInk = ~<value>~;
			}
			else if (SimilarStr(fBook.GetInkName(), ~<value>~))
			{
				SelectedInk = ~<value>~;
			}
		}
	}

	if (<i> > 0)
	{
		fHtmlView( Execute,~SelectByValue( InkListID,'<SelectedInk>')~);

		if ( !<fNJPenabled> )
		{	
			if ( SimilarStr(~<SelectedInk>~,~NexPress DryInk raised clear~) || SimilarStr(~<SelectedInk>~,~NexPress DryInk dimensional clear~) )
			{ 
				fHtmlView(SetStyle,DimOverrideDivID,0,display,block);	
			}
			else
			{				
				fHtmlView(SetStyle,DimOverrideDivID,0,display,none);
			}
		}		
	}

}
		

VOID TemplateDlg::UpdateTemplatesList(DeviceType,Category)
{
	Query = ~Select Sequence,TemplateName From Templates Where DeviceType = '<DeviceType>' And Category = '<Category>' Order By Category,Sequence~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	fHtmlView( SetInnerHtml,TemplateListID,0,~~);

	// faster alternative to Execute,AddListOption
	fHtmlView( CreateOptionsFromGenConList, ~TemplateListID~, 0, List,TemplateName);
	fHtmlView(Execute,~SelectByIndex(TemplateListID,0)~);
}

NUMERIC TemplateDlg::ConfigNexpress()
{
	action = STR ( NexPressConfig_1c OpenOnce NexPressConfig_1c );
	PerformDocActions(action);
	return TRUE;
}

NUMERIC TemplateDlg::OnOkGroup()
{
	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedItems ) )		
		{ return Warning( Translate(~Select one and try again~) ); }

	fHtmlView( Get,TemplateListID, 0, value, TemplateName);
	fHtmlView( Get,DeviceTypeListID, 0, value, DeviceType);

	if (IsNull(~<TemplateName>~) && SimilarStr(~<DeviceType>~,NexPress))
	{
		MessageBox( ~Please select a template.~);
		ForgetGlobal(Obj);
		return FALSE;
	}

	fHtmlView( Get,QuantityID, 0, value, Quantity);
	Banner = ~~;
	Ink = ~~;
	Bleed = 0.0;
	DontOverrideTemplateBleed = 0;
	DontRenderBleed = 0;

	if (SimilarStr(~<DeviceType>~,Animoto))
	{
		GetUsersAnimotoValues();// save into AnimotoBookRec
	}
	if (SimilarStr(~<DeviceType>~,NexPress))
	{
		fHtmlView( Get,BannerTextID, 0, value, Banner);
		fHtmlView( Get,BleedId, 0, value, Bleed);
		Bleed = Numeric(~<Bleed>~);
		isChecked = 0;
		fHtmlView( Get, ~DontOverrideTemplateBleedID~,0, checked, isChecked );
		if (SimilarStr(~<isChecked>~,~True~))
		{
			DontOverrideTemplateBleed = 1;
		}
		isChecked = 0;
		fHtmlView( Get, ~DontRenderBleedID~,0, checked, isChecked );
		if (SimilarStr(~<isChecked>~,~True~))
		{
			DontRenderBleed = 1;
		}
		GetCurrentInk(Ink);
		if (SimilarStr(~<$Tr.OrderItemTranslation(EnterNewInk)>~,~<Ink>~))
		{
			Ink = ~~;
		}

		fHtmlView( Get, ~DimOvercoatCheckbox~, 0, checked, dimCoat );
					
		//make sure ink and body_gloss_front and body_gloss_back are valid together in DFE interface
		ReturnOnFailure(AuditCoats());
			
	}

	count = SelectedItems( ChildCount );

	if ( <count> < 1)
	{
		return TRUE;
	}
	alreadyGrouped = 0;//uniq

	result = SelectedItems(GetFirst,Item);
	OrderID = ~<$con.Item[OrderID]>~;

	firstSequence = -1;

	while ( <result> )
	{
		gr = ~<$con.Item[GroupID]>~;
		if (<gr>)
		{
			++alreadyGrouped;
		}
		else if (<firstSequence> == -1)
		{
			firstSequence = ~<$con.Item[Sequence]>~;
			firstSubsequence = ~<$con.Item[Subsequence].numeric>~;
		}
		result = SelectedItems( GetNext,Item );
	}

	if (<alreadyGrouped> > 0)
	{
		MessageBox( ~<alreadyGrouped> order items are already in another book.  Please remove them from the book first. ~);
		ForgetGlobal(Obj);
		return FALSE;
	}

	// end uniq
	if ( !Ado( dbase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		Warning( Translate( ~TemplateDlg:OnOKGroup Connection Failed. <theErr>~) );
		ForgetGlobal(Obj);
		return FALSE;
	}
	// more uniq
	
	// at least one is not in a group
	newSequence = <firstSequence>;
	newSubsequence = <firstSubsequence>;
	// update the order items having a subsequence number equal to the first order item and subsequence greater than or equal to the item dropped onto
	SQLCommand = ~Update OrderItems Set Subsequence = Subsequence + <count> Where OrderID = '<OrderID>' AND Sequence = <newSequence> AND Subsequence >= <newSubsequence>~;
	if (!dBase(Cmd, ~<SQLCommand>~))
	{
		dBase(GetErrorDescription, theErr);
		Warning( ~Unable to update the subsequence number for items having an subsequence number >= <subsequence> and sequence = <newSequence>.  <theErr>~ );
		ForgetGlobal(Obj);
		return FALSE;
	}
	

	GroupID = UniqueGroupID(dbase,~<OrderID>~);
	getItem = SelectedItems( GetFirst,Item );
	subsequence = ~<newSubsequence>~;

	// update the in memory data
	View(CreateBook, SelectedItems,<GroupID>,<newSequence>,<subsequence>);

	while (<getItem>)
	{

		// update the database
		Key = STR ( OrderID = '<$con.Item[OrderID]>' AND ID = <$con.Item[ID]> );
		SQLCmd = ~Update OrderItems Set GroupID = <GroupID>, Sequence = <newSequence>, Subsequence = <subsequence>  Where <Key>~;

		if (!dBase(Cmd, ~<SQLCmd>~))
		{
			dBase(GetErrorDescription, theErr);
			Warning( ~Unable to update the GroupID, Sequence and Subsequence for item having OrderID = '<$con.Item[OrderID]>' AND ID = <$con.Item[ID]>.  <theErr>~ );
			ForgetGlobal(Obj);
			return FALSE;
		}

//			MaintainOrderItemImages( dBase,~<OrderID>~,~<$con.Item[ID]>~,~<$con.Item[JobPath]>~ );
		++subsequence;
		getItem = SelectedItems( GetNext,Item );
	}

	// Add a new record to the Books Table 
	if (!fBook.UpdateBooksTable( ~<OrderID>~,<GroupID>,~<TemplateName>~,<Quantity>,~<Banner>~,~<Ink>~,~<Bleed>~,~<DeviceType>~,~~,<DontOverrideTemplateBleed>,<DontRenderBleed>))
	{
		ForgetGlobal(Obj);
		return FALSE;
	}
	if (SimilarStr(~<DeviceType>~,NexPress) || SimilarStr(~<DeviceType>~,~C8000/Creo~))
	{
		UpdateAttributesTable(~<OrderID>~, <GroupID>, ~<dimCoat>~);
		UpdateInksTable(dbase,~<Ink>~);
	}
	else if (SimilarStr(~<DeviceType>~,Animoto))
	{
		UpdateAnimotoAttributes(~<OrderID>~, <GroupID>);
	}
	SetUserSettings(Books,DeviceType,~<DeviceType>~,1);
	ForceClose();
	OnWindowClose();
	View(SetAllowGroupIconSpacing,1);
	View(FreeCachedImageCorrections);
	View( RefreshView );
	ForgetGlobal(Obj);

	return TRUE;
}


NUMERIC EditTemplateDlg::OnOKGroup()
{
	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedItems ) )		
		{ return Warning( Translate(~Select one and try again~) ); }

	fHtmlView( Get,TemplateListID, 0, value, TemplateName);
	fHtmlView( Get,DeviceTypeListID, 0, value, DeviceType);
	if (IsNull(~<TemplateName>~) && SimilarStr(~<DeviceType>~,NexPress))
	{
		MessageBox( ~Please select a template.~);
		ForgetGlobal(Obj);
		return FALSE;
	}

	fHtmlView( Get,QuantityID, 0, value, Quantity);
	Banner = ~~;
	Ink = ~~;
	Bleed = 0.0;
	DontOverrideTemplateBleed = 0;
	DontRenderBleed = 0;
	if (SimilarStr(~<DeviceType>~,Animoto))
	{
		GetUsersAnimotoValues();// save into AnimotoBookRec
	}
	if ( SimilarStr(~<DeviceType>~,NexPress))
	{
		fHtmlView( Get,BannerTextID, 0, value, Banner);
		fHtmlView( Get,BleedId, 0, value, Bleed);
		Bleed = Numeric(~<Bleed>~);
		isChecked = 0;
		fHtmlView( Get, ~DontOverrideTemplateBleedID~,0, checked, isChecked );
		if (SimilarStr(~<isChecked>~,~True~))
		{
			DontOverrideTemplateBleed = 1;
		}
		isChecked = 0;
		fHtmlView( Get, ~DontRenderBleedID~,0, checked, isChecked );
		if (SimilarStr(~<isChecked>~,~True~))
		{
			DontRenderBleed = 1;
		}
		GetCurrentInk(Ink);
		if (SimilarStr(~<$Tr.OrderItemTranslation(EnterNewInk)>~,~<Ink>~))
		{
			Ink = ~~;
		}
				
		fHtmlView( Get, ~DimOvercoatCheckbox~, 0, checked, dimCoat );

		//make sure ink and body_gloss_front and body_gloss_back are valid together in DFE interface
		ReturnOnFailure(AuditCoats());
 		
	}

	count = SelectedItems( ChildCount );

	if ( <count> < 1)
	{
		ForgetGlobal(Obj);
		return TRUE;
	}

	if ( !Ado( dbase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		Warning( Translate( ~TemplateDlg:OnOKGroup Connection Failed. <theErr>~) );
		ForgetGlobal(Obj);
		return FALSE;

	}

	
	GroupID = fBook.GetGroupID();
	OrderID = fBook.GetOrderID();
	MovieID = fBook.GetMovieID();
	
	// Update record in the Books Table 
	if (!fBook.UpdateBooksTable( ~<OrderID>~,<GroupID>,~<TemplateName>~,<Quantity>,~<Banner>~,~<Ink>~,~<Bleed>~,~<DeviceType>~,~~,~<DontOverrideTemplateBleed>~,~<DontRenderBleed>~,~<MovieID>~))
	{
		ForgetGlobal(Obj);
		return FALSE;
	}
	if (SimilarStr(~<DeviceType>~,NexPress) || SimilarStr(~<DeviceType>~,~C8000/Creo~))
	{
		UpdateAttributesTable(~<OrderID>~, <GroupID>, ~<dimCoat>~);
		UpdateInksTable(dbase,~<Ink>~);
	}
	else if (SimilarStr(~<DeviceType>~,Animoto))
	{
		UpdateAnimotoAttributes(~<OrderID>~, <GroupID>);
	}
	SetUserSettings(Books,DeviceType,~<DeviceType>~,1);
	ForceClose();
	OnWindowClose();
	View(SetAllowGroupIconSpacing,1);
	View(FreeCachedImageCorrections);
	View( RefreshView );
	ForgetGlobal(Obj);

	return TRUE;
}

NUMERIC NumberOfBooks(&SelectedItems)
{
	count = SelectedItems( ChildCount );
	numBooks = 0;
	result = SelectedItems(GetFirst,Item);
	lastGroupID = 0;

	while ( <result> )
	{
		gr = ~<$con.Item[GroupID]>~;
		gr = Numeric(~<gr>~);
		if (<gr> && <lastGroupID> != <gr>)
		{
			lastGroupID = <gr>;
			++numBooks;
		}
		result = SelectedItems( GetNext,Item );
	}
	return <numBooks>;
}

NUMERIC OrderItemsInBook(&SelectedItems)
{
	count = SelectedItems( ChildCount );

	alreadyGrouped = 0;

	result = SelectedItems(GetFirst,Item);
	OrderID = ~<$con.Item[OrderID]>~;

	firstSequence = -1;

	while ( <result> )
	{
		gr = ~<$con.Item[GroupID]>~;
		if (<gr>)
		{
			++alreadyGrouped;
		}
		else if (<firstSequence> == -1)
		{
			firstSequence = ~<$con.Item[Sequence]>~;
			firstSubsequence = ~<$con.Item[Subsequence].numeric>~;
		}
		result = SelectedItems( GetNext,Item );
	}
	return <alreadyGrouped>;
}

// for testing only
NUMERIC TemplateDlg::AddFakeTemplates()
{
	if ( !Ado( dbase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~TemplateDlg:AddFakeTemplates Connection Failed. <theErr>~) );
	}
	MaxSequence = 80;

	s = <MaxSequence> + 10;
	Fields = STR ( Category,TemplateName,Description,Sequence );
	Values = STR ( 'Test4','TestA<s>','TestA<s>',<s> );

	Cmd = STR ( Insert Into Templates(<Fields>) Values(<Values>) );
	if ( !dbase( CMD,~<Cmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		WaitCursor( End );
		return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
	}
	return TRUE;
}

NUMERIC TemplateDlg::UpdateInksTable(&dbase,Ink)
{
	if (IsNull(~<Ink>~))
	{
		return TRUE;
	}
	Fields = STR ( Inkname,DeviceType,Enabled );
	Values = STR ( '<Ink>','NexPress',1 );

	Cmd = STR ( Insert Into Inks(<Fields>) Values(<Values>) );

	Query = ~Select Count(*) From Inks Where Inkname = '<Ink>' AND DeviceType = 'NexPress'~;
	numRecs = dBase( RecordCountFor,~<Query>~ );
	if (<numRecs> > 0)
	{
		return TRUE;
	}
	if ( !dbase( CMD,~<Cmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		WaitCursor( End );
		return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
	}
	return TRUE;
}

// for NexPress or C8000/Creo
NUMERIC TemplateDlg::UpdateAttributesTable( OrderID, GroupID, dimCoat)
{
	Sequence = -1;
	GroupID = Numeric(~<GroupID>~);
	if (<fNumOverrides> > 0)
	{
		c = 0;
		fBook.ForgetMaster();
		// Update the books attributes table
		while (<c> < <fNumOverrides>)
		{
			// fAttribute<c> is the attribute
			Attribute = ~<fAttribute<c>>~;
			++c;
			fHtmlView( Get,AttrInput<c>,0,value,val);
			fHtmlView( Get,OverrideCheckBox<c>,0,checked,isChecked);
			if (SimilarStr(~<isChecked>~,~True~))
			{
				fBook.AddAttribute(~<Attribute>~,~<val>~);
			}
		}

		//always add hotoffset if ink is dimensional	
		fHtmlView( Get,InkListID,0,value,InkName);
		if ( SimilarStr(~<InkName>~,~NexPress DryInk raised clear~) || SimilarStr(~<InkName>~,~NexPress DryInk dimensional clear~) )
		{			
			fHtmlView( Get,~hotOffsetListID~,0,value,hotOffset);  
			fBook.AddAttribute(~NXP:HotOffsetCompensation~,~<hotOffset>~);
		}
		
		if ( SimilarStr(~<dimCoat>~,~True~) )
		{
			fBook.AddAttribute(~DimOvercoatCheckbox~,~True~);

			fHtmlView( Get,~ApplyCoatListID~,0, value, applyCoat);
			fBook.AddAttribute(~NXP:DMCLThresholdApplication~,~<applyCoat>~);

			fHtmlView( Get,~CoatDensityListID~,0, value, coatDensity);
			coatDensity = Numeric(~<coatDensity>~);	
			fBook.AddAttribute(~NXP:DMCLProcessColorantThreshold~,~<coatDensity>~);	
		}
		
		fBook.UpdateAttributesTable(~<OrderID>~,<GroupID>);
	}
	return TRUE;
}

// Update the Attributes inside of fBook and updates the database
NUMERIC TemplateDlg::UpdateAnimotoAttributes(OrderID,GroupID)
{
	fBook.ForgetMaster();
	index = 0;
	while (AnimotoBookRec(Attribute,<index>,AttrName))
	{
		AnimotoBookRec(GetValue,~<AttrName>~,AttrValue);
		if (!IsNull(~<AttrValue>~))
		{
			fBook.AddAttribute(~<AttrName>~,~<AttrValue>~);
		}
		++index;
	}
	fBook.UpdateAttributesTable(~<OrderID>~,<GroupID>);
	return TRUE;
}


// ProductID is the package ID
// look up the attributes in the book product attributes table and transfer them to the books attributes table
NUMERIC UpdateBookAttributesTable(PackageID, OrderID, GroupID)
{
	BookProduct( New,bookProd );
	bookProd.SetProductID(~<PackageID>~);
	PGenConList( List,Create );
	bookProd.GetAttributes(List);

	Book( New,aBook );
	aBook.SetAttributes(~<OrderID>~, ~<GroupID>~,List);

	return TRUE;
}




VOID TemplateDlg::OnCancelOBS()
{
	if ( OkayToCancel() )
	{
		ForceClose();
		OnWindowClose();
	}
	ForgetGlobal(Obj);

}
NUMERIC TemplateDlg::SetBookData()
{
	// display book information
	fHtmlView( Set,BannerTextID, 0, value, fBook.GetBanner());
	fHtmlView( Set,NewInkID, 0, value, fBook.GetInkName());
	fHtmlView( Set,BleedId, 0, value, fBook.GetBleed());
	fHtmlView( Set,DontOverrideTemplateBleedID, 0, checked, fBook.GetDontORTemplateBleed() ? ~1~ : ~~);
	fHtmlView( Set,DontRenderBleedID, 0, checked, fBook.GetDontRenderBleed() ? ~1~ : ~~);

	return 1;
}

NUMERIC TemplateDlg::GetBookRec()
{
	return 1;
}
NUMERIC EditTemplateDlg::GetBookRec()
{
	if ( !( OrderItemsWindow(GetActiveViewOfWindow, View) ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedItems ) )		
		{ return Warning( Translate(~There are no selected order items~) ); }

	result = 0;
	while (SelectedItems(GetNext,Item))
	{
		OrderID = ~<$con.Item[OrderID]>~;
		GroupID = ~<$con.Item[GroupID]>~;
		if (!IsNull(~<OrderID>~) && <GroupID>)
		{
			if (fBook.GetBookRecord(~<OrderID>~,~<GroupID>~))
			{
				result = 1;
				break;
			}
		}
	}
	return <result>;
}

NUMERIC TemplateDlg::GetBookQuantity()
{
	Quantity = fBook.GetQuantity();
	fHtmlView( SetValue, ~QuantityID~,0, ~<Quantity>~);
	return 1;
}

NUMERIC TemplateDlg::GetNumberOfPrintingTemplates()
{
	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~TemplateDlg::GetNumberOfPrintingTemplates Database Connection Failed. <theErr>~) );
	}
	Cmd = ~Select Count(*) From Templates Where Category IS NOT NULL And Category <> ''~;
	numRecs = dBase( RecordCountFor,~<Cmd>~ );
	return <numRecs>;

}

NUMERIC TemplateDlg::AddOverrides()
{
	// get the number of overrides from the database
	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~TemplateDlg::AddOverrides Database Connection Failed. <theErr>~) );
	}

	Cmd = ~Select Count(*) From TemplateOverrides Where PrinterType = 'NexPress'~;
	fNumOverrides = dBase( RecordCountFor,~<Cmd>~ );
	fNumOverrides = <fNumOverrides> - 2; //added 2 different overrides for DFE interface, but they replace 2 in NJP interface

	Cmd = ~Select * From TemplateOverrides Where PrinterType = 'NexPress' Order by Sequence~;  // Displays as Device Type
	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Cmd>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Log(Session, ~Unable to query database. Query: <Cmd>; <theErr>~ );
		return FALSE;
	}
	
//	fHtmlView(SetInnerHtml,AttributeBlockID, 0, ~~);

	// for Nexpress, the Category name is the Devicename
	//fHtmlView( Get,CategoryListID, 0, value, Category);
	c = 1;
			
	while ( List( GetNext, Override ) )
	{
		Override(GetValue,OverrideType,Substrate);
		Override(GetValue,DisplayName,DisplayName);
		
		if ( ((<fNJPenabled> == 0) && (SimilarStr(~<Substrate>~,schedule_mode) || SimilarStr(~<Substrate>~,target_device))) ||
		     ((<fNJPenabled> == 1) && (SimilarStr(~<Substrate>~,body_gloss_back) || SimilarStr(~<Substrate>~,body_gloss_front))) )
		{ //don't show these cases
		}
		else
		{
			if (IsNull(~<DisplayName>~))
			{
				DisplayName = ~<Substrate>~;
			}
			i = <c> - 1;
			fAttribute<i> = ~<Substrate>~;
			Private(fAttribute<i>);
			if (<c> == 1)
			{
				where = afterBegin;
			}
			else
			{
				where = beforeEnd;
			}
			fHtmlView( InsertHTML, AttributeBlockID, 0, ~<where>~,~
				<input type=checkbox id="OverrideCheckBox<c>" style="vertical-align:top;height:22px" onclick="KPL( 'Obj.OnOverrideCheckBox(<c>)')"> </input>  	
				<label style= "font:  10pt" for="AttrInput<c>"> <DisplayName></label>
				<br />
				~ );
			Query =  ~Select * From TemplateOverridesSetup Where OverrideType = '<Substrate>' Order By Sequence~;
	//		Query =  ~Select * From TemplateOverridesSetup Where OverrideType = '<Substrate>' And DeviceName = '<Category>' Order By Sequence~;
			if ( !PGenConList( SubstratesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
			{ 
				SubstratesList( GetErrorDescription,0,theErr );
				Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
				return TRUE;
			}

			SelectString = ~~;
			fHtmlView( InsertHTML, AttributeBlockID2, 0, ~<where>~,~
				<select id="AttrInput<c>" style="visibility:hidden;width:272">
				</select>  <br>
				~ ); 
			while ( SubstratesList( GetNext, Subs ) )
			{
				Subs(GetValue,OverrideName,SubstrName1);
				Subs(GetValue,OverrideType,SubstrType1);
				Subs(GetValue,Enabled,Enabl);
				Subs(GetValue,Sequence,Seqq1);

				if (Numeric(~<Enabl>~))
				{
					SelectString = ~<option value="<SubstrName1>"><SubstrName1></option>~;
				}
			
				fHtmlView( Execute,~AddListOption( AttrInput<c>,'<SubstrName1>','<SubstrName1>')~);
			}
			if ( SimilarStr(~<Substrate>~,body_gloss_back) || SimilarStr(~<Substrate>~,body_gloss_front) )
			{
				Query =  ~Select * From Textures Order By Sequence~;
				if ( !PGenConList( TexturesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
				{ 
					TexturesList( GetErrorDescription,0,theErr );
					Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
					return TRUE;
				}

				while ( TexturesList( GetNext, Textures ) )
				{
					Textures(GetValue,TextureName,SubstrName1);
					Textures(GetValue,Enabled,Enabl);
					if ( !SimilarStr(~<SubstrName1>~,~No Texture~))
					{
						if (Numeric(~<Enabl>~))
						{
							SelectString = ~<option value="<SubstrName1>"><SubstrName1></option>~;
						}
					
						fHtmlView( Execute,~AddListOption( AttrInput<c>,'<SubstrName1>','<SubstrName1>')~);
					}
				}
			}
			++c;
		}
	}

	return TRUE;
}

VOID TemplateDlg::CheckBoxOverrides()
{
}

VOID TemplateDlg::CheckAdvancedBox(&List)
{	
	if (List(GetFirst,Item))
	{	
		// set the advanced check box
		fHtmlView( Set, ~AdvancedCheckBox~,0, checked, 1 );	
	}
	else
	{
		fHtmlView( Set, ~AdvancedCheckBox~,0, checked, ~~ );
	}

}


VOID TemplateDlg::CheckOverrideBox(&List)
{
	count = 0;
	result = List(GetFirst,Item);
	while (<result>)
	{
		Attr = ~<$pcon.Item[Attribute]>~;
		Value = ~<$pcon.Item[Value]>~;

		i = 0;
		while (<i> < <fNumOverrides>)
		{
			c = <i> + 1;
			if (SimilarStr(~<fAttribute<i>>~,~<Attr>~))
			{
				fHtmlView( Set, OverrideCheckBox<c>, 0, checked, 1 );
				display = visible;
				fHtmlView( SetStyle,~AttrInput<c>~,0,~visibility~,~<display>~);  // makes visible the select list
			}
			++i;
		}
		result = List(GetNext,Item);
	}
}

VOID TemplateDlg::DontORTemplateBleed()
{
	isChecked = 0;
	fHtmlView( Get, ~DontOverrideTemplateBleedID~,0, checked, isChecked );

}

VOID TemplateDlg::DontRenderBleed()
{
	isChecked = 0;
	fHtmlView( Get, ~DontRenderBleedID~,0, checked, isChecked );
}

VOID TemplateDlg::OnAdvancedCheckBox()
{
	isChecked = 0;
	fHtmlView( Get, ~AdvancedCheckBox~,0, checked, isChecked );
	fHtmlView( Get, ~DeviceTypeListID~,0, value, DeviceType );
	if (SimilarStr(~<isChecked>~,~True~))
	{
		if (SimilarStr(~<DeviceType>~,~NexPress~))
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~block~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~block~);
			display = visible;
			SetSize(~<WindowWidth>~,~<WindowHeight>~);
			OnSelectInk();
		}
		else if (SimilarStr(~<DeviceType>~,~C8000/Creo~))
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~none~);
			display = visible;
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~none~);
		}
		else if (SimilarStr(~<DeviceType>~,~Animoto~))
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~none~);
			display = hidden;
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~none~);
		}
		else
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~none~);
			display = hidden;
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~none~);
		}
	}
	else
	{
		if (SimilarStr(~<DeviceType>~,~NexPress~))
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~block~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~block~);
			display = hidden;
			OnSelectInk();
		}
		else if (SimilarStr(~<DeviceType>~,~C8000/Creo~))
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~none~);
			display = hidden;
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~none~);
		}
		else if (SimilarStr(~<DeviceType>~,~Animoto~))
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~none~);
			display = hidden;
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~none~);
		}
		else
		{
			fHtmlView( SetStyle,~SubstratesDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~OverridesID~,0,~display~,~none~);
			display = hidden;
			fHtmlView( SetStyle,~DimOvercoatID~,0,~display~,~none~);
		}
	}
	fHtmlView( SetStyle,~AttributeBlockID~,0,~visibility~,~<display>~);
	fHtmlView( SetStyle,~AttributeBlockID2~,0,~visibility~,~<display>~);
	ShowSubstrates();
}

VOID TemplateDlg::OnDimOvercoatCheckBox()
{
	GetCurrentInk(Ink);
	isChecked = 0;
	fHtmlView( Get, ~DimOvercoatCheckbox~,0, checked, isChecked );
	fHtmlView( Get, ~DeviceTypeListID~,0, value, DeviceType );
	if (SimilarStr(~<isChecked>~,~True~))
	{
		if (SimilarStr(~<DeviceType>~,~NexPress~) &&  ( SimilarStr(~<Ink>~,~NexPress DryInk raised clear~) || SimilarStr(~<Ink>~,~NexPress DryInk dimensional clear~) ))
		{
			fHtmlView( SetStyle,~ApplyCoatDivID~,0,~display~,~block~);
			fHtmlView( SetStyle,~CoatDensityDivID~,0,~display~,~block~);
		}
		else
		{
			fHtmlView( SetStyle,~ApplyCoatDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~CoatDensityDivID~,0,~display~,~none~);
		}
	}
	else
	{
		if (SimilarStr(~<DeviceType>~,~NexPress~))
		{
			fHtmlView( SetStyle,~ApplyCoatDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~CoatDensityDivID~,0,~display~,~none~);
		}
		else
		{
			fHtmlView( SetStyle,~ApplyCoatDivID~,0,~display~,~none~);
			fHtmlView( SetStyle,~CoatDensityDivID~,0,~display~,~none~);
		}
	}
}

VOID TemplateDlg::UpdateDimCoat(&List)
{
	i=0;
	while ( <i> < 256 )
	{
		value = ~<i>~;
		++i;
		fHtmlView( Execute,~AddListOption( CoatDensityListID,'<value>','<value>')~);
	}			
	fHtmlView( Execute,~SelectByValue( CoatDensityListID,'125')~);
	
	fHtmlView( Execute,~AddListOption( ApplyCoatListID,'greater than','greater than')~);
	fHtmlView( Execute,~AddListOption( ApplyCoatListID,'less than','less than')~);
	fHtmlView( Execute,~SelectByValue( ApplyCoatListID,'0')~);
	
	fHtmlView( Execute,~AddListOption( hotOffsetListID,'none','none')~);			
	fHtmlView( Execute,~AddListOption( hotOffsetListID,'low','low')~);			
	fHtmlView( Execute,~AddListOption( hotOffsetListID,'medium','medium')~);			
	fHtmlView( Execute,~AddListOption( hotOffsetListID,'high','high')~);			
	fHtmlView( Execute,~SelectByValue( hotOffsetListID,'0')~);

	fHtmlView( Get,InkListID, 0, value, Ink);
	if ( SimilarStr(~<Ink>~,~NexPress DryInk raised clear~) || SimilarStr(~<Ink>~,~NexPress DryInk dimensional clear~) )
	{ 
		fHtmlView( SetStyle,~HotOffsetDivID~,0,~display~,~block~);
	}

	//now set values if in book attributes
	fHtmlView( Set,~DimOvercoatCheckbox~,0,~checked~,~~);  //set unchecked unless in book attributes table			
	result = List(GetFirst,Item);
	while (<result>)
	{
		Attr = ~<$pcon.Item[Attribute]>~;
		Value = ~<$pcon.Item[Value]>~;
		if (SimilarStr(~DimOvercoatCheckbox~,~<Attr>~))
		{
			if ( SimilarStr(~<Value>~,~True~) )
			{
				fHtmlView( Set,~DimOvercoatCheckbox~,0,~checked~,1);  
			}
			else
			{
					fHtmlView( Set,~DimOvercoatCheckbox~,0,~checked~,~~);  		
			}					
			fHtmlView(SetStyle,DimOverrideDivID,0,display,block);	
			fHtmlView( SetStyle,~HotOffsetDivID~,0,~display~,~block~);
			fHtmlView( SetStyle,~ApplyCoatDivID~,0,~display~,~block~);
			fHtmlView( SetStyle,~CoatDensityDivID~,0,~display~,~block~);
			break;
		}
		result = List(GetNext,Item);
	}

	result = List(GetFirst,Item);
	while (<result>)
	{
		Attr = ~<$pcon.Item[Attribute]>~;
		Value = ~<$pcon.Item[Value]>~;
		if (SimilarStr(~NXP:HotOffsetCompensation~,~<Attr>~))
		{
			fHtmlView( Set,~hotOffsetListID~,0,~value~,~<Value>~);  // makes visible the select list
		}
		else if (SimilarStr(~NXP:DMCLThresholdApplication~,~<Attr>~))
		{
			fHtmlView( Set,~ApplyCoatListID~,0,~value~,~<Value>~);  // makes visible the select list
		}
		else if (SimilarStr(~NXP:DMCLProcessColorantThreshold~,~<Attr>~))
		{
			fHtmlView( Set,~CoatDensityListID~,0,~value~,~<Value>~);  // makes visible the select list
		}		
		result = List(GetNext,Item);
	}
}
	
VOID TemplateDlg::OnOverrideCheckBox(whichBox)
{
	isChecked = 0;
	fHtmlView( Get, ~OverrideCheckBox<whichBox>~,0, checked, isChecked );
	if (SimilarStr(~<isChecked>~,~True~))
	{
		display = visible;
	}
	else
	{
		display = hidden;
	}
	fHtmlView( SetStyle,~AttrInput<whichBox>~,0,~visibility~,~<display>~);
	ShowSubstrateN(<whichBox>);
	
}

// shows or hides the substrate pop up box.  This was necessary because the
// visibility style cannot be nested - form items such as select items
// are unaffected by setting the style visibility of the parent div
VOID TemplateDlg::ShowSubstrateN(whichBox)
{
	visibleState = ~~;

	if ( <whichBox> <= <fNumOverrides>)
	{
		fHtmlView(GetStyle,AttributeBlockID,0,visibility,0,blockVisibleState);

		fHtmlView( Get, OverrideCheckBox<whichBox>, 0, checked, isChecked );
		if (SimilarStr(~<isChecked>~,~True~) && SimilarStr(~<blockVisibleState>~,visible )  )
		{
			visibility = visible;
		}
		else
		{
			visibility = hidden;
		}

		fHtmlView( SetStyle,~AttrInput<whichBox>~,0,~visibility~,~<visibility>~);
	}
}

VOID TemplateDlg::SelectSubstr(&List)
{
	count = 0;
	result = List(GetFirst,Item);
	while (<result>)
	{
		Attr = ~<$pcon.Item[Attribute]>~;
		Value = ~<$pcon.Item[Value]>~;
		i = 0;
		while (<i> < <fNumOverrides>)
		{
			c = <i> + 1;
			if (SimilarStr(~<fAttribute<i>>~,~<Attr>~))
			{
				fHtmlView( Set,~AttrInput<c>~,0,~value~,~<Value>~);  // makes visible the select list
				break;
			}
			++i;
		}
		result = List(GetNext,Item);
	}
}
// shows or hides the substrate pop up box.  This was necessary because the
// visibility style cannot be nested - form items such as select items
// are unaffected by setting the style visibility of the parent div
VOID TemplateDlg::ShowSubstrates()
{
	whichBox = 1;
	visibleState = ~~;

	fHtmlView(GetStyle,AttributeBlockID,0,visibility,0,blockVisibleState);
	while ( <whichBox> <= <fNumOverrides>)
	{
		fHtmlView( Get, OverrideCheckBox<whichBox>, 0, checked, isChecked );
		if (SimilarStr(~<isChecked>~,~True~) && SimilarStr(~<blockVisibleState>~,visible )  )
		{
			visibility = visible;
		}
		else
		{
			visibility = hidden;
		}

		fHtmlView( SetStyle,~AttrInput<whichBox>~,0,~visibility~,~<visibility>~);
		++whichBox;
	}
}



VOID TemplateDlg::UpdateCategoryList(DeviceType)
{
	Query = ~Select Distinct Category From Templates Where DeviceType = '<DeviceType>' Order By Category~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	//faster alternative to fHtmlView(Execute,~ResetList(CategoryListID)~ );
	fHtmlView(SetSelectOptionsLength,CategoryListID,0,0);

	fHtmlView( CreateOptionsFromGenConList, ~CategoryListID~, 0, List,Category);
	i = List(NumEntries);
		
	fHtmlView( SetStyle,~TemplateBlockID~,0,~display~, <i> ? ~block~ :~none~);
	fHtmlView( SetStyle,~MessageID~,0,~display~, <i> ? ~block~ :~none~);
	
}



NUMERIC OrderImageQuery( OrderID,AsImages,Query )
{
	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTION Doc ( ~<OrderID>~ <OpenMethod> ImagesDoc "Init( ~<OrderID>~,<AsImages>,~<Query>~,0 );" );
	return PerformActions( Actions );
}


NUMERIC OrderQuery( List )
{
	Query = STR ( SELECT * FROM Orders WHERE ID In (<List>) ORDER BY ID ) ;
	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTION Doc ( ~Orders~ <OpenMethod> OrdersDoc "Init( ~<List>~,~<Query>~ );" );
	return PerformActions( Actions );
}


NUMERIC SeeOrdersForItems( AsImages )
{
	if ( !OrderItemsDataView( GetSelectedRows,SelectedOrderItems ) )		
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	InList = ~~;

	while ( SelectedOrderItems( GetNext,OrderItem ) )
	{
		InList = ~<InList>~ == ~~ ? ~'<$con.OrderItem[OrderID]>'~ : ~<InList>,'<$con.OrderItem[OrderID]>'~;

		if ( ++count >= 20 )		// BUILD UP A LIST OF UP TO 20 Order ID'S
		{
			OrderQuery( ~<InList>~ );
			InList = ~~;		
		}
	}

	if ( ~<InList>~ != ~~ )
		{  OrderQuery( ~<InList>~ ); }

	return TRUE;
}


NUMERIC AddAnotherOriginalOrder()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	View( Get,Text,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( ~OrderID was NULL~ ); }

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTION Doc ( ~Orders~ <OpenMethod> OrdersDoc "AddOriginalOrderLike( ~<OrderID>~ );" );
	return PerformActions( Actions );
}


NUMERIC AddAnotherReOrder()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	View( Get,Text,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( ~OrderID was NULL~ ); }

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTION Doc ( ~Orders~ <OpenMethod> OrdersDoc "AddReOrderLike( ~<OrderID>~ );" );
	return PerformActions( Actions );
}



NUMERIC ViewOrderInfo()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	View( Get,Text,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( ~OrderID was NULL~ ); }

	Query = ~SELECT * FROM Orders WHERE ID = '<OrderID>' ORDER BY ID~ ;

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTION Doc ( ~Orders~ <OpenMethod> OrdersDoc "Init( ~<OrderID>~,~<Query>~ );" );
	return PerformActions( Actions );
}


NUMERIC SeeServices()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( Get,Text,Order );

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~ProcessOrders:Database Connection Failed. <theErr>~) );
	}

	Cmd = ~Select Count(*) From OrderItemsServices Where OrderID = '<Order>' AND ( Code IS NULL OR Code = '' )~;
	numRecs = dBase( RecordCountFor,~<Cmd>~ );

	if (<numRecs> == 0)
	{
		Query = STR ( Select OrderItemsServices.OrderID,OrderItemsServices.OrderItemID,OrderItemsServices.ProductID,OrderItemsServices.Code,PrintServices.Label,OrderItemsServices.ServicesID From OrderItemsServices Left Outer Join PrintServices ON (PrintServices.Code = OrderItemsServices.Code) Where OrderID = '<Order>'  Order By OrderItemsServices.OrderItemID );
	}
	else
	{
		Query = STR ( Select OrderItemsServices.*,PrintServices.Label,PrintServices.Code From OrderItemsServices Left Outer Join PrintServices ON (PrintServices.ID = OrderItemsServices.ServicesID) Where OrderID = '<Order>'  Order By OrderItemsServices.OrderItemID,OrderItemsServices.ServicesID );
	}
	
//	Query = STR ( Select OrderItemsServices.*,PrintServices.Label,PrintServices.Code From OrderItemsServices Left Outer Join PrintServices ON (PrintServices.ID = OrderItemsServices.ServicesID) Where OrderID = '<Order>'  Order By OrderItemsServices.OrderItemID,OrderItemsServices.ServicesID );

	Actions = ACTION DOC ( OrderItemsServicesDoc OpenOnce OrderItemsServicesDoc "Init( ~<Order>~,~<Query>~);" );
	return PerformActions( Actions );
}


NUMERIC SeeImagesForOrders( AsImages )
{
	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	List = ~~;

	More = OrderItemsWindow( GetFirst,View );

	while ( $More )
	{
		View( Get,Text,OrderID );

		List = (~<List>~ == ~~) ?  ~'<OrderID>'~ : ~<List>,'<OrderID>'~;

		ImagesOrderID = ~~;

		if ( dBase( GetValuesFor,~Select ImagesOrderID From Orders Where ID = '<OrderID>'~,ImagesOrderID ) )
		{
			if ( !IsNull( ~<ImagesOrderID>~ ) )
			{
				List = (~<List>~ == ~~) ?  ~'<ImagesOrderID>'~ : ~<List>,'<ImagesOrderID>'~;
			}
		}

		More = OrderItemsWindow( GetNext,View );
	}

	if ( ~<List>~ == ~~ )
		{ return FALSE; }

	Query = ~SELECT * FROM Images WHERE OrderID In (<List>) Order By OrderID,Roll,Frame~ ;

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTION Doc ( ~OrderImages~ <OpenMethod> ImagesDoc "Init( ~<List>~,<AsImages>,~<Query>~,0 );" );
	return PerformActions( Actions );
}



NUMERIC ManageImagesForOrders( AsImages )
{
	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	List = ~~;

	More = OrderItemsWindow( GetFirst,View );

	while ( $More )
	{
		View( Get,Text,OrderID );

		List = (~<List>~ == ~~) ?  ~'<OrderID>'~ : ~<List>,'<OrderID>'~;

		ImagesOrderID = ~~;

		if ( dBase( GetValuesFor,~Select ImagesOrderID From Orders Where ID = '<OrderID>'~,ImagesOrderID ) )
		{
			if ( !IsNull( ~<ImagesOrderID>~ ) )
			{
				List = (~<List>~ == ~~) ?  ~'<ImagesOrderID>'~ : ~<List>,'<ImagesOrderID>'~;
			}
		}

		More = OrderItemsWindow( GetNext,View );
	}

	if ( ~<List>~ == ~~ )
		{ return FALSE; }
	
	action = ACTION DOC ( GreenScreenDoc Open "<$App.HTMLPages>\GreenScreen\GreenScreenDoc.txt" "InitWithOrders(~<List>~);" );
	return PerformActions( action );
}


NUMERIC OpenContainingFolder()
{
	if ( !( GenCon(View,GETACTIVEVIEW ) && GenCon(Window,GETACTIVEWINDOW) ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedItems ) )		
		{ return Warning( Translate(~Select one and try again~) ); }

	if ( SelectedItems( GetFirst,Item ) )
	{
		return OpenContainingFolderAndSelect( ~<$con.Item[JobPath]>~ );  
	}

	return Warning( Translate( ~Select one and try again~ ) );
}



NUMERIC RunOrderItems()
{
	ForgetGlobal( SelectedOrderItemsToRun );

	if ( !( GenCon(View,GETACTIVEVIEW ) && GenCon(Window,GETACTIVEWINDOW) ) )
		{ return Warning( ~There was no active view of OrdersItems~ ); }

	if ( !View( GetSelected,SelectedOrderItemsToRun ) )		
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = SelectedOrderItemsToRun( ChildCount );

	if ( <Count> == 0 )  // Run all order items
	{ 
		return RunOrder();
		return Warning( Translate( ~There were no Orders Items selected.  Ctrl-A will select them all~ ) );
	}

	View( GetName,OrderID );

	Global( SelectedOrderItemsToRun );

	if ( IsNull( ~<OrderID>~ ) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}		

	InitRunPropertiesDialog( ~Run the <Count> selected OrderItems~,FALSE,~<OrderID>~ );

	return TRUE;
}


NUMERIC RunOrder()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView)); }

	View( GetName,OrderID );
	
	if ( IsNull( ~<OrderID>~ ) )
	{
		return Warning( Translate( OrderItemsMessages,NoOrderID ) );
	}		

	InitRunPropertiesDialog( ~Print all OrderItems for order <OrderID>~,TRUE,~<OrderID>~ );

	return TRUE;
}


NUMERIC RunOrderNow( OrderID,RemakesOnly )
{
	if ( !Ado( dbLocal,ConnectLocal,BeginTransaction ) )
	{
		dbLocal( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	WaitCursor( Begin );

	Owner = ~~;  Priority = 50;
	ADO( dBase,Connect,GetValuesFor,~Select Owner,Priority From Orders Where ID = '<OrderID>'~,Owner,Priority );

	if ( IsNull(~<Priority>~) ) { Priority = 50; }
	
	BatchID = UniquePrintBatchID();

	if ( IsNull(~<Owner>~) )	
		{ Owner = ~<$App.UserName>~; }

	QueueName = ~~;  PrinterName = ~~; PrintStatus = -1;

	GetUserOverrides( PrintStatus,Priority,QueueName,PrinterName );

	Now = Time();

	Fields = STR ( BatchID,OrderID,OrderItemID,Sequence,Priority,Owner,SubmitDate,QueueName,PrinterName,PrintStatus,RemakesOnly );
	Values = STR ( '<BatchID>','<OrderID>',0,0,<Priority>,'<Owner>','<Now>','<QueueName>','<PrinterName>',<PrintStatus>,<RemakesOnly> );

	Cmd = STR ( Insert Into OrderItemsToQueue(<Fields>) Values(<Values>) );

	if ( !dbLocal( CMD,~<Cmd>~ ) )
	{
		dbLocal( GetErrorDescription,theErr,RollBackTransaction );
		WaitCursor( End );
		return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
	}

	dbLocal( CommitTransaction );

	Queue( ~ProcessTheOrders()~ );

	WaitCursor( End );

	msg = ~Order Items for Order <OrderID> will be submitted for printing in Batch <BatchID>. Status=<PrintStatus>,Priority=<Priority>,QueueName=<QueueName>,PrinterName=<PrinterName>,RemakesOnly=<RemakesOnly>~;
	log( Session,~<msg>~ );

	count = ADO( database,Connect,RecordCountFor,~Select ID From OrderItems Where OrderID = '<OrderID>'~ );
	
	UpdateUserCounts( ItemsRun,<Count>);
	
	database( LogActivity,Msg,~<$App.ComputerName> ran <count> Orders Items for Order <OrderID>~,Type,Info );

	database( Cmd,~Update Orders Set Status = 'Print' Where ID = '<OrderID>'~ );

	return OrderItemsDataWindow( StatusBar,Text,~<msg>~ );
}

NUMERIC UpdateUserCounts( Which,Amount )
{
	PreviousValue = 0;

	GetWorkStationSettings( ~Counts~,~<Which>~,PreviousValue,Enabled );

	NewAmount = <PreviousValue> + <Amount>;

	return SetWorkStationSettings( ~Counts~,~<Which>~,<NewAmount>,TRUE );
}

NUMERIC RunOrderItemsNow( OrderID,RemakesOnly )
{

	if ( !Defined( SelectedOrderItemsToRun ) )
	{
		return Warning( ~No OrderItems were selected~ ) ;
	}

	WaitCursor( Begin );

	itemCount = 0;

	if ( !Ado( dbLocal,ConnectLocal,BeginTransaction ) )
	{ 
		ForgetGlobal( SelectedOrderItemsToRun );
		dbLocal( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) ); 
	}

	BatchID = UniquePrintBatchID();

	Priority = 50;  Owner = ~~;
	ADO( dBase,Connect,GetValuesFor,~Select Owner,Priority From Orders Where ID = '<OrderID>'~,Owner,Priority );

	if ( IsNull(~<Owner>~) )	
	{ 
		Owner = ~<$App.UserName>~;
	}

	if ( IsNull(~<Priority>~) )	
	{ 
		Priority = 50;
	}

	QueueName = ~~;  PrinterName = ~~; PrintStatus = -1;

	GetUserOverrides( PrintStatus,Priority,QueueName,PrinterName );

	Now = Time();

	total = SelectedOrderItemsToRun( ChildCount );

	while ( SelectedOrderItemsToRun( GetNext,OrderItem ) )
	{
		OrderItemsSequence = ~<$con.OrderItem[Sequence]>~;
		OrderItemsSubSequence = ~<$con.OrderItem[SubSequence].numeric>~;
		Fields = STR ( BatchID,OrderID,OrderItemID,Sequence,Priority,Owner,ProductID,Quantity,Status,Printable,
						JobPath,PreviewPath,SubmitDate,QueueName,PrinterName,PrintStatus,RemakesOnly,Subsequence );
		Values = STR ( '<BatchID>','<$con.OrderItem[OrderID]>',<$con.OrderItem[ID]>,<OrderItemsSequence>,
						<Priority>,'<Owner>','<$con.OrderItem[ProductID]>',
						<$con.OrderItem[Quantity]>,'<$con.OrderItem[Status]>',<$con.OrderItem[Printable].numeric>,
						'<$con.OrderItem[JobPath]>','<$con.OrderItem[PreviewPath]>','<Now>',
						'<QueueName>','<PrinterName>',<PrintStatus>,<RemakesOnly>,<OrderItemsSubSequence> );
	
		Cmd = ~Insert Into OrderItemsToQueue(<Fields>) Values(<Values>)~;

		if ( !dbLocal( Cmd,~<Cmd>~ ) )
		{
			dbLocal( GetErrorDescription,theErr,RollBackTransaction );
			Warning( ~Failed to submit jobs for item <$con.OrderItem[ID]>. <theErr>~ );
			ForgetGlobal( SelectedOrderItemsToRun );
			return FALSE;
		}

		if ( (<++itemCount> % 50) == 0 )
		{
			StatusBarText( Translate( ~<itemCount> of <total>) Processing Order <$con.OrderItem[OrderID]> Item <$con.OrderItem[ID]>~ ));
			MessagePump();
		}

		//Log( Session,~<itemCount>: Submitting Batch <BatchID>, Order <$con.OrderItem[OrderID]>, Item <$con.OrderItem[ID]>. Status=<PrintStatus>,Priority=<Priority>,QueueName=<QueueName>,PrinterName=<PrinterName>,RemakesOnly=<RemakesOnly> ~ );
		
		TheOrderID = ~<$con.OrderItem[OrderID]>~;
	}

	ForgetGlobal( SelectedOrderItemsToRun );

	if ( !dbLocal( CommitTransaction ) )
	{ 
		dbLocal( GetErrorDescription,theErr );
		return Warning( Translate(~Error on commit transaction.  <theErr>~) ); 
	}

	msg = ~<itemCount> selected Order Items will be submitted for printing in Batch <BatchID>~;

	log( Session,~<msg>~ );

	StatusBarText( ~<itemCount> Order Items were submitted in Batch <BatchID>~ );

	UpdateUserCounts( ItemsRun,<itemCount>);

	ADO( database,Connect,LogActivity,Msg,~<$App.ComputerName> ran <itemCount> OrderItems from Order <TheOrderID>~,Type,Info );

	Queue( ~ProcessTheOrders()~ );
	
	MessagePump();

	return WaitCursor( End );
}


VOID GetUserOverrides( &PrintStatus,&Priority,&QueueName,&PrinterName )
{
	dlg( GetInput );

	if ( RunPropertiesData( GetNumeric,AlterStatus ) )
	{
		RunPropertiesData(Get,Status,Status);

		PrintStatus = ~<Status>~ == Translate(~Ready~) ? ~1~ : ~0~;
	}

	if ( RunPropertiesData( GetNumeric,AlterPriority ) )
	{
		Priority = RunPropertiesData(GetNumeric,Priority);
	}

	if ( RunPropertiesData( GetNumeric,AlterQueue ) )
	{
		RunPropertiesData(Get,QueueName,QueueName);

		if ( IsNull(~<QueueName>~ ) )
		{
			RunPropertiesData(Get,MyQueueName,MyQueueName);

			if ( !IsNull(~<MyQueueName>~ ) )
			{
				QueueName = ~<MyQueueName>~;
			}
		}
	}
	else
	{
		RunPropertiesData(Get,MyQueueName,MyQueueName);

		if ( !IsNull(~<MyQueueName>~ ) )
		{
			QueueName = ~<MyQueueName>~;
		}
	} 

	if ( RunPropertiesData( GetNumeric,AlterPrinter ) )
	{
		RunPropertiesData(Get,PrinterName,PrinterName);

		if ( IsNull(~<PrinterName>~ ) )
		{
			RunPropertiesData(Get,MyPrinterName,MyPrinterName);

			if ( !IsNull(~<MyPrinterName>~ ) )
			{
				PrinterName = ~<MyPrinterName>~;
			}
		}
	}
	else
	{
		RunPropertiesData(Get,MyPrinterName,MyPrinterName);

		if ( !IsNull(~<MyPrinterName>~ ) )
		{
			PrinterName = ~<MyPrinterName>~;
		}
	} 
}


VOID ProcessTheOrders()
{
	if ( Defined( BackgroundOrderProcessor ) )
	{
		RemoteJobServer( BackgroundOrderProcessor,ProcessOrders,TRUE );
	}
}



NUMERIC ChangeRecord()
{
	if ( !OrderItemsDataView( GetChangedRow,ChangedOrderItem,OrigOrderItem,ChangedRow,IsNewRow ) )
		{ return Warning( ~There was no changed row.~ ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$con.ChangedOrderItem[ID]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  ID cannot be blank.~ ) ); }

	if ( ~<$con.ChangedOrderItem[OrderID]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Order ID cannot be blank.~ ) ); }

	Key = STR ( OrderID = '<$con.OrigOrderItem[OrderID]>' AND ID = <$con.OrigOrderItem[ID]> );;

	Query = ~Select * From OrderItems Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( UpdateFrom,ChangedOrderItem,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( ~Could not update Order Item record where <Key>. <theErr>~ );
	}
	
	OrderItemsDataView( CommitChanges );

	return TRUE;
}



NUMERIC DeleteRecord()
{
	if ( !OrderItemsDataView( GetSelected,OrderItemsToDelete ) )		
		{ return Warning( ~There were no rows selected to delete~ ); }

	count = OrderItemsToDelete( ChildCount );

	if ( !<count> )
		{	return Warning( Translate( ~There were no rows selected to delete~ ) ); }

	if ( MessageBox( ~Are you sure you want to delete the <count> selected Order Items?~,YESNO ) != YES )
		{ return FALSE; }

	StringList( RowsToDelete,New );

	if ( !ADO( dBase,Connect,BeginTransaction ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}
	
	while ( OrderItemsToDelete( GetNext,OrderItem ) )
	{
		BroadcastMessageToAllViews( ReleaseImage,~<$con.OrderItem[PreviewPath]>~ );
		Files( ChMod,~<$con.OrderItem[PreviewPath]>~,ReadWrite );
		Files( ChMod,~<$con.OrderItem[JobPath]>~,ReadWrite );

		Files( Delete,~<$con.OrderItem[PreviewPath]>~ );
		Directory( Remove,~<$con.OrderItem[PreviewPath].path>~ );
		Files( Delete,~<$con.OrderItem[JobPath]>~ );
		Directory( Remove,~<$con.OrderItem[JobPath].path>~ );

		Key = ~ItemOrderID = '<$con.OrderItem[OrderID]>' AND ItemID = <$con.OrderItem[ID]>~;

		Cmd = ~Delete From OrderItemImages Where <Key>~;

		if ( !dbase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr,CommitTransaction );
			return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
		}

		Key = ~OrderID = '<$con.OrderItem[OrderID]>' AND ID = <$con.OrderItem[ID]>~;

		Cmd = ~Delete From OrderItems Where <Key>~;

		if ( !dbase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr,CommitTransaction );
			return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
		}

		RowsToDelete( AddString,OrderItemsToDelete(GetCurrentPosition) );
	}

	dBase( CommitTransaction );

	OrderItemsDataView( DeleteRows,SelectedIndex,RowsToDelete );
	
	return TRUE;
}


NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );
	
	RowBeingAdded = OrderItemsDataView( AddRow,NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( ~You are too low on memory to add any more rows~ ); }

	OrderItemsDataView( SetActiveCell,<RowBeingAdded>,~ID~ );

	return TRUE;
}


NUMERIC UpdateComboBoxes()
{
	OrderItemsDataView( GetActiveCell,row,col );

	GenCon( Fields,Is,OrderItemsFieldTypes(GetReferenceTo,Fields) );

	OrderItemsDataView( GetColumnName,<col>,ColumnName );

	Fields( GetByName,<ColumnName>,ColumnDefinition );

	if ( ~<ColumnName>~ == ~PRODUCTID~ )
	{
		Query = STR ( Select ID From Products Order By ID );

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr,ClearErrors );
			return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~));
		}

		if ( List( NumEntries ) > 0 )
		{
			List( MakeStringList,Products,ID );

			ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,Products(GetCopyOf) );

			OrderItemsDataView( SetComboBox,ColumnDefinition,<Col> );
		}
	}
	else if ( SimilarStr(~<ColumnName>~,~ProdType~ ) )
	{
		UpdateProdTypeCombo( ColumnDefinition,<row>,<col>);
	}
	

	return TRUE;
}


NUMERIC UpdateProdTypeCombo( &ColumnDefinition,Row,Col )
{
	Query = STR ( Select BackgroundType From BackgroundTypes Order By BackgroundType );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr,ClearErrors );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,ProdTypes,BackgroundType );

		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,ProdTypes(GetCopyOf) );

		OrderItemsDataView( SetComboBox,ColumnDefinition,<Col> );
	}

	return TRUE;
}


NUMERIC RightClickInListView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	ActiveView( DisplayMenu,OrderItemsListViewMenu );

	return TRUE;
}


NUMERIC RightClickInImageView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	ActiveView( DisplayMenu,OrderItemsImageViewMenu );

	return TRUE;
}


NUMERIC NotImplementedYet( what )
{
	MessageBox( ~<what> is not implemented yet!~ );
	return TRUE;
}


VOID GetListViewWindowPosition()
{
	WindowLocation = ~<$UserSettings.WindowLocation[OrderItemsList]>~;

	if ( ~<WindowLocation>~ != ~~ )
		{ OrderItemsDataWindow( Set,Position,~<WindowLocation>~ ); }
}


VOID GetThumbNailViewWindowPosition()
{
	WindowLocation = ~<$UserSettings.WindowLocation[OrderItems]>~;

	if ( ~<WindowLocation>~ != ~~ )
		{ OrderItemsWindow( Set,Position,~<WindowLocation>~ ); }
}


VOID UseManageImagesWindowPosition()
{
	ScreenWidth = App( thisApp,MainWindow,GetClientWidth );
	ScreenHeight = thisApp( MainWindow,GetClientHeight );
	
	LeftPosition = 511;
	
	width = <ScreenWidth> - <LeftPosition> - 7 ;
	height = <ScreenHeight> * .68;
	
	OrderItemsWindow( SetWindowPosition,<LeftPosition>,0 );
	OrderItemsWindow( SetWindowSize,<width>,<height> );
}


NUMERIC Export()
{
	return Warning( ~Not Implemented Yet~ );

	OrderItemsList( GetString,Buffer );

	if ( FileDialog( Save,DefaultExt,~.txt~,Path,Path) )
	{
		if ( ~<Path>~ != ~~ )
		{
			return List( Save,~<Path>~,XML );
		}
	}
}


NUMERIC MaintainCrossReference(AutoStart)
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( GetName,OrderID );

	if ( DefinedAndNotNull(OrderID) )
	{

		Actions = ACTION Doc ( ~MaintainOrdersDoc~ Open MaintainOrdersDoc "Init( ~<OrderID>~,<AutoStart>,TRUE,FALSE );" );
		PerformActions( Actions );
	}

	return TRUE;
}


NUMERIC EditOrderItemsData()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( Get,Text,Order );

	if ( !View( GetSelected,SelectedOrderItems ) )
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = SelectedOrderItems(ChildCount);

	if ( <Count> )	// JUST SHOW THE SELECTED ORDERITEMS?
	{
		if ( <Count> > 20 )
			{ return Warning( Translate(OrderItemsMessages,TooManySelected,20) ); }

		if ( !SelectedOrderItems( MakeSQLList,List,FALSE,ID ) )
			{ return Warning( ~Error creating list of Order Items~ ); }

		Query = STR ( Select * From OrderItems Where OrderID = '<Order>' AND ID In (<List>) Order By OrderID,Sequence,SubSequence,ID );
	}
	else			// SHOW ALL ORDERITEMS FOR THIS ORDER
	{
		Query = STR ( Select * From OrderItems Where OrderID = '<Order>' Order By OrderID,Sequence,SubSequence,ID );
	}

	Actions = ACTION Doc ( ~OrderItemsDataDoc~ OpenOnce OrderItemsDataDoc "Init( ~<Order>~,~<Query>~,FALSE );" );
	return PerformActions( Actions );
}


VOID ViewOrderItemsData()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( Get,Text,Order );

	Query = STR ( Select * From OrderItems Where OrderID = '<Order>' Order By OrderID,ID );

	Actions = ACTION Doc ( ~OrderItemsDataDoc~ Open OrderItemsDataDoc "Init( ~<Order>~,~<Query>~,FALSE);" );
	PerformActions( Actions );
}


NUMERIC OnCloseOrderItemsDataView()
{
	CloseRunDialog(FALSE);

	if ( OrderItemsDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	return OrderItemsDataWindow( ForceCloseWindow );
}


NUMERIC SaveAllChanges()
{
	while ( OrderItemsDataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !OrderItemsDataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new order items that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( OrderItemsDataView( PendingChanges ) )
	{
		OrderItemsDataView( RollBackChanges );
	}

	return TRUE;
}

NUMERIC ThumbnailKeydownHook(&Key,&KeyString,&View)	{ return FALSE; }	// Override. return TRUE if the key was handled FALSE if it was not.


NUMERIC OnKeyDown()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	if ( !View( IsThumbNailView ) )
		{ return FALSE; }
		
	key = View( GetLastKeyStateless,KeyString );
	KeyString = Upper( ~<KeyString>~ );
	
	if ( ThumbnailKeydownHook(key,KeyString,View) )	{ return TRUE; }

	if ( <key> > 32 && <key> <= 40 )			// Arrow keys,Home,End,PageUp&Dn
		{ return TRUE ; }

	if ( <key> == 0x74 )	// F5
		{ return RefreshThumbNailView(TRUE); }

	if ( <key> == 0x2E )	// Delete
		{ return DeleteSelectedOrderItems(); }

	if ( ~<KeyString>~ == ~Q~ )	
		{ return ShowQuantityMenu(); }

	if ( ~<KeyString>~ == ~E~ )	
		{ return EditOrderItemsData(); }

	if ( ~<KeyString>~ == ~O~ )	
		{ return OpenJobForSelectedOrderItem(); }

	if ( ~<KeyString>~ == ~C~ )	
		{ return CloseJobForSelectedOrderItem(); }

	if ( ~<KeyString>~ == ~R~ )	
		{ return RunOrderItems(); }

	if ( ~<KeyString>~ == ~K~ )	
		{ return SetRemakeForOrderItem(); }
		
	if ( ~<KeyString>~ == ~L~ )	
		{ return ToggleSpotlit(); }

	if ( ~<KeyString>~ == ~Y~ )	
		{ return OnOrderSummary(); }

	if ( KeyState( CONTROL ) )
	{
		if (  View( PerformMenuAction,OrderItemsImageViewMenu,~<KeyString>~ ) )
		{
			return TRUE;
		}
	}

	return View( DisplayMenu,OrderItemsImageViewMenu,2,2 );
}


NUMERIC CreateQuantityListMenu( Start,End )
{
	Define:	QuantityListMenu Using DDMenuDef AsSymbol QuantityListMenu	// created once
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			while ( $Start <= $End )
			{
				Define:	Quantity<Start> using	DDMenuItemDef
					Fields:	Text		~Quantity &<Start>~
							IDText		~ID~
							ActionsText  ACTION Exec ( SetQuantity(~<Start>~); ) ;
				++Start;
			}

			Define:	Edit using	DDMenuItemDef
				Fields:	Text		~&Quantity from numeric pad~
						IDText		~ID~
						ActionsText  ACTION Exec ( OnNumPad() ) ;
		}

	return Global( QuantityListMenu );
}


NUMERIC OnNumPad()
{
	if ( !GenCon( OrderItemCategory,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }			

	OrderItemCategory( GetLastMousePosition,mouseX,mouseY,ClientToScreen );

	OrderItemsWindow( EnableWindow,FALSE );

	DefineNumPadDialog(~Quantity~,~<mouseX>~,~<mouseY>~,SetQuantityFromNumPad,NumPadCancel);

	return TRUE;
}

// not used 3/1/07
NUMERIC OrderItemsForCustomer( Customer,AsImages )
{
	
	DocumentQuery = STR ( Select OrderItems.*, Products.LayoutName From OrderItems  LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID In (Select ID From Orders Where CustomerID = '<Customer>' ) Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence );
	OrderQuery = ~Select ID From Orders Where CustomerID = 'Lab'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<OrderQuery>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Error( Translate(DBMessages,QueryFailed,~<OrderQuery>~,~<theErr>~) ); 
	}

	if ( List( NumEntries ) > 20 )
		{ return Warning( Translate(OrderItemsMessages,TooManySelected,20) ); }

	if ( !List( MakeSQLList,WhichOrders,TRUE,ID ) )
	{	
		Warning( Translate( ~There are no <Customer> orders~ ) );
		Exit();
	}

	if ( ~<WhichOrders>~ == ~~ )
	{	
		Warning( Translate( ~There are no <Customer> orders~ ) );
		Exit();
	}

	return Init( ~<WhichOrders>~,~<DocumentQuery>~,<AsImages> );
}


Include: ~ExportSelectedToFile~;

Include: ~FileBrowseButtonsInGridView~;


NUMERIC AddOrderItemThumbnailsFromQuery( Query )
{
	if ( !OrderItemsWindow(GetWindowAddress) )
		{ return FALSE; }

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	ReturnOnFailure( List( NumEntries ) );

	return OrderItemsWindow( AddToThumbNailViews,OrderItemsView,OrderItemsThumbNailImage,List,OrderID,Item );
}

NUMERIC  RefreshTheWindow( RefreshGrouping )
{
	if ( DefinedAndTrue( RefreshGrouping ) )
	{
		if ( Ado( dBase,Connect ) )
		{
			more = OrderItemsWindow( GetFirst,View );
			while ( $more )
			{
				View( Get,Text,OrderID );		
				SetGroupSpacing(dbase,View,~<OrderID>~);

				more = OrderItemsWindow( GetNext,View );
			}
		}
	}

	DocumentQuery = ~~;
	return OrderItemsWindow( RefreshWindow );
}

// 


// Which - Order or OrderList for which the Window  is displayed
// Query - Full query of OrderItems to display
// ViewAsImages - True to display as images, False to display Data
NUMERIC Init( Which,Query,ViewAsImages )
{
	return Init2(~<Which>~,~~,~<Query>~,<ViewAsImages>);
}

// Which - Order or OrderList for which the Window  is displayed
// in the format such as ~'19551','912615','548688','54939'~ 
// Title - Additional Clarification besides Order to put in window title
// Query - Full query of OrderItems to display
// ViewAsImages - True (1) to display as images, False (0) to display Data
NUMERIC Init2( Which,Title,Query,ViewAsImages )
{
	if ( ~<ViewAsImages>~ == ~~ )
	{
		ViewAsImages = 0;
	}

	if ( !Defined( ViewIsImages ) )	// FIRST TIME WE ARE OPENING?
	{
		ViewIsImages = ~<ViewAsImages>~;
		WhichOrders = ~<Which>~;
		DocumentQuery = ~<Query>~;
		WhichTitle = ~<WhichOrders> <Title>~;

		Global( WhichOrders,WhichTitle,DocumentQuery,ViewIsImages );

		if ( <ViewIsImages> )
		{
			ViewOrderItemsAsImages( ~<WhichOrders>~ );
		}
		else
		{
			GetListViewWindowPosition();

			StatusBarText( ~Querying OrderItems~ );

			WaitCursor( Begin );

			Start = Ticks();

			if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
			{ 
				WaitCursor( End );
				List( GetErrorDescription,0,theErr );
				Error( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) ); 
			}

			Count = List( NumEntries );
			//SetDocumentData( List(GetObject), TRUE );
			SetDocumentData( List(GetObject) );

			OrderItemsDataWindow( Set,Title,~<WhichTitle>~ == ~~ ? ~Order Items Data ~ : ~Order Items Data  - <WhichTitle>~ );

			StatusBarText( ~Reading <Count> OrderItems~ );

			if ( !OrderItemsDataWindow( CreateWindow,~Order Items Data - <WhichTitle>~ ) )
			{ 
				WaitCursor( End );
				Error( ~Failed to create the window~ );
			}

			WaitCursor( End );

			Duration = (Ticks() - <Start>) / 1000;

			StatusBarText( Translate(OrderItemsMessages,ReadRecords,<Count>,<Duration>) );
		}
	}
	else if ( <ViewAsImages> != <ViewIsImages> )	// need a separate instance?
	{
		action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init(~<Which>~,~<Query>~,<ViewAsImages>);" );
		return PerformActions( action );
	}
	else
	{
		WhichOrders = ~<Which>~;
		DocumentQuery = ~<Query>~;
		WhichTitle = ~<WhichOrders> <Title>~;
		RefreshDoc();
	}

	return TRUE;
}


Define: RunPropertiesData Using DDRunPropertiesDialog;

RunInstructions = ~Press Run to queue the selected OrderItems for normal printing. To change the
way the items are queued select one or more of the following options:~;


VOID DefineRunPropertiesDialog( Title )
{
	OrderStatus = ~Unknown~;

	RunPropertiesData( Get,OrderID,OrderID );

	ADO( dBase,Connect,GetValuesFor,~Select Status From Orders Where ID = '<OrderID>'~,OrderStatus );

    Left = 5; Top = 5;		hGap = 5; vGap = 5;
	StaticTextWidth = 150;	StaticTextHeight = 20;
	ComboBoxWidth = 100;
    ListBoxWidth = 150;		
	ButtonWidth = 90;		ButtonHeight = 20;

	RightHalf = 200;

	if ( !Defined(RunOrderItemsDefinition) )
	{
		Define: RunOrderItemsDefinition Using DDWinDef AsSymbol RunOrderItemsDefinition
            Fields: Position		180 300 600 600
                    Title			~<Title>~
                    TypeName		~Dialog~
					IsHidden		TRUE
					STATUSBAR		~1 100~
					HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "RunSelected.htm" )
                    OACTIONSTEXT	ACTION EXEC ( CloseRunDialog(TRUE) ) ;

    Contains: InListOrder
    {
		Define: Instructions Using DDWinCtrlDef AsSymbol Instructions 
			Fields: TypeName		StaticText
					Text			~<RunInstructions>~
					FontWeight		200
					Position		$Left,$Top,400,$StaticTextHeight * 2

		Define: OrderStatusMsg Using DDWinCtrlDef AsSymbol OrderStatusMsg 
			Fields: TypeName		StaticText
					Text			~Order Status is <OrderStatus>~
					FontWeight		600
					Position		$Left,Instructions(GetBottom,Position)+$vGap,200,$StaticTextHeight

		Define: OnOrderSummaryButton Using DDWinCtrlDef AsSymbol OnOrderSummaryButton 
			Fields: TypeName		DefaultButton
					Text			~Summary~
					DActionsText	ACTION EXEC ( OnOrderSummary() )
					POSITION		OrderStatusMsg(GetRight,Position) + $hGap*3 OrderStatusMsg(GetTop,Position),$ButtonWidth,$ButtonHeight

		Define: RemakeOnlyBox Using DDWinCtrlDef AsSymbol RemakeOnlyBox 
			Fields: TypeName		CheckBox
					Text			~Remakes Only~
					FontWeight		600
					GenConName       THIS
					GenConField		~RemakesOnly~
					DActionsText	ACTIONS ( Save "Exec(ToggleStatus())" )
					Position		$Left,OrderStatusMsg(GetBottom,Position)+$vGap*2,$StaticTextWidth,$StaticTextHeight

		Define: StatusPrompt Using DDWinCtrlDef AsSymbol StatusPrompt 
			Fields: TypeName		CheckBox
					Text			~Change Status~
					FontWeight		600
					GenConName       THIS
					GenConField		~AlterStatus~
					DActionsText	ACTIONS ( Save "Exec(ToggleStatus())" )
					Position		$Left,RemakeOnlyBox(GetBottom,Position)+$vGap,$StaticTextWidth,$StaticTextHeight

		Define: StatusComboBox Using DDWinCtrlDef AsSymbol StatusComboBox 
			Fields: TypeName		ComboBox  
					Position		$RightHalf,StatusPrompt(GetTop,Position),$ComboBoxWidth,$StaticTextHeight*5
					IActionsText	ACTIONS ( GetList(PrinterStatusList) Get )
					OActionsText	ACTIONS ( Save )
					GenConName       THIS
					GenConField		~Status~
					IsHidden		T
					IsTabStop		T
					Tooltip         ~Select a status for the jobs as they are placed in queue~;

		Define: PriorityPrompt Using DDWinCtrlDef AsSymbol PriorityPrompt 
			Fields: TypeName		CheckBox
					Text			~Change Priority~
					FontWeight		600
					GenConName       THIS
					DActionsText	ACTIONS ( Save "Exec(TogglePriority())" )
					GenConField		~AlterPriority~
					Position		StatusPrompt(GetLeft,Position),StatusPrompt(GetBottom,Position)+$vgap,$StaticTextWidth,$StaticTextHeight

		Define: PriorityField Using DDWinCtrlDef AsSymbol PriorityField 
			Fields: TypeName		MaskedEditText  
					Position		$RightHalf,PriorityPrompt(GetTop,Position),$ComboBoxWidth,$StaticTextHeight 
					IActionsText	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					GenConName       THIS
					GenConField		~Priority~
					Mask			~###~
					PromptChar		~ ~
					IsHidden		T
					Tooltip         ~Select a priority between 1 and 100~;

		Define: ModelPrompt Using DDWinCtrlDef AsSymbol ModelPrompt 
			Fields: TypeName		StaticText
					Text			~Model~
					IsHidden		T
					RightJustified	TRUE
					FONTWEIGHT		600
					Position		$RightHalf-$StaticTextWidth-$hgap,PriorityPrompt(GetBottom,Position)+$vgap,$StaticTextWidth,$StaticTextHeight

		Define: ModelComboBox Using DDWinCtrlDef AsSymbol ModelComboBox 
			Fields: TypeName		ComboBox  
					Position		ModelPrompt(GetRight,Position) + $hGap,ModelPrompt(GetTop,Position)-2,$ComboBoxWidth,$StaticTextHeight*13
//					IActionsText	ACTIONS ( GetList(PrinterModelList) Get )
					IActionsText	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(OnModelChange())" )
					OActionsText	ACTIONS ( Save )
					GenConName       THIS
					GenConField		~Model~
					IsHidden		T
					IsTabStop		T
					Tooltip         ~Select the printer model~;


		Define: QueuePrompt Using DDWinCtrlDef AsSymbol QueuePrompt 
			Fields: TypeName		Checkbox
					Text			~Change Queue~
					FontWeight		600
					GenConName       THIS
					GenConField		~AlterQueue~
					DActionsText	ACTIONS ( Save "Exec(ToggleQueue())" )
					Position		StatusPrompt(GetLeft,Position),ModelPrompt(GetBottom,Position)+$vgap,120,$StaticTextHeight


		Define: MyQueueText Using DDWinCtrlDef AsSymbol MyQueueText 
			Fields: TypeName		EditText
					ReadOnly		T
					GenConName      THIS
					GenConField		~MyQueueName~
					IActionsText	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					//IsHidden		RunningVersion(4.2) ? F : T
					ToolTip			~Default Queue for this workstation.  If not blank, it overrides the queue specified in the layout~
					POSITION		QueuePrompt(GetLeft,Position) QueuePrompt(GetBottom,Position) + $vGap,$StaticTextWidth,$StaticTextHeight

		Define: SetMyQueueButton Using DDWinCtrlDef AsSymbol SetMyQueueButton 
			Fields: TypeName		Button
					Text			~Set~
					FontWeight		600
					IsEnabled		F
					DActionsText	ACTION EXEC ( SetMyQueue(FALSE) )
					ToolTip			~Select a queue from the list below for this workstation~
					POSITION		MyQueueText(GetRight,Position)+$hgap MyQueueText(GetTop,Position),35,$StaticTextHeight

		Define: ClrMyQueueButton Using DDWinCtrlDef AsSymbol ClrMyQueueButton 
			Fields: TypeName		Button
					Text			~Clear~
					FontWeight		600
					IsEnabled		F
					DActionsText	ACTION EXEC ( SetMyQueue(TRUE) )
					ToolTip			~Use the queue defined for the OrderItem~
					POSITION		SetMyQueueButton(GetLeft,Position) SetMyQueueButton(GetBottom,Position)+3,35,$StaticTextHeight

		Define: QueueListBox Using DDWinCtrlDef AsSymbol QueueListBox
			Fields:	POSITION		QueuePrompt(GetLeft,Position) MyQueueText(GetBottom,Position)+$vGap,$ListBoxWidth,$StaticTextHeight*5
					GENCONNAME		THIS
					GENCONFIELD		~QueueName~
					DACTIONSTEXT	ACTIONS ( Save "Exec(OnQueueSelected();)"  )
					OACTIONSTEXT	ACTIONS ( Save )
					IsHidden		T
					TYPENAME		ListBox ;

		Define: PrinterPrompt Using DDWinCtrlDef AsSymbol PrinterPrompt 
			Fields: TypeName		Checkbox
					Text			~Choose a Specific Printer~
					FontWeight		600
					GenConName       THIS
					GenConField		~AlterPrinter~
					DActionsText	ACTIONS ( Save "Exec(TogglePrinter())" )
					POSITION		$RightHalf QueuePrompt(GetTop,Position),165,$StaticTextHeight

		Define: MyPrinterText Using DDWinCtrlDef AsSymbol MyPrinterText 
			Fields: TypeName		EditText
					ReadOnly		T
					GenConName      THIS
					GenConField		~MyPrinterName~
					IActionsText	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					ToolTip			~Default Printer for this workstation.  If not blank, it overrides the printer specified in the layout~
					POSITION		PrinterPrompt(GetLeft,Position) PrinterPrompt(GetBottom,Position)+$vGap,$StaticTextWidth,$StaticTextHeight

		Define: SetMyPrinterButton Using DDWinCtrlDef AsSymbol SetMyPrinterButton 
			Fields: TypeName		Button
					Text			~Set~
					FontWeight		600
					IsEnabled		F
					DActionsText	ACTION EXEC ( SetMyPrinter(FALSE) )
					ToolTip			~Select a printer for from the list below for this workstation to print to~
					POSITION		MyPrinterText(GetRight,Position)+$hGap MyPrinterText(GetTop,Position),35,$StaticTextHeight

		Define: ClrMyPrinterButton Using DDWinCtrlDef AsSymbol ClrMyPrinterButton 
			Fields: TypeName		Button
					Text			~Clear~
					FontWeight		600
					IsEnabled		F
					DActionsText	ACTION EXEC ( SetMyPrinter(TRUE) )
					ToolTip			~Use the printer defined for the OrderItem~
					POSITION		SetMyPrinterButton(GetLeft,Position) SetMyPrinterButton(GetBottom,Position)+3,35,$StaticTextHeight

		Define: PrinterListBox Using DDWinCtrlDef AsSymbol PrinterListBox
			Fields:	POSITION		PrinterPrompt(GetLeft,Position) MyPrinterText(GetBottom,Position)+$vGap,$ListBoxWidth,$StaticTextHeight*5
					GENCONNAME		THIS
					GENCONFIELD		~PrinterName~
					DACTIONSTEXT	ACTIONS ( Save "Exec(OnPrinterSelected();)"  )
					OACTIONSTEXT	ACTIONS ( Save )
					IsHidden		T
					TYPENAME		ListBox ;

		DialogWidth = SetMyPrinterButton(GetRight,Position) + $hGap ;


		Define: RunButton Using DDWinCtrlDef AsSymbol RunButton 
			Fields: TypeName		DefaultButton
					Text			~Run~
					DActionsText	ACTION EXEC ( OnRunButton() )
					POSITION		$DialogWidth/2 - $ButtonWidth - $hGap/2 PrinterListBox(GetBottom,Position)+$vGap,$ButtonWidth,$ButtonHeight

		Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton 
			Fields: TypeName		Button
					Text			~Cancel~
					DActionsText	ACTION EXEC ( OnCancelButton() )
					POSITION		RunButton(GetRight,Position)+$hGap RunButton(GetTop,Position),$ButtonWidth,$ButtonHeight
    };

		Global( RunOrderItemsDefinition );
	}

	DialogWidth = RunOrderItemsDefinition(GetMaxRight,Position) + $hGap * 2;
	DialogHeight = RunOrderItemsDefinition(GetMaxBottom,Position) + $vGap + 30;

	Cursor( GetPosition,x,y );

	x = $x - ($DialogWidth * .33);
	
	y = $y - ($DialogHeight * .75);

	PinOnScreen( 80,x,y,$DialogWidth,$DialogHeight+50 );

	RunOrderItemsDefinition( Set,Position,~<x> <y>  <DialogWidth>  <DialogHeight>~ );

	GenDlg( dlg,Definition,RunOrderItemsDefinition,Data,RunPropertiesData,Document,$Doc.This,New,Temporary );

    Global( dlg );

	dlg( Show,NORMALSTATE );
}


NUMERIC OnQueueSelected()
{
	dlg( SetStatus,0,Translate( ~Press Set to select the <$con.RunPropertiesData[QueueName]> queue~ ));
	return TRUE;
}


NUMERIC OnPrinterSelected()
{
	dlg( SetStatus,0,Translate( ~You Set to select <$con.RunPropertiesData[PrinterName]> printer~ ));
	return TRUE;
}


NUMERIC OkayToRunHoldOrders( OrderID )
{
	if ( IsNull( ~<OrderID>~ ) )
	{
		return TRUE;
	}

	if ( !ADO( dBase,Connect,GetValuesFor,~Select Status From Orders Where ID = '<OrderID>'~,OrderStatus ) )
	{
		return TRUE;
	}

	if ( !SimilarStr( ~<OrderStatus>~,~Hold~ ) )
	{
		return TRUE;
	}

	return MessageBox( Translate(OrderItemsMessages,RunOnHold),YESNO ) == YES;
}



NUMERIC OnRunButton()
{
	dlg( GetInput );

	dlg( EnableControls,FALSE,RunButton );

	if ( RunPropertiesData( GetNumeric,AlterPriority ) )
	{
		Priority = RunPropertiesData( GetNumeric,Priority );

		if ( <Priority> < 1 || <Priority> > 100 )
		{
			dlg( EnableControls,TRUE,RunButton );
			return Warning( Translate( ~Priority must be between 1 and 100.  Larger is higher.~ ) );
		}
	}

	if ( !OkayToRunHoldOrders(~<$con.RunPropertiesData[OrderID]>~) )
	{
		dlg( EnableControls,TRUE,RunButton );
		return TRUE;
	}


	if ( RunPropertiesData(GetNumeric,RunOrder) )
	{
		RunOrderNow( ~<$con.RunPropertiesData[OrderID]>~,~<$con.RunPropertiesData[RemakesOnly]>~ );
	}
	else
	{
		RunOrderItemsNow(~<$con.RunPropertiesData[OrderID]>~,~<$con.RunPropertiesData[RemakesOnly]>~);
	}

	CloseRunDialog(TRUE);

	return TRUE;
}



NUMERIC OnCancelButton()
{
	CloseRunDialog(TRUE);
	return TRUE;
}


NUMERIC ToggleStatus()
{
	return dlg( ShowControls,RunPropertiesData(GetNumeric,alterStatus),StatusComboBox );
}

NUMERIC TogglePriority()
{
	return dlg( ShowControls,RunPropertiesData(GetNumeric,alterPriority),PriorityField );
}

NUMERIC ToggleQueue()
{
	if ( RunPropertiesData(GetNumeric,alterQueue) )
	{
		UpdateQueueListBox();
	}

	WantOverride = RunPropertiesData(GetNumeric,alterQueue);

	dlg( EnableControls,<WantOverride>,SetMyQueueButton,ClrMyQueueButton );

	//dlg( EnableControls,!<WantOverride>,MyQueueText );


	ShowModelChoices();

	return dlg( ShowControls,RunPropertiesData(GetNumeric,alterQueue),QueueListBox );
}


NUMERIC TogglePrinter()
{
	dlg( GetInput );

	WantOverride = RunPropertiesData(GetNumeric,alterPrinter);

	dlg( EnableControls,<WantOverride>,SetMyPrinterButton,ClrMyPrinterButton );

	//dlg( EnableControls,!<WantOverride>,MyPrinterText );

	if ( <WantOverride> )
	{
		UpdatePrinterListBox();
	}

	ShowModelChoices();

	return dlg( ShowControls,RunPropertiesData(GetNumeric,alterPrinter),PrinterListBox );
}


NUMERIC ToggleMyPrinter()
{
	return TRUE;
}

NUMERIC SetMyPrinter( ClearMyPrinter )
{
	dlg( GetInput );

	RunPropertiesData(Get,PrinterName,PrinterName);

	dlg( SetStrings,MyPrinterName,<ClearMyPrinter> ? ~~ : ~<PrinterName>~ );

	SetWorkStationSettings( ~<$Job.Title>~,PrinterName,~<PrinterName>~,TRUE );

	return TRUE;
}


NUMERIC SetMyQueue( ClearMyQueue )
{
	dlg( GetInput );

	RunPropertiesData(Get,QueueName,QueueName);

	dlg( SetStrings,MyQueueName,<ClearMyQueue> ? ~~ : ~<QueueName>~ );

	SetWorkStationSettings( ~<$Job.Title>~,QueueName,~<QueueName>~,TRUE );

	return TRUE;
}


NUMERIC ShowModelChoices()
{
	Show = RunPropertiesData(GetNumeric,alterPrinter) || RunPropertiesData(GetNumeric,alterQueue);

	return dlg( ShowControls,<Show>,ModelPrompt,ModelComboBox );
}


NUMERIC UpdateModelBox()
{
	Query = ~Select Model From PrinterModels Order By Model~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	List( MakeStringList,ModelsList,Model );

	dlg( SetControlFromStringList,ModelComboBox,ModelsList );

	return TRUE;
}


VOID OnModelChange()
{
	UpdatePrinterListBox();
	UpdateQueueListBox();
}


NUMERIC UpdatePrinterListBox()
{
	dlg( GetInput );

	Model = ~<$con.RunPropertiesData[Model]>~;

	if ( IsNull( ~<Model>~ ) )
	{
		return FALSE;
	}

	if ( SimilarStr( ~<Model>~,~All~ ) )
	{
		Query = ~Select PrinterName From Printers Order By PrinterName~;
	}
	else
	{
		Query = ~Select PrinterName From Printers Where PrinterModel = '<Model>' Order By PrinterName~;
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	List( MakeStringList,PrintersList,PrinterName );

	return dlg( SetControlFromStringList,PrinterListBox,PrintersList );
}


NUMERIC UpdateQueueListBox()
{
	dlg( GetInput );

	Model = ~<$con.RunPropertiesData[Model]>~;

	if ( IsNull( ~<Model>~ ) )
	{
		return FALSE;
	}

	if ( SimilarStr( ~<Model>~,~All~ ) )
	{
		Query = ~Select QueueName From QueueDefinition Order By QueueName~;
	}
	else
	{
		Query = ~Select QueueName From QueueDefinition Where PrinterModel = '<Model>' Order By QueueName~;
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	List( MakeStringList,QueueList,QueueName );

	return dlg( SetControlFromStringList,QueueListBox,QueueList );
}


VOID CloseRunDialog( Reenable )
{
    if ( Defined( dlg ) )
	{
		RunPropertiesData(Get,MyPrinterName,MyPrinterName);

		SetWorkStationSettings( ~<$Job.Title>~,PrinterName,~<MyPrinterName>~,TRUE );

		RunPropertiesData(Get,MyQueueName,MyQueueName);

		SetWorkStationSettings( ~<$Job.Title>~,QueueName,~<MyQueueName>~,TRUE );

		RunPropertiesData(Get,Model,MyModelSelection);

		SetWorkStationSettings( ~<$Job.Title>~,Model,~<MyModelSelection>~,TRUE );

		if ( <Reenable> )
		{
			OrderItemsDataWindow( EnableWindow,TRUE );
			OrderItemsWindow( EnableWindow,TRUE );
		}

		ForgetGlobal( dlg );
	}

	ForgetGlobal( SelectedOrderItemsToRun );

	if ( !Defined( DocumentQuery ) )
	{
		Exit();
	}
}


NUMERIC InitRunPropertiesDialog( Title,RunningWholeOrder,OrderID )
{
	RunPropertiesData( SetValues,AlterStatus,0,AlterPriority,0,AlterQueue,0,AlterPrinter,0,RemakesOnly,0,
						RunOrder,~<RunningWholeOrder>~,OrderID,~<OrderID>~ );

	OrderItemsDataWindow( EnableWindow,FALSE );
	OrderItemsWindow( EnableWindow,FALSE );

	if ( !Defined( dlg ) )
	{
	DefineRunPropertiesDialog( ~<Title>~ );
	}

	dlg( Title,~<Title>~ );

	UpdateModelBox();

	if ( GetWorkStationSettings( ~<$Job.Title>~,PrinterName,PrinterName,Enabled ) )
	{
		dlg( SetStrings,MyPrinterName,~<PrinterName>~ ); 
	}

	if ( GetWorkStationSettings( ~<$Job.Title>~,QueueName,QueueName,Enabled ) )
	{
		dlg( SetStrings,MyQueueName,~<QueueName>~ ); 
	}

	if ( GetWorkStationSettings( ~<$Job.Title>~,Model,MyModel,Enabled ) )
	{
		if ( !IsNull(~<MyModel>~) )
		{
			dlg( ComboBox,ModelComboBox,SelectString,~<MyModel>~,-1 );
		}
	}

	Actions = ACTION Doc ( OrderNotifyDoc OpenOnce OrderNotifyDoc "Init( ~<OrderID>~,FALSE );" );
	PerformActions( Actions );

	return TRUE;
}

NUMERIC Set_1_To_N()
{
	if ( !( GenCon(View,GETACTIVEVIEW ) && GenCon(Window,GETACTIVEWINDOW) ) )
		{ return Warning( ~There was no active view of OrdersItems~ ); }

	if ( !View( GetSelected,SelectedOrderItemsToRun ) )		
		{ return Warning( Translate(OrderItemsMessages,NoOrderItems) ); }

	Count = SelectedOrderItemsToRun( ChildCount );

	if ( <Count> < 2 )  // Run all order items
	{ 
		return Warning( Translate( ~There were no Orders Items selected.  Ctrl-A will select them all~ ) );
	}

	if ( !SelectedOrderItemsToRun( GetFirst,Item ) )
		{ return Warning( Translate(OrderItemsMessages,NoImagesSelected) ); }

	ImageNum = 1 ;
	
	while ( <ImageNum> <= <Count> )
	{

		JobPath = ~<$con.Item[JobPath]>~;
		
		if ( ! Document( Job, ParseFile, ~<JobPath>~ ) )
		{
			return Warning( ~An error occured while parsing the job at <JobPath>~ );
		}

		if ( !Job( GetRenderList,0,aRenderList ) )
		{ 
			return Warning( ~There was no render list for <JobPath>~ );
		}

		aRenderList( GetNodeByID, -9030, 0, NodeGC ) ;		//	IS THIS CORRECT ?????
		
		//	update the output node
		NodeGC( Set, ~ProductPageSeqCurrent:~, ~<ImageNum>~ ) ;
		NodeGC( Set, ~ProductPageSeqLast:~, ~<Count>~ ) ;
		
		//	write the job
		if ( ! aRenderList( WriteJob, ~<JobPath>~ ) )
		{
			return Warning( ~An error occured while saving the job at <JobPath>~ );
		}

		SelectedOrderItemsToRun( GetNext,Item ) ;
			
		ImageNum = <ImageNum> + 1 ;
	}

	StatusBarText(~Completed setting 1 to <Count>~) ;

	return TRUE ;
}

VOID	CustomOrderItemsListViewMenu()	{ }	// Override

Define:	OrderItemsListViewMenu Using DDMenuDef AsSymbol OrderItemsListViewMenu
	Fields:		Position	(-1)	
			
	Contains:	INLISTORDER
	{
		CustomOrderItemsListViewMenu();
		
		Define:	OpenOrderItems	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Open~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( OpenJobForSelectedOrderItem(); )

		Define:	OpenContainingFolder	using	DDMenuItemDef
			Fields:	Text		Translate( ~Open Containing Folder~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( OpenContainingFolder() )

		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add Order Item~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )

		Define:	RunOrderItems	using	DDMenuItemDef
			Fields:	Text		Translate( ~R&un~ )
					IDText		~ID~
					IsEnabled	~T~
					ActionsText  ACTION Exec ( RunOrderItems() )

		Define:	SetRemakeForOrderItem	using	DDMenuItemDef
			Fields:	Text		~Rema&ke~
					IDText		~ID~
					ActionsText  ACTION Exec ( SetRemakeForOrderItem(); )

		Define:	NULL1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

		Define:	DeleteRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Delete~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )

		Define:	ViewAsText	using	DDMenuItemDef
			Fields:	Text		~View As &Text~
					IDText		~ID~
					ActionsText  ACTION Exec ( ViewAsText(); )

		Define:	NULL2 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	SeeItemsForOrderItems	using	DDMenuItemDef
			Fields:	Text		Translate( ~View All Order Items for Selected Orders~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( ViewSelectedOrderItemsAsImages(); )

		Define:	SeeOrdersForSelectedItems	using	DDMenuItemDef
			Fields:	Text		Translate( ~View Orders for Selected Order Items~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( ViewOrdersForSelectedItems(); )	

		Define:	Navigate	using	DDMenuItemDef
			Fields:	Text		Translate( ~Navi&gate Order~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( NavigateOrder(); )
		
		Define:	NULL3 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
//
		Define:	ChangeColValue	using	DDMenuItemDef
			Fields:	Text		Translate( ~Change Field~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( ChangeSelectedColumn() )

		Define:	NULL4 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
//
		Define:	Export	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Export~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( ExportSelectedToFile(OrderItemsDataView,OrderItems) )


		if ( RunningVersion(4.2) )
		{
			Define:	RememberWindowLoc	using	DDMenuItemDef
				Fields:	Text		Translate( ~Remember Window Location~ )
						IDText		~ID~
						ActionsText  ACTION EXEC ( OrderItemsDataWindow( SaveWindowLocation,WindowLocation,OrderItemsList ); )	
		}
	}

VOID	CustomOrderItemsImageViewMenu()		{ } // Override

Define:	OrderItemsImageViewMenu Using DDMenuDef
	Fields:			Position	(-1)		
			
	Contains:		INLISTORDER
	{
		CustomOrderItemsImageViewMenu();
	
		Define:	OpenOrderItems	using	DDMenuItemDef
			Fields:	Text		~&Open~
					IDText		~ID~
					ActionsText  ACTION Exec ( OpenJobForSelectedOrderItem(); )

		Define:	OpenContainingFolder	using	DDMenuItemDef
			Fields:	Text		~Open Containing Folder~
					IDText		~ID~
					ActionsText  ACTION Exec ( OpenContainingFolder() )

		Define:	EditOrderItems using	DDMenuItemDef
			Fields:	Text		~&Edit~
					IDText		~ID~
					ActionsText  ACTION Exec ( EditOrderItemsData(); )
		
		Define:	ViewAsText	using	DDMenuItemDef
			Fields:	Text		~View As &Text~
					IDText		~ID~
					ActionsText  ACTION Exec ( ViewAsText(); )

		Define:	CloseOrderItems using	DDMenuItemDef
			Fields:	Text		~&Close Selected Jobs~
					IDText		~ID~
					ActionsText  ACTION Exec ( CloseJobForSelectedOrderItem() )

		Define:	CloseAllOrderItems using	DDMenuItemDef
			Fields:	Text		~Close All Jobs~
					IDText		~ID~
					ActionsText  ACTION Exec ( CloseAllJobs() )


		Define:	DuplicateOrderItems	using	DDMenuItemDef
			Fields:	Text		~Du&plicate~
					IDText		~ID~
					ActionsText  ACTION Exec ( DuplicateOrderItem() )

		Define:	DeleteOrderItems	using	DDMenuItemDef
			Fields:	Text		~&Delete~
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteSelectedOrderItems(); )

		Define:	ScaleOrderItems	using	DDMenuItemDef
			Fields:	Text		~&Scale Order Items to a New Size~
					IDText		~ID~
					ActionsText  ACTION Exec ( InitScaleDlg(); )

		Define:	SetQuantityFor	using	DDMenuItemDef
			Fields:	Text		~Set &Quantity~
					IDText		~ID~
					ActionsText  ACTION Exec ( ShowQuantityMenu() )
					
		Define:	SetProdType	using	DDMenuItemDef
			Fields:	Text		~Set Product Type~
					IDText		~ID~
					ActionsText  ACTION Exec ( DisplayProdTypeMenu() )

		Define:	RefreshOrderItems	using	DDMenuItemDef
			Fields:	Text		~Refresh  (F5)~
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshThumbNailView(TRUE); )


	Define:	NULL1 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

		Define:	ViewMenuItems using	DDMenuItemDef
			Fields:	Text		~View~
					IDText		ID					
				Contains: INLISTORDER
				{
					Define:	ViewRemakes	using	DDMenuItemDef
						Fields:	Text		~View Remakes~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewRemakes(); )
					
					Define: SeeOrderImages	using	DDMenuItemDef
						Fields:	Text		~View &Images~
								IDText		~ID~
								ActionsText  ACTION Exec ( SeeImagesForOrders(TRUE); )

					Define: SeeImagesUsedByOrderItem	using	DDMenuItemDef
						Fields:	Text		~View Images Used By OrderItem(s)~
								IDText		~ID~
								ActionsText  ACTION Exec ( SeeImagesUsedByOrderItem(); )

					Define:	ViewOrderItemImages	using	DDMenuItemDef
						Fields:	Text		~View OrderItemImages~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewOrderItemImages(); )

					Define: SeeServices	using	DDMenuItemDef
						Fields:	Text		~View Services~
								IDText		~ID~
								ActionsText  ACTION Exec ( SeeServices(); )

					Define: SeeOrders	using	DDMenuItemDef
						Fields:	Text		~View Order~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewOrderInfo(); )

					Define: SeeProducts	using	DDMenuItemDef
						Fields:	Text		~View &Products~
								IDText		~ID~
								ActionsText  ACTION DOC ( ProductsDoc2 OpenOnce ProductsDoc2 "Init( ~~,TRUE,~Select * From Products Order By Category,Sequence,ID~ );" )

					Define:	SeeJobsInQueue	using	DDMenuItemDef
						Fields:	Text		Translate( ~See Jobs In Queue~ )
								IDText		~ID~
								ActionsText  ACTION Exec ( SeeJobsInQueue(); )	
				}
				
Define:	ViewSubsets using	DDMenuItemDef
			Fields:	Text		~View Items~
					IDText		ID					
				Contains: INLISTORDER
				{
					Define:	ViewBooks	using	DDMenuItemDef
						Fields:	Text		~View Items in Books~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewBooks(TRUE); )

					Define:	ViewNotBooks	using	DDMenuItemDef
						Fields:	Text		~View Items Not in Books~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewBooks(FALSE); )

					Define:	ViewSubsetsA using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~

					Define:	ViewOrderItemsForCategory	using	DDMenuItemDef
						Fields:	Text		~View Items from Product Category~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayProductCategories(true); )

					Define:	ViewOrderItemsNotForCategory	using	DDMenuItemDef
						Fields:	Text		~View Items NOT from Product Category~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayProductCategories(false); )

					Define:	ViewSubsetsB using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~

					Define:	ViewOrderItemsForProduct	using	DDMenuItemDef
						Fields:	Text		~View Items Using Product~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayProducts(true); )

					Define:	ViewOrderItemsNotForProduct	using	DDMenuItemDef
						Fields:	Text		~View Items NOT Using Product~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayProducts(false); )

					Define:	ViewSubsetsC using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~

					Define:	ViewOrderItemsOfType	using	DDMenuItemDef
						Fields:	Text		~View Items of Type~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayTypes(true); )

					Define:	ViewOrderItemsNotOfType	using	DDMenuItemDef
						Fields:	Text		~View Items Not of Type~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayTypes(false); )

					Define:	ViewSubsetsD using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~

					Define:	ViewOrderItemsOfTypeName	using	DDMenuItemDef
						Fields:	Text		~View Items of TypeName~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayTypeNames(true); )

					Define:	ViewOrderItemsNotOfTypeName	using	DDMenuItemDef
						Fields:	Text		~View Items Not of TypeName~
								IDText		~ID~
								ActionsText  ACTION Exec ( DisplayTypeNames(false); )

					Define:	ViewSubsetsE using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~

					Define:	ViewPrinted	using	DDMenuItemDef
						Fields:	Text		~View Items that Have Been Printed~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewPrinted(TRUE); )

					Define:	ViewNotPrinted	using	DDMenuItemDef
						Fields:	Text		~View Items that Have Not Been Printed~
					
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewPrinted(FALSE); )
				}


		Define:	Navigate	using	DDMenuItemDef
			Fields:	Text		Translate( ~Navi&gate Order~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( NavigateOrder(); )
					
		Define: ManageImages	using	DDMenuItemDef
			Fields:	Text		~Ma&nage Images~
					IDText		~ID~
					ActionsText  ACTION Exec ( ManageImagesForOrders(); )


		Define:	NULL2 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	BookMenuItems using	DDMenuItemDef
			Fields:	Text		~Books~
					IDText		ID					
				Contains: INLISTORDER
				{
					Define: GroupOrderItems	using	DDMenuItemDef
						Fields:	Text		~Create a Book ~
								IDText		~ID~
								ActionsText  ACTION Exec ( GroupOrderItems(); )

					Define: SelectGroup	using	DDMenuItemDef
					Fields:	Text			~Select all items in a book~
								IDText		~ID~
								ActionsText  ACTION Exec ( SelectBook(); )

					Define: RemoveItemFromGroup	using	DDMenuItemDef
					Fields:	Text			~Remove all items from a book~
								IDText		~ID~
								ActionsText  ACTION Exec ( RemoveItemsFromBook(); )

					Define: EditBook	using	DDMenuItemDef
					Fields:	Text			~Edit a book~
								IDText		~ID~
								ActionsText  ACTION Exec ( EditBooks(); )
								
					Define: ViewBookAttributes	using	DDMenuItemDef
					Fields:	Text			~Book Attributes~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewBookAttributes(); )


					Define:	SetBookQuantity	using	DDMenuItemDef
						Fields:	Text		~Set &Book Quantity~
								IDText		~ID~
								ActionsText  ACTION Exec ( ShowBookQuantityMenu() )
								
					Define:	CombineBookIntoOneBook	using	DDMenuItemDef
						Fields:	Text		~Combine Book Into First Book~
								IDText		~ID~
								ActionsText  ACTION Exec ( CombineBookIntoFirstBook() )
								
					

					Define:	AuditOrderItems	using	DDMenuItemDef
						Fields:	Text		~&Audit order items for Nexpress spot color types~
								IDText		~ID~
								ActionsText  ACTION Exec ( AuditSelectedOrderItems(); )
								
					Define:	MovieSection using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~
								
					Define:	Spotlit	using	DDMenuItemDef
						Fields:	Text		~Toggle High&light in Movie~
								IDText		~ID~
								ActionsText  ACTION Exec ( ToggleSpotlit() )
								
					Define:	ViewMovie	using	DDMenuItemDef
						Fields:	Text		~View Movie~
								IDText		~ID~
								ActionsText  ACTION Exec ( ViewMovie() )
				}
					
		Define:	PDFMenuItems using	DDMenuItemDef
			Fields:	Text		~PDF~
					IDText		ID					
				Contains: INLISTORDER
				{
					Define: SelectGroup	using	DDMenuItemDef
						Fields:	Text			~Select all items in a PDF~
									IDText		~ID~
									ActionsText  ACTION Exec ( SelectBook(); )
									
					Define: SeeImagesUsedByPDF	using	DDMenuItemDef
						Fields:	Text		~View images used in a PDF~
								IDText		~ID~
								ActionsText  ACTION Exec ( SeeImagesUsedByPDF(); )
								
					Define:	PDFNullA using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~

					Define:	PreviewBookAsPDF	using	DDMenuItemDef
						Fields:	Text		~Preview the original PDF for a book~
								IDText		~ID~
								ActionsText  ACTION Exec ( PreviewBookAsPDF(FALSE) )
								
					Define:	PreviewCorrectedBookAsPDF	using	DDMenuItemDef
						Fields:	Text		~Preview the corrected PDF for a book~
								IDText		~ID~
								IsShown		F		// Doesn't work for all PDF's so don't show it
								ActionsText  ACTION Exec ( PreviewBookAsPDF(TRUE) )
								
					Define:	PDFNullB using DDMenuItemDef
						Fields:	Text		~~
								IDText		~NULL~
								
					Define:	ImportPDF	using	DDMenuItemDef
						Fields:	Text		~Import PDF's~
								IDText		~ID~
								ActionsText  ACTION Exec ( ImportPDF() )
				}


		Define:	NULL3 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	OrderItemsBySequence	using	DDMenuItemDef
			Fields:	Text		Translate( ~Sort By Sequence~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( OrderItemsBySequence() )

		Define:	MaintainCrossReference	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Maintain Order Items ~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( MaintainCrossReference(FALSE) )


		Define:	SetScanFlag	using	DDMenuItemDef
			Fields:	Text		Translate( ~Mark Images For Rescan~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( MarkForRescan() )

		Define:	SetRemakeForOrderItem	using	DDMenuItemDef
			Fields:	Text		~Rema&ke~
					IDText		~ID~
					ActionsText  ACTION Exec ( SetRemakeForOrderItem(); )
					
		Define:	CreateGroupPicture	using	DDMenuItemDef
			Fields:	Text		~Create Group Picture~
					IDText		~ID~
					ActionsText  ACTION Exec ( CreateGroupPicture(); )
		

		Define:	NULL3a using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		

		
		Define:	NULL4 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	OrderSummary	using	DDMenuItemDef
			Fields:	Text		~Order Summar&y~
					IDText		~ID~
					ActionsText  ACTION Exec ( OnOrderSummary(); )

		Define:	SetOrderStatus	using	DDMenuItemDef
			Fields:	Text		~Set Order Status~
					IDText		~ID~
					ActionsText  ACTION Exec ( SetOrderStatus(); )
					
		Define:	ExportSelected	using	DDMenuItemDef
			Fields:	Text		~Export Selected OrderItems~
					IDText		~ID~
					ActionsText  ACTION Exec ( ExportOrderItems(); )

		Define:	RunOrderItems	using	DDMenuItemDef
			Fields:	Text		~&Run Selected~
					IDText		~ID~
					ActionsText  ACTION Exec ( RunOrderItems() )

		Define:	RunEntireOrder	using	DDMenuItemDef
			Fields:	Text		~Run Entire Order~
					IDText		~ID~
					ActionsText  ACTION Exec ( RunOrder() )
	if (0)
	{
		Define: CreateProofSheet	using	DDMenuItemDef
			Fields:	Text		~Create Proof Sheet ~
					IDText		~ID~
					ActionsText  ACTION Exec ( CreateProofSheet(); )
	}
}

	
MACROSOFF

Define: OrderItemsWindow Using DDWinDef	
	Fields:         
		Title						~Order Items~
		TypeName					~ImageWnd~
		Position					0 40 50 35 // <- Sets the initial position and size of the Order Items Window in percentages - left, top, width, height
		IsPositionPercent			T
		IsCenteredVertical			F
		IsCenteredHorizontal		F
		IsMaximized					F
		SourceWinDef				ThumbnailWindow
		Purpose						~Orders~
		ImageFrameSize				85			// Sets the approximate maximum size of each image
		EnableStatusBar				F;

Define: OrderItemsView Using DDViewDef
	Fields:
		Text						~<OrderID>~
		ViewType					~ThumbnailView~
		IsModifiable				~T~
		IsNameModifiable			~F~
		DoubleClickActionsText		ACTION Exec ( OpenJobForSelectedOrderItem() )
		IActionsText				~[EnableMenu(CreateLayoutCategories)]~
		DropActionsText				ACTION Exec ( HandleDrop() )
		DropTypes					~Products Image Text OrderItems~
		DropNonInsertableTypes		~Image~
		ViewDataType				OrderItems
		ViewDataFor					~<OrderID>~ 
		RClickUpActionsText			ACTION Exec ( RightClickInImageView() ) 
		HActionsText				ACTION SHOWHELPPAGE ( KPISHelpFile "OrderItems.htm" )
		KeyboardActionsText			ACTION Exec ( OnKeydown() )
		ImageOpenFailedMsg			~No Order Item Icon~
		NoSamplePreviewMsg			~No Order Item Icon~
		DontAllowDragDrop			FALSE								// setting this here has no effect, because it is overridden on call to AreOrderItemsInSequence
		NoDragDropMsg2				~Unable to drag and drop because the order contains two or more order items that have duplicate Sequence and Subsequence numbers~
		NoDragDropMsg				~Unable to drag and drop order items when the view is not sorted by sequence.  Right click and select Sort By Sequence to sort the order items by sequence.~
		AllowGroupIconSpacing		TRUE;							// setting this here has no effect, because it is overridden on call to AreOrderItemsInSequence


Define: OrderItemsThumbNailImage Using DDICImageDef
	Fields:
		Info1		~~
		Info2		~<$Con.Item[ID]> Q<$Con.Item[Quantity]> <$Con.Item[Remake].IndexValue__R>  <$Con.Item[ProductID]>~
		Info3		~<$Con.Item[LayoutName]>,<$Con.Item[Status]>,<$Con.Item[Type].orNoType>,<$Con.Item[TypeName].orNoTypeName>,<$Con.Item[ProdType].orNoProdType>,<$Con.Item[PackageID].orNoPkgID> <$Con.Item[PackageGroup].numeric>~
		Path		~<$Con.Item[JobPath].Path>\Preview\<$Con.Item[JobPath].Filename>.jpg~
		IsDeleted	FALSE
		IsSelected	FALSE 
		DropTypes	~Products Image~
		DataType	OrderItems 
		Table		OrderItems
		Group		~<$con.Item[GroupID]>~
		Spotlit		~<$con.Item[Spotlit]>~
		Key			~OrderID = '<$Con.Item[OrderID]>' AND ID = <$Con.Item[ID]>~;

MACROSON

CreateQuantityListMenu( 0,9 );

if ( !GenCon( OrderItemsFieldTypes,GetFrom,OrderItems,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The Orders Table is not properly defined~ ); }

Define: OrderItemsDataWindow Using DDWinDef
	Fields:		Title					~Order Item Data~
				Position				0 30 90 20
				IsPositionPercent		T
				Purpose					~Orders~
				EnableStatusBar			T

	Contains:	INLISTORDER
	{
		Define: OrderItemsDataView Using DDViewDef AsSymbol OrderItemsDataView
			Fields:	ViewType				~ListView~
					Document				$Doc.This
					GridControlTypes		OrderItemsFieldTypes( GetReferenceTo,Fields )
					ChangeRecordActionsText ACTION Exec ( ChangeRecord(); )
					DoubleClickActionsText	ACTION Exec ( OpenJobForSelectedOrderItem() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord(); )
					RClickUpActionsText		ACTION Exec ( RightClickInListView(); )
					CloseActionsText		ACTION Call ( OnCloseOrderItemsDataView() )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					ComboBoxActionsText		ACTION Call ( UpdateComboBoxes() )
					ButtonClickActionsText	ACTION Exec ( OnButtonClick( OrderItemsDataView,~Find desired file ...~,~<$App.ShareDirectory>\OrderJobs~) )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "OrdersItemsData.htm" )
					AllowGroupIconSpacing	0		// setting this here has no effect, because it is overridden on call to AreOrderItemsInSequence
					DontAllowDragDrop		0		// setting this here has no effect, because it is overridden on call to AreOrderItemsInSequence
					//LoadAsync				T;
	}

OptionalInclude( ~<$App.ShareDirectory>\Scripts\ScriptOverrides\OrderItemsDoc.txt~ );

