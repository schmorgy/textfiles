// TBD - Notify Gina to implement "ImageRestoreSetups.htm"



NUMERIC RefreshListView( Requery )
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate( ~Would you like to save your pending changes?~ ),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed: <DocumentQuery>. <theErr>~ ) );
	}

	SetDocumentData( List(GetObject) );
	
	DataWindow( StatusBar,Text,Translate( ~Refreshing~ ) );
	DataWindow( RefreshWindow );
	NumEntries = List( NumEntries );
	DataWindow( StatusBar,Text,Translate( ~<NumEntries> Records~ ) );

	return TRUE;
}



NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,ChangedSetup,OrigSetup,ChangedRow,IsNewRow ) )
		{ return Warning( Translate ( ~There was no changed row.~ ) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	Key = STR ( Setup = '<$Con.OrigSetup[Setup]>' );

	Query = ~Select * From ImageRestoreSetups Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	// If we are in non-standalone mode and are going to restore the
	// DB records only (no copy images), then make sure the restore
	// from path is a shared or UNC path
	CreateDBRecordsOnly = Numeric( ~<$Con.ChangedSetup[CreateDBRecordsOnly]>~ );
	Path = ~<$Con.ChangedSetup[RestoreFromDirectory]>~;

	if ( <CreateDBRecordsOnly> != FALSE )
	{
		if ( !IsSharedOrUNCPath( Path ) )
		{
			return FALSE;
		}
		ChangedSetup( Set, RestoreFromDirectory, ~<Path>~ );
	}

	if ( !List( UpdateFrom,ChangedSetup,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
		return Warning( Translate( ~Could not update ImageRestoreSetups record where <Key>. <theErr>~ ) );
	}

	DataView( CommitChanges );

	return TRUE;
}



NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,SetupsToDelete ) )		
		{ return Warning( Translate( ~There was no row selected to delete~ ) ); }

	Count = SetupsToDelete( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There are no selected setups to delete~ ) ); }

	if ( MessageBox( Translate( ~Are you sure you want to delete the <Count> selected setups?~) , YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}

	StringList( RowsToDelete,New );

	while ( SetupsToDelete( GetNext,Setup ) )
	{
		Key = ~Setup = '<$con.Setup[Setup]>'~;

		if ( !dBase( CMD,~Delete From ImageRestoreSetups Where <Key>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( ~Could not delete ImageRestoreSetups record where <Key>. <theErr>~ );
		}

		RowsToDelete( AddString,SetupsToDelete(GetCurrentPosition) );
	}

	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}



NUMERIC AddRecord( &DataLocation )
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	NewRow( SetValues, LoadAllImages, TRUE );
	NewRow( SetValues, KeepExistingColorCorrections, FALSE );
	NewRow( SetValues, CreateDBRecordsOnly, FALSE );
	NewRow( SetValues, RefreshThumbnails, FALSE );
	NewRow( SetValues, UnwriteProtect, FALSE );
	
	RowBeingAdded = DataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate( ~You are too low on memory to add any more rows~ ) ); }

	DataView( SetActiveCell,<RowBeingAdded>,Setup );

	return TRUE;
}


NUMERIC IsSharedOrUNCPath( &Path )
{
	// Only enforce UNC test if the paramter is
	// passed
	if ( !DefinedAndNotNULL( Path ) )
	{
		return TRUE;
	}

	if ( ~<Path>~ == ~~ )
	{
		return TRUE;
	}

	Path = MakePath( Type,UNC,~<Path>~);

	if ( !Files( IsUNC,~<Path>~ ) && NetworkOperation() )
	{
		Msg = Translate( UIMessages,UnsharedFile,~<Path>~ );

		if ( MessageBox( ~<Msg>~, YESNO ) != YES )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RightClickInListView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( Translate( ~There was no active view~ ) ); }

	ActiveView( DisplayMenu,ViewMenu );

	return TRUE;
}


NUMERIC OnCloseDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate( ~Would you like to save your pending changes?~ ) , YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	DataWindow( ForceCloseWindow );
	return TRUE;
}


NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}
	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( Translate( ~Are you sure you want to cancel all changes including new setups that have not been saved?~ ) , YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}


NUMERIC AddSetup( WhichSetups,DocumentQuery,SetupToAdd )
{
	if ( !Init( ~<WhichSetups>~,~<DocumentQuery>~ ) )	{ return FALSE; }

	return AddRecord( SetupToAdd );
}


FirstTime = TRUE; // Only open a new window the first time


NUMERIC Init( WhichSetups,DocumentQuery )
{
	DataWindow( Set,Title,~<WhichSetups>~ == ~~ ? Translate( ~Setup Data~ ) : Translate( ~Setup Data - <WhichSetups>~ ) );

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{
			List( GetErrorDescription,0,theErr ); 
			Error( ~Failed to query the ImageRestoreSetups table. <DocumentQuery>.  <theErr>~ );
		}

		SetDocumentData( List(GetObject) );

		Global( WhichSetups,DocumentQuery );

		if ( !DataWindow( CreateWindow, Translate( ~Image Restore Setups~ ) ) )
			{ Error( Translate( ~Failed to create the window~ ) ); }

		NumEntries = List( NumEntries );
		DataWindow( StatusBar,Text,~<NumEntries> Records~ );

	}
	else
	{
		RefreshListView();
	}

	return TRUE;
}


NUMERIC OnButtonClick( &View,Title,DefaultDirectory )
{
	if ( !Defined(View) )
	{
		return Warning( Translate( ~No View was specified for OnButtonClick~ ) ) ;
	}
		
	View( GetActiveCell,Row,Col );

	if ( !DefinedAndNotNull(DefaultDirectory) )
	{
		DefaultDirectory = ~<$App.ShareDirectory>~;
	}

	if ( !DefinedAndNotNull(Title) )
	{
		Title = Translate( ~Image Restore Setup~ )
	}

	Description = Translate( ~Select a directory...~ );

	Path = ~~;

	if ( GetFolder( ~<Title>~, ~<Description>~, Path ) )
	{
		View( SetCellValue,<Row>,<Col>,~<Path>~ );
	}

	return TRUE;
}



if ( !GenCon( TableDefinition,GetFrom,ImageRestoreSetups,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The ImageRestoreSetups Table is not properly defined~ ); }
	

Define:	ViewMenu Using DDMenuDef AsSymbol ViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{

		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add Setup~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )

		Define:	NULL1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

		Define:	DeleteRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Delete~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )
	}

Define: DataWindow Using DDWinDef
	Fields:		Title					~Image Restore Setups~
				Position				0 70 100 25
				IsPositionPercent		T

	Contains:	INLISTORDER
	{
		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				~ListView~
					GridControlTypes		TableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION Exec ( ChangeRecord(); )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord(); )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					CloseActionsText		ACTION Call ( OnCloseDataView() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "ImageRestoreSetups.htm" )
					ButtonClickActionsText	ACTION Exec ( OnButtonClick(DataView,Translate( ~Image Restore Setup~ ),~<$App.ShareDirectory>~) )
	}
