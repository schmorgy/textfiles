DialogWidth = 270;
DialogHeight = 300;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 200;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;
hGap = vGap = 5;
LeftOffset = 120;


EditTextWidth = 70;
SEditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 50;
ButtonHeight = 20; 
VerticalSeparation = 30;
InitialVerticalPosition = 70;


// Create a new GenCon named GridToolParameters1 which is a copy of the Grid Tool Parameters on the tree
GenCon(GridToolParameters1,New,DDGridToolParameters);

VOID CreateDialog()
{
	Define: GridToolSetupDialog Using DDWinDef
	fields: Position 400 100 <DialogWidth> <DialogHeight>
			AutoPosition	1
			Title ~Grid Tool Properties~
			TypeName ~DialogBar~
			OActionsText ACTION EXEC ( CancelPressed() )
			HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "GridToolProperties.htm" )

	Contains: INLISTORDER
	{

		ypos = 10;
		Define: DisplayGridCheckBox Using DDWinCtrlDef AsSymbol DisplayGridCheckBox
		fields: TypeName CheckBox  
				Position $LeftMargin + 10, <ypos>, 100, 20 
				IActionsText ~[Get]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				GenConName THIS
				GenConField ~DisplayGrid~
 				Text ~Display Grid~
				Tooltip ~Display Grid~;

		Define: SnapToGridCheckBox Using DDWinCtrlDef AsSymbol SnapToGridCheckBox
		fields: TypeName CheckBox  
				Position DisplayGridCheckBox(GetRight,Position) + 10, <ypos>, 220, 20 
				IActionsText ~[Get]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				GenConName THIS
				GenConField ~EnableGrid~
 				Text ~Snap To Grid~
				Tooltip ~Snap Nodes to Grid.  To use the snap to grid, click on the Move Selected Nodes tool, and move one or more nodes.~;

		ypos = <ypos> + 30;
		Define: LeftMarginStaticText Using DDWinCtrlDef AsSymbol LeftMarginStaticText
		fields:	TypeName StaticText
				Text ~Left Margin:~
				Position $LeftMargin + 10, <ypos> , $StaticTextWidth,  20;

		Define: LeftMarginEditText Using DDWinCtrlDef AsSymbol LeftMarginEditText
		fields:	TypeName MaskedEditText
				Position (LeftMarginStaticText(GetRight,Position) + $hGap) LeftMarginStaticText(GetTop,position) $EditTextWidth 20
				GenConName THIS
				GenConField ~LeftMargin~
				DActionsText ~[NULL]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Enter left margin~;

		Define: LeftMarginUnitsStatic Using DDWinCtrlDef AsSymbol LeftMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position LeftMarginEditText(GetRight,Position) + 10, LeftMarginEditText(GetTop,Position)+ 5 20 30;

		Define: RightMarginStaticText Using DDWinCtrlDef AsSymbol RightMarginStaticText
		fields:	TypeName StaticText
				Text ~Right Margin:~
				Position $LeftMargin + 10, LeftMarginEditText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: RightMarginEditText Using DDWinCtrlDef AsSymbol RightMarginEditText
		fields:	TypeName MaskedEditText
				Position (RightMarginStaticText(GetRight,Position) + $hGap) RightMarginStaticText(GetY,position) $EditTextWidth 20
				GenConName THIS
				GenConField ~RightMargin~
				DActionsText ~[NULL]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Enter right margin~;

		Define: RightMarginUnitsStatic Using DDWinCtrlDef AsSymbol RightMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position RightMarginEditText(GetRight,Position) + 10, RightMarginEditText(GetTop,Position)+ 5 20 30;

		Define: TopMarginStaticText Using DDWinCtrlDef AsSymbol TopMarginStaticText
		fields:	TypeName StaticText
				Text ~Top Margin:~
				Position $LeftMargin + 10, RightMarginEditText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: TopMarginEditText Using DDWinCtrlDef AsSymbol TopMarginEditText
		fields:	TypeName MaskedEditText
				Position (TopMarginStaticText(GetRight,Position) + $hGap) TopMarginStaticText(GetY,position) $EditTextWidth 20
				GenConName THIS
				GenConField ~TopMargin~
				DActionsText ~[NULL]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Enter top margin~;

		Define: TopMarginUnitsStatic Using DDWinCtrlDef AsSymbol TopMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position TopMarginEditText(GetRight,Position) + 10, TopMarginEditText(GetTop,Position)+ 5 20 30;

		Define: BottomMarginStaticText Using DDWinCtrlDef AsSymbol BottomMarginStaticText
		fields:	TypeName StaticText
				Text ~Bottom Margin:~
				Position $LeftMargin + 10, TopMarginEditText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: BottomMarginEditText Using DDWinCtrlDef AsSymbol BottomMarginEditText
		fields:	TypeName MaskedEditText
				Position (BottomMarginStaticText(GetRight,Position) + $hGap) BottomMarginStaticText(GetY,position) $EditTextWidth 20
				GenConName THIS
				GenConField ~BottomMargin~
				DActionsText ~[NULL]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Enter bottom margin~;

		Define: BottomMarginUnitsStatic Using DDWinCtrlDef AsSymbol BottomMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position BottomMarginEditText(GetRight,Position) + 10, BottomMarginEditText(GetTop,Position)+ 5 20 30;

		Define: WidthStaticText Using DDWinCtrlDef AsSymbol WidthStaticText
		fields:	TypeName StaticText
				Text ~Width:~
				Position $LeftMargin + 10, BottomMarginEditText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: WidthEditText Using DDWinCtrlDef AsSymbol WidthEditText
		fields:	TypeName MaskedEditText
				Text ~Horizontal Offset:~
				Position (WidthStaticText(GetRight,Position) + $hGap) WidthStaticText(GetTop,position) $EditTextWidth 20
				GenConName THIS
				GenConField ~HorizontalOffset~
				DActionsText ~[NULL]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Enter horizontal offset between grid lines~;

		Define: WidthUnitsStatic Using DDWinCtrlDef AsSymbol WidthUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position WidthEditText(GetRight,Position) + 10, WidthEditText(GetTop,Position)+ 5 20 30;

		Define: HeightStaticText Using DDWinCtrlDef AsSymbol HeightStaticText
		fields:	TypeName StaticText
				Text ~Height:~
				Position $LeftMargin + 10, WidthStaticText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: HeightEditText Using DDWinCtrlDef AsSymbol HeightEditText
		fields:	TypeName MaskedEditText
				Text ~Vertical Offset:~
				Position (HeightStaticText(GetRight,Position) + $hGap) HeightStaticText(GetY,position) $EditTextWidth 20
				GenConName THIS
				GenConField ~VerticalOffset~
				DActionsText ~[NULL]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Enter vertical offset between grid lines~;

		Define: HeightUnitsStatic Using DDWinCtrlDef AsSymbol HeightUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position HeightEditText(GetRight,Position) + 10, HeightEditText(GetTop,Position)+ 5 20 30;

		Define: SubdivisionsStaticText Using DDWinCtrlDef AsSymbol SubdivisionsStaticText
		fields:	TypeName StaticText
				Text ~Subdivisions:~
				Position $LeftMargin + 10, HeightEditText(GetBottom,position) + $vGap , $StaticTextWidth,  20;

		Define: SubdivisionsEditText Using DDWinCtrlDef AsSymbol SubdivisionsEditText
		fields:	TypeName MaskedEditText
				Position (SubdivisionsStaticText(GetRight,Position) + $hGap) SubdivisionsStaticText(GetTop,position) 60 20
				GenConName THIS
				GenConField ~Subdivisions~
				IActionsText ~[GET]~
				DActionsText ~[NULL]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Enter the number of subdivisions in the horizontal and vertical directions~;

		Define: GridColorButton Using DDWinCtrlDef AsSymbol GridColorButton
		fields:	TypeName Button
				Text ~Grid Color~
				Position (SubdivisionsStaticText(GetLeft,Position) ) (SubdivisionsEditText(GetBottom,position) + $vGap) 80 20
				GenConName THIS
				GenConField ~GridColor~
				IActionsText ~[Get]~
				DActionsText ~[COLORDLG Save EXEC(ChangeGridColor())]~
				OActionsText ~[Save]~
				Tooltip ~Choose a color for the grid llines~;

		Define: OKButton Using DDWinCtrlDef AsSymbol OKButton
		fields:	TypeName DefaultButton
				Text ~OK~
				Position <DialogWidth> - 80, GridColorButton(GetBottom, position) + $vGap, <SmallButtonWidth>, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( Done() )
				OActionsText ~[NULL]~
				Tooltip ~Save values~;

/*		Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
		fields:	TypeName Button
				Text ~Cancel~
				Position <DialogWidth> - 150, OKButton(GetTop, position), <SmallButtonWidth>, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( CancelPressed() )
				OActionsText ~[NULL]~
				Tooltip ~Cancel~;
*/
	}

	ypos = OKButton(GetBottom, Position) + 50;

	if ( !Defined(dlg) )
	{
		GridToolSetupDialog( Set, Position, ~400 50 <DialogWidth> <ypos> ~);
		GenDlg( dlg,Definition,GridToolSetupDialog,Data,GridToolParameters1,Document,$Doc.This,New,Temporary );
		Global( dlg );
	}

	else
	{
		dlg (SetFocus);
	}

}

Include: ~UpdateUserSettings~;
VOID ChangeGridColor()
{
	dlg( GetInput );

	// refer to the GenCon on the tree as OriginalParameters
	GenCon(OriginalParameters,GetGenCon,GridToolParameters);

	// copy user's values in GridToolParameters1 back to the tree gen con (referred to as OriginalParameters)
	OriginalParameters(SetValuesFrom,GridToolParameters1); 
	GridToolParameters1(GetValue,Units);

	// Update the database
	UpdateUserSettings( GridToolParameters,OriginalParameters );

	Actions = ACTIONS (  RefreshJobs );
	PerformActions( Actions );

}

VOID Done()
{
	ChangeGridColor();
	dlg( End );
	Exit();

}



VOID CancelPressed()
{
	dlg( End );
	Exit();
}


VOID ReOpen()
{
}



// update the static text 'cm.' items
VOID UpdateUnits(CurrentUnits)
{
	if (~<CurrentUnits>~ == ~Inches~)
	{
		SetUnitsFields(~in.~);
	}
	else if (~<CurrentUnits>~ == ~Centimeters~)
	{
		SetUnitsFields(~cm.~);
	}
	else if (~<CurrentUnits>~ == ~Millimeters~)
	{
		SetUnitsFields(~mm.~);
	}
}

VOID SetUnitsFields(UnitsValue)
{
	dlg( SetControlValue, WidthUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, HeightUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, LeftMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, RightMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, TopMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, BottomMarginUnitsStatic, ~<UnitsValue>~);
}

VOID GetUnits()
{
	if ( GenCon( PreviewOptions,GetFrom,PreviewOptions,~[GENCONS]~ ) )
	{
		PreviewOptions(GetValue,PreferredUnits,CurrentUnits);
		UpdateUnits(~<CurrentUnits>~ );
		Global(CurrentUnits);
		return;
	}

	UpdateUnits(~Inches~ );
}


NUMERIC ConvertUnits( PrevUnits, CurrentUnits)
{
	Denominator = 1.0;
	Numerator = 1.0;
	if (SimilarStr(~<PrevUnits>~ , Inches))
	{
		Denominator = 1.0;
	}
	else if ( SimilarStr(~<PrevUnits>~ , ~Millimeters~))
	{
		Denominator = 25.4;
	}
	else if ( SimilarStr(~<PrevUnits>~ , ~Centimeters~))
	{
		Denominator = 2.54;
	}

	if (SimilarStr(~<CurrentUnits>~ , Inches))
	{
		Numerator = 1.0;
	}
	else if ( SimilarStr(~<CurrentUnits>~ , ~Millimeters~))
	{
		Numerator = 25.4;
	}
	else if ( SimilarStr(~<CurrentUnits>~ , ~Centimeters~))
	{
		Numerator = 2.54;
	}

	return <Numerator> / <Denominator>;
}

VOID GetLeftMargin()
{
	GridToolParameters1(GetValue,LeftMargin,LeftMargin);
	GridToolParameters1(GetValue,Units,StoredUnits);
	LeftMargin = Numeric(~<LeftMargin>~) * ConvertUnits(~<StoredUnits>~,~<CurrentUnits>~);
	dlg(SetControlValue,LeftMarginEditText, <LeftMargin>);
}

VOID GetRightMargin()
{
	GridToolParameters1(GetValue,RightMargin,RightMargin);
	GridToolParameters1(GetValue,Units,StoredUnits);
	RightMargin = Numeric(~<RightMargin>~) * ConvertUnits(~<StoredUnits>~,~<CurrentUnits>~);
	dlg(SetControlValue,RightMarginEditText, <RightMargin>);
}

VOID GetTopMargin()
{
	GridToolParameters1(GetValue,TopMargin,TopMargin);
	GridToolParameters1(GetValue,Units,StoredUnits);
	TopMargin = Numeric(~<TopMargin>~) * ConvertUnits(~<StoredUnits>~,~<CurrentUnits>~);
	dlg(SetControlValue,TopMarginEditText, <TopMargin>);
}

VOID GetBottomMargin()
{
	GridToolParameters1(GetValue,BottomMargin,BottomMargin);
	GridToolParameters1(GetValue,Units,StoredUnits);
	BottomMargin = Numeric(~<BottomMargin>~) * ConvertUnits(~<StoredUnits>~,~<CurrentUnits>~);
	dlg(SetControlValue,BottomMarginEditText, <BottomMargin>);
}

VOID GetWidth()
{
	GridToolParameters1(GetValue,HorizontalOffset,HorizontalOffset);
	GridToolParameters1(GetValue,Units,StoredUnits);
	HorizontalOffset = Numeric(~<HorizontalOffset>~) * ConvertUnits(~<StoredUnits>~,~<CurrentUnits>~);
	dlg(SetControlValue,WidthEditText, <HorizontalOffset>);
}

VOID GetHeight()
{
	GridToolParameters1(GetValue,VerticalOffset,VerticalOffset);
	GridToolParameters1(GetValue,Units,StoredUnits);
	VerticalOffset = Numeric(~<VerticalOffset>~) * ConvertUnits(~<StoredUnits>~,~<CurrentUnits>~);
	dlg(SetControlValue,HeightEditText, <VerticalOffset>);
}

VOID GetSubdivisions()
{
	GridToolParameters1(GetValue,Subdivisions,Subdivisions);
	dlg(SetControlValue,SubdivisionsEditText, <Subdivisions>);
}

VOID GetSnapToGrid()
{
	GridToolParameters1(GetValue,EnableGrid,EnableGrid);
	dlg(SetCheck, Numeric(~<EnableGrid>~),SnapToGridCheckBox);
}

VOID GetDisplayGrid()
{
	GridToolParameters1(GetValue,DisplayGrid,DisplayGrid);
	dlg(SetCheck, Numeric(~<DisplayGrid>~),DisplayGridCheckBox);
}

VOID SetGridValues()
{
	Key = ~UserName = '<$App.UserName>' AND Category = 'GridToolParameters'~;

	Query = ~Select * From Settings Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	Field = -1;

	while ( List( GetNext,Record ) )
	{
		Record( GetValue,SettingsText,SettingsText );
		Record( GetValue,Item,Item );
		GridToolParameters1(SetValue,~<Item>~,~<SettingsText>~);
	}		
		
	GetHeight();
	GetWidth();
	GetBottomMargin();
	GetTopMargin();
	GetRightMargin();
	GetLeftMargin();
	GetSubdivisions();
	GetSnapToGrid();
	GetDisplayGrid();
	GridToolParameters1(SetValue,Units,~<CurrentUnits>~);

}
CreateDialog();
GetUnits();
SetGridValues();
