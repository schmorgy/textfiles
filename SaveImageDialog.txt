DialogWidth = 400;
DialogHeight = 460;
TabWidth = <DialogWidth> - 20;
TabHeight = <DialogHeight> - 50;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 150;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;
BigEditTextWidth = 115;
Gap = 20;

// use MediumEditTextWidth when after a static text on a line
MediumEditTextWidth = <TabWidth> - <StaticTextWidth> - <Gap> - <LeftMargin>;

// use LargeEditTextWidth when the only control on a line
LargeEditTextWidth = <TabWidth> - <LeftMargin>;
EditTextWidth = 50;
EditTextHeight = 20;
FileEditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 80;
ButtonHeight = 20;
VerticalSeparation = 30;
FileVerticalSeparation = 60;
InitialVerticalPosition = 50;  
AnnotationVerticalSeparation = 50;
AnnotationVerticalSeparation2 = 45;
AnnotationEditTextHeight = 40;

Define: SaveImageDialog Using DDWinDef // if the name is ever changed, you must also change UGenDlgBar::GetWindowPosition
fields: Position 450 70 <DialogWidth> <DialogHeight>
		AutoPosition 1
		Title ~Output to a Disk File~
		TypeName ~DialogBar~
		IActionsText ~[NULL]~
		OActionsText ~[PerformOActions]~
		Purpose ~SaveImage~
		HActionsText ACTION SHOWHELPPAGE ( KPISHelpFile "Disk_Setup.htm" ) ;

Contains:
{
	Define: OKButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Activate~
			Position <DialogWidth> - 100 , <DialogHeight> - 30,  <SmallButtonWidth> , <ButtonHeight>
			IActionsText ~[Get]~
			DActionsText ~[
							PerformOActions 
							ExecFile(SaveImageDialogRoutines.txt)
							Exec(ActivateButtonHit();)
							]~
			OActionsText ~[NULL]~
			Tooltip ~Close window and save values.  Make a disk file the active device.~

	Define: CloseButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Close~
			Position <DialogWidth> - 190  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
							ExecFile(SaveImageDialogRoutines.txt)
							Exec(CloseButtonHit();)
							Close
						]~
			OActionsText ~[NULL]~
			Tooltip ~Close window and save values.  Don't change the active device.~

	Define: PreviewButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Preview~
			Position <DialogWidth> - 280  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
							HandleViewActions([
							ChangePPUUnits 
							ShowViewStatusBar
							PreviewAll
							]) 

						]~
			OActionsText ~[NULL]~
			Tooltip ~Preview the image.  Useful after you change the resolution if this is the active device.~

	Define: SaveSpecButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Save Output Spec~
			Position <DialogWidth> - 390  ,<DialogHeight> - 30, <SmallButtonWidth> + 20  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
						SaveOutputSpec(Disk)
						]~
			OActionsText ~[NULL]~
			Tooltip ~Save an output specification in text format.~

	Define: SaveImageOptions Using DDWinCtrlDef
	fields:	Position 10 10 <TabWidth>  <TabHeight>
			TypeName TabCtrl
			Text ~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~


	Contains: InListOrder
	{

		Define: Tab1 Using DDWinCtrlDef
		fields: Text ~Setup~
				TypeName Tab
				Tooltip ~Setup~

		Contains: 
		{

			ypos = <InitialVerticalPosition>;
			Define: FileTypeStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~File Type:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: FileTypeComboBox Using DDWinCtrlDef
			fields: TypeName SComboBox  
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos> ,<ComboBoxWidth> ,<ComboBoxHeight> 
					IActionsText ACTIONS ( GetList(SaveImageFileTypeChoices) Get
									ExecFile(UpdateFileType.txt)
									Exec(UpdateFileType(SaveImageDialog, FileTypeComboBox , ~SaveName:~ , ~~);) )

					DActionsText ACTIONS (
								Save
								ExecFile(UpdateFileType.txt)
								Exec(UpdateFileType(SaveImageDialog, FileTypeComboBox , ~SaveName:~ , SaveImageEditText);)
								)
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~SaveFileType:~
					Tooltip ~Select a file type~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CompressionQualityStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Compression Quality:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CompressionQualityEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~CompressionQuality:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter quality value between 0 and 100.   0 = not used.   1 = extremely low quality (very high compression).  100 = very high quality ( low compression). ~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: PrevSizeStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Preview Size:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: PrevSizeEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~PreviewSize:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter the number of pixels for longest side of preview image.  The other side will be calculated.  0 means no preview.  150 is the smallest valid value.~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CopiesStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Copies:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CopiesEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~Copies:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter the number of copies to print~;



			ypos = <ypos> + <VerticalSeparation>;
			Define: XResolutionStaticText Using DDWinCtrlDef AsSymbol  XResolutionStaticText
			fields:	TypeName StaticText
					Text ~Resolution:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>

			Define: XResolutionEditText Using DDWinCtrlDef AsSymbol XResolutionEditText
			fields:	TypeName MaskedEditText
					Position XResolutionStaticText(GetRight,Position) + <Gap>, <ypos>, <BigEditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~XRes:~
					IActionsText ~[GetConversion(Invert)]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Enter the resolution.~;

			Define: ResolutionUnitsStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~pixels per inch~
					Position XResolutionEditText(GetRight,Position) + 5, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>
					IActionsText ~[GetDisplayResolutionUnits]~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ResolutionOverrideMsgStaticText Using DDWinCtrlDef AsSymbol  ResolutionOverrideMsgStaticText
			fields:	TypeName StaticText
					Position <LeftMargin>, <ypos>,  350 ,  <StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>+10;

			Define: RotatedRadioButton0 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 20 , <ypos> ,50 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton0) 
									UncheckButton(RotatedRadioButton180)
									UncheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~0~
 					Text ~None~
					Tooltip ~Do not rotate the image~;

			Define: RotatedRadioButton90 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 100 , <ypos> ,50 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~90~
 					Text ~90~
					Tooltip ~Rotate the image 90 degrees clockwise~;

			Define: RotatedRadioButton180 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 180 , <ypos> ,50 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~180~
 					Text ~180~
					Tooltip ~Rotate the image 180 degrees~;

			Define: RotatedRadioButton270 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 260 , <ypos> ,50 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton270) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton90) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~270~
					Text ~270~
					Tooltip ~Rotate the image 270 degrees clockwise~;

// attempt to put the group box last to allow tooltip messages to come in
// for the radio controls.  But it didn't work (PDF 9/3/98)
			apos = <ypos>  - 20;
			Define: ZZRotatedGroupBox Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Rotation~
					Tooltip ~Choose an angle of rotation~
					Position $LeftMargin <apos> 360  50;			

			ypos = <ypos> + <VerticalSeparation> + 10;
			Define: HorizontalMirrorCheckBox Using DDWinCtrlDef AsSymbol HorizontalMirrorCheckBox
			fields:	TypeName CheckBox
					GenConField ~HorizontalMirror:~
					Text ~Mirror Horizontal: ~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Position $LeftMargin <ypos> 180 15
					IsTabStop 1
					Tooltip ~Horizontally mirror the whole image before saving.~;

//			ypos = <ypos> + <VerticalSeparation>;
			Define: VerticalMirrorCheckBox Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConField ~VerticalMirror:~
					Text ~Mirror Vertical: ~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Position HorizontalMirrorCheckBox(GetRight,Position)+10 <ypos> 100 15
					IsTabStop 1
					Tooltip ~Vertically mirror the whole image before saving.~;

			ypos = <ypos> + <VerticalSeparation>-5;
			Define: SaveImageButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Output File...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText 	ACTIONS (
									ExecFile(FileSave.txt)
									Exec(FileSave(SaveImageDialog, SaveImageButton, ~SaveName:~, ~SaveFileType:~, SaveImageEditText);)
									)
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~SaveName:~
					Tooltip ~Select a directory and file name~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: SaveImageEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~SaveName:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
//					NoHorizontalScroll 1
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit path to saved file~;

			ypos = <ypos> + <VerticalSeparation>;
//			ypos = <ypos> + <FileVerticalSeparation>;
			Define: QueueNameStaticText Using DDWinCtrlDef AsSymbol QueueNameStaticText
			fields:	TypeName StaticText
					Text ~Queue Name:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight> ;

			Query = ~Select QueueName From QueueDefinition Where PrinterModel = 'Disk' Order By QueueName~;

			Define: QueueNameComboBox Using DDWinCtrlDef 
			fields:	TypeName SComboBox
					GenConName THIS
					GenConField ~QueueName:~
					Position <LeftMargin>  + <StaticTextWidth> + <Gap>, <ypos>,  <MediumEditTextWidth>, 150
					IActionsText ~[UpdateList(DiskQueuesLists "<Query>" QueueName) GetList(DiskQueuesLists) Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					Tooltip ~Select a queue name~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ExtraButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Extra Info~
					Position QueueNameStaticText(GetLeft,Position) , <ypos>,  <SmallButtonWidth> , <ButtonHeight>
					//DActionsText ACTION DOC ( XMLJobInfo OpenOnce XMLJobInfo "ExtraButtonHit()" )
					OActionsText ~[NULL]~
					Tooltip ~Get extra XML information for your job~

		}

		Define: Tab5 Using DDWinCtrlDef
		fields: Text ~BackPrint~
				TypeName Tab
				Tooltip ~Backprint~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: Annotation1StaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Annotation 1~
					Position <LeftMargin>,  <ypos>,  <StaticTextWidth>,<StaticTextHeight>
					IActionsText ~[Get]~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: Annotation1EditText Using DDWinCtrlDef
			fields:	TypeName MLEditText
					GenConName THIS
					GenConField ~Annotation1:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					NoHorizontalScroll 1
					Tooltip ~Edit backprinting field~;

			ypos = <ypos> + <AnnotationVerticalSeparation>;
			Define: Annotation1ResultText Using DDWinCtrlDef
			fields:	TypeName StaticText
					GenConName THIS
					GenConField ~Annotation1Result:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>
					IActionsText ~[GetAnnotation(Annotation1EditText)]~;

			ypos = <ypos> + <AnnotationVerticalSeparation2>;
			Define: Annotation2StaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Annotation 2~
					Position <LeftMargin>,  <ypos>,  <StaticTextWidth>,<StaticTextHeight>
					IActionsText ~[Get]~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: Annotation2EditText Using DDWinCtrlDef
			fields:	TypeName MLEditText
					GenConName THIS
					GenConField ~Annotation2:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					NoHorizontalScroll 1
					Tooltip ~Edit backprinting field~;

			ypos = <ypos> + <AnnotationVerticalSeparation>;
			Define: Annotation2ResultText Using DDWinCtrlDef
			fields:	TypeName StaticText
					GenConName THIS
					GenConField ~Annotation2Result:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>
					IActionsText ~[GetAnnotation(Annotation2EditText)]~;

			ypos = <ypos> + <AnnotationVerticalSeparation2>;
			Define: RefreshAnnotationButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Refresh~
					GenConName THIS
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[Update(Annotation1ResultText) Update(Annotation2ResultText)]~
					Tooltip ~Refresh the Annotation text~;
		}



		Define: Tab6 Using DDWinCtrlDef
		fields: Text ~OEM Printer~
				TypeName Tab
				Tooltip ~OEM Printer Setup~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
//			ypos = <ypos> + <VerticalSeparation>;
			Define: ChannelStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Channel:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: ChannelEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~OEMPrinterChannel:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~#####~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter the channel number to use to print~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: SurfaceStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Surface:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: SurfaceEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~OEMPrinterSurface:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter the surface number to print~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperWidthStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Paper Width:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>

			Define: XPaperWidthEditText Using DDWinCtrlDef AsSymbol XPaperWidthEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>, <BigEditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~PaperWidth:~
					IActionsText ~[GetConversion]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Enter the width of the paper~;

			Define: PaperWidthUnitsStaticText Using DDWinCtrlDef 
			fields:	TypeName StaticText
					Text ~~
					Position XPaperWidthEditText(GetRight,Position) + 5, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>
					IActionsText ~[GetDisplayUnits]~;

/*			ypos = <ypos> + <VerticalSeparation>;
			Define: ReproModeCheckBox Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConField ~ReproMode:~
					Text ~Reproduction Mode~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Position $LeftMargin <ypos> 180 15
					IsTabStop 1
					Tooltip ~Use Reproduction Mode on the RP30, SRP30, or RR30~;
*/
//			This is required and is used to recompute values to Mask's number of digits
//			Don't delete this; if you do Undo will stop working, and the doc will get dirty when it shouldn't
			Define: DummyEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position (-1000) (-1000)  100  100
					GenConField ~Dummy~
					Mask		 ~##################~
					AllowedChars ~-.~
					PromptChar	 ~ ~		
		}
	
		Define: Tab9 Using DDWinCtrlDef
		fields: Text ~NexPress Prints~
				TypeName Tab
				Tooltip ~Apply noise reduction~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition> ;


//=============================================================================
			Define: SpotColorTextureButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Texture mask file (in)...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[FileOpen Update(SpotColorTextureEditText)]~
//					DActionsText 	ACTIONS (
//									ExecFile(FileSave.txt)
//									Exec(FileSave2(SaveImageDialog, SpotColorTextureButton, ~NXPPageTextureMask:~, ~OSpotColorFiletype:~, SpotColorTextureEditText);)
//									)
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~NXPPageTextureMask:~
					Tooltip ~Select the NexPress Texture Mask file~;

//			ypos = <ypos> + <VerticalSeparation> ;
			Define: SpotColorTextureEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~NXPPageTextureMask:~
					Position 175 , <ypos>,  200, <FileEditTextHeight>
//					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit path to NexPress Texture Mask file~;
//=============================================================================
			ypos = <ypos> + <VerticalSeparation>;
			Define: SpotColorMaskButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Spot color mask file (out)...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText 	ACTIONS (
									ExecFile(FileSave.txt)
									Exec(FileSave(SaveImageDialog, SpotColorMaskButton, ~OSpotColorMask:~, ~OSpotColorFiletype:~, SpotColorEditText);)
									)
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~OSpotColorMask:~
					Tooltip ~Select a directory and file name for the output of the spot color mask~;

//			ypos = <ypos> + <VerticalSeparation> ;
			Define: SpotColorEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~OSpotColorMask:~
					Position 175 , <ypos>,  200, <FileEditTextHeight>
//					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit path to save spot color mask file~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: SpotColorFileTypeStaticText Using DDWinCtrlDef AsSymbol SpotColorFileTypeStaticText
			fields:	TypeName StaticText
					Text ~Spot Color Mask File Type:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>+50  <StaticTextHeight>

			Define: SpotColorFileTypeComboBox Using DDWinCtrlDef
			fields: TypeName SComboBox  
					Position SpotColorFileTypeStaticText(GetRight,Position) + 20, <ypos> ,<ComboBoxWidth> ,<ComboBoxHeight> 
					IActionsText ACTIONS ( GetList(SaveImageFileTypeChoices) Get
									ExecFile(UpdateFileType.txt)
									Exec(UpdateFileType(SaveImageDialog, SpotColorFileTypeComboBox , ~OSpotColorMask:~ , ~~);) )

					DActionsText ACTIONS (
								Save
								ExecFile(UpdateFileType.txt)
								Exec(UpdateFileType(SaveImageDialog, SpotColorFileTypeComboBox , ~OSpotColorMask:~ , SpotColorEditText);)
								)
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~OSpotColorFiletype:~
					Tooltip ~Select a file type for the spot color mask~;

			ypos = <ypos> + <VerticalSeparation> + <VerticalSeparation>/2;
			Define: NoiseReductionStaticText Using DDWinCtrlDef AsSymbol NoiseReductionStaticText
			fields:	TypeName StaticText
					Text ~Enter 0-150 or a macro:~
					Position $LeftMargin + 20, <ypos> , 330 , 20;

			ypos = <ypos> + 21;
			Define: NoiseReductionEditText Using DDWinCtrlDef AsSymbol NoiseReductionEditText
			fields:	TypeName MaskedEditText
					GenConField ~ONoisereductionoverride:~
					Position $LeftMargin + 20, <ypos> , 330 , 20
					Position NoiseReductionStaticText(GetLeft,Position) <ypos> 320  20
//					InsertOn	~T~	
					MASK			RepeatStr(1024,~*~)
					IsTabStop 1
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Tooltip ~Enter Noise reduction value from 0 to 150 or a macro.  This overrides the value in your printer queue.~;

			yBottompos =  NoiseReductionEditText(GetBottom,Position) + 10;
			Define: ZZNexpressBlurGroupBox Using DDWinCtrlDef AsSymbol ZZBlurGroupBox
			fields:	TypeName GroupBox
					Text ~Noise reduction (overrides queue)~
					Position $LeftMargin ,NoiseReductionStaticText(GetTop,Position) - 15, 360 ,<yBottompos> - (NoiseReductionStaticText(GetTop,Position) - 15);

			Define: MultiPageStaticText Using DDWinCtrlDef AsSymbol MultiPageStaticText
			fields:	TypeName StaticText
					Text ~When creating multi-page products, please specify this page number and the total number of pages.~
					Position <LeftMargin>+10 , <yBottompos>+25,  300  2 * <StaticTextHeight> ;

			ypos = <ypos> + <VerticalSeparation> + <VerticalSeparation> / 2 ;
			Define: Page1StaticText Using DDWinCtrlDef AsSymbol Page1StaticText
			fields:	TypeName StaticText
					Text ~Page~
					Position MultiPageStaticText(GetLeft,Position) , MultiPageStaticText(GetTop,Position)+ <VerticalSeparation>,  40  <StaticTextHeight>

			Define: Page1EditText Using DDWinCtrlDef AsSymbol Page1EditText
			fields:	TypeName MaskedEditText
					Position Page1StaticText(GetRight,Position) + 10, Page1StaticText(GetTop,Position),  40, <EditTextHeight>
					GenConName THIS
					GenConField ~ProductPageSeqCurrent:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Set to current page number of a multi-page product. For example Page 1 OF 2~;
					
			Define: Page2StaticText Using DDWinCtrlDef AsSymbol Page2StaticText
			fields:	TypeName StaticText
					Text ~OF~
					Position Page1EditText(GetRight,Position) + 10 , Page1StaticText(GetTop,Position),  60  <StaticTextHeight>
				
			Define: Page2EditText Using DDWinCtrlDef AsSymbol Page2EditText
			fields:	TypeName MaskedEditText
					Position Page2StaticText(GetRight,Position)+ 5, Page1StaticText(GetTop,Position),  40, <EditTextHeight>
					GenConName THIS
					GenConField ~ProductPageSeqLast:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Set to the last page number of a multi-page product. For example Page 1 OF 2~;


			Define: ZZPageSequence Using DDWinCtrlDef AsSymbol ZZPageSequence
			fields:	TypeName GroupBox
					Text ~Multi-page Sequencing~
					Tooltip ~~
					Position $LeftMargin <apos>-10 360  85;

					ypos = <ypos> + <VerticalSeparation>;
			Define: MultiPageQtyStaticText Using DDWinCtrlDef AsSymbol MultiPageQtyStaticText
			fields:	TypeName StaticText
					Text ~Multi-Page Quantity:~
					Position ZZPageSequence(GetLeft,Position) , ZZPageSequence(GetBottom,Position) + 7,  120  <StaticTextHeight>

			Define: MultiPageQtyEditText Using DDWinCtrlDef AsSymbol MultiPageQtyEditText
			fields:	TypeName MaskedEditText
					Position MultiPageQtyStaticText(GetRight,Position)+10, MultiPageQtyStaticText(GetTop,Position),  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~MultiPageQty:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter quantity value between 1 and 999.~;

			Define: DontRenderBleedCheckBox Using DDWinCtrlDef AsSymbol DontRenderBleedCheckBox
			fields:	TypeName CheckBox
					GenConField ~NoRenderBleed:~
					Text ~Don't add bleed~
					Position MultiPageQtyEditText(GetRight,Position) + 5, MultiPageQtyEditText(GetTop,Position) + 2, 100, 15
					IsTabStop 1
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Tooltip ~Don't add any bleed because the bleed is already built in to the height or width of the layout.  This overrides the Books table and the NexPress template.~;

			Define: TemplateStaticText Using DDWinCtrlDef AsSymbol TemplateStaticText
			fields:	TypeName StaticText
					Text ~Template~
					Position MultiPageQtyStaticText(GetLeft,Position) , MultiPageQtyStaticText(GetBottom,Position) + 7,  60  <StaticTextHeight>

			Define: TemplateComboBox Using DDWinCtrlDef AsSymbol TemplateComboBox
			fields:	TypeName SComboBox
					GenConName THIS
					GenConField ~Template:~
					Position TemplateStaticText(GetRight,Position) + 10, TemplateStaticText(GetTop,Position),  290, 150
					Tooltip ~Select template~;

			ypos = TemplateStaticText(GetTop,Position) + <VerticalSeparation>;
			Define: OverrideStringStaticText Using DDWinCtrlDef AsSymbol OverrideStringStaticText
			fields:	TypeName StaticText
					Text ~Override String:~
					Position TemplateStaticText(GetLeft,Position), <ypos>,  <StaticTextWidth>,<StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation> - 15;
			Define: OverrideStringEditText Using DDWinCtrlDef
			fields:	TypeName MLEditText
					GenConName THIS
					GenConField ~TemplateOverride:~
					Position OverrideStringStaticText(GetLeft,Position), <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					NoHorizontalScroll 1
					Tooltip ~Edit NexPress template override string~;
		}	
	}
}

Hang: SaveImageDialog ~UI Dialogs~

