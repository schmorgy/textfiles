// Globals: WhichImages,DocumentQuery,ViewIsImages,ImageType
//
//			FirstTime,   LastImagePath,
//			CopiedCropX,CopiedCropY,CopiedCropWidth,CopiedCropLength,CopiedCropRotation
//			DesiredProductQty,  DefaultOrder,DefaultRoll,

Define:	ImagesMessages Using DDSymbol
	Fields:	Value	~These strings are Images related strings used by the user interface.~
	Contains:
	{
		Define: DeleteRawImagesToo		using DDText	Fields: Text ~If there are raw image files associated with the selected images, these raw image files can be deleted too.  Do you want to delete the raw image files?~
		Define: DeleteKparsImagesToo	using DDText	Fields: Text ~Delete KPARS data associated with the image(s) being deleted?~
	}


UpdateItemsAfterCreating = ~OrderItemsDoc~;  // defining this indicates to udate OrderItems display after items created.

Include: ~GetFullLayout~;
Include: ~MakeImageWritable~;
Include: ~DeleteOrder~;
Include: ~Utilities.txt~;
Include: ~Utilities2~;
Include: ~DcSbaDoc~;
Include: ~KparsUtilities~;
IncludeClass(BaseHtml);
IncludeClass( BaseHTMLWin );

maxQueryLength = 1400;

VOID RefreshDoc()
{
	KillTimer( 1 );

	if ( <ViewIsImages> )
	{
		RefreshThumbNailView();
	}
	else
	{
		RefreshListView();
	}
}


VOID DelayedRefreshDoc()
{
	SetTimer( 1,2000,~RefreshDoc()~ );
}


NUMERIC RedrawThumbNailView()
{
	return ImagesThumbNailWindow( RefreshWindow,TRUE );
}

NUMERIC AllOptions()
{
	return ImagesDataView( DisplayMenu,ImagesListViewMenu,0,0  );
}


NUMERIC HeadAlignment()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }
	
	action = ACTION DOC ( HeadAlign OpenOnce "<$App.HTMLPages>\HeadAlign\HeadAlign.kpl" "InitWithImagesFromWindow();" );
	return PerformActions( action );
}


NUMERIC DustBustImages()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }
	
	ImagesThumbNailWindow( EnableWindow, FALSE );
	
	action = ACTION DOC ( DustBust OpenOnce "<$App.HTMLPages>\Images\DustBust.kpl" "InitTheWindow(TRUE);" );
	return PerformActions( action );
}


NUMERIC AddImageToList( OrderID,Roll,Frame,Path,FDAFailed )
{
	Query = ~Select * From Images Where OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	if ( !List( GetFirst,Record ) )	// WE ARE TOO SOON ... DATABASE HASN'T FLUSHED YET.
	{
		Action = STR ( AddImageToList(~<OrderID>~,~<Roll>~,~<Frame>~,~<Path>~,<FDAFailed>) );
		QueueContentsAfter( Action,1000 );
		return FALSE;
	}

	GenCon( ThumbNailImage,New,DDICImageDef,SetValues,
			Info1,		~<Roll>~,
			Info2,		~<Roll>-<Frame>~,
			Info3,		~<$pcon.Record[SubjectID]>  <Path>~,
			Info4,		~<$pcon.Record[ICCProfile]>~,
			ImageSource,~<$pcon.Record[ImageSource]>~,
			OrderID,	~<$pcon.Record[OrderID]>~,
			Roll,		~<$pcon.Record[Roll]>~,
			Frame,		~<$pcon.Record[Frame]>~,
			Path,		~<Path>~,
			IsDeleted,	<IsDeleted>,
			IsReprocessed,		~<$pcon.Record[Reprocess].numeric>~,
			ImageOffline,		~<$pcon.Record[ImageOffline].numeric>~,
			AutoRetouchComplete, ~<$pcon.Record[AutoRetouchComplete].numeric>~,
			IsSelected,	FALSE,
			DropTypes,	~Image~,
			DataType,	~Image~,
			Table,		~Image~,
			FDAFailed,	<FDAFailed>,
			Key,		~OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~ ) ;

	ImagesThumbNailWindow( AddThumbNailToExistingView,ThumbNailImage,~<OrderID>~,Image,Record );

	return TRUE;
}


NUMERIC UpdateImageInList( OrderID,Roll,Frame,Path,FDAFailed )
{
	ImagesThumbNailWindow( UpdateThumbNailInExistingView,~<OrderID>~,~<Roll>~,~<Frame>~,~<Path>~,~<FDAFailed>~ );

	return TRUE;
}



NUMERIC RefreshThumbNailView()
{
	if ( !ImagesThumbNailWindow(GetWindowAddress) )
		{ return FALSE; }
		
	if ( IsNull(~<DocumentQuery>~) )
	{
		return PopupMsg(~You can't refresh this view because it was generated by another window~);
	}

	WaitCursor( Begin );

	WhichWindow = <ViewIsImages> ? ThumbNail : Data;
	WindowType = <ViewIsImages> ? ~~ : Data;

	if ( ~<WhichImages>~ != ~~ )
	{
		Images<WhichWindow>Window( SetWindowTitle,Translate(~<$Field.ImageType[#<ImageType>]> Images <WindowType> - <WhichImages>~) );
	}
	else
	{
		Images<WhichWindow>Window( SetWindowTitle,Translate(~<$Field.ImageType[#<ImageType>]> Images Data~) );
	}

	//ImagesThumbNailWindow( SetWindowTitle,~Order Images - <WhichImages>~ );

	Start = Ticks();

	StatusBarText( Translate(~Querying Images~) );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		WaitCursor( End );
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <DocumentQuery>. <theErr>~ );
	}

	Count = List( NumEntries );

	SetDocumentData( List(GetObject) );

	StatusBarText( Translate(~Reading <Count> Images~) );

	ImagesThumbNailWindow( CreateThumbNailViews,ImagesThumbNailCategory,ImagesThumbNailImage,List,OrderID,Image,~<WhichImages>~ );
//	ImagesThumbNailWindow( AddCategories,ImagesThumbNailCategory,OrderID,~<WhichOrders>~ );
	ImagesThumbNailWindow( RefreshWindow );

	InitChromaKeyState(FALSE);

	WaitCursor( End );

	Duration = (Ticks() - <Start>) / 1000;


	return StatusBarText( ~Read <Count> Records in <Duration> seconds~ );
}

VOID InitChromaKeyState( firstTime )
{
	if ( <firstTime> )
	{
		chromaKeyBGImageID = ~~;
		if ( GetUserSettings(~<$Job.Title>~,ChromaKeyBGImageID,chromaKeyBGImageID,Enabled) )
		{
			if ( <enabled> )
			{
				fChromaKeyBGImageID = ~<chromaKeyBGImageID>~;
			}
		}

		chromaKeyMaskState = ~~;
		if ( GetUserSettings(~<$Job.Title>~,ChromaKeyMaskState,chromaKeyMaskState,Enabled) )
		{
			if ( <enabled> )
			{
				fChromaKeyMaskState = ~<chromaKeyMaskState>~;
			}
		}

		chromaKeyFillColor = ~~;
		if ( GetUserSettings(~<$Job.Title>~,ChromaKeyFillColor,chromaKeyFillColor,Enabled) )
		{
			if ( <enabled> )
			{
				chromaKeyFillColorValue = 0;
				chromaKeyFillColorRed = 0;
				chromaKeyFillColorGreen = 0;
				chromaKeyFillColorBlue = 0;
				GetTokens( ~<chromaKeyFillColor>~,~ ~,
					chromaKeyFillColorValue,chromaKeyFillColorRed,chromaKeyFillColorGreen,chromaKeyFillColorBlue );

				fChromaKeyFillColorValue = ~<chromaKeyFillColorValue>~;
				fChromaKeyFillColorRed = ~<chromaKeyFillColorRed>~;
				fChromaKeyFillColorGreen = ~<chromaKeyFillColorGreen>~;
				fChromaKeyFillColorBlue = ~<chromaKeyFillColorBlue>~;
			}
		}
	}

	WhichWindow = <ViewIsImages> ? ThumbNail : Data;
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return; }

	if ( <fChromaKeyMaskState> == 1 )
	{
		View( SetChromaKeyMaskState,1,TRUE );

		if ( <fChromaKeyFillColorValue> == -1 )
		{
			View( SetChromaKeyBGColor,~<fChromaKeyFillColorRed>~,~<fChromaKeyFillColorGreen>~,~<fChromaKeyFillColorBlue>~,TRUE );
		}
		if ( <fChromaKeyFillColorValue> == 0 )
		{
			View( SetChromaKeyBGColor,160,160,160,TRUE );
		}
		else if ( <fChromaKeyFillColorValue> == 1 )
		{
			View( SetChromaKeyBGColor,255,0,0,TRUE );
		}
	}
	else if ( <fChromaKeyMaskState> == 2 )
	{
		View( SetChromaKeyMaskState,2,TRUE );
	}
	else if ( <fChromaKeyMaskState> == 3 )
	{
		View( SetChromaKeyMaskState,3,TRUE );

		if ( SimilarStr(~<fChromaKeyBGImageID>~,-1) )
		{
			resetBgImage = TRUE;
		}

		View( SetChromaKeyBGImage,~<fChromaKeyBGImageID>~,~~,<resetBgImage>,TRUE );
	}
	else
	{
		View( SetChromaKeyMaskState,0,TRUE );
	}

	ImagesThumbNailWindow( RefreshWindow );
}


NUMERIC RefreshListView()
{
	if ( !ImagesDataWindow(GetWindowAddress) )
		{ return FALSE; }

	if ( ImagesDataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	WaitCursor( Begin );

	Start = Ticks();

	ImagesDataWindow( StatusBar,Text,Translate(~Querying Images~) );

	if ( !PGenConList( List,Connect,Cursor,Keyset,LockType,ReadOnly,QUERY,~<DocumentQuery>~ ) )
	{
		WaitCursor( End );
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <DocumentQuery>. <theErr>~ );
	}

	Count = List( NumEntries );

	IF 0
	{
		if ( <Count> > 300 )
		{
			if ( MessageBox( ~Your query:\n\n   <DocumentQuery>\n\nwill retrieve <Count> records\n\nAre you sure you want to continue?~,YESNO ) != YES )
			{
				if ( <FirstTime> ) { Exit(); }
				return TRUE;
			}
		}
	}

	//SetDocumentData( List(GetObject), TRUE );

	SetDocumentData( List(GetObject) );

	StatusBarText( StatusBar,Text,~Reading <Count> Images~ );

	ImagesDataWindow( RefreshWindow );

	Duration = (Ticks() - <Start>) / 1000;

	ImagesDataWindow( StatusBar,Text,~Read <Count> records in <Duration> seconds~ );

	WaitCursor( End );

	return TRUE;
}


NUMERIC RefreshAllViews()
{	
	Queue( ~RefreshListView()~ );
	Queue( ~RefreshThumbNailView();~ );

	return TRUE;
}


NUMERIC ViewOrderBySubjectID()
{	
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( Translate(~There is no OrderID~) ) };

	DocumentQuery = ~SELECT * FROM Images WHERE OrderID = '<OrderID>' Order By SubjectID~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~ );

	return TRUE;
}


NUMERIC ViewOrderByRollFrame()
{	
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( Translate(~There is no OrderID~) ) };

	DocumentQuery = ~SELECT * FROM Images WHERE OrderID = '<OrderID>' Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~ );

	return TRUE;
}


NUMERIC ViewAllImages()
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	DocumentQuery = ~SELECT * FROM Images WHERE OrderID = '<OrderID>' Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~);

	return TRUE;
}

NUMERIC ViewDigitalFilesOnly()
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	DocumentQuery = ~SELECT * FROM Images WHERE OrderID = '<OrderID>' AND ImageSource='DCR' Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~, Translate(~Kodak Raw Camera Images Only~) );

	return TRUE;
}

NUMERIC ViewERIFilesOnly()
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	DocumentQuery = ~SELECT * FROM Images WHERE OrderID = '<OrderID>' AND ImageSource='ERI' Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,Translate(~ERI JPEG Images Only~) );

	return TRUE;
}

NUMERIC ViewNeeding( Operation,Msg )
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	DocumentQuery = ~SELECT * FROM Images WHERE OrderID = '<OrderID>' AND <Operation> <> 0 Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,~<Msg>~ );

	return TRUE;
}


NUMERIC ViewNeedingKars( Msg )
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	JoinOn = ~Images.OrderID = RetouchImages.OrderID AND Images.Roll = RetouchImages.Roll And Images.Frame = RetouchImages.Frame~;
	WhereClause = ~Images.OrderID = '<OrderID>'~;
	DocumentQuery = ~SELECT Images.* FROM Images INNER JOIN RetouchImages ON (<JoinOn>) WHERE <WhereClause> Order by Images.Roll,Images.Frame~;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,~<Msg>~ );

	return TRUE;
}

NUMERIC ViewImagesHaveManuallyFindEyes(Msg)
{
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	JoinOn = ~Images.OrderID = CompSBAData.OrderID AND Images.Roll = CompSBAData.Roll And Images.Frame = CompSBAData.Frame~;
	WhereClause = ~Images.OrderID = '<OrderID>' AND CompSBAData.FoundEyesManually <> 0 And CompSBAData.FoundEyesManually IS NOT NULL~;
	DocumentQuery = ~SELECT Images.* FROM Images INNER JOIN CompSBAData ON (<JoinOn>) WHERE <WhereClause> Order by Images.Roll,Images.Frame~;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,~<Msg>~ );

	return TRUE;
}

NUMERIC ViewImagesWithProfiles(With)
{
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}
	With = Numeric(~<With>~);
	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}
	Query = ~Select * from Images where OrderID = '<OrderID>'~;
	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Images table: <Query>. <theErr>~ );
	}
	Count = List(ChildCount);

	if ( <Count> > 1 )
	{
		WaitCursor( Begin );
		
		ImagesCount = 0;
		remaining = <Count>;
		while ( List( GetNext,Image ) )
		{
			Image(GetValue,Path,Path);
			ContainsEmbedded = ContainsEmbeddedInputProfile(~<Path>~);
			if ((<ContainsEmbedded> && <With>) || (!<ContainsEmbedded> && !<With>))
			{
				++ImagesCount;
				Query2 = ~Select * from Images Where OrderID = '<OrderID>' AND Path = '<Path>'~;
				if (<ImagesCount> == 1)
				{
					Actions = ACTION Doc ( SubjectImages OpenOnce ImagesDoc "Init( ~<OrderID>~,TRUE,~<Query2>~,0 );" );
				}
				else
				{
					Actions = ACTION Doc ( ImagesDoc "AddImageThumbnailsFromQuery( ~<Query2>~ );" );
				}
				PerformActions( Actions );
			}
			
						
			StatusBarText( ~<remaining> Images~ );
			MessagePump();
		}
		
		if (<ImagesCount> == 0)
		{
			Message = Numeric(~<With>~) ? ~There are no images with embedded profiles.~ : ~All images have embedded profiles.~;
			Warning(~<Message>~);	
		}		
		StatusBarText( ~Opened Images for <count> Subjects~ );
		
		return WaitCursor( End );
	}
	else
	{

		Msg = ~There are no images~);

		Warning(~<Msg>~);
	}
	
}


NUMERIC ViewNeedingCropChecked( Msg )
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	JoinOn = ~Images.OrderID = CompSbaData.OrderID AND Images.Roll = CompSbaData.Roll And Images.Frame = CompSbaData.Frame~;
	WhereClause = ~Images.OrderID = '<OrderID>' AND CompSbaData.CheckAlignmentFlag <> 0~;
	DocumentQuery = ~SELECT Images.* FROM Images INNER JOIN CompSbaData ON (<JoinOn>) WHERE <WhereClause> Order by Images.Roll,Images.Frame~;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,~<Msg>~ );

	return TRUE;
}


NUMERIC ViewHR500FilesOnly()
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	DocumentQuery = ~SELECT * FROM Images WHERE OrderID = '<OrderID>' AND ImageSource='HR500' Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,Translate(~HR500 Images Only~) );

	return TRUE;
}


NUMERIC ViewImagesUsedInPDFs()
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	DocumentQuery = ~SELECT * FROM Images WHERE Images.OrderID = '<OrderID>' AND Roll Like 'PDF%' Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,Translate(~Images used in PDF Files~) );

	return TRUE;
}


NUMERIC ViewImagesUsedInOrder( Not )
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	ExistsClause = ~Select * From OrderItemImages WHERE Images.OrderID=OrderItemImages.OrderID AND Images.Roll=OrderItemImages.Roll AND Images.Frame=OrderItemImages.Frame~;

	DocumentQuery = ~SELECT * FROM Images WHERE Images.OrderID = '<OrderID>' AND <Not> EXISTS (<ExistsClause>) Order By Roll,Frame~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,Translate(~Images used in OrderItems~) );

	return TRUE;
}

STR GetWidthMarginClause(Margin)
{
	Factor = <Margin>/100;
	return ~(OrderItemImages.NeededWidth > 0) AND (OrderItemImages.NeededWidth > (Images.Width + (Images.Width * <Factor>)))~;  

}

STR GetLengthMarginClause(Margin)
{
	Factor =  <Margin>/100;
	return ~(OrderItemImages.NeededLength > 0) AND (OrderItemImages.NeededLength > (Images.Length + (Images.Length * <Factor>)))~;  
}


STR CreateWhereClause(OrderID,Margin)
{
	WidthMarginClause = GetWidthMarginClause(<Margin>);  

	LengthMarginClause = GetLengthMarginClause(<Margin>);  
	
	ExistsClause = ~Select * From OrderItemImages Where OrderItemImages.ItemOrderID='<OrderID>' AND Images.OrderID=OrderItemImages.OrderID AND Images.Roll=OrderItemImages.Roll AND Images.Frame=OrderItemImages.Frame~;

	WhereClause = ~EXISTS (<ExistsClause> AND <WidthMarginClause> AND <LengthMarginClause> )~ ;

	return ~<WhereClause>~;
}


NUMERIC ViewImagesTooSmall()
{	
	if ( !GenCon( View, GETACTIVEVIEW ) )
	{ 
		return Warning( ~There was no active view~ ); 
	}

	View( GetName, OrderID );

	if ( ~<OrderID>~ == ~~ )
	{ 
		return Warning( Translate(~There is no OrderID~) ) 
	}

	ResizeMargin = 100;

	if ( GetSystemSettings( ~ResizeMarginForRescan~,~Default~,Margin,Enabled ) )
	{
		if ( <Enabled> )
		{
			ResizeMargin = ~<Margin>~;
		}
	}

	WhereClause = CreateWhereClause(~<OrderID>~,~<ResizeMargin>~);  

	DocumentQuery = ~SELECT * FROM Images Where <WhereClause>~ ;

	Init( ~<OrderID>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~,Translate(~Images too small for OrderItems~) );

	return TRUE;
}



NUMERIC ViewOrderInfo()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Sorry, these are product images and therefore have no order.~ ) );
	}
	
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( Translate(~There is no OrderID~) ) };

	//Query = ~SELECT * FROM Orders WHERE CustomerID = (Select CustomerID From Orders Where ID = '<OrderID>') ORDER BY ID~ ;

	Query = ~SELECT * FROM Orders WHERE ID = '<OrderID>'~ ;

	Actions = ACTION Doc ( OrdersDoc OpenOnce OrdersDoc "Init( ~~,~<Query>~ );" );

	PerformActions( Actions );

	return TRUE;
}

NUMERIC OnOrderSummary()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Sorry, these are product images and therefore have no order.~ ) );
	}
	
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( Translate(~There is no OrderID~) ) };

	Actions = ACTION Doc ( BrowserDoc Open BrowserDoc "Init(~<$App.HTTPServer>/Reports/OrderSummary.kpl?OrderID=<OrderID>~,~<OrderID> Summary Report~,25,0,50,90,0,0,0);" );

	PerformActions( Actions );

	return TRUE;
}





NUMERIC ViewRollInfo()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Products don't have Rolls~ ) );
	}
	
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	if ( ~<OrderID>~ == ~~ )
		{ return Warning( Translate(~There is no OrderID~) ) };

	Query = ~Select * From Rolls Where OrderID = '<OrderID>' Order By OrderID,Roll~;

	Actions = ACTION Doc ( Rolls OpenOnce RollsDoc "Init( ~<OrderID>~,~<Query>~ );" );
	return PerformActions( Actions );
}


NUMERIC OpenOrderItemsAsImages()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Products don't have OrderItems~ ) );
	}

	List = ~~;

	More = ImagesThumbNailWindow( GetFirst,View );

	while ( $More )
	{
		View( Get,Text,OrderID );
		List = (~<List>~ == ~~) ?  ~'<OrderID>'~ : ~<List>,'<OrderID>'~;
		More = ImagesThumbNailWindow( GetNext,View );
	}

	if ( ~<List>~ == ~~ )
		{ return FALSE; }

	// tested 3/1/07

	//Query = ~SELECT * FROM OrderItems WHERE OrderID In (<List>) ORDER BY OrderID,ID~ ;
//	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems,Products Where OrderID In (<List>) And OrderItems.ProductID = Products.ID ORDER BY OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	Query = ~Select OrderItems.*, Products.LayoutName From OrderItems  LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderID In (<List>) Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	Actions = ACTION Doc ( OrderItems OpenOnce OrderItemsDoc "Init( ~<List>~,~<Query>~,TRUE );" );

	PerformActions( Actions );

	return TRUE;
}


NUMERIC OpenRemakeOrderItemsAsImages()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Products don't have OrderItems~ ) );
	}

	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		return FALSE;
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	View( Get,Text,OrderID );

	// tested 3/1/07
	
//	Query = ~Select OrderItems.*,Products.LayoutName From OrderItems,Products  Where OrderID = '<OrderID>' AND (NOT Remake = 0) AND OrderItems.ProductID = Products.ID ORDER BY OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	Query = ~Select OrderItems.*, Products.LayoutName From OrderItems  LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderItems.OrderID In ('<OrderID>') AND (NOT Remake = 0) Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	
	action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~<OrderID>~,~Remakes~,~<Query>~,TRUE);" );
	return PerformActions( action );
}


NUMERIC OpenOrderItemsForImages()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Products don't have OrderItems~ ) );
	}

	ReturnOnFailure( <ViewIsImages> );
	
	ImagesThumbNailWindow( GetActiveViewOfWindow,View );

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no images selected~ ); }

	OpenCount = 0; 

	while ( SelectedImages( GetNext,Image ) )
	{
		Query = ~Select ItemOrderID,ItemID From OrderItemImages Where OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' Order By ItemOrderID,ItemID~;
	
		if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( ~Failed to query the OrderItemImages table: <Query>. <theErr>~ );
		}

		ContinueIf( !List(NumEntries) );
			
		while ( List( GetNext,Item ) )
		{
			Query = ~Select OrderItems.*, Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderItems.OrderID = '<$pcon.Item[ItemOrderID]>' AND OrderItems.ID = <$pcon.Item[ItemID]> Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;

			if ( !<OpenCount> )
			{
				OpenMethod = KeyState( SHIFT ) ? ~Open~ : ~OpenOnce~;
				action = ACTION DOC ( OrderItemsDoc <OpenMethod> OrderItemsDoc "Init2(~~,~OrderItems that use the selected Images~,~<Query>~,TRUE,TRUE);" );

				WindowNotOpenYet = FALSE;
			}
			else
			{
				action = ACTION Doc ( OrderItemsDoc "AddOrderItemThumbnailsFromQuery( ~<Query>~ );" );
			}

			PerformActions( action );
			++OpenCount;
			
			MessagePump();
		}
	}

	if ( !<OpenCount> )
	{
		Warning( ~Selected Image(s) are not used in any OrderItems~ );
	}
	else
	{
		action = ACTION Doc ( OrderItemsDoc "RefreshTheWindow(TRUE);" );
		PerformActions( action );
	}
		
	return TRUE;
}



NUMERIC OldOpenOrderItemsForImages()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Products don't have OrderItems~ ) );
	}

	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		return FALSE;
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no images selected~ ); }

	Count = 0;
	OrderCount = ItemCount = 0;
	LastOrderID = ~~;
	IDList = ~~;

	ImageCount = 0;

	while ( SelectedImages( GetNext,Image ) )
	{
		if ( <++ImageCount> > 10 )
		{
			return Warning( ~Sorry. You can only select up to 10 images at a time~ );
		}

		Query = ~Select ItemOrderID,ItemID From OrderItemImages Where OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' Order By ItemOrderID,ItemID~;
	
		if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( ~Failed to query the OrderItemImages table: <Query>. <theErr>~ );
		}

		Count = List( NumEntries );

		if ( !<Count> )
		{
			Warning( ~No OrderItems use Image <$con.Image[OrderID]>,<$con.Image[Roll]>,<$con.Image[Frame]>~ );
			continue;
		}

		OrderCount = ItemCount = 0;
		LastOrderID = ~~;
		IDList = ~~;
		
		Warned = FALSE;
		
		while ( List( GetNext,Item ) )
		{
			if ( (~<$pcon.Item[ItemOrderID]>~ == ~<LastOrderID>~) || IsNull(~<LastOrderID>~) )	// SAME ORDER OR FIRST TIME?
			{
				LastOrderID	= ~<$pcon.Item[ItemOrderID]>~;

				if ( <++ItemCount> < 300 )
				{
					Separator = IsNULL( ~<IDList>~ ) ? ~~ : ~,~;

					IDList = ~<IDList><Separator><$pcon.Item[ItemID]>~;
				}
				else if ( !<Warned> ) 
				{
					Warning( ~There are more than 300 Items on Order <LastOrderID> that use Image <$con.Image[OrderID]>,<$con.Image[Roll]>,<$con.Image[Frame]>.  Only 300 will be shown.~ );
					Warned = TRUE;
				}
			}
			else	// A NEW ORDER
			{
				if ( !IsNULL( ~<IDList>~ ) )	// OUTPUT THE LAST ORDER
				{
					// tested 03/01/07
					//Query = ~Select OrderItems.*,Products.LayoutName From OrderItems,Products  Where OrderItems.OrderID = '<LastOrderID>' AND OrderItems.ID IN ( <IDList> ) AND OrderItems.ProductID = Products.ID ORDER BY OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
					Query = ~Select OrderItems.*, Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderItems.OrderID = '<LastOrderID>' AND OrderItems.ID IN ( <IDList> ) Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;

					action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~<LastOrderID>~,~    OrderItems that use Image <$con.Image[OrderID]>,<$con.Image[Roll]>,<$con.Image[Frame]>~,~<Query>~,TRUE,TRUE);" );
					PerformActions( action );

					if ( <++OrderCount> > 10 )
					{
						return Warning( ~There are more than 10 Orders that use Image <$con.Image[OrderID]>,<$con.Image[Roll]>,<$con.Image[Frame]>.  Only 10 were shown.~ );
					}
				}

				// REMEMBER THE NEW DATA
				IDList = ~<$pcon.Item[ItemID]>~;
				ItemCount = 1;
				LastOrderID	= ~<$pcon.Item[ItemOrderID]>~;
			}
		}

		if ( !IsNULL( ~<IDList>~ ) )
		{
			// tested 03/01/07
			//Query = ~Select OrderItems.*,Products.LayoutName From OrderItems,Products  Where OrderItems.OrderID = '<LastOrderID>' AND OrderItems.ID IN ( <IDList> ) AND OrderItems.ProductID = Products.ID ORDER BY OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
			Query = ~Select OrderItems.*, Products.LayoutName From OrderItems LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID Where OrderItems.OrderID = '<LastOrderID>' AND OrderItems.ID IN ( <IDList> ) Order By OrderItems.OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
			action = ACTION DOC ( OrderItemsDoc Open OrderItemsDoc "Init2(~<LastOrderID>~,~    OrderItems that use Image <$con.Image[OrderID]>,<$con.Image[Roll]>,<$con.Image[Frame]>~,~<Query>~,TRUE);" );
			PerformActions( action );
		}
	}


	if ( <OrderCount> == 0 && <ItemCount> == 0 )
	{
		Warning( ~Selected Image(s) are not used in any OrderItems~ );
	}

	return TRUE;
}


STR		GetNewImagePath( &dbase,&Image,&NewFrame )
{
	NewPath = UniqueFileName( ~<$con.Image[Path]>~ );
		
	Index = 0;
		
	while ( TRUE )
	{
		NewFrame = ~<$con.Image[Frame]>_<++index>~;
		
		Key = ~OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<NewFrame>'~; 
		
		if ( !dBase( RecordCountFor,~Select count(*) from Images Where <Key>~ ) )
		{
			return ~<NewPath>~;
		}
	}
}


NUMERIC	DuplicateAnImage( &dBase,&Image )
{
	OrderID = ~<$con.Image[OrderID]>~;
	Roll = ~<$con.Image[Roll]>~;
	Frame = ~<$con.Image[Frame]>~;
	Path = ~<$con.Image[Path]>~;
	
	NewFrame = ~~;
	
	if ( !IsNull(~<Path>~) )
	{
		NewImagePath = GetNewImagePath(dbase,Image,NewFrame);
		
		if ( !Files( Copy,~<Path>~,~<NewImagePath>~ ) )
		{
			WaitCursor( End );
			return Warning( ~Could not copy '<Path>' to '<NewImagePath>'~ );
		}
	}
	
	FromKey = ~OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
	FromQuery = ~Select * From Images Where <FromKey>~;

	if ( !PGenConList( ListFrom,Connection,dBase,GetExistingRecordFor,~<FromQuery>~,FromRecord ) )
	{
		ListFrom( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Could not find Image for <FromKey>. <theErr>~ ) );
	}
	
	ToKey = ~OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<NewFrame>'~;
	ToQuery = ~Select * From Images Where <ToKey>~;
	
	if ( !PGenConList( ListTo,Connection,dBase,Cursor,Keyset,GetRecordFor,~<ToQuery>~,ToRecord ) )	// NEW CONNECTION
	{
		ListTo( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Could not add Image for <ToKey>. <theErr>~ ) );
	}
	
	if ( !ToRecord( UpdateFrom,FromRecord ) )
	{
		ListTo( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
		return Warning( Translate( ~Could not set Image fields for <ToKey> from Image at <FromKey>. <theErr>~ ) );
	}
	
	if ( !ToRecord( Set,Frame,~<NewFrame>~,Path,~<NewImagePath>~ ) )
	{
		ListTo( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
		return Warning( Translate( ~Could not set Frame for Image at <ToKey> to <Frame>. <theErr>~ ) );
	}
	
	if ( !ListTo( Update ) )
	{
		ListTo( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
		return Warning( Translate( ~Could not update Images for <ToKey>. <theErr>~ ) );
	}

	return AddImageToList( ~<OrderID>~,~<Roll>~,~<NewFrame>~,~<NewImagePath>~,FALSE );
}


NUMERIC DuplicateSelectedImages()
{
	if ( !ImagesThumbNailWindow( GetActiveViewOfWindow,View ) )
		{ return FALSE; }
	
	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}
	
	WaitCursor( Begin );

	if ( MessageBox( ~Are you sure you want to duplicate the <Count> selected image(s)? ~,YESNO ) == NO )
		{ return TRUE; }
		
	ActualCount = 0;

	while ( SelectedImages( GetNext,Image ) )
	{
		if ( !DuplicateAnImage( dBase,Image ) )
		{
			WaitCursor( End );
			return FALSE;
		}
			
		++ActualCount;
	}
	
	WaitCursor( End );

	return TRUE;
}



NUMERIC OpenExistingImage( Path )
{
	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( !Window( GetNext,aView ) )
			continue;

		aView( Get,ViewType,ViewType );

		if ( ~<ViewType>~ == ImageEditView || ~<ViewType>~ == ImageView || ~<ViewType>~ == ~PIEEditView~)
		{
			aView( GetDocumentPath,DocumentPath );

			if ( ~<DocumentPath>~ == ~<Path>~ )
			{ 
				Window( SetWindowOrder,Top );
				return TRUE;
			}
		}
	}

	return FALSE;
}


NUMERIC NavigateOrder()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );

		if ( !Defined( View ) )
			{ return FALSE; }

		View( GetName,OrderID );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );

		if ( !Defined( View ) )
			{ return FALSE; }

		if ( !View( GetSelected,SelectedImages ) )
			{ return Warning( ~There are no images selected~ ); }

		if ( !SelectedImages( GetFirst,Item ) )
			{ return Warning( ~There are no images selected~ ); }

		OrderID = ~<$con.Item[OrderID]>~;
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( ~There is no order specified~ ) );
	}
	
	Action = ACTION DOC ( Navigator OpenOnce FrameSelectorDoc "HandleOrderIDReturnKey(~<OrderID>~);" );
	return PerformActions( Action );
}

NUMERIC ActivateAnalyzer()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );

		if ( !Defined( View ) )
			{ return FALSE; }

		View( GetName,OrderID );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );

		if ( !Defined( View ) )
			{ return FALSE; }

		if ( !View( GetSelected,SelectedImages ) )
			{ return Warning( ~There are no images selected~ ); }

		if ( !SelectedImages( GetFirst,Item ) )
			{ return Warning( ~There are no images selected~ ); }

		OrderID = ~<$con.Item[OrderID]>~;
	}

	if ( IsNull(~<OrderID>~) )
	{
		return Warning( Translate( ~There is no order specified~ ) );
	}

	Actions = ACTION DOC ( ~Analyzer~ OpenOnce Analyzer "Initialize( ~Analyzer~,~<OrderID>~ );" );

	return PerformActions( Actions );
}

VOID	CustomDisplayStatusChoicesBegin(&ListMenu,&Count)	{ } // Override to add custom update choices
VOID	CustomDisplayStatusChoiceEnd(&ListMenu,&Count)		{ } // Override to add custom update choices


NUMERIC DisplayStatusChoices()
{
	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;
	
	CustomDisplayStatusChoicesBegin(ListMenu,Count);

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Scan - the frames need scanning~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Scan,1); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Scan - the frames do not need scanning~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Scan,0); ) );	

	GenCon( NULL1,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Retouch~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Retouch - the images needing retouching~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Retouch,1); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Retouch  - the images do not need retouching~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Retouch,0); ) );	

	if ( <EnableKpars> )
	{
	GenCon( NULL2,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~AutoRetouch Review - add images to the Auto Retouch Review Queue~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( SendToKarsReview(); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~AutoRetouch Batch - add images to the Auto Retouch Batch Queue~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( SendToKarsBatch(); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear AutoRetouch - remove images from Auto Retouch table~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( RemoveSelectedFromKars(); ) );	
	
	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~AutoRetouch - set workstation for operations~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( SetKarsReviewWorkstation(); ) );
	}


	GenCon( NULL3,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Imported image was color~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( ChangeColorType(1) ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Imported image was Black and White~,
			IDText,		~ID~,
			ActionsText, ACTION Exec (  ChangeColorType(2) ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Imported image was Black and White with Spot Color~,
			IDText,		~ID~,
			ActionsText, ACTION Exec (  ChangeColorType(3) ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Imported image was Sepia~,
			IDText,		~ID~,
			ActionsText, ACTION Exec (  ChangeColorType(4) ) );	

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Imported image was Sepia with Spot Color~,
			IDText,		~ID~,
			ActionsText, ACTION Exec (  ChangeColorType(5) ) );	

	GenCon( NULL4,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Auto &Balance - the images need auto balancing~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( SetAutoBalanceFlag(); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear Auto &Balance - the images do not need auto balancing~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(AutoBalance,0); ) );	

	GenCon( NULL5,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Ad&just - the images need adjustment or cropping~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Inspect,1); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear Adjust - the images do not need adjustment~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Inspect,0); ) );	

	GenCon( NULL6,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Use Scanner Color Offsets from database to scan the images~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(UseOverrides,1); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Use Scanner Color Offsets from database to scan the images~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(UseOverrides,0); ) );

	GenCon( NULL7,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Reject - the images will be ignored~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Rejected,1); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Reject - the images will not be ignored~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( UpdateImages(Rejected,0); ) );

	GenCon( NULL8,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Reset - reset the processed flag for the selected raw image(s)~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( ResetProcessedFlag() ) );

	GenCon( NULL9,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Path - forget the path to the image~,
			IDText,		~ID~ );

	ActionsText = ACTION Exec ( UpdateImages(Path,~~); );	

	Choice<Count>( SetValuesFrom,ActionsText,ActionsText );

	// Avaliable for Grid only
	if ( !<ViewIsImages> )
	{
		GenCon( NULL10,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~~,
				IDText,		~NULL~ );

IF 0
{
// TBD - Future Implementation
		GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~&Frame - renumber frame numbers~,
				IDText,		~ID~ );

		ActionsText = ACTION Exec ( RenumberImageField(Frame); );	

		Choice<Count>( SetValuesFrom,ActionsText,ActionsText );
}

		GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~&Punch - renumber punch numbers~,
				IDText,		~ID~ );

		ActionsText = ACTION Exec ( RenumberImageField(Punch); );	

		Choice<Count>( SetValuesFrom,ActionsText,ActionsText );
	}
	
	CustomDisplayStatusChoiceEnd(ListMenu,Count);

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( DisplayMenu,ListMenu );

	return TRUE;
}


NUMERIC UpdateImages( Field,Value,DontAsk,UpdateMsg )
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no Images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	if ( !DefinedAndNotNull(DontAsk) )
	{
		msg = ~Are you sure you want to update the <count> selected images?~;
		if ( !SimilarStr( ~<UpdateMsg>~,~~ ) )
		{
			msg = ~<UpdateMsg>~ + ~\n\n~ + ~<msg>~;
		}

		if ( MessageBox( ~<msg>~,YESNO ) == NO )
			{ return TRUE; }
	}

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	if ( !View( IsGridView ) )
	{
		if ( IsNull( ~<Value>~ ) )
		{
			Value = ~NULL~;
		}
	}

	while ( SelectedImages( GetNext,Image ) )
	{
		if ( View( IsGridView ) )
		{
			View( SetCellValue,Image(GetRow),~<Field>~,~<Value>~ );
		}
		else
		{		
			Key = STR ( OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

			Cmd = ~Update Images Set <Field>=<Value> Where <Key>~;

			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				dBase( GetErrorDescription,theErr );
				Warning( ~Update Failed.  <Cmd>.  <theErr>~ );
				break;
			}

			if ( Image( GetThumbNailInfo,ThumbNail ) )
			{
				if ( ~<Field>~ == ~Rejected~ )
				{
					ThumbNail( Set,IsDeleted,~<Value>~ );
					View( RedrawThumbNail,ThumbNail,FALSE,FALSE );
				}
				else if ( ~<Field>~ == ~Path~ )
				{
					if ( ~<Value>~ == ~NULL~ )
					{
						ThumbNail( Set,Path,~<Value>~ == ~NULL~ ? ~~ : ~<Value>~ );
						View( RedrawThumbNail,ThumbNail,TRUE );	
					}
				}
				else if ( ~<Field>~ == ~FDAFailed~ )
				{
					ThumbNail( Set,FDAFailed,~<Value>~ );
					View( RedrawThumbNail,ThumbNail,FALSE );
				}
			}
		}
	}

	return TRUE;
}


NUMERIC SetAutoBalanceFlag()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no Images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	msg = ~Are you sure you want to update the <count> selected images?~;
	if ( MessageBox( ~<msg>~,YESNO ) == NO )
		{ return TRUE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	if ( !View( IsGridView ) )
	{
		if ( IsNull( ~<Value>~ ) )
		{
			Value = ~NULL~;
		}
	}

	CompKey = ~( Brt <> 0 OR Red <> 0 OR Grn <> 0 OR Blu <> 0 OR CompBrt <> 0 OR CompRed <> 0 OR CompGrn <> 0 OR CompBlu <> 0)~;
	CompositeCounter = 0;

	while ( SelectedImages( GetNext,Image ) )
	{
		if ( View( IsGridView ) )
		{
			View( SetCellValue,Image(GetRow),~AutoBalance~,~1~ );
		}
		else
		{		
			Key = STR ( OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

			compQuery = ~Select Count(*) from CompSbaData Where <Key> AND <CompKey>~;
			dBase( GetValuesFor, ~<compQuery>~, compCount );
			if ( <compCount> > 0 )
			{
				<++CompositeCounter>;
				continue;
			}

			Cmd = ~Update Images Set AutoBalance=1 Where <Key>~;

			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				dBase( GetErrorDescription,theErr );
				Warning( ~Update Failed.  <Cmd>.  <theErr>~ );
				break;
			}

		}
	}

	if ( <CompositeCounter> > 0 )
	{
		msg = ~Auto Balance could not be enabled for <CompositeCounter> images because they have already been run through the Composite SBA.\n
			      To run the standard SBA,\n  reset the image adjustments to 0 and\n  delete the corresponding rows from the CompSbaData table. ~ ;
		Warning( ~<msg>~ );
	}

	return TRUE;
}

NUMERIC ChangeColorType( Value )
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no Images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	msg = ~Are you sure you want to update the <count> selected images?~;
	if ( MessageBox( ~<msg>~,YESNO ) == NO )
		{ return TRUE; }

	if ( !View( IsGridView ) )
	{
		if ( IsNull( ~<Value>~ ) )
		{
			Value = ~NULL~;
		}
	}

	while ( SelectedImages( GetNext,Image ) )
	{
		if ( View( IsGridView ) )
		{
			View( SetCellValue,Image(GetRow),~ColorType~,~<Value>~ );
		}
		else
		{		
			ImagePath = ~<$con.Image[Path]>~;

			ImageCorrections( UpdateColorType,~<ImagePath>~,<Value> );
			
			if ( !ImageCorrections( GetCurrentCorrections,~<ImagePath>~,theCorrections ) )
			{
				return FALSE;
			}
			
			colorType = Numeric(~<$con.theCorrections[ColorType]>~);
			orgApplyShasta = ~<$con.theCorrections[orgApplyShasta]>~;
			applyShasta = ~<$con.theCorrections[ApplyShasta]>~;
			changed = <orgApplyShasta> != <applyShasta>;

			Actions = ACTION Doc ( EditImagesDoc3 "UpdateColorTypeOptions( <colorType>,<applyShasta> );" );
			PerformActions( Actions );
			
			Actions = ACTION Doc ( EditImagesDoc3 "SetApplyShasta(<applyShasta>,<changed>,<colorType>);" );
			PerformActions( Actions );
		}
	}

	return TRUE;
}


NUMERIC SetOrderStatus()	
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	View( GetName,OrderID );

	if ( IsNull( ~<OrderID>~ ) ) { return FALSE; }

	ImagesThumbNailWindow( GetWindowPosition,Left,Top);

	Actions = ACTIONS ( Doc( ~SetOrderStatusDoc~ Open SetOrderStatusDoc "Init( ~<OrderID>~,~<Left>~,~<Top>~ );" ) );
	return PerformActions( Actions );
}


NUMERIC SendOrderID( WhichDoc,WhichRoutine )	// CALLED FROM OTHER SCRIPTS
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	View( GetName,OrderID );

	if ( IsNull( ~<OrderID>~ ) ) { return FALSE; }

	Actions = ACTION DOC ( <WhichDoc> "<WhichRoutine>( ~<OrderID>~ )" );

	return PerformActions( Actions );
}


NUMERIC SendImageData( WhichDoc,WhichRoutine,Arg1 )	// CALLED FROM OTHER SCRIPTS
{
	WhichWindow = <ViewIsImages> ? ThumbNail : Data;

	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		return FALSE;
	}

	if ( !Defined( View ) )
		{	return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{	return FALSE;	}

	Count = SelectedImages( ChildCount );
	if ( <Count> == 0 || <Count> > 1 )
		{	return FALSE;	}

	SelectedImages( GetFirst,Image );

	Actions = ACTION DOC ( <WhichDoc> "<WhichRoutine>( ~<Arg1>~,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~ )" );

	return PerformActions( Actions );
}

NUMERIC SetPunchToFrame()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	if ( MessageBox( ~Are you sure you want to update the <count> selected images? ~,YESNO ) == NO )
		{ return TRUE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	while ( SelectedImages( GetNext,Image )   )
	{
		if ( View( IsGridView ) )
		{
			View( SetCellValue,Image(GetRow),~Punch~,~<Value>~ );
		}
		else
		{		
			Key = STR ( OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

			Cmd = ~Update Images Set Punch=Frame Where <Key>~;

			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				dBase( GetErrorDescription,theErr );
				Warning( ~Update Failed.  <Cmd>.  <theErr>~ );
				break;
			}
		}
	}

	return TRUE;
}


NUMERIC RemakeAffectedOrderItems()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	if ( MessageBox( ~Are you sure you want to remake order items using the <count> selected images? ~,YESNO ) == NO )
		{ return TRUE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	while ( SelectedImages( GetNext,Image )   )
	{
		RemakeItemsUsing(~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~ );
	}

	return TRUE;
}


NUMERIC RenumberImageField( Field )
{
	DatabaseFile = ~Order Images~;
	StartValue = ~0~;
	IncrementValue = ~1~;

	if ( <ViewIsImages> )
		{ return Warning( Translate( ~Punch fields are renumbered using the grid view.~ ) ); }
// TBD - Future		{ return Warning( Translate( ~Frame/Punch fields are renumbered using the grid view.~ ) ); }

	ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );

	if ( !Defined( View ) )
		{ return Warning( Translate( ~Unable to obtain grid values.~ ) ); }

	ViewAddr = View( GetObject );

	if ( View( PendingChanges ) )
		{ return Warning( Translate( ~Please save current changes in the grid view before renumbering any fields.~ ) ); }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( Translate( ~There are no images selected.~ ) ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( Translate( ~There are no images selected.~ ) ); }

	if ( !SelectedImages( GetFirst, Image ) )
		{ return Warning( Translate( ~Unable to get the first image record.~ ) ); }

	if ( !Image( GetValues, ~<Field>~, StartValue ) )
		{ return Warning( Translate( ~Could not obtain the value for the field "<Field>" in the database "<DatabaseFile>".~ ) ); }

	// Create and display dialog

	ImagesDataWindow( EnableWindow, FALSE );

	ForgetGlobal( DlgRenumImgFieldDefinition,DlgRenumImgFldData, RenumImgDlg );

	if ( !DictionaryExists( RenumImgFieldDialog ) )
	{
		Dictionary: RenumImgFieldDialog

			Fields: Name	theField		type text;
			Fields: Name	theValue		type text;
			Fields: Name	theIncrement	type long;
	}

	Define: DlgRenumImgFldData Using RenumImgFieldDialog;

	TitleStaticTextWidth	= 250;	TitleStaticTextHeight	= 20;
	StaticTextWidth			= 100;	StaticTextHeight		= 20;
	TextWidth				= 100;	TextHeight				= 20;
	x						= 4;	y						= 15;
	vGap					= $y;	hGap					= $x;
	ButtonWidth				= 55;	ButtonHeight			= 20;

	Define: DlgRenumImgFieldDefinition	Using	DDWinDef
            Fields:	TypeName			Dialog
					Position			180, 180, 240, 200
                    Title				Translate( ~Renumber <DatabaseFile> Field~ )
					WantsMinimizeBox	FALSE
                    OACTIONSTEXT		ACTION EXEC ( RenumImgFieldCloseDialog(); )
					HACTIONSTEXT		ACTION SHOWHELPPAGE ( KPISHelpFile "RenumImgField.htm" );

		Contains: InListOrder
		{
			Define: TitleTxt			Using	DDWinCtrlDef	AsSymbol	TitleTxt
				Fields: TypeName		StaticText
						Text			~Renumber <Field> field:~
						Position		$x,$y,$TitleStaticTextWidth, $TitleStaticTextHeight ;

			Define: ValueStaticText		Using	DDWinCtrlDef	AsSymbol	ValueStaticText
				Fields: TypeName		StaticText
						Text			Translate( ~Start Value:~ )
						RightJustified	TRUE
						Position		TitleTxt(GetLeft,Position),
										TitleTxt(GetBottom,Position) + $vGap,
										$StaticTextWidth, $StaticTextHeight ;
			
			Define:	ValueText			Using	DDWinCtrlDef	AsSymbol	ValueText
				Fields:	TypeName		MaskedEditText
						Position		ValueStaticText(GetRight,Position) + $hGap,
										ValueStaticText(GetTop,Position),
										$TextWidth, $TextHeight
						GenConName		THIS
						GenConField		~theValue~
						IActionsText	~[Get]~
						DActionsText	~[Save]~
						OActionsText	~[Save]~
						IsTabStop		T
                        Tooltip			~The starting value to renumber the specified database field~
						Mask			~#####~
						PromptChar		~ ~ ;

			Define: IncrementStaticText	Using	DDWinCtrlDef	AsSymbol	IncrementStaticText
				Fields: TypeName		StaticText
						Text			Translate( ~Increment Value:~ )
						RightJustified	TRUE
						Position		ValueStaticText(GetLeft,Position),
										ValueStaticText(GetBottom,Position) + $vGap,
										$StaticTextWidth, $StaticTextHeight ;
			
			Define: IncrementText		Using	DDWinCtrlDef	AsSymbol	IncrementText
				Fields:	TypeName		MaskedEditText
						Position		IncrementStaticText(GetRight,Position) + $hGap,
										IncrementStaticText(GetTop,Position),
										$TextWidth, $TextHeight
						GenConName		THIS
						GenConField		~theIncrement~
						IActionsText	~[Get]~
						DActionsText	~[Save]~
						OActionsText	~[Save]~
						IsTabStop		TRUE
                        Tooltip			~The increment value to renumber the database field~
						Mask			~#####~
						AllowedChars	~-~
						PromptChar		~ ~ ;

			Define: RenumImgFldOKButton	Using	DDWinCtrlDef	AsSymbol	RenumImgFldOKButton
				Fields: TypeName		DefaultButton
						Text			Translate(GenButtonText,OK)
						Position		IncrementStaticText(GetLeft, Position) + 50,
										IncrementStaticText(GetBottom,Position) + $vGap*2,
										$ButtonWidth, $ButtonHeight
						DActionsText	ACTION EXEC ( OnRenumberImgFldOKButton( <ViewAddr> ) )
						IsTabStop		TRUE
						IsEnabled		TRUE
						Tooltip			Translate( ~Renumber the database fields~ );

			Define: RenumImgFldCancelButton	Using	DDWinCtrlDef	AsSymbol	RenumImgFldCancelButton
				Fields: TypeName		Button
						Text			Translate(GenButtonText,Cancel)
						Position		RenumImgFldOKButton(GetRight, Position) + $hGap*2,
										RenumImgFldOKButton(GetTop,Position) ,
										$ButtonWidth, $ButtonHeight
						DActionsText	ACTION EXEC ( RenumImgFieldCloseDialog() )
						IsTabStop		TRUE
						IsEnabled		TRUE
						Tooltip			Translate( ~Cancel renumbering the database fields~ );
		};

	GenDlg(RenumImgDlg, Definition, DlgRenumImgFieldDefinition, Data, DlgRenumImgFldData, Document,$Doc.This, New, Temporary);
	RenumImgDlg( SetStrings, theField, ~<Field>~, theValue, ~<StartValue>~, theIncrement, ~<IncrementValue>~ );

	Global(RenumImgDlg, DlgRenumImgFieldDefinition, DlgRenumImgFldData);

	return TRUE;
}


NUMERIC OnRenumberImgFldOKButton( ViewAddr )
{
	GenCon( Dataview,Is,~<ViewAddr>~ );

	if ( !DataView( IsGridView ) )
		{ return Warning( Translate( ~Renumbering can only be used with database grid views.~ ) ); }

	if ( DataView( PendingChanges ) )
		{ return Warning( Translate( ~Please save current changes in the grid view before renumbering any fields.~ ) ); }

	if ( !DataView( GetSelectedRows,SelectedRows ) ) 
		{ return Warning( Translate( ~Unable to get selected rows.~ ) ); }

	count = SelectedRows( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There are no rows selected.~ ) ); }

	Field = ~<$con.DlgRenumImgFldData[theField]>~;
	StartValue = ~<$con.DlgRenumImgFldData[theValue]>~;
	IncrementValue = ~<$con.DlgRenumImgFldData[theIncrement]>~;

	if ( !SelectedRows( GetFirst, Image ) )
		{ return Warning( Translate( ~Unable to get the first image record.~ ) ); }

	if ( !Image( GetValues, ~<Field>~, TestStartValue ) )
		{ return Warning( Translate( ~The field "<Field>" does not exist in the grid view.~ ) ); }

	if ( !SelectedRows( RewindList ) )
		{ return Warning( Translate( ~Unable to rewind back to first selected row of the grid view.~ ) ); }

	mesg = ~Are you sure you want to update the <Field> field for the <count> selected images\n~;
	mesg = ~<mesg>~ + ~starting with a value of <StartValue> and incrementing by <IncrementValue>? ~;

	if ( MessageBox( ~<mesg>~, YESNO ) == NO )
		{ return Warning( Translate( ~Renumbering of <Field> field aborted.~ ) ); }

	FirstRecord = TRUE;
	len = strlen( ~<StartValue>~ );

	while ( SelectedRows( GetNext,Image )   )
	{
		if ( DataView( IsGridView ) )
		{
			DataView( SetCellValue, Image(GetRow), ~<Field>~, ~<StartValue>~ );
		}
		StartValue = <StartValue> + <IncrementValue>;
		StartValue = Format( ~<StartValue>~,~%0<len>ld~ );
	}

	RenumImgFieldCloseDialog();

	return TRUE;
}


VOID RenumImgFieldCloseDialog()
{
	ImagesDataWindow( EnableWindow, TRUE );

	if ( Defined( RenumImgDlg ) )
	{
		ForgetGlobal( RenumImgDlg );
	}
}


NUMERIC AddThumbNailToSelectedImages(DontAsk)
{
	WhichWindow = <ViewIsImages> ? ThumbNail : Data;

	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	size = ~<$SystemSettings.Thumbnail[Size]>~;
	compressionQuality = ~<$SystemSettings.Thumbnail[Quality]>~;

	size = IsNULL( ~<size>~ ) ? ~500~ : ~<size>~;
	compressionQuality = IsNULL( ~<compressionQuality>~ ) ? ~100~ : ~<compressionQuality>~;

	Count = SelectedImages( ChildCount );
	
	if (!Numeric(~<DontAsk>~))
	{
		if ( MessageBox( Translate(~Are you sure you want to add thumbnail images to the <Count> selected images? ~),YESNO ) == NO )
			{ return TRUE; }
	}

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	WaitCursor( Begin );

	while ( SelectedImages( GetNext,Image ) )
	{
		Images<WhichWindow>Window( StatusBar,Text,Translate( ~Adding Thumbnail image to <$con.Image[Path]>~ ));

		BroadcastMessageToAllViews( ReleaseImageChain,~<$con.Image[Path]>~ );
		CloseWindowOfPath( ~<$con.Image[Path]>~ );

		FileType = ~~; Width = Length = PreviewWidth = PreviewLength = 0;
		ColorType = 0;

		if ( !IsNull(~<$con.Image[Path]>~) )
		{
			if ( AddThumbNailToImage( ~<$con.Image[Path]>~,<size>,<compressionQuality>,FileType,Width,Length,PreviewWidth,PreviewLength,NULL,ColorType ) > 0 )
			{ 
				Key = STR ( OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

				SizeFields	= ~Width=<Width>,PreviewWidth=<PreviewWidth>,Length=<Length>,PreviewLength=<PreviewLength>,ColorType=<ColorType>~;

				//if ( <ColorType> == 2 )
				//{
				//	SizeFields = ~<SizeFields>,ICCProfile = 'srgb'~;
				//}

				InsertCmd	= ~Update Images Set Filetype='<Filetype>',<SizeFields> Where <Key>~;

				if ( !dbase( CMD,~<InsertCmd>~ ) )
				{
					dbase( GetErrorDescription,theErr );
					WaitCursor( End );
					return Warning( Translate( ~Database update failed. <InsertCmd>. <theErr>~ ) );
				}

				if ( View( IsThumbNailView ) )
				{
					ForgetLocal( ThumbNail );

					if ( Image( GetThumbNailInfo,ThumbNail ) )
					{
						View( RedrawThumbNail,ThumbNail,TRUE );
					}
				}
			}
			else
			{
				ImagesThumbNailWindow( RefreshWindow,TRUE );
				WaitCursor( End );
				return Warning( Translate( ~Stopping.  Failed to add a thumbnail to <$con.Image[OrderID]>/<$con.Image[Roll]>/<$con.Image[Frame]>\n\n<$con.Image[Path]>~ ) );
			}
		}
	}

	WaitCursor( End );

	ImagesThumbNailWindow( RefreshWindow,TRUE );

	Images<WhichWindow>Window( StatusBar,Text,Translate( ~Finished adding thumbnail(s)~ ));

	return TRUE;
}

NUMERIC AddThumbNailClearRotation()
{
	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		Log( Session, ~ClearRotateInSelectedImages(): Unable to connect to the database. <theError>~ );
		Warning(~Unable to connect to the database while updating thumbnails and clearing the rotation~);
		return 0;
	}  
	
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	WaitCursor( Begin );
	
	count = SelectedImages(ChildCount);
	
	if ( MessageBox( Translate(~Are you sure you want to add thumbnail images and clear the DP2 rotation to the <Count> selected images? ~),YESNO ) == NO )
		{ return TRUE; }
	
	OKCount = 0;
	if (!ClearRotateInSelectedImages(dBase,SelectedImages,OKCount))
	{
		if (<OKCount> != <count>)
		{
			imagesNotDone = <count> - <OKCount>;
			Warning(~Rotate cleared in <okCount> images.  Rotate not cleared in <imagesNotDone>.  No thumbnails were added~); 
			return 0;
		}
	
	}
	DontAsk = 1;
	AddThumbnailToSelectedImages(<DontAsk>);
	
	WaitCursor( End );
	
	return 1;
}

NUMERIC ClearRotateInSelectedImages(&dbase,&SelectedImages, &OKCount)
{
	count = SelectedImages(ChildCount);
	OKCount = 0;
	haveError = 0;
	while ( SelectedImages( GetNext,Image ) )
	{
		Path = ~<$con.Image[Path]>~;

		if ( !IsNull(~<Path>~) )
		{	
		
			Cmd = ~Update Images Set RotateFromDisk = 0  Where Path = '<Path>'~;

			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				dBase( GetErrorDescription,theErr );
				Log( Session, ~Update Failed.  <Cmd>.  <theErr>~ );
				haveError = 1;
				break;
			}
			++OKCount;
		}			
		ImageCorrections( Requery,~<Path>~);
	}
	return (<haveError> == 0);
}



NUMERIC SetInputProfileForImages()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,ImagesToSetProfileFor ) )
		{ return Warning( ~There were no images selected~ ); }

	Count = ImagesToSetProfileFor( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	ImagesToSetProfileFor( GetFirst,Image );

	ImageCorrections( GetInputProfileName,~<$con.Image[Path]>~,ProfileName );

	AllTheSame = ImagesToSetProfileFor( HaveSameProfile );

	Query = ~Select Device,Name,Path From Profiles Where (Type = 'Input' OR Type = 'WorkingSpace') Order By Device,Name~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Profiles table: <Query>. <theErr>~ );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		GenCon( Profile<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~&<Count>)  <$pcon.Item[Name]>~,
				IDText,		~ID~,
				IsChecked,	(<AllTheSame> && SimilarStr(~<$pcon.Item[Name]>~,~<ProfileName>~)) ? T : F );

		theAction = ACTION EXEC ( WantProfile(~<$pcon.Item[Name]>~) );

		Profile<Count>( SetValuesFrom,ActionsText,theAction );

		ListMenu( InsertBack,Profile<Count> );
	}

	GenCon( Profile<++Count>,New,DDMenuItemDef,SetValues,
			Text,		~&<Count>)  Use Embedded Input Profile if Available or Default Input Profile if not Available~,
			IDText,		~ID~,
			IsChecked,	(<AllTheSame> && ~~ == ~<ProfileName>~) ? T : F );

	theAction = ACTION EXEC ( WantProfile(~~); );

	Profile<Count>( SetValuesFrom,ActionsText,theAction );
		
	ListMenu( InsertBack,Profile<Count> );

	View( DisplayMenu,ListMenu );

	return TRUE;
}



NUMERIC WantProfile( ProfileName)
{
	WhichWindow = <ViewIsImages> ? ThumbNail : Data;

	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,ImagesToSetProfileFor ) )
		{ return Warning( ~There were no images selected~ ); }

	Count = ImagesToSetProfileFor( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	while ( ImagesToSetProfileFor( GetNext,Image ) )
	{
		SetInputProfile( ~<ProfileName>~,~~,
							~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~,
								~<$con.Image[Path]>~ );

		if ( !ImagesThumbNailWindow( FindI,ViewDataFor,~<$con.Image[OrderID]>~,Where,View ) )
			{ return FALSE; }

		if ( View( FindI,Key,~OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~,Where,DuplicateImage ) )
		{ 
			DuplicateImage( Set, Info3, ~<$con.Image[SubjectID]>  <$con.Image[Path]>~ );
			DuplicateImage( Set, Info4, ~<ProfileName>~ );
		}

		if ( ~<ProfileName>~ == ~~ )
			{ Images<WhichWindow>Window( StatusBar,Text,~Profile set to None for <$con.Image[OrderID]>/<$con.Image[Roll]>/<$con.Image[Frame]>~ ); }
		else
			{ Images<WhichWindow>Window( StatusBar,Text,~Profile set to <ProfileName> for <$con.Image[OrderID]>/<$con.Image[Roll]>/<$con.Image[Frame]>~ ); }
	}

	if ( ~<ProfileName>~ == ~~ )
		{ Images<WhichWindow>Window( StatusBar,Text,~<Count> images were set to None~ ); }
	else
		{ Images<WhichWindow>Window( StatusBar,Text,~<Count> images were set to <ProfileName>~ ); }


	return TRUE;
}


NUMERIC OpenMultipleImages( Path,OrderID,Roll,Frame )
{
	WhichWindow = <ViewIsImages> ? ThumbNail : Data;

	if ( ~<Path>~ == ~~ )
		{ return Images<WhichWindow>Window( StatusBar,Text,Translate( ~No image exists for <OrderID>, <Roll>, <Frame>~ ) ); }

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( !Window( GetNext,aView ) )
			continue;

		aView( Get,ViewType,ViewType );

		if ( ~<ViewType>~ == ImageView || ~<ViewType>~ == ImageEditView || ~<ViewType>~ == ~PIEEditView~)
		{
			aView( GetDocumentPath,DocumentPath );

			if ( ~<DocumentPath>~ == ~<Path>~ )
			{ 
				Window( SetWindowOrder,Top );
				return TRUE;
			}
		}
	}

	if (!GenCon( Info,New,DDDocumentInfo ) )
		{ return Warning( ~Could not create document info for <Path>~ ); }

	Info( SetValues,OrderID,~<OrderID>~,Roll,~<Roll>~,Frame,~<Frame>~ );

	if ( GenCon( ViewGenCon,GetFrom,ImageEditView,~[UI Windows ImageEditWindow]~ ) )
	{
		ViewGenCon( SetValue,ChromaKeyMaskState,<fChromaKeyMaskState> );

		if ( <fChromaKeyFillColorValue> == 1 )
		{
			ViewGenCon( SetValue,ChromaKeyBGColor,~255 0 0~);
		}
		else if ( <fChromaKeyFillColorValue> == -1 )
		{
			ViewGenCon( SetValue,ChromaKeyBGColor,~<fChromaKeyFillColorRed> <fChromaKeyFillColorGreen> <fChromaKeyFillColorBlue>~ );
		}
		else
		{
			ViewGenCon( SetValue,ChromaKeyBGColor,~160 160 160~ );
		}

		ViewGenCon( SetValue,ChromaKeyBGImageID,~<fChromaKeyBGImageID>~ );
	}

	if (!Document( aLayout,Open,~<Path>~,Image,~~,Info ) )
		{ return Warning( ~Could not open <Path>~ ); }

	if ( GenCon( ViewGenCon,GetFrom,ImageEditView,~[UI Windows ImageEditWindow]~ ) )
	{
		ViewGenCon( SetValue,ChromaKeyMaskState,1 );
		ViewGenCon( SetValue,ChromaKeyBGColor,~160 160 160~ );
		ViewGenCon( SetValue,ChromaKeyBGImageID,~~ );
	}

	return TRUE;
}

LastImagePath = ~~;

NUMERIC OpenAnImage( Path,OrderID,Roll,Frame )
{
	if ( !Files( FileExists,~<Path>~ ) )
		{ return Warning( ~Could not open <Path>~ ); }

	if (!GenCon( Info,New,DDDocumentInfo ) )
		{ return Warning( ~Could not create document info for <Path>~ ); }

//	if (!GenCon( ImageInfo,New,DDScannerImageData ) )
//		{ return Warning( ~Could not create image info for <Path>~ ); }

	Info( SetValues,OrderID,~<OrderID>~,Roll,~<Roll>~,Frame,~<Frame>~ );

//	ImageInfo( SetValue, Path, ~<Path>~);

	StatusBarText( ~Order <OrderID>  Roll <Roll>   Frame <Frame>.   <Path>~ );

	Document( Doc );

	TopMostWindow = ~~;

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )	// TRY TO BRING EXISTING WINDOW TO FRONT
	{
		if ( !Window( GetNext,aView ) )
			continue;

		aView( Get,ViewType,ViewType );

		if ( ~<ViewType>~ == ImageView || ~<ViewType>~ == ImageEditView || ~<ViewType>~ == PIEEditView)
		{
			aView( GetDocumentPath,DocumentPath );

			if ( ~<DocumentPath>~ == ~<Path>~ )
			{ 
				Window( SetWindowOrder,Top );
				return TRUE;
			}

			if ( IsNULL( ~<TopMostWindow>~ ) )
			{
				TopMostWindow = ~<DocumentPath>~;
			}
		}
	}

	if ( KeyState( LSHIFT ) || KeyState( RSHIFT ) )		// OPEN A NEW WINDOW NO MATTER WHAT?
	{
		if ( !Doc( Open,~<Path>~,Image,~~,Info ) )
		{ 
			return Warning( Translate( ~Could not open <Path>~ ) );
		}

		return TRUE;
	}

	if ( ~<TopMostWindow>~ != ~~ )
	{
		if ( Doc( FindByPath,~<TopMostWindow>~ ) )			// REPLACE THE TOP MOST WINDOWS CONTENTS
		{
			ImageCorrections( Free,~<LastImagePath>~ );
			ImageCorrections( GetAndFreeWhenLastView,~<Path>~ );				// NEED THIS TO RECEIVE CROP UPDATES
			LastImagePath = ~<Path>~;
//			return Doc( ReplaceImage,~<Path>~,Info, ImageInfo );
			return Doc( ReplaceImage,~<Path>~,Info );
		}
	}

	// IF ALL ELSE FAILS, JUST OPEN THE DARN THING.

	ImageCorrections( Free,~<LastImagePath>~ );

	if ( !Doc( Open,~<Path>~,Image,~~,Info ) )
	{ 
		return Warning( ~Could not open <Path>~ );
	}

	ImageCorrections( GetAndFreeWhenLastView,~<Path>~ );	// NEED THIS TO RECEIVE CROP UPDATES

	LastImagePath = ~<Path>~;

	return TRUE;
}


NUMERIC OpenSelectedImages( WantOpenMultiple,FromDoubleClick )
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( <FromDoubleClick> )
	{
		if ( View( IsCropMode ) )
		{
			if ( KeyState( SHIFT ) || KeyState( CONTROL ) )
			{
				return FALSE;
			}
		}
	}

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There were no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	MaxOpenImages = ~<$[Symbols].MaxOpenImages[Long]>~;

	if ( <MaxOpenImages> < 1 )
	{ 
		MaxOpenImages = 1;
	}

	while ( SelectedImages( GetNext,Image ) )
	{
		if ( NumWindows( SingleImageEdit ) >= <MaxOpenImages> )
		{
			Warning( Translate( ~You can only have <MaxOpenImages> images open at a time~ ) );
			break;
		}

		if ( <Count> == 1 && !<WantOpenMultiple> )
		{
			OpenAnImage( ~<$con.Image[Path]>~,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~ );	
		}
		else
		{
			OpenMultipleImages( ~<$con.Image[Path]>~,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~ );	
		}
	}

	Queue(~ImagesThumbNailWindow( SetWindowOrder,Top );~);

	return TRUE;
}


// "Remove", "Delete", Delete Key, or R from Thumbnail view
NUMERIC RemoveSelectedImages( DeleteImageFile )
{
	WhichWindow = <ViewIsImages> ? ThumbNail : Data;
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There are no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	DeleteAction = <DeleteImageFile> ? ~remove from the database and actually delete~ : ~remove from the database~;

	if ( MessageBox( ~Are you sure you want to <DeleteAction> the <Count> selected image(s)? ~,YESNO ) == NO )
		{ return TRUE; }

	DeleteRawImageFile = FALSE;
	DeleteKparsOriginals = FALSE;
	if ( <DeleteImageFile> )
	{
		if ( MessageBox( ~You are about to delete the <Count> image file(s) associated with each frame.\n\nAre you really sure you want to delete the images? ~,YESNO,ICONQUESTION ) == NO )
			{ return TRUE; }

		if ( MessageBox( Translate(ImagesMessages,DeleteRawImagesToo),YESNO ) == YES )
			{ DeleteRawImageFile = TRUE; }

		if ( MessageBox( Translate(ImagesMessages,DeleteKparsImagesToo),YESNO ) == YES )
			{ DeleteKparsOriginals = TRUE; }

		if ( !SelectedImages( RewindList ) )
			{ return Warning( Translate( UIMessages,RewindViewListFailed ) ); }
	}

	if (!DeleteSelectedImages(dbase,SelectedImages,<DeleteImageFile>,<DeleteRawImageFile>,<DeleteKparsOriginals>,Images<WhichWindow>Window))
	{	return FALSE;	}

// need to remove thumbnail for each image
		if ( <ViewIsImages> )
		{
			RemoveThumbnailByOrderRollFrame( View,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~ );
		}

	if ( <ViewIsImages> )
	{
		View( RefreshView );
	}

	return TRUE;
}


NUMERIC ChangeRecord()
{
	if ( !ImagesDataView( GetChangedRow,ChangedImage,OrigImage,ChangedRow,IsNewRow ) )
		{ return Warning( Translate( ~There was no changed row.~ ) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$con.ChangedImage[OrderID]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Order ID cannot be blank.~ ) ); }

	if ( ~<$con.ChangedImage[Roll]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Roll cannot be blank.~ ) ); }

	if ( ~<$con.ChangedImage[Frame]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Frame cannot be blank.~ ) ); }

	Key = ~OrderID = '<$con.OrigImage[OrderID]>' AND Roll = '<$con.OrigImage[Roll]>' AND Frame = '<$con.OrigImage[Frame]>'~;

	Query = ~Select * From Images Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed: <Query>. <theErr>~ ) );
	}

	if ( !List( UpdateFrom,ChangedImage,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( ~Could not update Image record where <Key>. <theErr>~ );
	}

	// DPT 02/18/04
	// Commented out the following lines since this causes a refresh for each record changed.  This
	// is inefficient if there are many records that have changed.
	//if ( ~<$con.OrigImage[Frame]>~ != ~<$con.ChangedImage[Frame]>~ )
	//{
	//	OrigImage( NotifyAffectedDocuments,~Frame~ );
	//}

	ImagesDataView( CommitChanges );

	return TRUE;
}




// "Remove","Delete", [Delete] or DeleteRecordActionsText from Data window
NUMERIC DeleteRecord( DeleteImageFile )
{
	WhichWindow = <ViewIsImages> ? ThumbNail : Data;

	if ( !ImagesDataView( GetSelectedRows,ImagesToDelete ) )		
		{ return Warning( Translate( ~There were no rows selected to delete~ ) ); }

	Count = ImagesToDelete( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}

	DeleteAction = <DeleteImageFile> ? ~remove from the database and actually delete~ : ~remove from the database~;

	if ( MessageBox( ~Are you sure you want to <DeleteAction> the <Count> selected image(s)? ~,YESNO ) == NO )
		{ return TRUE; }

	DeleteRawImageFile = FALSE;
	DeleteKparsOriginals = FALSE;
	if ( <DeleteImageFile> )
	{
		if ( MessageBox( ~You are about to delete the <Count> image file(s) associated with each frame.\n\nAre you really sure you want to delete the images? ~,YESNO,ICONQUESTION ) == NO )
			{ return TRUE; }

		if ( MessageBox( Translate(ImagesMessages,DeleteRawImagesToo),YESNO ) == YES )
			{ DeleteRawImageFile = TRUE; }

		if ( MessageBox( Translate(ImagesMessages,DeleteKparsImagesToo),YESNO ) == YES )
			{ DeleteKparsOriginals = TRUE; }

		if ( !ImagesToDelete( RewindList ) )
			{ return Warning( Translate( UIMessages,RewindViewListFailed ) ); }
	}

	StringList( RowsToDelete,New );

	if (!DeleteSelectedImages(dbase,ImagesToDelete,<DeleteImageFile>,<DeleteRawImageFile>,<DeleteKparsOriginals>,Images<WhichWindow>Window))
	{	return FALSE;	}

// need to delete record for each image
//		RowsToDelete( AddString,ImagesToDelete(GetCurrentPosition) );

//	ImagesDataView( DeleteRows,SelectedIndex,RowsToDelete );
	Sleep( 100 );
	ImagesDataView( NotifyAffectedDocuments,~Frame~ );
	BroadcastMessageToAllViews( RedrawIfDirty,NULL );

	return TRUE;
}


NUMERIC AddRecord()
{
	if ( !ImagesDataView( GetSelectedRows,RowsToImitate ) )		
	{ 
		Document( Doc,This );
		GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

		NewRow( Set,OrderID,~<DefaultOrder>~ );
		NewRow( Set,Gamma,~1.0~ );

		NewRow( Set,Roll,~<DefaultRoll>~ );
	
		NewRow( Set,Frame,Format( ~1~,~<$[Symbols].FrameFormat[Value]>~ ) );
	}
	else // IMITATE THE SELECTED ROW
	{
		RowsToImitate( GetFirst,RowToImitate );
		GenCon( NewRow,IsCopyOf,RowToImitate );

		RowToImitate( Get,Frame,Frame );

		if ( IsNumeric( ~<Frame>~ ) )
		{
			NewRow( Set,Frame,Format( ~<++Frame>~,~<$[Symbols].FrameFormat[Value]>~ ) );
		}
		else
		{
			NewRow( Set,Frame,~~ );
		}

		NewRow( Set,Path,~~ );
	}
	
	RowBeingAdded = ImagesDataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( ~You are too low on memory to add any more rows~ ); }

	ImagesDataView( SetActiveCell,<RowBeingAdded>,~OrderID~ );

	return TRUE;
}


NUMERIC AddCategory()
{
	if ( !GenCon( TheActiveWindow,GetActiveWindow ) )
		{ return Warning( ~There was no active window to add a category to~ ); }

	return TRUE;
}


NUMERIC RenameCategory()
{
	if ( !GenCon( ActiveView,GETACTIVEVIEW,GETNAME,NewCategory,GET,PreviousCategoryName,PrevCategory ) )
		{ return Warning( Translate(~There was no active view for adding a category~) ); }

	Cmd = ~UPDATE Images SET Category = '<NewCategory>' WHERE Category = '<PrevCategory>'~;

	if ( !Ado( dBase,Connect,CMD,~<Cmd>~ ) )
	{
		Connect( GetErrorDescription,theErr );
		return Warning( Translate( ~Database update failed: <Cmd>. <theErr>~ ) );
	}
	
	return TRUE;
}



NUMERIC DeleteSBADataForCategory( Category )
{
	query =STR ( Select OrderID,Roll,Frame From Images Where Category = '<Category>' );

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{ return FALSE; }

	more = List( GetFirst,SBARecord );
	while ( <more> )
	{
		List( GetFirst,Record );
		removeSBAData = ~DELETE From SBAImages WHERE OrderID = 'SBARecord[OrderID]' AND Roll = 'SBARecord[Roll]' AND Frame = 'SBARecord[Frame]'~;	
		dbase( CMD,~<removeSBAData>~ );

		removeDSBAData2 = ~DELETE From DSBAImages WHERE OrderID = 'SBARecord[OrderID]' AND Roll = 'SBARecord[Roll]' AND Frame = 'SBARecord[Frame]'~;	
		dbase( CMD,~<removeDSBAData2>~ );
		more = SbaList( GetNext,SBARecord );

		removeDSBAData3 = ~DELETE From CompSbaData WHERE OrderID = 'SBARecord[OrderID]' AND Roll = 'SBARecord[Roll]' AND Frame = 'SBARecord[Frame]'~;	
		dbase( CMD,~<removeDSBAData3>~ );
		more = SbaList( GetNext,SBARecord );

	}
	return TRUE;
}


NUMERIC DeleteRetouchImageDataForCategory( Category )
{
	query =STR ( Select OrderID,Roll,Frame From Images Where Category = '<Category>' );

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{ return FALSE; }

	more = List( GetFirst,record );
	while ( <more> )
	{
		List( GetFirst,Record );
		removeRetouchImageData = ~DELETE From RetouchImageImages WHERE OrderID = 'record[OrderID]' AND Roll = 'record[Roll]' AND Frame = 'record[Frame]'~;	
		dbase( CMD,~<removeRetouchImageData>~ );

		more = List( GetNext,record );
	}
	return TRUE;
}


NUMERIC ResequenceImageInCategory( Key,Category,FromLocation,ToLocation )
{
	if ( $FromLocation == $ToLocation )		// DID IT REALLY MOVE?
		{ return TRUE; }					// NOPE, THERE IS NOTHING TO UPDATE

	if ( $FromLocation > $ToLocation )		// A DRAG TO EARLIER IN THE LIST?
	{
		theSQL = ~UPDATE Images SET Sequence = Sequence + 1 WHERE Category = '<Category>' AND 
					Sequence < <FromLocation> AND Sequence >= <ToLocation>~;
	}
	else									// NOPE, A DRAG TO LATER IN THE LIST
	{
		theSQL = ~UPDATE Images SET Sequence = Sequence - 1 WHERE Category = '<Category>' AND 
					Sequence > <FromLocation> AND Sequence <= <ToLocation>~;
	}

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database.  <theErr>~ ) );
	}

	if ( !dBase( CMD,~<theSQL>~ ) )			// SHUFFLE THE AFFECTED IMAGES
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Database update failed <theSQL>.  <theErr>~ );
	}

	theSQL = ~UPDATE Images SET Sequence = <ToLocation> WHERE <Key>~;

	if ( !dBase( CMD,~UPDATE Images SET Sequence = <ToLocation> WHERE <Key>~ ) )	// MOVE THE TARGET IMAGE
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not set the sequence for Image where <Key> from to <toLocation>.  <theErr>~ );
	}

	if ( !dBase( CommitTransaction ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Failed <theSQL>.  <theErr>~ );
	}

	
	return TRUE;
}


NUMERIC MoveImageToNewCategory( NewCategory,&ImageIcon,&SrcView,FromLocation,&DstView )
{
	if ( !Ado( dBase,Connect,BeginTransaction ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to database.  <theErr>~ ) );
	}

	NextSequence = CalcNextSequenceForCategory( dBase,Images,Category,~<NewCategory>~,Sequence );

	Cmd = ~UPDATE Images SET Category = '<NewCategory>', Sequence = <NextSequence> Where <$con.ImageIcon[Key]>~;

	if ( !dBase( CMD,~<Cmd>~ ) )
	{
		dBase( GetErrorDescription,theErr,RollBackTransaction );
		return Warning( Translate( ~Database update failed <Cmd>.  <theErr>~ ) );
	}

	if ( !dBase( CommitTransaction ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Database commit failed <Cmd>.  <theErr>~ ) );
	}

	return TRUE;
}


// need to figure out what to do with KPARS originals in this case
NUMERIC MoveImageToNewOrder( OrderID,&ImageIcon,&SrcView,FromLocation,&DstView )
{
	ImageIcon( GetData,Image );

	SourceImageType = Image(GetNumeric,ImageType);

	if ( <ImageType> == 1 )		// IS THE DESTINATION A PRODUCTS WINDOW?
	{
		if ( <SourceImageType> == 0 )	// IS THE SOURCE AN ORDER IMAGE?
		{
			return Warning( ~You can't change an order image into a product image~ );
		}
		else	// NOPE IT IS A PRODUCT IMAGE!
		{
			return Warning( ~You can't move a product image to a new category~ );
		}
	}
	else	// THE DESTINATION IS AN ORDER IMAGES WINDOW
	{
		if ( <SourceImageType> == 0 )	// IS THE SOURCE AN ORDER IMAGE?
		{
			// THIS IS OKAY JUST DO IT
		}
		else	// NOPE THE SOURCE IMAGE IS A PRODUCT IMAGE!
		{
			return Warning( ~You can't move a product image to an Order~ );
		}
	}

	// THE FOLLOWING WILL MOVE ORDERIMAGES FROM ONE ORDER TO ANOTHER

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	if ( ~<OrderID>~ == ~<$con.Image[OrderID]~ )
		{ return Warning( ~That image is already associated with Order <OrderID>~ ); }

	Query = STR ( Select OrderID,Roll,Frame From Images Where OrderID = '<OrderID>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{ return Warning( ~Failed to query the Images table: <Query>.~ ); }

	if ( !List( Empty ) )
	{
		if ( MessageBox( ~The Roll <$con.Image[Roll]> and Frame <$con.Image[Frame]> already exist in Order <OrderID>. Do you want to replace it? ~,YESNO ) != YES )
			{ return FALSE; }

		List( GetFirst,Record );
		List( Remove );

		RemoveCmd = ~Delete From SBAImages Where OrderID = '<OrderID>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~;
		dBase( CMD,~<RemoveCmd>~ );
		
		RemoveCmd2 = ~Delete From DSBAImages Where OrderID = '<OrderID>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~;
		dBase( CMD,~<RemoveCmd2>~ );
		
		RemoveCmd3 = ~Delete From RetouchImages Where OrderID = '<OrderID>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~;
		dBase( CMD,~<RemoveCmd3>~ );

		RemoveCmd4 = ~Delete From KparsData Where OrderID = '<OrderID>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~;
		dBase( CMD,~<RemoveCmd4>~ );

		RemoveCmd5 = ~Delete From CompSbaData Where OrderID = '<OrderID>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~;
		dBase( CMD,~<RemoveCmd5>~ );

	}

	ForgetLocal( List );

	Query = STR ( Select OrderID,Roll,Frame,Sequence From Images Where OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

	Query2 = STR ( Select OrderID,Roll,Frame From SBAImages Where OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

	Query3 = STR ( Select OrderID,Roll,Frame From RetouchImages Where OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

	Query4 = STR ( Select OrderID,Roll,Frame From DSBAImages Where OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' );

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
		{ return Warning( ~Failed to query the Images table: <Query>.~ ); }

	//List( GetConnection,dBase );

	NextSequence = CalcNextSequenceForCategory( dBase,Images,OrderID,~<OrderID>~,Sequence );

	List( GetFirst,Record );
	Record( Set,OrderID,~<OrderID>~,Sequence,<NextSequence> );
	List( Update );

	if ( !PGenConList( SbaList,Connect,Cursor,Keyset,Query,~<Query2>~ ) )
		{ return Warning( ~Failed to query the SBAImages table: <Query2>.~ ); }

	if ( !SbaList( Empty ) )
	{
		SbaList( GetFirst,SbaRecord );
		SbaRecord( Set,OrderID,~<OrderID>~ );
		SbaList( Update );
	}

	if ( !PGenConList( RetouchImagesList,Connect,Cursor,Keyset,Query,~<Query3>~ ) )
		{ return Warning( ~Failed to query the RetouchImages table: <Query3>.~ ); }

	if ( !RetouchImagesList( Empty ) )
	{
		RetouchImagesList( GetFirst,RetouchImageRecord );
		RetouchImageRecord( Set,OrderID,~<OrderID>~ );
		RetouchImagesList( Update );
	}

	if ( !PGenConList( DSbaList,Connect,Cursor,Keyset,Query,~<Query4>~ ) )
		{ return Warning( ~Failed to query the DSBAImages table: <Query4>.~ ); }

	if ( !DSbaList( Empty ) )
	{
		DSbaList( GetFirst,DSbaRecord );
		DSbaRecord( Set,OrderID,~<OrderID>~ );
		DSbaList( Update );
	}

	return TRUE;
}


VOID GetNewImageSize( MaxSize,X,Y,&newX,&newY )
{
	if( <X> == 0.0 ) { X = 100.0 ; }
	if( <Y> == 0.0 ) { Y = 100.0 ; }

	//	DETERMINE THE RESIZE FACTOR (THE RATIO OF THE LONGEST SIDE TO MaxSize)
	ResizeFactor = ( <Y> > <X> ) ? <MaxSize> / <Y> : <MaxSize> / <X>;	

	newX = <dX> * <ResizeFactor> ;
	newY = <dY> * <ResizeFactor> ;
}


NUMERIC ProcessDraggedFiles( &DraggedFileList,Order )
{

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	size = ~<$SystemSettings.Thumbnail[Size]>~;
	compressionQuality = ~<$SystemSettings.Thumbnail[Quality]>~;

	size = IsNULL( ~<size>~ ) ? ~500~ : ~<size>~;
	compressionQuality = IsNULL( ~<compressionQuality>~ ) ? ~100~ : ~<compressionQuality>~;

	Sequence = CalcNextSequenceForCategory( dBase,Images,OrderID,~<Order>~,Sequence );

	WaitCursor( Begin );

	count = 0;

	more = DraggedFileList( GetFirst,Image );

	while ( <more> )
	{
		TheImagePath = ~<$Con.Image[Text]>~;

		// If it's a DCR file, alert the user. Since we only get here now for Products, we do NOT
		// want to open Import Images.
		if (Upper(~<$Str.$TheImagePath.ext>~) == ~DCR~)
		{
			MessageBox(~Raw Digital Camera Files must be imported using the Import Images dialog.~);

			if ( !GenCon( View,GetActiveView ) )
				{ return Warning( ~There was no active view~ ); }

			WaitCursor( End );
			return 0;
		}

		// Let them bring ERI images in... don't worry about it.

		FileName = ~<$Str.$TheImagePath.FileName>~;
		FilePath = ~<$Str.$TheImagePath.Path>~;

		// Need to figure out if it's the filename or a foldername that needs fixing. 
		//		If it's a folder, then you're out of luck. We're not going to fix that. 
		//		If it's a filename, that we can fix it if they would like.
		if ( !SQLSafe(~<FilePath>~) )
		{
			Warning(~Can't handle a path with a ' or tilde in it.~);
			return FALSE;
		}

		if ( !PathSafe(~<FilePath>~) )
		{
			Warning(~Can't handle a path containing parenthesis.~);
			return FALSE;
		}

		if (AuditPathString(~<FilePath>~) )
		{
			Warning(~Can't handle a path with a , " ^ & * = | < > or ? in it.~ );
			return FALSE;
		}

		if ( !SQLSafe(~<FileName>~) || !PathSafe(~<FileName>~) || (AuditPathString(~<FileName>~) != 0))
		{
			Warning(~Can't handle a path with a tilde, comma, ampersand, ^ * = | < > ? ( ), double quote, or single quote in it. The filename can be repaired if imported using the Import Images dialog.~);

			if ( !GenCon( View,GetActiveView ) )
				{ return Warning( ~There was no active view~ ); }

			WaitCursor( End );
			return 0;
		}

		FileName = ~<$Str.$TheImagePath.FileName>~;
		Frame = ($ImageType == 0) ? ~<$Str.$FileName.WithOutExt>~ : ~<FileName>~;
		Roll = ~<$Str.$TheImagePath.Folder>~;

		if ( strlen(~<Frame>~) > 31 )
		{ 
			WaitCursor( End );
			return Warning( Translate( ~The Frame (<FileName>) is greater than 31 characters~ ) );
		} 

		if ( strlen(~<Roll>~) > 31 )
		{ 
			WaitCursor( End );
			return Warning( Translate( ~The Roll (<Roll>) is greater than 31 characters~ ) );
		}
		
		
		if ( !Files( ChMod,~<TheImagePath>~,ReadWrite ) )
		{
			WaitCursor( End );
			return Warning( ~Failed to make <TheImagePath> writable.  <$func.GetLastErrorMsg()>. ~ );
		}
		
		more = DraggedFileList( GetNext,Image );
	}

	more = DraggedFileList( GetFirst,Image );

	while ( <more> )
	{
		TheImagePath = ~<$Con.Image[Text]>~;

		FileName = ~<$Str.$TheImagePath.FileName>~;
		Frame = ($ImageType == 0) ? ~<$Str.$FileName.WithOutExt>~ : ~<FileName>~;
		Roll = ~<$Str.$TheImagePath.Folder>~;

		TheImagePath = MakePath( Type,UNC,~<TheImagePath>~);

		if ( !Files( IsUNC,~<TheImagePath>~ ) && NetworkOperation() )
		{
			Msg = Translate( UIMessages,UnsharedFile,~<TheImagePath>~ );

			if ( MessageBox( ~<Msg>~,YESNO ) != YES )
			{ 
				WaitCursor( End );
				return FALSE;
			}
		}

		ImagesThumbNailWindow( StatusBar,Text,~Checking Size And Type of <TheImagePath>~ );

		xRes = yRes = 0;
		AddThumbNail = TRUE;
		ColorType		= 0;
		result = AddThumbNailToImage( ~<TheImagePath>~,<size>,<compressionQuality>,FileType,xRes,yRes,PreviewWidth,PreviewLength,NULL,ColorType );

		// AddThumbNailToImage() returns the following errors:
		// 0 if the file doesn't really exist.
		// -1 if we don't have access to the file
		// -2 if there's some other error.

		if ( !<result> )
		{
			Warning( ~<TheImagePath> is not an image.~ );
			more = DraggedFileList( GetNext,Image );

			continue;
		}

		if ( <result> == -1)
		{
			return Warning( ~We do not have write access permission for <TheImagePath> so we can not add a thumbnail or bring it into DP2.~ );
		}

		// If we got -2, then we had an unknown error and we should bail.
		if ( <result> == -2 )
		{ 
			WaitCursor( End );
			return Warning( ~Error adding image <TheImagePath>~ );
		}

		ImagesThumbNailWindow( StatusBar,Text,~<TheImagePath>~ );

		Query = ~Select * From Images Where Path = '<TheImagePath>'~;
		if ( !PGenConList( List,Connection,dBase,Cursor,Forward,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			WaitCursor( End );
			return Warning( Translate(~Query Failed <Query>. <theErr>~) );
		}

		if ( List( GetFirst,Image ) )
		{
			if (~<$pcon.Image[OrderID]>~ != ~<Order>~)
			{
				MessageBox( Translate( ~Unable to add the image to this order because the image already exists\nin Order <$pcon.Image[OrderID]>.  Currently, an image can exist in only one order.~ ) );
				WaitCursor( End );
				return 0;
			}
		}

		// remove KPARS original associated with original path
		DeleteKPARSImageOriginal( dbase, ~<Order>~, ~<Roll>~, ~<Frame>~ );

		RemoveCmd = ~Delete From Images Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

		Fields		= ~OrderID,Roll,Frame,ImageType,Path,Category,Sequence,Gamma,Width,Length,Filetype,PreviewWidth,PreviewLength,ColorType,CropX,CropY,CropWidth,CropLength~;
		Values		= ~'<Order>','<Roll>','<Frame>',<ImageType>,'<TheImagePath>','All',<Sequence++>,1.0,<xRes>,<yRes>,'<Filetype>',<PreviewWidth>,<PreviewLength>,<ColorType>,50.0,50.0,100.0,100.0~;

		//if ( <ColorType> == 2)
		//{
		//	Fields = ~<Fields>,ICCProfile~;
		//	Values = ~<Values>,'srgb'~;
		//}

		InsertCmd	= ~Insert Into Images(<Fields>) Values(<Values>)~;

		dbase( CMD,~<RemoveCmd>~ );	// OKAY FOR THIS TO ERROR OUT

		RemoveCmd2 = ~Delete From SBAImages Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
		dbase( CMD,~<RemoveCmd2>~ );

		RemoveCmd5 = ~Delete From DSBAImages Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
		dbase( CMD,~<RemoveCmd5>~ );

		RemoveCmd3 = ~Delete From ImageCorrections Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
		dbase( CMD,~<RemoveCmd3>~ );

		RemoveCmd4 = ~Delete From RetouchImages Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
		dbase( CMD,~<RemoveCmd4>~ );

		RemoveCmd5 = ~Delete From KparsData Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
		dbase( CMD,~<RemoveCmd5>~ );

		RemoveCmd6 = ~Delete From CompSbaData Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
		dbase( CMD,~<RemoveCmd6>~ );

		if ( <ImageType> == 1 )
		{
			// *************** Temporary workaround until we decide if we are going to relax constraints or change DB structure
			 dbase( Cmd,~Insert Into Orders( ID,CustomerID ) Values( '<Order>','Product' )~ );
			// ***************
		}

		if ( !dbase( CMD,~<InsertCmd>~ ) )
		{
			dbase( GetErrorDescription,theErr );
			WaitCursor( End );
			return Warning( Translate( ~Database update failed. <theErr>~ ) );
		}
		++count;

		ImagesThumbNailWindow( StatusBar,Text,~Added OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~ );

		more = DraggedFileList( GetNext,Image );
	}

	WaitCursor( End );

	return <count>;
}


NUMERIC ExternalDrop( &DragDropInfo )
{
	if ( !GenCon( DstView,Is,~<$CON.DragDropInfo[DstView]>~ ) ) 
		{ return Warning( ~The Destination View is invalid~ ); }				

	DstView( Get,Text,ID );

	if ( ~<ID>~ == ~~ )
		{ return Warning( ~There is no ID for this view~ ); }

	if ( !DragDropInfo( GetDraggedFiles,DraggedFileList ) )
		{ return ~There were no files in the object you dragged~; }

	// If we're doing Prodcts, then dragging is OK, but if we're doing Orders, then we now
	// route the user to the Import Images dialog ALWAYS. - 3/14/03 MP
	if ( <ImageType> == 0 )
	{
		MessageBox(~Images must now be imported using the Import Images dialog.~);

		if ( !GenCon( View,GetActiveView ) )
			{ return Warning( ~There was no active view~ ); }

		OrderID = ~~;

		if ( View( IsThumbNailView ) )
		{
			View( GetName,OrderID );
		}

		action = ACTION DOC ( ImportImagesDoc OpenOnce ImportImagesDoc "Init( ~<OrderID>~, ~0~ );" );

		PerformActions( action );

		WaitCursor( End );
		return 0;
	}

	count = DraggedFileList( ChildCount );
		
	if ( $count <= 0 )
		{ return ~There were no files in the object you dragged~; }

	if ( <count> > 1 )
	{
		SortOrder = CustomMessageBox( Title,~Import Images~,Message,~Sort files by ...~,
										Button1,~File Name~,
										Button2,~Creation Date~,
										Button3,~Cancel~ );
		if ( <SortOrder> == 1 )
		{
			DraggedFileList( SortListBy,~Text~,~CreationTime~ );
		}
		else if ( <SortOrder> == 2 )
		{
			DraggedFileList( SortListBy,~CreationTime~,~Text~ );
		}
		else 
		{
			return FALSE;
		}
	}

	if ( MessageBox( ~Are you sure you would like to assign <count> images to <ID>?~,YESNO ) != YES )
		{ return FALSE; }

	count = 0;

	count = ProcessDraggedFiles( DraggedFileList,~<ID>~ );

	ImagesThumbNailWindow( StatusBar,Text,~Added <count> images for <ID>~ );

	if (<count> != 0)
	{
		RefreshAllViews();
	}

	return TRUE;
}

NUMERIC HandleTextDrop( &SrcView,&DstView,DropLocation )
{
	if ( !SrcView( GETSELECTED,SelectedData ) )
	{ 
		GenCon( SelectedData,Is,SrcView(GetCopyOf) );
	}

	Count = SelectedData( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There is no image data to paste~ ) ); }

	WaitCursor( Begin );

	OrderID = ~<$con.DstView[ViewDataFor]>~ ;   

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Error connecting to the shared database: <theErr>~ );
	}

	size = ~<$SystemSettings.Thumbnail[Size]>~;
	compressionQuality = ~<$SystemSettings.Thumbnail[Quality]>~;

	size = IsNULL( ~<size>~ ) ? ~500~ : ~<size>~;
	compressionQuality = IsNULL( ~<compressionQuality>~ ) ? ~100~ : ~<compressionQuality>~;

	//Sequence = CalcNextSequenceForCategory( dBase,Images,OrderID,~<Order>~,Sequence );

	Frame = 0;

	while ( SelectedData( GetNext,Item ) )
	{
		OrderID = ~<$con.DstView[ViewDataFor]>~ ;  
		Roll = 1;
		Frame = ~<++Frame>~;

		if ( Item( Attribute,OrderID,Num ) )
		{
			OrderID = ~<$con.Item[OrderID]>~;
		}

		Item( Set,OrderID,~<OrderID>~ );

		if ( Item( Attribute,Roll,Num ) )
		{
			Roll = ~<$con.Item[Roll]>~;
		}

		Item( Set,Roll,~<Roll>~ );

		if ( Item( Attribute,Frame,Num ) )
		{
			Frame = ~<$con.Item[Frame]>~;
		}

		Item( Set,Frame,~<Frame>~ );

		if ( Item( Attribute,Path,Num ) )
		{
			Path = MakePath( Type,UNC,~<$con.Item[Path]>~);

			if ( ~<Path>~ != ~~ )
			{
				if ( !Files( IsUNC,~<Path>~ ) && NetworkOperation() )
				{
					Msg = Translate( UIMessages,UnsharedFile,~<Path>~ );

					if ( MessageBox( ~<Msg>~,YESNO ) != YES )
						{ return FALSE; }
				}

				ImagesThumbNailWindow( StatusBar,Text,~Checking Size And Type of <Path>~ );

				xRes = yRes = 0;
				AddThumbNail = TRUE;

				result = AddThumbNailToImage( ~<Path>~,<size>,<compressionQuality>,FileType,xRes,yRes,PreviewWidth,PreviewLength );

				Item( Set,Path,~<Path>~ );
			}
		}

		Key = ~OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

		Query = ~Select * From Images Where <Key>~;

		if ( !PGenConList( List,Connection,dBase,Cursor,Keyset,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate( ~Query Failed: <Query>. <theErr>~ ) );
		}

		IsNewRow = List( NumEntries ) == 0;

		if ( !List( UpdateFrom,Item,~<Key>~,<IsNewRow> ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
			return Warning( Translate( ~Could not update Image record where <Key>. <theErr>~ ) );
		}
	}

	DelayedRefreshDoc();

	return TRUE;
}



NUMERIC HandleDrop()
{
	if ( !GenCon( DragDropInfo,GetDropInfo ) )
		{ return FALSE; }
	
	Tree( Location,~[GenCons]~,Name,DragDropInfo,Pluck );			// REMOVE THE DRAG INFO FROM THE TREE

	if ( !GenCon( SrcView,Is,~<$CON.DragDropInfo[SrcView]>~ ) )		// SEE IF THIS IS A DROP FROM OUTSIDE THE APPLICATION 
		{ return ExternalDrop(DragDropInfo); }			

	if ( !GenCon( DstView,Is,~<$CON.DragDropInfo[DstView]>~ ) ) 
		{ return Warning( ~The Destination View is invalid~ ); }	
		
	if ( ~<$con.SrcView[ViewDataType]>~ == ~Text~ )		// IS THE ITEM A LIST OF GENCONS CONTAINING TEXT?
		{ return HandleTextDrop( SrcView,DstView,~<$CON.DragDropInfo[DropLocation]>~ ); }
			
	if ( ~<$con.SrcView[ViewDataType]>~ != Image )
		{ return Warning( ~The DstView contains <$con.DstView[ViewDataType]> instead of Image~ ); }

	if ( ~<$con.DstView[ViewDataType]>~ != Image )
		{ return Warning( ~The DstView contains <$con.DstView[ViewDataType]> instead of Image~ ); }

	while ( SrcView( Find,IsSelected,~1~,FromLocation,ImageIcon ) )	// LOOP FOR EACH SELECTED ITEM IN THE VIEW
	{					
		SrcView( Get,Text,Category );
		DstView( Get,Text,NewCategory );	
		ToLocation = ~<$CON.DragDropInfo[DropLocation]>~;

		if ( ~<Category>~ == ~<NewCategory>~ )		// JUST A RESEQUENCE IN THE CURRENT CATEGORY?
		{
			LeftClickInImageView();
			return TRUE;
			return Warning( Translate( ~Resequencing is not supported yet~ ) );
			ResequenceImageInCategory( ~<$CON.ImageIcon[Key]>~,~<Category>~,~<FromLocation>~,~<ToLocation>~ );
		}
		else										// MOVING THIS IMAGE TO A DIFFERENT CATEGORY
		{
		//	return Warning( Translate( ~Moving an image to another order is not supported yet~ ) );
			MoveImageToNewOrder( ~<NewCategory>~,ImageIcon,SrcView,<FromLocation>,DstView );
		}
		ImageIcon( Set,IsSelected,FALSE );
	}

	return RefreshAllViews();
}


NUMERIC CalcNextSequenceForCategory( &Connection,Table,CategoryField,NewCategory,SequenceField )
{
	CMD = ~Select MAX(<SequenceField>) From <Table> Where <CategoryField> = '<NewCategory>'~;

	if ( !Connection( CMD,~Select MAX(<SequenceField>) From <Table> Where <CategoryField> = '<NewCategory>'~,MaxSequence ) )
	{
		NextSequence = -1;
	}
	else
	{
		NextSequence = ~<$rs.MaxSequence[#0]>~ == ~~ ? ~-1~ : ~<$rs.MaxSequence[#0]>~;
	}

	return $NextSequence + 1;
}



NUMERIC RightClickInListView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }

	ActiveView( DisplayMenu,ImagesListViewMenu );

	return TRUE;
}

NUMERIC RightClickInImageView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }

	UpdateImageViewMenu(ActiveView);

	ActiveView( DisplayMenu,ImagesViewMenu );

	return TRUE;
}

VOID UpdateImageViewMenu(&ActiveView)
{
	if ( ImagesViewMenu( GetByName,Cropping,Cropping ) )
	{
		SetCropMenu(Cropping);

		SetHeadAlignmentMenu(Cropping);

		if ( Cropping( GetByName,ShowCropItem,ShowCropItem ) )
		{
			ShowCropItem( Set,IsChecked,ActiveView(IsCropBoxShown) ? ~T~ : ~F~ );
		}

		if ( Cropping( GetByName,CropImages,CropImages ) )
		{
			CropImages( Set,IsChecked,ActiveView(IsCropMode) ? ~T~ : ~F~ );
		}

		if ( Cropping( GetByName,FindEyesInImages,FindEyesInImages ) )
		{
			FindEyesInImages( Set,IsChecked,ActiveView(IsFindEyesMode) ? ~T~ : ~F~ );
		}

		if ( Cropping( GetByName,ShowHeadAlignment,ShowHeadAlignment ) )
		{
			ActiveView(GetShowHeadAlignment,currentHeadAlignment);
			if (<currentHeadAlignment> == 0)
			{
				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentLines,ShowHeadAlignmentLines ))
				{
					ShowHeadAlignmentLines(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentRect,ShowHeadAlignmentRect ))
				{
					ShowHeadAlignmentRect(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentEllipse,ShowHeadAlignmentEllipse ))
				{
					ShowHeadAlignmentEllipse(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentNone,ShowHeadAlignmentNone ))
				{
					ShowHeadAlignmentNone(Set,IsChecked,~T~);
				}
			}
			else if (<currentHeadAlignment> == 1)
			{
				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentLines,ShowHeadAlignmentLines ))
				{
					ShowHeadAlignmentLines(Set,IsChecked,~T~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentRect,ShowHeadAlignmentRect ))
				{
					ShowHeadAlignmentRect(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentEllipse,ShowHeadAlignmentEllipse ))
				{
					ShowHeadAlignmentEllipse(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentNone,ShowHeadAlignmentNone ))
				{
					ShowHeadAlignmentNone(Set,IsChecked,~F~);
				}
			}
			else if (<currentHeadAlignment> == 2)
			{
				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentLines,ShowHeadAlignmentLines ))
				{
					ShowHeadAlignmentLines(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentRect,ShowHeadAlignmentRect ))
				{
					ShowHeadAlignmentRect(Set,IsChecked,~T~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentEllipse,ShowHeadAlignmentEllipse ))
				{
					ShowHeadAlignmentEllipse(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentNone,ShowHeadAlignmentNone ))
				{
					ShowHeadAlignmentNone(Set,IsChecked,~F~);
				}
			}
			else if (<currentHeadAlignment> == 3)
			{
				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentLines,ShowHeadAlignmentLines ))
				{
					ShowHeadAlignmentLines(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentRect,ShowHeadAlignmentRect ))
				{
					ShowHeadAlignmentRect(Set,IsChecked,~F~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentEllipse,ShowHeadAlignmentEllipse ))
				{
					ShowHeadAlignmentEllipse(Set,IsChecked,~T~);
				}

				if (ShowHeadAlignment( GetByName,ShowHeadAlignmentNone,ShowHeadAlignmentNone ))
				{
					ShowHeadAlignmentNone(Set,IsChecked,~F~);
				}
			}
		}
	}

	if ( ImagesViewMenu( GetByName,ChromaKey,ChromaKey ) )
	{
		SetChromaKeyBGMenu(ChromaKey);

		if (<fChromaKeyMaskState> == 0)
		{
			if (ChromaKey( GetByName,ChromaKeyOriginalImage,ChromaKeyOriginalImage ))
			{
				ChromaKeyOriginalImage(Set,IsChecked,~T~);
			}

			if (ChromaKey( GetByName,ChromaKeyImageFill,ChromaKeyImageFill ))
			{
				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillGray,ChromaKeyImageFillGray ))
				{
					ChromaKeyImageFillGray(Set,IsChecked,~F~);
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillRed,ChromaKeyImageFillRed ))
				{
					ChromaKeyImageFillRed(Set,IsChecked,~F~);
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillChoose,ChromaKeyImageFillChoose ))
				{
					ChromaKeyImageFillChoose(Set,IsChecked,~F~);
				}
			}

			if (ChromaKey( GetByName,ChromaKeyMaskOnly,ChromaKeyMaskOnly ))
			{
				ChromaKeyMaskOnly(Set,IsChecked,~F~);
			}
		}
		else if (<fChromaKeyMaskState> == 1)
		{
			if (ChromaKey( GetByName,ChromaKeyOriginalImage,ChromaKeyOriginalImage ))
			{
				ChromaKeyOriginalImage(Set,IsChecked,~F~);
			}

			if (ChromaKey( GetByName,ChromaKeyImageFill,ChromaKeyImageFill ))
			{
				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillGray,ChromaKeyImageFillGray ))
				{
					if ( <fChromaKeyFillColorValue> == 0 )
					{
						ChromaKeyImageFillGray(Set,IsChecked,~T~);
					}
					else
					{
						ChromaKeyImageFillGray(Set,IsChecked,~F~);
					}
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillRed,ChromaKeyImageFillRed ))
				{
					if ( <fChromaKeyFillColorValue> == 1 )
					{
						ChromaKeyImageFillRed(Set,IsChecked,~T~);
					}
					else
					{
						ChromaKeyImageFillRed(Set,IsChecked,~F~);
					}
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillChoose,ChromaKeyImageFillChoose ))
				{
					if ( <fChromaKeyFillColorValue> == -1 )
					{
						ChromaKeyImageFillChoose(Set,IsChecked,~T~);
					}
					else
					{
						ChromaKeyImageFillChoose(Set,IsChecked,~F~);
					}
				}
			}

			if (ChromaKey( GetByName,ChromaKeyMaskOnly,ChromaKeyMaskOnly ))
			{
				ChromaKeyMaskOnly(Set,IsChecked,~F~);
			}
		}
		else if (<fChromaKeyMaskState> == 2)
		{
			if (ChromaKey( GetByName,ChromaKeyOriginalImage,ChromaKeyOriginalImage ))
			{
				ChromaKeyOriginalImage(Set,IsChecked,~F~);
			}

			if (ChromaKey( GetByName,ChromaKeyImageFill,ChromaKeyImageFill ))
			{
				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillGray,ChromaKeyImageFillGray ))
				{
					ChromaKeyImageFillGray(Set,IsChecked,~F~);
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillRed,ChromaKeyImageFillRed ))
				{
					ChromaKeyImageFillRed(Set,IsChecked,~F~);
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillChoose,ChromaKeyImageFillChoose ))
				{
					ChromaKeyImageFillChoose(Set,IsChecked,~F~);
				}
			}

			if (ChromaKey( GetByName,ChromaKeyMaskOnly,ChromaKeyMaskOnly ))
			{
				ChromaKeyMaskOnly(Set,IsChecked,~T~);
			}
		}
		else if (<fChromaKeyMaskState> == 3)
		{
			if (ChromaKey( GetByName,ChromaKeyOriginalImage,ChromaKeyOriginalImage ))
			{
				ChromaKeyOriginalImage(Set,IsChecked,~F~);
			}

			if (ChromaKey( GetByName,ChromaKeyImageFill,ChromaKeyImageFill ))
			{
				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillGray,ChromaKeyImageFillGray ))
				{
					ChromaKeyImageFillGray(Set,IsChecked,~F~);
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillRed,ChromaKeyImageFillRed ))
				{
					ChromaKeyImageFillRed(Set,IsChecked,~F~);
				}

				if (ChromaKeyImageFill( GetByName,ChromaKeyImageFillChoose,ChromaKeyImageFillChoose ))
				{
					ChromaKeyImageFillChoose(Set,IsChecked,~F~);
				}
			}

			if (ChromaKey( GetByName,ChromaKeyMaskOnly,ChromaKeyMaskOnly ))
			{
				ChromaKeyMaskOnly(Set,IsChecked,~F~);
			}
		}
	}
}

NUMERIC SetCropMenu(&CroppingMenu)
{
	if (!CroppingMenu( GetByName,SetCropItem,SetCropItem ))
	{
		return FALSE;
	}

	SetCropItem(RemoveChildren);

	Query = ~Select Name From Crops Order By Name~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		SessionLogDirect(~Unable to get crops for crop right click menu. Error = <theErr>~),
		return FALSE;
	}

	Count = List( NumEntries );
	if ( !<Count> )
	{
		return FALSE;
	}

	Count = 0;
	while ( List( GetNext,Item ) )
	{
		GenCon( CropName<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~<$pcon.Item[Name]>~,
				IDText,		~ID~ );

		ActionsText = ACTION Exec ( WantCrop(~<$pcon.Item[Name]>~); );

		CropName<Count>( SetValuesFrom,ActionsText,ActionsText );

		SetCropItem( InsertBack,CropName<Count> );
	}

	return TRUE;
}

NUMERIC SetHeadAlignmentMenu(&CroppingMenu)
{
	if (!CroppingMenu( GetByName,SetHeadAlignmentItem,SetHeadAlignmentItem ))
	{
		return FALSE;
	}

	SetHeadAlignmentItem(RemoveChildren);

	Query = ~Select Name From Crops Order By Name~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		SessionLogDirect(~Unable to get crops for head alignment right click menu. Error = <theErr>~),
		return FALSE;
	}

	Count = List( NumEntries );
	if ( <Count> == 0 )
	{
		GenCon( CropName<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~No Crop/Head Alignment Setups Defined~,
				IDText,		~ID~ );

		SetHeadAlignmentItem( InsertBack,CropName<Count> );
	}
	else
	{
		Count = 0;
		while ( List( GetNext,Item ) )
		{
			GenCon( CropName<++Count>,New,DDMenuItemDef,SetValues,
					Text,		~<$pcon.Item[Name]>~,
					IDText,		~ID~ );

			ActionsText = ACTION Exec ( WantHeadAlignmentSetup(~<$pcon.Item[Name]>~); );

			CropName<Count>( SetValuesFrom,ActionsText,ActionsText );

			SetHeadAlignmentItem( InsertBack,CropName<Count> );
		}
	}

	return TRUE;
}

NUMERIC SetChromaKeyBGMenu(&ChromaKeyMenu)
{
	if (!ChromaKeyMenu( GetByName,ChromaKeyMaskBkGrnd,ChromaKeyMaskBkGrnd ))
	{
		return FALSE;
	}

	ChromaKeyMaskBkGrnd(RemoveChildren);

	Query = ~Select Distinct ID From Backgrounds Order By ID~;
	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		SessionLogDirect(~Unable to get backgrounds for chroma key background right click menu. Error = <theErr>~);
		return FALSE;
	}

	Count = List( NumEntries );
	if ( <Count> == 0 )
	{
		GenCon( ChromaKeyViewBG<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~No Backgrounds Defined~,
				IDText,		~ID~ );
		ChromaKeyMaskBkGrnd( InsertBack,ChromaKeyViewBG<Count> );
	}
	else
	{
		if ( <fChromaKeyMaskState> == 3 )
		{
			selectBackground = 1;
		}
		else
		{
			selectBackground = 0;
		}

		Count = 0;
		while ( List( GetNext,Background ) )
		{
			GenCon( ChromaKeyViewBG<++Count>,New,DDMenuItemDef,SetValues,
					Text,		~<$pcon.Background[ID]>~,
					IDText,		~ID~,
					IsChecked,	(<selectBackground> && SimilarStr(~<$pcon.Background[ID]>~,~<fChromaKeyBGImageID>~)) ? T : F );
			ActionsText = ACTION Exec ( WantChromaKeyBG(~<$pcon.Background[ID]>~); );
			ChromaKeyViewBG<Count>( SetValuesFrom,ActionsText,ActionsText );
			ChromaKeyMaskBkGrnd( InsertBack,ChromaKeyViewBG<Count> );
		}

		GenCon( ChromaKeyViewBG<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~None~,
				IDText,		~ID~,
				IsChecked,	(<selectBackground> && SimilarStr(~-1~,~<fChromaKeyBGImageID>~)) ? T : F );
		ActionsText = ACTION Exec ( WantChromaKeyBG(-1); );
		ChromaKeyViewBG<Count>( SetValuesFrom,ActionsText,ActionsText );
		ChromaKeyMaskBkGrnd( InsertBack,ChromaKeyViewBG<Count> );
	}

	return TRUE;
}

NUMERIC LeftClickInImageView()
{
	SetApplyShasta(FALSE);
	
	if ( !Keystate( RCONTROL ) )
	{
		ViewSubjectInfoData(TRUE,TRUE);
	}

	return TRUE;
}

NUMERIC SetApplyShasta(IsAnalyzer)
{
	if ( !GenCon( View,GetActiveView ) )
	{
		return FALSE;
	}
	
	Count = View( GetSelectedIconCount );
	if ( <Count> == 0 )
	{
		return FALSE;
	}
	
	if ( !View( GetSelected,SelectedImages ) )
	{
		return FALSE;
	}

	if ( !SelectedImages( GetLast,Image ) )
	{
		return FALSE;
	}

	ImagePath = ~<$con.Image[Path]>~;

	if ( !ImageCorrections( GetCurrentCorrections,~<ImagePath>~,theCorrections ) )
	{
		return FALSE;
	}
	
	colorType = Numeric(~<$con.theCorrections[ColorType]>~);
	orgApplyShasta = ~<$con.theCorrections[orgApplyShasta]>~;
	applyShasta = ~<$con.theCorrections[ApplyShasta]>~;
	changed = <orgApplyShasta> != <applyShasta> ;

	Actions = ACTION Doc ( EditImagesDoc3 "UpdateColorTypeOptions( <colorType>,<applyShasta> );" );
	PerformActions( Actions );
	
	Actions = ACTION Doc ( EditImagesDoc3 "SetApplyShasta(<applyShasta>,<changed>,<colorType>);" );
	PerformActions( Actions );

	return TRUE;
}


NUMERIC NotImplementedYet( what )
{
	MessageBox( Translate( ~<what> is not implemented yet!~ ) );
	return TRUE;
}


NUMERIC ExportImages()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }

	OrderID = ~~;

	if ( !View( IsThumbNailView ) )
	{
		return FALSE;
	}

	View( GetName,OrderID );
	
	JustSelected = View( GetSelectedIconCount ) > 0;

	Actions = ACTION Doc ( ExportImagesDoc OpenOnce ExportImagesDoc "Init(~<OrderID>~,~<JustSelected>~);" );

	PerformActions( Actions );

	return TRUE;
}


NUMERIC FindImages()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }

	OrderID = ~~;

	if ( View( IsThumbNailView ) )
	{
		View( GetName,OrderID );
	}

	action = ACTION DOC ( ImportImagesDoc Open ImportImagesDoc "Init( ~<OrderID>~ );" );

	return QueueContentsOf( action );

	// THIS IS THE OLD WAY

	msg = Translate( ~Find Images and Drag them to the Images Window~ );

	action = ACTION DOC ( Explorer Open ExplorerDoc "Init( ~<msg>~,~~ );" );

	return QueueContentsOf( action );
}


VOID ChangeThumbNailSize( size )
{
	ImagesThumbNailWindow( Get,ImageFrameSize,CurrentSize );

	CurrentSize = <CurrentSize> + <size>;
	if ( <CurrentSize> < 85 )
	{
		CurrentSize = 85;
	}
	else if ( <CurrentSize> > 400  )
	{
		CurrentSize = 400;
	}

	if ( GenCon( View,GETACTIVEVIEW ) )
	{
		ImagesThumbNailWindow( Set,ImageFrameSize,<CurrentSize> );
		View( SetImageFrameSize,<CurrentSize> );
		ImagesThumbNailWindow( RefreshWindow );
	}
}


NUMERIC ViewImageData( ImageClicked )
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }
	
	Order = ~~;
	if ( !Defined( View ) )
		{ return FALSE; }

	Query = ~~;
	Sort = ~Order By OrderID, Roll, Frame~;

	if ( <ViewIsImages> )
	{
		View( Get,Text,Order );
		if ( !<ImageClicked> )
		{
			Query = STR ( Select * From Images Where OrderID = '<Order>' <Sort> );
			Actions = ACTION Doc ( ImagesDataDoc Open ImagesDataDoc "Init( ~<Order>~,FALSE,~<Query>~,0 );" );
			return PerformActions( Actions );
		}

		Count = View( GetSelectedIconCount );
		if ( <Count> >= 1 )
		{
			if ( !View( GetSelected,SelectedImages ) )
			{
				return FALSE;
			}
		} else
		{
			Query = STR ( Select * From Images Where OrderID = '<Order>' <Sort> );
			Actions = ACTION Doc ( ImagesDataDoc Open ImagesDataDoc "Init( ~<Order>~,FALSE,~<Query>~,0 );" );
			return PerformActions( Actions );
		}

		imageCount = 0;
		queryLength = 0;
		maxQueryString = <maxQueryLength> - 75;

		if ( <Count> > 1 )
		{
			criteriaList = ~(~;
			while ( SelectedImages( GetNext,Image ) && <queryLength> < <maxQueryString> )
			{
				if ( ~<criteriaList>~ != ~(~ )
				{
					criteriaList = ~<criteriaList> OR~;
				}
				criteriaList = ~<criteriaList> (Images.Roll = '<$con.Image[Roll]>' AND Images.Frame = '<$con.Image[Frame]>')~;

				imageCount = <imageCount> + 1;
				queryLength = strlen( ~<criteriaList>~ );
			}
			criteriaList = ~<criteriaList>)~;

			if ( <queryLength> > <maxQueryString> && <imageCount> < <Count> )
			{
				Log( Session,~query for <imageCount> images is:<criteriaList>~ );

				Msg = ~You can select up to <imageCount> individual images or the entire order.\nPlease indicate your selection.~;

				GenCon( MbInfo,New,DDCustomMessageBox );
				MbInfo( SetValues,Title,Translate(~SBA Data~),Message,~<Msg>~,
							Button1,Translate(~&Order~),Button2,Translate(~&<imageCount> Images~),Button3,Translate(~&Cancel~),
							SetWindowPos,1,X,-1,Y,-1,Width,325,Height,215 ) ;
				result = CustomMessageBox(MbInfo);
				button = MbInfo(GetNumeric, ButtonPressed);
				if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
				{
					return FALSE;	
				}
				else if ( <button> == 1 )
				{
					Query = STR ( Select * From Images Where OrderID = '<Order>'  <Sort> );
					Actions = ACTION Doc ( ImagesDataDoc Open ImagesDataDoc "Init( ~<Order>~,FALSE,~<Query>~,0 );" );
					return PerformActions( Actions );
				}
			}
			Query = STR ( Select * From Images Where OrderID = '<$con.Image[OrderID]>' And <criteriaList> <Sort> );
			Actions = ACTION Doc ( ImagesDataDoc Open ImagesDataDoc "Init( ~<Order>~,FALSE,~<Query>~,0 );" );
			return PerformActions( Actions );
		}
		else if ( <Count> == 1 && Defined(SelectedImages) )	
		{
			if ( SelectedImages( GetFirst,Image ) )
			{
				Query = STR ( Select * From Images Where OrderID = '<$con.Image[OrderID]>' And Roll =  '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' <Sort> );
				Actions = ACTION Doc ( ImagesDataDoc Open ImagesDataDoc "Init( ~<Order>~,FALSE,~<Query>~,0 );" );
				return PerformActions( Actions );
			}
			else
			{
				return Warning( ~Unabled to retrieve image data for selected image." );
			}
		}
	}
	else	// is a grid view
	{
		Query = STR ( Select * From Images Where OrderID = '<Order>'  <Sort> );
		Actions = ACTION Doc ( ImagesDataDoc Open ImagesDataDoc "Init( ~<Order>~,FALSE,~<Query>~,0 );" );
		return PerformActions( Actions );
	}
	return FALSE;
}

NUMERIC OnViewRawQueueButton()
{
	Action = ACTION DOC ( RawConversionQueueWin OpenOnce RawConversionQueueWin "Init();" );
	return PerformActions( Action );
}



NUMERIC ResetProcessedFlag()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }
	
	View(Get, Text, Order);

	Count = View( GetSelectedIconCount );

	if ( <Count> >= 1 )
	{
		if ( !View( GetSelected,SelectedImages ) )
		{
			return FALSE;
		}
	} else
	{
		// Got to have at least one image selected to do this. Performing the operation on the
		// entire order if none were selected could potentially be catastrophic if they
		// didn't really mean to do so.
		MessageBox(~You must have at least one image selected in order to reset the Processed flag.~);
		return 1; 
	}

	if ( !ADO( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( ~Error: <theErr>~,~From: [<theSQL>]~ );
	}

	WaitCursor( Begin );

	NumDigitalImages = 0;
	NumBibbleImages  = 0;	
	// In the loop, first check if each image is a Kodak DCR digital camera image (has a RawImages record)
	// If it does, then we set Processed = 0.
	// Then we look at Images and clear the ICCProfile field, and set Reprocess = 1.
	// Also delete the output file.
	// (If ImageType == 4 (RAW), the image has been processed by Bibble not Digital Camera Import)
	//
	// Once we're done with the loop, then we should make sure that the order status is set to Convert.

	while ( SelectedImages( GetNext,Image ) )
	{
		Key = ~(OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>')~;

		LegacyCountCmd = ~Select * from RawImages Where <Key> AND Path IS NOT NULL AND ImageType <> 4~;
		bibbleCountCmd = ~Select * from RawImages Where <Key> AND Path IS NOT NULL AND ImageType = 4~;
		Cmd = ~Update RawImages Set Processed = 0 Where <Key>~;

		legacyCount = dBase(RecordCountFor, ~<LegacyCountCmd>~);
		NumBibbleImages = <NumBibbleImages> + dBase(RecordCountFor, ~<bibbleCountCmd>~);
		
		// handle and deselect legacy images first
		if ( <legacyCount> > 0 )
		{
			++NumDigitalImages;

			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				WaitCursor( End );
				dBase( GetErrorDescription,theErr );
				return Warning( ~Error: <theErr>~,~From: [<Cmd>]~ );
			}

			ResetImagesForReprocess( dBase,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~,~<$con.Image[Path]>~ );
		
			// Set the reprocess field in the Images table
			// No longer clear the Path field
			
			Cmd = ~Update Images Set Reprocess = 1, ICCProfile = NULL, PreviewWidth=0, PreviewLength=0, FileType=NULL, ApplyShasta = 0, AutoRetouchComplete = 0, Reconverting = 1 Where <Key>~;
			
			if ( !dBase( CMD,~<Cmd>~ ) )
			{
				WaitCursor( End );
				dBase( GetErrorDescription,theErr );
				return Warning( ~Error: <theErr>~,~From: [<Cmd>]~ );
			}
			
			if ( Image( GetThumbNailInfo,ThumbNail ) )
			{
				View( SetSelected,ThumbNail,FALSE,FALSE );
				View( RedrawThumbNail,ThumbNail,TRUE );
			}
		}
	}

	if ( <NumDigitalImages> <= 0 && <NumBibbleImages> <= 0 )
	{
		return Warning( ~No raw images were selected.~ );
	}

	if (<NumDigitalImages> > 0)
	{
		// Set the order status to Needs Converting
		// ~None~=0, ~Needs Converting~=1, ~In Progress~=2, ~Complete~=3
		Cmd = ~Update Orders Set CameraFileConversionStatus = 1 Where ID = '<Order>'~;
		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			WaitCursor( End );
			dBase( GetErrorDescription,theErr );
			return Warning( ~Error: <theErr>~,~From: [<Cmd>]~ );
		}
		
		Warning( ~<NumDigitalImages> DCR image(s) submitted to the legacy Kodak Digital Camera Importer for reprocessing.~ );
	}

	// Handle Bibble image conversion
	if ( <NumBibbleImages> > 0 )
	{
		SetDCConvertDialog();
	}
	
	WaitCursor( End );

	return 1;
}


NUMERIC SetDCConvertDialog()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	Actions = ACTION Doc ( RawImageDialog OpenOnce RawImageDialog "Init();" );

	return PerformActions( Actions );
}



NUMERIC ViewRawImagesData()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }
	
	View( Get,Text,Order );

	Query = STR ( Select * From RawImages Where OrderID = '<Order>'  AND (ImageType = 0 OR ImageType = 4) Order By OrderID, Roll, Frame );
	
	Count = View( GetSelectedIconCount );

	if ( <Count> == 1 )
	{
		if ( View( GetSelected,SelectedImages ) )
		{
			if ( SelectedImages( GetFirst,Image ) )
			{
				Query = STR ( Select * From RawImages Where OrderID = '<$con.Image[OrderID]>' And Roll =  '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>' AND (ImageType = 0 OR ImageType =4) );
			}
		}
	}

	Title = ~Raw Images Data~;
	Actions = ACTION Doc ( RawImagesDoc Open RawImagesDoc "Init( ~<Title>~,~<Query>~);" );

	return PerformActions( Actions );
}


NUMERIC ViewImageServices()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }
	
	View( Get,Text,Order );

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~ProcessOrders:Database Connection Failed. <theErr>~) );
	}
	
	Cmd = ~Select Count(*) From ImagesServices Where OrderID = '<Order>' AND ServicesID <> 0 AND ( Code IS NULL OR Code = '' )~;
	numRecs = dBase( RecordCountFor,~<Cmd>~ );

	if (<numRecs> == 0)
	{
		Query = STR ( Select ImagesServices.OrderID,ImagesServices.Roll,ImagesServices.Frame,ImagesServices.Code,NegativeServices.Label,ImagesServices.Description,ImagesServices.ServicesID From ImagesServices Left Outer Join NegativeServices On (NegativeServices.Code = ImagesServices.Code) Where OrderID = '<Order>'  Order By ImagesServices.Roll, ImagesServices.Frame, ImagesServices.ServicesID );
	}
	else
	{
		Query = STR ( Select ImagesServices.*,NegativeServices.Label,NegativeServices.Code From ImagesServices Left Outer Join NegativeServices On (NegativeServices.ID = ImagesServices.ServicesID) Where OrderID = '<Order>'  Order By ImagesServices.Roll, ImagesServices.Frame, ImagesServices.ServicesID );
	}

//	Query = STR ( Select ImagesServices.*,NegativeServices.Label,NegativeServices.Code From ImagesServices Left Outer Join NegativeServices On (NegativeServices.ID = ImagesServices.ServicesID) Where OrderID = '<Order>'  Order By ImagesServices.Roll, ImagesServices.Frame, ImagesServices.ServicesID );

	Actions = ACTION Doc ( ImagesServicesDoc OpenOnce ImagesServicesDoc "Init( ~<Order>~,~<Query>~);" );
	return PerformActions( Actions );
}



NUMERIC CloseAllOpenImages()
{
	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }

	Count = Index = 0;

	app( ThisApp,MessagePump,3 );

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( Window( GETNEXT,aView ) )
		{
			aView( GET,ViewType,ViewType );

			if ( ~<ViewType>~ == ~ImageEditView~ || ~<ViewType>~ == ~PIEEditView~)
			{
				aView( GetDocumentPath,DocumentPath );
				Window( CloseWindow );
				ThisApp( MessagePump,3 );
				++Count;
				Index = 0;
			}
		}
	}

	ThisApp( MessagePump,0 );

	return TRUE;
}


NUMERIC CloseWindowOfPath( Path )
{
	Count = Index = 0;

	app( ThisApp,MessagePump,3 );

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( Window( GETNEXT,aView ) )
		{
			aView( GET,ViewType,ViewType );

			if ( ~<ViewType>~ == ~ImageEditView~ || ~<ViewType>~ == ~PIEEditView~)
			{
				aView( GetDocumentPath,DocumentPath );

				if ( ~<DocumentPath>~ == ~<Path>~ )
				{ 
					Window( CloseWindow );
					ThisApp( MessagePump,3 );
					++Count;
					Index = 0;
				}
			}
		}
	}

	ThisApp( MessagePump,0 );

	return TRUE;
}


NUMERIC CloseSelectedImages()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )
		{ return Warning( ~There was no active view~ ); }

	if ( SelectedImages( ChildCount ) == 0 )
	{
		return CloseAllOpenImages();
	}

	while ( SelectedImages( GetNext,Image ) )
	{
		CloseWindowOfPath( ~<$Con.Image[Path]>~ );
	}
	
	return TRUE;
}


NUMERIC ViewSubjectInfoData( ImageClicked,OpenImages )
{	
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	Query = ~~;  		AlreadyHaveSubjectInfoOrderID = FALSE;

	if ( <ViewIsImages> )
	{
		View( Get,Text,Order );

		if ( !<ImageClicked> )
		{
			if ( !GetSubjectOrderIDInfoType( ~<Order>~, InfoType, SubjectInfoOrderId) )		{ return FALSE; }

			AlreadyHaveSubjectInfoOrderID = TRUE;

			Query = STR ( Select * From SubjectInfo Where OrderID = '<SubjectInfoOrderId>' Order By OrderID,SubjectID );
		}

		Count = View( GetSelectedIconCount );

		if ( <Count> >= 1 && <Count> < 100 )
		{
			if ( !View( GetSelected,SelectedImages ) )
			{
				return FALSE;
			}

			if ( !SelectedImages( MakeSQLList,List,TRUE,SubjectID ) )
			{
				return FALSE;
			}

			if ( ~<List>~ != ~~ ) 
			{
				if ( !<AlreadyHaveSubjectInfoOrderID> )
				{
					if ( !GetSubjectOrderIDInfoType( ~<Order>~, InfoType, SubjectInfoOrderId) )		{ return FALSE; }

					AlreadyHaveSubjectInfoOrderID = TRUE;
				}

				Query = STR ( Select * From SubjectInfo Where SubjectID In (<List>) AND OrderID = '<SubjectInfoOrderId>' Order By OrderID,SubjectID );
			}
			else
			{
				Query = ~~;
			}
		}
	}
	else	// is a grid view - Not executed - Separate function for Grid view.
	{
		if ( !View( GetSelected,SelectedImages ) )
		{
			return FALSE;
		}

		Count = SelectedImages( ChildCount );

		if ( <Count> >= 1 && <Count> < 100 )
		{
			if ( !View( GetSelected,SelectedImages ) )
			{
				return FALSE;
			}

			Order = ~<DefaultOrder>~;  // was not prev. set - is this what want?

			if ( !GetSubjectOrderIDInfoType( ~<Order>~, InfoType, SubjectInfoOrderId) )
			{	return FALSE;	}
		
			if ( !SelectedImages( MakeSQLList,List,TRUE,SubjectID ) )
			{
				return FALSE;
			}

			if ( ~<List>~ != ~~ ) 
			{
				Query = STR ( Select * From SubjectInfo Where SubjectID In (<List>) AND OrderID = '<SubjectInfoOrderId>' Order By OrderID,SubjectID );
			}
			else
			{
				//StatusBarText( ~You haven't set the SubjectID for the selected images~ );
				Query = ~~;
			}
		}
	}

	if ( !IsNull( ~<Query>~ ) )
	{
		if ( !<AlreadyHaveSubjectInfoOrderID> )
		{
			if ( !GetSubjectOrderIDInfoType( ~<Order>~, InfoType, SubjectInfoOrderId) )		{ return FALSE; }

			AlreadyHaveSubjectInfoOrderID = TRUE;
		}

		if ( <ImageClicked> )
		{
			if ( IsSubjectInfoOpenForOrderID( ~<SubjectInfoOrderId>~ ) )
			{
				Actions = ACTION Doc ( SubjectInfo OpenOnce SubjectInfoDoc "Init2( ~<SubjectInfoOrderId>~,~<InfoType>~,~<Query>~ );" );
			}
			else
			{
				Actions = ACTION Doc ( SubjectInfoDoc "Init2( ~<SubjectInfoOrderId>~,~<InfoType>~,~<Query>~ );" );
			}
		}
		else
		{
			if ( IsSubjectInfoOpenForOrderID( ~<SubjectInfoOrderId>~ ) )
			{
				Actions = ACTION Doc ( SubjectInfo OpenOnce SubjectInfoDoc "Init2( ~<SubjectInfoOrderId>~,~<InfoType>~,~<Query>~ );" );
			}
			else
			{
				Actions = ACTION Doc ( SubjectInfo Open SubjectInfoDoc "Init2( ~<SubjectInfoOrderId>~,~<InfoType>~,~<Query>~ );" );
			}
		}

		PerformActions( Actions );
	}

	if ( KeyState( SHIFT ) || KeyState( CONTROL ) )
	{
		return TRUE;
	}

	if ( (<Count> == 1) && NumWindows( SingleImageEdit ) && <OpenImages> )
	{
		OpenSelectedImages(FALSE,FALSE);
	}

	if ( <Count> == 1 && Defined(SelectedImages) )	
	{
		if ( SelectedImages( GetFirst,Image ) )
		{
			Actions = ACTION Doc ( RetouchInstrDialog "NewImage( ~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~);" );
			PerformActions( Actions );
		}
	}

	return TRUE;
}


NUMERIC IsSubjectInfoOpenForOrderID( OrderID )
{
	Index = 0;

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		while ( Window( GetNext,aView ) )
		{
			theDoc = aView( GetReferenceTo, Document);
			if ( <theDoc> )
			{
				Document(aDoc,Is,<theDoc>);
				
				aDoc( GetDocumentPath,DocumentPath );
				if ( !SimilarStr( ~<DocumentPath>~, ~SubjectInfoDoc~ ) )
					continue;

				aDoc( GetGlobalSymbolValue, ~LastOrderID~, lastOrderID );
				if ( SimilarStr( ~<lastOrderID>~,~<OrderID>~ ) )
				{
					return TRUE;
				}
			}
		}

		continue;
	}

	return FALSE;
}


NUMERIC ViewSBAData( ImageClicked )
{	
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	Order = ~~;
	if ( !Defined( View ) )
		{ return FALSE; }

	Query = ~~;

	if ( <ViewIsImages> )
	{
		View( Get,Text,Order );
		if ( !<ImageClicked> )
		{
			return ViewSBAInfoForOrder( ~<Order>~ );
		}

		Count = View( GetSelectedIconCount );
		if ( <Count> >= 1 )
		{
			if ( !View( GetSelected,SelectedImages ) )
			{
				return FALSE;
			}
		}

		imageCount = 0;
		queryLength = 0;
		maxQueryString = <maxQueryLength> - 474;

		if ( <Count> > 1 )
		{
			criteriaList = ~(~;
			while ( SelectedImages( GetNext,Image ) && <queryLength> < <maxQueryString> )
			{
				if ( ~<criteriaList>~ != ~(~ )
				{
					criteriaList = ~<criteriaList> OR~;
				}
				criteriaList = ~<criteriaList> (Images.Roll = '<$con.Image[Roll]>' AND Images.Frame = '<$con.Image[Frame]>')~;

				imageCount = <imageCount> + 1;
				queryLength = strlen( ~<criteriaList>~ );
			}
			criteriaList = ~<criteriaList>)~;

			if ( <queryLength> > <maxQueryString> && <imageCount> < <Count> )
			{
				Log( Session,~query for <imageCount> images is:<criteriaList>~ );

				Msg = ~You can select up to <imageCount> individual images or the selected Roll(s).\nPlease indicate your selection.~;

				GenCon( MbInfo,New,DDCustomMessageBox );
				MbInfo( SetValues,Title,Translate(~SBA Data~),Message,~<Msg>~,
							Button1,Translate(~&Rolls~),Button2,Translate(~&<imageCount> Images~),Button3,Translate(~&Cancel~),
							SetWindowPos,1,X,-1,Y,-1,Width,325,Height,215 ) ;
				result = CustomMessageBox(MbInfo);
				button = MbInfo(GetNumeric, ButtonPressed);
				if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
				{
					return FALSE;	
				}
				else if ( <button> == 1 )
				{
					if ( !View( GetSelected,SelectedImages ) )
					{
						return FALSE;
					}
					if ( !SelectedImages( MakeSQLList,RollList,TRUE,Roll ) )
					{
						return FALSE;
					}
					criteriaList = ~~;
					if ( ~<RollList>~ != ~~ ) 
					{
						criteriaList = ~Images.Roll In (<RollList>)~;
					}
					Actions = ACTION DOC ( ~SBAImages~ OpenOnce SBAImagesDoc "Init( ~<Order>~,~~,~<criteriaList>~ );" );
					return PerformActions( Actions );
				}
			}
			Actions = ACTION DOC ( ~SBAImages~ OpenOnce SBAImagesDoc "Init( ~<Order>~,~~,~<criteriaList>~ );" );
			return PerformActions( Actions );
		}
		else if ( <Count> == 1 && Defined(SelectedImages) )	
		{
			if ( SelectedImages( GetFirst,Image ) )
			{
				Actions = ACTION Doc ( ~SBAImages~ OpenOnce SBAImagesDoc "Init( ~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~Images.Frame = '<$con.Image[Frame]>'~);" );
				return PerformActions( Actions );
			}
			else
			{
				return Warning( ~Unabled to retrieve SBA data for selected image." );
			}
		}
	}
	else	// is a grid view
	{
		return ViewSBAInfoForOrder( ~<Order>~ );
	}

	return TRUE;
}


NUMERIC ViewAutoBalanceData( ImageClicked )
{	
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	Order = ~~;
	if ( !Defined( View ) )
		{ return FALSE; }

	Query = ~~;

	if ( <ViewIsImages> )
	{
		View( Get,Text,Order );
		if ( !<ImageClicked> )
		{
			return ViewDSBAInfoForOrder( ~<Order>~ );
		}

		Count = View( GetSelectedIconCount );
		if ( <Count> >= 1 )
		{
			if ( !View( GetSelected,SelectedImages ) )
			{
				return FALSE;
			}
		}

		imageCount = 0;
		queryLength = 0;
		maxQueryString = <maxQueryLength> - 474;

		if ( <Count> > 1 )
		{
			criteriaList = ~(~;
			while ( SelectedImages( GetNext,Image ) && <queryLength> < <maxQueryString> )
			{
				if ( ~<criteriaList>~ != ~(~ )
				{
					criteriaList = ~<criteriaList> OR~;
				}
				criteriaList = ~<criteriaList> (Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>')~;

				imageCount = <imageCount> + 1;
				queryLength = strlen( ~<criteriaList>~ );
			}
			criteriaList = ~<criteriaList>)~;

			if ( <queryLength> > <maxQueryString> && <imageCount> < <Count> )
			{
				Log( Session,~query for <imageCount> images is:<criteriaList>~ );

				Msg = ~You can select up to <imageCount> individual images or the selected Roll(s).\nPlease indicate your selection.~;

				GenCon( MbInfo,New,DDCustomMessageBox );
				MbInfo( SetValues,Title,Translate(~Auto Balance Data~),Message,~<Msg>~,
							Button1,Translate(~&Rolls~),Button2,Translate(~&<imageCount> Images~),Button3,Translate(~&Cancel~),
							SetWindowPos,1,X,-1,Y,-1,Width,325,Height,215 ) ;
				result = CustomMessageBox(MbInfo);
				button = MbInfo(GetNumeric, ButtonPressed);
				if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
				{
					return FALSE;	
				}
				else if ( <button> == 1 )
				{
					if ( !View( GetSelected,SelectedImages ) )
					{
						return FALSE;
					}
					if ( !SelectedImages( MakeSQLList,RollList,TRUE,Roll ) )
					{
						return FALSE;
					}
					criteriaList = ~~;
					if ( ~<RollList>~ != ~~ ) 
					{
						criteriaList = ~Roll In (<RollList>)~;
					}
					Actions = ACTION DOC ( ~DSBAImages~ OpenOnce DSBAImagesDataDoc "Init( ~<Order>~,~~,~<criteriaList>~ );" );
					return PerformActions( Actions );
				}
			}
			Actions = ACTION DOC ( ~DSBAImages~ OpenOnce DSBAImagesDataDoc "Init( ~<Order>~,~~,~<criteriaList>~ );" );
			return PerformActions( Actions );
		}
		else if ( <Count> == 1 && Defined(SelectedImages) )	
		{
			if ( SelectedImages( GetFirst,Image ) )
			{
				Actions = ACTION Doc ( ~DSBAImages~ OpenOnce DSBAImagesDataDoc "Init( ~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~Frame = '<$con.Image[Frame]>'~);" );
				return PerformActions( Actions );
			}
			else
			{
				return Warning( ~Unabled to retrieve Auto Balance data for selected image." );
			}
		}
	}
	else	// is a grid view
	{
		return ViewDSBAInfoForOrder( ~<Order>~ );
	}

	return TRUE;
}


NUMERIC ShowRetouchInstructions()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	Count = 1;

	if ( !View( GetNSelected,0,1,SelectedImages ) )
	{
		return FALSE;
	}

	if ( !SelectedImages( GetFirst,Image ) )
	{
		return Warning( ~Select an image first~ );
	}

	Actions = ACTION Doc ( RetouchInstrDialog OpenOnce RetouchInstDoc "Init();" );
	PerformActions( Actions );

	Actions = ACTION Doc ( RetouchInstrDialog "NewImage( ~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~);" );
	return PerformActions( Actions );
}


NUMERIC ViewSubjectInfoForOrder()
{
	Order = ~~;

	if ( ~<DefaultOrder>~ != ~~ )
	{
		Order = ~<DefaultOrder>~;
	}
	else
	{
		if ( ImagesDataView( GetSelectedRows,SelectedImages ) )
		{
			if ( SelectedImages( GetFirst,SelectedImage ) )
			{
				SelectedImage( Get,OrderID,Order );
			}
		}
	}

	if ( ~<Order>~ == ~~ )
	{
		return Warning( ~There is no order~ );
	}

	if ( !GetSubjectOrderIDInfoType( ~<Order>~, InfoType, SubjectInfoOrderId) )
	{	return FALSE;	}

	Query = ~Select * From SubjectInfo Where OrderID = '<SubjectInfoOrderId>' Order By OrderID,SubjectID~;

	Actions = ACTION Doc ( SubjectInfo OpenOnce SubjectInfoDoc "Init2( ~<SubjectInfoOrderId>~,~<InfoType>~,~<Query>~ );" );

	return PerformActions( Actions );
}


NUMERIC ViewSBAInfoForOrder( Order )
{
	if ( ~<Order>~ == ~~ )
	{
		if ( ~<DefaultOrder>~ != ~~ )
		{
			Order = ~<DefaultOrder>~;
		}
		else
		{
			if ( ImagesDataView( GetSelectedRows,SelectedImages ) )
			{
				if ( SelectedImages( GetFirst,SelectedImage ) )
				{
					SelectedImage( Get,OrderID,Order );
				}
			}
			else if ( ImagesThumbNailWindow( GetActiveViewOfWindow,View ) )
			{
				View( Get,Text,Order );
			}
		}
	}

	if ( ~<Order>~ == ~~ )
	{
		return Warning( ~There is no order~ );
	}

	Actions = ACTION DOC ( ~SBAImages~ OpenOnce SBAImagesDoc "Init( ~<Order>~,~~ );" );
	return PerformActions( Actions );
}


NUMERIC ViewDSBAInfoForOrder( Order )
{
	if ( ~<Order>~ == ~~ )
	{
		if ( ~<DefaultOrder>~ != ~~ )
		{
			Order = ~<DefaultOrder>~;
		}
		else
		{
			if ( ImagesDataView( GetSelectedRows,SelectedImages ) )
			{
				if ( SelectedImages( GetFirst,SelectedImage ) )
				{
					SelectedImage( Get,OrderID,Order );
				}
			}
			else if ( ImagesThumbNailWindow( GetActiveViewOfWindow,View ) )
			{
				View( Get,Text,Order );
			}
		}
	}

	if ( ~<Order>~ == ~~ )
	{
		return Warning( ~There is no order~ );
	}

	Actions = ACTION DOC ( ~DSBAImages~ OpenOnce DSBAImagesDataDoc "Init( ~<Order>~,~~ );" );
	return PerformActions( Actions );
}


NUMERIC ViewKarsData( ImageClicked )
{	
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	Order = ~~;
	if ( !Defined( View ) )
		{ return FALSE; }

	Query = ~~;

	if ( <ViewIsImages> )
	{
		View( Get,Text,Order );
		if ( !<ImageClicked> )
		{
			return ViewKarsInfoForOrder( ~<Order>~ );
		}

		Count = View( GetSelectedIconCount );
		if ( <Count> >= 1 )
		{
			if ( !View( GetSelected,SelectedImages ) )
			{
				return FALSE;
			}
		}

		imageCount = 0;
		queryLength = 0;
		maxQueryString = <maxQueryLength> - 45;

		criteriaList = ~WHERE OrderID = '<Order>'~;

		if ( <Count> > 1 )
		{
			criteriaList = ~<criteriaList> AND (~;
			while ( SelectedImages( GetNext,Image ) && <queryLength> < <maxQueryString> )
			{
				if ( ~<criteriaList>~ != ~WHERE OrderID = '<Order>' AND (~ )
				{
					criteriaList = ~<criteriaList> OR~;
				}
				criteriaList = ~<criteriaList> (Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>')~;

				imageCount = <imageCount> + 1;
				queryLength = strlen( ~<criteriaList>~ );
			}
			criteriaList = ~<criteriaList>)~;

			if ( <queryLength> > <maxQueryString> && <imageCount> < <Count> )
			{
				Log( Session,~query for <imageCount> images is:<criteriaList>~ );

				Msg = ~You can select up to <imageCount> individual images or the selected Roll(s).\nPlease indicate your selection.~;

				GenCon( MbInfo,New,DDCustomMessageBox );
				MbInfo( SetValues,Title,Translate(~Auto Retouch Data~),Message,~<Msg>~,
							Button1,Translate(~&Rolls~),Button2,Translate(~&<imageCount> Images~),Button3,Translate(~&Cancel~),
							SetWindowPos,1,X,-1,Y,-1,Width,325,Height,215 ) ;
				result = CustomMessageBox(MbInfo);
				button = MbInfo(GetNumeric, ButtonPressed);
				if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
				{
					return FALSE;	
				}
				else if ( <button> == 1 )
				{
					if ( !View( GetSelected,SelectedImages ) )
					{
						return FALSE;
					}
					if ( !SelectedImages( MakeSQLList,RollList,TRUE,Roll ) )
					{
						return FALSE;
					}
					criteriaList = ~~;
					if ( ~<RollList>~ != ~~ ) 
					{
						criteriaList = ~WHERE OrderID = '<Order>' and Roll In (<RollList>)~;
					}
					Actions = ACTION DOC ( RetouchImagesDoc OpenOnce RetouchImagesDoc "Init( ~Retouch Images for <Order>~,~<criteriaList>~ );" );
					return PerformActions( Actions );
				}
			}
			Actions = ACTION DOC ( RetouchImagesDoc OpenOnce RetouchImagesDoc "Init( ~Retouch Images for <Order>~,~<criteriaList>~ );" );
			return PerformActions( Actions );
		}
		else if ( <Count> == 1 && Defined(SelectedImages) )	
		{
			if ( SelectedImages( GetFirst,Image ) )
			{
				criteriaList = ~<criteriaList> AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~;
				Actions = ACTION Doc ( RetouchImagesDoc OpenOnce RetouchImagesDoc "Init( ~Retouch Images for <Order>~,~<criteriaList>~);" );
				return PerformActions( Actions );
			}
			else
			{
				return Warning( ~Unabled to retrieve Auto Retouch data for selected image." );
			}
		}
	}
	else	// is a grid view
	{
		return ViewKarsInfoForOrder( ~<Order>~ );
	}

	return TRUE;
}


NUMERIC ViewKarsInfoForOrder( Order )
{
	if ( ~<Order>~ == ~~ )
	{
		if ( ~<DefaultOrder>~ != ~~ )
		{
			Order = ~<DefaultOrder>~;
		}
		else
		{
			if ( ImagesDataView( GetSelectedRows,SelectedImages ) )
			{
				if ( SelectedImages( GetFirst,SelectedImage ) )
				{
					SelectedImage( Get,OrderID,Order );
				}
			}
			else if ( ImagesThumbNailWindow( GetActiveViewOfWindow,View ) )
			{
				View( Get,Text,Order );
			}
		}
	}

	if ( ~<Order>~ == ~~ )
	{
		return Warning( ~There is no order~ );
	}

	Actions = ACTION DOC ( RetouchImagesDoc OpenOnce RetouchImagesDoc "Init( ~Retouch Images for <Order>~,~WHERE OrderID = '<Order>'~ );" );
	return PerformActions( Actions );
}


Include: ~ChgFldDlg.txt~;
// Options list - Change Field, and [ChangeField] button
NUMERIC ChangeSelectedColumn()
{
	return DisplayChangeFieldDlg(ImagesDataView);

}


Include: ~FilmTypesCombo.txt~;

NUMERIC RefreshComboBox()
{
	ImagesDataView( GetActiveCell,row,col );

	GenCon( Fields,Is,ImagesTableDefinition(GetReferenceTo,Fields) );

	ImagesDataView( GetColumnName,<col>,ColumnName );

	Fields( GetByName,<ColumnName>,ColumnDefinition );

	if ( ~<ColumnName>~ == ~ICCPROFILE~ )
	{
		UpdateICCProfileCombo( ColumnDefinition,<row>,<col>);
	}
	else if ( ~<ColumnName>~ == ~SCANSETUP~ )
	{
		UpdateScanSetupsCombo( ColumnDefinition,<row>,<col>);
	}
	else if ( ~<ColumnName>~ == ~FTSCANSETUP~ )
	{
		UpdateFTScanSetupsCombo( ColumnDefinition,<row>,<col>);
	}
	else if ( ~<ColumnName>~ == ~FILMTYPE~ )
	{
		UpdateFilmTypesCombo( ImagesDataView,ColumnDefinition,<row>,<col>,TRUE,0,0,0 );
	}
	else if ( ~<ColumnName>~ == ~RETOUCHBATCHSETUP~ )
	{
		UpdateRetouchBatchSetupsCombo( ColumnDefinition,<row>,<col>);
	}

	return TRUE;
}


NUMERIC UpdateScanSetupsCombo( &ColumnDefinition,Row,Col )
{
	Query = STR ( Select Name From ScanSetups Order By Name );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr,ClearErrors );
		return Warning( ~Database query failed: <Query>. <theErr>~ );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,ScanSetups,Name );

		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,ScanSetups(GetCopyOf) );

		ImagesDataView( SetComboBox,ColumnDefinition,<Col> );
	}

	return TRUE;
}


NUMERIC UpdateFTScanSetupsCombo( &ColumnDefinition,Row,Col )
{
	Query = STR ( Select Name From FTScanSetups Order By Name );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr,ClearErrors );
		return Warning( ~Database query failed: <Query>. <theErr>~ );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,ScanSetups,Name );

		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,ScanSetups(GetCopyOf) );

		ImagesDataView( SetComboBox,ColumnDefinition,<Col> );
	}

	return TRUE;
}


NUMERIC UpdateRetouchBatchSetupsCombo( &ColumnDefinition,Row,Col )
{
	Query = STR ( Select Name From RetouchBatchSetup Order By Name );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,Setups,Name );
		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,Setups(GetCopyOf) );

		ImagesDataView( SetComboBox,ColumnDefinition,<Col> );
	}

	return TRUE;
}


NUMERIC UpdateICCProfileCombo( &ColumnDefinition,Row,Col )
{
	Query = STR ( Select Name From Profiles Where Type = 'Input' Or Type = 'WorkingSpace' Order By Name );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr,ClearErrors );
		return Warning( ~Database query failed: <Query>. <theErr>~ );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,ICCProfiles,Name );

		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,ICCProfiles(GetCopyOf) );

		ImagesDataView( SetComboBox,ColumnDefinition,<Col> );
	}

	return TRUE;
}

VOID OnCloseImagesDataView()
{
	if ( ImagesDataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return;
			}
		}
	}

	if ( Defined( DImageSba ) )
	{
		ForgetGlobal( DImageSba );
	}

	ImagesDataWindow( ForceCloseWindow );

	return;
}


NUMERIC SaveAllChanges()
{
	while ( ImagesDataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !ImagesDataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new images that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( ImagesDataView( PendingChanges ) )
	{
		ImagesDataView( RollBackChanges );
	}

	return TRUE;
}

VOID SaveUserSettings()
{
	SetUserSettings( ~<$Job.Title>~,ChromaKeyBGImageID,~<fChromaKeyBGImageID>~,TRUE );
	SetUserSettings( ~<$Job.Title>~,ChromaKeyMaskState,~<fChromaKeyMaskState>~,TRUE );
	SetUserSettings( ~<$Job.Title>~,ChromaKeyFillColor,
		~<fChromaKeyFillColorValue> <fChromaKeyFillColorRed> <fChromaKeyFillColorGreen> <fChromaKeyFillColorBlue>~,
		TRUE );
}

NUMERIC ScanIntoThisOrder()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Sorry, these are product images and therefore have no order.~ ) );
	}

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( View( IsThumbNailView ) )
	{
		View( GetName,OrderID );

		if ( Numeric(~<$[Symbols].RunVersion[Value]>~) >= 2.1 )
		{
			Actions = ACTION Doc ( StartScanningDoc OpenOnce StartScanningDoc "Init(~<OrderID>~);" );
		}
		else
		{
			Actions = ACTION Doc ( ScannerDoc OpenOnce ScannerDoc "OnChangeOrder(~Sizzle~,~<OrderID>~);" );
		}
		PerformActions( Actions );
	}

	return TRUE;
}


NUMERIC MarkForRescan()
{
	if ( <ImageType> != 0 )
	{
		return Warning( Translate( ~Sorry, these are product images and therefore have no order.~ ) );
	}

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( View( IsThumbNailView ) )
	{
		View( GetName,OrderID );

		if ( IsNull(~<OrderID>~) )
		{
			return Warning( Translate( ~No order selected~ ) );
		}

		Action = ACTION DOC ( ~SetScanfromOrderItemsDoc~ OpenOnce SetScanfromOrderItemsDoc "Init(~<OrderID>~);" );
	
		return PerformActions( Action );
	}
	
	return TRUE;	
}

Include: ~CreateOrderItems.txt~;

// The user can select multiple images in the Images Thumbnail view, rightmouse click
// and select a Category->Product to print to.  Once the Product is selected, this
// routine is called.
// The selected product can be:
//   1.  regular Layout
//   2.  Package
//   3.  Multiple
//   4.  Style

// n Images to 1 layout
NUMERIC WantProduct( ProductID,LayoutName )
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( GetName,OrderID );

	ImagesOrderID = ~<OrderID>~;

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no rows selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There were no images selected~ ); }

	// IF THE ORDERITEMS WINDOW IS OPEN, THEN THE ORDER IS FOR THE CURRENT VIEW OF THAT WINDOW

	if ( GenCon( OrderItemsWindow,GetWindow,OrderItemsWindow ) )
	{
		if ( OrderItemsWindow( GetActiveViewOfWindow,OrderItemsView ) )
		{
			OrderItemsView( GetName,OrderID );
		}
	}

	ImagesDataWindow( StatusBar,Text,Translate(~Quantity <DesiredProductQty> of Product <ProductID>(<LayoutName>) for <Count> selected images~) );


	DoIt = CustomMessageBox( Title,~Create Order Item(s) for~,Message,~\n\nOrder      '<OrderID>'\nProduct   '<ProductID>'\nLayout     '<LayoutName>'\nQuantity   <DesiredProductQty>\n\nwith the selected images from Order '<ImagesOrderID>'? ~,
									Button1,~&Yes~,
									//Button2,~&Remake~,
									Button2,~Cancel~ );
	if ( <DoIt> == 1 )
	{
		Remake = FALSE;
	}
	else if ( <DoIt> == 1.5 )
	{
		Remake = FALSE;
	}
	else 
	{
		return FALSE;
	}

//	if ( MessageBox( ~Create Order Item(s) for\n\nOrder      '<OrderID>'\nProduct   '<ProductID>'\nLayout     '<LayoutName>'\nQuantity   <DesiredProductQty>\n\nwith the selected images from Order '<ImagesOrderID>'? ~,ICONQUESTION,YESNO ) == NO )
//		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	CreateOrderItems( dBase,SelectedImages,~<ProductID>~,~<OrderID>~,~<DesiredProductQty>~,~~,<Remake> );

	return TRUE;
}



NUMERIC SetSubjectIDDialog()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	WaitCursor( Begin );

	if ( !View( GetSelected,SelectedImages ) )		
	{ 
		WaitCursor( End );
		return Warning( ~There were no rows selected~ );
	}

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
	{ 
		WaitCursor( End );
		return Warning( ~There were no images selected~ );
	}

	View( GetName,OrderID );

	SelectedImages( GetFirst,Image );

	FirstSubjectID = ~<$con.Image[SubjectID]>~;

	GenCon( ThisWindow,GetActiveWindow );

	ThisWindow( GetWindowPosition,left,top,right,bottom );

	X = <left> + ( <right> - <left> ) / 3;
	Y = <top> + ( <bottom> - <top> ) / 2;

	Actions = ACTION Doc ( SubjectIDDialog OpenOnce SubjectIDDialog "Init( ~<OrderID>~,~<FirstSubjectID>~,<X>,<Y>,<ImagesCount> );" );
	
	WaitCursor( End );

	return PerformActions( Actions );
}



NUMERIC RedrawThumbnailByPath( Path )
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	if ( !View( GetAll,AllImages ) )		
		{ return FALSE; }

	if ( AllImages( FindI,Path,~<Path>~,ThePosition,Item ) )
	{
		if ( Item( GetThumbNailInfo,ThumbNail ) )
		{
			View( RedrawThumbNail,ThumbNail,TRUE );
		}
	}

	return TRUE;
}



NUMERIC RemoveThumbnailByOrderRollFrame( &View,OrderID,Roll,Frame )
{
	if ( View( FindI,Key,~OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~,Where,Image ) )
	{ 
		View( RemoveThumbNailFor,Image );
	}

	return TRUE;
}


NUMERIC SelectRejected()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetAll,SelectedImages ) )		
		{ return Warning( ~There were no rows selected~ ); }

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	while ( SelectedImages( GetNext,Item ) )
	{
		if ( Item( GetThumbNailInfo,ThumbNail ) )
		{
			ThumbNail( Get,IsDeleted,IsDeleted );
			ThumbNail( Set,IsSelected,<IsDeleted> );
			View( RedrawThumbNail,ThumbNail,FALSE );
		}
	}

	return TRUE;
}
	
NUMERIC SelectAccepted()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetAll,SelectedImages ) )		
		{ return Warning( ~There were no rows selected~ ); }

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	while ( SelectedImages( GetNext,Item ) )
	{
		if ( Item( GetThumbNailInfo,ThumbNail ) )
		{
			ThumbNail( Get,IsDeleted,IsDeleted );
			ThumbNail( Set,IsSelected,!<IsDeleted> );
			View( RedrawThumbNail,ThumbNail,FALSE );
		}
	}

	return TRUE;
}

VOID	CustomSetSubjectIDToOptions()	{ }


NUMERIC SetSubjectIDTo()
{
	if ( !ImagesThumbNailWindow( GetActiveViewOfWindow,View ) )
		{ return FALSE; }

	Define:	SetSubjectIDMenu Using DDMenuDef
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			CustomSetSubjectIDToOptions();
			
			Define:	UseFileName	using	DDMenuItemDef
				Fields:	Text		~Filename of the image~
						IDText		~ID~
						ActionsText  ACTION Exec ( SetSubjectIDToImage(~FileName~) )

			Define:	UseFileNameWithoutExtension	using	DDMenuItemDef
				Fields:	Text		~Filename of the image without the extension~
						IDText		~ID~
						ActionsText  ACTION Exec ( SetSubjectIDToImage(~FileNameWithoutExtension~) )

			Define:	NULL1 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	PunchNumberPad3	using	DDMenuItemDef
				Fields:	Text		~Punch Number (3 digits)~
						IDText		~ID~
						ActionsText  ACTION Exec ( SetSubjectIDToImage(~PunchNumberPad3~) )

			Define:	PunchNumberPad4	using	DDMenuItemDef
				Fields:	Text		~Punch Number (4 digits)~
						IDText		~ID~
						ActionsText  ACTION Exec ( SetSubjectIDToImage(~PunchNumberPad4~) )

			Define:	NULL2 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	SequenceID	using	DDMenuItemDef
				Fields:	Text		~Sequence ID~
						IDText		~ID~
						ActionsText  ACTION Exec ( SetSubjectIDToImage(~SequenceID~) )

			Define:	AlternateID	using	DDMenuItemDef
				Fields:	Text		~Alternate ID~
						IDText		~ID~
						ActionsText  ACTION Exec ( SetSubjectIDToImage(~AlternateID~) )

		}

	View( GetLastMousePosition,mouseX,mouseY );

	return View( DisplayMenu,SetSubjectIDMenu,<mouseX>,<mouseY> );
}


NUMERIC SetSubjectIDToImage(Which)
{
	if ( !ImagesThumbNailWindow( GetActiveViewOfWindow,View ) )
		{ return FALSE; }

	WaitCursor( Begin );

	if ( !View( GetSelected,SelectedImages ) )		
	{
		WaitCursor( End ); 
		return Warning( ~There were no rows selected~ );
	}

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
	{ 
		WaitCursor( End );
		return Warning( ~There were no images selected~ );
	}

	if ( !ADO( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( ~Error: <theErr>~,~From: [<theSQL>]~ );
	}

	WaitCursor( Begin );

	while ( SelectedImages( GetNext,Item ) )
	{
		if ( !Item( GetThumbNailInfo,ThumbNail ) )
			continue;

		StatusBarText( ~Setting SubjectID for <$con.Item[OrderID]> <$con.Item[Roll]> <$con.Item[Frame]>~ );

		if ( SimilarStr( ~<Which>~,~FileName~ ) )
		{
			SubjectID = ~<$con.item[Path].Filename>~;
		}
		else if ( SimilarStr( ~<Which>~,~FileNameWithoutExtension~ ) )
		{
			SubjectID = ~<$con.item[Path].Filename.WithoutExt>~;
		}
		else if ( SimilarStr( ~<Which>~,~PunchNumberPad3~ ) )
		{
			SubjectID = ~<$con.item[Punch].%03ld>~;
		}
		else if ( SimilarStr( ~<Which>~,~PunchNumberPad4~ ) )
		{
			SubjectID = ~<$con.item[Punch].%04ld>~;
		}
		else if ( SimilarStr( ~<Which>~,~SequenceID~ ) )
		{
			SubjectID = ~<$con.item[SequenceID]>~;
		}
		else if ( SimilarStr( ~<Which>~,~AlternateID~ ) )
		{
			SubjectID = ~<$con.item[AlternateID]>~;
		}
		else
		{
			WaitCursor( End );
			return Warning( ~<Which> is not a valid option for SetSubjectIDToImage~ );
		}

		if ( IsNull(~<SubjectID>~) )
			continue;

		Key = ~OrderID = '<$con.Item[OrderID]>' AND Roll = '<$con.Item[Roll]>' AND Frame = '<$con.Item[Frame]>'~;
		Cmd = ~Update Images Set SubjectID = '<SubjectID>' Where <Key>~;

		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			WaitCursor( End );
			dBase( GetErrorDescription,theErr );
			return Warning( ~Error: <theErr>~,~From: [<Cmd>]~ );
		}

		IF 0
		{
			if ( !GetSubjectOrderIDInfoType( ~<$con.Item[OrderID]>~, InfoType, SubjectInfoOrderId) )
			{	return FALSE;	}

			if ( ~<SubjectID>~ != ~~ ) // LET'S DON'T ADD A BUNCH OF BLANK RECORDS
			{
				Cmd = ~Insert Into SubjectInfo<InfoType>(SubjectID,OrderID) Values('<SubjectID>','<SubjectInfoOrderId>')~;
				
				dBase( IgnoreErrors,Cmd,~<Cmd>~ );	// OKAY IF THIS ERROR OUT
				dBase( ReportErrors );
			}
		}

		ThumbNail( Set,Info2,~<$con.Item[Roll]>-<$con.Item[Frame]>  <SubjectID>~ );

		if ( ThumbNail( GetData,Data ) )
		{
			Data( Set,SubjectID,~<SubjectID>~ );
		}

		View( RedrawThumbNail,ThumbNail,FALSE );
		
		if ( DefinedAndNotNull(Increment) && IsNumeric(~<SubjectID>~) )
		{
			if ( <Increment> != 0  )
			{
				len = strlen( ~<SubjectID>~ );
				SubjectID = <SubjectID> + <Increment>;

				if ( <SubjectID> < 0 )
				{
					SubjectID = 0;
				}

				SubjectID = Format( ~<SubjectID>~,~%0<len>ld~ );
			}
		}				
	}

	WaitCursor( End );

	ViewSubjectInfoData( TRUE,(<ImagesCount> == 1) );

	return TRUE;
}


NUMERIC CreateSubjectInfoRecords()	
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	WaitCursor( Begin );

	StatusBarText( ~Counting selected images~ );

	if ( !View( GetSelected,SelectedImages ) )		
	{ 
		WaitCursor( End );
		return Warning( ~There were no rows selected~ );
	}

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
	{ 
		WaitCursor( End );
		return Warning( ~There were no images selected~ );
	}

	msg = ~Are you sure you want to create empty SubjectInfo records for the <ImagesCount> selected images?

SubjectInfo records will be created for the images that have valid SubjectID's.  The ones that do not
have a valid SubjectID will be skipped.  Any SubjectInfo records that already exist will not be altered.

Continue?~;

	if ( MessageBox( ~<msg>~,YESNO ) == NO )
	{ 
		return TRUE;
	}

	if ( !ADO( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( ~Error: <theErr>~,~From: [<theSQL>]~ );
	}

	PrevOrderID = ~~;

	Skipped = 0;

	while ( SelectedImages( GetNext,Item ) )
	{
		if ( IsNull( ~<$con.Item[SubjectID]>~ ) )
		{
			++Skipped;
			continue;
		}

		if ( !SimilarStr(~<PrevOrderID>~,~<$con.Item[OrderID]>~) )
		{
			if ( !GetSubjectOrderIDInfoType( ~<$con.Item[OrderID]>~, InfoType, SubjectInfoOrderId) )
			{	return FALSE;	}

			PrevOrderID = ~<$con.Item[OrderID]>~;
		}

		StatusBarText( ~Inserting <SubjectInfoOrderId> <$con.Item[SubjectID]>~ );

		Cmd = ~Insert Into SubjectInfo<InfoType>(SubjectID,OrderID) Values('<$con.Item[SubjectID]>','<SubjectInfoOrderId>')~;
		
		dBase( IgnoreErrors,Cmd,~<Cmd>~ );	// OKAY IF THIS ERRORS OUT
		dBase( ReportErrors );
	}

	if ( <Skipped> )
	{
		Warning( ~<Skipped> images were skipped because a SubjectID has not been assigned~ );
	}

	WaitCursor( End );

	return TRUE;
}



NUMERIC SetSubjectID( SubjectID,Increment,IgnoreRejected )	// CALLED FROM SUBJECTIDDIALOG
{
	if ( !ImagesThumbNailWindow( GetActiveViewOfWindow,View ) )
		{ return FALSE; }

	WaitCursor( Begin );

	StatusBarText( ~Checking Images~ );

	if ( !View( GetSelected,SelectedImages ) )		
	{ 
		WaitCursor( End );
		return Warning( ~There were no rows selected~ );
	}

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
	{ 
		WaitCursor( End );
		return Warning( ~There were no images selected~ );
	}

	if ( !ADO( dBase,Connect ) )
	{
		WaitCursor( End );
		dBase( GetErrorDescription,theErr );
		return Warning( ~Error: <theErr>~,~From: [<theSQL>]~ );
	}

	InfoType = ~~;
	PrevOrderID = ~~;

	Verb = IsNull( ~<SubjectID>~ ) ? ~Clearing~ : ~Setting~;

	while ( SelectedImages( GetNext,Item ) )
	{
		if ( !Item( GetThumbNailInfo,ThumbNail ) )
			continue;

		if ( <IgnoreRejected> )
		{
			ThumbNail( Get,IsDeleted,IsDeleted );

			if ( <IsDeleted> )
				continue;
		}

		StatusBarText( ~<Verb> SubjectID for <$con.Item[OrderID]> <$con.Item[Roll]> <$con.Item[Frame]>~ );

		Key = ~OrderID = '<$con.Item[OrderID]>' AND Roll = '<$con.Item[Roll]>' AND Frame = '<$con.Item[Frame]>'~;
		Cmd = ~Update Images Set SubjectID = '<SubjectID>' Where <Key>~;

		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			WaitCursor( End );
			dBase( GetErrorDescription,theErr );
			return Warning( ~Error: <theErr>~,~From: [<Cmd>]~ );
		}

		IF FALSE
		{
			if ( ~<SubjectID>~ != ~~ )
			{
				if (~<PrevOrderID>~ != ~<$con.Item[OrderID]>~)
				{
					if ( !GetSubjectOrderIDInfoType( ~<$con.Item[OrderID]>~, InfoType, SubjectInfoOrderId) )
					{	return FALSE;	}
					PrevOrderID = ~<$con.Item[OrderID]>~;
				}

				Cmd = ~Insert Into SubjectInfo<InfoType>(SubjectID,OrderID) Values('<SubjectID>','<SubjectInfoOrderId>')~;
				
				dBase( IgnoreErrors,Cmd,~<Cmd>~ );	// OKAY IF THIS ERROR OUT
				dBase( ReportErrors );
			}
		}

		ThumbNail( Set,Info2,~<$con.Item[Roll]>-<$con.Item[Frame]>  <SubjectID>~ );

		if ( ThumbNail( GetData,Data ) )
		{
			Data( Set,SubjectID,~<SubjectID>~ );
		}

		View( RedrawThumbNail,ThumbNail,FALSE );
		
		if ( DefinedAndNotNull(Increment) && IsNumeric(~<SubjectID>~) )
		{
			if ( <Increment> != 0  )
			{
				len = strlen( ~<SubjectID>~ );
				SubjectID = <SubjectID> + <Increment>;

				if ( <SubjectID> < 0 )
				{
					SubjectID = 0;
				}

				SubjectID = Format( ~<SubjectID>~,~%0<len>ld~ );
			}
		}				
	}

	WaitCursor( End );

	ViewSubjectInfoData( TRUE,(<ImagesCount> == 1) );

	return TRUE;
}

CopiedCropX = CopiedCropY = CopiedCropWidth = CopiedCropLength = 0;
CopiedCropRotation = 0;


NUMERIC SetCrop()
{
	Query = ~Select Name From Crops Order By Name~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Crops table: <Query>. <theErr>~ );
	}

	Count = List( NumEntries );

	if ( !<Count> )
	{
		if ( MessageBox( ~There are no crops defined.  Would you like to define crops?~,YESNO ) == YES )
		{
			action = ACTION DOC ( AllCrops OpenOnce CropsDoc "Init( ~~,~SELECT * From Crops Order By Name~ );" );
			return PerformActions( action );			
		}

		return FALSE;
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		GenCon( CropName<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~&<Count>)  <$pcon.Item[Name]>~,
				IDText,		~ID~ );

		ActionsText = ACTION Exec ( WantCrop(~<$pcon.Item[Name]>~); );

		CropName<Count>( SetValuesFrom,ActionsText,ActionsText );

		ListMenu( InsertBack,CropName<Count> );
	}


	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( DisplayMenu,ListMenu );

	return TRUE;
}


NUMERIC WantCrop( Name )
{
	Query = ~Select Name,CropX,CropY,CropWidth,CropLength From Crops Where Name = '<Name>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Crops table: <Query>. <theErr>~ );
	}

	if ( !List( GetFirst,Item ) )
	{
		return Warning( ~Failed to query the Crops table: <Query>. <theErr>~ );
	}

	CopiedCropX = ~<$pcon.Item[CropX].numeric>~;
	CopiedCropY = ~<$pcon.Item[CropY].numeric>~;
	CopiedCropWidth = ~<$pcon.Item[CropWidth].numeric>~;
	CopiedCropLength = ~<$pcon.Item[CropLength].numeric>~;
	CopiedCropRotation = 0;

	fHeadAlignmentSetup = ~<Name>~;

	return UpdateCrop();
}
	
NUMERIC WantHeadAlignmentSetup( Name )
{
	Query = ~Select Name,HeadX,HeadY,HeadWidth,HeadLength From Crops Where Name = '<Name>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Crops table: <Query>. <theErr>~ );
	}

	if ( !List( GetFirst,Item ) )
	{
		return Warning( ~Failed to query the Crops table: <Query>. <theErr>~ );
	}

	HeadX = ~<$pcon.Item[HeadX].numeric>~;
	HeadY = ~<$pcon.Item[HeadY].numeric>~;
	HeadWidth = ~<$pcon.Item[HeadWidth].numeric>~;
	HeadLength = ~<$pcon.Item[HeadLength].numeric>~;

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View(SetHeadAlignmentValues,<HeadX>,<HeadY>,<HeadWidth>,<HeadLength>);

	View(GetShowHeadAlignment,showHeadAlignment);
	if (<showHeadAlignment> == 0)
	{
		View(SetShowHeadAlignment,2);
	}

	fHeadAlignmentSetup = ~<Name>~;

	return ImagesThumbNailWindow( RefreshWindow );
}
	

NUMERIC UpdateCrop()	// CALLED FROM SUBJECTIDDIALOG
{
	if ( <CopiedCropWidth> == 0 || <CopiedCropLength> == 0 )
	{
		return Warning( Translate( ~You must copy a crop first~ ) );
	}

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no rows selected~ ); }

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	while ( SelectedImages( GetNext,Item ) )
	{
		Path = ~<$con.Item[Path]>~;

		if ( ~<Path>~ != ~~ )
		{		
			ImageCorrections( UpdateCrop,~<Path>~,<CopiedCropX>,<CopiedCropY>,<CopiedCropWidth>,<CopiedCropLength> );
		}
	}

	return TRUE;
}


NUMERIC PasteCrop()	// CALLED FROM SUBJECTIDDIALOG
{
	if ( <CopiedCropWidth> == 0 || <CopiedCropLength> == 0 )
	{
		return Warning( Translate( ~You must copy a crop first~ ) );
	}

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no rows selected~ ); }

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	while ( SelectedImages( GetNext,Item ) )
	{
		Path = ~<$con.Item[Path]>~;

		if ( ~<Path>~ != ~~ )
		{		
			ImageCorrections( PasteCrop,~<Path>~,<CopiedCropX>,<CopiedCropY>,<CopiedCropWidth>,<CopiedCropLength>,<CopiedCropRotation> );
		}
	}

	return TRUE;
}


NUMERIC ClearCrop()	// CALLED FROM SUBJECTIDDIALOG
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no rows selected~ ); }

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
		{ return Warning( ~There were no images selected~ ); }

	while ( SelectedImages( GetNext,Item ) )
	{
		Path = ~<$con.Item[Path]>~;

		if ( ~<Path>~ != ~~ )
		{		
			ImageCorrections( PasteCrop,~<Path>~,50,50,100,100,0 );
		}
	}

	return TRUE;
}


NUMERIC PasteBalance()	
{
	if ( !Defined( CopiedCorrections ) )		{ return Warning( Translate( ~You must copy corrections first~ ) );}

	if ( !GenCon( View,GETACTIVEVIEW ) )		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedImages ) )	{ return Warning( ~There were no images selected~ ); }

	if ( SelectedImages( ChildCount ) <= 0 )	{ return Warning( ~There were no images selected~ ); }

	while ( SelectedImages( GetNext,Item ) )
	{
		Path = ~<$con.Item[Path]>~;

		if ( ~<Path>~ != ~~ )
		{
			ImageCorrections( ReplaceBalance,~<Path>~,CopiedCorrections );
		}
	}

	return TRUE;
}


NUMERIC CopyBalance()	
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate( ~There was no active view~ ) ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( Translate( ~You must select an image to copy the balance information from.~ ) ); }

	if ( !SelectedImages( GetFirst,Item ) )
	{
		return Warning( Translate( ~You must select an image to copy the balance information from.~ ) );
	}

	Count = SelectedImages( ChildCount );
	if ( <Count> > 1 )
	{
		return Warning( Translate( ~You can only select one image to copy the balance information from.~ ) );
	}

	Path = ~<$con.Item[Path]>~;

	if ( IsNULL( ~<Path>~ ) )
	{
		return Warning( Translate( ~There is no path specified for the selected image~ ) );
	}
			
	ForgetGlobal( CopiedCorrections );

	ImageCorrections( GetCurrentCorrections,~<Path>~,CopiedCorrections );

	Global( CopiedCorrections );

	return TRUE;
}


NUMERIC SelectAutoBalSetup( SbaLevel )
{
	PrefsQuery = ~Select Name From DSbaPrefsDef Order By Name~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<PrefsQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed:\n\n<PrefsQuery>.\n\n<theErr>.~ ) ); 
	}

	List( SetConnection,~~ );	// DISCONNECT LIST FROM THE DATABASE

	Count = List( NumEntries );

	if ( !<Count> )
	{
		return Warning( Translate( ~No auto balance preferences defined.~ ) );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		GenCon( prefs<++Count>,New,DDMenuItemDef,
			SetValues,	Text,~&<Count>)  <$pcon.Item[Name]>~,
						IDText,	~ID~ );

		theAction  = ACTION EXEC ( OnAutoBalance( ~<$pcon.Item[Name]>~,<SbaLevel> ); );

		prefs<Count>( SetValuesFrom,ActionsText,theAction );

		ListMenu( InsertBack,prefs<Count> );
	}

	if ( <Count> == 0 )
	{
		return Warning( Translate( ~There are no Auto Balance Preferences defined.~ ) );
	}


	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( DisplayMenu,ListMenu );

	return TRUE;
}

NUMERIC OnAutoBalance( SbaSetup,SbaLevel )	
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate( ~There was no active view~ ) ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( Translate( ~You must select one or more images~ ) ); }

	count = SelectedImages( ChildCount );

	if ( <count> == 0 )
	{
		return Warning( Translate(~You should select the image(s) you wish to auto balance~ ) );
	}

	SbaInit();

	WaitCursor( Begin );
	moreImages = SelectedImages( GetNext, Image );

	while ( <moreImages> )
	{
		result = FALSE;

		Order = ~~;
		Roll  = ~~;
		Frame = ~~;
		Path  = ~~;
		ICCProfile = ~~;

		thumbnailImage = ~~;
		embeddedProfile = ~~;
		embeddedProfileChecked = FALSE;

		den		= 0;
		red		= 0;
		green	= 0;
		blue	= 0;

		Path = ~<$con.Image[Path]>~;

		if ( IsNULL( ~<Path>~ ) )
		{
			continue;
		}
					
		Image( GetValues,OrderID,Order,Roll,Roll,Frame,Frame,ICCProfile,ICCProfile,ColorType,ColorType );
		colorType = Numeric( ~<ColorType>~ );

		checkColorType = Numeric( ~<$SystemSettings.AdjustImages[CheckColorType]>~ );

		if ( <checkColorType> && <colorType> == 0 )
		{
			colorType = DetermineColorType( ~<Path>~ );
		}

		if ( <colorType> <= 2 )
		{
			if ( Defined( View ) )
			{
				View( GetThumbnailImage,~<Path>~,thumbnailImage,embeddedProfile );
				embeddedProfileChecked = TRUE;

			}

			ImagesThumbnailWindow( StatusBar,Text,Translate( ~Auto balancing image <$con.Image[Frame]>~ ));
			result = BalanceImage( thumbnailImage,~<SbaSetup>~,~<SbaLevel>~,
									~<Order>~,~<Roll>~,~<Frame>~,~<Path>~,~<ICCProfile>~,
									~<embeddedProfile>~,~<embeddedProfileChecked>~,<colorType> );

			if ( <result> )
			{
				GetSbaSliders( den,red,green,blue );

				ImageCorrections( UpdateDRGB,~<Path>~,<den>,<red>,<green>,<blue>,<colorType> );
			}
		}
		else
		{
			ImageCorrections( UpdateColorType,~<Path>~,<colorType> );
			Log( Session,~<Order>,<Roll>,<Frame> is BW, Sepia or Spot Color. AutoBalance can be run on color or on individual BW images only.~ );
		}
		moreImages = SelectedImages( GetNext, Image );

	}

	ImagesThumbnailWindow( StatusBar,Text,Translate( ~Auto balance complete~ ));
	WaitCursor( End );

	return TRUE;
}


NUMERIC CopyCrop()	
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate( ~There was no active view~ ) ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( Translate( ~You must select an image to copy~ ) ); }

	if ( !SelectedImages( GetFirst,Item ) )
	{
		return Warning( Translate( ~You must select an image to copy~ ) );
	}

	Path = ~<$con.Item[Path]>~;

	if ( ~<Path>~ != ~~ )
	{		
		if ( ImageCorrections( GetCrop,~<Path>~,x,y,w,l,rotation ) )
		{
			CopiedCropX=<x>;	CopiedCropY = <y>;	CopiedCropWidth = <w>;  CopiedCropLength = <l>;
			CopiedCropRotation=<rotation>;
		}
	}

	return TRUE;
}



NUMERIC DisplayProductCategories()
{
	Query = ~Select Distinct Category From Products Order By Category~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Products table: <Query>. <theErr>~ );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	while ( List( GetNext,Item ) )
	{
		GenCon( ProductCategory<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~&<Count>)  <$pcon.Item[Category]>~,
				IDText,		~ID~ );

		ActionsText = ACTION EXEC ( WantCategory(~<$pcon.Item[Category]>~); );

		ProductCategory<Count>( SetValuesFrom,ActionsText,ActionsText );

		ListMenu( InsertBack,ProductCategory<Count> );

	}
	

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	View( DisplayMenu,ListMenu,2,2 );

	return TRUE;
}


NUMERIC WantCategory( which )
{
	return DisplayProductListMenu( ~<Which>~ );
}



NUMERIC DisplayProductListMenu( WhichCategory )
{
	Query = ~Select ID,LayoutName From Products~;
	
	if ( ~<WhichCategory>~ != ~~ )
	{
		 Query = ~<Query> Where Category = '<WhichCategory>'~;
	}

	Query = ~<Query> Order By ID~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Failed to query the Products table: <Query>. <theErr>~ );
	}

	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	GenCon( Product0,New,DDMenuItemDef,SetValues,
			Text,		~&0   Categories~,
			IDText,		~ID~ );

	ActionsText = ACTION Exec ( DisplayProductCategories() ) ;

	Product0( SetValuesFrom,ActionsText,ActionsText );

	ListMenu( InsertBack,Profile<Count> );

	Count = 0;

	while ( List( GetNext,Product ) )
	{
		GenCon( Product<++Count>,New,DDMenuItemDef,SetValues,
				Text,		~&<Count>   <$pcon.Product[ID]>   <$pcon.Product[LayoutName]>~,
				IDText,		~ID~ );

		ActionsText = ACTION EXEC ( WantProduct(~<$pcon.Product[ID]>~,~<$pcon.Product[LayoutName]>~) );

		Product<Count>( SetValuesFrom,ActionsText,ActionsText );

		ListMenu( InsertBack,Product<Count> );
	}
		

	if ( GenCon( View,GetActiveView ) )
	{
		View( DisplayMenu,ListMenu,2,2 );
	}

	return TRUE;
}

DesiredProductQty = 1;

NUMERIC ChooseProduct(Qty)
{
	DesiredProductQty = 1;
	
	if ( SimilarStr( ~<Qty>~,~1~,~2~,~3~,~4~,~5~,~6~,~7~,~8~,~9~ ) )
	{
		DesiredProductQty = ~<Qty>~;
	}

	ImagesDataWindow( StatusBar,Text,Translate(~Quantity <DesiredProductQty>~) );
		
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no rows selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There were no images selected~ ); }

	DisplayProductCategories();

	return TRUE;
}


NUMERIC SetOrientationInImageFile( Orientation )
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedImages ) )		
	{
		return Warning( ~There were no images selected~ );
	}

	ImagesCount = SelectedImages( ChildCount );

	if ( <ImagesCount> <= 0 )
	{ 
		return Warning( ~There were no images selected~ );
	}
	
	ReturnOnFailure( MessageBox(~Are you sure you want to change the orientation flag inside of the <ImagesCount> selected Images to <Orientation>?~,YESNO ) == YES );

	WaitCursor( Begin );
	
	count = 0;

	while ( SelectedImages( GetNext,Item ) )
	{
		StatusBarText( ~Setting orientation of <$con.Item[OrderID]>/<$con.Item[Roll]>/<$con.Item[Frame]> to <Orientation>~ );
		
		if ( !SetImageFileOrientation( ~<$con.Item[Path]>~,~<Orientation>~ ) )
		{
			if ( MessageBox( ~Failed to set the orientation flag for <$con.Item[OrderID]>/<$con.Item[Roll]>/<$con.Item[Frame]>.  Do you wish to continue? ~,YESNO ) != YES )
			{
				WaitCursor( END );
				return FALSE;
			}
		}
		else
		{
			++count;
		}
		
		MessagePump();
	}
	
	return StatusBarText( ~Completed setting the orientation to <Orientation> for <count> images~ );
}


NUMERIC ShowCrop()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( SetShowCropBox,!View(IsCropBoxShown) );

	return ImagesThumbNailWindow( RefreshWindow );
}


NUMERIC ShowHeadAlignment(value)
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( SetShowHeadAlignment,<value> );

	return TRUE;
}

NUMERIC HeadAlignmentSetup()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected.~ ); }

	if ( !SelectedImages( GetNext, Image ) )
		{ return Warning( ~There were no images selected.~ ); }

	if (!GetUserPermissions( ImageEditing ))
		{ return Warning( ~You don't have permission to modify crop/head alignment setups.  See your administrator.~ );	}

	View(GetShowHeadAlignment,showHeadAlignment);

	action = ACTION DOC ( HeadAlignmentSetupWin OpenOnce HeadAlignmentSetupWin "Init(~<fHeadAlignmentSetup>~,~<showHeadAlignment>~,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~,~<$con.Image[Path]>~);" );
	return PerformActions( action );
}

NUMERIC ClearHeadCheckFlag()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected.~ ); }

	while ( SelectedImages( GetNext, Image ) )
	{
		ImageCorrections( UpdateCheckAlignmentFlag,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~,0 );
	}

	return TRUE;
}

NUMERIC CropImages()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	isCropMode = View(IsCropMode);
	if (GetUserPermissions( ImageEditing ))
	{
		View( SetFindEyesMode,FALSE );
		View( SetAllowCropping,!View(IsCropMode) );
	}
	else
	{
		if (!<isCropMode>)
		{
			Warning( Translate( ~You don't have permission to crop/align images.  See your administrator.~ ) );
			return FALSE;
		}
	}

	return ImagesThumbNailWindow( RefreshWindow );
}

NUMERIC FindEyes()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	isFindEyesMode = View(IsFindEyesMode);
	if (GetUserPermissions( ImageEditing ))
	{
		View( SetAllowCropping,FALSE );
		View( SetFindEyesMode,!View(IsFindEyesMode) );
	}
	else
	{
		if (!<IsFindEyesMode>)
		{
			Warning( Translate( ~You don't have permission to find eyes in images.  See your administrator.~ ) );
			return FALSE;
		}
	}

	return ImagesThumbNailWindow( RefreshWindow );
}

NUMERIC ResetEyes()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	if ( !GetUserPermissions( ImageEditing ) )
	{
		Warning( Translate( ~You don't have permission to reset eyes in images.  See your administrator.~ ) );
		return FALSE;
	}

	Qty = SelectedImages( ChildCount );
	if ( <Qty> == 0 )
	{
		return Warning( ~There were no images selected~ );
	}
	
	while ( SelectedImages(GetNext,Image) )
	{
		ImageCorrections( UpdateFindEyesValues,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~,0,0.0,0.0,0.0,0.0,0.0,0.0 );
	}

	return ImagesThumbNailWindow( RefreshWindow );
}

NUMERIC ToggleChromaKeyMaskState()
{
	newState = <fChromaKeyMaskState> + 1;

	if ( <newState> > 3 )
	{
		newState = 0;
	}

	SetChromaKeyMaskState( <newState> );

	return TRUE;
}

NUMERIC SetChromaKeyMaskState( state )
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( SetChromaKeyMaskState,<state>,TRUE );

	fChromaKeyMaskState = <state>;

	return ImagesThumbNailWindow( RefreshWindow );
}

NUMERIC SetChromaKeyFillColor( colorNum )
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( SetChromaKeyMaskState,1,TRUE );

	fChromaKeyMaskState = 1;

	if ( <colorNum> == 0 )
	{
		View( SetChromaKeyBGColor,160,160,160,TRUE );
		fChromaKeyFillColorValue = 0;
	}
	else if ( <colorNum> == 1 )
	{
		View( SetChromaKeyBGColor,255,0,0,TRUE );
		fChromaKeyFillColorValue = 1;
	}

	return ImagesThumbNailWindow( RefreshWindow );
}

NUMERIC SelectChromaKeyFillColor()
{
	ReturnOnFailure( ColorDialog( 255,255,255,red,green,blue ) );

	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	View( SetChromaKeyMaskState,1,TRUE );

	fChromaKeyMaskState = 1;

	View( SetChromaKeyBGColor,~<red>~,~<green>~,~<blue>~,TRUE );

	fChromaKeyFillColorRed = ~<red>~;
	fChromaKeyFillColorGreen = ~<green>~;
	fChromaKeyFillColorBlue = ~<blue>~;
	fChromaKeyFillColorValue = -1;

	SaveUserSettings();
	
	return TRUE;
}

NUMERIC WantChromaKeyBG( ID )
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return FALSE; }

	resetBgImage = FALSE;
	if ( SimilarStr(~<ID>~,-1) )
	{
		resetBgImage = TRUE;
	}

	View( SetChromaKeyMaskState,3,TRUE );
	View( SetChromaKeyBGImage,~<ID>~,~~,<resetBgImage>,TRUE );
	fChromaKeyMaskState = 3;

	fChromaKeyBGImageID = ~<ID>~;

	return ImagesThumbNailWindow( RefreshWindow );
}

NUMERIC InteractiveChromaKey()
{
	if ( !GenCon( View,GETACTIVEVIEW ) )
		{ return Warning( Translate(UIMessages,NoActiveView) ); }
		
	Count = View( GetSelectedIconCount );
	
	if ( <count> > 0 && <count> <= 101 )
	{
		action = ACTION DOC ( GreenScreenDoc Open "<$App.HTMLPages>\GreenScreen\GreenScreenDoc.txt" "InitWithImagesFromWindow();" );
		return PerformActions( action );

	}
	else
	{
 		View( GetName,OrderID );
 		
 		if ( ~<OrderID>~ == ~~ )
			{ return Warning( Translate(~There is no OrderID~) ) };

		action = ACTION DOC ( GreenScreenDoc Open "<$App.HTMLPages>\GreenScreen\GreenScreenDoc.txt" "InitWithOrders(~'<OrderID>'~);" );
		return PerformActions( action );
	}
}


NUMERIC GS36SendForCutting( ServiceLevel )
{
	if ( !ImagesThumbNailWindow( GetActiveViewOfWindow,theImagesView ) )
	{
		return PopupMsg( ~You must select one or more images first~ );
	}
	
	ReturnOnFailure( theImagesView(GetSelected,SelectedImages) );
	
	Qty = SelectedImages( ChildCount );
	
	if ( <Qty> == 0 )
	{
		return PopMsg( ~You must select one or more images first~ );
	}
	
	ReturnOnFailure( MessageBox(~Are you sure you wish to send the <Qty> selected images to 36Pix for cutting?~,YESNO ) == YES );
		
	if ( !ADO( db,Connect ) )
	{
		db( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}
	
	db( GetValuesFor,~Select SendDelay From IF36PixMaster Where ID = 'Master'~,SendDelay );
	
	Fields = ~OrderID,Roll,Frame,JobID,ServiceLevel,Priority,StartDate~;
	
	count = 0;
	
	while ( SelectedImages( GetNext,Image) )
	{
		Key = ~OrderID='<$con.Image[OrderID]>' AND Roll='<$con.Image[Roll]>' AND Frame='<$con.Image[Frame]>' AND  Status < 6~;
		
		Query = ~Select count(*) From IF36Pix Where <Key>~;
		
		if (  db( RecordCountFor,~<Query>~ ) == 0 )
		{
			DateTime( WhenToSend,Now );

			DateTimeSpan( DesiredSendDelay,Set,0,0,<SendDelay> );

			WhenToSend( PlusEqual,DesiredSendDelay,Format,NewDateTime,~~,TRUE );
	
			Cmd = ~Insert Into IF36Pix(<Fields>) Values('<$con.Image[OrderID]>','<$con.Image[Roll]>','<$con.Image[Frame]>','NA',<ServiceLevel>,50,<$str.<NewDateTime>.SharedDateQuoted>)~;
			
			if ( !db( Cmd,~<Cmd>~ ) )
			{
				db( GetErrorDescription,theErr );
				return Warning( Translate(~Failed to add the image to the IF36Pix table. <theErr>~) );
			}
			
			ImageCorrections( UpdateExternalGSFlag,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~,1 );
		}
			
		++count;
	}
	
	return TRUE;	
}


NUMERIC GS36CancelSendForCutting()
{
	ReturnOnFailure( ImagesThumbNailWindow( GetActiveViewOfWindow,theImagesView ) );
	
	ReturnOnFailure( theImagesView(GetSelected,SelectedImages) );
	
	Qty = SelectedImages( ChildCount );
	
	if ( <Qty> == 0 )
	{
		return Warning( ~You must select one or more images first~ );
	}
	
	if ( !ADO( db,Connect ) )
	{
		db( GetErrorDescription,theErr );
		return Warning( Translate(~Failed to connect to the shared database. <theErr>~) );
	}
	
	FailedToCancel = 0;
	
	while ( SelectedImages( GetNext,Image ) )
	{
		Key = ~OrderID='<$con.Image[OrderID]>' AND Roll='<$con.Image[Roll]>' AND Frame='<$con.Image[Frame]>' AND JobID='NA' AND (Status = 0 OR Status = 1)~;

		Cmd = ~Delete From IF36Pix Where <Key>~;

		if ( !db( Cmd,~<Cmd>~ ) )
		{
			db( GetErrorDescription,theErr );
			return Warning( Translate(~Update failed.  <cmd>  <theErr>~) );
		}
		
		if ( db( RecordsAffected ) < 1 )
		{
			++FailedToCancel;
			continue;
		}
		
		Log( Session,~Successfully cancelled 36PIX cutting for OrderID='<$con.Image[OrderID]>' AND Roll='<$con.Image[Roll]>' AND Frame='<$con.Image[Frame]>'~ );
		
		ImageCorrections( UpdateExternalGSFlag,~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~,0 );
	}
	
	Warning( <FailedToCancel> ? ~<FailedToCancel> of <Qty> could not be cancelled.~ : ~<Qty> were cancelled.~ );	
	
	return TRUE;
}


NUMERIC GS36OpenIFWindow()
{
	Actions = ACTION Doc ( IF36Pix Open "<$App.HTMLPages>\IF36Pix\IF36Pix.kpl" "InitTheWindow();" );
	return PerformActions( Actions );
}

NUMERIC GS36OpenHistory()
{
	OrderIDS = ~~;
	
	More = ImagesThumbNailWindow( GetFirst,View );

	while ( $More )
	{
		View( Get,Text,OrderID );
		
		OrderIDS = (~<OrderIDS>~ == ~~) ?  ~'<OrderID>'~ : ~<OrderIDS>,'<OrderID>'~;
		
		More = ImagesThumbNailWindow( GetNext,View );
	}
	
	if ( IsNull(~<OrderIDS>~) )
	{
		return Warning( ~There are no orders ~ );
	}
	
	Query = ~Select * From IF36Pix where OrderID In (<OrderIDS>) Order By JobID,OrderID,Roll,Frame~;
	
	Actions = ACTION Doc ( IF36PixDoc Open "<$App.HTMLPages>\IF36Pix\IF36PixDoc.txt" "Init(~<OrderIDS>~,~<Query>~);" );
	return PerformActions( Actions );
}


NUMERIC CloseWindowForDataType(Which)
{
	Count = Index = 0;

	//app( ThisApp,MessagePump,3 );

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( Window( GETNEXT,aView ) )
		{
			aView( GET,ViewDataType,ViewDataType );

			if ( ~<ViewDataType>~ == ~<Which>~ )
			{
				aView( GetDocumentPath,DocumentPath );
				Window( CloseWindow );
				++Count;
			}
		}
	}

	return TRUE;
}


NUMERIC RetouchAnImage()
{
}





NUMERIC SendToKarsBatch()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( MessageBox( ~<Count> Images will be added to the Kodak Auto Retouch Batch Queue.\n\nAre you sure you want to update the <count> selected images? ~,YESNO ) == NO )
		{ return TRUE; }

	WaitCursor( Begin );

	if ( !AddSelectedToKars(~BatchSetupNeeded~) )
	{
		WaitCursor( End );
		return Warning( Translate( ~Images could not be added to the RetouchImages table.~ ) );
	}

	WaitCursor( End );

	return TRUE;
}


NUMERIC SendToKarsReview()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( MessageBox( ~<Count> Images will be added to the Kodak Auto Retouch Review Queue.\n\nAre you sure you want to update the <count> selected images? ~,YESNO ) == NO )
		{ return TRUE; }

	WaitCursor( Begin );

	if ( !AddSelectedToKars(~QueuedForReview~) )
	{
		WaitCursor( End );
		return Warning( Translate( ~Images could not be added to the RetouchImages table.~ ) );
	}

	WaitCursor( End );

	return TRUE;
}


NUMERIC SendToKarsInteractive()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> > 1 )
		{ return Warning( ~Please select only one image at a time for Interactive Kodak Auto-Retouch~ ); }

	WaitCursor( Begin );

	if ( !AddSelectedToKars(~QueuedForInteractive~) )
	{
		return Warning( Translate( ~Images could not be added to the RetouchImages table.~ ) );
	}

	while ( SelectedImages( GetNext,Image ) )
	{
		Path = ~<$con.Image[Path]>~;

		if ( IsNULL(~<Path>~) || !Files( FileExists,~<Path>~) )
		{
			WaitCursor( End );
			return Warning( Translate( ~The image file (<Path>) is does not exist.~ ) );
		}

		BroadcastMessageToAllViews( ReleaseImageChain,~<Path>~ );
		CloseWindowByPath( ~<Path>~ );

		if ( !MakeImageWritable( ~<$con.Image[Path]>~ ) )
		{
			WaitCursor( End );
			return FALSE;
		}

//		ShowRetouchInstructions();
		StatusBarText( ~Sending image to Kodak Auto-Retouching application~ );

		Actions = ACTION DOC ( RetouchInteractiveDoc OpenOnce RetouchInteractiveDoc "Init(~<$con.Image[OrderID]>~,~<$con.Image[Roll]>~,~<$con.Image[Frame]>~);" );
		PerformActions( Actions );
	}

	WaitCursor( End );

	return TRUE;
}


NUMERIC AddSelectedToKars( BeginState )
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}


	Fields = ~OverwriteOriginal,OriginalPrefix,OriginalSuffix,OriginalPath,IntermediateDataPath,JPEGQuality,FileResolution,BatchCompleteProcessing,SubmittedAt,AutoBatch,SingleFace~;
	Values = ~<KparsOverWrite>,'<KparsPrefix>','<KparsSuffix>','<KparsImgPath>','<KparsDataPath>',100,250,'<KparsBatchComplete>','<$Date.SortableDateTime>',<KparsAutoBatch>,<KparsSingleFace>~;
	
	UsingBatchSetupDlg = FALSE;

	while ( SelectedImages( GetNext,Image ) )
	{
		State = ~<BeginState>~;
		Path = ~<$con.Image[Path]>~;

		if ( !IsNull(~<Path>~) )
		{
			Order = ~<$con.Image[OrderID]>~;

			if ( ~<Order>~ == ~~ )
				{ return Warning( Translate(~There is no OrderID~) ) };

			Roll = ~<$con.Image[Roll]>~;
			Frame = ~<$con.Image[Frame]>~;

			batchSetup = ~~;
			priority = 0;
			GetRetouchBatchSetup(dBase,~<Order>~,~<Roll>~,~<Frame>~,batchSetup,priority);
			if ( ~<State>~ == ~BatchSetupNeeded~ && ~<batchSetup>~ == ~~ )
			{
				UsingBatchSetupDlg = TRUE;
				Actions = ACTION Doc ( RetouchBatchConfigDlg OpenOnce RetouchBatchConfigDlg "Init( ~<Order>~ ,~<Roll>~,~<Frame>~ );" );
				PerformActions( Actions );
				WaitCursor( Begin );
				UsingBatchSetupDlg = TRUE;
			}
			else
			{
//				State = ~QueuedForBatch~;
				Query = ~Select count(*) From RetouchImages Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

				retouchState = ~~;
				Exists = dBase( RecordCountFor,~<Query>~ );

				if ( !<Exists> )
				{
					Fields2 = ~OrderID,Roll,Frame,BatchSetup,Priority,RetouchState,<Fields>~;
					Values2 = ~'<Order>','<Roll>','<Frame>','<batchSetup>',<priority>,'<State>',<Values>~;

					Cmd = ~Insert Into RetouchImages(<Fields2>) Values(<Values2>)~;

					if ( !dbase( CMD,~<Cmd>~ ) )
					{
						dbase( GetErrorDescription,theErr );
						return Warning( Translate( ~Database update failed. <theErr>~ ) );
					}
					UpdateImages(Retouch,1,TRUE);
				}
				else
				{
					Query = ~Select RetouchState From RetouchImages Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
					dBase( GetValuesFor,~<Query>~,retouchState );

					if ( ~<retouchState>~ != ~InBatch~ && ~<retouchState>~ != ~InReview~ && ~<retouchState>~ != ~InMerge~ && ~<retouchState>~ != ~InInteractive~ )
					{
						Cmd = ~Update RetouchImages Set RetouchState = '<State>',BatchSetup='<batchSetup>' WHERE OrderID = '<Order>' And Roll = '<Roll>' And Frame = '<Frame>'~;

						if ( !dbase( CMD,~<Cmd>~ ) )
						{
							dbase( GetErrorDescription,theErr );
							Warning( Translate( ~Database update failed. <theErr>~ ) );
						}
					}
					else
					{
						Warning( Translate( ~The image for Order <Order>, <Roll>, <Frame> is currently being retouched.~ ) );
					}
				}
			}
		}
	}

	if ( <UsingBatchSetupDlg> )
	{
		Actions = ACTION Doc ( RetouchBatchConfigDlg OpenOnce RetouchBatchConfigDlg "OnAddImagesComplete();" );
		PerformActions( Actions );
	}


	return TRUE;
}


NUMERIC RemoveSelectedFromKars()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	Count = SelectedImages( ChildCount );

	if ( <Count> == 0 )
		{ return Warning( ~There are no images selected~ ); }

	if ( MessageBox( ~<Count> Images will be removed from the Kodak Auto Retouch Table.\n\nAre you sure you want to update the <count> selected images? ~,YESNO ) == NO )
		{ return TRUE; }

	WaitCursor( Begin );
	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(~Could not connect to the database. <theErr>~) );
	}

	while ( SelectedImages( GetNext,Image ) )
	{
		if ( !IsNull(~<Path>~) )
		{
			Order = ~<$con.Image[OrderID]>~;
			Roll = ~<$con.Image[Roll]>~;
			Frame = ~<$con.Image[Frame]>~;

			Key = ~OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;
			RetouchState = ~~;
			Query = ~Select count(*) from RetouchImages WHERE <Key>~;

			Exists = dBase( RecordCountFor,~<Query>~ );

			if ( <Exists> )
			{
				Query = ~Select RetouchState from RetouchImages WHERE <Key>~;
				if ( !dBase( GetValuesFor,~<Query>~,RetouchState ) )
				{
					Warning( Translate( ~There is no entry for <Order>,<Roll>,<Frame>~ ) );
				}

				if ( ~<retouchState>~ != ~InBatch~ && ~<retouchState>~ != ~InReview~ && ~<retouchState>~ != ~InMerge~ && ~<retouchState>~ != ~InInteractive~ )
				{
					Cmd = ~Delete from RetouchImages Where <Key>~;

					if ( !dbase( CMD,~<Cmd>~ ) )
					{
						dbase( GetErrorDescription,theErr );
						Warning( Translate( ~Delete RetouchImages record failed. <theErr>~ ) );
					}

					Cmd = ~Delete from KparsData Where <Key>~;

					if ( !dbase( CMD,~<Cmd>~ ) )
					{
						dbase( GetErrorDescription,theErr );
						Log( Session,Translate( ~Delete from KparsData record failed: <Cmd>. <theErr>~ ) );
					}
				}
				else
				{
					Msg = ~The image for Order <Order>, Roll <Roll>, Frame <Frame> is in the <RetouchState> state and cannot be removed from the RetouchImages table~;
					Warning( Translate( ~<Msg>~ ) );
				}
			}
		}
	}

	WaitCursor( End );

	return TRUE;
}

VOID HelpRoutine()
{

	Obj.HelpRoutine();
}

VOID SetKarsReviewWorkstation()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	WaitCursor( Begin );

	GenCon( ThisWindow,GetActiveWindow );

	ThisWindow( GetWindowPosition,left,top,right,bottom );

	X = <left> + ( <right> - <left> ) / 3;
	Y = <top> + ( <bottom> - <top> ) / 2;

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( Translate( ~You must select an image to copy the balance information from.~ ) ); }

	count = SelectedImages( ChildCount );
	OrderID = ~~;

	if ( <count> == 0 )
	{
		View( GetName,OrderID );
	}
	else
	{
		moreImages = SelectedImages( GetNext, Image );
		OrderID = ~<$con.Image[OrderID]>~;
	}
	

	ForgetGlobal( Obj);

	KparsWSDlg( New,Obj );
	Global( Obj );
	Obj.Set( fOrderID, ~<OrderID>~ );

	Obj.CreateModalDialog( ~/KPARS/KparsWorkstation.kpl~ );
	WaitCursor( End );
}

NUMERIC OpenContainingFolder()
{
	if ( !( GenCon(View,GETACTIVEVIEW ) && GenCon(Window,GETACTIVEWINDOW) ) )
		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedItems ) )		
		{ return Warning( Translate(~Select one and try again~) ); }

	if ( SelectedItems( GetFirst,Item ) )
	{
		return OpenContainingFolderAndSelect( ~<$con.Item[Path]>~ ); 
	}

	return Warning( Translate( ~Select one and try again~ ) );
}


NUMERIC OpenAnImageExternal()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetViewOfWindow,ImagesDataView,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }

	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	WaitCursor( Begin );

	while ( SelectedImages( GetNext,Image ) )
	{
		Path = ~<$con.Image[Path]>~;

		if ( !IsNull(~<Path>~) )
		{
			BroadcastMessageToAllViews( ReleaseImageChain,~<Path>~ );
			CloseWindowByPath( ~<Path>~ );

			if ( !MakeImageWritable( ~<$con.Image[Path]>~ ) )
			{
				WaitCursor( End );
				return FALSE;
			}

			if ( !FindExecutable( ~<$con.Image[Path]>~,Program ) )
			{
				GetLastError( ErrorString,theErr );
				WaitCursor( End );
				return Warning( ~You must go to View/Options/FileTypes of the Windows Explorer to define the program that can open\n\n  <Path>.\n\n<theErr>~ );
			}

			StatusBarText( ~Opening <$con.Image[Path]> with <Program>~ );

			if ( !ShellExecute( Open,~<$con.Image[Path]>~ ) )
			{
				GetLastError( ErrorString,theErr );
				Log( Session,~Could not open <$con.Image[Path]>. <theErr>~ );
			}
		}
	}

	WaitCursor( End );

	return TRUE;
}


NUMERIC CloseWindowByPath(Path)
{
	Count = Index = 0;

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( Window( GETNEXT,aView ) )
		{
			aView( GetDocumentPath,DocumentPath );

			if ( SimilarStr( ~<DocumentPath>~,~<Path>~ ) )
			{
				return Window( CloseWindow );
			}
		}
	}

	return FALSE;
}


NUMERIC PostKeystroke( key )
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
		View( PostViewMessage,0x0100,<key>,0 );
		return View( PostViewMessage,0x0101,<key>,0 );
	}

	return FALSE;
}


NUMERIC ThumbnailKeydownHook(&Key,&KeyString,&View)	{ return FALSE; }	// Override. return TRUE if the key was handled FALSE if it was not.


NUMERIC OnKeyDown()
{
	if ( <ViewIsImages> )
	{
		ImagesThumbNailWindow( GetActiveViewOfWindow,View );
	}
	else
	{
		ImagesDataWindow( GetActiveViewOfWindow,View );
	}

	if ( !Defined( View ) )
		{ return FALSE; }
		
	key = View( GetLastKeyStateless,KeyString );
	KeyString = Upper( ~<KeyString>~ );

	if ( View( IsThumbNailView ) )
	{
		if ( ThumbnailKeydownHook(key,KeyString,View) )				{ return TRUE; }
		
		if ( <key> > 32 && <key> <= 40 )			// Arrow keys,Home,End,PageUp&Dn
			{ return LeftClickInImageView();  }		//ViewSubjectInfoData(TRUE,TRUE);

		if ( ~<KeyString>~ == ~N~ )	
			{ return PostKeystroke(0x27); }

		if ( ~<KeyString>~ == ~P~ )	
			{ return PostKeystroke(0x25); }

		if ( <key> == 0x74 )	// F5
			{ return RefreshThumbNailView(TRUE); }

		if ( <key> == 0x76 )	// F7
			{ return ToggleChromaKeyMaskState(); }

		if ( <key> == 0x2E )	// Delete
			{ return RemoveSelectedImages(TRUE); }

		if ( SimilarStr(~<KeyString>~,~0~,~1~,~2~,~3~,~4~,~5~,~6~,~7~,~8~,~9~) )	
			{ return ChooseProduct(~<KeyString>~); }

		if ( ~<KeyString>~ == ~I~ )	
			{ return SetSubjectIDDialog(); }

		if ( ~<KeyString>~ == ~O~ )	
			{ return OpenSelectedImages(FALSE,FALSE); }

		if ( ~<KeyString>~ == ~R~ )	
			{ return RemoveSelectedImages(FALSE); }

		if ( ~<KeyString>~ == ~T~ )	
			{ return OpenAnImageExternal(); }

		if ( ~<KeyString>~ == ~H~ )	
			{ return AddThumbNailToSelectedImages(); }

		if ( ~<KeyString>~ == ~K~ )	
			{ return RemakeAffectedOrderItems(); }

		if ( ~<KeyString>~ == ~L~ )	
			{ return CloseSelectedImages(); }

		if ( ~<KeyString>~ == ~C~ )	
			{ return SetCrop(); }

		if ( ~<KeyString>~ == ~U~ )	
			{ return DisplayStatusChoices(); }

		if ( ~<KeyString>~ == ~E~ )	
			{ return FindEyes(); }

		if ( ~<KeyString>~ == ~A~ )	
			{ return UpdateImages(Inspect,1,~~,~Indicate the image needs adjusting.~); }

		if ( ~<KeyString>~ == ~G~ )	
			{ return NavigateOrder(); }

		if ( ~<KeyString>~ == ~Y~ )	
			{ return OnOrderSummary(); }

		if ( ~<KeyString>~ == ~V~ )	
			{ return OpenOrderItemsForImages(); }
			
		if ( ~<KeyString>~ == ~X~ )	
			{ return UpdateImages(Rejected,KeyState( SHIFT ) ? 0 : 1,TRUE ); }

		if ( ~<KeyString>~ == ~M~ )	
		{
			isCropMode = View(IsCropMode);
			if (GetUserPermissions( ImageEditing ))
			{
				if ( View( SetAllowCropping,!View(IsCropMode) ) )
				{
					return TRUE;
				}
			}
			else
			{
				if (!<isCropMode>)
				{
					Warning( Translate( ~You don't have permission to crop/align images.  See your administrator.~ ) );
					return FALSE;
				}
			}
		}

		if ( ~<KeyString>~ == ~Z~ )	
		{
			View(GetShowHeadAlignment,currentHeadAlignment);
			if (<currentHeadAlignment> == 0)
			{
				View(SetShowHeadAlignment,1);
			}
			else if (<currentHeadAlignment> == 1)
			{
				View(SetShowHeadAlignment,2);
			}
			else if (<currentHeadAlignment> == 2)
			{
				View(SetShowHeadAlignment,3);
			}
			else if (<currentHeadAlignment> == 3)
			{
				View(SetShowHeadAlignment,0);
			}

			return TRUE;
		}

		UpdateImageViewMenu(View);

		if ( KeyState( CONTROL ) )
		{
			if (  View( PerformMenuAction,ImagesViewMenu,~<KeyString>~ ) )
			{
				return TRUE;
			}
		}
	}
	else
	{
		if (  View( PerformMenuAction,ImagesListViewMenu,~<KeyString>~ ) )
		{
			return TRUE;
		}
	}

	return View( DisplayMenu,View( IsThumbNailView ) ? ImagesViewMenu : ImagesListViewMenu,2,2 );
}


if ( !GenCon( ImagesTableDefinition,GetFrom,Images,~[DATABASE TableDefinitions]~ ) )
	{ Error( Translate( ~The Images Table is not properly defined~ ) ); }
	
VOID	CustomImagesListViewMenuOptions()	{ }	// OVERRIDE

VOID	CustomImagesViewMenuOptions()		{ }	// OVERRIDE


VOID DefineMenus()
{
	if ( !Defined( ImagesListViewMenu ) )
	{

	Define:	ImagesListViewMenu Using DDMenuDef	// Created once
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			CustomImagesListViewMenuOptions();	// Override for customer to add his own options
			
			Define:	OpenSelectedImages	using	DDMenuItemDef
				Fields:	Text		Translate( ~&Open~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( OpenSelectedImages(TRUE,FALSE); );

			Define:	OpenContainingFolder	using	DDMenuItemDef
				Fields:	Text		Translate( ~Open Containing Folder~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( OpenContainingFolder(); )

			Define:	CloseOpenImages	using	DDMenuItemDef
				Fields:	Text		~Close~
						IDText		~ID~
						ActionsText  ACTION Exec ( CloseSelectedImages() )

			Define:	AddRecord	using	DDMenuItemDef
				Fields:	Text		Translate( ~&New Image~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( AddRecord(); )

			Define:	NULL1 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	SaveAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( ~&Save Changes~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( SaveAllChanges() )

			Define:	ForgetAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( ~&Cancel Changes~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( RollBackAllChanges() )

			Define:	RemoveRecord	using	DDMenuItemDef
				Fields:	Text		Translate( ~Remove~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteRecord(FALSE); )

			Define:	DeleteRecord	using	DDMenuItemDef
				Fields:	Text		Translate( ~&Delete~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteRecord(TRUE); )

			Define:	Refresh	using	DDMenuItemDef
				Fields:	Text		Translate( ~Refresh (F5)~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( RefreshListView(TRUE); )

			Define:	AddThumbNail	using	DDMenuItemDef
				Fields:	Text		Translate( ~Add T&humbnail~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( AddThumbNailToSelectedImages() )

			Define:	AddThumbNailClearRotation	using	DDMenuItemDef
				Fields:	Text		~Add Thumbnail and Reset Rotation~
						IDText		~ID~
						ActionsText  ACTION Exec ( AddThumbNailClearRotation() )

			Define:	UpdateStatus using DDMenuItemDef	
				Fields:	Text		~&Update~
						IDText		~ID~
						ActionsText	ACTION EXEC ( DisplayStatusChoices() )


			Define:	RemakeStatus using DDMenuItemDef	
				Fields:	Text		~Rema&ke~
						IDText		~ID~
						ActionsText	ACTION EXEC ( RemakeAffectedOrderItems() )

			Define:	Navigate using DDMenuItemDef	
				Fields:	Text		~Navi&gate Order~
						IDText		~ID~
						ActionsText	ACTION EXEC ( NavigateOrder() )
			
			Define:	NULL3 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			if ( <EnableKpars> )
			{
			Define:	KarsReview using DDMenuItemDef	
				Fields:	Text		~KodakAutoRetouch Interactive~
						IDText		~ID~
						ActionsText	ACTION EXEC ( SendToKarsInteractive() )

			Define:	KarsBatch using DDMenuItemDef	
				Fields:	Text		~KodakAutoRetouch Batch~
						IDText		~ID~
						ActionsText	ACTION EXEC ( SendToKarsBatch() )
			}

			Define:	RetouchImage using DDMenuItemDef	
				Fields:	Text		~Retouch~
						IDText		~ID~
						ActionsText	ACTION EXEC ( OpenAnImageExternal() )

			Define:	NULL4 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	ViewSubjectData using	DDMenuItemDef
				Fields:	Text		~Subject Info~
						IDText		ID
						ActionsText  ACTION Exec ( ViewSubjectInfoForOrder() )

			Define:	ViewSBAData using	DDMenuItemDef
				Fields:	Text		~View SBA Data~
						IDText		ID
						ActionsText  ACTION Exec ( ViewSBAInfoForOrder( ~~ ) )

			Define:	ViewDSBAData using	DDMenuItemDef
				Fields:	Text		~View Auto Balance Data~
						IDText		ID
						ActionsText  ACTION Exec ( ViewDSBAInfoForOrder( ~~ ) )

			Define:	ViewKarsData using	DDMenuItemDef
				Fields:	Text		~View Auto Retouch Data~
						IDText		ID
						ActionsText  ACTION Exec ( ViewKarsInfoForOrder( ~~ ) )

//
			Define:	NULL5 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	ChangeColValue	using	DDMenuItemDef
				Fields:	Text		Translate( ~Change Field~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( ChangeSelectedColumn() )

			Define:	NULL6 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~
//

			Define:	Export	using	DDMenuItemDef
				Fields:	Text		Translate( ~&Export~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( ExportSelectedToFile(ImagesDataView,Images) )
		}

	Global( ImagesListViewMenu );


	Define:	ImagesViewMenu Using DDMenuDef
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			CustomImagesViewMenuOptions();
			
			Define:	OpenSelectedImages	using	DDMenuItemDef
				Fields:	Text		~&Open~
						IDText		~ID~
						ActionsText  ACTION Exec ( OpenSelectedImages(TRUE,FALSE) )

			Define:	OpenContainingFolder	using	DDMenuItemDef
				Fields:	Text		~Open Containing Folder~
						IDText		~ID~
						ActionsText  ACTION Exec ( OpenContainingFolder() )

			Define:	CloseOpenImages	using	DDMenuItemDef
				Fields:	Text		~C&lose~
						IDText		~ID~
						ActionsText  ACTION Exec ( CloseSelectedImages() )

			Define:	RemoveSelectedImages	using	DDMenuItemDef
				Fields:	Text		~Remove ~
						IDText		~ID~
						ActionsText  ACTION Exec ( RemoveSelectedImages(FALSE) )

			Define:	DeleteSelectedImages	using	DDMenuItemDef
				Fields:	Text		~&Delete~
						IDText		~ID~
						ActionsText  ACTION Exec ( RemoveSelectedImages(TRUE) )
						
			Define:	DuplicateImages	using	DDMenuItemDef
				Fields:	Text		~Duplicate~
						IDText		~ID~
						ActionsText  ACTION Exec ( DuplicateSelectedImages() )

			Define:	ViewGridData using	DDMenuItemDef
				Fields:	Text		~&Edit~
						IDText		ID
						ActionsText  ACTION Exec ( ViewImageData( TRUE ) )

			Define:	Refresh	using	DDMenuItemDef
				Fields:	Text		~Refresh  (F5)~
						IDText		~ID~
						ActionsText  ACTION Exec ( RefreshThumbNailView(TRUE) )

			Define:	CropNullStart using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	RejectImage using DDMenuItemDef
				Fields:	Text		~Reject (X or Shift-X)~
						IDText		~ID~
						ActionsText  ACTION Exec ( UpdateImages(Rejected,KeyState( SHIFT ) ? 0 : 1,TRUE ) )


			Define:	SelectSubMenu using DDMenuItemDef	
				Fields:	Text		~Select~
						IDText		~ID~
				Contains: INLISTORDER
				{
					Define:	SelectRejected using	DDMenuItemDef
						Fields:	Text		~Select Rejected~
								IDText		ID
								ActionsText  ACTION Exec ( SelectRejected() )	

					Define:	SelectAccepted using	DDMenuItemDef
						Fields:	Text		~Select Accepted~
								IDText		ID
								ActionsText  ACTION Exec ( SelectAccepted() )	
				}

			Define:	ViewData using	DDMenuItemDef
				Fields:	Text		~View Data~
						IDText		ID					
					Contains: INLISTORDER
					{
						Define:	ViewOrderSummary using	DDMenuItemDef
							Fields:	Text		~View Order Summar&y~
									IDText		ID
									ActionsText  ACTION Exec ( OnOrderSummary() )

						Define:	ViewSBAData using	DDMenuItemDef
							Fields:	Text		~View SBA Data~
									IDText		ID
									ActionsText  ACTION Exec ( ViewSBAData( TRUE ) )


						Define:	ViewDSBAData using	DDMenuItemDef
							Fields:	Text		~View Auto Balance Data~
									IDText		ID
									ActionsText  ACTION Exec ( ViewAutoBalanceData( TRUE ) )

						Define:	ViewOrderInfo using	DDMenuItemDef
							Fields:	Text		~View Order~
									IDText		ID
									ActionsText  ACTION Exec ( ViewOrderInfo() )

						Define:	ViewOrderItemsAsImages using	DDMenuItemDef
							Fields:	Text		~View Order Items~
									IDText		ID
									ActionsText  ACTION Exec ( OpenOrderItemsAsImages() )

						Define:	ViewRemakeOrderItems using	DDMenuItemDef
							Fields:	Text		~View Remake Order Items~
									IDText		ID
									ActionsText  ACTION Exec ( OpenRemakeOrderItemsAsImages() )

						Define:	ViewOrderItemsForImages using	DDMenuItemDef
							Fields:	Text		~&View OrderItems for Images~
									IDText		ID
									ActionsText  ACTION Exec ( OpenOrderItemsForImages() )

						Define:	ViewRolls using	DDMenuItemDef
							Fields:	Text		~View Rolls~
									IDText		ID
									ActionsText  ACTION Exec ( ViewRollInfo() )

						Define:	ViewRawImagesData using	DDMenuItemDef
							Fields:	Text		~View Raw Images Data~
									IDText		ID
									ActionsText  ACTION Exec ( ViewRawImagesData() )

						Define:	ViewKarsData using	DDMenuItemDef
							Fields:	Text		~View Auto Retouch Data~
									IDText		ID
									ActionsText  ACTION Exec ( ViewKarsData( TRUE ) )

						Define:	ViewServicesData using	DDMenuItemDef
							Fields:	Text		~View Image Services~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImageServices() )

					}

			Define:	ViewSort using	DDMenuItemDef
				Fields:	Text		~View Sort~
						IDText		ID					
					Contains: INLISTORDER
					{
						Define:	ViewOrderBySubjectID using	DDMenuItemDef
							Fields:	Text		~View Images By SubjectID~
									IDText		ID
									ActionsText  ACTION Exec ( ViewOrderBySubjectID() )	

						Define:	ViewOrderByFrame using	DDMenuItemDef
							Fields:	Text		~View Images By Roll,Frame~
									IDText		ID
									ActionsText  ACTION Exec ( ViewOrderByRollFrame() )	
					}

			Define:	ViewFilters using	DDMenuItemDef
				Fields:	Text		~View Filters~
						IDText		ID					
					Contains: INLISTORDER
					{
						Define:	ViewAll using	DDMenuItemDef
							Fields:	Text		~View All Images~
									IDText		ID
									ActionsText  ACTION Exec ( ViewAllImages() )	

						Define:	ViewDigitalFilesOnly using	DDMenuItemDef
							Fields:	Text		~View Kodak Raw Camera Images Only~
									IDText		ID
									ActionsText  ACTION Exec ( ViewDigitalFilesOnly() )	

						Define:	ViewERIOnly using	DDMenuItemDef
							Fields:	Text		~View ERI JPEG Images Only~
									IDText		ID
									ActionsText  ACTION Exec ( ViewERIFilesOnly() )	

						Define:	ViewNonDigitalOnly using	DDMenuItemDef
							Fields:	Text		~View HR500 Images Only~
									IDText		ID
									ActionsText  ACTION Exec ( ViewHR500FilesOnly() )

						Define:	ViewImagesUsedInOrder using	DDMenuItemDef
							Fields:	Text		~View Images Used In Order Items~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImagesUsedInOrder() )
									
						Define:	ViewImagesNotUsedInOrder using	DDMenuItemDef
							Fields:	Text		~View Images Not Used In Order Items~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImagesUsedInOrder(NOT) )

						Define:	ViewImagesTooSmall using	DDMenuItemDef
							Fields:	Text		~View Images too small for OrderItems~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImagesTooSmall() )
									

						Define:	ViewImagesUsedInPDFs using	DDMenuItemDef
							Fields:	Text		~View Images Used In PDF Files~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImagesUsedInPDFs() )


						Define:	FilterNullA using DDMenuItemDef
							Fields:	Text		~~
									IDText		~NULL~

						Define:	ViewNeedsScan using	DDMenuItemDef
							Fields:	Text		~View Images needing scan~
									IDText		ID
									ActionsText  ACTION Exec ( ViewNeeding(Scan,Translate(~Images that need Scanned~)) )	
			
						Define:	ViewNeedsReprocess using	DDMenuItemDef
							Fields:	Text		~View Images needing reprocessing~
									IDText		ID
									ActionsText  ACTION Exec ( ViewNeeding(Reprocess,Translate(~Images that need Reprocessed~)) )	

						Define:	ViewNeedsAutoBal using	DDMenuItemDef
							Fields:	Text		~View Images needing auto balancing~
									IDText		ID
									ActionsText  ACTION Exec ( ViewNeeding(AutoBalance,Translate(~Images that need Auto Balancing~)) )	

						Define:	ViewNeedsAdjusting using	DDMenuItemDef
							Fields:	Text		~View Images needing adjustment~
									IDText		ID
									ActionsText  ACTION Exec ( ViewNeeding(Inspect,Translate(~Images that need Adjustment~)) )	

						Define:	ViewNeedsRetouched using	DDMenuItemDef
							Fields:	Text		~View Images needing retouch~
									IDText		ID
									ActionsText  ACTION Exec ( ViewNeeding(Retouch,Translate(~Images that need Retouching~)) )	

						Define:	ViewNeedsKars using	DDMenuItemDef
							Fields:	Text		~View Images needing auto retouch~
									IDText		ID
									ActionsText  ACTION Exec ( ViewNeedingKars(Translate(~Images that need Kodak Professional Auto Retouching~)) )	

						Define:	ViewNeedsCropCheck using DDMenuItemDef
							Fields:	Text		~View Images needing crop checked~
									IDText		ID
									ActionsText  ACTION Exec ( ViewNeedingCropChecked(Translate(~Images that need Crop Checked~)) )	

						Define:	ViewImagesWithProfiles using DDMenuItemDef
							Fields:	Text		~View images having embedded profiles~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImagesWithProfiles(1) )	
						Define:	ViewImagesWithoutProfiles using DDMenuItemDef
							Fields:	Text		~View images not having embedded profiles~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImagesWithProfiles(0) )
										
						Define:	ViewImagesHaveManuallyFindEyes using DDMenuItemDef
							Fields:	Text		~View images that eyes were found manually~
									IDText		ID
									ActionsText  ACTION Exec ( ViewImagesHaveManuallyFindEyes(Translate(~Images that Eyes were Found Manually~)) )	
					}


			Define:	AutoBalNullBegin using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~;

			Define:	AutoBalanceItem	using	DDMenuItemDef
				Fields:	Text		~Balance~
						IDText		~ID~
					Contains: INLISTORDER
					{
						Define:	AutoDRGBItem	using	DDMenuItemDef
							Fields:	Text		~Auto Balance DRGB~
									IDText		~ID~
									ActionsText  ACTION Exec ( SelectAutoBalSetup(0) )

						Define:	AutoDenItem	using	DDMenuItemDef
							Fields:	Text		~Auto Balance Density~
									IDText		~ID~
									ActionsText  ACTION Exec ( SelectAutoBalSetup(16) )

						Define:	AutoRGBItem	using	DDMenuItemDef
							Fields:	Text		~Auto Balance RGB~
									IDText		~ID~
									ActionsText  ACTION Exec ( SelectAutoBalSetup(1))
									
					   Define:	CopyBalanceSeparator using DDMenuItemDef
							Fields:	Text		~~
									IDText		~NULL~;

						Define:	CopyBalanceItem	using	DDMenuItemDef
							Fields:	Text		~Copy Balance~
									IDText		~ID~
									ActionsText  ACTION Exec ( CopyBalance() )

						Define:	PasteBalanceItem	using	DDMenuItemDef
							Fields:	Text		~Paste Balance~
									IDText		~ID~
									ActionsText  ACTION Exec ( PasteBalance() )
									
						 Define:	AnalyzeSeparator using DDMenuItemDef
							Fields:	Text		~~
									IDText		~NULL~;
									
						Define:	EditSelectedImages	using	DDMenuItemDef
							Fields:	Text		~Ad&just~
									IDText		~ID~
									ActionsText  ACTION DOC ( EditImagesDoc3 OpenOnce EditImagesDoc3 )

						Define:	Analyzer using	DDMenuItemDef
							Fields:	Text		Translate( ~Analyze~ )
									IDText		ID
									ActionsText  ACTION EXEC ( ActivateAnalyzer() )
									
						Define:	LabReferenceImage using DDMenuItemDef	
							Fields:	Text		~Reference Image~
									IDText		~ID~
									ACTIONSTEXT	ACTION DOC ( LabReferenceImage Open LabReferenceImage  )
									//ActionsText	ACTION RUNKPL ( LabReferenceImage )
					}

			Define:	CropNullBegin using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~;

			Define:	Cropping using	DDMenuItemDef
				Fields:	Text		~Cropping and Head Alignment~
						IDText		ID					
					Contains: INLISTORDER
					{
						Define:	ShowCropItem	using	DDMenuItemDef
							Fields:	Text		~Show Crop~
									IDText		~ID~
									ActionsText  ACTION Exec ( ShowCrop() )

						Define:	CopyCropItem	using	DDMenuItemDef
							Fields:	Text		~Copy Crop~
									IDText		~ID~
									ActionsText  ACTION Exec ( CopyCrop() )

						Define:	PasteCropItem	using	DDMenuItemDef
							Fields:	Text		~Paste Crop~
									IDText		~ID~
									ActionsText  ACTION Exec ( PasteCrop() )
									
						Define:	ClearCropItem	using	DDMenuItemDef
							Fields:	Text		~Clear Crop~
									IDText		~ID~
									ActionsText  ACTION Exec ( ClearCrop() )

						Define:	SetCropItem	using	DDMenuItemDef
							Fields:	Text		~Set Crop~
									IDText		~ID~

						Define:	CropHeadAlignmentSep1 using DDMenuItemDef
							Fields:	Text		~~
									IDText		~NULL~;

						Define:	HeadAlignItem	using	DDMenuItemDef
							Fields:	Text		~Head Alignment and Group Balancing~
									IDText		~ID~
									ActionsText  ACTION Exec ( HeadAlignment() )

						Define:	SetHeadAlignmentItem using DDMenuItemDef
							Fields:	Text		~Set Head Alignment~
									IDText		~ID~

						Define:	ShowHeadAlignment using	DDMenuItemDef
							Fields:	Text		~Show Head Alignment~
									IDText		ID					
								Contains: INLISTORDER
								{
									Define:	ShowHeadAlignmentLines using DDMenuItemDef
										Fields:	Text		~Line~
												IDText		~ID~
												ActionsText  ACTION Exec ( ShowHeadAlignment(1) )

									Define:	ShowHeadAlignmentRect using DDMenuItemDef
										Fields:	Text		~Rect~
												IDText		~ID~
												ActionsText  ACTION Exec ( ShowHeadAlignment(2) )

									Define:	ShowHeadAlignmentEllipse using DDMenuItemDef
										Fields:	Text		~Ellipse~
												IDText		~ID~
												ActionsText  ACTION Exec ( ShowHeadAlignment(3) )

									Define:	ShowHeadAlignmentNone using DDMenuItemDef
										Fields:	Text		~None~
												IDText		~ID~
												ActionsText  ACTION Exec ( ShowHeadAlignment(0) )
								}

						Define:	ClearHeadCheckFlag using DDMenuItemDef
							Fields:	Text		~Clear Check Head Alignment Flag~
									IDText		~ID~
									ActionsText  ACTION Exec ( ClearHeadCheckFlag() )

						Define:	CropHeadAlignmentSep2 using DDMenuItemDef
							Fields:	Text		~~
									IDText		~NULL~;

						Define:	CropImages	using	DDMenuItemDef
							Fields:	Text		~Crop/Align Images~
									IDText		~ID~
									ActionsText  ACTION Exec ( CropImages() )

						Define:	HeadAlignmentSetup using DDMenuItemDef
							Fields:	Text		~Crop/Head Alignment Setup~
									IDText		~ID~
									ActionsText  ACTION Exec ( HeadAlignmentSetup() )

						Define:	CropHeadAlignmentSep3 using DDMenuItemDef
							Fields:	Text		~~
									IDText		~NULL~;

						Define:	FindEyesInImages using DDMenuItemDef
							Fields:	Text		~Find Eyes Manually~
									IDText		~ID~
									ActionsText  ACTION Exec ( FindEyes() )

						Define:	ResetEyesInImages using DDMenuItemDef
							Fields:	Text		~Reset Manual Eyes~
									IDText		~ID~
									ActionsText  ACTION Exec ( ResetEyes() )
					}

			Define:	ChromaKey using	DDMenuItemDef
				Fields:	Text		~Chroma Key~
						IDText		ID					
					Contains: INLISTORDER
					{
						Define:	ChromaKeyOriginalImage using DDMenuItemDef
							Fields:	Text		~Show Original Image~
									IDText		~ID~
									ActionsText  ACTION Exec ( SetChromaKeyMaskState(0) )

						Define:	ChromaKeyImageFill using DDMenuItemDef
							Fields:	Text		~Show Images With Fill Color~
									IDText		~ID~
								Contains: INLISTORDER
								{
									Define:	ChromaKeyImageFillGray using DDMenuItemDef
										Fields:	Text		~Gray~
												IDText		~ID~
												ActionsText  ACTION Exec ( SetChromaKeyFillColor(0) )

									Define:	ChromaKeyImageFillRed using DDMenuItemDef
										Fields:	Text		~Red~
												IDText		~ID~
												ActionsText  ACTION Exec ( SetChromaKeyFillColor(1) )

									Define:	ChromaKeyImageFillNull using DDMenuItemDef
										Fields:	Text		~~
												IDText		~NULL~;

									Define:	ChromaKeyImageFillChoose using DDMenuItemDef
										Fields:	Text		~Choose Color...~
												IDText		~ID~
												ActionsText  ACTION Exec ( SelectChromaKeyFillColor() )									
								}		

						Define:	ChromaKeyMaskOnly	using	DDMenuItemDef
							Fields:	Text		~Show Mask~
									IDText		~ID~
									ActionsText  ACTION Exec ( SetChromaKeyMaskState(2) )

						Define:	ChromaKeyMaskBkGrnd using DDMenuItemDef
							Fields:	Text		~Show Images With Background~
									IDText		~ID~
									
						Define:	IF36Pix using DDMenuItemDef
							Fields:	Text		~36Pix~
									IDText		~ID~
								Contains: INLISTORDER
								{	
									Define:	IF36PixRegular using DDMenuItemDef
										Fields:	Text		~Send for regular cutting~
												IDText		~ID~
												ActionsText  ACTION Exec ( GS36SendForCutting(0) )

									Define:	IF36PixPriority using DDMenuItemDef
										Fields:	Text		~Send for priority cutting~
												IDText		~ID~
												ActionsText  ACTION Exec ( GS36SendForCutting(1) )
									
									Define:	IF36PixSeparator1 using DDMenuItemDef
										Fields:	Text		~~
												IDText		~NULL~;

									Define:	IF36PixRework using DDMenuItemDef
										Fields:	Text		~Send for normal rework~
												IDText		~ID~
												ActionsText  ACTION Exec ( GS36SendForCutting(2) )

									Define:	IF36PixRushRework using DDMenuItemDef
										Fields:	Text		~Send for rush rework~
												IDText		~ID~
												ActionsText  ACTION Exec ( GS36SendForCutting(3) )
												
									Define:	IF36PixSeparator2 using DDMenuItemDef
										Fields:	Text		~~
												IDText		~NULL~;
												
									Define:	IF36CancelSendForCutting using DDMenuItemDef
										Fields:	Text		~Cancel Cutting~
												IDText		~ID~
												ActionsText  ACTION Exec ( GS36CancelSendForCutting() )
													
									Define:	IF36PixSeparator3 using DDMenuItemDef
										Fields:	Text		~~
												IDText		~NULL~;
												
									Define:	IF36PixHistory using DDMenuItemDef
											Fields:	Text		~Open 36Pix History~
													IDText		~ID~
													ActionsText  ACTION Exec ( GS36OpenHistory() )
								
									Define:	IF36PixOpenIFWindow using DDMenuItemDef
										Fields:	Text		~Open 36Pix Interface Window~
												IDText		~ID~
												ActionsText  ACTION Exec ( GS36OpenIFWindow() ) 
								}
					}
						
				Define: InteractiveChromaKey using	DDMenuItemDef
					Fields:	Text		~Manage Selected Images~
							IDText		ID	
							ActionsText  ACTION Exec ( InteractiveChromaKey() )	

				Define:	SetRenderingLUT	using	DDMenuItemDef
					Fields:	Text		~Set Rendering LUT~
							IDText		~ID~
						ActionsText  ACTION Exec ( SetRenderingLUT() )

			Define:	CropNullEnd using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~;

			Define:	ReconvertNullBegin using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~;

			Define:	ReconvertItem	using	DDMenuItemDef
				Fields:	Text		~Reconvert Raw Images~
						IDText		~ID~
						ActionsText  ACTION Exec ( ResetProcessedFlag() )
						
			Define:	ViewRawQueue	using	DDMenuItemDef
				Fields:	Text		~View Raw Image Conversion Queue~
						IDText		~ID~
						ActionsText  ACTION Exec ( OnViewRawQueueButton() )
					
			Define:	ReconvertNullEnd using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~;

			Define:	SetOrderStatus using	DDMenuItemDef
				Fields:	Text		Translate( ~Set Order Status~ )
						IDText		ID
						ActionsText  ACTION EXEC ( SetOrderStatus() )

						
			Define:	DustBust	using	DDMenuItemDef
				Fields:	Text		~Dust Bust Images~
					IDText		~ID~
					ActionsText  ACTION Exec ( DustBustImages(); )


			Define:	SetProfile using	DDMenuItemDef
				Fields:	Text		Translate( ~Set ICC Input Profile~ )
						IDText		ID
						ActionsText  ACTION EXEC ( SetInputProfileForImages() )


			if ( <EnableKpars> )
			{
			Define:	KarsReview using DDMenuItemDef	
				Fields:	Text		~KodakAutoRetouch Interactive~
						IDText		~ID~
						ActionsText	ACTION EXEC ( SendToKarsInteractive() )

			Define:	KarsBatch using DDMenuItemDef	
				Fields:	Text		~KodakAutoRetouch Batch~
						IDText		~ID~
						ActionsText	ACTION EXEC ( SendToKarsBatch() )
			}
			
			Define:	SetOrientationInImage using DDMenuItemDef	
				Fields:	Text		~Set Orientation in the Image File to~
						IDText		~ID~
				Contains: INLISTORDER
				{
					Define:	SetOrientationInImage0 using DDMenuItemDef
						Fields:	Text		~0~
								IDText		~ID~
								ActionsText  ACTION Exec ( SetOrientationInImageFile(0) )

					Define:	SetOrientationInImage90 using DDMenuItemDef
						Fields:	Text		~90~
								IDText		~ID~
								ActionsText  ACTION Exec ( SetOrientationInImageFile(90) )

					Define:	SetOrientationInImage180 using DDMenuItemDef
						Fields:	Text		~180~
								IDText		~ID~
								ActionsText  ACTION Exec ( SetOrientationInImageFile(180) )

					Define:	SetOrientationInImage270 using DDMenuItemDef
						Fields:	Text		~270~
								IDText		~ID~
								ActionsText  ACTION Exec ( SetOrientationInImageFile(270) )
				}

			Define:	RetouchImage using DDMenuItemDef	
				Fields:	Text		~Re&touch~
						IDText		~ID~
						ActionsText	ACTION EXEC ( OpenAnImageExternal() )

			Define:	ShowRetouchInstructions using DDMenuItemDef	
				Fields:	Text		~Retouch Instructions~
						IDText		~ID~
						ActionsText	ACTION EXEC ( ShowRetouchInstructions() )

			Define:	AddThumbNailTo using DDMenuItemDef	
				Fields:	Text		~Add T&humbnail~
						IDText		~ID~
						ActionsText	ACTION EXEC ( AddThumbNailToSelectedImages() )

			Define:	AddThumbNailClearRotation	using	DDMenuItemDef
				Fields:	Text		~Add Thumbnail and Reset Rotation~
						IDText		~ID~
						ActionsText  ACTION Exec ( AddThumbNailClearRotation() )

			Define:	UpdateStatus using DDMenuItemDef	
				Fields:	Text		~&Update~
						IDText		~ID~
						ActionsText	ACTION EXEC ( DisplayStatusChoices() )

			Define:	RemakeStatus using DDMenuItemDef	
				Fields:	Text		~Rema&ke~
						IDText		~ID~
						ActionsText	ACTION EXEC ( RemakeAffectedOrderItems() )

			Define:	Navigate using DDMenuItemDef	
				Fields:	Text		~Navi&gate Order~
						IDText		~ID~
						ActionsText	ACTION EXEC ( NavigateOrder() )

			Define:	AdjustNullEnd using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	ViewSubjectData using	DDMenuItemDef
				Fields:	Text		~Subject Info~
						IDText		ID
						ActionsText  ACTION Exec ( ViewSubjectInfoData(FALSE,FALSE) )

			Define:	SetSubjectIDDialog using	DDMenuItemDef
				Fields:	Text		~Set Subject &ID~
						IDText		ID
						ActionsText  ACTION Exec ( SetSubjectIDDialog() )	

			Define:	SetSubjectIDToImage using	DDMenuItemDef
				Fields:	Text		~Set SubjectID To~
						IDText		ID
						ActionsText  ACTION Exec ( SetSubjectIDTo() )	

			Define:	CreateSubjectInfoRecords using	DDMenuItemDef
				Fields:	Text		~Create SubjectInfo Records~
						IDText		ID
						ActionsText  ACTION Exec ( CreateSubjectInfoRecords() )	


			Define:	OrderNull using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			Define:	CreateProducts	using	DDMenuItemDef
				Fields:	Text		~Create Order Items (1-9)~
						IDText		~ID~
						ActionsText  ACTION Exec ( ChooseProduct() )
						
			Define:	ScanningSubMenu using DDMenuItemDef	
				Fields:	Text		~Scanning~
						IDText		~ID~
				Contains: INLISTORDER
				{

					Define:	SetScanFlag	using	DDMenuItemDef
						Fields:	Text		Translate( ~Mark Images For Rescan~ )
								IDText		~ID~
								ActionsText  ACTION Exec ( MarkForRescan() )

					Define:	ScanToOrder	using	DDMenuItemDef
						Fields:	Text		~&Scan For This Order~
								IDText		~ID~
								ActionsText  ACTION Exec ( ScanIntoThisOrder() );
				}

			if (~<ImageType>~ == ~0~)
			{
				Define:	Explorer	using	DDMenuItemDef
					Fields:	Text		~&Find Images To Import~
							IDText		~ID~
							ActionsText  ACTION Exec ( FindImages() )
//							IsHidden	<ImageType> ? F : T
			}

			Define:	ExportImages	using	DDMenuItemDef
				Fields:	Text		~Export Images~
						IDText		~ID~
						ActionsText  ACTION Exec ( ExportImages() )

		}

		Global( ImagesViewMenu );
	}
}


NUMERIC SelectImage( OrderID,Roll,Frame )
{
	if ( !ImagesThumbNailWindow( FindI,ViewDataFor,~<OrderID>~,Where,View ) )
		{ return FALSE; }

	if ( View( FindI,Key,~OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~,Where,TheImage ) )
	{ 
		View( SetSelected,TheImage,TRUE,TRUE );
		View( ScrollIntoView );
	}

	return TRUE;
}


Include: ~ExportSelectedToFile~;

DefaultOrder = ~~;
DefaultRoll = ~~;


VOID FrameDataForOrderRoll( Which,ViewIsImages,DocumentQuery,ImageType,Order,Roll )
{
	ImagesDataWindow( Set,Position,~0 70 100 27~ );

	DefaultOrder = ~<Order>~;
	DefaultRoll = ~<Roll>~;

	Init( ~<Which>~,~<ViewIsImages>~,~<DocumentQuery>~,~<ImageType>~ );
}

NUMERIC OrderImagesForCustomer( Customer,ViewIsImages )
{
	DocumentQuery = STR ( Select * From Images Where OrderID In (Select ID From Orders Where CustomerID = '<Customer>') Order By OrderID,Roll,Frame );

	OrderQuery = ~Select ID From Orders Where CustomerID = '<Customer>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<OrderQuery>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Error( ~Failed to query the Orders table.   <OrderQuery>.   <theErr>~ ); 
	}

	Count = List( NumEntries );

	if ( (<Count> > 10) && FALSE )	// decide what to do about this
	{
		return Warning( ~You have selected too many orders to view at once~ );
	}

	if ( !List( MakeSQLList,WhichOrders,TRUE,ID ) )
	{	
		Warning( Translate( ~There are no lab orders~ ) );
		Exit();
	}

	if ( ~<WhichOrders>~ == ~~ )
	{	
		Warning( Translate( ~There are no <Customer> orders~ ) );
		Exit();
	}

	Init( ~<WhichOrders>~,<ViewIsImages>,~<DocumentQuery>~,0 );

	return TRUE;
}


NUMERIC OrderImagesForShoot( ShootID,ViewIsImages )
{
	DocumentQuery = STR ( Select * From Images Where OrderID In (Select ID From Orders Where ShootDescID = '<ShootID>') Order By OrderID,Roll,Frame );

	OrderQuery = ~Select ID From Orders Where ShootDescID = '<ShootID>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<OrderQuery>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Error( ~Failed to query the Orders table.  <OrderQuery>.  <theErr>~ ); 
	}

	Count = List( NumEntries );

	if ( (<Count> > 10) && FALSE )	// decide what to do about this
	{
		return Warning( ~You have selected too many orders to view at once~ );
	}

	if ( !List( MakeSQLList,WhichOrders,TRUE,ID ) )
	{	
		Warning( Translate( ~There are no  orders for Shoot <ShootID>~ ) );
		Exit();
	}

	if ( ~<WhichOrders>~ == ~~ )
	{	
		Warning( Translate( ~There are no  orders for Shoot <ShootID>~ ) );
		Exit();
	}

	Init( ~<WhichOrders>~,<ViewIsImages>,~<DocumentQuery>~,0 );

	return TRUE;
}

NUMERIC SetRenderingLUT()	
{
	if ( !GenCon( View,GETACTIVEVIEW ) )		{ return Warning( ~There was no active view~ ); }

	if ( !View( GetSelected,SelectedImages ) )	{ return Warning( ~There were no images selected~ ); }

	if ( SelectedImages( ChildCount ) <= 0 )	{ return Warning( ~There were no images selected~ ); }

	Actions = ACTION Doc ( SetLutDoc OpenOnce SetLutDoc "Init(TRUE);" );
	PerformActions( Actions );

	return TRUE;
}

VOID CloseDialog()
{
    ForgetKparsDefaults();
	dlg( END );
    Exit();
}


NUMERIC AddImageThumbnailsFromQuery( Query )
{
	ReturnOnFailure( !<FirstTime> );
	
	if ( !PGenConList( List,Connect,Cursor,Keyset,LockType,ReadOnly,QUERY,~<Query>~ ) )
	{ 
		WaitCursor( End );
		List( GetErrorDescription,0,theErr );
		Warning( ~Failed to query the Images table: <Query>. <theErr>~ );
	}
	
	return ImagesThumbNailWindow( AddToThumbNailViews,ImagesThumbNailCategory,ImagesThumbNailImage,List,OrderID,Image,~<WhichImages>~ );
}

NUMERIC RefreshTheThumbnails()
{
	DocumentQuery = ~~;
	return ImagesThumbNailWindow( ResetViews );
}


FirstTime = TRUE; // Only open a new window the first time

// extract all the KPARS systems settings once for ImagesDoc.

VOID Init( WhichImages,ViewIsImages,DocumentQuery,ImageType, ViewFilter )
{
	Global( WhichImages,DocumentQuery,ViewIsImages,ImageType );
	
	if ( !Defined( EnableKpars ) )
	{
		GetKparsDefaults();
	}

	DefineMenus();

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		WaitCursor( Begin );

		Start = Ticks();

		StatusBarText( Translate( ~Querying Images~ ) );

		if ( !PGenConList( List,Connect,Cursor,Keyset,LockType,ReadOnly,QUERY,~<DocumentQuery>~ ) )
		{ 
			WaitCursor( End );
			List( GetErrorDescription,0,theErr );
			Warning( ~Failed to query the Images table: <DocumentQuery>. <theErr>~ );
			Exit();
		}

		Count = List( NumEntries );

		IF 0
		{
			if ( <Count> > 300 )
			{
				if ( MessageBox( ~Your query:\n\n   <DocumentQuery>\n\nwill retrieve <Count> records\n\nAre you sure you want to continue?~,YESNO ) != YES )
				{
					Exit();
				}
			}
		}

		StatusBarText( Translate( ~Reading <Count> Images~ ) );

		if ( <ViewIsImages> )
		{
			SetDocumentData( List(GetObject) );

			ImagesThumbNailWindow( CreateThumbNailViews,ImagesThumbNailCategory,ImagesThumbNailImage,List,OrderID,Image,~<WhichImages>~ );
						
			ImagesThumbNailWindow( CreateWindow,~Images~ );
		}
		else
		{
			//SetDocumentData( List(GetObject), TRUE );
			SetDocumentData( List(GetObject) );
			ImagesDataWindow( CreateWindow,~Image Data~ );
		}

		InitChromaKeyState(TRUE);

		Duration = (Ticks() - <Start>) / 1000;

		StatusBarText( Translate( ~Read <Count> Images in <Duration> seconds~ ) );
	}
	else
	{
		RefreshDoc();
	}

	WhichWindow = <ViewIsImages> ? ThumbNail : Data;
	WindowType = <ViewIsImages> ? ~~ : Data;

	if ( ~<WhichImages>~ != ~~ )
	{
		if (~<ViewFilter>~ != ~~)
		{
			Images<WhichWindow>Window( SetWindowTitle,Translate(~<$Field.ImageType[#<ImageType>]> Images <WindowType> - <WhichImages> - <ViewFilter>~) );
		} else
		{
			Images<WhichWindow>Window( SetWindowTitle,Translate(~<$Field.ImageType[#<ImageType>]> Images <WindowType> - <WhichImages>~) );
		}
	}
	else
	{
		if (~<ViewFilter>~ != ~~)
		{
			Images<WhichWindow>Window( SetWindowTitle,Translate(~<$Field.ImageType[#<ImageType>]> Images Data - <ViewFilter>~) );
		}
		else
		{
			Images<WhichWindow>Window( SetWindowTitle,Translate(~<$Field.ImageType[#<ImageType>]> Images Data~) );
		}
	}

	WaitCursor( End );
}


// DefineMenus();	// Moved inside of Init so that we can show or hide some of the items based on the type
					// of view (Product Images or Order Images) it is.


CropState = ~F~;
fHeadAlignmentSetup = ~~;
fChromaKeyBGImageID = ~~;
fChromaKeyMaskState = 1;
fChromaKeyFillColorValue = 0;
fChromaKeyFillColorRed = 0;
fChromaKeyFillColorGreen = 0;
fChromaKeyFillColorBlue = 0;

Include: ~FileBrowseButtonsInGridView~;

Include: ~DefineStdGridButtons~;
ButtonWidth = 55;  ButtonHeight = 20;  hGap = 1; vGap = 2;

Define: ImagesDataWindow Using DDWinDef
	Fields:		Title					~Image Data~
				Position				0 25 90 25
				IsPositionPercent		T
				Purpose					~Orders~
				TypeName				SplitterWnd
				SplitterRows			~2 14 90~
				SplitterColumns			1
				EnableStatusBar			T

	Contains:	INLISTORDER
	{
		Define: ControlView Using DDViewDef AsSymbol ControlView
		Fields:			ViewType				FormView
						KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
						HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "OrderImagesData.htm" )
			Contains:
			{
				position = DefineStdGridButtons(Frame) + 10;

				Define: SubjectButton Using DDWinCtrlDef AsSymbol SubjectButton
					Fields:	GENCONNAME		This
							DACTIONSTEXT	ACTION EXEC ( ViewSubjectInfoForOrder() )
							POSITION		$position + $hGap, $vGap $ButtonWidth $ButtonHeight
							TEXT			~Subject~
							TOOLTIP			~See the subject info for this order~
							TYPENAME		BUTTON
			}

		Define: ImagesDataView Using DDViewDef AsSymbol ImagesDataView
			Fields:	ViewType				ListView
					ViewDataType			Text
					GridControlTypes		ImagesTableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION EXEC ( ChangeRecord(); )
					DeleteRecordActionsText ACTION EXEC ( DeleteRecord(TRUE); )
					RClickUpActionsText		ACTION EXEC ( RightClickInListView(); )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					CloseActionsText		ACTION Call ( OnCloseImagesDataView() )
					DoubleClickActionsText	ACTION EXEC ( OpenSelectedImages(TRUE,TRUE) )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "OrderImagesData.htm" )
					DropActionsText			ACTION EXEC ( NotImplementedYet(~Dropping Here~) )	
					ComboBoxActionsText		ACTION Call ( RefreshComboBox() )
					KeyboardActionsText		ACTION Exec ( OnKeyDown() )
					ButtonClickActionsText	ACTION Exec ( OnButtonClick(ImagesDataView,Translate( ~Find the desired image ...~ ),~<$App.ShareDirectory>~) )
					//LoadAsync				T
	}

	
Define: ImagesThumbNailWindow Using DDWinDef
	Fields:	Title						~Images~
			TypeName					~ImageWnd~
			Position					50 40 50 35
			IsPositionPercent			T
			IsCenteredVertical			F
			IsCenteredHorizontal		F
			IsMaximized					F
			Purpose						~Orders~
			ImageFrameSize				(85)
			EnableStatusBar				F 


MACROSOFF

Define: ImagesThumbNailCategory Using DDViewDef
	Fields:	Text						~<OrderID>~
			ViewType					~ThumbnailView~
			IsModifiable				~T~
			IsNameModifiable			~F~
			DoubleClickActionsText		ACTION Exec ( OpenSelectedImages(TRUE,TRUE) )
			IActionsText				~~
			OActionsText				ACTION Call ( SaveUserSettings() )
			DropTypes					~Image Text~
			ViewDataType				Image
			ViewDataFor					~<OrderID>~
			DropActionsText				ACTION Exec ( HandleDrop() )
			AddCategoryActionsText		ACTION Exec ( AddCategory() )
			RenameCategoryActionsText	ACTION Exec ( RenameCategory() )
			RClickUpActionsText			ACTION Exec ( RightClickInImageView() )
			LClickUpActionsText			ACTION Exec ( LeftClickInImageView() )
			KeyboardActionsText			ACTION Exec ( OnKeyDown() )	
			HActionsText				ACTION SHOWHELPPAGE ( KPISHelpFile "OrderImages.htm" )
			UseImageCorrections			~T~
			ChromaKeyMaskState			1;

Define: ImagesThumbNailImage Using DDICImageDef
	Fields:	Info1						~<$con.Image[Roll]>~ 
			Info2						~<$con.Image[Roll]>-<$con.Image[Frame]>  <$con.Image[SubjectID]>~
			Info3						~<$con.Image[SubjectID]>  <$con.Image[Path]>~
			Info4						~<$con.Image[ICCProfile]>~
			ImageSource					~<$con.Image[ImageSource]>~
			IsReprocessed				~<$con.Image[Reprocess].numeric>~
			OrderID						~<$con.Image[OrderID]>~
			Roll						~<$con.Image[Roll]>~
			Frame						~<$con.Image[Frame]>~
			Path						~<$con.Image[Path]>~
			IsDeleted					~<$con.Image[Rejected].numeric>~
			AutoRetouchComplete			~<$con.Image[AutoRetouchComplete].numeric>~
			ImageOffline				~<$con.Image[ImageOffline].numeric>~
			IsSelected					FALSE 
			DropTypes					~Image~
			DataType					Image 
			Table						Image
			FDAFailed					~<$con.Image[FDAFailed].numeric>~
			Key							~OrderID = '<$con.Image[OrderID]>' AND Roll = '<$con.Image[Roll]>' AND Frame = '<$con.Image[Frame]>'~ ;

MACROSON

OptionalInclude( ~<$App.ShareDirectory>\Scripts\ScriptOverrides\ImagesDoc.txt~ );

