Include: ~FormattingRoutines~;

IncludeClass( BaseGrid );

VOID	CropServices::CropServices()						// CONSTRUCTOR
{
	TableName = ~CropServices~;
	DocumentQuery = ~Select * from <TableName> Order By OrderID,Crop,ServicesID~;
	Title = ~Crop Services~;
	WindowTop = 25;
	WindowWidth = 90;
	WindowHeight = 25;
	HelpPage = ~CropServices.htm~;
	SplitterRows = ~2 7 93~;
}

STR		CropServices::GetKey( &Item )					// PRIMARY KEY FOR THE TABLE
{
	return ~OrderID = '<$con.Item[OrderID]>' AND Crop = '<$con.Item[Crop]>' AND ServicesID = <$con.Item[ServicesID]>~;
}

NUMERIC CropServices::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[OrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  OrderID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Crop]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Crop cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[ServicesID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ServicesID cannot be blank.~ ) ); }

	return TRUE;
}

NUMERIC CropServices::OnAddRecord( &NewRow )
{
	return NewRow( Set,OrderID,~<fOrderID>~ );
}

NUMERIC Init( Which,Query )
{
	if ( Defined( Grid ) )
	{
		Grid.ReOpen();
		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.Set( fOrderID,~<Which>~ );
		Grid.RefreshListView();
	}
	else
	{
		Class( CropServices,Extends,BaseGrid,
				Member,fOrderID,Str,~<Which>~ );

		CropServices( New,Grid );

		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.DefineWindow();
		Grid.Init();
		Global( Grid );
	}

	Grid.SetTitle( ~Crop Services - <fOrderID>~ );

	return TRUE;
}

