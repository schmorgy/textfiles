

NUMERIC RefreshListView( Requery )
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate( ~Would you like to save your pending changes?~ ),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed: <DocumentQuery>. <theErr>~ ) );
	}

	SetDocumentData( List(GetObject) );
	
	DataWindow( StatusBar,Text,~Refreshing~ );
	DataWindow( RefreshWindow );
	NumEntries = List( NumEntries );
	DataWindow( StatusBar,Text,~<NumEntries> Records~ );

	return TRUE;
}



NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,Changed,Orig,ChangedRow,IsNewRow ) )
		{ return Warning( ~There was no changed row.~ ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	Key = STR ( ID = '<$Con.Orig[ID]>' );

	Query = ~Select * From ShooterUnits Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	if ( !List( UpdateFrom,Changed,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
		return Warning( Translate( ~Could not update ShooterUnits record where <Key>. <theErr>~ ) );
	}

	DataView( CommitChanges );

	return TRUE;
}



NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,SetupsToDelete ) )		
		{ return Warning( ~There was no row selected to delete~ ); }

	Count = SetupsToDelete( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( ~There are no selected setups to delete~ ); }

	if ( MessageBox( ~Are you sure you want to delete the <Count> selected setups?~,YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}

	StringList( RowsToDelete,New );

	while ( SetupsToDelete( GetNext,Setup ) )
	{
		Key = ~ID = '<$con.Setup[ID]>'~;
		if ( !dBase( CMD,~Delete From ShooterUnits Where <Key>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( ~Could not delete PrinterSetup where <Key>. <theErr>~ );
		}

		RowsToDelete( AddString,SetupsToDelete(GetCurrentPosition) );
	}

	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}


NUMERIC AddRecord( &DataLocation )
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	if ( ~<DataLocation>~ != ~~ )
	{
		if ( GenCon( Src,RemoveFrom,~<DataLocation>~,[GENCONS] ) )
		{
			NewRow( SetValuesFrom,Src );
		}
	}
	
	RowBeingAdded = DataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( ~You are too low on memory to add any more rows~ ); }

	DataView( SetActiveCell,<RowBeingAdded>,ID );

	return TRUE;
}


NUMERIC RightClickInListView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }

	ActiveView( DisplayMenu,ViewMenu );

	return TRUE;
}


NUMERIC OnCloseDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	DataWindow( ForceCloseWindow );
	return TRUE;
}


NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new ShooterUnits setups that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}


NUMERIC AddShooterUnits( WhichShooterUnits,DocumentQuery,ShooterUnitToAdd )
{
	if ( !Init( ~<WhichShooterUnits>~,~<DocumentQuery>~ ) )	{ return FALSE; }

	return AddRecord( ShooterUnitToAdd );
}


NUMERIC UpdateComboBoxes()
{
	DataView( GetActiveCell,row,col );

	GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );

	Fields( GetAt,<col> - 1,ColumnDefinition );

	Query = STR ( Select ID From Products Order By ID );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr,ClearErrors );
		return Warning( ~Database query failed: <Query> <theErr>~ );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,Products,ID );

		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,Products(GetCopyOf) );

		DataView( SetComboBox,ColumnDefinition,<Col> );
	}
	
	return TRUE;
}


NUMERIC ViewProductInfo()
{
	if ( !DataView( GETSELECTED,SelectedData ) )
	{ 
		return Warning( Translate( UIMessages,NoRowsSelected ) );
	}

	Count = SelectedData( ChildCount );

	if ( <Count> <= 0 )
	{ 
		return Warning( Translate( UIMessages,NoRowsSelected ) );
	}

	while ( SelectedData( GetNext,Record ) )
	{
		List = ~~;	// WILL BE A LIST OF PRODUCT ID'S

		Index = 0;

		while ( <++Index> <= 6 )	// GET ALL THE SIZEN PRODUCTS
		{
			ProductID = ~<$con.Record[Size<Index>]>~;
			
			if ( ~<ProductID>~ != ~~ )
			{
				List = strlen(~<List>~) ? ~<List>,'<ProductID>'~ : ~'<ProductID>'~;
			}	
		}

		Index = 0;

		while ( <++Index> <= 5 )	// GET ALL THE SPLITN PRODUCTS
		{
			ProductID = ~<$con.Record[Split<Index>]>~;
			
			if ( ~<ProductID>~ != ~~ )
			{
				List = strlen(~<List>~) ? ~<List>,'<ProductID>'~ : ~'<ProductID>'~;
			}	
		}	

		Query = ~Select * From Products Where ID IN (<List>) Order By ID~;

		WhichProducts = Translate(~For Shooter Units of <$con.Record[ID]>~);

		Action = ACTION DOC ( ProductData Open ProductsDoc "Init( ~<WhichProducts>~,FALSE,~<Query>~ );" );

		PerformActions( Action );
	}

	return TRUE;
}



FirstTime = TRUE; // Only open a new window the first time


NUMERIC Init( WhichShooterUnits,DocumentQuery )
{
	DataWindow( Set,Title,~<WhichShooterUnits>~ == ~~ ? ~Shooter Units Data~ : ~Shooter Units Data - <WhichShooterUnits>~ );

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{
			List( GetErrorDescription,0,theErr ); 
			Error( ~Failed to query the Shooter Units table. <DocumentQuery>.  <theErr>~ );
		}

		SetDocumentData( List(GetObject) );

		Global( WhichShooterUnits,DocumentQuery );

		if ( !DataWindow( CreateWindow,~ShooterUnits~ ) )
			{ Error( ~Failed to create the window~ ); }

		NumEntries = List( NumEntries );
		DataWindow( StatusBar,Text,~<NumEntries> Records~ );

	}
	else
	{
		RefreshListView();
	}

	return TRUE;
}

Include: ~FileBrowseButtonsInGridView~;

if ( !GenCon( TableDefinition,GetFrom,ShooterUnits,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The ShooterUnits Table is not properly defined~ ); }
	

Define:	ViewMenu Using DDMenuDef AsSymbol ViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{
		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add Shooter Unit~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )

		Define:	NULL1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

		Define:	DeleteRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Delete~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )

		Define:	NULL2 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	ViewProductInfo	using	DDMenuItemDef
			Fields:	Text		Translate( ~See Product Data~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( ViewProductInfo(); )			
	}

Define: DataWindow Using DDWinDef
	Fields:		Title					Translate( ~Shooter Units~ )
				Position				0 80 100 15
				IsPositionPercent		T

	Contains:	INLISTORDER
	{
		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				~ListView~
					GridControlTypes		TableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION Exec ( ChangeRecord(); )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord(); )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					CloseActionsText		ACTION Call ( OnCloseDataView() )
					ComboBoxActionsText		ACTION Call ( UpdateComboBoxes() )
					DoubleClickActionsText	ACTION EXEC ( ViewProductInfo() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "ShooterUnits.htm" )
	}
	

