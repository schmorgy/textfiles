
//	C:\AppsV2\ScriptTools\FindStringsInLogs\FindStringsInLogs_1.h.

//	TBD: SETUP THE DIALOG DEFAULT VALUES HERE.

void SetDefaults()
{
	TCHAR	 DefaultPath[2048] ;
	TCHAR	*ExeDirectory = GetExeDirectory() ;

	sprintf( DefaultPath, _T("%s\\SessionLogs\\DP2\\*.txt"), ExeDirectory ) ;
	gDlgData->SetAttrValue( _T("EditSourceFolder"), DefaultPath ) ;

	sprintf( DefaultPath, _T("%s\\SessionLogs\\LogSearchResults.txt"), ExeDirectory ) ;
	gDlgData->SetAttrValue( _T("EditDstFileName"), DefaultPath ) ;

	gDlgData->SetLongValue( _T("LineNumber"), 0L ) ;
	gDlgData->SetLongValue( _T("Stopping"), 0L ) ;
	gDlgData->SetLongValue( _T("FindInFilesObj"), 0L ) ;
	gDlgData->SetLongValue( _T("FileList"), 0L ) ;
	gDlgData->SetLongValue( _T("FilePtr"), 0L ) ;
	gDlgData->SetLongValue( _T("WorkingText"), 0L ) ;

	Add_String( _T("pph") ) ;
	Add_String( _T("Error") ) ;
	Add_String( _T("RenderComplete") ) ;
	Add_String( _T("Starting Batch") ) ;

	UList	*StringList = gDlgData->GetLongValue( _T("StringList")) ;
	if( StringList )
	{
		UpdateTheStrings( StringList ) ;
	}

}

void GetDialogLists()
{

//	TBD: SETUP ANY LISTS SPECIFIC TO THIS DIALOG HERE.

//	Example:
//	UStringList	*aSL ;
//	aSL = (UStringList *) GetTreeObject(_T("CharacterSets"),_T("Strings")) ;
//	if( aSL == NULL )
//	{
//		aSL = new UStringList ;
//		aSL->SetName(_T("CharacterSets") ;
//		aSL->AddString(_T("Western"), FALSE) ;
//		aSL->AddString(_T("Japanese"), FALSE) ;
//		aSL->AddString(_T("Symbol"), FALSE) ;
//		HangTreeObject( aSL, _T("STRINGS")) ;
//	}
}

void Add_String( TCHAR *theString )
{
	UList	*StringList = gDlgData->GetLongValue( _T("StringList")) ;
	if( StringList == NULL )
	{
		StringList = new UList ;
		gDlgData->SetLongValue( _T("StringList"), (long) StringList ) ;
	}

	if( theString )
	{
		if( *theString )
		{
			long	Length = strlen( theString ) ;
			UGenCon *aGC = new UGenCon( GetDataDictionary( _T("DDFindInFile"))) ;
			if( aGC )
			{
				aGC->SetAttrValue( _T("String"), theString ) ;
				aGC->SetLongValue( _T("Length"), Length ) ;
				StringList->InsertBack( aGC ) ;
			}
		}
	}
}

void UpdateTheStrings( UList *StringList )
{
	TCHAR	*aString = NULL ;
	UGenCon	*aGC ;

	if( StringList == NULL )		{ return ; }

	long	NumEntries = StringList->GetNumEntries() ;
	if( NumEntries > 0 )
	{
		long	TotalLength = GetTotalStringLength( StringList ) ;
		if( TotalLength <= 0 )		{ return ; }

		TCHAR	*StringBuffer = (TCHAR *) malloc( TotalLength * 2 ) ;
		if( StringBuffer == NULL )	{ return ; }

		memset( StringBuffer, 0, TotalLength * 2 ) ;

		long	loop ;
		for( loop = 0L ; loop < NumEntries ; loop++ )
		{
			aGC = (UGenCon *) StringList->GetAt( loop ) ;
			if( aGC )
			{
				aString = aGC->GetStringValue( _T("String")) ;
				strcat( StringBuffer, aString ) ;
				strcat( StringBuffer, _T("\r\n")) ;
			}
		}

		gDlgData->SetAttrValue( _T("SearchStringList"), StringBuffer ) ;
//		DisplayControlValues( gDlg ) ;

		free( StringBuffer ) ;
	}
}

long	GetTotalStringLength( UList *StringList )
{
	long	TotalLength = 0L ;
	long	NumEntries  = StringList->GetNumEntries() ;
	UGenCon	*aGC ;

	long	loop ;
	for( loop = 0L ; loop < NumEntries ; loop++ )
	{
		aGC = StringList->GetAt( loop ) ;
		if( aGC )
		{
			TotalLength += aGC->GetLongValue( _T("Length")) + 10L ;
		}
	}
	return( TotalLength ) ;
}
