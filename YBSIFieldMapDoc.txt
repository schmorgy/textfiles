IncludeClass(BaseGrid);

VOID SetupsGrid::SetupsGrid()				
{
	TableName = ~YBSIFieldMap~;
	DocumentQuery = ~Select * from <TableName> Order By YearbookID,InfoType~;
	Title = TR(ExportToYearbook,YBSIFieldMap);
	WindowWidth = 90;

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		UserWarning( ~Error connecting to the Shared database: <theErr>~ );
		return;
	}
	Private( dBase );
}

VOID SetupsGrid::!SetupsGrid()
{
	ForgetPrivate( dBase );
}

VOID	SetupsGrid::DefineMessages()
{
	BaseGrid::DefineMessages();	
	LoadTranslationFile( ExportToYearbook,ExportToYearbook,ExportToYearbook );
	Title = TR(ExportToYearbook,YBSIMapTitle);
}

STR SetupsGrid::GetKey( &Item )		{ return ~YearbookID = '<$con.Item[YearbookID]>' AND FieldName = '<$con.Item[FieldName]>' AND InfoType = '<$con.Item[InfoType]>'~; }	// PRIMARY KEY FOR THE TABLE

VOID SetupsGrid::AddStdMenuItems()	// OVERRIDE TO REMOVE THE STANDARD EDITS
{
	AddStdDelMenuItems();
	AddStdRefreshMenuItems();
}

NUMERIC SetupsGrid::DefineStdGridButtons( Subject )
{
	xPosition = $hGap;

	if ( MethodDefined( AllOptions ) )
	{
		Define: AllOptionsButton Using DDWinCtrlDef AsSymbol AllOptionsButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.AllOptions() )
					POSITION		$xPosition, $vGap 45 $ButtonHeight
					TEXT			TR( BaseGridTrans, Options)
					TOOLTIP			TR( BaseGridTrans, SeeAllOptions)
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap + 5;
	}

	if ( MethodDefined( RollBackAllChanges ) )
	{
		Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.RollBackAllChanges() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			TR( Standard, Cancel )
					TOOLTIP			TR( BaseGridTrans, CancelAll,~<Subject>~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap;
	}

	if ( MethodDefined( DeleteRecord ) )
	{
		Define: DeleteButton Using DDWinCtrlDef AsSymbol DeleteButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.DeleteRecord(TRUE) )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			TR( Standard, HotDelete )
					TOOLTIP			TR( BaseGridTrans, DeleteSelected,~<Subject>~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap;
	}

	if ( MethodDefined( RefreshListView ) )
	{
		Define: RefreshButton Using DDWinCtrlDef AsSymbol RefreshButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.RefreshListView() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			TR( Standard, HotRefresh )
					TOOLTIP			TR( BaseGridTrans, RefreshList,~<Subject>~ )
					TYPENAME		BUTTON ;

			xPosition += $StdButtonWidth + $hGap;
	}

	return $xPosition;
}

NUMERIC SetupsGrid::ChangeRecord()
{
	Warning( ~To ensure data integrity, make any changes from the Yearbook dialog.~ );
	RollBackChanges();
	return TRUE;
}

NUMERIC Init()		
{
	if ( !Defined( Grid ) )
	{
		Class( SetupsGrid,Extends,BaseGrid );
		SetupsGrid( New,Grid );
		Grid.DefineWindow();
		Grid.Init();
		return Global( Grid );
	}
	
	return Grid.BringToFront();
}