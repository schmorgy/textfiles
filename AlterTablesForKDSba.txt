NUMERIC BaseStartup::AlterTablesForKDSba( &dBase )
{
	if ( !GetSystemSettings( ~AdjustImages~,~GrayPoint12Bit~,Value,Enabled ))
	{
		SetSystemSettings( ~AdjustImages~,~GrayPoint12Bit~,1679,TRUE );
	}

	if ( GetSystemSettings( ~Analyzer~,~SaveDSbaData~,Value,Enabled ))
	{
		SetWorkstationSettings( ~Analyzer~,~SaveAutoBalData~, <Value>,TRUE );
		cmd = ~Delete from SystemSettings Where Category='Analyzer' AND Item='SaveDSbaData'~;
		 
		if ( !ADO( dBase, Connect, Cmd, ~<cmd>~ ) )
		{
			dBase( GetErrorDescription, theErr );
			Warning( ~Could not delete SaveDSbaData from SystemSettings: <theErr>~ );
		}
		
	}
	else if ( !GetWorkstationSettings( ~Analyzer~,~SaveDSbaData~,Value,Enabled ))
	{
		SetWorkstationSettings( ~Analyzer~,~SaveAutoBalData~, 0,TRUE );
	}

	if ( GetSystemSettings( ~Analyzer~,~SaveAutoBalData~,Value,Enabled ))
	{
		SetWorkstationSettings( ~Analyzer~,~SaveAutoBalData~, <Value>,TRUE );
		cmd = ~Delete from SystemSettings Where Category='Analyzer' AND Item='SaveAutoBalData'~;
		 
		if ( !ADO( dBase, Connect, Cmd, ~<cmd>~ ) )
		{
			dBase( GetErrorDescription, theErr );
			Warning( ~Could not delete SaveDSbaData from SystemSettings: <theErr>~ );
		}
	}

	if ( GetSystemSettings( ~Analyzer~,~DefaultSbaLevel~,Value,Enabled ))
	{
		SetWorkstationSettings( ~Analyzer~,~DefaultAutoBalLevel~, <Value>,TRUE );
		cmd = ~Delete from SystemSettings Where Category='Analyzer' AND Item='DefaultSbaLevel'~;
		 
		if ( !ADO( dBase, Connect, Cmd, ~<cmd>~ ) )
		{
			dBase( GetErrorDescription, theErr );
			Warning( ~Could not delete DefaultSbaLevel from SystemSettings: <theErr>~ );
		}
	}
	else if ( !GetWorkstationSettings( ~Analyzer~,~DefaultAutoBalLevel~, Value,Enabled ))
	{
		SetWorkstationSettings( ~Analyzer~,~DefaultAutoBalLevel~, 0,TRUE );
	}

	if ( GetWorkstationSettings( ~Analyzer~,~DefaultSbaLevel~,Value,Enabled ))
	{
		SetWorkstationSettings( ~Analyzer~,~DefaultAutoBalLevel~, <Value>,TRUE );
		cmd = ~Delete from WorkstationSettings Where Category='Analyzer' AND Item='DefaultSbaLevel'~;
		 
		if ( !ADO( dBase, Connect, Cmd, ~<cmd>~ ) )
		{
			dBase( GetErrorDescription, theErr );
			Warning( ~Could not delete DefaultSbaLevel from SystemSettings: <theErr>~ );
		}
	}


	temp = ~~;
	Enabled = FALSE;
	If (GetSystemSettings( ~AdjustImages~,~GrayPointPseudo12Bit~,temp,Enabled ))
	{
		cmd = ~Delete from SystemSettings Where Category='AdjustImages' AND Item='GrayPointPseudo12Bit'~;
		 
		if ( !ADO( dBase, Connect, Cmd, ~<cmd>~ ) )
		{
			dBase( GetErrorDescription, theErr );
			Warning( ~Could not delete GrayPointPseudo12Bit from SystemSettings: <theErr>~ );
		}
	}

	if ( !ColumnExists( ~DSBAImages~,~PrefsFile~,dBase ) )
	{
		AddColumn( dBase,~DSBAImages~,~PrefsFile~ );
		
		Query = ~Select * From DSBAImages Order By CameraTerm~;
		if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr );
			Warning( Translate( ~Unable to Access DSBAImages Table\n\n<Query>\n\n<theErr>~ ) ); 
			return TRUE;
		}

		while ( List( GetNext,DsbaImage ) )
		{
			SQLCommand = ~UPDATE DSBAImages SET PrefsFile = '<$pcon.DsbaImage[CameraTerm]>' WHERE CameraTerm = '<$pcon.DsbaImage[CameraTerm]>'~;
			if (!dBase(Cmd, ~<SQLCommand>~) )
			{
				Warning( Translate( ~Unable to update DSBAImages field.~ ) );
				return FALSE;
			}
		}
	}

	DropColumn( dBase,~DSBAImages~,~CameraTerm~ );
	AddColumn( dBase,~DSBAImages~,~SBALevel~ );
	AddColumn( dBase,~DSBAImages~,~Enhanced~ );
	AddColumn( dBase,~DSBAImages~,~AutoBalance~ );

	// for Composite SBA
	AddColumn( dBase,~Images~,~CompBrt~ );
	AddColumn( dBase,~Images~,~CompRed~ );
	AddColumn( dBase,~Images~,~CompGrn~ );
	AddColumn( dBase,~Images~,~CompBlu~ );

	AddColumn( dBase,~CompSbaData~,~Recalculate~ );
	AddColumn( dBase,~CompSbaData~,~CheckAlignmentFlag~ );

	AddColumn( dBase,~CompSbaData~,~FoundEyesManually~ );
	AddColumn( dBase,~CompSbaData~,~ManualLeftEyeX~ );
	AddColumn( dBase,~CompSbaData~,~ManualLeftEyeY~ );
	AddColumn( dBase,~CompSbaData~,~ManualRightEyeX~ );
	AddColumn( dBase,~CompSbaData~,~ManualRightEyeY~ );
	AddColumn( dBase,~CompSbaData~,~ManualChinY~ );
	AddColumn( dBase,~CompSbaData~,~ManualTopHeadY~ );

	DropColumn( dBase,~ImportImagesSetups~,~AutoBalance~ );
	AddColumn( dBase,~ImportImagesSetups~,~OrderStatus~ );

	AddColumn( dBase,~DSbaBatchSetups~,~ApplyShasta~ );

	if ( !GetSystemSettings( ~Scanning~,~TrackSBAData~,Value,Enabled ))
	{
		SetSystemSettings( ~Scanning~,~TrackSBAData~,TRUE,TRUE );
	}

	if ( !GetSystemSettings( ~Scanning~,~SBARules~,Value,Enabled ))
	{
		SetSystemSettings( ~Scanning~,~SBARules~,FALSE,TRUE );
	}

	if ( !GetSystemSettings( ~AdjustImages~,~CheckColorType~,Value,Enabled ))
	{
		SetSystemSettings( ~AdjustImages~,~CheckColorType~,TRUE,TRUE );
	}

	LoadDSbaPreferences( dBase );

	return TRUE;
}


VOID BaseStartup::LoadDSbaPreferences( &dBase )
{
	sbaQuery = ~Select * from DSbaPrefsDef~;

	if ( !dBase( RecordCountFor, ~<sbaQuery>~) )
	{
		action = ACTION Doc ( ~DSbaPrefsDefDoc~ OpenOnce DSbaPrefsDefDoc "LoadPreferences();" );
		PerformActions( action );
	}
}
