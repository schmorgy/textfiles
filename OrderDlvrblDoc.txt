// OrderDlvrblDoc.txt
// Globals:		OrdersList		- Passed in with Init() - SQL list eg. ~'1001','1002'~
//				DocumentQuery	- Query which resulted in the display

Define:	OrderDlvrblMessages Using DDSymbol
	Fields:	Value	~These strings are OrderDlvrbl related strings used by the user interface.~
	Contains:
	{
		Define: Title				using DDText	Fields: Text ~Order Deliverables Data~
		Define: RollFrame			using DDText	Fields: Text ~Roll/Frame~
		Define: SubjectPackages		using DDText	Fields: Text ~Subject Packages~
		Define: DP2Products			using DDText	Fields: Text ~DP2 Products~
		Define: Movie				using DDText	Fields: Text ~Movie~
		Define: CustomerUnique		using DDText	Fields: Text ~Customer Unique~
		Define: ItemsCreated		using DDText	Fields: Text ~Items~
		Define: PartialItemsCreated	using DDText	Fields: Text ~Partial Items~
		Define: ItemsDeleted		using DDText	Fields: Text ~Items Deleted~
		Define: BlankID				using DDText	Fields: Text ~Unable to save pending changes.  OrderID cannot be blank.~
		Define: BlankChoice			using DDText	Fields: Text ~Unable to save pending changes.  Choice cannot be blank.~
		Define: RemovingFor			using DDText	Fields: Text ~Are you sure you want to delete the %1 selected OrderDlvrbl(s)?~
		Define: DeletingRecord		using DDText	Fields: Text ~Deleting record %1~
		Define: RemovingItemsFor	using DDText	Fields: Text ~Are you sure you want to delete all the Order Items for the %1 selected OrderDlvrbl(s)?~
		Define: CreatingItemsForRows	using DDText	Fields: Text ~Are you sure you want to Create Order Items for the %1 selected rows?~
		Define: MergeWithPackages	using DDText	Fields: Text ~Do you want to merge your order deliverables with subject packages?~
		Define: CreatingItemsFor	using DDText	Fields: Text ~Creating Order Items for "%1" accessing %2 images~
		Define: CreatingPagedItemsFor using DDText	Fields: Text ~Creating Order Items for "%1"~
		Define: CreateJobsFor		using DDText	Fields: Text ~Are you sure you want to create the jobs for the %1 Order Items for layout %2?~
		Define: RunJobsFor			using DDText	Fields: Text ~Are you sure you want to Run Order %1 for layout %2?~
		Define:	NoOrderItems		using DDText	Fields: Text ~No OrderItems to find Jobs for~
		Define: ReadingRecords		using DDText	Fields: Text ~Reading %1 OrderDlvrbl~
		Define: ReadRecords			using DDText	Fields: Text ~Read %1 OrderDlvrbl in %2 seconds~
		Define: StsItemsProcessed	using DDText	Fields: Text ~Processed %1 Order Items~
		Define: StsCreatedItems		using DDText	Fields: Text ~Created %1 Order Items~
		Define: CreatingSubectPackagesFor using DDText Fields: Text ~Creating the "Subject Packages" Order Items for %1 SubjectInfo Records~
		Define: CreateTxt			using DDText	Fields: Text ~Create~
		Define: RunTxt				using DDText	Fields: Text ~Run~
		Define: TestTxt				using DDText	Fields: Text ~Test~
		Define: ViewItems			using DDText	Fields: Text ~Items~
		Define: ToolCreate			using DDText	Fields: Text ~Create Selected Order Items for entire Order or one Order if there is more than one Order on a Shoot~
		Define: ToolRun				using DDText	Fields: Text ~Create Jobs for Order Items of selected layout~
		Define: ToolTest			using DDText	Fields: Text ~Create and View one Order Item from the order for the layout~
		Define: ToolViewItems		using DDText	Fields: Text ~View Order Items for selected layout~
		Define: MenuCreateSelected	using DDText	Fields: Text ~Create Order Items~
		Define: MenuRunSelected		using DDText	Fields: Text ~Run Order Items~
		Define: MenuSeeOrderFor		using DDText	Fields: Text ~View Order Data~
		Define: MenuSeeItemsFor		using DDText	Fields: Text ~View Order Items~
		Define: MenuSeeItemsDataFor   using DDText	Fields: Text ~View Order Items Data~
		Define: MenuSeeSubjectInfoFor using DDText	Fields: Text ~View SubjectInfo~
		Define: MenuSeeJobQueueFor	using DDText	Fields: Text ~View Job Queue Data~
		Define: MenuDeleteOrderItemsFor using DDText	Fields: Text ~Delete Order Items~
		Define: MenuChangeField		using DDText	Fields:	Text ~Change Field~
		Define: MenuColumnInfo		using DDText	Fields: Text ~Deliverable Choices~
		Define: ALogDelOrdDlvrbl	using DDText	Fields: Text ~Deleted OrderDlvrbl %1 - %2~
		Define: NoSortRecord		using DDText	Fields: Text ~Unable to get Sort Definition for %1.~
		Define: CantDeleteItemCont	using DDText	Fields: Text ~Unable to delete Order Items for %1.\nOne or more order items are open\n.  Close all windows that are referencing\nthese order items and then try deleting the Order Items again.\nContinue deleting other Order Items?~
		Define: CantDeleteItem		using DDText	Fields: Text ~Unable to delete Order Items for %1.\nOne or more order items are open\n.  Close all windows that are referencing\nthese order items and then try deleting the Order Items again.~
		Define: NoImageRecords		using DDText	Fields: Text ~No Images found.\n\nCheck that the image files have been created, or the "Sort by" exists for the SubjectInfo for this order.~
		Define: CannotCloseMsg		using DDText	Fields: Text ~Cannot close Order Deliverables while items are being processed.~
		Define: GettingRecords		using DDText	Fields: Text ~Getting Records from database for %1~
//		Define: DoingSubjectPackages using DDText	Fields: Text ~Creating Subject Packages' Order Items for %1 SubjectInfo Records~
		Define: StopTitle			using DDText	Fields: Text ~Stop Creating Order Deliverables~
		Define: StopButtonTxt		using DDText	Fields: Text ~Stop~
		Define: StopMsgTxt			using DDText	Fields: Text ~Selecting Stop will terminate Creating Order Items~
		Define: StopCreating		using DDText	Fields: Text ~Are you sure you want to stop Creating Order Items?~
		Define: CantStopMsg			using DDText	Fields: Text ~Can't close dialog while Creating Order Items~
		Define: StopCreating		using DDText	Fields: Text ~Do you want to Delete any Order Items that have been created for the current Job not completed?~
		Define: NoOrdersDefined		using DDText	Fields: Text ~You don't have any Orders defined to use this SubjectInfo~
//		Define: SelectAll			using DDText	Fields: Text ~All~
//		Define: SelectNone			using DDText	Fields: Text ~None~
		Define: CreateOrderItems	using DDText	Fields: Text ~Create Order Items~
		Define: NumberOfOrders		using DDText	Fields: Text ~There are %1 Orders on the Shoot~
		Define: Collapse			using DDText	Fields: Text ~Collapse back to original view~
		Define: NothingSelected		using DDText	Fields: Text ~Please select an order for step 1 and step 2~
		Define: OrderListBoxTip		using DDText	Fields: Text ~This is the order the images are on~
		Define: DstOrderListBoxTip	using DDText	Fields: Text ~This is the order where the new order items will appear~
		Define: CreateItemTip		using DDText	Fields: Text ~Create Order Items for Deliverables~
		Define: ClearSelection		using DDText	Fields: Text ~Clear~
		Define: ClearSelectionTip		using DDText	Fields: Text ~Clear the Job Population Scripts selection~

	}

// Hang:	OrderDlvrblMessages	~[STRINGS]~ ;  No need to hang these


Include: ~FormattingRoutines~;
Include: ~Utilities2~;
Include: ~GroupHndl~;

//** [Refresh], "Refresh", Refresh Action, F5
NUMERIC RefreshListView()
{
	if ( OrderDlvrblDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	Start = Ticks();

	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	if ( FALSE )
	{
		if ( MessageBox( Translate(DBMessages,LargeQuery,~<DocumentQuery>~,~<Count>~),YESNO ) != YES )
		{
			return TRUE;
		}
	}

	OrderDlvrblDataWindow( StatusBar,Text,Translate( OrderDlvrblMessages,ReadingRecords,<Count> ) );

	SetDocumentData( List(GetObject) );	
	OrderDlvrblDataWindow( RefreshWindow );

	Duration = (Ticks() - <Start>) / 1000;

//	GetChoicesLists();

	return OrderDlvrblDataWindow( StatusBar,Text,Translate(OrderDlvrblMessages,ReadRecords,~<Count>~,~<Duration>~) );
}


//** [Options]
NUMERIC AllOptions()
{
	return OrderDlvrblDataView( DisplayMenu,OrderDlvrblListViewMenu,0,0 );

}


//** [Open], "Open", DoubleClick Action
NUMERIC OpenSelected()
{
	SeeOrdersFor();
	return TRUE;
}


//** [New], "New"
NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	theOrderID = ~~;
	numTokens = GetTokens(~<OrdersList>~,~',~,~theOrderID~);
	if ( OrderDlvrblDataView( GetSelectedRows,SelectedRows ) )		
	{
		SelectedRows( GetFirst,theRecord );
		theOrderID = ~<$con.theRecord[OrderID]>~;
	}

	NewRow( Set,OrderID,~<theOrderID>~ );

	WhichImage = GetSystemMultipleImageChoice();
	NewRow( Set,MultiImages,~<WhichImage>~ );

	RowBeingAdded = OrderDlvrblDataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate(UIMessages,AddRowFailed) ); }

	OrderDlvrblDataView( SetActiveCell,<RowBeingAdded>,~OrderID~ );

	return TRUE;
}


//** [Duplicate], "Duplicate"
NUMERIC DuplicateRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	if ( !OrderDlvrblDataView( GetSelectedRows,RowsToImitate ) )	
	{
		return Warning( Translate(UIMessages,NoRecordToDup ) );	
	}

	While ( RowsToImitate( GetNext,RowToImitate ) )
	{
		RowToImitate( Set,OrderID,~~ );
		RowToImitate( Set,Status,~~ );

		RowBeingAdded = OrderDlvrblDataView( AddRow, RowToImitate );

		if ( <RowBeingAdded> <= 0 )
			{ return Warning( Translate(UIMessages,AddRowFailed)); }
	}

	OrderDlvrblDataView( SetActiveCell,<RowBeingAdded>,OrderID );

	return TRUE;
}


//** [Find], "Find"
NUMERIC Search()
{
	Actions = ACTIONS ( Doc( ~Search~ Open SearchDoc "Search( OrderDlvrbl );" ) );
	return PerformActions( Actions );
}


//** [Save], "Save Changes"
NUMERIC SaveAllChanges()
{
	while ( OrderDlvrblDataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


//** [Cancel], "Cancel Changes"
NUMERIC RollBackAllChanges()
{
	if ( !OrderDlvrblDataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( Translate(UIMessages,CancelChanges),YESNO ) != YES )
		{ return FALSE; }
				
	while ( OrderDlvrblDataView( PendingChanges ) )
	{
		OrderDlvrblDataView( RollBackChanges );
	}

	return TRUE;
}

//** [Delete], "Delete", DeleteRecords Action
// Currently only deletes the OrderDlvrbl records and nothing else
NUMERIC DeleteRecord()
{

	if ( !OrderDlvrblDataView( GetSelectedRows,RecordsToDelete ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	count = RecordsToDelete( ChildCount );

	if ( MessageBox( Translate(OrderDlvrblMessages,RemovingFor,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	StringList( RowsToDelete,New );

//	if ( !DeleteOrderItemsForRecord())
//	{
//		return FALSE;
//	}

	num = 1;
	while ( RecordsToDelete( GetNext,theRecord ) )
	{
			OrderDlvrblDataWindow( StatusBar,Text,Translate(OrderDlvrblMessages,DeletingRecord,~<$con.theRecord[OrderID]> <$con.theRecord[Choice]>~) );
			Cmd = ~Delete From OrderDlvrbl Where OrderID = '<$con.theRecord[OrderID]>' AND Choice = '<$con.theRecord[Choice]>'~;

			if ( !dBase( Cmd,~<Cmd>~ ) )
			{
				dBase( GetErrorDescription,theErr );
				return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
			}

			RowsToDelete( AddString,RecordsToDelete(GetCurrentPosition) );

			++num;
	}

	OrderDlvrblDataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}


// Returns: TRUE - all successfully deleted
//			FALSE - Command to database failed - Warning displayed
//			-1    - No files deleted.  Found file that is not deletable
NUMERIC RemoveOrderItems(&dbase, OrderID, ProductID, ItemType)
{
	// *** Check all files are deletable
	if (~<ItemType>~ == Translate(OrderDlvrblMessages,SubjectPackages))
	{
		Query = ~Select * From OrderItems Where OrderID = '<OrderID>' AND Type = '<ItemType>'~;
	}
	else
	{
		if (ProductIsPackage(~<ProductID>~) )
		{
			Query = ~Select * From OrderItems Where OrderID = '<OrderID>' AND Type = '<ItemType>' AND TypeName = '<ProductID>'~;
		}
		else
		{
			Query = ~Select * From OrderItems Where OrderID = '<OrderID>' AND Type = '<ItemType>' AND ProductID = '<ProductID>'~;
		}
	}

	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	while ( List( GetNext,OrderItem ) )
	{
		// Check the job file.
		if ( !IsNULL(~<$pcon.OrderItem[JobPath]>~) )
		{
			if ( !Files( IsFileDeleteable,~<$pcon.OrderItem[JobPath]>~ ) )
			{
				return -1;
			}
		}

		// Check the job preview.
		if ( !IsNULL(~<$pcon.OrderItem[PreviewPath]>~) )
		{
			if ( Files( FileExists,~<$pcon.OrderItem[PreviewPath]>~ ) )
			{
				if ( !Files( IsFileDeleteable,~<$pcon.OrderItem[PreviewPath]>~ ) )
				{
					return -1;
				}
			}
		}
		
		Path = ~<$pcon.OrderItem[JobPath].Path>\Preview\<$pcon.OrderItem[JobPath].Filename>.jpg~;
		
		if ( Files( FileExists,~<Path>~ ) )
		{
			if ( !Files( IsFileDeleteable,~<Path>~ ) )
			{
				return -1;
			}
		}
	}


	// *** Delete the Files
	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	while ( List( GetNext,OrderItem ) )
	{
		// Delete the job file.
		if ( !IsNULL(~<$pcon.OrderItem[JobPath]>~) )
		{
			if ( !Files( Delete,~<$pcon.OrderItem[JobPath]>~ ) )
			{
				Warning( Translate( UIMessages,CouldNotDeleteFile,~<$pcon.OrderItem[JobPath]>~ ) );
			}

			Directory( Remove,~<$pcon.OrderItem[JobPath].path>~ );
		}

		// Delete the job preview.
		if ( !IsNULL(~<$pcon.OrderItem[PreviewPath]>~) )
		{
			if ( Files( FileExists,~<$pcon.OrderItem[PreviewPath]>~ ) )
			{
				if ( !Files( Delete,~<$pcon.OrderItem[PreviewPath]>~ ) )
				{
					Warning( Translate( UIMessages,CouldNotDeleteFile,~<$pcon.OrderItem[PreviewPath]>~ ) );
				}
			}
				
			Directory( Remove,~<$pcon.OrderItem[PreviewPath].path>~ );
			Directory( RemoveParent,~<$pcon.OrderItem[PreviewPath].path>~ );
		}
		
		Path = ~<$pcon.OrderItem[JobPath].Path>\Preview\<$pcon.OrderItem[JobPath].Filename>.jpg~;
		
		if ( Files( FileExists,~<Path>~ ) )
		{
			if ( !Files( Delete,~<Path>~ ) )
			{
				Warning( Translate( UIMessages,CouldNotDeleteFile,~<Path>~ ) );
			}
		}
			
		Directory( Remove,~<$str.$Path.path>~ );
		Directory( RemoveParent,~<$str.$Path.path>~ );
	}


	if (~<ItemType>~ == Translate(OrderDlvrblMessages,SubjectPackages))
	{
		cmd = ~Delete From OrderItems Where OrderID = '<OrderID>' AND Type = '<ItemType>'~;
	}
	else
	{
		if (ProductIsPackage(~<ProductID>~) )
		{
			cmd = ~Delete From OrderItems Where OrderID = '<OrderID>' AND Type = '<ItemType>' AND TypeName = '<ProductID>'~;
		}
		else
		{
			cmd = ~Delete From OrderItems Where OrderID = '<OrderID>' AND Type = '<ItemType>' AND ProductID = '<ProductID>'~;
		}
	}
	if ( !dBase( Cmd,~<cmd>~ ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
	}

	return TRUE;

}

//** "Delete Order Items"
NUMERIC DeleteOrderItemsForRecord()
{
	if ( !OrderDlvrblDataView( GetSelectedRows,RecordsSelected ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	count = RecordsSelected( ChildCount );

	if ( MessageBox( Translate(OrderDlvrblMessages,RemovingItemsFor,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	num = 1;
	while ( RecordsSelected( GetNext,theRecord ) )
	{
		result = RemoveOrderItems( dBase,~<$con.theRecord[OrderID]>~,~<$con.theRecord[Choice]>~,~<$con.theRecord[Name]>~ );  
		if (<result> != TRUE)
		{
			if (<result> == -1)
			{
				if ( <num> == <count> )
				{
					MessageBox( Translate(OrderDlvrblMessages,CantDeleteItem,~<$con.theRecord[ID]>~),OK );
				}
				else
				{
					if ( MessageBox( Translate(OrderDlvrblMessages,CantDeleteItemCont,~<$con.theRecord[ID]>~),YESNO ) != YES)
					{	break;	}
				}
			}
			else   // <result> == FALSE - database command failure - already reported
			{
				break;
			}
		}
		else
		{
			theStatus = Translate(OrderDlvrblMessages,ItemsDeleted);
			theStatus =~<theStatus> <$Date.Date>~;
			OrderDlvrblDataView( SetCellValue, theRecord(GetRow), ~Status~,~<theStatus>~ );
		}
		++num;
	}

	RecordsSelected( NotifyAffectedDocuments,OrderID );

	return TRUE;
}


//** "Create Yearbook Output"
NUMERIC GenYearbook()
{
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRows ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	IDList = ~~;

	while ( SelectedRows( GetNext,theRow ) )
	{
		theID = ~<$con.theRow[OrderID]>~;
		IDList = ~<IDList>~ == ~~ ? ~<theID>~ : ~<IDList>,<theID>~;
	}

	action = ACTION DOC ( YbOutputWin OpenOnce YbOutputWin "InitWithOrder(~<IDList>~);" );
	return PerformActions( action );
}


//** "Column Info"
NUMERIC SeeChoicesInfo()
{
	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	theQuery = ~Select * from OrderDlvrblChoices Order By Name~;
	Actions = ACTION Doc ( ~OrderDlvrbChoice~ <OpenMethod> OrderDlvrblChoicesDoc "Init(~~,~<theQuery>~ );" );
	PerformActions( Actions );

	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseOrderDlvrblDataView()~ ); }

	return TRUE;
}


Include: ~ChgFldDlg~;
NUMERIC SeeChangeField()
{
	return DisplayChangeFieldDlg(OrderDlvrblDataView);
}


NUMERIC GetSelectedOrdersList(&IDList)
{
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRows ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	IDList = ~~;

	while ( SelectedRows( GetNext,theRow ) )
	{
		theID = ~<$con.theRow[OrderID]>~;
		IDList = ~<IDList>~ == ~~ ? ~'<theID>'~ : ~<IDList>,'<theID>'~;
	}

	return TRUE;
}


NUMERIC RunSelectedItems()
{
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRecords ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	if ( !SelectedRecords( GetFirst,theRecord ) )
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	if ( !MessageBox( Translate(OrderDlvrblMessages,RunJobsFor,~<$con.theRecord[OrderID]>~,~<$con.theRecord[Choice]>~),YESNO ) == YES )
	{
		return FALSE;
	}

	if (~<$con.theRecord[Choice]>~ == Translate(OrderDlvrblMessages,SubjectPackages))
	{
		theQuery = ~Select * From OrderItems Where OrderID = '<$con.theRecord[OrderID]>' AND Type = 'Subject Packages' Order By Sequence,Subsequence~;
	}
	else
	{
		if (ProductIsPackage(~<$con.theRecord[Choice]>~) )
		{
			theQuery = ~Select * From OrderItems Where OrderID = '<$con.theRecord[OrderID]>' AND Type = '<$con.theRecord[Name]>' AND TypeName = '<$con.theRecord[Choice]>' Order By Sequence,Subsequence~;
		}
		else
		{
			theQuery = ~Select * From OrderItems Where OrderID = '<$con.theRecord[OrderID]>' AND Type = '<$con.theRecord[Name]>' AND ProductID = '<$con.theRecord[Choice]>' Order By Sequence,Subsequence~;
		}
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	Count = List(NumEntries);
	if ( !MessageBox( Translate(OrderDlvrblMessages, CreateJobsFor,<Count>,~<$con.theRecord[Choice]>~),YESNO ) == YES )
	{
		return FALSE;
	}

	WaitCursor( Begin );

	if ( !Ado( dbLocal,ConnectLocal,BeginTransaction ) )
	{
		dbLocal( GetErrorDescription,theErr );
		WaitCursor( End );
		return Warning( Translate(DBMessages,ConnectionFailed,~ConnectLocal~,~<theErr>~) );
	}

	BatchID = UniquePrintBatchID();  Now = Time();

	if ( !ADO( dBase,Connect,GetValuesFor,~Select Owner,Priority From Orders Where ID = '<$con.theRecord[OrderID]>'~,Owner,Priority ) )
	{
		dBase( GetErrorDescription,theErr );
		WaitCursor( End );
		return Warning( Translate( DBMessages,ConnectionFailed,~<theErr>~ ) );
	}
	if ( IsNull(~<Owner>~) )	
	{ 
		Owner = ~<$App.UserName>~;
	}
	if ( IsNull(~<Priority>~) )	
	{ 
		Priority = 50;
	}

	QueueName = ~~;  PrinterName = ~~; PrintStatus = -1;

	Count = 0;
	while ( List( GetNext,OrderItem ) )
	{

		Fields = STR ( BatchID,OrderID,OrderItemID,Sequence,Priority,Owner,ProductID,Quantity,
						Status,Printable,JobPath,PreviewPath,SubmitDate,QueueName,PrinterName,PrintStatus,Subsequence );
		Values = STR ( '<BatchID>','<$pcon.OrderItem[OrderID]>',<$pcon.OrderItem[ID]>,
						<$pcon.OrderItem[Sequence]>,<Priority>,'<Owner>',
						'<$pcon.OrderItem[ProductID]>',<$pcon.OrderItem[Quantity]>,
						'<$pcon.OrderItem[Status]>',<$pcon.OrderItem[Printable].numeric>,
						'<$pcon.OrderItem[JobPath]>','<$pcon.OrderItem[PreviewPath]>','<Now>',
						'<QueueName>','<PrinterName>',<PrintStatus>,<$pcon.OrderItem[Subsequence].numeric> );
	
		Cmd = STR ( Insert Into OrderItemsToQueue(<Fields>) Values(<Values>) );

		if ( !dbLocal( CMD,~<Cmd>~ ) )
		{
			dbLocal( GetErrorDescription,theErr,RollBackTransaction );
			WaitCursor( End );
			return Warning( Translate(DBMessages,CmdFailed,~<Cmd>~,~<theErr>~) );
		}
		++Count;
	}

	if ( !dbLocal( CommitTransaction ) )
	{
		dbLocal( GetErrorDescription,theErr );
		WaitCursor( End );
		return Warning( Translate(DBMessages,CommitFailed,~<theErr>~) );
	}

	Queue( ~ProcessTheOrders()~ );

	theStatus =~<BatchID> <$Date.Date>~;
	OrderDlvrblDataView( SetCellValue, theRecord(GetRow), ~Status~,~<theStatus>~ );

	OrderDlvrblDataWindow( StatusBar,Text,Translate(OrderDlvrblMessages,StsItemsProcessed,<Count>) );

	WaitCursor( End );

	return TRUE;
}



NUMERIC ShowTestItem()
{

	return TRUE;
}


VOID ProcessTheOrders()
{
	if ( Defined( BackgroundOrderProcessor ) )
	{
		RemoteJobServer( BackgroundOrderProcessor,ProcessOrders,TRUE );
	}
}


NUMERIC SeeOrdersFor()
{
	if ( !GetSelectedOrdersList(IDList) )
		{ return FALSE; }

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
//		theQuery = ~Select * From Orders Where ID = '<$con.theRecord[OrderID]>' OR ImagesOrderID = '<$con.theRecord[OrderID]>' Order By ID~;
	theQuery = ~Select * From Orders Where ID In (<IDList>) Order By ID~;
	Actions = ACTION Doc ( ~Orders~ <OpenMethod> OrdersDoc "Init( ~<IDList>~,~<theQuery>~ );" );
	PerformActions( Actions );

	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseOrderDlvrblDataView()~ ); }


	return TRUE;
}




NUMERIC GetOrderRecord( theOrderID, &theImagesOrderID, &theShootDescID )
{
	Query = ~Select ImagesOrderID,ShootDescID From Orders Where ID = '<theOrderID>'~;

	Success = Ado( dBase,Connect,GetValuesFor,~<Query>~,theImagesOrderID, theShootDescID ) != FALSE;

	return <Success>;
}
 

NUMERIC ProductIsPackage(theProduct)
{
	IsPackage = FALSE;

	Query = ~Select Package From Products Where ID = '<theProduct>'~;
	Ado( dBase,Connect,GetValuesFor,~<Query>~,IsPackage );

	return (<IsPackage>);

}

NUMERIC ProductIsBook(theProduct)
{
	IsPackage = FALSE;

	Query = ~Select Package,Book From Products Where ID = '<theProduct>'~;
	Ado( dBase,Connect,GetValuesFor,~<Query>~,IsPackage,IsBook );

	return (Numeric(~<IsPackage>~) && Numeric(~<isBook>~));

}


//** [Items], "View Order Items (Data)"
NUMERIC SeeOrderItemsFor(AsImages)
{
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRecords ) )		
		{ return Invoke( ShowWarning,Translate(UIMessages,NoRowsSelected)  ); }
	
	if ( !SelectedRecords( GetFirst,theRecord ) )
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	// selected records are the records in the order deliverables table
	
	OrderId = ~<$con.theRecord[OrderID]>~;
	
	GetSubjectOrderIDInfoType( ~<OrderID>~, infoType, theSubjectsOrderID);

	
	doSQLList = 1;
	StringList(OrderIDList,New);
	
	Count =  GetOrderIDsForSubjectInfo(~<theSubjectsOrderID>~,~<InfoType>~,OrderIDList,<doSQLList>);
	
	if (!<Count>)
	{
		OrderIDList = ~''~;
	}
	Fields = ~OrderItems.*, Products.LayoutName From OrderItems  LEFT OUTER JOIN Products On OrderItems.ProductID = Products.ID~;

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	if (~<$con.theRecord[Choice]>~ == Translate(OrderDlvrblMessages,SubjectPackages))
	{
		Query = ~Select <Fields> Where OrderID In (<OrderIDList>) AND Type = 'Subject Packages' Order By OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
	}
	else
	{
		if (ProductIsPackage(~<$con.theRecord[Choice]>~) &&!ProductIsBook(~<$con.theRecord[Choice]>~) )
		{
			Query = ~Select <Fields> Where OrderID In (<OrderIDList>) AND Type = '<$con.theRecord[Name]>' AND TypeName = '<$con.theRecord[Choice]>' Order By OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
		}
		else if (ProductIsBook(~<$con.theRecord[Choice]>~) )
		{
			Query = ~Select <Fields> Where OrderID In (<OrderIDList>) AND Type = '<$con.theRecord[Name]>' AND PackageID = '<$con.theRecord[Choice]>' Order By OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
		}
		else
		{
			Query = ~Select <Fields> Where OrderID In (<OrderIDList>) AND Type = '<$con.theRecord[Name]>' AND ProductID = '<$con.theRecord[Choice]>' Order By OrderID,OrderItems.Sequence,OrderItems.Subsequence~;
		}
	}
	Actions = ACTION Doc ( ~Images~ <OpenMethod> OrderItemsDoc "Init2( ~<$con.theRecord[OrderID]>~,~<$con.theRecord[Name]>:<$con.theRecord[Choice]>~,~<Query>~,<AsImages>,TRUE,TRUE );" );
	PerformActions( Actions );

	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseOrderDlvrblDataView()~ ); }

	return TRUE;
}

//** "View Job Queue Data"
NUMERIC SeeJobQueueFor()
{
// ** FINISH THIS FUNCTION
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRecords ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	if ( !SelectedRecords( GetFirst,theRecord ) )
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	theOrderID = ~<$con.theRecord[OrderID]>~;
	theProductID = ~<$con.theRecord[Choice]>~;
	theName = ~<$con.theRecord[Name]>~;

	if (~<theProductID>~ == Translate(OrderDlvrblMessages,SubjectPackages))
	{
		Query = ~Select ID,OrderID From OrderItems Where OrderID = '<theOrderID>' AND Type = 'Subject Packages'~;
	}
	else
	{
		if (ProductIsPackage(~<theProductID>~) )
		{
			Query = ~Select ID,OrderID From OrderItems Where OrderID = '<theOrderID>' AND Type = '<theName>' AND TypeName ='<theProductID>'~;
		}
		else
		{
			Query = ~Select ID,OrderID From OrderItems Where OrderID = '<theOrderID>' AND Type = '<theName>' AND ProductID ='<theProductID>'~;
		}
	}
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	count = List(NumEntries);
	if ( <count> > 0 )
	{
		List(MakeSQLList, ItemIdList, FALSE, ID);

		OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
				// Don't add "Order By" clause.  Added in Init() of JobQueueDoc
		Query = ~Select * From JobQueue Where OrderID = '<theOrderID>' AND OrderItemID in (<ItemIdList>)~;
		Actions = ACTION Doc ( ~JobQueue~ <OpenMethod> JobQueueDoc "Init( ~<theOrderID>: <theName>: <theProductID>~,~<Query>~ );" );
		PerformActions( Actions );

		if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseOrderDlvrblDataView()~ ); }
	}

	else
	{
		return Warning( Translate(OrderDlvrblMessages,NoOrderItems) );
	}

	return TRUE;

}


//** View SubjectInfo  - 1st selected record only
// Init() in SubjectInfoDoc determines InfoType - type of SubjectInfo
NUMERIC SeeSubjectInfoFor()
{
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRecords ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	if ( !SelectedRecords( GetFirst,theRecord ) )
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	// Determine SubjectInfo's OrderID
	if (!GetSubjectOrderIDInfoType( ~<$con.theRecord[OrderID]>~, theInfoType, theOrderId))
	{	return FALSE;	}

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Query = ~Select * From SubjectInfo Where OrderID = '<theOrderId>' Order By SubjectID~;
	Actions = ACTION Doc ( ~SubjectInfo~ <OpenMethod> SubjectInfoDoc "Init2( ~<theOrderId>~,~<theInfoType>~,~<Query>~ );" );
	PerformActions( Actions );

	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseOrderDlvrblDataView()~ ); }

	return TRUE;
}


VOID OnKeydown()
{
	GenCon( View,GetActiveView );

	Key = View( GetLastKeyStateless,KeyString );
	
	if (  !View( PerformMenuAction,OrderDlvrblListViewMenu,~<KeyString>~ ) )
	{
		OrderDlvrblDataView( DisplayMenu,OrderDlvrblListViewMenu,0,0  );
	}
}


//** ChangeRecord Action, (and result of Save)
// Following 3 routines are all only used as result of changing the record
//     ChangeRecord(), AddNew(), UpdateExisting()
NUMERIC ChangeRecord()
{
	if ( !OrderDlvrblDataView( GetChangedRow,ChangedOrderDlvrbl,OrigOrderDlvrbl,ChangedRow,IsNewRow ) )
		{ return Warning(  Translate(UIMessages,NoRowsSelected) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$con.ChangedOrderDlvrbl[OrderID]>~ == ~~ )
		{ return Warning( Translate(OrderDlvrblMessages,BlankID) ); }

	if ( ~<$con.ChangedOrderDlvrbl[Choice]>~ == ~~ )
		{ return Warning( Translate(OrderDlvrblMessages,BlankChoice) ); }

	Key = STR ( OrderID = '<$con.OrigOrderDlvrbl[OrderID]>' AND Choice = '<$con.OrigOrderDlvrbl[Choice]>');
	Query = ~Select * From OrderDlvrbl Where <Key>~;

	w = ~<$con.ChangedOrderDlvrbl[MergeWithSubjectPackages].numeric>~;
	if ( !SimilarStr(~<$con.ChangedOrderDlvrbl[Name]>~,~DP2 Products~) && <w>)
	{
		MessageBox(~Merge Order Items With Subject Packages is only supported for rows where Name = 'DP2 Products'.~,OK);
		return FALSE;

	}
	if ( <IsNewRow> )
	{
		if (!AddNew( ChangedOrderDlvrbl,OrigOrderDlvrbl,Query,Key ))
			{ return FALSE; }
	}
	else
	{
		if (!UpdateExisting( ChangedOrderDlvrbl,OrigOrderDlvrbl,Query,Key ))
			{ return FALSE; }
	}

	return TRUE;
}


NUMERIC AddNew( &ChangedOrderDlvrbl,&OrigOrderDlvrbl,&Query,&Key )
{
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( UpdateFrom,ChangedOrderDlvrbl,~<Key>~,TRUE ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
	}

	OrderDlvrblDataView( CommitChanges );

	return TRUE;
}


// If the OrderDlvrbl ID hasn't changed, we only need to do an update of the fields
// that have changed in the OrderDlvrbl table.

NUMERIC UpdateExisting( &ChangedOrderDlvrbl,&OrigOrderDlvrbl,&Query,&Key )
{
	if ( ~<$con.OrigOrderDlvrbl[OrderID]>~ == ~<$con.ChangedOrderDlvrbl[OrderID]>~ )
	{
		if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
		}

		if ( !List( UpdateFrom,ChangedOrderDlvrbl,~<Key>~,FALSE ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate );
			return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
		}
	}

	OrderDlvrblDataView( CommitChanges );

	return TRUE;
}


//** Close Action
NUMERIC OnCloseOrderDlvrblDataView()
{
	// don't let them close if operation still going on
	if ( aThread( IsActive ) )
	{
		// didn't need to re-enable handling actions for window
		Invoke( ShowWarning,Translate( OrderDlvrblMessages,CannotCloseMsg ) );
		return TRUE;	
	}						

	if ( OrderDlvrblDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	OrderDlvrblDataWindow( ForceCloseWindow );

	return TRUE;
}


//** RightClick Action
NUMERIC RightClickInListView()
{
	return OrderDlvrblDataView( DisplayMenu,OrderDlvrblListViewMenu );
}


NUMERIC GetSortBy( theSortName, &theSortBy, &theRestriction )
{
	theQuery = ~Select Sort,Restriction From Sorts Where Name = '<theSortName>'~;
	Success = Ado( dBase,Connect,GetValuesFor,~<theQuery>~,theSortBy,theRestriction ) != FALSE;

	return <Success>;
}
 
Include: ~CreatePackages.txt~;

// Create the OrderItems as indicated in the SubjectInfo table.
// theOrderID is the order of the selected deliverable
// must add the order id to be written to
NUMERIC CreateSubjectInfoOrderItems(theOrderId,PageGroupName,SortName,WhichImage,OutputOrderID,JobPopulationScript)		// RUNS ON A THREAD
{
	Invoke( ShowProgress,Translate(OrderDlvrblMessages,GettingRecords,~<theOrderId>\SubjectPackages~) );

	GetImagesOrderID(~<theOrderID>~,theImagesOrderID);
	GetSubjectOrderIDInfoType( ~<theOrderID>~, infoType, theSubjectsOrderID);
	doSQLList = 0;
	StringList(OrderIDList,New);
	StringList(OrderIDList2,New);
	OrderIDCount =  GetOrderIDsForSubjectInfo(~<theSubjectsOrderID>~,~<InfoType>~,OrderIDList,<doSQLList>);
	if (Defined(SelectedOrderList))
	{	
		while ( OrderIDList(GetNext,OrderString))
		{
			if (SelectedOrderList(IsIn,~<OrderString>~))
			{
				OrderIDList2(AddString,~<OrderString>~);
			}
		}
	}
	else
	{
		OrderIDList2(AddString,~<theOrderId>~);
	}

	OrderIDList2(MakeSQLList,OrderIDSQLList,TRUE);
	TableName = ~SubjectInfo<infoType>~;

	ProcessingOrderDeliverables = TRUE;
	Global(ProcessingOrderDeliverables);
	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate( DBMessages,ConnectionFailed,~<theErr>~ ) );
		return FALSE;
	}

	if (~<SortName>~ == Translate(OrderDlvrblMessages,RollFrame))
	{
		SelectClause = ~<TableName>.*~;
		FromClause = ~SubjectInfo<infoType>, Images~;
		WhereClause = ~Images.OrderID = '<theImagesOrderID>' AND SubjectInfo<infoType>.OrderID = '<theSubjectsOrderID>' AND Images.SubjectID = SubjectInfo<infoType>.SubjectID And Images.Rejected <> 1~;
		OrderByClause = ~Images.Roll,Images.Frame~;
		theQuery = ~SELECT <TableName>.* FROM SubjectInfo<infoType>, Images WHERE Images.OrderID = '<theImagesOrderID>' AND SubjectInfo<infoType>.OrderID = '<theSubjectsOrderID>' AND Images.SubjectID = SubjectInfo<infoType>.SubjectID And Images.Rejected <> 1 Order by Images.Roll,Images.Frame~;
	}
	else if (~<SortName>~ == ~~)
	{
		SelectClause = ~*~;
		FromClause = ~SubjectInfo<infoType>~;
		WhereClause = ~OrderID = '<theSubjectsOrderID>'~;
		OrderByClause = ~SubjectID~;
		theQuery = ~SELECT * FROM SubjectInfo<infoType> WHERE OrderID = '<theSubjectsOrderID>' Order by SubjectID~;
	}
	else
	{
		if (!GetSortBy(~<SortName>~, theSortby, theRestriction))
		{	return Warning( Translate(OrderDlvrblMessages,NoSortRecord,~<SortName>~) );	}
		if (~<theRestriction>~ != ~~)
		{	theRestriction = ~And <theRestriction>~;	}
		if (!IsNull(~<OrderIDSQLList>~))
		{
			SelectClause = ~*~;
			FromClause = ~<TableName>,Images~;
			WhereClause = ~<TableName>.OrderID = '<theSubjectsOrderID>' AND Images.OrderId In (<OrderIDSQLList>) and <TableName>.SubjectId = Images.SubjectId And Images.Rejected <> 1 <theRestriction>~;
			OrderByClause = ~<theSortby>~;
			theQuery = ~Select * from <TableName>,Images where <TableName>.OrderID = '<theSubjectsOrderID>' 
			AND Images.OrderId In (<OrderIDSQLList>) and <TableName>.SubjectId = Images.SubjectId 
			And Images.Rejected <> 1 <theRestriction> Order by <theSortby>~;
		}
		else
		{
			SelectClause = ~*~;
			FromClause = ~<TableName>~;
			WhereClause = ~OrderID = '<theSubjectsOrderID>' <theRestriction>~;
			OrderByClause = ~<theSortby>~;
			theQuery = ~Select * from <TableName> where OrderID = '<theSubjectsOrderID>' <theRestriction> Order by <theSortby>~;
		}
	}
	
	NewQuery = ~~;
	HavingClause = ~~;
	ProductID = ~~;
	
	if ( OICustomQuery(dbase,NewQuery,~<ProductID>~,~<JobPopulationScript>~,~<SelectClause>~,~<FromClause>~,~<WhereClause>~,~<OrderByClause>~,~<HavingClause>~, ~<InfoType>~))
	{
		Query = ~<NewQuery>~;
	}
	
	// the above query will always get all images with the same subject ID,
	// even if user chose use first
		
	if ( !PGenConList( List,Connection,dBase,Cursor,Static,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		Invoke( ShowWarning,Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
		return FALSE;
	}
	
	List(SetConnection,~~);
	
	if (!OIExamineRecordSet(List,~<ProductID>~,~<JobPopulationScript>~))
	{
    	Invoke( ShowWarning,~Filtering of recordset failed.  There is more information in the session log.~);
		return false;
	}
	Count = List(NumEntries);

	Log( Session,~OrderDlvrbls Create SubjectPackages - Order:<theOrderID>  Sortedby:<SortName>  Processing <Count> SubjectInfo Records~ );

	Invoke( UpdateStopDlgMsg,Translate(OrderDlvrblMessages, CreatingSubectPackagesFor,<Count>));
	// theOrderID is the OrderID the images will be written to
	// OrderIDSQLList contains the list of orders the images are on
		
	retValue = CreateItemsForSubjectList(dBase,~<OutputOrderID>~,List,~<TableName>~,RecordCount,Stop,~<WhichImage>~,~<OrderIDSQLList>~,~<JobPopulationScript>~);
	
	if ( <retValue>)
	{	retValue = <Count>;	}

	return <retValue>;

}

// returns true if no error occurred modifying the recordset.
// returns false if error occurred in modifying the recordset
NUMERIC OIExamineRecordSet(&List,ProductID,JobPopulationScript)
{
	result = true;
	if (!IsNull(~<JobPopulationScript>~))
	{
		FuncNoExtension = FunctionDefined(~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_R1~) ? ~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_R1~ : ~<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics>_R1~; 
		if (FunctionDefined(~<FuncNoExtension>~))
		{
			// Call the _R1 entry point to remove duplicate orderID/SubjectID records
			result = <FuncNoExtension>(~<ProductID>~,List);
			return (<result>) ;	
		}
	}
	return <result>;
}

if (RunningVersion(15))
{
NUMERIC OIExit(&List,ProductID,JobPopulationScript)
{
	result = true;
	if (!IsNull(~<JobPopulationScript>~))
	{
		FuncNoExtension = FunctionDefined(~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_E1~) ? ~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_E1~ : ~<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics>_E1~; 
		if (FunctionDefined(~<FuncNoExtension>~))
		{
			// Call the _E1 entry point at the conclusion of processing
			result = <FuncNoExtension>(~<ProductID>~,List);
			return (<result>) ;	
		}
	}
	return <result>;
}
}

NUMERIC OICustomQuery(&dbase,&NewQuery,ProductID,JobPopulationScript,SelectClause,FromClause,WhereClause,OrderByClause,HavingClause,InfoType)
{
	if (!IsNull(~<JobPopulationScript>~))
	{
		FuncNoExtension = FunctionDefined(~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_Q1~) ? ~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_Q1~ : ~<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics>_Q1~; 
		if (FunctionDefined(~<FuncNoExtension>~))
		{
			// Call the _Q1 entry point to modify the query
			result = <FuncNoExtension>(dbase,NewQuery,~<ProductID>~,~<SelectClause>~,~<FromClause>~,~<WhereClause>~,~<OrderByClause>~,~<HavingClause>~,~<InfoType>~);
			return <result>;
		}
	}

	return FALSE;
}



// theOrderID is the order of the selected deliverable
// Returns # images processed
NUMERIC CreateProductsOrderItems(theOrderId,theProductId,PageGroupName,SortName,ItemType,WhichImage,OutputOrderID,JobPopulationScript)  // RUNS ON A THREAD
{
	Invoke( ShowProgress,Translate(OrderDlvrblMessages, GettingRecords,~<theOrderId>\<theProductId>~) );
	
	GetSubjectOrderIDInfoType( ~<theOrderId>~, infoType, theSubjectsOrderID);
	GetImagesOrderID(~<theOrderID>~,theImagesOrderID);
	
	// If there are multiple orders on a shoot, the order id in the subject info record is the shoot description id	
	

	doSQLList = 0;
	StringList(OrderIDList,New);
	StringList(OrderIDList2,New);
	StringList(OrderIDSQLList,New);
	OrderIDCount =  GetOrderIDsForSubjectInfo(~<theSubjectsOrderID>~,~<InfoType>~,OrderIDList,<doSQLList>);
	
	if (Defined(SelectedOrderList))
	{	
		while ( OrderIDList(GetNext,OrderString))
		{
			if (SelectedOrderList(IsIn,~<OrderString>~))
			{
				OrderIDList2(AddString,~<OrderString>~);
			}
		}
	}
	else
	{
		OrderIDList2(AddString,~<theOrderId>~);
	}
	
	Count = OrderIDList2(NumEntries);
	OrderIDList2(MakeSQLList,OrderIDSQLList,TRUE);

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate( ~Could not connect to the database. <theErr>~ ) );
		return FALSE;
	}

	if (IsNull(~<WhichImage>~))
	{
		WhichImage = GetSystemMultipleImageChoice();
	}

	ProcessingOrderDeliverables = TRUE;
	Global(ProcessingOrderDeliverables);
	theRestriction = ~~;
	sortRestriction = ~~;
	if (~<PageGroupName>~ != ~~)
	{
		if (!GetSortBy(~<PageGroupName>~, theGroupby, theRestriction))
		{	Invoke( ShowWarning,Translate(OrderDlvrblMessages,NoSortRecord,~<PageGroupName>~) );
			return FALSE;
		}

		//  Generates Globals:  GrpCmdList and GroupsList
//		retVal = GenerateGroups(~<theSubjectsOrderID>~,~<infoType>~,~<PageGroupName>~,CmdCount,theHdrString,TabStops);
		if (~<SortName>~ == Translate(OrderDlvrblMessages,RollFrame))
		{
			theSortby = ~Images.Roll,Images.Frame,<theGroupBy>~;
		}
		else if (~<SortName>~ != ~~)
		{
			if (!GetSortBy(~<SortName>~, theSortby, sortRestriction))
			{	Invoke( ShowWarning,Translate(OrderDlvrblMessages,NoSortRecord,~<SortName>~) );
				return FALSE;
			}
			theSortby = ~<theSortBy>,<theGroupBy>~;
		}
		else
		{
			theSortby = ~<theGroupBy>,SubjectInfo<infoType>.SubjectID~;
		}

		tmp = ~<theSortby>~;
		theSortby = RemoveDuplicateColumns( ~<tmp>~ );
		
		theSortBy = RemoveCommasFromCaseStatement(~<theSortby>~);

		Invoke( UpdateStopDlgMsg,Translate(OrderDlvrblMessages, CreatingPagedItemsFor,~<theProductId>~));

		if ( !SimilarStr( ~<sortRestriction>~,~~ ) && !SimilarStr( ~<theRestriction>~,~~ ) )
		{
			theRestriction = ~AND <sortRestriction> AND <theRestriction>~;
		}
		else if ( !SimilarStr( ~<sortRestriction>~,~~ ) )
		{
			theRestriction = ~AND <sortRestriction>~;
		}
		else if ( !SimilarStr( ~<theRestriction>~,~~ ) )
		{
			theRestriction = ~AND <theRestriction>~;
		}
		
		Log( Session,~OrderDlvrbls w/ Page Break - Order(s):<OrderIDSQLList>  Product:<theProductId>  PageBreak:<PageGroupName>  Sortedby:<SortName>  Processing <CmdCount> Groups~ );

		OrderByClause = ~<theSortBy>,Images.SubjectId,Images.OrderId,Images.roll,Images.frame~;
		WhereClause	  = ~SubjectInfo<infoType>.OrderID = '<theSubjectsOrderID>' AND Images.OrderID In (<OrderIDSQLList>) AND SubjectInfo<infoType>.SubjectID = Images.SubjectID AND Images.Rejected <> 1 <theRestriction>~;
		FromClause	= ~SubjectInfo<infoType>, Images~;
		SelectClause = ~*~;

		Query = ~SELECT * FROM SubjectInfo<infoType>, Images WHERE <WhereClause> Order By <OrderByClause>~;
		NewQuery = ~~;
		HavingClause = ~~;
		
		if ( OICustomQuery(dbase,NewQuery,~<theProductID>~,~<JobPopulationScript>~,~<SelectClause>~,~<FromClause>~,~<WhereClause>~,~<OrderByClause>~,~<HavingClause>~,~<InfoType>~))
		{
			Query = ~<NewQuery>~;
		}

		if ( !PGenConList( List,Connection,dBase,Cursor,Static,QUERY,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			Invoke( ShowWarning,Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
			return FALSE;
		}
		
		List( SetConnection,~~ );	// DISCONNECT LIST FROM THE DATABASE

	    HandleMultiImagesJoin(dbase,<WhichImage>,List);
	    
	    if (!OIExamineRecordSet(List,~<theProductID>~,~<JobPopulationScript>~))
	    {
    		Invoke( ShowWarning,~Filtering of recordset failed.  There is more information in the session log.~);
			return false;
		}

		Count = List(NumEntries);

		if ( <Count> == 0 )
		{
			return <Count>;
		}
		numTokens = BuildFieldList( ~<theGroupBy>~ );
		TotalCount = 0;
		pageCount  = 0;

		if (<numTokens> > 0)
		{
			more = TRUE;
			while ( <more> )
			{
				count = BuildPageList( List,<numTokens>,more );
				if ( <count> > 0 )
				{
					CreateOrderItemsForList( dBase,PageList,~<OutputOrderID>~,~<theProductId>~,~<ItemType>~,~<JobPopulationScript>~);
					ForgetGlobal( PageList );
					<++pageCount>;
					Log( Session,~    Page Break <pageCount> with <count> images - Cmd for <Query>~ );
				}
				TotalCount = <TotalCount> + <count>;
			}
		}


	    if (!OIExit(List,~<theProductID>~,~<JobPopulationScript>~))
	    {
    		Invoke( ShowWarning,~Exit processing failed.  There is more information in the session log.~);
			return false;
		}

		CleanUpFieldList( <numTokens> );
		DoStatusBarText( ~Added Items to Order <theOrderId> with <theProductId>~ );
	
		return <TotalCount>;
	}


	// Otherwise PageGroupName == ~~
	if (~<SortName>~ == Translate(OrderDlvrblMessages,RollFrame))
	{
		SelectClause = ~*~;
		FromClause = ~Images~;
		WhereClause = ~OrderID In (<OrderIDSQLList>)~;
		OrderByClause = ~Roll,Frame~;
		Query = ~SELECT * FROM Images WHERE OrderID In (<OrderIDSQLList>) Order by Roll,Frame~;
	}
	else if (~<SortName>~ == ~~)
	{
		SelectClause = ~*~;
		FromClause = ~Images~;
		WhereClause = ~OrderID In (<OrderIDSQLList>)~;
		OrderByClause = ~~;
		Query = ~SELECT * FROM Images WHERE OrderID In (<OrderIDSQLList>)~;
	}

	else
	{
		if (!GetSortBy(~<SortName>~, theSortby, theRestriction))
		{	Invoke( ShowWarning,Translate(OrderDlvrblMessages,NoSortRecord,~<SortName>~) );
			return FALSE;
		}
		if (~<theRestriction>~ != ~~)
		{	theRestriction = ~And <theRestriction>~;	}

		SelectClause = ~Images.*~;
		FromClause = ~SubjectInfo<infoType>, Images~;
		WhereClause = ~Images.OrderID In (<OrderIDSQLList>) AND SubjectInfo<infoType>.OrderID = '<theSubjectsOrderID>' AND Images.SubjectID = SubjectInfo<infoType>.SubjectID And Images.Rejected <> 1 <theRestriction>~;
		OrderByClause = ~<theSortby>, Images.SubjectId,Images.OrderId,Images.roll,Images.frame~;
		Query = ~SELECT Images.* FROM SubjectInfo<infoType>, Images WHERE Images.OrderID In (<OrderIDSQLList>) AND SubjectInfo<infoType>.OrderID = '<theSubjectsOrderID>' AND Images.SubjectID = SubjectInfo<infoType>.SubjectID And Images.Rejected <> 1 <theRestriction> Order by <theSortby>, Images.SubjectId,Images.OrderId,Images.roll,Images.frame~;
	}
	
	NewQuery = ~~;
	HavingClause = ~~;
	
	if ( OICustomQuery(dbase,NewQuery,~<theProductID>~,~<JobPopulationScript>~,~<SelectClause>~,~<FromClause>~,~<WhereClause>~,~<OrderByClause>~,~<HavingClause>~,~<InfoType>~))
	{
		Query = ~<NewQuery>~;
	}

	if ( !PGenConList( List,Connection,dBase,Cursor,Static,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		Invoke( ShowWarning,Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
		return FALSE;
	}

	List( SetConnection,~~ );	// DISCONNECT LIST FROM THE DATABASE
	
    HandleMultiImages(dbase,<WhichImage>,List);
    
    if (!OIExamineRecordSet(List,~<theProductID>~,~<JobPopulationScript>~))
    {
    	Invoke( ShowWarning,~Filtering of recordset failed.  There is more information in the session log.~);
		return false;
	}

	Count = List(NumEntries);
	Log( Session,~OrderDlvrbls - Order(s):<OrderIDSQLList>  Product:<theProductId>  PageBreak:<PageGroupName>  Sortedby:<SortName>  Processing <Count> Images~ );
	if (<Count> > 0)
	{
		Invoke( UpdateStopDlgMsg,Translate(OrderDlvrblMessages,CreatingItemsFor,~<theProductId>~,<Count>));
		CreateOrderItemsForList( dBase,List,~<OutputOrderId>~,~<theProductId>~,~<ItemType>~,~<JobPopulationScript>~);
	}
	else
	{
		Invoke( ShowWarning, Translate(OrderDlvrblMessages,NoImageRecords));
	}


    if (!OIExit(List,~<theProductID>~,~<JobPopulationScript>~))
    {
		Invoke( ShowWarning,~Exit processing failed.  There is more information in the session log.~);
		return false;
	}

	return <Count>;
}

// the OrderID is the order that the items will be written to
NUMERIC CreateOrderItemsForList( &dBase,&List,theOrderId,theProductId,ItemType,JobPopulationScript)  // RUNS ON A THREAD
{
	GenCon( SelectedImages,NewFrom,DDPath );
	Index = 0;
	more = List(GetFirst, ImagesRecord );

	while ( <more> )
	{
		Path = ~<$pcon.ImagesRecord[Path]>~;
		GenCon( SelectedImage<Index>,NewFrom,DDPath );
		SelectedImage<Index>( Set,Path,~<Path>~ );
		SelectedImages( InsertBack,SelectedImage<Index> );
		++Index;
		more = List(GetNext, ImagesRecord );
	}
	
	Qty = 1;
    if (!IsNull(~<JobPopulationScript>~))
	{
		FuncNoExtension = FunctionDefined(~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_ModList~) ? ~R<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics.InstanceString>_ModList~ : ~<$Str.$JobPopulationScript.WithoutExt.StripLeadingNumerics>_ModList~; 
		if (FunctionDefined(~<FuncNoExtension>~))
		{
			// Call the _ModList (post query) entry point, possibly to sort, remove or resequence items in the list
			<FuncNoExtension>(dbase,~<theProductID>~,SelectedImages);
		}
	}
	CreateOrderItems( dBase,SelectedImages,~<theProductId>~,~<theOrderId>~,~<Qty>~,~<ItemType>~,Stop,~~,~~,~~,~<JobPopulationScript>~ );
	
	return TRUE;
}


VOID GenerationStarted(  )
{
	Stop = FALSE;

	OrderDlvrblDataWindow( SetWindowTitle,~<MainTitle> -  ** Window Inactive **~ );
	OrderDlvrblDataWindow( EnableWindow,FALSE );

	DisplayStopDlg();

}

VOID GenerationComplete( Count )
{
	Stop = FALSE;

	OrderDlvrblDataWindow( SetWindowTitle,~<MainTitle>~ );
	OrderDlvrblDataWindow( EnableWindow,TRUE );

	DlvrblStopDlg( end );
	ForgetGlobal(DlvrblStopDlg);
//	Invoke( CloseStopDlg );
}

VOID CloseStopDlg()
{
	DlvrblStopDlg( end );
}



VOID UpdateRecordStatus( theRow,theStatus)
{
	OrderDlvrblDataView( SetCellValue, <theRow>, ~Status~,~<theStatus>~ );
	SaveAllChanges();
}


NUMERIC ShowWarning( Msg )
{
	return Warning( ~<Msg>~ );
}

NUMERIC ShowMessageBox( Msg )
{
	if ( MessageBox( ~<Msg>~,YESNO ) != YES )
	{	doit = FALSE;	}
	else
	{	doit = TRUE;	}

	return <doit>;
}

NUMERIC ShowProgress( Msg )
{
	OrderDlvrblDataWindow( StatusBar,Text,~<Msg>~ );
	return TRUE;
}

// [Create Items]
NUMERIC DisplayOrderIDsForCreate()
{
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRecords ) )		
		{ return Invoke( ShowWarning,Translate(UIMessages,NoRowsSelected)  ); }
	
	// selected records are the records in the order deliverables table
	if ( SelectedRecords( GetNext,theRecord ) )
	{
		OrderId = ~<$con.theRecord[OrderID]>~;
	}
	GetSubjectOrderIDInfoType( ~<OrderID>~, infoType, theSubjectsOrderID);

	
	doSQLList = 0;
	StringList(OrderIDList,New);
	
	Count =  GetOrderIDsForSubjectInfo(~<theSubjectsOrderID>~,~<InfoType>~,OrderIDList,<doSQLList>);

	if (<Count> == 1)
	{
		CreateFor(~<OrderID>~);
	}
	else
	{
		PopulateOrderListBox(OrderIDList);
		//PopulateJobPopListBox();
	
	}
	
	return TRUE;

}


//** [Create]
// theOrderID is the output order id
NUMERIC CreateFor(theOrderID)
{
	// Make sure any pending changes are saved before proceeding

	if ( OrderDlvrblDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			ReturnOnFailure( SaveAllChanges() );
		}
		else
		{
			RollBackAllChanges();
		}
	}

	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRecords ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	Count = SelectedRecords( ChildCount );
	
	Merge_NotSupported = 0;
	more = SelectedRecords( GetFirst,theRecord );
	while (<more>)
	{
		w = ~<$con.theRecord[MergeWithSubjectPackages].numeric>~;
		if (<w> && !SimilarStr(~<$con.theRecord[Name]>~, ~DP2 Products~))
		{
			Merge_NotSupported = <Merge_NotSupported> + 1;
		}
		more = SelectedRecords( GetNext,theRecord );
	}
	if (<Merge_NotSupported> > 0)
	{
		Log(Session,~Merge With Subject Packages is only supported for rows where Name = 'DP2 Products'.  <Merge_NotSupported> Record(s) will not be merged.~);
	}


	GenerationStarted();

	aThread( New,CreateForThread ,~<theOrderID>~ );

	return TRUE;
}


Stop = FALSE;

//Thread( aThread,Debug );	// ADD THE PARAMETER DEBUG TO RUN AS A SUBROUTINE RATHER THAN A THREAD FOR SOURCE DEBUGGING
Thread( aThread);


// OutputOrderID is the user selected order the order items will be created on
NUMERIC CreateForThread(OutputOrderID)
{
	if ( !OrderDlvrblDataView( GetSelectedRows,SelectedRecords ) )		
		{ return Invoke( ShowWarning,Translate(UIMessages,NoRowsSelected)  ); }

	Invoke( UpdateStopDlgMsg,~I'm Updating~);
	
	Merge = FALSE;
	SubjectPackagesSelected = FALSE;
	Merge_NotSupported = 0;
	more = SelectedRecords( GetFirst,theRecord );
	while (<more>)
	{
		w = ~<$con.theRecord[MergeWithSubjectPackages].numeric>~;
		if (<w> && SimilarStr(~<$con.theRecord[Name]>~, ~DP2 Products~))
		{
			Merge = TRUE;
		}
		if (SimilarStr(~<$con.theRecord[Name]>~, ~Subject Packages~))
		{
			SubjectPackagesSelected = TRUE;
		}
		more = SelectedRecords( GetNext,theRecord );
	}
	
	
	if (<Merge> && <SubjectPackagesSelected>)
	{
		more = SelectedRecords( GetFirst,theRecord );
		While ( <more> && !<Stop> )
		{
			if (SimilarStr(~<$con.theRecord[Name]>~, ~Subject Packages~))
			{
				DoDeliverable(~<OutputOrderID>~,theRecord);
			}
			more = SelectedRecords( GetNext,theRecord );
		}  
			
	}

	// selected records are the records in the order deliverables table
	more = SelectedRecords( GetFirst,theRecord );
	While ( <more> && !<Stop> )
	{
		if (!<Merge> || !<SubjectPackagesSelected> || !SimilarStr(~<$con.theRecord[Name]>~, ~Subject Packages~))
		{
			DoDeliverable(~<OutputOrderID>~,theRecord);
		}
		more = SelectedRecords( GetNext,theRecord );
	}  // While more records

	if (<Stop>)
	{
		Log( Session,~OrderDlvrbls Create Stopped~ );
//		Invoke( ShowProgress, ~Creating Order Items Stopped~);
	}

	Invoke( GenerationComplete );	// Don't close the stop dialog from the thread

	return TRUE;
}

NUMERIC DoDeliverable(OutputOrderID,&theRecord)
{
	// selected records are the records in the order deliverables table
	
	theOrderId = ~<$con.theRecord[OrderID]>~;
	theProductId = ~<$con.theRecord[Choice]>~;
	PageGroupName = ~<$con.theRecord[Groupby]>~;
	SortName = ~<$con.theRecord[Sortby]>~;
	MultiImages = ~<$con.theRecord[MultiImages]>~;
	JobPopulationScript = ~<$con.theRecord[JobPopulationScript]>~;
	// strip off any numerics from the front end.
	CreateOrderDlvrblWithPackages = 0;
	Global(CreateOrderDlvrblWithPackages);	
	
	if (~<theProductId>~ == Translate(OrderDlvrblMessages,SubjectPackages))
	{			
		retCount = CreateSubjectInfoOrderItems(~<theOrderId>~,~<PageGroupName>~,~<SortName>~,~~, ~<OutputOrderID>~,~<JobPopulationScript>~);
	}

	else
	{	
		Name = ~<$con.theRecord[Name]>~;
		if (SimilarStr(~<Name>~,~DP2 Products~))
		{
			CreateOrderDlvrblWithPackages = ~<$con.theRecord[MergeWithSubjectPackages].numeric>~;
		}			
		retCount = CreateProductsOrderItems(~<theOrderId>~,~<theProductId>~,~<PageGroupName>~,~<SortName>~,~<$con.theRecord[Name]>~,~<MultiImages>~,~<OutputOrderID>~,~<JobPopulationScript>~);
	}

	if (<retCount> > 0)
	{
		if ( !<Stop> )
		{	theStatus = Translate(OrderDlvrblMessages,ItemsCreated);	}
		else
		{	theStatus = Translate(OrderDlvrblMessages,PartialItemsCreated);	}

		theStatus = ~<theStatus> <$Date.Date>~;

		// Can I just commit the one record that I updated?

		Invoke( UpdateRecordStatus,theRecord(GetRow),~<theStatus>~ );
	}

	return TRUE;
}


NUMERIC GetChoicesLists()
{
	GetNameListChoices();
	UpdateChoicesListChoices(~~);

	if ( OrderDlvrblDataView( GetSelectedRows,SelectedRows ) )		
	{
		SelectedRows( GetFirst,theRecord );
		theOrderID = ~<$con.theRecord[OrderID]>~;
		GetSortListChoices(~<theOrderID>~,Sortby);
		GetSortListChoices(~<theOrderID>~,Groupby);
	}

	return TRUE;
}

NUMERIC GetNameListChoices()
{
	// ** Generate "Name" list of choices
	StringList(NameList,New);

	theQuery = ~Select Distinct Name from OrderDlvrblChoices ~;
	
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);

	NameList( AddString,Translate(OrderDlvrblMessages,DP2Products) );
	NameList( AddString,Translate(OrderDlvrblMessages,SubjectPackages) );
	NameList( AddString,Translate(OrderDlvrblMessages,~Movie~) );

	if (<count> > 0)
	{
		count = 0;
		while ( List( GetNext,Record ) )
		{
			++count;
			NameList( AddString,~<$pcon.Record[Name]>~ );
		}
	}

	GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );
	Fields( GetByName,Name,ColumnDefinition );
	ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,NameList(GetCopyOf) );
	OrderDlvrblDataView( SetComboBox,ColumnDefinition,Name);

	return TRUE;
}


// update list with those product choices designated for this name.
// If the Name does not exist in the choices table, put up all products.
NUMERIC UpdateChoicesListChoices(theName)
{
	StringList(ProdChoicesList,New);

	theQuery = ~Select * from OrderDlvrblChoices Where Name = '<theName>'~;
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);
	if (<count> > 0)
	{
		count = 0;	
		while ( List( GetNext,Record ) )
		{
			++count;
			ProdChoicesList( AddString,~<$pcon.Record[Choice]>~ );
		}
	}

	else if (~<theName>~ == Translate(OrderDlvrblMessages,SubjectPackages))
	{
		ProdChoicesList( AddString,Translate(OrderDlvrblMessages,SubjectPackages) );
		count = 1;
	}
	else
	{
		// Name is "DP2 Products" or does not exist in Choices table - get all product choices
		theQuery = ~Select ID,LayoutName From Products Where Multiple <>1 And Style <>1 Order By ID~;	
		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
		}

		count = List(NumEntries);

		if (<count> > 0)
		{
			while ( List( GetNext,Record ) )
			{
				++count;
				ProdChoicesList( AddString,~<$pcon.Record[ID]>~ );
			}
		}
	}

	if (<count> > 0)
	{
		GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );
		Fields( GetByName,Choice,ColumnDefinition );
		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,ProdChoicesList(GetCopyOf) );
		OrderDlvrblDataView( SetComboBox,ColumnDefinition,Choice);
	}

	return TRUE;
}


NUMERIC GetSortListChoices(theOrderID,FieldName)
{
	// Generate "Sortby" list of choices
	GetSubjectOrderIDInfoType( ~<theOrderId>~, infoType, theSubjectsOrderID);

	theQuery = ~Select * From Sorts Where Type in ('Any SubjectInfo','SubjectInfo<infoType>') Order by Sequence,Name~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	StringList(SortbyList,New);
	if (~<FieldName>~ == ~Sortby~)
	{
		SortbyList( AddString, Translate(OrderDlvrblMessages,RollFrame));
	}

	count = List( NumEntries );
	if ( <count> > 0 )
	{
		count = 1;
		while ( List( GetNext,Record ) )
		{
			++count;
			SortbyList( AddString,~<$pcon.Record[Name]>~ );
		}
	}

	GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );

	Fields( GetByName,<FieldName>,ColumnDefinition );

	ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,SortbyList(GetCopyOf) );

	OrderDlvrblDataView( SetComboBox,ColumnDefinition,<FieldName>);

	return TRUE;
}

NUMERIC OnButtonClick()
{
	OrderDlvrblDataView( GetActiveCell,row,col );
	OrderDlvrblDataView( GetColumnName,<col>,ColumnName );
	if ( SimilarStr(~<ColumnName>~ , JobPopulationScript) )
	{		
		if ( FileDialog( DefaultDirectory,~<$App.ShareDirectory>\Scripts\JobPopulationScripts~,Title,~Find the script~,PATH,Path,Open ) )
		{
			myLen = strlen(~<$Str.$Path.filename>~);
			if ( <myLen> > 31)
			{
				MessageBox(~Filename is more than 31 characters.  Please shorten it.~,OK);
				return TRUE; 
			}
			Folder = ~<$Str.$Path.Folder>~;
			ParFolder = ~<$Str.$Path.ParentFolder>~;
			if (!SimilarStr(~<Folder>~,JobPopulationScripts) || !SimilarStr(~<ParFolder>~,Scripts))
			{
				MessageBox(~Please select a file in the Scripts\JobPopulationScripts directory on your server~,OK);
				return TRUE; 
			}
			
			TheDirectory = ~<$Str.$Path.Path>~;

			if (!SimilarStr(~<TheDirectory>~,~<$App.ShareDirectory>\Scripts\JobPopulationScripts~))
			{
				MessageBox(~Please select a file in the Scripts\JobPopulationScripts directory on your server~,OK);
				return TRUE; 
			}
			if ( !CheckShared( ~<Path>~ ) )
			{
				return FALSE;
			}
			
			theFile = ~<$Str.$Path.filename.WithoutExt>~;
			FuncNoExtension = ~<$Str.$Path.filename.WithoutExt.StripLeadingNumerics>~;
			
			OrderDlvrblDataView( GetCellValue,Name,<row>,Name);

			DisplayThis = 1;
			if (SimilarStr(~<Name>~,~Subject Packages~))
			{
				if (FunctionDefined(~R<$Str.$FuncNoExtension.InstanceString>_SIDisplay~)) 
				{
					Routine = ~R<$Str.$FuncNoExtension.InstanceString>_SIDisplay~;
					DisplayThis = <Routine>();
				}
				else if (FunctionDefined(~<$Str.$FuncNoExtension>_SIDisplay~))
				{
					DisplayThis = <FuncNoExtension>_SIDisplay();
				}

			}
			else if (FunctionDefined(~R<$Str.$FuncNoExtension.InstanceString>_ODDisplay~)) 
			{
				Routine = ~R<$Str.$FuncNoExtension.InstanceString>_ODDisplay~;
				DisplayThis = <Routine>();
			}
			else if (FunctionDefined(~<FuncNoExtension>_ODDisplay~))
			{
				DisplayThis = <FuncNoExtension>_ODDisplay();
			}

			if (Numeric(~<DisplayThis>~))
			{
				OrderDlvrblDataView( SetCellValue,<row>,JobPopulationScript,~<theFile>~);
			}
			else
			{
				Warning(~<FuncNoExtension> is not a valid population technique for <name>~);
			}
		}
	}


	return 1;
}

NUMERIC CheckShared( Path )
{
	if ( IsNULL( ~<Path>~ ) )
	{
		return TRUE;
	}

	if ( !Files( IsUNC,~<Path>~ ) && NetworkOperation() )
	{
		Msg = ~Warning:  <$Str.$Path.filename> will not be accessible from another computer. To make it accessible find the file from your Network Neighborhood or mapped network drive instead of from your hard drive. Continue?~;

		if ( MessageBox( ~<Msg>~,YESNO ) != YES )
			{ return FALSE; }
	}

	return TRUE;
}

// Called whenever the combo button hit
// Need to make sure the "Choices" list is the one for the "Name" field
NUMERIC RefreshComboBox()
{
	OrderDlvrblDataView( GetActiveCell,row,col );
	OrderDlvrblDataView( GetColumnName,<col>,ColumnName );

	if ( ~<ColumnName>~ == ~CHOICE~ )
	{
		OrderDlvrblDataView( GetCellValue,theName,<row>,NAME);
		UpdateChoicesListChoices(~<theName>~);
	}

	if ( ~<ColumnName>~ == ~NAME~ )
	{
		GetNameListChoices();
	}

	if ( ~<ColumnName>~ == ~SORTBY~ )
	{
		if ( OrderDlvrblDataView( GetSelectedRows,SelectedRows ) )		
		{
			SelectedRows( GetFirst,theRecord );
			theOrderID = ~<$con.theRecord[OrderID]>~;
			GetSortListChoices(~<theOrderID>~,~Sortby~);
		}
	}
	else if ( ~<ColumnName>~ == ~GROUPBY~ )  // Page Break
	{
		OrderDlvrblDataView( GetCellValue,theName,<row>,NAME);
		if ( ~<theName>~ == Translate(OrderDlvrblMessages,SubjectPackages) )
		{
			StringList(NoList,New);
			GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );
			Fields( GetByName,<ColumnName>,ColumnDefinition );
			ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,NoList(GetCopyOf) );
			OrderDlvrblDataView( SetComboBox,ColumnDefinition,<ColumnName>);
		}
		else
		{
			if ( OrderDlvrblDataView( GetSelectedRows,SelectedRows ) )		
			{
				SelectedRows( GetFirst,theRecord );
				theOrderID = ~<$con.theRecord[OrderID]>~;
				GetSortListChoices(~<theOrderID>~,~Groupby~);
			}
		}
	}

	return TRUE;
}


// Following routine called after a field is changed, and move to a different field.
// If the combo box was the "Name" column, need the choices to be those
//    associated with the name.
NUMERIC EndEditActions()
{
	OrderDlvrblDataView( GetActiveCell,row,col );
	OrderDlvrblDataView( GetColumnName,<col>,ColumnName );

	if ( ~<ColumnName>~ == ~NAME~ )
	{
		// Make the choice field "blank" so not incompatable data

		OrderDlvrblDataView( SetCellValue,<row>,CHOICE,~~);

		OrderDlvrblDataView( GetCellValue,theName,<row>,NAME);
		if ( ~<theName>~ == Translate(OrderDlvrblMessages,SubjectPackages) )
		{
			OrderDlvrblDataView( SetCellValue,<row>,Choice,~<theName>~);
			// Make the PageBreak field "blank" so not incompatable data
			OrderDlvrblDataView( SetCellValue,<row>,Groupby,~~);
		}
	}

	return TRUE;
}


// Following routine called whenever one of the combo boxes are changed.
// If the combo box was the "Name" column, need to change the choices to those
//    associated with the name.
NUMERIC ComboBoxChangedActions()
{
	EndEditActions();
	return TRUE;
}


FirstTime = TRUE;

// OrdersList - SQL list - Used for title only (eg ~'1001','1002'~
// DocumentQuery	- the query to get the records
NUMERIC Init( OrdersList,DocumentQuery )
{
	MainTitle = Translate( OrderDlvrblMessages,Title);
	MainTitle = ~<OrdersList>~ == ~~ ? ~<MainTitle>~ : ~<MainTitle> - <OrdersList>~;
	OrderDlvrblDataWindow( Set,Title,~<MainTitle>~ );

	Global( OrdersList,DocumentQuery,MainTitle );

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !PGenConList( List,Connect,CursorLocation,Client,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{ 
			List(GetErrorDescription,0,theErr);
			Error( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
		}

		Count = List( NumEntries );

		StatusBarText( Translate(OrderDlvrblMessages,ReadingRecords,<Count>) );

		Start = Ticks();

		SetDocumentData( List(GetObject) );

		WindowLocation = ~<$User.WindowLocation[List]>~;

		if ( ~<WindowLocation>~ != ~~ )	
			{ OrderDlvrblDataWindow( Set,Position,~<WindowLocation>~ ); }
		

		DefineMenu( FALSE );


		if ( !OrderDlvrblDataWindow( CreateWindow,~OrderDlvrbl~ ) )
			{ Error( Translate(UIMessages,CreateWindowFailed,~OrderDlvrbl~) ); }

		Duration = (Ticks() - <Start>) / 1000;

		return OrderDlvrblDataWindow( StatusBar,Text,Translate(OrderDlvrblMessages,ReadRecords,~<Count>~,~<Duration>~) );
	}

	Document( Doc,This,SetTitle,~<MainTitle>~ );

	return RefreshListView();
}



Include: ~ExportSelectedToFile~;


VOID DefineMenu( RecordSetIsAFile )
{
	Define:	OrderDlvrblListViewMenu Using DDMenuDef AsSymbol OrderDlvrblListViewMenu
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			Define:	OpenOrder	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuOpen )
						IDText		~ID~
						ActionsText  ACTION Exec ( OpenSelected() )

			Define:	AddRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuAdd )
						IDText		~ID~
						ActionsText  ACTION Exec ( AddRecord() )
						AcceleratorKey	~N~

			Define:	DuplicateRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuDuplicate )
						IDText		~ID~
						ActionsText  ACTION Exec ( DuplicateRecord() )

			Define:	Search	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuFind )
						IDText		~ID~
						ActionsText  ACTION Exec ( Search() )
						//AcceleratorKey	~S~

			Define:	NULL1 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SaveAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuSaveChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( SaveAllChanges() )

			Define:	ForgetAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuCancelChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( RollBackAllChanges() )

			Define:	DeleteRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuDelete )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteRecord() )

			Define:	DeleteOrderItems	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuDeleteOrderItemsFor ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteOrderItemsForRecord() )


			Define:	Refresh	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuRefresh )
						IDText		~ID~
						ActionsText  ACTION Exec ( RefreshListView() )

			Define:	NULL2 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	CreateItems	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuCreateSelected ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( DisplayOrderIDsForCreate() )

			Define:	RunItems	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuRunSelected ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( RunSelectedItems() )

			Define:	SeeOrdersFor	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuSeeOrderFor ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeOrdersFor() )

			Define:	SeeItemsFor	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuSeeItemsFor ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeOrderItemsFor(TRUE) )

			Define:	SeeItemsDataFor	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuSeeItemsDataFor ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeOrderItemsFor(FALSE) )

			Define:	SeeJobQueueFor	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuSeeJobQueueFor ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeJobQueueFor() )


			Define:	SeeSubjectInfoFor	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuSeeSubjectInfoFor ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeSubjectInfoFor() )

			Define:	NULL3 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~
			Define:	GenYBOutput	using	DDMenuItemDef
				Fields:	Text		Translate( ~Create Yearbook Output~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( GenYearbook(); )

			Define:	NULL4 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SeeColumnInfo	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuColumnInfo ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeChoicesInfo() )

			Define:	SeeChangeField	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( OrderDlvrblMessages,MenuChangeField ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeChangeField() )

			Define:	NULL5 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	Export	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuExport )
						IDText		~ID~
						ActionsText  ACTION Exec ( ExportSelectedToFile(OrderDlvrblDataView,OrderDlvrbl) )

		}

	Global( OrderDlvrblListViewMenu );
}




Include: ~DefineStdGridButtons~;
// StdButtonWidth,  - gotten from DefineStdGridButtons

	if ( !GenCon( TableDefinition,GetFrom,OrderDlvrbl,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The Subject Info Description (OrderDlvrbl) Table is not properly defined~ ); }

	  ButtonHeight = 20;  hGap = 1; vGap = 2;
	  StdButtonWidth = 55;

	Define: OrderDlvrblDataWindow Using DDWinDef
		Fields:	Title					Translate(OrderDlvrblMessages,Title)
				Position				0 0 90 35
				IsPositionPercent		T
				EnableStatusBar			T
				TypeName				SplitterWnd
				SplitterRows			~2 10 90~
				SplitterColumns			1

		Contains:	INLISTORDER
		{
		Define: ControlView Using DDViewDef AsSymbol ControlView
			Fields:			ViewType				FormView
							KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
							HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "OrderDlvrblData.htm" )
				Contains:
				{
					position = DefineStdGridButtons(OrderDlvrbl) + 10;


					Define: DuplicateButton Using DDWinCtrlDef AsSymbol DuplicateButton
						Fields:	GENCONNAME		This
								DACTIONSTEXT	ACTION EXEC ( DuplicateRecord() )
								POSITION		$position + $hGap, $vGap,
												$StdButtonWidth+15, $ButtonHeight
								TEXT			Translate( ~D&uplicate~ )
								TOOLTIP			Translate( ~Duplicate the selected row~ )
								TYPENAME		BUTTON


					Define: ViewItemsButton Using DDWinCtrlDef AsSymbol ViewItemsButton
						Fields:	GENCONNAME		This
								DACTIONSTEXT	ACTION EXEC ( SeeOrderItemsFor(TRUE) )
								POSITION		DuplicateButton(GetRight,Position) + $hGap,
												DuplicateButton(GetTop,Position),
												$StdButtonWidth, $ButtonHeight
								TEXT			Translate( OrderDlvrblMessages, ViewItems)
								TOOLTIP			Translate( OrderDlvrblMessages,ToolViewItems )
								TYPENAME		BUTTON

					Define: CreateButton Using DDWinCtrlDef AsSymbol CreateButton
						Fields:	GENCONNAME		This
								DACTIONSTEXT	ACTION EXEC ( DisplayOrderIDsForCreate() )
								POSITION		ViewItemsButton(GetRight,Position) + 2*$hGap+10,
												ViewItemsButton(GetTop,Position),
												$StdButtonWidth $ButtonHeight
								TEXT			Translate( OrderDlvrblMessages,CreateTxt )
								TOOLTIP			Translate( OrderDlvrblMessages,ToolCreate )
								TYPENAME		BUTTON

					Define: RunButton Using DDWinCtrlDef AsSymbol RunButton
						Fields:	GENCONNAME		This
								DACTIONSTEXT	ACTION EXEC ( RunSelectedItems() )
								POSITION		CreateButton(GetRight,Position) + $hGap,
												CreateButton(GetTop,Position),
												$StdButtonWidth $ButtonHeight
								TEXT			Translate( OrderDlvrblMessages,RunTxt )
								TOOLTIP			Translate( OrderDlvrblMessages,ToolRun )
								TYPENAME		BUTTON


			
			Define: OrderDlvHeaderText	Using	DDWinCtrlDef	AsSymbol	OrderDlvHeaderText
				Fields: TypeName	StaticText
						Text		~~
						IsHidden	T
						Position	220,30,
									250, 20 ;
									
			Define: OrderMsgTxt	Using	DDWinCtrlDef	AsSymbol	OrderMsgTxt
				Fields: TypeName	StaticText
						Text		~~
						IsHidden	T
						Position	10,55,
									250, 20 ;
			

				Define: OrderListBox Using DDWinCtrlDef AsSymbol OrderListBox Private
				Fields:	
					TypeName				ListBox
					ListViewType			Report
					Position				OrderMsgTxt(GetLeft,Position)+$hGap, OrderMsgTxt(GetBottom,Position)+$vGap,
											200, 80 
					GenConField				~OrderID~
					//IActionsText			ACTIONS ( Get )
					//OActionsText			ACTIONS ( Save )
					AllowMultipleSelection	TRUE
					GridLines				TRUE
					IsHidden				T
					FullRowSelect			TRUE
					Border					TRUE
					ClientEdge				TRUE
					ShowSelAlways			TRUE
					InfoTip					TRUE
					NoDuplicates			1
					Tooltip					Translate( OrderDlvrblMessages, OrderListBoxTip )

				Define: DstOrderMsgTxt	Using	DDWinCtrlDef	AsSymbol	DstOrderMsgTxt
				Fields: TypeName	StaticText
						Text		~~
						IsHidden	T
						Position	OrderMsgTxt(GetRight,Position) + 20,OrderMsgTxt(GetTop,Position),
									250, 20 ;
			

				Define: DstOrderListBox Using DDWinCtrlDef AsSymbol DstOrderListBox Private
				Fields:	
					TypeName				ListBox
					ListViewType			Report
					Position				DstOrderMsgTxt(GetLeft,Position)+$hGap, OrderMsgTxt(GetBottom,Position)+$vGap,
											200, 80 
					GenConField				~OrderID~
					IActionsText			ACTIONS ( Get )
					DActionsText			ACTIONS (  "EXEC(OnDstOrderSelected())" )
					OActionsText			ACTIONS ( Save )
					GridLines				TRUE
					IsHidden	T
					FullRowSelect			TRUE
					Border					TRUE
					ClientEdge				TRUE
					NoDuplicates			1
					InfoTip					TRUE
					Tooltip					Translate( OrderDlvrblMessages, DstOrderListBoxTip );

			Define: CreateOIMsgTxt	Using	DDWinCtrlDef	AsSymbol	CreateOIMsgTxt
				Fields: TypeName	StaticText
						Text		~~
						IsHidden	T
						Position	DstOrderListBox(GetRight,Position) + 15,
									DstOrderListBox(GetTop,Position),
									8, 20 ;
			Define: CreateItemsButton Using DDWinCtrlDef AsSymbol CreateItemsButton
				Fields:	GENCONNAME		This
						DACTIONSTEXT	ACTION EXEC ( CreateItemsForSelectedOrders() )
						Position		CreateOIMsgTxt(GetRight,Position) + 5,
										CreateOIMsgTxt(GetTop,Position)-4,
										100, 20 
						IsHidden		T
						TEXT			Translate( OrderDlvrblMessages,CreateOrderItems )
						TOOLTIP			Translate( OrderDlvrblMessages,CreateItemTip )
						TYPENAME		BUTTON

			Define: HideSplitterButton Using DDWinCtrlDef AsSymbol HideSplitterButton
				Fields:	GENCONNAME		This
						DACTIONSTEXT	ACTION EXEC ( HideSplitter() )
						POSITION		CreateItemsButton(GetRight,Position)+ 20 ,
										CreateItemsButton(GetTop,Position),
										20, $ButtonHeight
						IsHidden		T
						TEXT			~^~
						TOOLTIP			Translate( OrderDlvrblMessages,Collapse )
						TYPENAME		BUTTON
							
				}
		
			
		Define: OrderDlvrblDataView Using DDViewDef AsSymbol OrderDlvrblDataView
			Fields:	ViewType				~ListView~
					GridControlTypes		TableDefinition( GetReferenceTo,Fields )
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					ComboBoxActionsText		ACTION Call ( RefreshComboBox() )
					ComboBoxChangedActionsText	ACTION Call ( ComboBoxChangedActions() )
					EndEditActionsText		ACTION Call ( EndEditActions() )
					RefreshActionsText		ACTION Exec ( RefreshListView() )
					DoubleClickActionsText	ACTION Exec ( OpenSelected() )
					KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
					CloseActionsText		ACTION Call ( OnCloseOrderDlvrblDataView() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "OrderDlvrblData.htm" )
					ButtonClickActionsText	ACTION Exec ( OnButtonClick() )
					ViewDataType			Text

		}
OrderDlvrblDataWindowHeight = -1;
OrderDlvrblDataleft = 0;
OrderDlvrblDatatop = 0;
OrderDlvrblDataright = 0;
OrderDlvrblDatabottom = 0;
OrderDlvrblDataRowInfo1 = 0;
OrderDlvrblDataRowInfo2 = 0;
OrderDlvrblDataRowInfo3 = 0;
OrderDlvrblDataRowInfo4 = 0;


VOID PopulateOrderListBox(&OrderIDList)
{
	if (<OrderDlvrblDataWindowHeight> < 0)
	{	
		OrderDlvrblDataWindow( GetWindowPosition,left,top,right,bottom );
		OrderDlvrblDataleft = <left>;
		OrderDlvrblDatatop = <top>;
		OrderDlvrblDataright = <right>;
		OrderDlvrblDatabottom = <bottom>;
		OrderDlvrblDataWindowHeight = <bottom> + 150 - <top>;
		//OrderDlvrblDataWindow(SetWindowSize,  90,240);
		ControlView( SetValueInCtrlDef,OrderListBox,IsHidden,~F~);
		ControlView( SetValueInCtrlDef,OrderMsgTxt,IsHidden,~F~);
		ControlView( SetValueInCtrlDef,CreateOIMsgTxt,IsHidden,~F~);
		ControlView( SetControlValue,OrderMsgTxt,~1. Choose the images' order:~);
		ControlView( SetControlValue,DstOrderMsgTxt,~2. Choose the order to create the items on:~);
		ControlView( SetControlValue,JobPopulationScripts,~3. Choose a job population script:~);
		
		ControlView( SetControlValue,CreateOIMsgTxt,~3. ~);
		
		ControlView( ShowControls,1,OrderMsgTxt,OrderListBox);
		ControlView( ShowControls,1,HideSplitterButton,OrderDlvHeaderText,DstOrderMsgTxt,DstOrderListBox,JobPopulationScriptsListBox,JobPopulationScripts,CreateOIMsgTxt,SelectAllButton,SelectNoneButton,CreateItemsButton,ClearJobPopulationScriptButton);

		ControlView( ListBox,OrderListBox,ResetContent );
			
		ItemNum = -1;		
		while (OrderIDList(GetNext,Item))
		{
			ControlView( ListBox,OrderListBox,AddString,~<Item>~ );
			ControlView( ListBox,DstOrderListBox,AddString,~<Item>~ );
			//ControlView( ListBox,OrderListBox,SetSel,<++ItemNum>,1 );// to select
		}	
		// in pixels
		
		Count = OrderIDList(NumEntries);
		ControlView( SetControlValue,OrderDlvHeaderText,Translate(OrderDlvrblMessages,NumberOfOrders,~<Count>~));
		OrderDlvrblDataWindow( SplitterWindow,GetRowInfo,0,q1,q2);
		OrderDlvrblDataWindow( SplitterWindow,GetRowInfo,1,q3,q4);
		OrderDlvrblDataRowInfo1 = ~<q1>~;
		OrderDlvrblDataRowInfo2 = ~<q2>~;
		OrderDlvrblDataRowInfo3 = ~<q3>~;
		OrderDlvrblDataRowInfo4 = ~<q4>~;
		
	}
	OrderDlvrblDataWindow( SetWindowSize,<OrderDlvrblDataright> -<OrderDlvrblDataleft>, <OrderDlvrblDataWindowHeight> );
	OrderDlvrblDataWindow( SplitterWindow,SetRowInfo,0,140,140,RecalcLayout);
}

VOID PopulateJobPopListBox()
{
	MoreFiles = findfile( aDirectoryEntry,Find,~<$App.ShareDirectory>\Scripts\JobPopulationScripts\*.txt~ );

	while ( $Morefiles )
	{
		Morefiles = aDirectoryEntry( Next );

		aDirectoryEntry( Get,Path,aPath );
			
		if ( aDirectoryEntry( Dots ) )
			continue;
			
		if ( aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
			continue;
		
		ControlView( ListBox,JobPopulationScriptsListBox,AddString,~<$Str.$aPath.filename>~ );

	}

}

VOID HideSplitter()
{
	OrderDlvrblDataWindow( SetWindowSize,<OrderDlvrblDataright> - <OrderDlvrblDataleft>,<OrderDlvrblDatabottom>-<OrderDlvrblDatatop> );
	//ControlView( ShowControls,0,OrderMsgTxt,OrderListBox);
	//ControlView( ShowControls,0,HideSplitterButton,OrderDlvHeaderText,DstOrderMsgTxt,DstOrderListBox,CreateOIMsgTxt,SelectAllButton,SelectNoneButton,CreateItemsButton);
	OrderDlvrblDataWindow( SplitterWindow,SetRowInfo,0,<OrderDlvrblDataRowInfo1>,<OrderDlvrblDataRowInfo2>,RecalcLayout);
	OrderDlvrblDataWindow( SplitterWindow,SetRowInfo,1,<OrderDlvrblDataRowInfo3>,<OrderDlvrblDataRowInfo4>,RecalcLayout);
	//OrderDlvrblDataWindowHeight = -1;
}

VOID OnDstOrderSelected()
{
}

VOID ClearJobPopulationScript(Select)
{
	Count = ControlView( ListBox,JobPopulationScriptsListBox,GetCount);// to select
	item = 0;
	while (<item> < <count>)
	{
		ControlView( ListBox,JobPopulationScriptsListBox,SetSel,<item>,<Select> );// to select
		++item;
	}
}

VOID SelectAll(Select)
{	
	Count = ControlView( ListBox,OrderListBox,GetCount);// to select
	item = 0;
	while (<item> < <count>)
	{
		ControlView( ListBox,OrderListBox,SetSel,<item>,<Select> );// to select
		++item;
	}
}



VOID CreateItemsForSelectedOrders()
{
	ForgetGlobal(SelectedOrderList);
	if (ControlView( ListBox,OrderListBox,MakeSelectedStringList,SelectedOrderList))
	{
		Global(SelectedOrderList);
	}
	else
	{
		Warning( Translate(OrderDlvrblMessages,NothingSelected)  );
		return;
	}
		
	selectResult = ControlView(ListBox,DstOrderListBox,GetSelectedItem,theOrderID);
	if (<selectResult> > 0)
	{
		CreateFor(~<theOrderID>~);
	}
	else
	{
		Warning( Translate(OrderDlvrblMessages,NothingSelected)  );
		return;
	}


}

// Entry point for the STOP dialog
NUMERIC DisplayStopDlg()
{
	if (!Defined(DlvrblStopDefinition))
	{
		DefineDialog();
	}

	ForgetGlobal(DlvrblStopDlg);
	GenDlg(DlvrblStopDlg, Definition, DlvrblStopDefinition,Data,DlvrblStopData,Document,$Doc.This,New,Temporary);
	Global(DlvrblStopDlg);
	return 1;
}


NUMERIC DefineDialog()
{

	MsgTextWidth = 400;	StaticTextHeight = 20;
	x = 4;					y = 5;
	vGap = 20;
	ButtonWidth = 55;		ButtonHeight = 20;

	if (!DictionaryExists(DDDlvrblStopDialog) )
	{
		Dictionary: DDDlvrblStopDialog
			Fields: Name	theField	type text;
	}
	Define: DlvrblStopData Using DDDlvrblStopDialog;
	Global(DlvrblStopData);

	Define: DlvrblStopDefinition	Using	DDWinDef
            Fields: Position			180 180 200 200
                    Title				Translate( OrderDlvrblMessages,StopTitle )
                    TypeName			~Dialog~
					WantsMinimizeBox	TRUE
					StatusBar			~1 100~
					HACTIONSTEXT		ACTION SHOWHELPPAGE ( KPISHelpFile "ChangeSubjInfoCol.htm" ) 
                    OACTIONSTEXT		ACTION EXEC ( DlvrblStopCloseDialog() ) ;

		Contains: InListOrder
		{
			
			Define: StopMsgTxt	Using	DDWinCtrlDef	AsSymbol	StopMsgTxt
				Fields: TypeName	StaticText
						Text		~~
						Position	$x,$y,
									$MsgTextWidth, $StaticTextHeight ;
			
			Define: StopTxt	Using	DDWinCtrlDef	AsSymbol	StopTxt
				Fields: TypeName	StaticText
						Text		Translate( OrderDlvrblMessages, StopMsgTxt )
						Position	StopMsgTxt(GetLeft,Position),
									StopMsgTxt(GetBottom,Position) + $vGap,
									$MsgTextWidth, $StaticTextHeight ;

			DialogWidth = StopTxt(GetRight,Position) + $hGap*3;

			Define: StopButton	Using	DDWinCtrlDef AsSymbol	StopButton
				Fields: TypeName	DefaultButton
						Text		Translate(OrderDlvrblMessages,StopButtonTxt)
						Position	($DialogWidth-$ButtonWidth)/2,
									StopTxt(GetBottom,Position) + $vGap*2,
									$ButtonWidth, $ButtonHeight
						DActionsText	ACTION EXEC ( OnStopButton() )
						IsEnabled	T

		};

	DialogLength = StopButton(GetBottom, Position) + $vGap + 25;

	DlvrblStopDefinition(Set,Position, ~180 180 <DialogWidth> <DialogLength>~);

	// Update the dialog with the data for the current window
	Global(DlvrblStopDefinition);


	return TRUE;
}


VOID DlvrblStopCloseDialog()
{
	DlvrblStopDlg( SetDlgHandleActionsFlag,TRUE ) ;	// re-enable handling actions
	Invoke( ShowWarning,Translate(OrderDlvrblMessages,CantStopMsg) );

}


VOID OnStopButton()
{
	Stop = TRUE;
}


VOID UpdateStopDlgMsg(Msg)
{
	DlvrblStopDlg(SetControlValue,StopMsgTxt,~<Msg>~);

}
OptionalInclude( ~<$App.ShareDirectory>\Scripts\ScriptOverrides\<$Job.Title>.txt~ );





