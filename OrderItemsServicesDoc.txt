Include: ~FormattingRoutines~;

IncludeClass( BaseGrid );

VOID	OIServices::OIServices()						// CONSTRUCTOR
{
	TableName = ~OrderItemsServices~;
	DocumentQuery = ~Select * from <TableName> Order By OrderID,OrderItemID,ServicesID~;
	Title = ~OrderItems Services~;
	WindowTop = 25;
	WindowWidth = 90;
	WindowHeight = 25;
	HelpPage = ~OrderItemsServices.htm~;
	SplitterRows = ~2 7 93~;
}

STR		OIServices::GetKey( &Item )							// PRIMARY KEY FOR THE TABLE
{
	return ~OrderID = '<$con.Item[OrderID]>' AND OrderItemID = <$con.Item[OrderItemID]> AND ServicesID = <$con.Item[ServicesID]>~;
}

NUMERIC OIServices::ChangeRecordAudits( &Changed )			// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[OrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  OrderID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[OrderItemID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  OrderItemID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[ServicesID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ServicesID cannot be blank.~ ) ); }

	return TRUE;
}

NUMERIC OIServices::OnAddRecord( &NewRow )
{
	return NewRow( Set,OrderID,~<fOrderID>~ );
}

NUMERIC Init( OrderID,Query )
{
	if ( Defined( Grid ) )
	{
		Grid.ReOpen();
		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.Set( fOrderID,~<OrderID>~ );
		Grid.RefreshListView();
	}
	else
	{
		Class( OIServices,Extends,BaseGrid,
				Member,fOrderID,Str,~<OrderID>~ );

		OIServices( New,Grid );		
		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.DefineWindow();
		Grid.Init();
		Global(Grid);
	}

	Grid.SetTitle( Translate( ~Order Item Services - <fOrderID>~ ) );
	return TRUE;
}

