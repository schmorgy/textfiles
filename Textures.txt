IncludeClass( BaseGrid);

VOID TexturesGrid::TexturesGrid()					// CONSTRUCTOR
{
	TableName = ~Textures~;
	DocumentQuery = ~Select * from <TableName> Order By DeviceType,Sequence~;
	Title = ~Textures~;
	WindowWidth = WindowHeight = 30;
	HelpFile = ~AdminHelpFile~;
	HelpPage = ~OrderItems.htm~;
}

STR TexturesGrid::GetKey( &Item )			{ return ~TextureName = '<$con.Item[TextureName]>' And DeviceType = '<$con.Item[DeviceType]>'~; }  // PRIMARY KEY FOR THE TABLE

VOID TexturesGrid::OnAddRecord( &NewRow )	{ NewRow( SetValues,TextureName,~~,DeviceType,NexPress,Sequence,0,Enabled,1 ); }

NUMERIC TexturesGrid::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[Texturename]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Texture Name cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Texturename]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Device Type cannot be blank.~ ) ); }
		
	Warning(~You must restart the application for your changes take effect.~);

	return TRUE;
}

VOID TexturesGrid::SetQuery(Query)
{
	DocumentQuery = ~<Query>~;
}

VOID TexturesGrid::SetParams(TheTitle,Query)
{
	DocumentQuery = ~<Query>~;
	Title = ~<TheTitle>~;
	SetTitle(~<TheTitle>~);
}
NUMERIC Init(ThisTitle,Query)
{
	if (Defined(Grid))
	{
		Grid.SetParams(~<ThisTitle>~,~<Query>~);
		Grid.RefreshListView();
		return TRUE;
	}

	Class( TexturesGrid,Extends,BaseGrid );

	TexturesGrid( New,Grid );
	Grid.DefineWindow();
	Grid.SetParams(~<ThisTitle>~,~<Query>~);
	Grid.Init();

	return Global( Grid );
}
