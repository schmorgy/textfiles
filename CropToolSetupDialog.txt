
DialogWidth = 300;
DialogHeight = 260;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 200;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;
hGap = 30;
vGap = 5;


EditTextWidth = 50;
EditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 50;
ButtonHeight = 20; 
VerticalSeparation = 30;
InitialVerticalPosition = 70;
IncludeClass(BaseHtml);
GenCon(CropToolParameters,GetGenCon,CropToolParameters);

VOID CreateDialog()
{
	Define: CropToolSetupDialog Using DDWinDef
	fields: Position 100 100 <DialogWidth> <DialogHeight>
			Title ~<$TR.LayoutsAndJobs(CropToolProperties)>~
			TypeName ~Dialog~
			OActionsText ACTION EXEC ( CancelPressed() )
			HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "Croptool.htm" )

	Contains: INLISTORDER
	{

		ypos = 10;

if (!Authorized(DP1))
{
	Define: ZoomPercentageStaticText Using DDWinCtrlDef AsSymbol ZoomPercentageStaticText
		fields:	TypeName StaticText
				Text ~<$TR.LayoutsAndJobs(ZoomPercentageTooltip2)>~
				Position $LeftMargin + 10, <ypos>,  <StaticTextWidth>+ $hGap , 100
}
else
{
	Define: ZoomPercentageStaticText Using DDWinCtrlDef AsSymbol ZoomPercentageStaticText
		fields:	TypeName StaticText
				Text ~<$TR.LayoutsAndJobs(ZoomPercentageTooltip)>~
				Position $LeftMargin + 10, <ypos>,  <StaticTextWidth>+ $hGap , 80
}

if (!Authorized(DP1))
{
		Define: ZoomPercentageEditText Using DDWinCtrlDef AsSymbol ZoomPercentageEditText
		fields:	TypeName MaskedEditText
				Position (ZoomPercentageStaticText(GetRight,Position) + $hGap + 10) ZoomPercentageStaticText(GetY,position) 40 20
				GenConName CropToolParameters
				GenConField ~ZoomPercentage~
				IActionsText ~[GET]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~<$TR.LayoutsAndJobs(ZoomPercentageTooltip2)>~;
}
else
{
		Define: ZoomPercentageEditText Using DDWinCtrlDef AsSymbol ZoomPercentageEditText
		fields:	TypeName MaskedEditText
				Position (ZoomPercentageStaticText(GetRight,Position) + $hGap + 10) ZoomPercentageStaticText(GetY,position) 40 20
				GenConName CropToolParameters
				GenConField ~ZoomPercentage~
				IActionsText ~[GET]~
				OActionsText ~[Save]~
				Mask		 ~#~
				DisAllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~<$TR.LayoutsAndJobs(ZoomPercentageTooltip)>~;
}

		Define: OKButton Using DDWinCtrlDef AsSymbol OKButton
		fields:	TypeName DefaultButton
				Text ~<$TR.LayoutsAndJobs(RectToolOK)>~
				Position <DialogWidth> - 80 , ZoomPercentageStaticText(GetBottom,position) + $vGap,  <SmallButtonWidth> , <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( Done() )
				OActionsText ~[NULL]~
				Tooltip ~<$TR.LayoutsAndJobs(RectToolSaveTooltip)>~;

	}

	ypos = OKButton(GetBottom,Position) + 50;

	if ( !Defined(dlg) )
	{
		CropToolSetupDialog(Set,Position,~50 50 <DialogWidth> <ypos> ~);
		// look up a GenCon called CropToolParameters and refer to it as CropToolParameters inside this script
		GenDlg( dlg,Definition,CropToolSetupDialog,Data,CropToolParameters,Document,$Doc.This,New,Temporary );
		Global( dlg );
	}

	else
	{
		dlg (SetFocus);
	}

}

VOID ReOpen()
{
	dlg( SetFocus );
}

Include: ~UpdateUserSettings~;



VOID Done()
{
	dlg( GetInput );

	if (Authorized(DP1))
	{
		CropToolParameters(GetValue,ZoomPercentage,zoom);
		if (<zoom> < 1)
		{
			Warning(~<$Tr.LayoutsAndJobs(ZoomPercentTooSmall)>~);
			return;
		}
	}
	
	UpdateUserSettings( CropToolParameters,CropToolParameters );

	dlg( End );
	Exit();
}

VOID CancelPressed()
{
	dlg( End );
	Exit();
}

BaseHtml::LoadTranslationFile(LayoutsAndJobs,LayoutsAndJobs,LayoutsAndJobs);
CreateDialog();


