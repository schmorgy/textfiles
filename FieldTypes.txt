/*

THIS SECTION LISTS THE RESERVED KEYWORDS FOR SQL SERVER AND JET.  WHEN ADDING/CHANGING TABLES/FIELDS
MAKE SURE THAT YOU AVOID USING THESE KEYWORDS.

SQL SERVER RESERVED KEYWORDS:

ADD					ALL					ALTER				AND
ANY					AS					ASC					AUTHORIZATION
BACKUP				BEGIN				BETWEEN				BREAK
BROWSE				BULK				BY					CASCADE
CASE				CHECK				CHECKPOINT			CLOSE
CLUSTERED			COALESCE			COLLATE				COLUMN
COMMIT				COMPUTE				CONSTRAINT			CONTAINS
CONTAINSTABLE		CONTINUE			CONVERT				CREATE
CROSS				CURRENT				CURRENT_DATE		CURRENT_TIME
CURRENT_TIMESTAMP	CURRENT_USER		CURSOR				DATABASE
DBCC				DEALLOCATE			DECLARE				DEFAULT
DELETE				DENY				DESC				DISK
DISTINCT			DISTRIBUTED			DOUBLE				DROP
DUMP				ELSE				END					ERRLVL
ESCAPE				EXCEPT				EXEC				EXECUTE
EXISTS				EXIT				EXTERNAL			FETCH
FILE				FILLFACTOR			FOR					FOREIGN
FREETEXT			FREETEXTTABLE		FROM				FULL
FUNCTION			GOTO				GRANT				GROUP
HAVING				HOLDLOCK			IDENTITY			IDENTITY_INSERT
IDENTITYCOL			IF					IN					INDEX
INNER				INSERT				INTERSECT			INTO
IS					JOIN				KEY					KILL
LEFT				LIKE				LINENO				LOAD
MERGE				NATIONAL			NOCHECK				NONCLUSTERED
NOT					NULL				NULLIF				OF
OFF					OFFSETS				ON					OPEN
OPENDATASOURCE		OPENQUERY			OPENROWSET			OPENXML
OPTION				OR					ORDER				OUTER
OVER				PERCENT				PIVOT				PLAN
PRECISION			PRIMARY				PRINT				PROC
PROCEDURE			PUBLIC				RAISERROR			READ
READTEXT			RECONFIGURE			REFERENCES			REPLICATION
RESTORE				RESTRICT			RETURN				REVERT
REVOKE				RIGHT				ROLLBACK			ROWCOUNT
ROWGUIDCOL			RULE				SAVE				SCHEMA
SECURITYAUDIT		SELECT				SESSION_USER		SET
SETUSER				SHUTDOWN			SOME				STATISTICS
SYSTEM_USER			TABLE				TABLESAMPLE			TEXTSIZE
THEN				TO					TOP					TRAN
TRANSACTION			TRIGGER				TRUNCATE			TSEQUAL
UNION				UNIQUE				UNPIVOT				UPDATE
UPDATETEXT			USE					USER				VALUES
VARYING				VIEW				WAITFOR				WHEN
WHERE				WHILE				WITH				WRITETEXT


JET RESERVED KEYWORDS:

ABSOLUTE            ACTION              ADD                 ADMINDB
ALL                 ALLOCATE            ALPHANUMERIC        ALTER
AND                 ANY                 ARE                 AS
ASC                 ASSERTION           AT                  AUTHORIZATION
AUTOINCREMENT       AVG					BAND                BEGIN
BETWEEN             BINARY				BIT                 BIT_LENGTH
BNOT                BOR					BOTH                BXOR
BY                  BYTE				CASCADE             CASCADED
CASE                CAST				CATALOG             CHAR
CHARACTER           CHAR_LENGTH			CHARACTER_LENGTH    CHECK
CLOSE               COALESCE			COLLATE             COLLATION
COLUMN              COMMIT				COMP                COMPRESSION
CONNECT             CONNECTION			CONSTRAINT          CONSTRAINTS
CONTAINER           CONTINUE			CONVERT             CORRESPONDING
COUNT               COUNTER				CREATE              CREATEDB
CROSS               CURRENCY			CURRENT             CURRENT_DATE
CURRENT_TIME        CURRENT_TIMESTAMP	CURRENT_USER        CURSOR
DATABASE            DATE                DATETIME            DAY
DEALLOCATE          DEC                 DECIMAL             DECLARE
DEFAULT             DEFERRABLE          DEFERRED            DELETE
DESC                DESCRIBE            DESCRIPTOR          DIAGNOSTICS
DISALLOW            DISCONNECT          DISTINCT            DOMAIN
DOUBLE              DROP				ELSE                END
END-EXEC            ESCAPE				EXCEPT              EXCEPTION
EXCLUSIVECONNECT    EXEC				EXECUTE             EXISTS
EXTERNAL            EXTRACT				FALSE               FETCH
FIRST               FLOAT				FLOAT4              FLOAT8
FOR                 FOREIGN				FOUND               FROM
FULL				GENERAL             GET                 GLOBAL
GO					GOTO                GRANT               GROUP
GUID				HAVING              HOUR				IDENTITY
IEEEDOUBLE          IEEESINGLE          IGNORE				IMAGE
IMMEDIATE           IN                  INDEX				INDICATOR
INHERITABLE         INITIALLY           INNER				INPUT
INSENSITIVE         INSERT              INT					INTEGER
INTEGER1            INTEGER2            INTEGER4			INTERSECT
INTERVAL            INTO                IS					ISOLATION
JOIN				KEY					LANGUAGE            LAST
LEADING             LEFT				LEVEL               LIKE
LOCAL               LOGICAL				LOGICAL1            LONG
LONGBINARY          LONGCHAR			LONGTEXT            LOWER
MATCH               MAX                 MEMO                MIN
MINUTE              MODULE              MONEY               MONTH
NAMES               NATIONAL            NATURAL             NCHAR
NEXT                NO                  NOT                 NOTE
NULL                NULLIF              NUMBER              NUMERIC
OBJECT              OCTET_LENGTH        OF                  OLEOBJECT
ON                  ONLY                OPEN                OPTION
OR                  ORDER               OUTER               OUTPUT
OVERLAPS            OWNERACCESS			PAD                 PARAMETERS
PARTIAL             PASSWORD			PERCENT             PIVOT
POSITION            PRECISION			PREPARE             PRESERVE
PRIMARY             PRIOR				PRIVILEGES          PROC
PROCEDURE           PUBLIC				READ                REAL
REFERENCES          RELATIVE			RESTRICT            REVOKE
RIGHT               ROLLBACK			ROWS				SCHEMA
SCROLL              SECOND              SECTION				SELECT
SELECTSCHEMA        SELECTSECURITY      SESSION				SESSION_USER
SET                 SHORT               SINGLE				SIZE
SMALLINT            SOME                SPACE				SQL
SQLCODE             SQLERROR            SQLSTATE			STRING
SUBSTRING           SUM                 SYSTEM_USER			TABLE
TABLEID             TEMPORARY           TEXT				THEN
TIME                TIMESTAMP           TIMEZONE_HOUR		TIMEZONE_MINUTE
TO                  TOP                 TRAILING			TRANSACTION
TRANSFORM           TRANSLATE           TRANSLATION			TRIM
TRUE				UNION               UNIQUE				UNIQUEIDENTIFIER
UNKNOWN				UPDATE              UPDATEIDENTITY		UPDATEOWNER
UPDATESECURITY		UPPER               USAGE				USER
USING				VALUE               VALUES				VARBINARY
VARCHAR				VARYING             VIEW				WHEN
WHENEVER            WHERE               WITH				WORK
WRITE				YEAR                YESNO				ZONE
*/

VOID Custom_DCWhiteBalList( &List )					{ } // Override
VOID Custom_QuantityTypeList( &List )				{ } // Override
VOID Custom_MultiHandlingList( &List )				{ } // Override
VOID Custom_ImagesFromList( &List )					{ } // Override
VOID Custom_ImagesPopulationList( &List )			{ } // Override
VOID Custom_HeadFindingAlgorithmList( &List )		{ } // Override
VOID Custom_BalanceAlgorithmList( &List )			{ } // Override
VOID Custom_SaveFileTypeList( &List )				{ } // Override
VOID Custom_ProductColumnTypeList( &List )			{ } // Override
VOID Custom_KparsColumnTypeList( &List )			{ } // Override
VOID Custom_BGColumnTypeList( &List )				{ } // Override
VOID Custom_TasksTypeList( &List )					{ } // Override
VOID Custom_QueryTypeList( &List )					{ } // Override
VOID Custom_DelimitersList( &List )					{ } // Override
VOID Custom_ScannerTypeList( &List )				{ } // Override
VOID Custom_CameraCardList( &List )					{ } // Override
VOID Custom_PackageCutListTranslations( &List )		{ } // Override
VOID Custom_PackageCutList( &List )					{ } // Override
VOID Custom_PaperFillList( &List )					{ } // Override
VOID Custom_ImageTypeList( &List )					{ } // Override
VOID Custom_ColorTypeList( &List )					{ } // Override
VOID Custom_ColorTypeListTranslations( &List )		{ } // Override
VOID Custom_OpRestrictionList( &List )				{ } // Override
VOID Custom_OpRestrictionListTranslations( &List )	{ } // Override
VOID Custom_RawImageTypeList( &List )				{ } // Override
VOID Custom_StatesList( &List )						{ } // Override
VOID Custom_DeliveryList( &List )					{ } // Override
VOID Custom_FilmDriveVendorList( &List )			{ } // Override
VOID Custom_MacroTypeList( &List )					{ } // Override
VOID Custom_QueueStatusList( &List )				{ } // Override
VOID Custom_ChromaKeyBGIDOptionList( &List )		{ } // Override
VOID Custom_IF36PixServiceList( &List )				{ } // Override
VOID Custom_IF36PixStatusList( &List )				{ } // Override
VOID Custom_BookSourceTypeList( &List )				{ } // Override
VOID Custom_OrderTypeList( &List )					{ } // Override
VOID Custom_OrderSourceList( &List )				{ } // Override
VOID Custom_DefaultOrderStatusList( &List )			{ } // Override
VOID Custom_OrderStatusList( &List )				{ } // Override
VOID Custom_OrderStatusListTranslations( &List )	{ } // Override
VOID Custom_ActivityStatusList( &List )				{ } // Override
VOID Custom_ActivityTypeList( &List )				{ } // Override
VOID Custom_NodeNameList( &List )					{ } // Override
VOID Custom_PrintingReqList( &List )				{ } // Override
VOID Custom_SearchCriteriaList( &List )				{ } // Override
VOID Custom_DevicesList( &List )					{ } // Override
VOID Custom_PaperTypeList( &List )					{ } // Override
VOID Custom_PaperSurfaceList( &List )				{ } // Override
VOID Custom_ServiceCategoryTypeList( &List )		{ } // Override
VOID Custom_ProofBookColorList( &List )				{ } // Override
VOID Custom_ProofBookSizeList( &List )				{ } // Override
VOID Custom_ImageRestoreDirFormatList( &List )		{ } // Override
VOID Custom_WhoGetsFeaturedList( &List )			{ } // Override
VOID Custom_ShuffleStaffList( &List )				{ } // Override
VOID Custom_TypeOfCompositeList( &List )			{ } // Override
VOID Custom_PSPASizeList( &List )					{ } // Override
VOID Custom_RoutingTypeList( &List )				{ } // Override
VOID Custom_PrintOptionsList( &List )				{ } // Override
VOID Custom_LogLevel3List( &List )					{ } // Override
VOID Custom_PaperFillListTranslations( &List )		{ } // Override
VOID Custom_AnimotoPostRollList( &List )			{ } // Override
VOID Custom_CustomerTypeList( &List )				{ } // Override
VOID Custom_AnimotoPacingList( &List )				{ } // Override
VOID Custom_AnimotoFittingList( &List )				{ } // Override
VOID Custom_AnimotoResolutionList( &List )			{ } // Override
VOID Custom_AnimotoFrameRateList( &List )			{ } // Override
VOID Custom_AnimotoFormatList( &List )				{ } // Override
VOID Custom_AnimotoMovieStateList( &List )			{ } // Override
VOID Custom_AnimotoVisualTypeList( &List )			{ } // Override
VOID Custom_AnimotoRotationList( &List )			{ } // Override
VOID Custom_AnimotoAudioMixList( &List )			{ } // Override
VOID Custom_AnimotoCallbackFormatList( &List )		{ } // Override
VOID Custom_AnimotoStyleList( &List )				{ } // Override
VOID Custom_ForceOutputTypeList( &List )			{ } // Override
VOID Custom_ForceOutputTypeListTranslations( &List )	{ } // Override




VOID DefineFieldTypes( Database )
{
	 BRM_EAI_BATCH_ID_LEN				= 6;
	 BRM_EAI_BATCH_TEXT_LEN				= 80;
	 BRM_EAI_ORDER_ID_LEN				= 7;
	 BRM_EAI_OPERATOR_ID_LEN			= 30;
	 BRM_EAI_CUSTOMER_ID_LEN			= 15;
	 BRM_EAI_PACKAGES_SIZE				= 26;
	 BRM_EAI_PREDEF_PKG_ID_LEN			= 6;
	 BRM_EAI_UNITS_SIZE					= 8;
	 BRM_EAI_UNIT_ELEMENTS_SIZE			= 4;
	 BRM_EAI_COPYRIGHT_TEXT_LEN			= 19;
	 BRM_EAI_ORDER_TEXT_LEN				= 80;
	 BRM_EAI_ROLL_ID_LEN				= 4;
	 BRM_EAI_ROLL_TEXT_LEN				= 80;
	 BRM_EAI_REMAKE_REASON_COUNTS_SIZE	= 16;
	 BRM_EAI_TOTAL_REMAKES_PER_RUN_SIZE	= 3;
	 BRM_EAI_TREATMENTS_SIZE			= 4;
	 BRM_EAI_TREATMENT_TEXT_LEN			= 10;
	 BRM_EAI_FRAME_ID_LEN				= 3;
	 BRM_EAI_SEQUENCE_ID_LEN			= 4;
	 BRM_EAI_FRAME_TEXT_LEN				= 80;
	 BRM_EAI_LOG_DATE_LEN				= 12;
	 BRM_EAI_OPERATION_TEXT_LEN			= 16;
	 BRM_EAI_OPERATOR_NAME_LEN			= 80;
	 BRM_EAI_OPERATOR_PERMISSIONS_SIZE	= 1000;
	 BRM_EAI_OPERATOR_PASSWORD_LEN		= 20;
	 BRM_EAI_REMAKE_REASON_TEXT_LEN		= 24;
	 BRM_EAI_ACCESS_REQ_LEN				= 15;
	 BRM_EAI_STATUS_MSG_LEN				= 255;
	 BRM_EAI_ALTERNATE_ID_LEN			= 14;

	 BRM_EAI_ORDER_TYPE_MIN				= 1;
	 BRM_EAI_ORDER_TYPE_MAX				= 10;
	 BRM_EAI_COLOR_PREFERENCE_MIN		= -99;
	 BRM_EAI_COLOR_PREFERENCE_MAX		= 99;
	 BRM_EAI_PACKAGE_COUNT_MIN			= 0;
	 BRM_EAI_PACKAGE_COUNT_MAX			= 26;
	 BRM_EAI_PAPERBACK_WRITER_LAYOUT_MIN = 0;
	 BRM_EAI_PAPERBACK_WRITER_LAYOUT_MAX = 99;
	 BRM_EAI_GLASSINE_WRITER_LAYOUT_MIN	= 0;
	 BRM_EAI_GLASSINE_WRITER_LAYOUT_MAX	= 99;
	 BRM_EAI_FILM_TYPE_MIN				= 0;
	 BRM_EAI_FILM_TYPE_MAX				= 99;
	 BRM_EAI_FILM_SIZE_MIN				= 0;
	 BRM_EAI_FILM_SIZE_MAX				= 5;
	 BRM_EAI_COLOR_MIN					= 0;
	 BRM_EAI_COLOR_MAX					= 255;
	 BRM_EAI_CORRECTION_MIN				= -99;
	 BRM_EAI_CORRECTION_MAX				= 99;
	 BRM_EAI_OPERATION_MAX				= 99999999;


	SQLDouble	= ~<$[DATABASE/Managers].<Database>[SQLDouble]>~;
	SQLDate		= ~<$[DATABASE/Managers].<Database>[SQLDate]>~;
	SQLBinary = ~<$[DATABASE/Managers].<Database>[SQLBinary]>~;
	SQLLongBinary = ~<$[DATABASE/Managers].<Database>[SQLLongBinary]>~;
	SQLVarBinary = ~<$[DATABASE/Managers].<Database>[SQLVarBinary]>~;
	SQLLongVarBinary = ~<$[DATABASE/Managers].<Database>[SQLLongVarBinary]>~;
	SQLInteger	= ~<$[DATABASE/Managers].<Database>[SQLInteger]>~;
	SQLLongText	= ~<$[DATABASE/Managers].<Database>[SQLLongText]>~;
	SQLChar		= ~<$[DATABASE/Managers].<Database>[SQLChar]>~;

	if ( DefinedAndNotNull( UseUnicodeDataTypes ) )
	{
		if ( <UseUnicodeDataTypes> )
		{
			SQLLongText	= ~<$[DATABASE/Managers].<Database>[SQLLongNText]>~;
			SQLChar		= ~<$[DATABASE/Managers].<Database>[SQLNChar]>~;
		}
	}

	// Additional data types supported by Jet.
	JetSmallInt = ~SmallInt~;
	JetSingle	= ~Single~;

	Define: AllowableSpecialCharacters	USING	DDSymbol	
		Fields:	Value	~><$@!#%^&*)(_+=-":;/.,][?\ ~
	Hang:	AllowableSpecialCharacters	~[SYMBOLS]~

	Define: AllowablePathCharacters	USING	DDSymbol	
		Fields:	Value	~ ._\-:@#&+=<>$][~
	Hang:	AllowablePathCharacters	~[SYMBOLS]~

	Define: DisallowedChars	USING	DDSymbol	
		Fields:	Value	~~
	Hang:	DisallowedChars	~[SYMBOLS]~

	Define: OrderFormat	USING	DDSymbol	// Bremson-7, Hicks-6
		Fields:	Value	~%ld~
	Hang:	OrderFormat	~[SYMBOLS]~

	Define: RollFormat	USING	DDSymbol	
		Fields:	Value	~%04ld~				// Bremson-4, Hicks-6
	Hang:	RollFormat	~[SYMBOLS]~

	Define: FrameFormat	USING	DDSymbol	// Bremson-3, Hicks-3
		Fields:	Value	~%03ld~
	Hang:	FrameFormat	~[SYMBOLS]~

	Define: SubjectFormat USING	DDSymbol
		Fields:	Value	~%03ld~
	Hang:	SubjectFormat	~[SYMBOLS]~

	Define:	FieldTypes	USING DDSymbol
		Fields:	Value	~These strings are used to define the format of fields in a database table~
		Contains:  NODUPLICATES
		{
			Define:		SettingsType		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(20)~
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			Define:		SettingsItem		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		SettingsText		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Mask				RepeatStr(255,~%~)
						PromptChar			~ ~ ;

			Define:		~Application~		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		User				using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~User~
						Type				ComboBox
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		RetouchCode			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Code~
						Type				ComboBox
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;

			Define:		CategoryCode		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Code~
						Type				ComboBoxTextFit
						PromptChar			~ ~ ;

			Define:		UserEditField		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~User~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		Grade				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Grade~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		Teacher				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Teacher~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		School				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~School~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		HomeRoom			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Home Room~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		StudentID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Student ID~
						Mask				RepeatStr(15,~%~)
						DisallowedChars		~,"~
						PromptChar			~ ~ ;

			Define:		Copyright			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(40)~
						Displayname			~Copyright~
						Mask				RepeatStr(40,~*~)
						PromptChar			~ ~ ;

			Define:		CustomerID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Customer ID~
						Mask				RepeatStr(32,~%~)
						DisallowedChars		~,"()~
						PromptChar			~ ~ ;

			Define:		SlctblID			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Type				ComboBox
						Displayname			~ID~
						Mask				RepeatStr(32,~%~)
						DisallowedChars		~,"()~
						PromptChar			~ ~ ;
						
			Define:		ProdType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Type				ComboBox
						Displayname			~Prod Type~
						Mask				RepeatStr(32,~%~)
						DisallowedChars		~,"()~
						PromptChar			~ ~ ;


			Define:		TreatmentID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Treatment~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		BremsonCustomerID	using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_CUSTOMER_ID_LEN>)~
						Displayname			~Customer ID~
						Mask				RepeatStr(<BRM_EAI_CUSTOMER_ID_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonBatchID		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_BATCH_ID_LEN>)~
						Displayname			~Batch ID~
						Mask				RepeatStr(<BRM_EAI_BATCH_ID_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonOrderID		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_ORDER_ID_LEN>)~
						Displayname			~OrderID~
						Mask				RepeatStr(<BRM_EAI_ORDER_ID_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonRollID		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_ROLL_ID_LEN>)~
						Displayname			~Roll~
						Mask				RepeatStr(<BRM_EAI_ROLL_ID_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonFrameID		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_FRAME_ID_LEN>)~
						Displayname			~Frame~
						Mask				RepeatStr(<BRM_EAI_FRAME_ID_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonAlternateID		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_ALTERNATE_ID_LEN>)~
						Displayname			~AlternateID~
						Mask				RepeatStr(<BRM_EAI_ALTERNATE_ID_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonOrderDescription		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_ORDER_TEXT_LEN>)~
						Displayname			~Description~
						Mask				RepeatStr(<BRM_EAI_ORDER_TEXT_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonRollDescription		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_ROLL_TEXT_LEN>)~
						Displayname			~Description~
						Mask				RepeatStr(<BRM_EAI_ROLL_TEXT_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonCopyright	using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(<BRM_EAI_COPYRIGHT_TEXT_LEN>)~
						Displayname			~Copyright~
						Mask				RepeatStr(<BRM_EAI_COPYRIGHT_TEXT_LEN>,A)
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~
						PromptChar			~ ~ ;

			Define:		BremsonOrderType	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Order Type~
						MinValue			<BRM_EAI_ORDER_TYPE_MIN>			
						MaxValue			<BRM_EAI_ORDER_TYPE_MAX>				
						Wrap				F													
						SpinStart			<BRM_EAI_ORDER_TYPE_MIN>			
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;			

			Define:		BremsonFilmType	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Film Type~
						MinValue			<BRM_EAI_FILM_TYPE_MIN>			
						MaxValue			<BRM_EAI_FILM_TYPE_MAX>				
						Wrap				F													
						SpinStart			<BRM_EAI_FILM_TYPE_MIN>			
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;			

			Define:		BremsonFilmSize	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Film Size~
						MinValue			<BRM_EAI_FILM_SIZE_MIN>			
						MaxValue			<BRM_EAI_FILM_SIZE_MAX>				
						Wrap				F													
						SpinStart			<BRM_EAI_FILM_SIZE_MIN>			
						Mask				RepeatStr(1,~#~)
						PromptChar			~ ~ ;			

			Define:		BremsonFilmFormat	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Film Format~
						MinValue			1			
						MaxValue			99				
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;			

			Define:		BremsonRollCount	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Roll Count~
						MinValue			1			
						MaxValue			99				
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;			

			Define:		BremsonFrameCount	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Frame Count~
						MinValue			1			
						MaxValue			9999				
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~ ;			

			Define:		BremsonProductCode	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Accunet Product Code~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		ScanCount			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Scan Count~
						MinValue			1			
						MaxValue			999999			
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~ ;	
						
						
			Define:		MacroString			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Macro~
						Mask				RepeatStr(255,~*~)
						PromptChar			~ ~ 					
						AllowedChars		~<$[Symbols].AllowableSpecialCharacters[Value]>~	

			Define:		KNumber				using DDCtrlMaskEditDef	
				Fields:	Fields:	Definition	~<SQLChar>(10)~
						Displayname			~KNumber~
						Mask				RepeatStr(10,~#~)
						PromptChar			~ ~ ;


//-------------------------------------------
// Start of Generic definitions
//-------------------------------------------
			Define:		Generic255Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Description~
						Mask				RepeatStr(255,~*~)
						PromptChar			~ ~ ;
						
						
			Define:		Generic128Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(128)~
						Displayname			~Description~
						Mask				RepeatStr(128,~*~)
						PromptChar			~ ~ ;

			Define:		Generic64Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(64)~
						Displayname			~Description~
						Mask				RepeatStr(64,~*~)
						PromptChar			~ ~ ;

			Define:		Generic60Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(60)~
						Displayname			~Description~
						Mask				RepeatStr(60,~*~)
						PromptChar			~ ~ ;

			Define:		Generic48Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(48)~
						Displayname			~Description~
						Mask				RepeatStr(48,~*~)
						PromptChar			~ ~ ;

			Define:		Generic32Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Description~
						Mask				RepeatStr(32,~*~)
						PromptChar			~ ~ ;

			Define:		Generic30Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(30)~
						Displayname			~Description~
						Mask				RepeatStr(30,~*~)
						PromptChar			~ ~ ;

			Define:		Generic25Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(25)~
						Displayname			~Description~
						Mask				RepeatStr(25,~*~)
						PromptChar			~ ~ ;

			Define:		Generic20Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Description~
						Mask				RepeatStr(20,~*~)
						PromptChar			~ ~ ;

			Define:		Generic10Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Description~
						Mask				RepeatStr(10,~*~)
						PromptChar			~ ~ ;

			Define:		Generic6Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Description~
						Mask				RepeatStr(6,~*~)
						PromptChar			~ ~ ;

			Define:		Generic2Char		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(2)~
						Displayname			~Description~
						Mask				RepeatStr(2,~*~)
						PromptChar			~ ~ ;

			Define:		Generic4Digit		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ ~
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~ ;

			Define:		Generic5Digit		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ ~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		Generic1Digit		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ ~
						Mask				RepeatStr(1,~#~)
						PromptChar			~ ~ ;

			Define:		Generic2Digit		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ ~
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;
//-------------------------------------------
// End of Generic definitions
//-------------------------------------------


			Define:		GroupID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Group ID~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~JobQueueGroupID~ ;
						
						
						
			

			StringList( DCWhiteBalList,New,InListOrder,AddStrings,~AS_SHOT~,~INCANDESCENT~,~FLUORESCENT~,~SUNNY~,~CLOUDY~,~SHADE~,~FLASH~ );
			Custom_DCWhiteBalList( DCWhiteBalList );

			Define:		DCWhiteBalType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Type				ComboBox
						Displayname			~White Balance Type~
						ChoiceList			DCWhiteBalList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;

			Define:		SlctblInfoType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Type				ComboBox
						Displayname			~Subject Info Type~
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~
						
			Define:		SubjectInfoTableName	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(23)~
						Type				ComboBoxTextFit
						Displayname			~Info Table~
						Mask				RepeatStr(23,~A~)
						PromptChar			~ ~

			Define:		SubjectID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Subject ID~
						Mask				RepeatStr(32,~%~)
						DisallowedChars		~,"~
						PromptChar			~ ~ ;

			Define:		BatchID				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Batch ID~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		OrderID				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Order ID~
						Mask				RepeatStr(31,~%~)
						DisallowedChars		~,"^&*=|<>?/\:()~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~OrderID~ ;
						
			Define:		MultipleOrders		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(100)~
						Displayname			~Order ID~
						Mask				RepeatStr(100,~%~)
						DisallowedChars		~"^&*=|<>?/\:()~
						PromptChar			~ ~;

			Define:		NodeID				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Node ID~
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~;

			Define:		RImageWriterID	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBox
						Displayname			~Writer~
						Mask				RepeatStr(31,~%~)
						DisallowedChars		~,"~
						PromptChar			~ ~ ;

			Define:		ID					using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~ID~
						Mask				RepeatStr(32,~%~)
						DisallowedChars		~,"~
						PromptChar			~ ~ ;

			Define:		JobID				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(9)~
						Displayname			~Job ID~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~JobID~ ;

			Define:		ShootDescID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~ShootDescID~
						Mask				RepeatStr(31,~%~)
						DisallowedChars		~,"()~
						PromptChar			~ ~ ;

			Define:		SlctblShootDescID	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBox
						Displayname			~ShootDescID~
						Mask				RepeatStr(31,~%~)
						DisallowedChars		~,"~
						PromptChar			~ ~ ;

			Define:		ShootDescType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Type				ComboBox
						Displayname			~ShootDesc Type~
						Mask				RepeatStr(10,~%~)
						ReadOnly			~T~
						PromptChar			~ ~ ;

			Define:		LongName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(60)~
						Displayname			~Name~
						Mask				RepeatStr(60,~%~)
						PromptChar			~ ~ ;

			StringList( QuantityTypeList,New,InListOrder,AddStrings,~# Images~,~# Ordered Packages~,~Set Quantity~ );
			Custom_QuantityTypeList(QuantityTypeList);

			Define:		QtyType				using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			QuantityTypeList( GetCopyOf )
						Displayname			~Quantity Type~
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( MultiHandlingList,New,InListOrder,AddStrings,~Use All~,~Use First~,~Use Last~ );
			Custom_MultiHandlingList(MultiHandlingList);

			Define:		MultipleImages		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~MultiImages~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			MultiHandlingList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

//			StringList( ImagesFromList,New,InListOrder,AddStrings,~This Order~,~All Orders~,~Selected Orders~ );
			StringList( ImagesFromList,New,InListOrder,AddStrings,~This Order~,~All Orders~ );
			Custom_ImagesFromList(ImagesFromList);

			Define:		ImagesFromType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ImagesFrom~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			ImagesFromList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;
					
			StringList( ImagesPopulationList,New,InListOrder,AddStrings,~Entire Shoot~,~All Orders~,~All Images~ );
			Custom_ImagesPopulationList(ImagesPopulationList);
	
			Define:		ImagesPopulation	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Images Population~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			ImagesPopulationList( GetCopyOf )
						Constraints			~Default 0~
						Mask				~#~
						PromptChar			~ ~ ;
						
						
			StringList( HeadFindingAlgorithmList,New,InListOrder,AddStrings,~Find By Eyes~,~Find Entire Head~ );
			Custom_HeadFindingAlgorithmList(HeadFindingAlgorithmList);
	
			Define:		HeadFindingAlgorithm	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Head Finding Algorithm~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			HeadFindingAlgorithmList( GetCopyOf )
						Constraints			~Default 0~
						Mask				~##~
						PromptChar			~ ~ ;
						
			StringList( BalanceAlgorithmList,New,InListOrder,AddStrings,~Group Balance~,~Balance from Reference Image~ );
			Custom_BalanceAlgorithmList(BalanceAlgorithmList);
	
			Define:		BalanceAlgorithm	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Balance Algorithm~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			BalanceAlgorithmList( GetCopyOf )
						Constraints			~Default 0~
						Mask				~##~
						PromptChar			~ ~ ;



			// Assumed this list is created from existing OrderIDs. Don't need specific Mask checking
			// At 255 chars, can hold 8 (31 char) comma separated IDs.
			Define:		SlctdOrders			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~SlctdOrders~
						Mask				RepeatStr(255,~*~)
						PromptChar			~ ~ ;

			Define:		ColorChar			using DDCtrlHotSpotEditDef	
				Fields:	Definition			~<SQLChar> (11)~
						Displayname			~Color~
						Mask				RepeatStr(11,~#~)
						PromptChar			~ ~
						AllowedChars		~ ~;

			Define:		RunCount			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~RunCount~
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~

			Define:		RenderEngineName	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~RenderEngine Name~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		FileType			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Type~ 
						Mask				RepeatStr(6,~?~)
						PromptChar			~ ~
						;

			Define:		OutputFileType			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(12)~
						Displayname			~Type~ 
						Mask				RepeatStr(12,~?~)
						PromptChar			~ ~
						;

			Define:		AsciiStringNoSpaces	 using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~~ 
						Mask				RepeatStr(32,~?~)
						PromptChar			~ ~
						;
						
						
		
		

//			StringList( SaveFileTypeList,New,InListOrder,AddStrings, ~TIFF~, ~JPEG~, ~EXIF~ ) ;
			StringList( SaveFileTypeList,New,InListOrder,AddStrings, ~TIFF~, ~JPEG~, ~EXIF~, ~PDF~, ~PNG~, ~Tiff Lossless~ ) ;
			Custom_SaveFileTypeList(SaveFileTypeList);

			Define:		SaveFileType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Save File Type~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			SaveFileTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			Define:		SaveFileTypeText	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Save File Type~ 
						Type				ComboBoxTextFit
						ChoiceList			SaveFileTypeList( GetCopyOf )
						Mask				RepeatStr(6,~%~)
						PromptChar			~ ~ ;

			Define:		Extension			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Ext~ 
						Mask				RepeatStr(6,~%~)
						PromptChar			~ ~
						AllowedChars		~ ._-~

			Define:		JobName				using DDCtrlHotSpotEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Job Name~ 
						Mask				RepeatStr(31,~%~)
						DisAllowedChars		~*~
						PromptChar			~ ~ ;						

			// New ones must always go on the end or you will invalidate the customers current data
			
			StringList( ProductColumnTypeList,New,InListOrder,AddStrings,~Program ID~,~DP2 Product~,~Product of DP2 Product/Qty~,
										~Quantity of DP2 Product/Qty~,~Customer Product~,~Product of Customer Product/Qty~,~Quantity of Customer Product/Qty~,
										~Multiple 1 Character Customer Products~,~DP2 BGID~,~Cust BGID~,~Qty-LetterCode~,
										~User Defined 1~,~User Defined 2~,~User Defined 3~,~User Defined 4~,
										~User Defined 5~,~User Defined 6~,~User Defined 7~,~User Defined 8~,
										~User Defined 9~,~User Defined 10~ );
			Custom_ProductColumnTypeList(ProductColumnTypeList);
												 
			Define:		ProductColumnType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Type~
						Type				ComboBoxZeroBasedEx
						ChoiceList			ProductColumnTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~;

			StringList( KparsColumnTypeList,New,InListOrder,AddStrings,~Retouch~,~Retouch Code~,~Retouch Setup~ );
			Custom_KparsColumnTypeList(KparsColumnTypeList);
											 
			Define:		KparsColumnType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Type~
						Type				ComboBoxZeroBasedEx
						ChoiceList			KparsColumnTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~;
						
			StringList( BGColumnTypeList,New,InListOrder,AddStrings,~BG ID~,~Customer BG ID~ );
			Custom_BGColumnTypeList(BGColumnTypeList);
											 
			Define:		BGColumnType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~BG Type~
						Type				ComboBoxZeroBasedEx
						ChoiceList			BGColumnTypeList( GetCopyOf )
						Mask				~#~
						Constraints			~Default 0~	
						PromptChar			~ ~;

			Define:		ColumnName			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Column~
						Type				ComboBox
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;
						
			Define:		BGColumnFor	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Product Type~
						Type				ComboBox
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~;

			StringList( TasksTypeList,New,InListOrder,AddStrings,~Orders~,~Images~,~Customers~,~Products~,~OrderItems~,~Printers~,
											~Profiles~,~Settings~,~SystemSettings~,~Jobs~,~HTML~,~Open~,~ACTION~,~DOC~,~KPL~,~Script~ );
			Custom_TasksTypeList(TasksTypeList);

			Define:		TasksType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Tasks Type~
						Type				ComboBoxTextFit
						ChoiceList			TasksTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			Define:		TaskName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Task Name~
						DisplayWidth		31 
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		UserTaskName		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Task Name~
						Type				ComboBox
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;


			Define:		UserTaskCategory	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Task Category~
						Type				ComboBox
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;


			Define:		ICCProfile	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~ICCProfile~
						Type				ComboBox
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;
						
		Define:		TildeSafeString			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(256)~
						Mask				RepeatStr(256,~*~)
						PromptChar			~ ~ ;


			Define:		QueryName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(64)~
						Displayname			~Query Name~
						DisplayWidth		64
						Mask				RepeatStr(64,~%~)
						PromptChar			~ ~ ;

			StringList( QueryTypeList,New,InListOrder,AddStrings,~Orders~,~Images~,~Customers~,~Products~,~OrderItems~,~SubjectInfo~,~Shared~,~KPL~,~Maintenance~ );
			Custom_QueryTypeList(QueryTypeList);

			Define:		QueryType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Query Type~
						Type				ComboBox
						ChoiceList			QueryTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			Define:		QueryDescription	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(60)~
						Displayname			~Query Description~
						Mask				RepeatStr(60,~%~)
						PromptChar			~ ~ ;

			Define:		SortOnTable			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(30)~
						Displayname			~Sort Table~
						Type				ComboBoxTextFit
						Mask				RepeatStr(30,~%~)
						PromptChar			~ ~ ;

			Define:		SortName	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Sort Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		SlctblSortName	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBoxTextFit
						Displayname			~Sort By~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~

			Define:		SlctblDlvrblName	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(64)~
						Type				ComboBox
						Displayname			~Name~
						Mask				RepeatStr(64,~%~)
						PromptChar			~ ~

			Define:		DlvrblName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(64)~
						Displayname			~Name~
						Mask				RepeatStr(64,~%~)
						PromptChar			~ ~ ;

			Define:		Criteria			using DDCtrlMaskEditDef		// NOT USED?
				Fields:	Definition			~<SQLChar>(64)~
						Mask				RepeatStr(64,~%~)
						PromptChar			~ ~ ;

			Define:		Description			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLLongText>~
						Displayname			~Description~
						Mask				RepeatStr(1024,~*~)
						PromptChar			~ ~ ;

			Define:		QueryText			using DDCtrlEditDef	
				Fields:	Definition			~<SQLLongText>~
						Displayname			~Query Text~
						MultiLine			T
						ScrollBar			T
						Mask				RepeatStr(1024,~*~)
						LangSection			~FieldTypes~
						PromptChar			~ ~ ;

			Define:		FieldName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Field Name~
						Mask				RepeatStr(32,~%~)
						LangSection			~FieldTypes~
						LangItem			~FieldName~
						PromptChar			~ ~ ;
						
			Define:		PrimatteKeyData		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLLongText>~
						Displayname			~Key Data~
						Mask				RepeatStr(1024,~%~)
						PromptChar			~ ~ ;			
						

			Define:		TypeName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Display Name~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		DisplayName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Display Name~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		FieldMask			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Field Mask~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		Allowed				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Allowed Chars~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		DisAllowed			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Disallowed Chars~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		PromptChar			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(1)~
						Displayname			~Prompt Char~
						Mask				RepeatStr(1,~%~)
						PromptChar			~ ~ ;

			Define:		QuoteChar			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~QuoteChar~
						Mask				RepeatStr(32,~*~)
						PromptChar			~ ~ ;

			Define:		TableName			using DDCtrlMaskEditDef		// SQL is the limiting factor here
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Table Name~
						Mask				RepeatStr(32,A)				// TableNames are ascii
						PromptChar			~ ~

			Define:		TableNameCombo		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Table Name~
						Type				ComboBox
						Mask				RepeatStr(32,~A~)
						PromptChar			~ ~ ;


			Define:		PrimaryKey			using DDCtrlMaskEditDef		// SQL is the limiting factor here
				Fields:	Definition			~<SQLChar>(80)~
						Displayname			~Primary Key~
						Mask				RepeatStr(80,~%~)				// PrimaryKeys are ascii
						AllowedChars		~,~
						PromptChar			~ ~;

			StringList( DelimitersList,New,InListOrder,AddStrings,~,~,~Space~,~Tab~,~White~,~CarriageReturn~ );
			Custom_DelimitersList(DelimitersList);

			Define:		Delimiters			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Delimiters~
						Mask				RepeatStr(32,~%~)
						ChoiceList			DelimitersList( GetCopyOf )
						Type				ComboBox	// TextFit
						PromptChar			~ ~ ;

			Define:		FieldType			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~FieldType~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		FieldSize			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~FieldSize~
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~

			Define:		FileResolution		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~FileResolution~
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~

			Define:		CropCode			using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(1)~
						Displayname			~CropCode~
						Mask				RepeatStr(2,~A~)		// this stuff is all ascii
						PromptChar			~ ~

			Define:		BremsonCropCode		using DDCtrlMaskEditDef	
				Fields:	Definition			~CHAR(2)~
						Displayname			~BremsonCropCode~
						Mask				RepeatStr(2,~A~)		// Bremson stuff is all ascii
						PromptChar			~ ~

			Define:		OffsetIncrementUnit	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~OffsetIncrementUnit~
						MinValue			0
						Wrap				F													
						SpinStart			0.0
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		OffsetPPI			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~OffsetPPI~
						MinValue			100.			
						MaxValue			2000.0				
						Wrap				F													
						SpinStart			1000.0			
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		MaxThumbNailSize	using DDCtrlEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~MaxThumbNailSize~
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~ ;			

			Define:		DRGBRefs			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Type				ComboBoxTextFit
						Displayname			~DRGBRefs~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;			

			Define:		OpticalZoom			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Optical Zoom~
						MinValue			(-50)
						MaxValue			50
						Wrap				F
						SpinStart			0
						Mask				RepeatStr(6,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			

			Define:		Percent				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Percent~
						MinValue			0.			
						MaxValue			100.0				
						Wrap				F													
						SpinStart			0.0			
						Mask				RepeatStr(7,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		IntegerPercent		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Percent~
						MinValue			0.			
						MaxValue			100				
						Wrap				F													
						SpinStart			0.0	
						Constraints			~Default 100~		
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			
						
			Define:		MinFaceSize		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Min Face Size~
						MinValue			0.			
						MaxValue			100.0				
						Wrap				F													
						SpinStart			0.0		
						Constraints			~Not NULL  Default 2~	
						Mask				RepeatStr(5,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;			


			Define:		EdgeFindingStrength		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Edge Finding Strength~
						MinValue			0.			
						MaxValue			300				
						Wrap				F													
						SpinStart			0.0	
						Constraints			~Not NULL Default 200~		
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			


			Define:		StdDevLimit		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Std Dev Limit~
						MinValue			50			
						MaxValue			300				
						Wrap				F													
						SpinStart			0	
						Constraints			~Not NULL Default 150~		
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			

			StringList( ScannerTypeList,New,InListOrder,AddStrings,~HR500~,~RFS 3570 Plus~ );
			Custom_ScannerTypeList(ScannerTypeList);

			Define:		ScannerType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Scanner Type~
						Type				ComboBox	// TextFit
						ChoiceList			ScannerTypeList( GetCopyOf )
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;			

			Define:		ScanSetupName		using DDCtrlEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Scan Setup~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~

			Define:		SelectableScanSetupName	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Type				ComboBoxTextFit
						Displayname			~Scan Setup~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~

			Define:		SelectableFTScanSetupName	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Type				ComboBoxTextFit
						Displayname			~Filmterm Scan Setup~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~

			Define:		SpeedQuality		using DDCtrlEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Speed Quality~
						Mask				RepeatStr(6,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			

			Define:		FilmType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Film Type~
						Type				ComboBox	// TextFit
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		DSbaPrefType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Preference Setup~
						Type				ComboBox	// TextFit
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		Volume				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Output Path~
						Mask				RepeatStr(255,~%~)
						DisallowedChars		~,"^&*=|<>?~
						PromptChar			~ ~ ;

			Define:		ScanResolution		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Scan Resolution~
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;			

			Define:		Roll				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Roll~
						Mask				RepeatStr(31,~%~)
						DisallowedChars		~,"^&*=|<>?/\:()~
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~Roll~ ;

			Define:		FilmSize			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(14)~
						Displayname			~FilmSize~
						Mask				RepeatStr(14,~%~)
						PromptChar			~ ~ ;

			Define:		Frame				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Frame~
						Mask				RepeatStr(31,~%~)
						DisallowedChars		~,"^&*=|<>?/\:()~
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~Frame~ ;

			Define:		Path				using DDCtrlHotSpotEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Path~ 
						Mask				RepeatStr(255,~%~)
						DisallowedChars		~,"^&*=|<>?()~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~Path~ ;

			Define:		FilePath			using DDCtrlHotSpotEditDef
				Fields:	Definition			~<SQLLongText>~
						Displayname			~Path~ 
						Mask				RepeatStr(255,~%~)
						DisAllowedChars		~*~
						PromptChar			~ ~ ;

			Define:		AnyPath				using DDCtrlHotSpotEditDef
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Path~ 
						Mask				RepeatStr(255,~*~)
						PromptChar			~ ~ ;

			Define:		WebHost				using DDCtrlMaskEditDef
				Fields:	Definition			~<SQLChar>(80)~
						Displayname			~Web Host~ 
						Mask				RepeatStr(80,~*~)
						DisallowedChars		~~
						PromptChar			~ ~ ;
						
			Define:		WebURL				using DDCtrlMaskEditDef
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~URL~ 
						Mask				RepeatStr(255,~*~)
						DisallowedChars		~~
						PromptChar			~ ~ ;
						
			Define:		WebURLLong			using DDCtrlMaskEditDef
				Fields:	Definition			~<SQLLongText>~
						Displayname			~URL~ 
						Mask				RepeatStr(1024,~*~)
						DisallowedChars		~~
						PromptChar			~ ~ ;
						
			Define:		URLPath				using DDCtrlHotSpotEditDef
				Fields:	Definition			~<SQLLongText>~
						Displayname			~URL~ 
						Mask				RepeatStr(1024,~*~)
						PromptChar			~ ~ ;

			Define:		SbaCmd				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Cmd~
						MinValue			0
						MaxValue			16
						Wrap				F
						SpinStart			100
						Mask				RepeatStr(1,~#~)
						PromptChar			~ ~ ;			

			Define:		CMMField			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~CMM~
						MinValue			0
						MaxValue			200
						Wrap				F
						SpinStart			100
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			

			Define:		PrefClass		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Preference Class~
						MinValue			(-1500)
						MaxValue			2500
						Wrap				F
						SpinStart			0
						Mask				RepeatStr(5,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			

			Define:		PCWF				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~PCWF~
						MinValue			0
						MaxValue			1500
						Wrap				F
						SpinStart			700
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~ ;			

			Define:		SbaNuc				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						SpinStart			0
						Wrap				F
						Mask				~##.##~
						AllowedChars		~-.~
						PromptChar			~ ~ ;			

			Define:		SbaDouble			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Mask				~#.##~
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		CalTimeout			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~CalTimeout~
						MinValue			0
						MaxValue			99
						Wrap				F
						SpinStart			3
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;			

			StringList( CameraCardList,New,InListOrder,AddStrings,~None~,~Leading~,~Trailing~,~Bottom~ );
			Custom_CameraCardList(CameraCardList);

			Define:		CameraCardType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Camera Card Position~
						Type				ComboBox	// TextFit
						ChoiceList			CameraCardList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;			

			StringList( PackageCutList,New,InListOrder,AddStrings,~None~,~Barcode~,~Punch~ );
			Custom_PackageCutList(PackageCutList);
			StringList( PackageCutListTranslations,New,InListOrder,AddStrings,~None~,~Barcode~,~Punch~ );
			Custom_PackageCutListTranslations(PackageCutListTranslations);

			Define:		PackageCut			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			PackageCutList( GetCopyOf ) 
						Displayname			~PackageCut~
						Mask				~#~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~PackageCut~
						LangChoiceList		PackageCutListTranslations( GetCopyOf ) ;

			StringList( PaperFillList,New,InListOrder,AddStrings,~None~,~Lucht~,~Arbitrary~ );
			Custom_PaperFillList(PaperFillList);
			
			StringList( PaperFillListTranslations,New,InListOrder,AddStrings,~None~,~Lucht~,~Arbitrary~ );
			Custom_PaperFillListTranslations(PaperFillListTranslations);

			Define:		PaperFill			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			PaperFillList( GetCopyOf ) 
						Displayname			~Paper Fill Type~
						Mask				~#~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~PaperFill~
						LangChoiceList		PaperFillListTranslations( GetCopyOf ) ;
						
						
			StringList( ForceOutputTypeList,New,InListOrder,AddStrings,~None~,~Force PDF Output~,~Publish for Movie Making~ );
			Custom_ForceOutputTypeList(ForceOutputTypeList);
			
			StringList( ForceOutputTypeListTranslations,New,InListOrder,AddStrings,~None~,~Lucht~,~Arbitrary~ );
			Custom_ForceOutputTypeListTranslations(ForceOutputTypeListTranslations);

			Define:		ForceOutputType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			ForceOutputTypeList( GetCopyOf ) 
						Displayname			~Force Output Type~
						Mask				~#~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~ForceOutputType~
						LangChoiceList		ForceOutputTypeListTranslations( GetCopyOf ) ;


			StringList( ImageTypeList,New,InListOrder,AddStrings,~Order~,~Product~ );
			Custom_ImageTypeList(ImageTypeList);

			Define:		ImageType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			ImageTypeList( GetCopyOf ) 
						Displayname			~ImageType~
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( ColorTypeList,New,InListOrder,AddStrings,~Unknown~,~Color~,~BW~,~BWSpot~,~Sepia~,~SepiaSpot~ );
			Custom_ColorTypeList(ColorTypeList);
			StringList( ColorTypeListTranslations,New,InListOrder,AddStrings,~Unknown~,~Color~,~BW~,~BWSpot~,~Sepia~,~SepiaSpot~ );
			Custom_ColorTypeListTranslations(ColorTypeListTranslations);

			Define:		ColorType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			ColorTypeList( GetCopyOf ) 
						Displayname			~ColorType~
						Mask				~#~
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~ColorType~
						LangChoiceList		ColorTypeListTranslations( GetCopyOf ) ;

			StringList( OpRestrictionList,New,InListOrder,AddStrings,~None~,~AE Batch~,~AE and SBA Batch~,~All~ );
			Custom_OpRestrictionList(OpRestrictionList);
			StringList( OpRestrictionListTranslations,New,InListOrder,AddStrings,~None~,~AEBatch~,~AEandSBABatch~,~All~ );
			Custom_OpRestrictionListTranslations(OpRestrictionListTranslations);

			Define:		OpRestriction		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			OpRestrictionList( GetCopyOf ) 
						Displayname			~Op Restrictions~
						Mask				~#~
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~OpRestriction~
						LangChoiceList		OpRestrictionListTranslations( GetCopyOf ) ;

			StringList( RawImageTypeList,New,InListOrder,AddStrings,~DCR~,~HR500~,~TIFF~,~JPEG~,~RAW~ );
			Custom_RawImageTypeList(RawImageTypeList);

			Define:		RawImageType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			RawImageTypeList( GetCopyOf ) 
						Displayname			~ImageType~
						Mask				~#~
						PromptChar			~ ~ ;

			Define:		Category			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Category~
						Mask				RepeatStr(31,~%~)
						DisallowedChars		~\:,"^&*=|<>?().~
						PromptChar			~ ~ ;
						
			Define:		ProductLevel		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Level~
						Mask				RepeatStr(20,~%~)
						DisallowedChars		~\/:,"^&*=|<>?()~
						PromptChar			~ ~ ;


			Define:		NodeCombo			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxTextFit
						Displayname			~Sequence~
						Mask				RepeatStr(6,~#~)
						AllowedChars		~-~
						PromptChar			~ ~

			Define:		Node				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Sequence~
						Mask				RepeatStr(6,~#~)
						AllowedChars		~-~
						PromptChar			~ ~


			Define:		Count				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Count~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~

			Define:		Sequence			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Sequence~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~
						Constraints			~NOT NULL Default 0~
						LangSection			~FieldTypes~
						LangItem			~Sequence~ ;

			Define:		SubSequence			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~SubSequence~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~
						Constraints			~NOT NULL Default 0~
						LangSection			~FieldTypes~
						LangItem			~SubSequence~ ;

			Define:		MultiPunch			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Sequence~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~

			Define:		CustomerName		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Name~
						Mask				RepeatStr(31,~*~)
						PromptChar			~ ~ ;

			Define:		Name				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~Name~ ;
						
						
			Define:		AnimotoSetup		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~
						DisallowedChars		~ ~
						LangSection			~FieldTypes~
						LangItem			~Name~ ;
						
			Define:		BGID			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~BGID~
						Type				ComboBox
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~
						DisAllowedChars		~,"^&*=|<>?()~;
						
			Define:		NameCombo			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~Name~ ;

			Define:		OrderName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(60)~
						Displayname			~Order Name~
						Mask				RepeatStr(60,~*~)
						PromptChar			~ ~ ;

			Define:		MacroName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(64)~
						Displayname			~MacroName~
						Mask				RepeatStr(64,~%~)
						PromptChar			~ ~ ;

			Define:		Street				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(40)~
						Displayname			~Street~
						Mask				RepeatStr(40,~*~)
						PromptChar			~ ~ ;

			Define:		County				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(40)~
						Displayname			~County~
						Mask				RepeatStr(40,~%~)
						PromptChar			~ ~ ;

			Define:		City				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(40)~
						Displayname			~City~ 
						Mask				RepeatStr(40,~*~)
						PromptChar			~ ~ ;

			StringList( StatesList,New,InListOrder,AddStrings,AL,AK,AS,AZ,AR,CA,CO,CT,DE,DC,FL,GA,HI,ID,IL,IN,IA,KS,KY,LA,ME,MD,MA,MI,MN,MS,MO,MT,NE,NV,NH,NJ,NM,NY,NC,ND,OH,OK,OR,PA,RI,SC,SD,TN,TX,UT,VT,VA,WA,WV,WI,WY);
			Custom_StatesList(StatesList);
			
			Define:		State				using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(75)~
						Type				ComboBoxTextFit
						ChoiceList			StatesList( GetCopyOf ) 
						Displayname			~State~
						Mask				RepeatStr(16,~U~)	// Store states as uppercase ( ex. NY )
						PromptChar			~ ~ ;

			Define:		Country				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(40)~
						Displayname			~Country~
						Mask				RepeatStr(40,~%~)
						PromptChar			~ ~ ;

			Define:		ZipCode				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Zip Code~
						Mask				RepeatStr(15,~A~)
						AllowedChars		~- ~
						PromptChar			~ ~ ;
						
						
			Define:		AnimotoPassword		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Password~
						Mask				RepeatStr(32,~%~)
						DisallowedChars		~<>&"~
						PromptChar			~ ~ ;

			Define:		Password			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Password~
						Mask				RepeatStr(15,~A~)
						AllowedChars		~-~
						PromptChar			~ ~ ;
						
						
		Define:			UserName_36Pix		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(50)~
						Displayname			~Lab Name~
						AllowedChars		~-_~
						Mask				RepeatStr(50,~A~)
						PromptChar			~ ~ ;

			Define:		Password_36Pix		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(48)~
						Displayname			~Password~
						Mask				RepeatStr(15,~A~)
						AllowedChars		~-_~
						PromptChar			~ ~ ;
						

			StringList( DeliveryList,New,InListOrder,AddStrings,~CD~,~Internet~,~Both~ );
			Custom_DeliveryList(DeliveryList);

			Define:		Delivery			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Delivery~
						Type				ComboBoxTextFit
						ChoiceList			DeliveryList( GetCopyOf )
						Mask				~##########~
						PromptChar			~ ~ ;

			Define:		InetImgQuality		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~InetImgQuality~
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~

			Define:		CDImgQuality		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~CDImgQuality~
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~

			Define:		NotificationEmail	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(80)~
						Displayname			~Notification Email~
						Mask				RepeatStr(80,~%~)
						PromptChar			~ ~ ;

			Define:		Email				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(40)~
						Displayname			~Email Address~
						Mask				RepeatStr(40,~%~)
						PromptChar			~ ~ ;

			Define:		LabUniqueID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(40)~
						Displayname			~Lab Unique ID~
						Mask				RepeatStr(40,~%~)
						PromptChar			~ ~ ;

			Define:		Phone				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(15)~
						Mask				~(###) ###-####~
						Displayname			~Phone~
						PromptChar			~ ~ ;

			Define:		PhoneGeneric		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(15)~
						Mask				~###############~
						Displayname			~~
						PromptChar			~ ~ ;

			Define:		DateTime			using DDCtrlDateTimeDef	
				Fields:	Definition			~<SQLDate>~
						Displayname			~Date Time~
						UseCal				T
						FastInput			T
						ValidMode			3
						UserFormat			Translate(~mm/dd/yyyy~)
						LangSection			~FieldTypes~
						LangItem			~DateTime~ ;
						
		Define:		DateTimeShowingTime		using DDCtrlDateTimeDef	
				Fields:	Definition			~<SQLDate>~
						Displayname			~Date Time~
						UseCal				F
						FastInput			T
						ValidMode			3
						FormatType			3
						CustomFormat		~yyyy'/'MM'/'dd HH':'mm':'ss~
						UserFormat			~yyyy'/'MM'/'dd HH':'mm':'ss~;

				
			Define:		TimeInterval		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(8)~
						Displayname			~Time Interval~
						Mask				~##:##:##~


IF 0	// WE CAN'T DEPEND ON ALL DATABASE MANAGERS HAVING MILLISECONDS IN THERE DATETIME
{
			Define:		SortableDateTime	using DDCtrlDateTimeDef	
				Fields:	Definition			~<SQLDate>~
						Displayname			~Date Time~
						UseCal				T
						FastInput			T
						ValidMode			3
						FormatType			3 
						CustomFormat		~yyyy'/'MM'/'dd hh':'mm':'ss~
}
			Define:		SortableDateTime	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(24)~
						Displayname			~Date Time~
						Mask				~####/##/## ##:##:##.###~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~SortableDateTime~ ;

			Define:		DateTimeWms			using DDCtrlStaticDef	
				Fields:	Definition			~<SQLChar>(24)~
						Displayname			~Date Time~

			Define:		AsciiDate			using DDCtrlEditDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Date~
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;			

			Define:		TimeWms				using DDCtrlEditDef		// HH:MM:SS:MS	
				Fields:	Definition			~<SQLChar>(13)~
						Displayname			~Time~
						//Mask				~##:##:##:####~
						//PromptChar		~ ~

			Define:		TimeOffset			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Time~	
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~


			Define:		Priority			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Priority~
						MinValue			0			
						MaxValue			100				
						Wrap				F													
						SpinStart			50			
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~Priority~ ;
	
			Define:		Quantity			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Quantity~
						MinValue			0			
						MaxValue			9999				
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~Quantity~ ;

			Define:		Interval			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Interval~
						MinValue			0			
						MaxValue			99999				
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		SignedInterval		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Signed Interval~
						MinValue			(-99999)
						MaxValue			99999				
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~ ;

			Define:		DoubleValue	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						SpinStart			0
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		NegativeDoubleValue	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						SpinStart			0
						MinValue			~-20~			
						MaxValue			~20~
						Wrap				F
						AllowedChars		~-.~
						PromptChar			~ ~ ;			

			Define:		Renderer			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Renderer~
						MinValue			1			
						MaxValue			5				
						Wrap				F													
						SpinStart			1			
						Mask				~#~
						PromptChar			~ ~ ;

			Define:		Boolean				using DDCtrlCheckBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~~ 
						Mask				~#~
						Constraints			~Default 0~
						PromptChar			~ ~ ;
						
			StringList( GSList,New,InListOrder,AddStrings,~None~,~Out~,~Complete~,~Error~ );

			Define:		ExternalGS			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~External GS~
						Type				ComboBoxZeroBasedEx
						ChoiceList			GSList( GetCopyOf );

			Define:		BooleanTF			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(1)~
						Displayname			~~ 
						Mask				~U~		// Store BooleanTF as upper case T or F
						PromptChar			~ ~ ;

			Define:		ByteValue			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~~
						MinValue			0
						MaxValue			255
						Wrap				F
						SpinStart			0
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;

			StringList( BaudList,New,InListOrder,AddStrings,~1200~,~2400~,~4800~,~9600~ );

			Define:		SerialBaud			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(4)~
						Displayname			~Baud~
						Type				ComboBoxTextFit
						ChoiceList			BaudList( GetCopyOf )
						Mask				~####~
						PromptChar			~ ~ ;

			Define:		SerialByteSize		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Byte Size~
						MinValue			4
						MaxValue			8
						Wrap				f
						SpinStart			4
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( ParityList,New,InListOrder,AddStrings,	Translate(~None~),
																Translate(~Odd~),
																Translate(~Even~),
																Translate(~Mark~),
																Translate(~Space~) );

			Define:		SerialParity		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Parity~
						Type				ComboBoxZeroBasedEx
						ChoiceList			ParityList( GetCopyOf )
						Mask				RepeatStr(5,~%~)
						PromptChar			~ ~ ;

			StringList( StopBitsList,New,InListOrder,AddStrings,~1.0~,~1.5~,~2.0~ );

			Define:		SerialStopBits		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Stop Bits~
						Type				ComboBoxZeroBasedEx
						ChoiceList			StopBitsList( GetCopyOf ) 
						Mask				RepeatStr(3,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		SerialPort			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Port~
						MinValue			1			
						MaxValue			8				
						Wrap				T													
						SpinStart			1 
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( BaudList,New,InListOrder,AddStrings,~1200~,~2400~,~4800~,~9600~ );


			// General Film Transport Definitions/Types

//				StringList( FilmDriveVendorList,New,InListOrder,AddStrings,~Bremson~,~Hicks~,~Lucht~,~Long Roll~,~Long Roll Auto Frame~,~Strip~,~None~ );
				StringList( FilmDriveVendorList,New,InListOrder,AddStrings,~Bremson~,~Hicks~,~Lucht~,~Long Roll~,~Strip~,~None~ );
				Custom_FilmDriveVendorList(FilmDriveVendorList);

			Define:		FilmDriveVendor		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(22)~
						Displayname			~Drive Vendor~
						Type				ComboBoxTextFit
						ChoiceList			FilmDriveVendorList( GetCopyOf )
						Mask				RepeatStr(22,~%~)
						PromptChar			~ ~ ;

//				StringList( Hr500FilmDriveVendorList,New,InListOrder,AddStrings,~Long Roll~,~Long Roll Auto Frame~,~Strip~,~None~ );
				StringList( Hr500FilmDriveVendorList,New,InListOrder,AddStrings,~Long Roll~,~Strip~,~None~ );

			Define:		Hr500FilmDriveVendor using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(22)~
						Displayname			~Drive Vendor~
						Type				ComboBoxTextFit
						ChoiceList			Hr500FilmDriveVendorList( GetCopyOf )
						Mask				RepeatStr(22,~%~)
						PromptChar			~ ~ ;

			StringList( EditorVendorList,New,InListOrder,AddStrings,~Bremson~,~Hicks~,~Lucht~ );

			Define:		EditorVendor		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Editor~
						Type				ComboBoxTextFit
						ChoiceList			EditorVendorList( GetCopyOf )
						Mask				RepeatStr(15,~%~)
						PromptChar			~ ~ ;

			StringList( FilmDirectionList,New,InListOrder,AddStrings,	Translate(~Forward~),
																		Translate(~Reverse~) );
			Define:		FilmDirection		using DDCtrlComboBoxDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Film Direction~
						Type				ComboBoxZeroBasedEx
						ChoiceList			FilmDirectionList( GetCopyOf ) 
						Mask				RepeatStr(8,~%~)
						PromptChar			~ ~ ;

			Define:		FilmSettleTime		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Settle Time~
						MinValue			0			
						MaxValue			999				
						Wrap				T
						SpinStart			1			
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;

			Define:		AdvanceDistance		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Advance Distance~
						MinValue			(-32768)
						MaxValue			32767
						Wrap				T
						SpinStart			0
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~ ;

			Define:		FramePadding		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Frame Padding~
						MinValue			0
						MaxValue			5
						Wrap				T
						SpinStart			5
						Mask				RepeatStr(1,~#~)
						PromptChar			~ ~ ;

			Define:		XSliderIFactor	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~XSliderIFactor~
						MinValue			0
						MaxValue			30
						Wrap				T
						SpinStart			0
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			// Hicks Film Transport Specific Definitions/Types

			Define:		HicksSetupXOffset	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Setup X Offset~
						MinValue			0
						MaxValue			9999
						Wrap				T
						SpinStart			0
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~ ;

			Define: HicksMinIndex				using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Min Index~
						MinValue			46
						MaxValue			60
						Wrap				T
						SpinStart			55
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			Define: HicksMaxIndex				using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Max Index~
						MinValue			55
						MaxValue			75
						Wrap				T
						SpinStart			70
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			Define: HicksDataBitWindow			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Data Bit Window~
						MinValue			0
						MaxValue			100
						Wrap				T
						SpinStart			38
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;

			Define: HicksSampleLength			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Sample Length~
						MinValue			0
						MaxValue			25
						Wrap				T
						SpinStart			15
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			Define: HicksInitialOffset			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Initial Offset~
						MinValue			36
						MaxValue			39
						Wrap				T
						SpinStart			38
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			Define: HicksFilmDriveSpeed		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Film Drive Speed~
						MinValue			48
						MaxValue			57
						Wrap				T
						SpinStart			48
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			// Bremson Film Transport Specific Definitions/Types

			Define: BremsonRunSpeed 		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Run Speed~
						MinValue			0
						MaxValue			20
						Wrap				T
						SpinStart			5
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			Define: BremsonCueSpeed			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Cue Speed~
						MinValue			0
						MaxValue			20
						Wrap				T
						SpinStart			8
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			Define: BremsonHomeInterval		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Home Interval~
						MinValue			0
						MaxValue			255
						Wrap				T
						SpinStart			0
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			Define: BremsonSetupXOffset		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Setup X Offset~
						MinValue			(-32768)
						MaxValue			32767
						Wrap				T
						SpinStart			0
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~ ;

			Define: BremsonSetupYOffset		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Setup Y Offset~
						MinValue			(-32768)
						MaxValue			32767
						Wrap				T
						SpinStart			0
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~ ;

			Define: BremsonSensor1			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Sensor 1~
						MinValue			0
						MaxValue			16999
						Wrap				T
						SpinStart			7462
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define: BremsonSensor2			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Sensor 2~
						MinValue			0
						MaxValue			16999
						Wrap				T
						SpinStart			11000
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define: BremsonSensor3			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Sensor 3~
						MinValue			0
						MaxValue			16999
						Wrap				T
						SpinStart			0
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define: BremsonSensor4			using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Sensor 4~
						MinValue			0
						MaxValue			16999
						Wrap				T
						SpinStart			0
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define: BremsonMachineType		using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Machine Type~
						MinValue			5
						MaxValue			5
						Wrap				T
						SpinStart			5
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			// HR500 Film Transport Specific Definitions/Types

			Define:		HR500StepsPerInch	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Steps Per Inch~
						MinValue			900
						MaxValue			1100
						Wrap				T
						SpinStart			975
						Mask				~####~
						PromptChar			~ ~ ;

			Define:		HR500FastSpeed	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Fast Speed~
						MinValue			3.0
						MaxValue			10.0
						Wrap				T
						SpinStart			10.0
						Mask				~##.###~
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		HR500SeekSpeed	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Seek Speed~
						MinValue			3.0
						MaxValue			10.0
						Wrap				T
						SpinStart			5.0
						Mask				~##.###~
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		HR500LeftSensorOffset	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Left Sensor Offset~
						MinValue			0.0
						MaxValue			20.0
						Wrap				T
						SpinStart			12.5
						Mask				~##.###~
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		HR500RightSensorOffset	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Right Sensor Offset~
						MinValue			0.0
						MaxValue			20.0
						Wrap				T
						SpinStart			0.25
						Mask				~##.###~
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		HR500DefaultMoveDistance	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Default Move Distance~
						MinValue			1.0
						MaxValue			500.0
						Wrap				T
						SpinStart			10.0
						Mask				~###.###~
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		HR500MaxSeekDistance	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Max Seek Distance~
						MinValue			5.0
						MaxValue			100.0
						Wrap				T
						SpinStart			50.0
						Mask				~###.###~
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		HR500MaxSyncNotchDistance	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Max Sync Notch Distance~
						MinValue			0.0
						MaxValue			100.0
						Wrap				T
						SpinStart			0
						Mask				~##.###~
						AllowedChars		~.~
						PromptChar			~ ~ ;			
			
			Define:		FDAFramePosition	using DDCtrlSpinEditDef
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Frame Position~
						MinValue			0.0
						Wrap				T
						SpinStart			0
						AllowedChars		~.~
						PromptChar			~ ~ ;			
			
			StringList( HalseTransportTypeList,New,InListOrder,AddStrings,~135~,~120~ );

			Define:		HalseTransportType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Type~
						Type				ComboBoxTextFit
						ChoiceList			HalseTransportTypeList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;

			StringList( NodeStyleTypeList,New,InListOrder,AddStrings,~Image~,~Text~,~Image and Text~ );

			Define:		NodeStyle			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Style Type~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			NodeStyleTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( MacroTypeList,New,InListOrder,AddStrings,~Image~,~Text~ );
			Custom_MacroTypeList(MacroTypeList);

			Define:		MacroType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Macro Type~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			MacroTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( PrinterStatusList,New,InListOrder,AddStrings,~Shutdown~,~Run~,~Suspend~,~Quit~ );

			Define:		PrinterStatus		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Printer Status~
						Type				ComboBoxZeroBasedEx
						ChoiceList			PrinterStatusList( GetCopyOf )
						Mask				~#~
						ReadOnly			~T~
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~PrinterStatus~
						LangChoiceList		PrinterStatusList( GetCopyOf );

			StringList( QueueStatusList,New,InListOrder,AddStrings,~Hold~,~Ready~ );
			Custom_QueueStatusList(QueueStatusList);

			Define:		QueueStatus			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Queue Status~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			QueueStatusList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;
//																				0				1				2					3						4				5
			StringList( ChromaKeyBGIDOptionList,New,InListOrder,AddStrings,~Yearbook Rules~,~Solid Color~,~DP2 Background~,~Customer BackgroundID~,~From SubjectInfo~,~Original Image~ );
			Custom_ChromaKeyBGIDOptionList(ChromaKeyBGIDOptionList);

			Define:		ChromaKeyBGIDOption			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ChromaKey BG From~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			ChromaKeyBGIDOptionList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~;

//																	  0		 1		  2			 3			4			5	  6			7			8		9		 10
			StringList( PrintStatusList,New,InListOrder,AddStrings,~Hold~,~Ready~,~Reserved~,~Printing~,~Completed~,~Saved~,~Error~,~Cancelled~,~Pending~,~Loaded~,~Parsed~ );
			StringList( PrintStatusListTranslations,New,InListOrder,AddStrings,~Hold~,~Ready~,~Reserved~,~Printing~,~Completed~,~Saved~,~Error~,~Cancelled~,~Pending~,~Loaded~,~Parsed~ );

			Define:		PrintStatus			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Print Status~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			PrintStatusList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~PrintStatus~
						LangChoiceList		PrintStatusListTranslations( GetCopyOf ) ;
						
					
			StringList( IF36PixServiceList,New,InListOrder,AddStrings,~Regular~,~Priority~,~Rework~,~Rush~ );
			Custom_IF36PixServiceList(IF36PixServiceList);
			
			Define:		IF36PixService		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Service~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			IF36PixServiceList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~;
					
						
			StringList( IF36PixStatusList,New,InListOrder,AddStrings,~Hold~,~Needs Cut~,~Sending~,~At 36Pix~,~Cut~,~Receiving~,~Complete~,~Error~ );
			Custom_IF36PixStatusList(IF36PixStatusList);

			Define:		IF36PixStatus		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Status~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			IF36PixStatusList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~;
						

/*			StringList( TintRemovalList,New,InListOrder,AddStrings,~Not set~,~On~,~Off~ );
			StringList( TintRemovalListTranslations,New,InListOrder,AddStrings,~Not set~,~On~,~Off~ );

			Define:		TintRemoval			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Tint Removal~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			TintRemovalList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~TintRemoval~
						LangChoiceList		TintRemovalListTranslations( GetCopyOf ) ;
*/
			StringList( SpillOverTypeList,New,InListOrder,AddStrings,~None~,~Percent~,~Fixed~ ) ;
			StringList( SpillOverTypeListTranslations,New,InListOrder,AddStrings,~None~,~Percent~,~Fixed~ ) ;

			Define:		SpillOverType		using DDCtrlComboBoxDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Spillover Type~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			SpillOverTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~SpillOverType~
						LangChoiceList		SpillOverTypeListTranslations( GetCopyOf ) ;

			Define:		ReproductionMode	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Reproduction Mode~
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~ ;


			StringList( BookSourceTypeList,New,InListOrder,AddStrings,~None~,~PDF~ );
			Custom_BookSourceTypeList(BookSourceTypeList);
				
			Define:		BookSourceType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(12)~
						Displayname			~Type~
						Type				ComboBoxTextFit
						ChoiceList			BookSourceTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			StringList( OrderTypeList,New,InListOrder,AddStrings,~Original~,~Reorder~, ~Original Proof Print~, ~Original Proof Book~, ~Reorder Proof Print~, ~Reorder Proof Book~ );
			Custom_OrderTypeList(OrderTypeList);
				
			Define:		OrderType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Type~
						Type				ComboBoxTextFit
						ChoiceList			OrderTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;


			StringList( OrderSourceList,New,InListOrder,AddStrings,~Unknown~,~ProShots Studio~, ~ProShots Basics~ );
			Custom_OrderSourceList(OrderSourceList);
				
			Define:		OrderSource			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Source~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			OrderSourceList( GetCopyOf )
						Mask				~######~
						Constraints			~Default 0~
						PromptChar			~ ~ ;
	
			StringList( DefaultOrderStatusList,New,InListOrder,AddStrings,~Ready~,~Hold~,~Adjust~,~Adjusted~,~Print~,~Printed~,~Ship~,~Shipped~);
			Custom_DefaultOrderStatusList(DefaultOrderStatusList);				

			Define:		DefaultOrderStatus			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~DefaultStatus~
						Type				ComboBox	// TextFit
						ChoiceList			DefaultOrderStatusList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						Constraints			~Default 'Ready'~
						PromptChar			~ ~ ;
	
	
			StringList( OrderStatusList,New,InListOrder,AddStrings,~Ready~,~Hold~,~Error~,~Scan~,~Scanning~,~Create Proxies~,~Create Proxies Error~,~Send Proxies~,~Proxies Sent~,~Send Proxies Error~,~Import~,~Importing~,~Convert~,~Converting~,~Chroma Key~,~Chroma Keying~,~At 36Pix~,~36Pix Cut~,~Auto Balance~,~Auto Balancing~,~Adjust~,~Adjusting~,~Proof~,~Proofing~,~Auto Retouch~,~Auto Retouching~,~Retouch~,~Retouching~,~Print~,~Printing~,~QC~,~QCing~,~Cut~,~Cutting~,~Finish~,~Finishing~,~Package~,~Packaging~,~Ship~,~Shipped~,~Complete~ );				
			Custom_OrderStatusList(OrderStatusList);
					
			StringList( OrderStatusListTranslations,New,InListOrder,AddStrings,~Ready~,~Hold~,~Error~,~Scan~,~Scanning~,~CreateProxies~,~CreateProxiesError~,~SendProxies~,~ProxiesSent~,~SendProxiesError~,~Import~,~Importing~,~Convert~,~Converting~,~Chroma Key~,~Chroma Keying~,~At 36Pix~,~36Pix Cut~,~AutoBalance~,~AutoBalancing~,~Adjust~,~Adjusting~,~Proof~,~Proofing~,~AutoRetouch~,~AutoRetouching~,~Retouch~,~Retouching~,~Print~,~Printing~,~QC~,~QCing~,~Cut~,~Cutting~,~Finish~,~Finishing~,~Package~,~Packaging~,~Ship~,~Shipped~,~Complete~ );				
			Custom_OrderStatusListTranslations(OrderStatusListTranslations);		
			
			Define:		OrderStatus			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Status~
						Type				ComboBox	// TextFit
						ChoiceList			OrderStatusList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						Constraints			~Default 'Ready'~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~OrderStatus~
						LangChoiceList		OrderStatusListTranslations( GetCopyOf ) ;

			Define:		JobStatus		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(80)~
						Displayname			~Status~
						Mask				RepeatStr(80,~%~)
						PromptChar			~ ~ ;

			StringList( ActivityStatusList,New,InListOrder,AddStrings,~Pending~,~Hold~,~In Process~,~Resolved~ );
			Custom_ActivityStatusList(ActivityStatusList);

			Define:		ActivityStatus		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Status~
						Type				ComboBox	// TextFit
						ChoiceList			ActivityStatusList( GetCopyOf )
						Mask				RepeatStr(15,~%~)
						PromptChar			~ ~ ;

			StringList( ActivityTypeList,New,InListOrder,AddStrings,~Info~,~Error~,~Warning~,~Message~,~Memo~ );
			Custom_ActivityTypeList(ActivityTypeList);

			Define:		ActivityType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Type~
						Type				ComboBox	// TextFit
						ChoiceList			ActivityTypeList( GetCopyOf )
						Mask				RepeatStr(15,~%~)
						PromptChar			~ ~ ;

			Define:		FilmCode			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(2)~
						Displayname			~FilmCode~
						Mask				RepeatStr(2,~A~)		// Bremson filme codes are ascii
						PromptChar			~ ~ ;

			Define:		Instructions		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(80)~
						Displayname			~Special Instructions~
						Mask				RepeatStr(80,~%~)
						PromptChar			~ ~ ;

			Define:		OrderItemID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Order Item~
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~OrderItemID~ ;

			Define:		PackageID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Pkg ID~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~

			Define:		PackageGroup		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Pkg Group~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~

			Define:		ProductID			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Product ID~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~

			Define:		SelectableProductID	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBoxTextFit
						Displayname			~Product ID~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~

			Define:		RequiredImages		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Required Images~
						MinValue			1			
						MaxValue			32000			
						Wrap				F													
						SpinStart			1			
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		ProductName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Product Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			StringList( NodeNameList,New,InListOrder,AddStrings,~Countable Default~,~Background~ );
			Custom_NodeNameList(NodeNameList);
				
			Define:		NodeName			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~NodeName~
						Type				ComboBox
						ChoiceList			NodeNameList( GetCopyOf )
						Mask				RepeatStr(31,~^~)
						PromptChar			~ ~ ;

			StringList( PrintingReqList,New,InListOrder,AddStrings,~Print~,~Delay Printing~,~NonPrintable~ );
			Custom_PrintingReqList(PrintingReqList);

			Define:		PrintingRequest		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Printing Request~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			PrintingReqList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( CustomerTypeList,New,InListOrder,AddStrings,~Consumer~,~Business~ );
			Custom_CustomerTypeList(CustomerTypeList);

			Define:		CustomerType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			CustomerTypeList( GetCopyOf )
						Displayname			~Customer Type~
						Constraints			~Default 0~
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( AnimotoPostRollList,New,InListOrder,AddStrings,~White Label~ );  // ,~Custom Footage~,~Powered By Animoto~ );  might use these later
			Custom_AnimotoPostRollList(AnimotoPostRollList);

			Define:		AnimotoPostRoll		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Post Roll~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			AnimotoPostRollList( GetCopyOf )
						Mask				~#~
						Constraints			~Default 0~
						PromptChar			~ ~ ;

			StringList( AnimotoPacingList,New,InListOrder,AddStrings,~Auto~,~Moderate~,~Fast~,~Slow~,~Very Fast~,~Very Slow~ );
			Custom_AnimotoPacingList(AnimotoPacingList);

			Define:		AnimotoPacing		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Pacing~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			AnimotoPacingList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;
						
			StringList( AnimotoFittingList,New,InListOrder,AddStrings,~Best Fit~ );
			Custom_AnimotoFittingList(AnimotoFittingList);

			Define:		AnimotoFitting		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Fitting~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			AnimotoFittingList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( AnimotoVisualTypeList,New,InListOrder,AddStrings,~Image~,~Title~,~Footage~ );
			Custom_AnimotoVisualTypeList(AnimotoVisualTypeList);

			Define:		AnimotoVisualType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Type~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			AnimotoVisualTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( AnimotoResolutionList,New,InListOrder,AddStrings,~480p~,~720p~);
			Custom_AnimotoResolutionList(AnimotoResolutionList);				

			Define:		AnimotoResolution	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Resolution~
						Type				ComboBox							
						ChoiceList			AnimotoResolutionList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						Constraints			~Default '720p'~
						PromptChar			~ ~ ;
						
			StringList( AnimotoFrameRateList,New,InListOrder,AddStrings,12, 15, 24, 25, 30 );
			Custom_AnimotoFrameRateList(AnimotoFrameRateList);

			Define:		AnimotoFrameRate	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Framerate~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			AnimotoFrameRateList( GetCopyOf )
						Constraints			~Default 4~
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( AnimotoFormatList,New,InListOrder,AddStrings,~h264~ );
			Custom_AnimotoFormatList(AnimotoFormatList);				

			Define:		AnimotoFormat	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Format~
						Type				ComboBox							
						ChoiceList			AnimotoFormatList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						Constraints			~Default 'h264'~
						PromptChar			~ ~ ;
																				
			StringList( AnimotoMovieStateList,New,InListOrder,AddStrings,~Hold~,~Pending~,~Ready~,~Initialize~,~Audit~,
																		~MoveAssets~,~StartProduction~,~MakePreview~,~WaitForPreview~,~GetPreviewResource~,
																		~PublishPreview~,~NotifyPreviewReady~,~WaitForApproval~,~BuildFinalMovie~,BuildWebResMovie,
																		WaitForFinalMovie,GetHiResResource,GetFinalMovie,WaitForWebResMovie,GetWebResResource,
																		GetWebResMovie,PublishFinalMovie,PublishWebResMovie,FinalMovieDone,SendFinalEmail,BurnFinalMovie,
																		~CreatePOF~,~Complete~,~UserDeleted~,~DeleteAll~ );
												
			Custom_AnimotoMovieStateList(AnimotoMovieStateList);

			Define:		AnimotoMovieState	using DDCtrlComboBoxDef			
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Movie State~
						Type				ComboBox	// TextFit
						ChoiceList			AnimotoMovieStateList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						Constraints			~Not Null Default 'Pending'~
						PromptChar			~ ~ ;
						
			StringList( AnimotoRotationList,New,InListOrder,AddStrings,~0~,~90~,~180~,~270~ );
			Custom_AnimotoRotationList(AnimotoRotationList);

			Define:		AnimotoRotation	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Fitting~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			AnimotoRotationList( GetCopyOf )
						Mask				~#~
						Constraints			~Default 0~
						PromptChar			~ ~ ;

			StringList( AnimotoAudioMixList,New,InListOrder,AddStrings,~None~,~Mix~ );
			Custom_AnimotoAudioMixList(AnimotoAudioMixList);
			
			Define:		AnimotoAudioMix	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Audio Mix~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			AnimotoAudioMixList( GetCopyOf )
						Mask				~#~
						Constraints			~Default 0~
						PromptChar			~ ~ ;

			StringList( AnimotoCallbackFormatList,New,InListOrder,AddStrings,~XML~,~JSON~ );
			Custom_AnimotoCallbackFormatList(AnimotoCallbackFormatList);				

			Define:		AnimotoCallbackFormat	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~CallBack Format~
						Type				ComboBox							
						ChoiceList			AnimotoCallbackFormatList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						Constraints			~Default 'XML'~
						PromptChar			~ ~ ;

			StringList( AnimotoStyleList,New,InListOrder,AddStrings,~original~ );
			Custom_AnimotoStyleList(AnimotoStyleList);				

			Define:		AnimotoStyle	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(80)~
						Displayname			~Style~
						Type				ComboBox							
						ChoiceList			AnimotoStyleList( GetCopyOf )
						Mask				RepeatStr(80,~%~)
						Constraints			~Default 'original'~
						PromptChar			~ ~ ;


			Define:		FilmDriveSetup		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Film Drive Setup~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		FdaSetup			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Frame Detection Setup~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		ProductType			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Product Type~
						Mask				RepeatStr(20,~%~)
						DisallowedChars		~ ,./;:"'!@#$%^&*()_+=~
						PromptChar			~ ~ ;

		StringList( SearchCriteriaList,New,InListOrder,AddStrings,~*.*~,~*.txt~,~*.jpg~,~*.tif~ );
		Custom_SearchCriteriaList(SearchCriteriaList);

			Define:		SearchCriteria		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBox
						Displayname			~Search Criteria~
						ChoiceList			SearchCriteriaList( GetCopyOf ) 
						Constraints			~NOT NULL~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		ComputerName		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Computer Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		PrinterSetup		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(64)~
						Displayname			~Printer Setup~
						Mask				RepeatStr(64,~%~)
						PromptChar			~ ~ ;

			//StringList( PrinterModelList,New,InListOrder,AddStrings,~Kodak LED~,~Kodak LFCRT~,~KPDM~,~Kodak CRT~,~Disk~,~Windows Printer~ );

			Define:		PrinterModel		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBoxTextFit
						//ChoiceList			PrinterModelList( GetCopyOf ) 
						DisplayWidth		15
						Displayname			~Model~ ;

			Define:		ModelType		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~ModelType~
						Mask				RepeatStr(31,~A~)
						PromptChar			~ ~ ;
						
				StringList( DevicesList,New,InListOrder,AddStrings,~Kodak LED~,~Kodak LFCRT~,~KPDM~,~KPDM II~,~Kodak CRT~,~Disk~,~Windows Printer~,~NexPress~,~RFS 3570 Speedup~,~RFS 3570 Plus~,~HR500~,~MP1600~,~Kodak RP30~,~Kodak RR30~,~Polieletronica~,~ZBEChromira~,~OCELightjet~,~FujiFrontier~,~DurstTheta~,~DurstLambda~,~DurstEpsilon~,~QSS31Pro~,~Kodak8810Thermal~,~Kodak7000Thermal~,~KodakD4000Thermal~ );
				Custom_DevicesList(DevicesList);
				
				//	CREATE A LIST OF NODE IDs AND NODE TYPES
				Define: PrinterModelIDs using DDSymbol AsSymbol PrinterModelIDs Contains:
				{
					Define: ~Disk~				using DDLong	Fields:	Long	(-9002) ;
					Define: ~Kodak CRT~			using DDLong	Fields:	Long	(-9003) ;
					Define: ~Kodak LFCRT~		using DDLong	Fields:	Long	(-9003) ;
					Define: ~KPDM~				using DDLong	Fields:	Long	(-9003) ;
					Define: ~KPDM II~			using DDLong	Fields:	Long	(-9003) ;
					Define: ~Kodak LED~			using DDLong	Fields:	Long	(-9004) ;
					Define: ~Windows Printer~	using DDLong	Fields:	Long	(-9030) ;
					Define: ~NexPress~			using DDLong	Fields:	Long	(-9043) ;
					Define: ~Kodak7000Thermal~		using DDLong	Fields:	Long	(-9049) ;
					Define: ~Kodak8810Thermal~		using DDLong	Fields:	Long	(-9050) ;
					Define: ~KodakD4000Thermal~		using DDLong	Fields:	Long	(-9051) ;
				} //	END CONTAINS



			Define:		Devices				using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBox
						ChoiceList			DevicesList( GetCopyOf ) 
						Displayname			~Device~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		PaperSize			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Paper Size~
						Mask				RepeatStr(15,~%~)
						PromptChar			~ ~ ;

			Define:		OverSpill			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Paper Width~
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		PaperWidth			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Paper Width~
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~PaperWidth~ ;

			Define:		PaperAdvance		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Paper Advance~ 
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;

			StringList( PaperTypeList,New,InListOrder,AddStrings,~Photographic~,~Plain~ );
			Custom_PaperTypeList(PaperTypeList);

			Define:		PaperType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~PaperType~
						Type				ComboBoxTextFit
						ChoiceList			PaperTypeList( GetCopyOf )
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			StringList( PaperSurfaceList,New,InListOrder,AddStrings,~Other~,~Matte~,~Semi Matte~,
							~Glossy~,~Smooth Lustre~,~Ultra Smooth Hi Lustre~,~Fine Grained Lustre~,
							~Silk~,~Lustre~,~Deep Matte~,~High Gloss~);
			Custom_PaperSurfaceList(PaperSurfaceList);

			Define:		PaperSurface		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Paper Surface~
						Type				ComboBoxTextFit
						ChoiceList			PaperSurfaceList( GetCopyOf )
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			StringList( PaperOpacityList,New,InListOrder,AddStrings,~Reflective~,~Transmissive~ );

			Define:		PaperOpacity		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Paper Opacity~
						Type				ComboBoxTextFit
						ChoiceList			PaperOpacityList( GetCopyOf )
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		Width				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Width~
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~

			Define:		Length				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Length~
						Mask				RepeatStr(6,~#~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~Length~ ;

			Define:		WidthDouble			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Width~	
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~

			Define:		LengthDouble		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Length~
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~

			Define:		LeftDouble			using DDCtrlMaskEditDef	
				Fields:	Mask				RepeatStr(9,~#~)
						AllowedChars		~-.~
						PromptChar			~ ~

			Define:		LongValue			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Length~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~
						
			Define:		StrengthValue		using DDCtrlMaskEditDef	
				Fields:	Mask				RepeatStr(3,~#~)
						PromptChar			~ ~

			Define:		FontSizeValue		using DDCtrlMaskEditDef	
				Fields: Mask				RepeatStr(4,~#~)
						PromptChar			~ ~

			Define:		OEMPrinterChannel	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Length~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~


			Define:		JPEGQuality		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~JPEG Quality~
						MinValue			0.0			
						MaxValue			100.0				
						Wrap				F													
						SpinStart			100.0
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		QualityOR			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~		// Wanted this to be an integer but 6.2/7.0 already used double
						Displayname			~Compression Quality~
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			

			Define:		CropPosition		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Crop Position~
						MinValue			0.0			
						MaxValue			100.0				
						Wrap				F													
						SpinStart			50.0	
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~

			Define:		CropDimension		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Crop Dimension~
						MinValue			0.0			
						MaxValue			100.0				
						Wrap				F													
						SpinStart			100.0	
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~
		
			Define:		Gamma				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Gamma~
						MinValue			.3			
						MaxValue			5.0				
						Wrap				F													
						SpinStart			1.0			
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~

			Define:		Angle				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Angle~
						MinValue			(-25.0)			
						MaxValue			25.0				
						Wrap				F													
						SpinStart			0
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			StringList( LutIndexList,New,InListOrder,AddStrings,~0~,~10~,~20~,~30~,~40~,~50~ );

			Define:		LutIndex			using DDCtrlComboBoxDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Lut Index~
						Type				ComboBoxTextFit
						ChoiceList			LutIndexList( GetCopyOf )
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			

			StringList( RotationList,New,InListOrder,AddStrings,~0~,~90~,~180~,~270~ );

			Define:		Rotation			using DDCtrlComboBoxDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Rotation~
						Type				ComboBoxTextFit
						ChoiceList			RotationList( GetCopyOf )
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			

			Define:		ArbRotation			using DDCtrlComboBoxDef
				Fields:	
						Displayname			~ArbRotation~
						Type				ComboBoxTextFit
						AllowedChars		~-.~
						ChoiceList			RotationList( GetCopyOf )
						Mask				RepeatStr(17,~#~)
						AllowedChars		~-.~
						PromptChar			~ ~ ;			


			Define:		Saturation			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Saturation~
						MinValue			0			
						MaxValue			100				
						Wrap				F													
						SpinStart			50	
						Mask				RepeatStr(4,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			
		
			Define:		PixelTolerance		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Tolerance~
						MinValue			0			
						MaxValue			255				
						Wrap				F													
						SpinStart			50	
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			

			Define:		PixelFeathering		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Feathering~
						MinValue			0			
						MaxValue			999				
						Wrap				F													
						SpinStart			50	
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			

			Define:		Sharpen				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Sharpen~
						MinValue			0			
						MaxValue			2000				
						Wrap				F													
						SpinStart			0	
						Mask				RepeatStr(4,~#~)
						PromptChar			~ ~ ;			
		

			Define:		DRGB			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~DRGB~
						MinValue			(-255)			
						MaxValue			255				
						Wrap				F													
						SpinStart			0	
						Mask				RepeatStr(4,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			
		

			Define:		ColorOffset			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ColorOffset~
						MinValue			(<BRM_EAI_COLOR_PREFERENCE_MIN>)			
						MaxValue			(<BRM_EAI_COLOR_PREFERENCE_MAX>)			
						Wrap				F													
						SpinStart			0			
						Mask				RepeatStr(3,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			

			Define:		ContrastOffset		using DDCtrlSpinEditDef	
				Fields: Definition			~<SQLInteger>~
						Displayname			~Contrast~
						Mask				RepeatStr(4,~#~)
						MinValue			(-100)			
						MaxValue			100			
						Wrap				F													
						SpinStart			0	
						PromptChar			~ ~
						AllowedChars		~-~;

			Define:		SBAOffset			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ColorOffset~
						MinValue			(-4096)			
						MaxValue			(4096)			
						Wrap				F													
						SpinStart			0			
						Mask				RepeatStr(5,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			

			Define:		Offset				using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Offset~
						MinValue			(-1500)			
						MaxValue			1500				
						Wrap				F													
						SpinStart			0			
						Mask				RepeatStr(5,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			

			Define:		PrinterName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Printer Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~PrinterName~ ;

			Define:		DeviceType			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Device Type~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~

			Define:		PrinterNameCombo	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Type				ComboBox
						Displayname			~Printer Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		CharacterSetCombo	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Type				ComboBox
						Displayname			~Character Set~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		FontCombo	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Type				ComboBox
						Displayname			~Font~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			Define:		SCSIAddress			using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ColorOffset~
						MinValue			(0)			
						MaxValue			(25)			
						Wrap				F													
						SpinStart			0			
						Mask				RepeatStr(3,~#~)
						AllowedChars		~~
						PromptChar			~ ~ ;			

			Define:		NetworkAddress		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Network Address~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;

			Define:		PrinterResolution	using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Resolution~
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		SpillOverAmt		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Spill Over Amt~
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;			

			Define:		QueueName			using DDCtrlMaskEditDef		
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Queue Name~
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~QueueName~

			Define:		QueueNameCombo		using DDCtrlComboBoxDef		
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~Queue Name~
						Type				ComboBox	// TextFit
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ ;
			
			Define:		PrinterConfigurationCombo		using DDCtrlComboBoxDef		
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Configuration~
						Type				ComboBox	// TextFit
						Mask				RepeatStr(32,~%~)
						DisallowedChars		~"/\~
						PromptChar			~ ~ ;
		
			Define:		LongText			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLLongText>~
						Displayname			~~ 
						//MultiLine			T
						//ScrollBar			T
						Mask				RepeatStr(1024,~%~)
						PromptChar			~ ~ ;

			Define:		MultiLineLongText	using DDCtrlEditDef	
				Fields:	Definition			~<SQLLongText>~
						MultiLine			T
						ScrollBar			T
						Mask				RepeatStr(1024*4,~%~)
						PromptChar			~ ~ ;

			Define:		MultiLineJobText	using DDCtrlEditDef	
				Fields:	Definition			~<SQLLongText>~
						MultiLine			T
						ScrollBar			T
						Mask				RepeatStr(1024,~*~)
						PromptChar			~ ~ ;

			Define:		ProcessLongText		using DDCtrlEditDef		// ALLOWS THE TILDE SO BE CAREFUL WHERE YOU USE THIS!
				Fields:	Definition			~<SQLLongText>~
						Displayname			~~ 
						MultiLine			T
						ScrollBar			T ;

			StringList( ScannerModeList,New,InListOrder,AddStrings,~Automatic~,~Manual~ );

			Define:		ScannerMode			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Mode~
						Type				ComboBoxTextFit
						ChoiceList			ScannerModeList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;

			StringList( ScannerModelList,New,InListOrder,AddStrings,~Sizzle~,~HR500~ );

			Define:		ScannerModel		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Model~
						Type				ComboBoxTextFit
						ChoiceList			ScannerModelList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;
						
						
						
			StringList( LogoPositionList,New,InListOrder,AddStrings,~Upper Center~,~Upper Left~, ~Upper Right~, ~Center~, ~Center Left~, ~Center Right~, ~Lower Center~, ~Lower Left~,~Lower Right~);
			Define:		LogoPositions		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(24)~
						Displayname			~Logo Position~
						Type				ComboBoxTextFit
						ChoiceList			LogoPositionList( GetCopyOf )
						Mask				RepeatStr(24,~%~)
						PromptChar			~ ~ ;		

			StringList( FilmFormatList,New,InListOrder,AddStrings,
						~35mm~,~35mm_Slide~,~35mm_Unperfed~,~35mm_Camera_Card~,
						~46mm~,~46mm_Camera_Card~,
						~62mm_4.5x6~,~62mm_6x4.5~,~62mm_6x6~,~62mm_6x7~,~62mm_6x8~,~62mm_6x9~,
						~Split_70mm~,~Split_70mm_Camera_Card~,~70mm~,~70mm_Unperfed~,~4x5~ );

			Define:		FilmFormat		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(32)~
						Displayname			~Film Format~
						Type				ComboBoxTextFit
						ChoiceList			FilmFormatList( GetCopyOf )
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			StringList( ProfileTypeList,New,InListOrder,AddStrings,~Input~,~Output~,~Monitor~,~WorkingSpace~,~Exposure~,~Look~,~ColorEffects~);
			StringList( ProfileTypeListTranslations,New,InListOrder,AddStrings, ~Input~,~Output~,~Monitor~,~WorkingSpace~,~Exposure~,~Look~,~ColorEffects~);				

			Define:		ProfileType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(12)~
						Displayname			~Profile Type~
						Type				ComboBoxTextFit
						ChoiceList			ProfileTypeList( GetCopyOf )
						Mask				RepeatStr(12,~%~)
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~ProfileType~
						LangChoiceList		ProfileTypeListTranslations( GetCopyOf ) ;

			StringList( MarkingTypeList,New,InListOrder,AddStrings,	Translate(~None~),
																	Translate(~Punch~),
																	Translate(~Notch~) );
			Define:		MarkingType		using DDCtrlComboBoxDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Film Mark Type~
						Type				ComboBoxZeroBasedEx
						ChoiceList			MarkingTypeList( GetCopyOf ) 
						Mask				RepeatStr(8,~%~)
						PromptChar			~ ~ ;
						
						
			Define:		GreenScreenExposure	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Exposure~
						MinValue			(-99)			
						MaxValue			100				
						Wrap				F													
						SpinStart			0		
						AllowedChars		~-~
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;			


			StringList( AFDMarkingTypeList,New,InListOrder,AddStrings,	Translate(~None~) );

			Define:		AFDMarkingType		using DDCtrlComboBoxDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Film Mark Type~
						Type				ComboBoxZeroBasedEx
						ChoiceList			AFDMarkingTypeList( GetCopyOf ) 
						Mask				RepeatStr(8,~%~)
						PromptChar			~ ~ ;
						
			StringList( RImageSoftwareVersionList,New,InListOrder,AddStrings,~RImage Bridge Server~,~RImage Version 7~,~RImage Version 8~ );
		
			
			if ( RunningVersion(14)  || TRUE )
			{
				RImageSoftwareVersionList( AddStrings,~Windows 7 Computer~ );
			}

			Define:		RImageSoftwareVersion	using DDCtrlComboBoxDef	
				Fields:	Definition				~<SQLInteger>~
						Displayname				~Software Version~ 
						Type					ComboBoxZeroBasedEx
						ChoiceList				RImageSoftwareVersionList( GetCopyOf )
						Constraints				~Default 0~		
						PromptChar				~ ~;
						

			Define:		RImagePriority		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Priority~
						MinValue			1			
						MaxValue			9				
						Wrap				F													
						SpinStart			5
						Constraints			~Default 5~			
						Mask				RepeatStr(1,~#~);
	
			StringList( RImageProgressList,New,InListOrder,AddStrings,~Hold~,~Ready~,~Copying Files~,~Queueing~,~Building~,~Writing~,~Complete~ );

			Define:		RImageProgress		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Progress~ 
						Type				ComboBoxZeroBasedEx
						Constraints			~Default 0~
						ChoiceList			RImageProgressList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( RImageFileTypeList,New,InListOrder,AddStrings,~EditList~,~Parent~ );

			Define:		RImageFileType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Type~
						Type				ComboBoxZeroBasedEx
						ChoiceList			RImageFileTypeList( GetCopyOf )
						Constraints			~Default 0~
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			StringList( RImageConditionList,New,InListOrder,AddStrings,~Pending~,~Image Complete~,~Production Complete~,~Failure~ );

			Define:		RImageCondition		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Condition~
						Type				ComboBoxZeroBasedEx
						ChoiceList			RImageConditionList( GetCopyOf )
						Constraints			~Default 0~
						ReadOnly			T
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			StringList( RImageStateList,New,InListOrder,AddStrings,~Success~,~Cancelled~,~Failed~ );

			Define:		RImageState			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~State~
						Type				ComboBoxZeroBasedEx
						ChoiceList			RImageStateList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						Constraints			~Default 0~
						PromptChar			~ ~ ;

			StringList( RImageTypeList,New,InListOrder,AddStrings,~ISO9660L1_Relax~,~ISO9660L1_NoRelax~,~ISO9660L2~ );

			Define:		RImageType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Image Type~
						Type				ComboBoxZeroBasedEx
						Constraints			~Default 0~
						ChoiceList			RImageTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			// RImageTemplates and RImageOrders expect No files Systems is index 0 (None)

			StringList( RImageNoFileSystemList,New,InListOrder,AddStrings,~None~ );

			Define:		RImageNoFileSystem	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~File System Extension~
						Type				ComboBoxZeroBasedEx
						Constraints			~Default 0~
						ChoiceList			RImageNoFileSystemList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			StringList( RImageFileSystemList,New,InListOrder,AddStrings,~None~,~UDF102~,~ROCKRIDGE~,~JOLIET~ );

			Define:		RImageFileSystem	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~File System Extension~
						Type				ComboBoxZeroBasedEx
						Constraints			~Default 0~
						ChoiceList			RImageFileSystemList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			// RImageTemplates and RImageOrders expect CD is index 0 and DVD is index 1

			StringList( RImageMediaTypeList,New,InListOrder,AddStrings,~CDR~,~DVDR~,~DVDR-DL~ );

			Define:		RImageMediaType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Media Type~
						Type				ComboBoxZeroBasedEx
						Constraints			~Default 0~
						ChoiceList			RImageMediaTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			StringList( RImageLabelTypeList,New,InListOrder,AddStrings,~NO_LABEL~,~IN_IMAGE~,~UNUSED~,
												~PRINTER_FMT~,~EDITOR_FMT~,~ROT_PRINTER_FMT~,~ROT_EDITOR_FMT~ );

			Define:		RImageLabelType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~File Type~
						Constraints			~Default 0~
						Type				ComboBoxZeroBasedEx
						ChoiceList			RImageLabelTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

// Retouching Settings
			StringList( RetouchBatchCompleteTypeList,New,InListOrder,AddStrings,~REVIEW~,~NO_REVIEW~ );

			StringList( RetouchStateTypeList,New,InListOrder,AddStrings,~BatchSetupNeeded~,
												~QueuedForBatch~,~InBatch~,
												~QueuedForReview~,~InReview~,
												~QueuedForMerge~,~InMerge~,
												~QueuedForInteractive~,~InInteractive~,
												~Complete~,~Rejected~,~Error~,
												~QueuedForRestore~,~InRestore~,~Restored~ );
			StringList( RetouchStateListTranslations,New,InListOrder,AddStrings,~BatchSetupNeeded~,
												~QueuedForBatch~,~InBatch~,
												~QueuedForReview~,~InReview~,
												~QueuedForMerge~,~InMerge~,
												~QueuedForInteractive~,~InInteractive~,
												~Complete~,~Rejected~,~Error~,
												~QueuedForRestore~,~InRestore~,~Restored~ );

			StringList( KarsSetupTypeList,New,InListOrder,AddStrings,~None~,
																	~DarkSkinHighBlemish~,
																	~DarkSkinLowBlemish~,
																	~LightSkinHighBlemish~,
																	~LightSkinLowBlemish~ );

			StringList( KarsSetupTypeListTranslations,New,InListOrder,AddStrings,~None~,
																	~DarkSkinHighBlemish~,
																	~DarkSkinLowBlemish~,
																	~LightSkinHighBlemish~,
																	~LightSkinLowBlemish~ );
			Define:		BatchSetup			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(31)~
						Displayname			~BatchSetup~
						Type				ComboBox
						Mask				RepeatStr(31,~%~)
						PromptChar			~ ~ 

			Define:		RetouchTexture		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Texture~
						MinValue			0			
						MaxValue			8				
						Wrap				F													
						SpinStart			2			
						Mask				RepeatStr(1,~#~)
						PromptChar			~ ~ ;			

			Define:		RetouchSkinTone		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Smoothing~
						MinValue			0			
						MaxValue			6				
						Wrap				F													
						SpinStart			0			
						Mask				RepeatStr(1,~#~)
						PromptChar			~ ~ ;			

			Define:		RetouchWhitener		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Eye Whitening~
						MinValue			0			
						MaxValue			6				
						Wrap				F													
						SpinStart			2			
						Mask				RepeatStr(1,~#~)
						PromptChar			~ ~ ;			

			Define:		RetouchEyeShaper	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Right Eye Shape~
						MinValue			(-4)			
						MaxValue			4				
						Wrap				F													
						SpinStart			0			
						Mask				RepeatStr(2,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;			

			Define:		RetouchBatchComplete using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Batch Complete Processing~
						Type				ComboBoxTextFit
						ChoiceList			RetouchBatchCompleteTypeList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;			

			Define:		RetouchState using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Image Retouching State~
						Type				ComboBoxTextFit
						ChoiceList			RetouchStateTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~RetouchState~
						LangChoiceList		RetouchStateListTranslations( GetCopyOf ) ;

			Define:		KparsSetupType using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Setup Type~
						Type				ComboBoxTextFit
						ChoiceList			KarsSetupTypeList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ 
						LangSection			~FieldTypes~
						LangItem			~KarsSetupType~
						LangChoiceList		KarsSetupTypeListTranslations( GetCopyOf ) ;

		if (RunningVersion(4.0))
		{
			Define:		MaximumOutputDimension	using DDCtrlMaskEditDef	
				Fields:	Definition				~<SQLDouble>~
						Displayname				~Max Output Dimension~
						Mask					~#####~
						AllowedChars			~.~
						PromptChar				~~ ;

			Define:		ExposureGain			using DDCtrlMaskEditDef	
				Fields:	Definition				~<SQLDouble>~
						Displayname				~Exposure Gain~
						Mask					~###~
						AllowedChars			~.~
						PromptChar				~~ ;

			StringList( DigitalCameraSaveFileTypeList,New,InListOrder,AddStrings, ~MEMORY~, ~TIFF~, ~JPEG~, ~PNG~, ~Tiff Lossless~ ) ;

			Define:		DigitalCameraSaveFileType	using DDCtrlComboBoxDef	
				Fields:	Definition					~<SQLChar>(6)~
						Displayname					~Save File Type~ 
						Type						ComboBoxTextFit
						ChoiceList					DigitalCameraSaveFileTypeList( GetCopyOf )
						Mask						RepeatStr(6,~%~)
						PromptChar					~ ~ ;

			StringList( BaseIlluminantList, New, InListOrder, AddStrings,~Daylight~,~Tungsten~,~Flash~,~Fluorescent~);
			Define:		BaseIlluminant		using DDCtrlComboBoxDef
				Fields:	Definition			~<SQLChar>(11)~
						Displayname			~Base Illuminant~
						Type				ComboBoxTextFit
						ChoiceList			BaseIlluminantList( GetCopyOf )
						Mask				RepeatStr(11,~%~)
						PromptChar			~ ~ ;

			StringList( SharpenStrengthList, New, InListOrder, AddStrings,~None~,~Low~,~Medium~,~High~);
			Define:		SharpenStrength		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Sharpening Strength~
						Type				ComboBoxTextFit
						ChoiceList			SharpenStrengthList( GetCopyOf )
						Mask				RepeatStr(6,~%~)
						PromptChar			~ ~ ;

			StringList( NoiseFilterList, New, InListOrder, AddStrings,~None~,~Sigma~,~Chroma~,~Moire~);
			Define:		NoiseFilter		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Noise Filter~
						Type				ComboBoxTextFit
						ChoiceList			NoiseFilterList( GetCopyOf )
						Mask				RepeatStr(6,~%~)
						PromptChar			~ ~ ;

			Define:		MoireStrength		using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Moire Noise Filter Strength~
						MinValue			0.0			
						MaxValue			100.0				
						Wrap				F													
						SpinStart			100.0
						Mask				RepeatStr(9,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;

			StringList( BalanceTypeList, New, InListOrder, AddStrings,~Preset~,~Custom~,~Auto~,~Click~);
			Define:		BalanceType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Balance Type~
						Type				ComboBoxTextFit
						ChoiceList			BalanceTypeList( GetCopyOf )
						Mask				RepeatStr(6,~%~)
						PromptChar			~ ~ ;

			StringList( PriorityTypeList, New, InListOrder, AddStrings,~PROCESS_NOW~,~PREVIEW~,~QUEUE_FOR_LATER~);
			Define:		PriorityType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(15)~
						Displayname			~Priority~
						Type				ComboBoxTextFit
						ChoiceList			PriorityTypeList( GetCopyOf )
						Mask				RepeatStr(15,~%~)
						PromptChar			~ ~ ;

			Define:		DigitalCameraRGB	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						MinValue			(-500)
						MaxValue			500
						Wrap				F
						SpinStart			0	
						Mask				RepeatStr(4,~#~)
						AllowedChars		~-~
						PromptChar			~ ~ ;

			// For digital camera profiles
			StringList( DCIlluminantList,New,InListOrder,AddStrings,~Unused~,~Daylight~,~Tungsten~,~Flash~,~Fluorescent~ );
			Define:		DigitalCameraIlluminant		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			DCIlluminantList( GetCopyOf ) 
						Displayname			~Illuminant~
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( DCProfileTypeList,New,InListOrder,AddStrings,~Input~,~Abstract~ );

			Define:		DCProfileType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(12)~
						Displayname			~Profile Type~
						Type				ComboBoxTextFit
						ChoiceList			DCProfileTypeList( GetCopyOf )
						Mask				RepeatStr(12,~%~)
						PromptChar			~ ~ ;


			Define:		CameraModel			using DDCtrlEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Camera Model~ ;

			Define:		CameraMake			using DDCtrlEditDef
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Camera Make~ ;

			Define:		ColorSpace			using DDCtrlEditDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Colorspace~ ;

			Define:		Units			using DDCtrlEditDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Units~ ;
		}	// if (RunningVersion(4.0))


			Define:		WhitePoint			using DDCtrlMaskEditDef	
				Fields:	Definition				~<SQLInteger>~
						Displayname				~White Point~
						Mask					~####~
						PromptChar				~~ ;

			Define:		PLSSingle		using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSingle>~
						Displayname			~Single~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSDBVersion	using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~Database Version~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSDatabaseTime	using DDCtrlDateTimeDef	
				Fields:	Definition			~<SQLDate>~
						Displayname			~Database Time~
						UseCal				T
						FastInput			T
						ValidMode			3

			Define:		PLSPCode		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(30)~
						Displayname			~PCode~
						Mask				RepeatStr(30,~%~)
						PromptChar			~ ~ ;

			Define:		PLSNodeNo		using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~NodeNo~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSNodeType		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(20)~
						Displayname			~NodeType~
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			Define:		PLSNodeName		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(60)~
						Displayname			~NodeName~
						Mask				RepeatStr(60,~%~)
						PromptChar			~ ~ ;

			Define:		PLSPrompt		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(120)~
						Displayname			~Prompt~
						Mask				RepeatStr(120,~%~)
						PromptChar			~ ~ ;

			Define:		PLSShape		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(10)~
						Displayname			~Shape~
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;

			Define:		PLSScanOrientation	using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(10)~
						Displayname			~ScanOrientation~
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;

			Define:		PLSNote			using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(250)~
						Displayname			~Note~
						Mask				RepeatStr(250,~%~)
						PromptChar			~ ~ ;

			Define:		PLSDescription	using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(120)~
						Displayname			~Description~
						Mask				RepeatStr(120,~%~)
						PromptChar			~ ~ ;

			Define:     PLSInteger      using DDCtrlMaskEditDef
				Fields: Definition          ~<SQLInteger>~
						Displayname         ~Integer~
						Mask                RepeatStr(8,~#~)
						PromptChar          ~ ~;

			Define:		PLSImage	using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(60)~
						Displayname			~Image~
						Mask				RepeatStr(60,~%~)
						PromptChar			~ ~ ;

			Define:		PLSNumberNodes	using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~NumberNodes~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSFont		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(30)~
						Displayname			~Font~
						Mask				RepeatStr(30,~%~)
						PromptChar			~ ~ ;

			Define:		PLSFontSize		using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~FontSize~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSFontRed		using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~FontRed~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSFontGreen	using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~FontGreen~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSFontBlue		using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~FontBlue~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSStyle		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(30)~
						Displayname			~Style~
						Mask				RepeatStr(30,~%~)
						PromptChar			~ ~ ;

			Define:		PLSJustify		using DDCtrlMaskEditDef	
				Fields:	Definition			~Text(20)~
						Displayname			~Justify~
						Mask				RepeatStr(20,~%~)
						PromptChar			~ ~ ;

			Define:		PLSRotateText	using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~RotateText~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSWordWrap		using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~WordWrap~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSCRAllowed	using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~CR_Allowed~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~ ;

			Define:		PLSServiceID using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~ServiceID~
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;

			Define:		PLSServiceGroup	using DDCtrlMaskEditDef	
				Fields:	Definition			~<JetSmallInt>~
						Displayname			~ServiceGroup~
						Mask				RepeatStr(3,~#~)
						PromptChar			~ ~ ;

			//StringList( ProShotsProductTypeList,New,InListOrder,AddStrings, ~Kodak ProShots Studio Software~, ~Kodak ProShots Groups Software~ ) ;
			StringList( ProShotsProductTypeList,New,InListOrder,AddStrings, ~Kodak ProShots Studio Software~, ~Kodak ProShots Basics Software~ ) ;

			Define:		ProShotsProductType using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Product Type~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			ProShotsProductTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			Define:		Cost		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Cost~
						Mask				RepeatStr(5,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		PricePerPage		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLDouble>~
						Displayname			~Cost~
						Mask				RepeatStr(7,~#~)
						AllowedChars		~.~
						PromptChar			~ ~ ;

			Define:		LUT			using DDCtrlEditDef	
				Fields:	Definition			~<SQLLongText>~
						Displayname			~LUT~
						ReadOnly			T;

			Define:		ServiceNumber using DDCtrlEditDef
				Fields:	Definition			~<SQLInteger>~
						Displayname			~ID~
						

			Define:		ServicesGroup	using DDCtrlSpinEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Group~
						MinValue			0			
						MaxValue			99				
						Wrap				F													
						SpinStart			0			
						Mask				RepeatStr(2,~#~)
						PromptChar			~ ~ ;

			StringList( SaveLogoPositionList,New,InListOrder,AddStrings, ~Upper Center~, ~Upper Left~, ~Upper Right~, ~Center~, ~Center Left~, ~Center Right~, ~Lower Center~, ~Lower Left~, ~Lower Right~ ) ;
			Define:		LogoPosition		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Position~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			SaveLogoPositionList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( SaveTextJustifyList,New,InListOrder,AddStrings, ~Left~, ~Center~, ~Right~ ) ;
			Define:		TextJustify			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Text Justification~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			SaveTextJustifyList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( SaveTextAlignmentList,New,InListOrder,AddStrings, ~Top~, ~Center~, ~Bottom~ ) ;
			Define:		TextAlignment		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Text Alignment~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			SaveTextAlignmentList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( CameraFileConversionStatusList,New,InListOrder,AddStrings,~None~,~Needs Converting~,~In Progress~,~Complete~);
			Define:		CameraFileConversionStatus		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Camera Files~
						Type				ComboBoxZeroBasedEx
						ChoiceList			CameraFileConversionStatusList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;
		
			StringList( UnitOfMeasureList,New,InListOrder,AddStrings, ~EACH~, ~PRODUCT~, ~PAGE~, ~IMAGE~, ~HOUR~, ~MINUTE~);
			Define:		UnitOfMeasure		using DDCtrlComboBoxDef
				Fields: Definition			~<SQLInteger>~
						Displayname			~Unit Of Measure~
						Type				ComboBoxZeroBasedEx
						ChoiceList			UnitOfMeasureList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;			

			StringList( AlterMethodList,New,InListOrder,AddStrings, ~ALLOW-NONE~, ~ALLOW-PART~, ~ALLOW-FULL~);
			Define:		AlterMethod 		using DDCtrlComboBoxDef
				Fields: Definition			~<SQLInteger>~
						Displayname			~Alter Method~
						Type				ComboBoxZeroBasedEx
						ChoiceList			AlterMethodList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( ServiceCategoryTypeList,New,InListOrder,AddStrings, ~REQUIRE_ONE_OF~, ~PICK_ONE_OF~, ~PICK_ANY_OF~) ;
			Custom_ServiceCategoryTypeList(ServiceCategoryTypeList);
			
			Define:		ServiceCategory		using DDCtrlComboBoxDef
				Fields: Definition			~<SQLInteger>~
						Displayname			~Service Category Type~
						Type				ComboBoxZeroBasedEx
						ChoiceList			ServiceCategoryTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;	
										
			StringList( ProofBookColorList,New,InListOrder,AddStrings, ~None~, ~Black~, ~White~, ~All~);
			Custom_ProofBookColorList(ProofBookColorList);
			
			Define:		ProofBookColor		using DDCtrlComboBoxDef
				Fields: Definition			~<SQLInteger>~
						Displayname			~Color~
						Type				ComboBoxZeroBasedEx
						ChoiceList			ProofBookColorList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( ProofBookSizeList,New,InListOrder,AddStrings,~8x10~,~10x13~ );
			Custom_ProofBookSizeList(ProofBookSizeList);

			Define:		ProofBookSize	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(6)~
						Displayname			~Page Size~
						Type				ComboBoxTextFit
						ChoiceList			ProofBookSizeList( GetCopyOf )
						Mask				RepeatStr(6,~%~)
						PromptChar			~ ~ ;

			Define:		ImageRestoreSearchCriteria		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(32)~
						Mask				RepeatStr(32,~%~)
						PromptChar			~ ~ ;

			StringList( ImageRestoreDirFormatList,New,InListOrder,AddStrings,	Translate(~Order/Roll/Frame~),
																				Translate(~Order/Frame~));
			Custom_ImageRestoreDirFormatList(ImageRestoreDirFormatList);

			Define:		ImageRestoreDirFormat		using DDCtrlComboBoxDef	
				Fields:	Definition					~<SQLInteger>~
						Displayname					Translate(~Restore From Format~)
						Type						ComboBoxZeroBasedEx
						ChoiceList					ImageRestoreDirFormatList( GetCopyOf )
						Mask						~#~
						Constraints					~Default 0~
						PromptChar					~ ~ ;

			StringList( DSbaLevelsList,New,InListOrder,AddStrings,~DRGB~,~RGB~,~Density~ );

			Define:		DSbaLevelsType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(10)~
						Displayname			~Auto Bal Levels~
						Type				ComboBox
						Constraints			~Default 'DRGB'~
						ChoiceList			DSbaLevelsList( GetCopyOf )
						Mask				RepeatStr(10,~%~)
						PromptChar			~ ~ ;

			Define:		OperatorName		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~User ID~
						Mask				RepeatStr(255,~%~)
						PromptChar			~ ~ ;

			Define:		LogonName			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Logon Name~
						Mask				RepeatStr(255,~%~)
						DisallowedChars		~,"^&*=|<>?/\:()~
						PromptChar			~ ~ ;

			Define:		LogonPassword		using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Password~
						Mask				RepeatStr(255,~%~)
						PromptChar			~ ~ ;

			Define:		Address				using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Address~
						Mask				RepeatStr(255,~%~)
						PromptChar			~ ~ ;

			Define:		Telephone			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLChar>(255)~
						Displayname			~Telephone~
						Mask				RepeatStr(255,~%~)
						PromptChar			~ ~ ;

			Define:		RedEye			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLLongText>~
						Displayname			~Red Eye~ 
						Mask				RepeatStr(1024,~%~)
						PromptChar			~ ~ ;

			Define:		Bleed			using DDCtrlMaskEditDef	
			Fields:		Definition			~<SQLDouble>~
						Displayname			~Bleed~
						Mask				RepeatStr(9,~#~)
						PromptChar			~ ~
						AllowedChars		~.~
						LangSection			~FieldTypes~
						LangItem			~Bleed~ ;

			StringList( RenderingIntentTypeList,New,InListOrder,AddStrings, ~Perceptual~, ~Colorimetric~ ) ;

			Define:		RenderingIntent		using DDCtrlComboBoxDef		// 0 = perceptual, 1 = colorimetric
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						Mask				~#~
						PromptChar			~ ~ 
						ChoiceList			RenderingIntentTypeList( GetCopyOf );

			StringList( PrintItemList,New,InListOrder,AddStrings,~Print~,~Book~ );				
			StringList( PrintItemListTranslations,New,InListOrder,AddStrings,~Print~,~Book~ );				

			Define:		PrintItem			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLChar>(20)~
						Displayname			~Print Item~
						Type				ComboBox	// TextFit
						ChoiceList			PrintItemList( GetCopyOf )
						Mask				RepeatStr(20,~%~)
						Constraints			~Default 'Print'~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~PrintItem~
						LangChoiceList		PrintItemListTranslations( GetCopyOf ) ;

			StringList( WhoGetsFeaturedList,New,InListOrder,AddStrings,~All students~,~All students and staff~,~Some students and /or some staff~ );
			Custom_WhoGetsFeaturedList(WhoGetsFeaturedList);

			Define:		WhoGetsFeaturedType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			WhoGetsFeaturedList( GetCopyOf )
						Mask				~#~
						LangItem			~WhoGetsFeatured~
						LangSection			~FieldTypes~
						PromptChar			~ ~ ;

			StringList( ShuffleStaffList,New,InListOrder,AddStrings,~Leave node empty~,~Shuffle staff, leave last staff node empty~,~Shuffle staff, shuffle student into last staff node~ );
			Custom_ShuffleStaffList(ShuffleStaffList);

			Define:		ShuffleStaffType	using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Shuffle Staff~  
						Type				ComboBoxZeroBasedEx
						ChoiceList			ShuffleStaffList( GetCopyOf )
						Mask				~#~
						LangItem			~ShuffleStaff~ 
						LangSection			~FieldTypes~
						PromptChar			~ ~ ;

			StringList( TypeOfCompositeList,New,InListOrder,AddStrings,~Regular~,~Featured~ );
			Custom_TypeOfCompositeList(TypeOfCompositeList);

			Define:		TypeOfCompositeType		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Type of Composite~ 
						Type				ComboBoxZeroBasedEx
						ChoiceList			TypeOfCompositeList( GetCopyOf )
						Mask				~#~
						LangSection			~FieldTypes~
						LangItem			~TypeOfComposite~ 
						PromptChar			~ ~ ;

			Define:		DoubleRange0To1		using DDCtrlSpinEditDef	
			Fields:		Definition			~<SQLDouble>~
						Displayname			~Slope~
						Mask				RepeatStr(4,~#~)
						MinValue			0			
						MaxValue			1				
						Wrap				F													
						SpinStart			0			
						PromptChar			~ ~
						AllowedChars		~.~;

			Define:		DoubleRange0To2		using DDCtrlSpinEditDef	
			Fields:		Definition			~<SQLDouble>~
						Displayname			~Slope~
						Mask				RepeatStr(4,~#~)
						MinValue			0			
						MaxValue			2				
						Wrap				F													
						SpinStart			0			
						PromptChar			~ ~
						AllowedChars		~.~;

			Define:		FleshPivot			using DDCtrlSpinEditDef	
			Fields:		Definition			~<SQLInteger>~
						Displayname			~Flesh Pivot~
						Mask				RepeatStr(4,~#~)
						MinValue			(-200)			
						MaxValue			200			
						PromptChar			~ ~
						AllowedChars		~-~;


			Define:		OrderDenBalance		using DDCtrlSpinEditDef	
			Fields:		Definition			~<SQLInteger>~
						Displayname			~Order Den~
						Mask				RepeatStr(4,~#~)
						MinValue			(-200)			
						MaxValue			200			
						PromptChar			~ ~
						AllowedChars		~-~;

			Define:		OrderRGBBalance		using DDCtrlSpinEditDef	
			Fields:		Definition			~<SQLInteger>~
						Displayname			~Order RGB~
						Mask				RepeatStr(4,~#~)
						MinValue			(-100)			
						MaxValue			100			
						PromptChar			~ ~
						AllowedChars		~-~;

			StringList( PSPASizeList,New,InListOrder,AddStrings,~Small~,~Large~,~Custom~ );
			Custom_PSPASizeList(PSPASizeList);

			Define:		PSPASize			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Image Size~  
						Type				ComboBoxZeroBasedEx
						ChoiceList			PSPASizeList( GetCopyOf )
						Mask				~#~
						//LangItem			~PSPAImageSize~ 
						//LangSection			~FieldTypes~
						PromptChar			~ ~ ;

			Define:		YBFieldSequence			using DDCtrlMaskEditDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Sequence~
						Mask				RepeatStr(5,~#~)
						PromptChar			~ ~
						Constraints			~NOT NULL Default 0~
						LangSection			~FieldTypes~
						LangItem			~Sequence~
						AllowedChars		~-~;

			if ( Authorized( ~KEXDSS~ ) )
			{
				StringList( RoutingTypeList,New,InListOrder,AddStrings,~Local~,~PNI~,~FTP~ );
			}
			else
			{
				StringList( RoutingTypeList,New,InListOrder,AddStrings,~Local~ );
				Custom_RoutingTypeList(RoutingTypeList);
			}

			Define:		RoutingType			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			RoutingTypeList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( CheckAlignmentFlagList,New,InListOrder,AddStrings,~OK~,~No Heads~,~Multiple Heads 1~,~Multiple Heads 2~,~Multiple Heads 3~,~Head Bottom 1~,~Head Bottom 2~,~Head Top~,~Fractional Head~ );

			Define:		CheckAlignmentFlag using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Check Alignment Flag~  
						Type				ComboBoxZeroBasedEx
						ChoiceList			CheckAlignmentFlagList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			if ( Authorized( ~KEXDSS~ ) )
			{
				StringList( ShastaList,New,InListOrder,AddStrings,~No AE~,~Pro AE~,~Consumer AE~ );
			}
			else
			{
				StringList( ShastaList,New,InListOrder,AddStrings,~No AE~,~Pro AE~ );
			}


			Define:		ShastaFlag using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Auto Enhance~  
						Type				ComboBoxZeroBasedEx
						ChoiceList			ShastaList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( AutoEnhanceList,New,InListOrder,AddStrings,~None~,~Apply Auto Enhancement~,~Mark for Auto Enhancement~ );

			Define:		AutoEnhanceFlag using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Auto Enhance~  
						Type				ComboBoxZeroBasedEx
						ChoiceList			AutoEnhanceList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;
						
			StringList( LogLevel3List,New,InListOrder,AddStrings,~Low~,~Medium~,~High~ );
			Custom_LogLevel3List(LogLevel3List);
			
			Define:		LogLevel3 using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						DisplayName			~Logging~  
						Type				ComboBoxZeroBasedEx
						ChoiceList			LogLevel3List( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( PrintOptionsList,New,InListOrder,AddStrings,~Paper Type~,~Cover Material~,~Packaging Material~ );
			Custom_PrintOptionsList(PrintOptionsList);

			Define:		PrintOptions		using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Type				ComboBoxZeroBasedEx
						ChoiceList			PrintOptionsList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~ ;

			StringList( CropMethodList,New,InListOrder,AddStrings,~Do not hold aspect ratio~,~Hold aspect ratio, expand crop box if necessary~,~Hold aspect ratio, contract crop box if necessary~ );
			StringList( CropMethodListTranslations,New,InListOrder,AddStrings,~Do not hold aspect ratio~,~Hold aspect ratio, expand crop box if necessary~,~Hold aspect ratio, contract crop box if necessary~ );
			Define:		CropMethod			using DDCtrlComboBoxDef	
				Fields:	Definition			~<SQLInteger>~
						Displayname			~Crop Method~
						Type				ComboBoxZeroBasedEx	
						ChoiceList			CropMethodList( GetCopyOf )
						Mask				~#~
						PromptChar			~ ~
						LangSection			~FieldTypes~
						LangItem			~CropMethod~
						LangChoiceList		CropMethodListTranslations( GetCopyOf ) ;

		}

	Hang:	FieldTypes	~[DATABASE]~;

	// ORACLE TYPES:

	// varchar2		text strings up to 4000 bytes
	// char			text strings up to 2000 bytes
	// number		numeric data
	// date			date data
	// raw			binary data up to 2000 bytes
	// long			text data up to 2 GB
	// long raw		binary data up to 2 GB
}


Define:	GeneralToolTips USING DDSymbol

	Fields:	Value	~These strings are used for general purposes~
		Contains:
		{
			Define: FutureVersion using DDText Fields: Text STR ( This field is reserved for future use. )
		}

Hang:	GeneralToolTips	~[STRINGS]~ ;



VOID DefineCustomerTable()
{

	Define:	CustomersToolTips USING DDSymbol Contains:
	{
		Define: dPref		using DDText Fields: Text STR ( Customer Balance Preference - Density. )
		Define: rPref		using DDText Fields: Text STR ( Customer Balance Preference - Red. )
		Define: gPref		using DDText Fields: Text STR ( Customer Balance Preference - Green.)
		Define: bPref		using DDText Fields: Text STR ( Customer Balance Preference - Blue. )
		Define: cPref		using DDText Fields: Text STR ( Customer Balance Preference - Contrast. )
		Define: sPref		using DDText Fields: Text STR ( Customer Balance Preference - Saturation. )
		Define: shPref		using DDText Fields: Text STR ( Customer Balance Preference - Sharpen. )
		Define: gaPref		using DDText Fields: Text STR ( Customer Balance Preference - Gamma. )
		Define: rLogoPref	using DDText Fields: Text STR ( Red Component of Preferred Logo Color by Customer. )
		Define: gLogoPref	using DDText Fields: Text STR ( Green Component of Preferred Logo Color by Customer. )
		Define: bLogoPref	using DDText Fields: Text STR ( Blue Component of Preferred Logo Color by Customer. )
//		Define: TintRemovalPref		using DDText Fields: Text STR ( Customer Preference - Tint Removal. )
	}	
	Hang:	CustomersToolTips	~[STRINGS]~ ;

	Define:				CustomersFields Using DDLong
		Contains:		InListOrder
		{
			Define: ID				CopyOf CustomerID	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	 LangItem ~ID~
			Define: Name			CopyOf CustomerName	~[Database FieldTypes]~ Fields:  LangItem ~Name~
			Define: Contact			CopyOf CustomerName	~[Database FieldTypes]~	Fields: DisplayName	~Contact~ LangItem ~Contact~
			Define: Street			CopyOf Street		~[Database FieldTypes]~ Fields:  LangItem ~Street~
			Define: County			CopyOf County		~[Database FieldTypes]~ Fields:  LangItem ~County~
			Define: City			CopyOf City			~[Database FieldTypes]~ Fields:  LangItem ~City~
			Define: State			CopyOf State		~[Database FieldTypes]~ Fields: LangItem ~State~
			Define: Country			CopyOf Country		~[Database FieldTypes]~ Fields:  LangItem ~Country~
			Define: ZipCode			CopyOf ZipCode		~[Database FieldTypes]~ Fields:  LangItem ~ZipCode~
			Define: Email			CopyOf Email		~[Database FieldTypes]~ Fields:  LangItem ~Email~
			Define: Fax				CopyOf Phone		~[Database FieldTypes]~	Fields: DisplayName	~Fax~  LangItem ~Fax~
			Define: Phone1			CopyOf Phone		~[Database FieldTypes]~	Fields: DisplayName	~Phone 1~  LangItem ~Phone1~
			Define: Phone2			CopyOf Phone		~[Database FieldTypes]~	Fields: DisplayName	~Phone 2~  LangItem ~Phone2~
			Define: Copyright		CopyOf Copyright	~[Database FieldTypes]~	
			Define: DPOSEnabled		CopyOf Boolean		~[Database FieldTypes]~ Fields: DisplayName ~DPOS Enabled~
			Define: DPOSKey			CopyOf Password		~[Database FieldTypes]~ Fields: DisplayName ~DPOS Key~
			
			Define:	dPref			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~dPref~ ColumnToolTipText Translate( CustomersToolTips,dPref ) Constraints ~Default 0~
			Define:	rPref			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~rPref~ ColumnToolTipText Translate( CustomersToolTips,rPref ) Constraints ~Default 0~
			Define:	gPref			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~gPref~ ColumnToolTipText Translate( CustomersToolTips,gPref ) Constraints ~Default 0~
			Define:	bPref			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~bPref~ ColumnToolTipText Translate( CustomersToolTips,bPref ) Constraints ~Default 0~
			
			Define: ContrastPref	CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName ~Contrast~ ColumnToolTipText Translate( CustomersToolTips,cPref ) Constraints ~Default 0~			
			Define: SaturationPref	CopyOf Saturation	~[Database FieldTypes]~	Fields: DisplayName ~Saturation~ ColumnToolTipText Translate( CustomersToolTips,sPref ) Constraints ~Default 0~			
			Define:	SharpenPref		CopyOf Sharpen		~[Database FieldTypes]~	Fields: Constraints ~Default 0~ ColumnToolTipText Translate( CustomersToolTips,shPref ) 
			Define:	GammaPref		CopyOf Gamma		~[Database FieldTypes]~	Fields: Constraints ~Default 1~	ColumnToolTipText Translate( CustomersToolTips,gaPref ) 

			Define: Sepia			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Sepia~ DisplayWidth 25

			Define: Logo			CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~LogoFile~ DisallowedChars ~,"^&*=|?()~ LangItem ~LogoFile~
			Define:	rLogo			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~rLogo~	Constraints ~Default 255~ ColumnToolTipText Translate( CustomersToolTips,rLogoPref )
			Define:	gLogo			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~gLogo~	Constraints ~Default 255~ ColumnToolTipText Translate( CustomersToolTips,gLogoPref )
			Define:	bLogo			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~bLogo~	Constraints ~Default 255~ ColumnToolTipText Translate( CustomersToolTips,bLogoPref )

			Define: Passwrd			CopyOf Password			~[Database FieldTypes]~ Fields: DisplayName ~ProShots Password~
			Define: AlternateID		CopyOf CustomerID		~[Database FieldTypes]~ Fields: DisplayName ~ProShots CustomerID~		
			Define: Delivery		CopyOf Delivery			~[Database FieldTypes]~ Fields: DisplayName ~ProShots Delivery~
			Define: InetImgQuality	CopyOf InetImgQuality	~[Database FieldTypes]~ Fields: DisplayName ~Internet Image Quality~
			Define: CDImgQuality	CopyOf CDImgQuality		~[Database FieldTypes]~ Fields: DisplayName ~CD Image Quality~
			Define: LabCatalog		CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~ProShots Lab Catalog~ LangItem ~ProShotsLabCatalog~		
			Define:	LutIndex		CopyOf LutIndex			~[Database FieldTypes]~	Fields: DisplayName	~Lut Index~ Constraints ~Default 10~	
//			Define:	TintRemovalPref	CopyOf TintRemoval		~[Database FieldTypes]~	Fields: Constraints ~Default 0~	ColumnToolTipText Translate( CustomersToolTips,TintRemovalPref ) 
			Define: AbstractProfile	CopyOf ICCProfile		~[Database FieldTypes]~	Fields: DisplayName ~Abstract Profile~	
			
		}

	Define:		CustomersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CustomersPrimaryKey Using DDText
				Fields:	Text			~Constraint CustomersPrimaryKey PRIMARY KEY(ID)~
		}

	Define:		CustomersTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: CustomerNameIndex Using DDText
				Fields:	Text	~Create Index CustomerNameIndex on Customers(Name)~
		}


	Define:				Customers			Using DDDatabaseTableDef
		Fields:			TableName			Customers
						Indexes				CustomersTableIndexes(GetObjectReference)
						TableConstraints	CustomersTableConstraints(GetObjectReference)
						Fields				CustomersFields(GetObjectReference)
		
	Hang: Customers ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineStudiosTable()
{

	Define:	StudiosToolTips USING DDSymbol Contains:
	{
		Define: ID			using DDText Fields: Text STR ( Studio ID is the same as the Customer ID )
	}	
	Hang:	StudiosToolTips	~[STRINGS]~ ;

	Define:				StudiosFields Using DDLong
		Contains:		InListOrder
		{
			Define: ID			CopyOf ID	~[Database FieldTypes]~
		}

	Define:		StudiosTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: StudiosPrimaryKey Using DDText
				Fields:	Text			~Constraint StudiosPrimaryKey PRIMARY KEY(ID)~

			Define: RefToCustomerID Using DDText
				Fields:	Text			~Constraint RefToCustomerID FOREIGN KEY (ID) REFERENCES Customers(ID)~
		}

	Define:		StudiosTableIndexes Using DDLong
		Contains:	InListOrder
		{
			//Define: StudiosNameIndex Using DDText
			//	Fields:	Text	~Create Index StudiosNameIndex on Studios(Name)~
		}


	Define:				Studios			Using DDDatabaseTableDef
		Fields:			TableName			Studios
						Indexes				StudiosTableIndexes(GetObjectReference)
						TableConstraints	StudiosTableConstraints(GetObjectReference)
						Fields				StudiosFields(GetObjectReference)
		
	Hang: Studios ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineOrderNotificationsTable()
{
	Define:			OrderNotificationsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID			CopyOf OrderID			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define: NotifyText		CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName	~Notification~
		}

	Define:		OrderNotificationsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderNotificationsPrimaryKey Using DDText
				Fields:	Text		~Constraint OrderNotificationsPrimaryKey PRIMARY KEY(OrderID)~
		}


	Define:			OrderNotifications	Using DDDatabaseTableDef
		Fields:		TableName			OrderNotifications
					TableConstraints	OrderNotificationsTableConstraints(GetObjectReference)
					Fields				OrderNotificationsFields(GetObjectReference)	

	Hang: OrderNotifications ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineOrdersTable()
{

	Define:	OrdersToolTips USING DDSymbol Contains:
	{
		Define: CameraFiles	using DDText Fields: Text STR ( This field tells whether or not the order contains raw camera files which need to be converted to an 8-bit format. )
		Define: dPref		using DDText Fields: Text STR ( Order Balance Preference - Density. )
		Define: rPref		using DDText Fields: Text STR ( Order Balance Preference - Red. )
		Define: gPref		using DDText Fields: Text STR ( Order Balance Preference - Green.)
		Define: bPref		using DDText Fields: Text STR ( Order Balance Preference - Blue. )
		Define: cPref		using DDText Fields: Text STR ( Order Balance Preference - Contrast. )
		Define: sPref		using DDText Fields: Text STR ( Order Balance Preference - Saturation. )
		Define: shPref		using DDText Fields: Text STR ( Order Balance Preference - Sharpen. )
		Define: gaPref		using DDText Fields: Text STR ( Order Balance Preference - Gamma. )
//		Define: TintRemovalPref		using DDText Fields: Text STR ( Order Preference - Tint Removal. )
	}	
	Hang:	OrdersToolTips	~[STRINGS]~ ;

	Define:				OrdersFields Using DDLong
		Contains:		InListOrder
		{
			Define:	ID				CopyOf OrderID			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	CustomerID		CopyOf CustomerID		~[Database FieldTypes]~	Fields: LangItem CustomerID	
			Define:	ProgramID		CopyOf SlctblID			~[Database FieldTypes]~	Fields: DisplayName ~ProgramID~			
			Define:	InfoType		CopyOf SlctblInfoType	~[Database FieldTypes]~	Fields: DisplayName	~InfoType~
			Define:	ImagesOrderID	CopyOf OrderID			~[Database FieldTypes]~ Fields: DisplayName	~Images Order~ LangItem ~ImagesOrder~
			Define:	CustomerOrderID	CopyOf OrderID			~[Database FieldTypes]~	Fields: DisplayName	~Customer OrderID~ LangItem ~CustomerOrderID~	
			Define: OrderName		CopyOf OrderName		~[Database FieldTypes]~ Fields: LangItem OrderName
			Define: ShootDescID		CopyOf SlctblShootDescID ~[Database FieldTypes]~
			Define: ShootDescType	CopyOf ShootDescType	~[Database FieldTypes]~
			Define:	BatchID			CopyOf BatchID			~[Database FieldTypes]~
			Define:	BatchSeq		CopyOf Sequence			~[Database FieldTypes]~ Fields: DisplayName	~Batch Seq~ LangItem ~BatchSeq~
			Define:	Status			CopyOf OrderStatus		~[Database FieldTypes]~	Fields: LangItem Status
			Define:	CameraFileConversionStatus		CopyOf CameraFileConversionStatus	~[Database FieldTypes]~	 Fields: Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,CameraFiles)
			Define:	RunCount		CopyOf RunCount			~[Database FieldTypes]~
			Define:	Type			CopyOf OrderType		~[Database FieldTypes]~	
			Define:	OrderSource		CopyOf OrderSource		~[Database FieldTypes]~		
			Define:	OrderDate		CopyOf DateTime			~[Database FieldTypes]~ Fields: DisplayName	~Order Date~ LangItem OrderDate
			Define:	ShipDate		CopyOf DateTime			~[Database FieldTypes]~ Fields: DisplayName	~Ship Date~ LangItem ShipDate
			Define:	Priority		CopyOf Priority			~[Database FieldTypes]~ Fields: Constraints ~Default 50~ LangItem Priority
			Define: Description		CopyOf Description		~[Database FieldTypes]~	Fields: DisplayName	~Description~
			Define:	Owner			CopyOf Name				~[Database FieldTypes]~ Fields: DisplayName	~Owner~ LangItem ~Owner~
			Define: Copyright		CopyOf Copyright		~[Database FieldTypes]~	
			Define:	dPref			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~dPref~ Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,dPref )
			Define:	rPref			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~rPref~ Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,rPref )
			Define:	gPref			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~gPref~ Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,gPref )
			Define:	bPref			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~bPref~ Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,bPref )
			Define: ContrastPref	CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName ~Contrast~ Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,cPref )
			Define: SaturationPref	CopyOf Saturation		~[Database FieldTypes]~	Fields: DisplayName ~Saturation~ Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,sPref )
			Define:	SharpenPref		CopyOf Sharpen			~[Database FieldTypes]~	Fields: Constraints ~Default 0~ ColumnToolTipText Translate( OrdersToolTips,shPref )
			Define:	GammaPref		CopyOf Gamma			~[Database FieldTypes]~	Fields: Constraints ~Default 1~ ColumnToolTipText Translate( OrdersToolTips,gaPref )

			Define: ScanSetup 		CopyOf SelectableScanSetupName	~[Database FieldTypes]~
			Define:	FilmType		CopyOf FilmType			~[Database FieldTypes]~
			Define:	Instructions	CopyOf Instructions		~[Database FieldTypes]~
			Define: PrintJobNumber	CopyOf OrderID			~[Database FieldTypes]~ Fields: DisplayName ~Print OrderNum~ LangItem ~PrintOrderNum~
			Define: Delivery		CopyOf Delivery			~[Database FieldTypes]~ Fields: DisplayName ~ProShots Delivery~
			Define:	RetouchBatchSetup	CopyOf BatchSetup	~[Database FieldTypes]~	Fields: DisplayName	~RetouchBatchSetup~
			Define: ParentOrderID	CopyOf OrderID			~[Database FieldTypes]~ Fields: DisplayName ~Parent OrderID~ LangItem ~ParentOrderID~
			if ( Authorized( ~KEXDSS~ ) )
			{
				Define: Token				CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Token~ LangItem ~Token~
			}
//			Define:	TintRemovalPref	CopyOf TintRemoval		~[Database FieldTypes]~	Fields: Constraints ~Default 0~	ColumnToolTipText Translate( OrdersToolTips,TintRemovalPref ) 
			Define: AbstractProfile		CopyOf ICCProfile	~[Database FieldTypes]~	Fields: DisplayName ~Abstract Profile~	
		}

	Define:		OrdersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrdersPrimaryKey Using DDText
				Fields:	Text			~Constraint OrdersPrimaryKey PRIMARY KEY(ID)~

			//Define: RefOrdersToCustomerID Using DDText
			//	Fields:	Text			~Constraint RefOrdersToCustomerID FOREIGN KEY (CustomerID) REFERENCES Customers(ID)~

			// THIS IS TEMPORARILY COMMENTED OUT UNTIL WE FIGURE OUT ANOTHER ARCHIVING SOLUTION
			//Define: RefOrdersToOrderID Using DDText
			//	Fields:	Text			~Constraint RefOrdersToOrderID FOREIGN KEY (ImagesOrderID) REFERENCES Orders(ID)~
						
			//Define: CascadeRefOrdersToOrderID Using DDCascade
			//	Fields:	Name			RefOrdersToOrderID
			//			Text			~Update Of ID Cascades~
			//			Updates			TRUE
			//			Deletes			TRUE

			//Define: CascadeRefOrdersToCustomerID Using DDCascade
			//	Fields:	Name			RefOrdersToCustomerID
			//			Text			~Update Of ID Cascades~
			//			Updates			TRUE
			//			Deletes			TRUE
		}

	Define:		OrdersTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: OrdersCustomerIDIndex Using DDText
				Fields:	Text	~Create Index OrdersCustomerIDIndex on Orders(CustomerID)~

			Define: OrdersImagesOrderIDIndex Using DDText
				Fields:	Text	~Create Index OrdersImagesOrderIDIndex on Orders(ImagesOrderID)~

			Define: OrdersBatchIDIndex Using DDText
				Fields:	Text	~Create Index OrdersBatchIDIndex on Orders(BatchID)~

			Define: OrdersStatusIndex Using DDText
				Fields:	Text	~Create Index OrdersStatusIndex on Orders(Status)~

			Define: CustomerOrderIDIndex Using DDText
				Fields:	Text	~Create Index CustomerOrderIDIndex on Orders(CustomerOrderID)~

			Define: OrdersInfoTypeIndex Using DDText
				Fields:	Text	~Create Index OrdersInfoTypeIndex on Orders(InfoType)~

			Define: OrdersNameTypeIndex Using DDText
				Fields: Text	~Create Index OrdersNameTypeIndex on Orders(OrderName)~

			Define: OrdersParentOrderIDIndex Using DDText
				Fields: Text	~Create Index OrdersParentOrderIDIndex on Orders(ParentOrderID)~

			if ( RunningVersion(3.0))
			{
				Define: OrdersShootDescIDIndex Using DDText
					Fields:	Text	~Create Index OrdersShootDescIDIndex on Orders(ShootDescID)~
			}
		}


	Define:				Orders	Using DDDatabaseTableDef
		Fields:			TableName			Orders
						Indexes				OrdersTableIndexes(GetObjectReference)
						TableConstraints	OrdersTableConstraints(GetObjectReference)
						Fields				OrdersFields(GetObjectReference)	

	Hang: Orders ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineAnimotoTable()
{
	Define:	AnimotoToolTips USING DDSymbol Contains:
	{
		Define: ID	using DDText Fields: Text STR ( A unique identifer for each Animoto Setup )
		
	}	
	Hang:	AnimotoToolTips	~[STRINGS]~ ;

	Define:				AnimotoFields Using DDLong
		Contains:		InListOrder
		{
			Define:	ID								CopyOf AnimotoSetup				~[Database FieldTypes]~ Fields:  Constraints	~NOT NULL~
			
			Define: Test							CopyOf Boolean					~[Database FieldTypes]~ Fields: Constraints	~default 0~	DisplayName ~Testing~
			Define: ServerLogLevel					CopyOf LogLevel3				~[Database FieldTypes]~ Fields: Constraints	~default 0~	DisplayName ~Server Log Level~
			
			Define: ActivityPollInterval			CopyOf Interval					~[Database FieldTypes]~ Fields:	DisplayName	~Activity Poll~		Constraints	~default 30~
			Define: ApprovalPollInterval			CopyOf Interval					~[Database FieldTypes]~ Fields:	DisplayName	~Approval Poll~		Constraints	~default 300~
			
			Define:	EmailNotifySite					CopyOf WebHost					~[Database FieldTypes]~	
			Define:	EmailNotifySitePort				CopyOf Generic4Digit			~[Database FieldTypes]~	Fields: DisplayName ~Notification Port~		Constraints	~Default 80~
			Define:	LabHostPassword					CopyOf Password_36Pix			~[Database FieldTypes]~	Fields: DisplayName ~Lab Password~
			
			Define:	CreationHost					CopyOf Password_36Pix			~[Database FieldTypes]~	Fields: DisplayName ~Creation Host~
			Define:	CreationHostPort				CopyOf Password_36Pix			~[Database FieldTypes]~	Fields: DisplayName ~Creation Host Port~
			Define:	CreationHostPassword			CopyOf Password_36Pix			~[Database FieldTypes]~	Fields: DisplayName ~Creation Host Password~
			
			Define:	EmailNotifyFrom					CopyOf NotificationEmail		~[Database FieldTypes]~	Fields: DisplayName ~Email From~
			Define:	EmailNotifyReplyTo				CopyOf NotificationEmail		~[Database FieldTypes]~ Fields: DisplayName ~Email ReplyTo~
			
			Define:	EmailPreviewSubject				CopyOf Generic128Char			~[Database FieldTypes]~ Fields: DisplayName ~Preview Subject~
			Define:	EmailPreviewHTML				CopyOf MultiLineLongText		~[Database FieldTypes]~ Fields: DisplayName ~Preview HTML Content~  
			Define:	EmailPreviewText				CopyOf MultiLineLongText		~[Database FieldTypes]~ Fields: DisplayName ~PlainText Preview Email~  
			
			Define:	EmailAvailableSubject			CopyOf Generic128Char			~[Database FieldTypes]~ Fields: DisplayName ~Images Available Subject~
			Define:	EmailAvailableHTML				CopyOf MultiLineLongText		~[Database FieldTypes]~ Fields: DisplayName ~Images Available HTML Content~  
			Define:	EmailAvailableText				CopyOf MultiLineLongText		~[Database FieldTypes]~ Fields: DisplayName ~Images Available Preview Email~  
			
			Define:	EmailFinalSubject				CopyOf Generic128Char			~[Database FieldTypes]~ Fields: DisplayName ~Final Subject~ 
			Define:	EmailFinalHTML					CopyOf MultiLineLongText		~[Database FieldTypes]~ Fields: DisplayName ~Final HTML Email~  
			Define:	EmailFinalText					CopyOf MultiLineLongText		~[Database FieldTypes]~ Fields: DisplayName ~Final PlainText Email~  
			
			Define: POFDirectory					CopyOf Path						~[Database FieldTypes]~ Fields: DisplayName ~POF Directory~  LangItem ~~
			
			Define: LocalStorage					CopyOf Path						~[Database FieldTypes]~ Fields: DisplayName ~Local Storage~  LangItem ~~
			Define: WebStorage						CopyOf Path						~[Database FieldTypes]~ Fields: DisplayName ~Web Storage~  LangItem ~~
		}

	Define:		 AnimotoTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoPrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoPrimaryKey PRIMARY KEY(ID)~
		}

	Define:		AnimotoTableIndexes Using DDLong
		Contains:	InListOrder
		{
			//Define: AnimotoOrdersIndex Using DDText
			//	Fields:	Text	~Create Index AnimotoOrdersIndex on AnimotoMovie(OrderID)~
		}


	Define:				Animoto	Using DDDatabaseTableDef
		Fields:			TableName			Animoto
						Indexes				AnimotoTableIndexes(GetObjectReference)
						TableConstraints	AnimotoTableConstraints(GetObjectReference)
						Fields				AnimotoFields(GetObjectReference)	

	Hang: Animoto ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineAnimotoLocalStorageTable()
{
	Define:	AnimotoLocalStorageToolTips USING DDSymbol Contains:
	{
		Define: ID	using DDText Fields: Text STR ( A unique identifer for each Animoto Setup )
		
	}	
	Hang:	AnimotoLocalStorageToolTips	~[STRINGS]~ ;

	Define:				AnimotoLocalStorageFields Using DDLong
		Contains:		InListOrder
		{
			Define:	Setup					CopyOf AnimotoSetup				~[Database FieldTypes]~ Fields:  Constraints	~NOT NULL~
			Define: Sequence				CopyOf Sequence					~[Database FieldTypes]~
			Define: Path					CopyOf Path						~[Database FieldTypes]~ Fields: DisplayName		~Local Directory~  LangItem ~~
		}

	Define:		 AnimotoLocalStorageTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoLocalStoragePrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoLocalStoragePrimaryKey PRIMARY KEY(Setup,Sequence)~
		}

	Define:		AnimotoLocalStorageTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:				AnimotoLocalStorage	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoLocalStorage
						Indexes				AnimotoLocalStorageTableIndexes(GetObjectReference)
						TableConstraints	AnimotoLocalStorageTableConstraints(GetObjectReference)
						Fields				AnimotoLocalStorageFields(GetObjectReference)	

	Hang: AnimotoLocalStorage ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineAnimotoWebStorageTable()
{
	Define:	AnimotoWebStorageToolTips USING DDSymbol Contains:
	{
		Define: ID	using DDText Fields: Text STR ( A unique identifer for each Animoto Setup )
		
	}	
	Hang:	AnimotoWebStorageToolTips	~[STRINGS]~ ;

	Define:				AnimotoWebStorageFields Using DDLong
		Contains:		InListOrder
		{
			Define:	Setup					CopyOf AnimotoSetup				~[Database FieldTypes]~ Fields:  Constraints	~NOT NULL~
			Define: Sequence				CopyOf Sequence					~[Database FieldTypes]~
			Define: Path					CopyOf Path						~[Database FieldTypes]~ Fields: DisplayName		~Web Directory~  LangItem ~~
		}

	Define:		 AnimotoWebStorageTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoWebStoragePrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoWebStoragePrimaryKey PRIMARY KEY(Setup,Sequence)~
		}

	Define:		AnimotoWebStorageTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:				AnimotoWebStorage	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoWebStorage
						Indexes				AnimotoWebStorageTableIndexes(GetObjectReference)
						TableConstraints	AnimotoWebStorageTableConstraints(GetObjectReference)
						Fields				AnimotoWebStorageFields(GetObjectReference)	

	Hang: AnimotoWebStorage ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineAnimotoCustomerTable()
{
	Define:	AnimotoCustomerToolTips USING DDSymbol Contains:
	{
		Define: ID	using DDText Fields: Text STR ( A unique identifer for each Animoto Customer )
		Define: CustomerID	using DDText Fields: Text STR ( The CustomerID from the Order )
	}	
	Hang:	AnimotoCustomerToolTips	~[STRINGS]~ ;

	Define:				AnimotoCustomerFields Using DDLong
		Contains:		InListOrder
		{
			Define: ID					CopyOf CustomerID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ DisplayName ~ID~	 LangItem ~~
			Define: CustomerID			CopyOf CustomerID			~[Database FieldTypes]~	Fields: DisplayName ~Customer ID~ LangItem ~~
			Define: Name				CopyOf CustomerName			~[Database FieldTypes]~ Fields: LangItem ~Customer Name~
			Define: LoginID				CopyOf Email				~[Database FieldTypes]~ Fields: DisplayName ~Login~
			Define: LoginPassword		CopyOf AnimotoPassword		~[Database FieldTypes]~ 	
			
			Define: Notify				CopyOf Email				~[Database FieldTypes]~ Fields:  LangItem ~Email~
			Define: CustomerType		CopyOf CustomerType			~[Database FieldTypes]~ 
			
			Define: Contact				CopyOf CustomerName			~[Database FieldTypes]~	Fields: DisplayName	~Contact~ LangItem ~Contact~
			Define: Phone				CopyOf Phone				~[Database FieldTypes]~	Fields: DisplayName	~Phone 1~  LangItem ~Phone~

			Define: LastActivityDate	CopyOf DateTimeShowingTime	~[Database FieldTypes]~ Fields: DisplayName ~Last Activity~	LangItem ~~
			Define: LastClientBUDate	CopyOf SortableDateTime		~[Database FieldTypes]~ Fields: DisplayName ~Last Backup~	LangItem ~~
		}

	Define:		 AnimotoCustomerTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoCustomerPrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoCustomerPrimaryKey PRIMARY KEY(ID)~
		}

	Define:		AnimotoCustomerTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: CustomerIDIndex Using DDText
				Fields:	Text	~Create Index AnimotoCustomerIDIndex on AnimotoCustomer(CustomerID)~
		}


	Define:				AnimotoCustomer	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoCustomer
						Indexes				AnimotoCustomerTableIndexes(GetObjectReference)
						TableConstraints	AnimotoCustomerTableConstraints(GetObjectReference)
						Fields				AnimotoCustomerFields(GetObjectReference)	

	Hang: AnimotoCustomer ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineAnimotoUsageTable()
{
	Define:	AnimotoUsageToolTips USING DDSymbol Contains:
	{
		Define: UserID	using DDText Fields: Text STR ( A unique identifer for each Animoto Customer )
	}	
	Hang:	AnimotoUsageToolTips	~[STRINGS]~ ;

	Define:				AnimotoUsageFields Using DDLong
		Contains:		InListOrder
		{
			Define: MovieID				CopyOf ID					~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ DisplayName ~MovieID~	 LangItem ~~
			Define: UserID				CopyOf CustomerID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ DisplayName ~ID~			LangItem ~~
			Define: CreationDate		CopyOf DateTimeShowingTime	~[Database FieldTypes]~ Fields: DisplayName ~Created~	LangItem ~~
			Define: ApprovalDate		CopyOf DateTimeShowingTime	~[Database FieldTypes]~ Fields: DisplayName ~Approved~	LangItem ~~
			Define: ProductionCount		CopyOf Count				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL  Default 0~ DisplayName ~Production Count~	 LangItem ~~
			Define: Resolution			CopyOf AnimotoResolution	~[Database FieldTypes]~
			Define: WebRes				CopyOf Boolean				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL  Default 0~ DisplayName ~WebRes~
			Define: MediaCount			CopyOf Count				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL  Default 0~ DisplayName ~Media Count~			LangItem ~~
			Define: Downloadable		CopyOf Boolean				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL  Default 0~ DisplayName ~Downloadable~	LangItem ~~
		}

	Define:		 AnimotoUsageTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoUsagePrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoUsagePrimaryKey PRIMARY KEY(MovieID)~
		}

	Define:		AnimotoUsageTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoCreationDateIndex Using DDText
				Fields:	Text	~Create Index AnimotoCreationDateIndex on AnimotoUsage(CreationDate)~
				
			Define: AnimotoUserIDIndex Using DDText
				Fields:	Text	~Create Index AnimotoUserIDIndex on AnimotoUsage(UserID)~
		}


	Define:				AnimotoUsage	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoUsage
						Indexes				AnimotoUsageTableIndexes(GetObjectReference)
						TableConstraints	AnimotoUsageTableConstraints(GetObjectReference)
						Fields				AnimotoUsageFields(GetObjectReference)	

	Hang: AnimotoUsage ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineAnimotoMovieTable()
{
	Define:	AnimotoMovieToolTips USING DDSymbol Contains:
	{
		Define: ID		using DDText Fields: Text STR ( Unique identifer for each Movie )
		Define: UserID	using DDText Fields: Text STR ( Link to the unique UserID in the AnimotoCustomer table for this movie )
	}	
	Hang:	AnimotoMovieToolTips	~[STRINGS]~ ;

	Define:				AnimotoMovieFields Using DDLong
		Contains:		InListOrder
		{
			Define:	ID					CopyOf ID					~[Database FieldTypes]~ Fields: DisplayName ~MovieID~ LangItem ~~ Constraints	~NOT NULL~
			Define:	Setup				CopyOf Name					~[Database FieldTypes]~ Fields: DisplayName ~Setup~ Constraints	~NOT NULL Default 'Master'~
			Define:	UserID				CopyOf LongName				~[Database FieldTypes]~ Fields: DisplayName ~User~ Constraints	~NOT NULL Default 'Lab'~ DisplayName ~UserID~  LangItem ~~
			Define:	OrderID				CopyOf OrderID				~[Database FieldTypes]~ Fields: DisplayName ~OrderID~
			Define:	BookID				CopyOf GroupID				~[Database FieldTypes]~ Fields: DisplayName ~BookID~ Constraints ~NOT NULL Default 0~  LangItem ~GroupID~
			Define: ProductCode			CopyOf BremsonProductCode	~[Database FieldTypes]~ Fields: DisplayName ~Product Code~

			// Tracking
			Define: Active				CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Active~ Constraints ~NOT NULL Default 0~ 
			Define:	Producer			CopyOf Generic48Char		~[Database FieldTypes]~	Fields: DisplayName ~Producer~
			Define:	State				CopyOf AnimotoMovieState	~[Database FieldTypes]~	
			Define:	DelayUntil			CopyOf DateTimeShowingTime	~[Database FieldTypes]~	Fields: DisplayName ~Delay Until~ LangItem ~~
			Define: ErrorOccurred		CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Error~ Constraints ~NOT NULL Default 0~ 
			Define: ErrorDescription	CopyOf LongText				~[Database FieldTypes]~ Fields: DisplayName ~Description~
			Define:	SubmitDate			CopyOf DateTimeShowingTime	~[Database FieldTypes]~	Fields: DisplayName ~Submitted~ LangItem ~~
			Define:	ApprovedDate		CopyOf DateTimeShowingTime	~[Database FieldTypes]~	Fields: DisplayName ~Approved~ LangItem ~~
			Define:	CompleteDate		CopyOf DateTimeShowingTime	~[Database FieldTypes]~	Fields: DisplayName ~Completed~ LangItem ~~
			Define:	Priority			CopyOf Priority				~[Database FieldTypes]~ Fields: Constraints ~Default 50~ 
			Define: Notify				CopyOf NotificationEmail	~[Database FieldTypes]~

			Define: NoPreview			CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~No Preview~ Constraints ~NOT NULL Default 0~ 
			Define: NeedsApproval		CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Needs Approval~ Constraints ~NOT NULL Default 0~ 
			Define: WantWebRes			CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Want WebRes~ Constraints ~NOT NULL Default 0~ 
			Define: PublishFinal		CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Publish Final~ Constraints ~NOT NULL Default 0~
			
			Define: BurnMovie			CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Burn~ Constraints ~NOT NULL Default 0~ 
			Define: RImageOrderID		CopyOf OrderID				~[Database FieldTypes]~	Fields: DisplayName ~Rimage OrderID ID~ LangItem ~RimageOrderID~
			Define: RImageTemplate		CopyOf OrderID				~[Database FieldTypes]~	Fields: DisplayName ~Template ID~ LangItem ~TemplateID~
			Define: RImageQty			CopyOf Quantity				~[Database FieldTypes]~	Fields: DisplayName ~Qty~ LangItem ~~ Constraints ~Default 1~
			Define: ReleaseRImageOrder	CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Release~ Constraints ~NOT NULL Default 0~ 
			
			Define: MovieStyle			CopyOf AnimotoStyle			~[Database FieldTypes]~											// Required The style of the video to be directed.  Must be "original"
			Define: Title				CopyOf SettingsText			~[Database FieldTypes]~	Fields: DisplayName ~Movie Title~		// Optional The "title" of this video (Max length 255 characters.)

			Define: Resolution			CopyOf AnimotoResolution	~[Database FieldTypes]~								// Required string, one of: "180p", "270p", "360p", "480p", "576p", "720p", or "1080p". The desired output resolution.
			Define: FrameRate			CopyOf AnimotoFrameRate		~[Database FieldTypes]~								// Required Integer, one of: 12, 15, 24, 25, or 30 This is the desired number of frames per second of the output video.
			Define: Format				CopyOf AnimotoFormat		~[Database FieldTypes]~								// Required String, one of: "h264". The desired output format of the video.

			Define: Fitting				CopyOf AnimotoFitting		~[Database FieldTypes]~											// Required String: must be "best_fit"
			Define: MaxDuration			CopyOf DoubleValue			~[Database FieldTypes]~	Fields:  DisplayName ~Max Duration~ Constraints ~Default 0~			// Optional duration in seconds to be used of the supplied audio. Max is 1800 seconds

			Define: Pacing				CopyOf AnimotoPacing		~[Database FieldTypes]~											// Optional  "very_fast", "fast", "moderate", "slow", "very_slow" or "auto" allowed

			Define: SongURL				CopyOf WebURL				~[Database FieldTypes]~	Fields: DisplayName ~Song URL~								// Required source url of the audio.  Must be an mp3
			Define: SongArtist			CopyOf LongName				~[Database FieldTypes]~	Fields: DisplayName ~Song Artist~							// Optional override mp3 ID3 info with artist info
			Define: SongTitle			CopyOf LongName				~[Database FieldTypes]~	Fields: DisplayName ~Song Title~	AllowedChars ~'~		// Optional override mp3 ID3 info with track title
			Define: SongStart			CopyOf DoubleValue			~[Database FieldTypes]~	Fields: DisplayName ~Start~ Constraints ~Default 0~			// Optional offset in seconds where playback of this audio will begin. Default is 0
			Define: SongDuration		CopyOf DoubleValue			~[Database FieldTypes]~	Fields: DisplayName ~Duration~ Constraints ~Default 1800~	// Optional duration in seconds to be used of the supplied audio. Max is 1800 seconds
			
			Define: PostRoll			CopyOf AnimotoPostRoll		~[Database FieldTypes]~											// Optional "powered_by_animoto", "white_label", "custom_footage"
			Define: PostRollPath		CopyOf Path					~[Database FieldTypes]~	Fields: DisplayName ~Post Roll Path~ LangItem ~~	// Only required for "custom_footage"
			Define: PostRollURL			CopyOf WebURL				~[Database FieldTypes]~	Fields: DisplayName ~Post Roll URL~		// Only required for "custom_footage"
			
			Define: HiResDestinationPath	CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName ~HiRes WebPath~ LangItem ~~	
			Define: WebResDestinationPath	CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName ~WebRes WebPath~ LangItem ~~	
			
			Define: LastClientBUDate	CopyOf SortableDateTime		~[Database FieldTypes]~ Fields: DisplayName ~Last Backup~	LangItem ~~
			Define: VideoClientInfo		CopyOf MultiLineLongText	~[Database FieldTypes]~ Fields: DisplayName ~ClientInfo~	LangItem ~~
		}

	Define:		 AnimotoMovieTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoMoviePrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoMoviePrimaryKey PRIMARY KEY(ID)~
				
			Define: AnimotoMovieSetupToAnimotorID Using DDText
				Fields:	Text			~Constraint AnimotoMovieSetupToAnimotorID FOREIGN KEY (Setup) REFERENCES Animoto(ID)~
		}

	Define:		AnimotoMovieTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoMovieOrdersIndex Using DDText
				Fields:	Text	~Create Index AnimotoMovieOrdersIndex on AnimotoMovie(OrderID)~
				
			Define: AnimotoMovieUserIDIndex Using DDText
				Fields:	Text	~Create Index AnimotoMovieUserIDIndex on AnimotoMovie(UserID)~
				
			Define: AnimotoMovieSetupIndex Using DDText
				Fields:	Text	~Create Index AnimotoMovieSetupIndex on AnimotoMovie(Setup)~
				
			Define: AnimotoMovieStateIndex Using DDText
				Fields:	Text	~Create Index AnimotoMovieStateIndex on AnimotoMovie(State)~
				
			Define: AnimotoMovieSubmitDateIndex Using DDText
				Fields:	Text	~Create Index AnimotoMovieSubmitDateIndex on AnimotoMovie(SubmitDate)~
				
			Define: AnimotoMoviePriorityIndex Using DDText
				Fields:	Text	~Create Index AnimotoMoviePriorityIndex on AnimotoMovie(Priority)~
		}


	Define:				AnimotoMovie	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoMovie
						Indexes				AnimotoMovieTableIndexes(GetObjectReference)
						TableConstraints	AnimotoMovieTableConstraints(GetObjectReference)
						Fields				AnimotoMovieFields(GetObjectReference)	

	Hang: AnimotoMovie ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineAnimotoRendersTable()
{
	Define:	AnimotoRendersToolTips USING DDSymbol Contains:
	{
		Define: MovieID	using DDText Fields: Text STR ( A unique identifer for each Movie )
	}
	
	Hang:	AnimotoRendersToolTips	~[STRINGS]~ ;

	Define:				AnimotoRendersFields Using DDLong
		Contains:		InListOrder
		{
			Define:	MovieID				CopyOf ID					~[Database FieldTypes]~ Fields: DisplayName ~MovieID~ LangItem ~~ Constraints	~NOT NULL~
			Define:	Name				CopyOf Name					~[Database FieldTypes]~ Fields: DisplayName ~Name~ Constraints	~NOT NULL~
			Define:	Sequence			CopyOf Sequence				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL Default 0~
			Define:	SubmitDate			CopyOf DateTimeShowingTime	~[Database FieldTypes]~	Fields: DisplayName ~Submitted~ LangItem ~~
			Define:	CreateDate			CopyOf DateTimeShowingTime	~[Database FieldTypes]~	Fields: DisplayName ~Created~ LangItem ~~
			Define:	Approved			CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName ~Approved~ Constraints	~NOT NULL Default 0~ LangItem ~~

			Define: Resolution			CopyOf AnimotoResolution	~[Database FieldTypes]~								
			Define: FrameRate			CopyOf AnimotoFrameRate		~[Database FieldTypes]~								
			Define: Format				CopyOf AnimotoFormat		~[Database FieldTypes]~								
		
			Define: JobURL				CopyOf WebURLLong			~[Database FieldTypes]~	Fields: DisplayName ~Animoto Job URL~
			Define: StoryBoardURL		CopyOf WebURLLong			~[Database FieldTypes]~	Fields: DisplayName ~Animoto Storyboard URL~	
			Define: VideoResourceURL	CopyOf WebURLLong			~[Database FieldTypes]~	Fields: DisplayName ~Animoto Video Resource URL~	
			
			Define: VideoURL			CopyOf WebURLLong			~[Database FieldTypes]~	Fields: DisplayName ~Animoto Video URL~	
			Define: VideoPath			CopyOf Path					~[Database FieldTypes]~	Fields: DisplayName ~Local Video Path~ LangItem ~~
			Define: PublishedURL		CopyOf WebURLLong			~[Database FieldTypes]~	Fields: DisplayName ~Published Video URL~
			
			Define: CoverImageURL		CopyOf WebURLLong			~[Database FieldTypes]~	Fields: DisplayName ~Animoto Cover URL~	
			Define: CoverImagePath		CopyOf Path					~[Database FieldTypes]~	Fields: DisplayName ~Local Cover Image Path~	LangItem ~~
			Define: PublishedCoverURL	CopyOf WebURLLong			~[Database FieldTypes]~	Fields: DisplayName ~Published Cover Image URL~
			
			Define: DirectingManifest	CopyOf MultiLineLongText	~[Database FieldTypes]~	Fields: DisplayName ~Manifest~		
		}

	Define:		 AnimotoRendersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoRendersPrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoRendersPrimaryKey PRIMARY KEY(MovieID,Name,Sequence)~
				
			Define: AnimotoRendersMovieIDToAnimotorID Using DDText
				Fields:	Text			~Constraint AnimotoRendersMovieIDToAnimotorID FOREIGN KEY (MovieID) REFERENCES AnimotoMovie (ID)~
		}

	Define:		AnimotoRendersTableIndexes Using DDLong
		Contains:	InListOrder
		{
			
		}

	Define:				AnimotoRenders	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoRenders
						Indexes				AnimotoRendersTableIndexes(GetObjectReference)
						TableConstraints	AnimotoRendersTableConstraints(GetObjectReference)
						Fields				AnimotoRendersFields(GetObjectReference)	

	Hang: AnimotoRenders ~[DATABASE TableDefinitions]~ InListOrder;
}




VOID DefineAnimotoVisualsTable()
{
	Define:	AnimotoVisualsToolTips USING DDSymbol Contains:
	{
		Define: MovieID		using DDText Fields: Text STR ( The movie this visual is associated with )
		Define: Sequence	using DDText Fields: Text STR ( The sequence in the movie this visual is associated with )
		
	}	
	Hang:	AnimotoVisualsToolTips	~[STRINGS]~ ;

	Define:				AnimotoVisualsFields Using DDLong
		Contains:		InListOrder
		{
			Define:	MovieID						CopyOf ID						~[Database FieldTypes]~ Fields: DisplayName ~Movie ID~ Constraints	~NOT NULL~ LangItem ~~
			Define:	Sequence					CopyOf Sequence					~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	VisualType					CopyOf AnimotoVisualType		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~							// Required String: must be one of "image", "footage", "title_card"
			Define:	Spotlit						CopyOf Boolean					~[Database FieldTypes]~ Fields: DisplayName ~Spot Lite~ Constraints	~Default 0~	// Optional whether to add extra emphasis to this visual			
			
			Define: ItemID						CopyOf OrderItemID				~[Database FieldTypes]~ Fields: DisplayName	~Item~ LangItem ~~
			
			Define:	Rotation					CopyOf AnimotoRotation			~[Database FieldTypes]~ Fields: DisplayName ~Rotation~	Constraints	~Default 0~	// Optional The number of clockwise 90-degree turns that should be applied to this image>
			Define:	Cover						CopyOf Boolean					~[Database FieldTypes]~ Fields: DisplayName ~Cover~		Constraints	~Default 0~	// Optional generate a "cover image" based on this visual.  At most *one* "image" or "footage" may specify 'true' for this option

			// for type of "title_card"
			Define:	PrimaryText					CopyOf Generic64Char			~[Database FieldTypes]~	Fields: DisplayName ~Primary Text~						// Required card's primary text
			Define:	SecondaryText				CopyOf Generic64Char			~[Database FieldTypes]~	Fields: DisplayName ~Secondary Text~					// Optional card's primary text
          
			// for type of "footage"
          	Define: AudioMix					CopyOf AnimotoAudioMix			~[Database FieldTypes]~	Fields: Constraints	~Default 0~							// Optional one of "MIX" or "NONE". "MIX" instructs the director to incorporate audio in the video footage where "NONE" means that no footage audio will be used. Default is "NONE"
			Define: VideoStart					CopyOf DoubleValue				~[Database FieldTypes]~	Fields: DisplayName ~Start~   Constraints	~Default 0~	// Optional offset in seconds where playback of this audio will begin. Default is 0
			Define: VideoDuration				CopyOf DoubleValue				~[Database FieldTypes]~	Fields: DisplayName ~Duration~ Constraints	~Default 10~	// Optional duration in seconds to be used of the supplied footage. Deafult 3.0, Max 10.0
		
			Define:	SourcePath					CopyOf Path						~[Database FieldTypes]~ Fields: DisplayName ~Visual Source Path~ 
			Define:	SourceURL					CopyOf WebURL					~[Database FieldTypes]~ Fields: DisplayName ~Visual Destination URL~ 			// Required url of the image or footage asset to be used
		}

	Define:		 AnimotoVisualsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoVisualsPrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoVisualsPrimaryKey PRIMARY KEY(MovieID,Sequence)~
				
			Define: RefVisualsMovieIDToAnimotorMovie Using DDText
				Fields:	Text			~Constraint RefVisualsMovieIDToAnimotorMovie FOREIGN KEY (MovieID) REFERENCES AnimotoMovie(ID)~

		}

	Define:		AnimotoVisualsTableIndexes Using DDLong
		Contains:	InListOrder
		{
			//Define: AnimotoOrdersIndex Using DDText
			//	Fields:	Text	~Create Index AnimotoOrdersIndex on AnimotoMovie(OrderID)~
		}


	Define:				AnimotoVisuals	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoVisuals
						Indexes				AnimotoVisualsTableIndexes(GetObjectReference)
						TableConstraints	AnimotoVisualsTableConstraints(GetObjectReference)
						Fields				AnimotoVisualsFields(GetObjectReference)	

	Hang: AnimotoVisuals ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineAnimotoSongsTable()
{
	Define:	AnimotoSongsToolTips USING DDSymbol Contains:
	{
	}	
	Hang:	AnimotoSongsToolTips	~[STRINGS]~ ;

	Define:				AnimotoSongsFields Using DDLong
		Contains:		InListOrder
		{
			Define: title					CopyOf Generic255Char			~[Database FieldTypes]~ Fields: DisplayName ~Title~
			Define:	genre					CopyOf Generic255Char			~[Database FieldTypes]~ Fields: DisplayName ~Genre~ 
			Define:	artist					CopyOf Generic255Char			~[Database FieldTypes]~ Fields: DisplayName ~Artist~ 
			Define:	length					CopyOf Length					~[Database FieldTypes]~ Fields: DisplayName ~Length~							
			Define:	~long-url~				CopyOf Generic255Char			~[Database FieldTypes]~ Fields: DisplayName ~URL~ 			
		}

	Define:		 AnimotoSongsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoSongsPrimaryKey Using DDText
				Fields:	Text			~Constraint AnimotoSongsPrimaryKey PRIMARY KEY(title)~
		}

	Define:		AnimotoSongsTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: AnimotoOrdersIndex Using DDText
				Fields:	Text	~Create Index AnimotoGenreIndex on AnimotoSongs(genre)~
		}


	Define:				AnimotoSongs	Using DDDatabaseTableDef
		Fields:			TableName			AnimotoSongs
						Indexes				AnimotoSongsTableIndexes(GetObjectReference)
						TableConstraints	AnimotoSongsTableConstraints(GetObjectReference)
						Fields				AnimotoSongsFields(GetObjectReference)	

	Hang: AnimotoSongs ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineOrderItemsTable()
{
	Define:			OrderItemsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID			CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	ID				CopyOf OrderItemID	~[Database FieldTypes]~	Fields: DisplayName	~Item~ LangItem ~Item~ Constraints	~NOT NULL~
			Define:	ProductID		CopyOf SelectableProductID	~[Database FieldTypes]~					
			Define:	Quantity		CopyOf Quantity		~[Database FieldTypes]~		
			Define:	Sequence		CopyOf Sequence		~[Database FieldTypes]~	
			Define:	Remake			CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Remake~	Constraints ~Default 0~	
			Define:	Status			CopyOf OrderStatus	~[Database FieldTypes]~	
			Define:	Printable		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Printable~
			Define:	Type			CopyOf DlvrblName	~[Database FieldTypes]~	Fields: DisplayName	~Type~
			Define: TypeName		CopyOf TypeName		~[Database FieldTypes]~	Fields: DisplayName	~TypeName~
			Define:	ProdType		CopyOf ProdType		~[Database FieldTypes]~
			Define:	Instructions	CopyOf Instructions ~[Database FieldTypes]~
			Define:	PackageID		CopyOf PackageID	~[Database FieldTypes]~		
			Define:	PackageGroup	CopyOf PackageGroup ~[Database FieldTypes]~	
			Define:	PrintWidth		CopyOf PaperWidth	~[Database FieldTypes]~	Fields: DisplayName	~Width~		Constraints ~Default 0~ LangItem ~OrderItemsPrintWidth~ 
			Define:	PrintLength		CopyOf PaperWidth	~[Database FieldTypes]~	Fields: DisplayName	~Length~	Constraints ~Default 0~ 
			Define:	PrintCount		CopyOf Count		~[Database FieldTypes]~ Fields: DisplayName	~#Printed~	Constraints	~default 0~
			Define:	PrinterName		CopyOf PrinterName	~[Database FieldTypes]~
			Define:	PrintStatus		CopyOf PrintStatus	~[Database FieldTypes]~			
			Define:	TimePrinted		CopyOf SortableDateTime ~[Database FieldTypes]~	
			Define:	JobPath			CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Job Path~ LangItem ~JobPath~
			Define:	PreviewPath		CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Preview Path~ LangItem ~PreviewPath~	
			Define:	GroupID			CopyOf GroupID		~[Database FieldTypes]~	Fields: DisplayName~Group ID~ LangItem ~GroupID~ Constraints ~Default 0~
			Define:	Subsequence		CopyOf Subsequence	~[Database FieldTypes]~	Fields: DisplayName~Subsequence~ LangItem ~Subsequence~ Constraints ~Default 0 Not NULL~
			Define: Routing			CopyOf RoutingType	~[Database FieldTypes]~	Fields: DisplayName ~Routing~ LangItem ~RoutingType~ Constraints ~Default 0~
			Define: ProductCode		CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName ~Product Code~
			Define:	Spotlit			CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Spotlit~ Constraints ~Default 0~
		}

	Define:		OrderItemsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderItemsPrimaryKey Using DDText
				Fields:	Text			~Constraint OrderItemsPrimaryKey PRIMARY KEY(OrderID,ID)~

			Define: RefOrderItemsToOrderID Using DDText
				Fields:	Text			~Constraint RefOrderItemsToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~

			//Define: CascadeRefOrderItemsToOrderID Using DDCascade
			//	Fields:	Name			RefOrderItemsToOrderID
			//			Text			~Update Of ID Cascades~
			//			Updates			TRUE
			//			Deletes			TRUE

			//Define: RefOrderItemsToProductID Using DDText
			//	Fields:	Text			~Constraint RefOrderItemsToProductID FOREIGN KEY (ProductID) REFERENCES Products(ID)~

			//Define: CascadeRefOrderItemsToProductIDD Using DDCascade
			//	Fields:	Name			RefOrderItemsToProductID
			//			Text			~Update Of ID Cascades~
			//			Updates			TRUE
			//			Deletes			TRUE
		}

	Define:		OrderItemsTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: OrderItemsOrderIDIndex Using DDText
				Fields:	Text	~Create Index OrderItemsOrderIDIndex on OrderItems(OrderID)~

			Define: OrderItemsProductIDIndex Using DDText
				Fields:	Text	~Create Index OrderItemsProductIDIndex on OrderItems(ProductID)~

			Define: OrderItemsJobPathIndex Using DDText
				Fields:	Text	~Create Index OrderItemsJobPathIndex on OrderItems(JobPath)~

			Define: OrderItemsTypeIndex Using DDText
				Fields:	Text	~Create Index OrderItemsTypeIndex on OrderItems(Type)~

			Define: OrderItemsTimePrintedIndex Using DDText
				Fields:	Text	~Create Index OrderItemsTimePrintedIndex on OrderItems(TimePrinted)~

			Define: OrderItemsGroupIDIndex Using DDText
				Fields:	Text	~Create Index OrderItemsGroupIDIndex on OrderItems(GroupID)~
				
			Define: OrderItemsPkgGroupIndex Using DDText
				Fields:	Text	~Create Index OrderItemsPkgGroupIndex on OrderItems(PackageGroup)~
		}

	Define:			OrderItems			Using DDDatabaseTableDef
		Fields:		TableName			OrderItems
					Indexes				OrderItemsTableIndexes(GetObjectReference)
					TableConstraints	OrderItemsTableConstraints(GetObjectReference)
					Fields				OrderItemsFields(GetObjectReference)

	Hang: OrderItems ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineOrderItemsToQueueTable()
{
	Define:			OrderItemsToQueueFields Using DDLong
		Contains:	InListOrder
		{
			Define:	BatchID			CopyOf OrderID		~[Database FieldTypes]~	Fields: DisplayName ~Batch~	Constraints	~NOT NULL~ LangItem ~Batch~
			Define:	OrderID			CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	OrderItemID		CopyOf OrderItemID	~[Database FieldTypes]~	Fields: DisplayName	~Item~ LangItem ~Item~ Constraints	~NOT NULL~
																						Definition	Integer
			Define:	Sequence		CopyOf Sequence		~[Database FieldTypes]~	Fields: Definition	Integer
			Define:	Priority		CopyOf Priority		~[Database FieldTypes]~	Fields: Definition	Integer
			Define:	Owner			CopyOf Name			~[Database FieldTypes]~	Fields: DisplayName	~Owner~	LangItem ~Owner~	
			
			Define:	SubmitDate		CopyOf SortableDateTime	~[Database FieldTypes]~	Fields: DisplayName ~Submit Date~ LangItem ~SubmitDate~			
			
			Define:	ProductID		CopyOf SelectableProductID	~[Database FieldTypes]~					
			Define:	Quantity		CopyOf Quantity		~[Database FieldTypes]~	Fields: Definition	Integer
			Define:	Status			CopyOf OrderStatus	~[Database FieldTypes]~	
			Define:	Printable		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Printable~
			Define:	RemakesOnly		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~RemakesOnly~ Constraints ~default 0~

			Define:	PrintStatus		CopyOf PrintStatus	~[Database FieldTypes]~				
			Define:	QueueName		CopyOf QueueName	~[Database FieldTypes]~	
			Define:	PrinterName		CopyOf PrinterName	~[Database FieldTypes]~	

			Define:	JobPath			CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Job Path~
			Define:	PreviewPath		CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Preview Path~
			Define: MultiStep		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName ~Multi-Step~ LangItem ~JobQueueMultiStep~ Constraints ~Default 0~
			Define:	Subsequence		CopyOf Subsequence	~[Database FieldTypes]~	Fields: DisplayName~Subsequence~ LangItem ~Subsequence~ Constraints ~Default 0~
	}

	Define:		OrderItemsToQueueTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderItemsToQueuePrimaryKey Using DDText
				Fields:	Text			~Constraint OrderItemsToQueuePrimaryKey PRIMARY KEY(BatchID,OrderID,OrderItemID)~
		}

	Define:			OrderItemsToQueue	Using DDDatabaseTableDef
		Fields:		TableName			OrderItemsToQueue
					//Indexes			OrderItemsToQueueTableIndexes(GetObjectReference)
					TableConstraints	OrderItemsToQueueTableConstraints(GetObjectReference)
					Fields				OrderItemsToQueueFields(GetObjectReference)

	Hang: OrderItemsToQueue ~[DATABASE LocalTableDefinitions]~ InListOrder;
}


VOID DefineOrdersToProofTable()
{
	Define:			OrdersToProofFields Using DDLong
		Contains:	InListOrder
		{
			Define:	BatchID			CopyOf OrderID				~[Database FieldTypes]~	Fields: DisplayName ~Batch~	Constraints	~NOT NULL~ LangItem ~Batch~
			Define:	OrderID			CopyOf OrderID				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	ProductID		CopyOf SelectableProductID	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	PrintStatus		CopyOf PrintStatus			~[Database FieldTypes]~				
			Define:	QueueName		CopyOf QueueName			~[Database FieldTypes]~	
			Define:	PrinterName		CopyOf PrinterName			~[Database FieldTypes]~	
			Define: Priority		CopyOf Priority				~[Database FieldTypes]~
			Define:	SubmitDate		CopyOf SortableDateTime	~[Database FieldTypes]~	Fields: DisplayName ~Submit Date~ LangItem ~SubmitDate~						
			Define:	Print			CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName Print
																								Definition	Integer 				
		}

	Define:		OrdersToProofTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrdersToProofPrimaryKey Using DDText
				Fields:	Text			~Constraint OrdersToProofPrimaryKey PRIMARY KEY(BatchID,OrderID)~
		}

	Define:			OrdersToProof	Using DDDatabaseTableDef
		Fields:		TableName			OrdersToProof
					//Indexes			OrdersToProofTableIndexes(GetObjectReference)
					TableConstraints	OrdersToProofTableConstraints(GetObjectReference)
					Fields				OrdersToProofFields(GetObjectReference)

	Hang: OrdersToProof ~[DATABASE LocalTableDefinitions]~ InListOrder;
}


VOID DefineRollsTable()
{
	Define:			RollsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	BatchSeq	CopyOf Sequence		~[Database FieldTypes]~
			Define: FilmType	CopyOf FilmType		~[Database FieldTypes]~
			Define:	FilmSize	CopyOf FilmSize		~[Database FieldTypes]~
			Define:	FilmFormat	CopyOf FilmFormat	~[Database FieldTypes]~
			Define:	aDen		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aDen~
			Define:	aRed		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aRed~
			Define:	aGrn		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aGrn~
			Define:	aBlu		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aBlu~
			Define:	cDen		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cDen~
			Define:	cRed		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cRed~
			Define:	cGrn		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cGrn~
			Define:	cBlu		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cBlu~
			Define: ScanSetup 	CopyOf SelectableScanSetupName ~[Database FieldTypes]~ Fields: ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define: RollText	CopyOf LongText		~[Database FieldTypes]~	Fields: DisplayName ~RollText~ 
			Define:	RetouchBatchSetup	CopyOf BatchSetup	~[Database FieldTypes]~	Fields: DisplayName	~RetouchBatchSetup~
		}

	Define:		RollsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RollsPrimaryKey Using DDText
				Fields:	Text			~Constraint RollsPrimaryKey PRIMARY KEY(OrderID,Roll)~
		}

	Define:			Rolls	Using DDDatabaseTableDef
		Fields:		TableName			Rolls
					//Indexes			RollsTableIndexes(GetObjectReference)
					TableConstraints	RollsTableConstraints(GetObjectReference)
					Fields				RollsFields(GetObjectReference)

	Hang: Rolls ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineFilmTypesTable()
{
	Define:			FilmTypesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	FilmType	CopyOf FilmType		~[Database FieldTypes]~
			Define:	ID			CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName ~Code~	Constraints	~NOT NULL~ LangItem ~Code~	
			Define:	RFS3570Plus	CopyOf Name			~[Database FieldTypes]~ Fields: DisplayName ~RFS 3570 Plus~ LangItem ~RFS3570Plus~
			Define:	HR500		CopyOf Name			~[Database FieldTypes]~ Fields: DisplayName ~HR500~ LangItem ~HR500~
		}

	Define:		FilmTypesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FilmTypesPrimaryKey Using DDText
				Fields:	Text			~Constraint FilmTypesPrimaryKey PRIMARY KEY(FilmType)~

		}

	Define:			FilmTypesTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: FilmCodeIndex Using DDText
				Fields:	Text	~Create Unique Index FilmCodeIndex on FilmTypes(ID)~
		}

	Define:			FilmTypes	Using DDDatabaseTableDef
		Fields:		TableName			FilmTypes
					Indexes				FilmTypesTableIndexes(GetObjectReference)
					TableConstraints	FilmTypesTableConstraints(GetObjectReference)
					Fields				FilmTypesFields(GetObjectReference)

	Hang: FilmTypes ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineFilmFormatsTable()
{
	Define:			FilmFormatsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	FilmFormat	CopyOf FilmFormat	~[Database FieldTypes]~
			Define:	ID			CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName ~Code~	Constraints	~NOT NULL~ LangItem ~Code~		
		}

	Define:		FilmFormatsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FilmFormatsPrimaryKey Using DDText
				Fields:	Text			~Constraint FilmFormatsPrimaryKey PRIMARY KEY(FilmFormat)~
		}

	Define:			FilmFormatsTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: FilmFormatCodeIndex Using DDText
				Fields:	Text	~Create Unique Index FilmFormatCodeIndex on FilmFormats(ID)~
		}

	Define:			FilmFormats	Using DDDatabaseTableDef
		Fields:		TableName			FilmFormats
					Indexes				FilmFormatsTableIndexes(GetObjectReference)
					TableConstraints	FilmFormatsTableConstraints(GetObjectReference)
					Fields				FilmFormatsFields(GetObjectReference)

	Hang: FilmFormats ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineNavigateTable()
{
	Define:			NavigateFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ID			~[Database FieldTypes]~ 
			Define:	Category			CopyOf Category		~[Database FieldTypes]~
			Define:	Name				CopyOf Name			~[Database FieldTypes]~
			Define: UserName			CopyOf User			~[Database FieldTypes]~ 
			Define:	Enabled				CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName ~Enabled~		Constraints ~Default 0~
			Define: UserDefined			CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName ~User Defined~	Constraints ~Default 1~
			Define: URL					CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName ~URL~
			Define: Args				CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName ~Args~
		}

	Define:		NavigateTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: NavigatePrimaryKey Using DDText
				Fields:	Text			~Constraint NavigatePrimaryKey PRIMARY KEY(ID,Category,Name,UserName)~
		}

	Define:			Navigate	Using DDDatabaseTableDef
		Fields:		TableName			Navigate
					//Indexes			NavigateTableIndexes(GetObjectReference)
					TableConstraints	NavigateTableConstraints(GetObjectReference)
					Fields				NavigateFields(GetObjectReference)

	Hang: Navigate ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineEditorsTable()
{
	Define:			EditorsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Vendor				CopyOf EditorVendor			~[Database FieldTypes]~ Fields: DisplayName	~Film Editor~
			Define:	FilmFormat			CopyOf FilmFormat			~[Database FieldTypes]~ Fields: DisplayName	~Film Format~
			Define:	FilmFormatCode		CopyOf BremsonFilmFormat	~[Database FieldTypes]~ Fields: DisplayName	~Film Format Code~
			Define: XOffsetIncrementUnit CopyOf OffsetIncrementUnit ~[Database FieldTypes]~ Fields: DisplayName	~X Increment Unit~
			Define: YOffsetIncrementUnit CopyOf OffsetIncrementUnit ~[Database FieldTypes]~ Fields: DisplayName	~Y Increment Unit~
		}

	Define:		EditorsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: EditorsPrimaryKey Using DDText
				Fields:	Text			~Constraint EditorsPrimaryKey PRIMARY KEY(Vendor,FilmFormat)~
		}

	Define:			Editors	Using DDDatabaseTableDef
		Fields:		TableName			Editors
					//Indexes			EditorsTableIndexes(GetObjectReference)
					TableConstraints	EditorsTableConstraints(GetObjectReference)
					Fields				EditorsFields(GetObjectReference)

	Hang: Editors ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineKPLTable()
{
	Define:			KPLFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Subject					CopyOf Name			~[Database FieldTypes]~ Fields: DisplayName	~Subject~ LangItem ~Subject~
			Define:	Category				CopyOf Name			~[Database FieldTypes]~ Fields: DisplayName	~Category~ LangItem ~Category~
			Define:	Item					CopyOf Name			~[Database FieldTypes]~ Fields: DisplayName	~Item~ LangItem ~Item~
			Define:	SubItem					CopyOf Name			~[Database FieldTypes]~ Fields: DisplayName	~SubItem~ LangItem ~SubItem~
			Define: Description				CopyOf QueryText	~[Database FieldTypes]~ Fields: DisplayName	~Description~
			Define: Executable				CopyOf QueryText	~[Database FieldTypes]~ Fields: DisplayName	~Execute~

		}

	Define:		KPLTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: KPLPrimaryKey Using DDText
				Fields:	Text			~Constraint KPLPrimaryKey PRIMARY KEY(Subject,Category,Item,SubItem)~
		}



	Define:			KPL	Using DDDatabaseTableDef
		Fields:		TableName			KPL
					//Indexes				KPLTableIndexes(GetObjectReference)
					TableConstraints	KPLTableConstraints(GetObjectReference)
					Fields				KPLFields(GetObjectReference)

	Hang: KPL ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineProductTreeTable()
{
	Define:			ProductTreeFields Using DDLong
		Contains:	InListOrder
		{
			Define:	L1					CopyOf ProductLevel		~[Database FieldTypes]~ Fields: DisplayName	~Level 1~ Constraints ~NOT NULL~
			Define:	L2					CopyOf ProductLevel		~[Database FieldTypes]~ Fields: DisplayName	~Level 2~
			Define:	L3					CopyOf ProductLevel		~[Database FieldTypes]~ Fields: DisplayName	~Level 3~
			Define:	L4					CopyOf ProductLevel		~[Database FieldTypes]~ Fields: DisplayName	~Level 4~
			Define:	L5					CopyOf ProductLevel		~[Database FieldTypes]~ Fields: DisplayName	~Level 5~
			Define:	ProductID			CopyOf ProductID		~[Database FieldTypes]~ Fields: DisplayName	~ProductID~
			Define:	LabelSequence		CopyOf Sequence			~[Database FieldTypes]~  
			Define:	LabelSubSequence	CopyOf Subsequence		~[Database FieldTypes]~ 
			Define:	LabelID				CopyOf Count			~[Database FieldTypes]~ Fields: DisplayName	~Key~
		}

	Define:		ProductTreeTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProductTreePrimaryKey Using DDText
				Fields:	Text			~Constraint ProductTreePrimaryKey PRIMARY KEY(LabelID)~
		}
		
	Define:		ProductTreeTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: ProductID Using DDText
				Fields:	Text	~Create Index ProductTree_ProductIDIndex on ProductTree(ProductID)~;

			i = 0;
			
			Define: L<++i> Using DDText
				Fields:	Text	~Create Index ProductTree_L<i>Index on ProductTree(L<i>)~

			Define: L<++i> Using DDText
				Fields:	Text	~Create Index ProductTree_L<i>Index on ProductTree(L<i>)~
				
			Define: L<++i> Using DDText
				Fields:	Text	~Create Index ProductTree_L<i>Index on ProductTree(L<i>)~

			Define: L<++i> Using DDText
				Fields:	Text	~Create Index ProductTree_L<i>Index on ProductTree(L<i>)~
	
			Define: L<++i> Using DDText
				Fields:	Text	~Create Index ProductTree_L<i>Index on ProductTree(L<i>)~
		}


	Define:			ProductTree	Using DDDatabaseTableDef
		Fields:		TableName			ProductTree
					Indexes				ProductTreeTableIndexes(GetObjectReference)
					TableConstraints	ProductTreeTableConstraints(GetObjectReference)
					Fields				ProductTreeFields(GetObjectReference)

	Hang: ProductTree ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineOrderItemImagesTable()
{
	Define:			OrderItemImagesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	

			Define:	ItemOrderID	CopyOf OrderID		~[Database FieldTypes]~	Fields: DisplayName	~Item OrderID~ Constraints ~NOT NULL~ LangItem ~ItemOrderID~
			Define:	ItemID		CopyOf OrderItemID	~[Database FieldTypes]~	Fields: DisplayName	~Item ID~ LangItem ~ItemID~ Constraints ~NOT NULL~

			Define:	NeededWidth		CopyOf Width	~[Database FieldTypes]~	Fields: DisplayName	~Needed Width~	Constraints ~Default 0~ 
			Define:	NeededLength	CopyOf Length	~[Database FieldTypes]~	Fields: DisplayName	~Needed Length~ LangItem ~NeededLength~ Constraints ~Default 0~ 
		}

	Define:		OrderItemImagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderItemImagesPrimaryKey Using DDText
				Fields:	Text			~Constraint OIIPrimaryKey PRIMARY KEY(OrderID,Roll,Frame,ItemOrderID,ItemID)~

			//Define: RefOrderItemImagesToOrderID Using DDText
			//	Fields:	Text			~Constraint RefOIIToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~

			//Define: RefOrderItemImagesToItemOrderID Using DDText
			//	Fields:	Text			~Constraint RefOIIToItemOrderID FOREIGN KEY (ItemOrderID) REFERENCES Orders(ID)~
		}

	Define:		OrderItemImagesTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: PathIndex Using DDText
				Fields:	Text	~Create Index OII_OrderIDIndex on OrderItemImages(OrderID)~

			Define: SubjectIDIndex Using DDText
				Fields:	Text	~Create Index OII_ItemOrderIDIndex on OrderItemImages(ItemOrderID)~
		}

	Define:			OrderItemImages		Using DDDatabaseTableDef
		Fields:		TableName			OrderItemImages
					Indexes				OrderItemImagesTableIndexes(GetObjectReference)
					TableConstraints	OrderItemImagesTableConstraints(GetObjectReference)
					Fields				OrderItemImagesFields(GetObjectReference)

	Hang: OrderItemImages ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineImagesTable()
{
	Define:			ImagesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ 
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	SubjectID	CopyOf SubjectID	~[Database FieldTypes]~	

			Define:	Scan		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Scan~		Constraints ~Default 0~

			Define:	Retouch		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Retouch~	Constraints ~Default 0~
			Define:	RetouchBatchSetup		CopyOf BatchSetup	~[Database FieldTypes]~	Fields: DisplayName	~RetouchBatchSetup~
			Define: AutoRetouchComplete	CopyOf Boolean  ~[Database FieldTypes]~	Fields: DisplayName	~AutoRetouchComplete~	Constraints ~Default 0~

			Define:	AutoBalance	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Auto Balance~	Constraints ~Default 0~
			Define:	Inspect		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Adjust~	Constraints ~Default 0~

			Define:	Changed		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Changed~	Constraints ~Default 0~	

			Define:	Rejected		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Reject~	Constraints ~Default 0~	
			Define:	Reprocess		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Reprocess~	Constraints ~Default 0~	
			Define:	Reconverting	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Reconverting~	Constraints ~Default 0~	
			Define:	FDAFailed		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~FDA Failed~ Constraints ~Default 0~	
			Define:	ExternalGS		CopyOf ExternalGS	~[Database FieldTypes]~	Fields: Constraints ~Default 0~

			Define:	aDen		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aDen~		Constraints ~Default 0~
			Define:	aRed		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aRed~		Constraints ~Default 0~
			Define:	aGrn		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aGrn~		Constraints ~Default 0~
			Define:	aBlu		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~aBlu~		Constraints ~Default 0~

			Define:	cDen		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cDen~		Constraints ~Default 0~
			Define:	cRed		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cRed~		Constraints ~Default 0~
			Define:	cGrn		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cGrn~		Constraints ~Default 0~
			Define:	cBlu		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~cBlu~		Constraints ~Default 0~

			Define:	AlternateID	CopyOf BremsonAlternateID ~[Database FieldTypes]~	

			Define:	XOffset		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~X Offset~	Constraints ~Default 0~		// Bremson x_axis_offset
			Define:	YOffset		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~Y Offset~	Constraints ~Default 0~		// Bremson y_axis_offset
			Define:	PunchPos	CopyOf Frame		~[Database FieldTypes]~ Fields: DisplayName	~PunchPos~	LangItem ~~	// Bremson punch_position_number
			Define:	Status		CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~FrameStatus~ LangItem ~FrameStatus~ Constraints ~Default 0~	// Bremson frame_status
			Define:	Punch		CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~PunchNumber~ LangItem ~PunchNumber~ Constraints ~Default 0~	// Bremson punch_number
			Define:	SequenceID	CopyOf Frame		~[Database FieldTypes]~	Fields: DisplayName	~SequenceID~	LangItem ~~							// Bremson sequence_id
			Define:	PunchError	CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~PunchError~ LangItem ~PunchError~ Constraints ~Default 0~	// Bremson punch_error_flag
			Define:	Mark		CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~Mark~ LangItem ~Mark~ Constraints ~Default 0~
			Define:	FramePosition CopyOf FDAFramePosition ~[Database FieldTypes]~	Fields: DisplayName	~Frame Position~	Constraints ~Default 0~		// FDA Frame Position
			Define:	StudioSequence CopyOf Generic6Char	~[Database FieldTypes]~	Fields: DisplayName	~Studio Sequence~								// Bremson sequence_id

			// SETTINGS TO USE FOR EACH IMAGE WHILE SCANNING

			Define: ScanSetup 	CopyOf SelectableScanSetupName	~[Database FieldTypes]~ Fields: ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	FilmType	CopyOf FilmType			~[Database FieldTypes]~ Fields: ColumnToolTipText Translate( GeneralToolTips,FutureVersion )

			Define:	saDen		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~saDen~		Constraints ~Default 0~
			Define:	saRed		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~saRed~		Constraints ~Default 0~
			Define:	saGrn		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~saGrn~		Constraints ~Default 0~
			Define:	saBlu		CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~saBlu~		Constraints ~Default 0~

			Define: DRGBRef				CopyOf Generic32Char ~[Database FieldTypes]~ Fields: DisplayName ~DRGB Ref~

			Define:	UseOverrides		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Use Color Offsets~		Constraints ~Default 0~
			Define:	brightnessOverride	CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~sBrt~ Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	redOverride			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~sRed~ Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	greenOverride		CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~sGrn~ Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	blueOverride		CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~sBlu~ Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	contrastOverride	CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~sCon~ Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	ScanRotation		CopyOf Rotation			~[Database FieldTypes]~	Fields: DisplayName	~sRot~ Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )

			Define: FTScanSetup 		CopyOf SelectableFTScanSetupName	~[Database FieldTypes]~ Fields: DisplayName	~Filmterm Scan Setup~

			Define:	NeededWidth			CopyOf Width			~[Database FieldTypes]~	Fields: DisplayName	~NeededWidth~	Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	NeededLength		CopyOf Length			~[Database FieldTypes]~	Fields: DisplayName	~NeededLength~ LangItem ~NeededLength~ Constraints ~Default 0~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )

			// END OF FIELDS THAT ARE USED TO CONTROL SCANNING ON A PER IMAGE BASIS.

			Define:	Category			CopyOf Category		~[Database FieldTypes]~			
			Define:	Description			CopyOf Description	~[Database FieldTypes]~		

			Define: ImageType			CopyOf ImageType	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	Sequence			CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~Sequence~ Constraints ~Default 0~
			Define:	Subsequence			CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName~Subsequence~ LangItem ~Subsequence~ Constraints ~Default 0 Not NULL~

			Define: ColorType			CopyOf ColorType	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	FileType			CopyOf FileType		~[Database FieldTypes]~	
			Define:	Width				CopyOf Width		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	Length				CopyOf Length		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define: OpRestrictions		CopyOf OpRestriction ~[Database FieldTypes]~ Fields: Constraints ~Default 0~

			Define:	PreviewWidth		CopyOf Width		~[Database FieldTypes]~	Fields: DisplayName	~PreviewWidth~ Constraints ~Default 0~
			Define:	PreviewLength		CopyOf Length		~[Database FieldTypes]~	Fields: DisplayName	~PreviewLength~ LangItem ~PreviewLength~ Constraints ~Default 0~
			
			Define:	CropX				CopyOf CropPosition	~[Database FieldTypes]~		Fields: DisplayName	~CropX~ Constraints ~Default 50~
			Define:	CropY				CopyOf CropPosition	~[Database FieldTypes]~		Fields: DisplayName	~CropY~ Constraints ~Default 50~
			Define:	CropWidth			CopyOf CropDimension ~[Database FieldTypes]~	Fields: DisplayName	~CropW~ Constraints ~Default 100~
			Define:	CropLength			CopyOf CropDimension ~[Database FieldTypes]~	Fields: DisplayName	~CropL~ Constraints ~Default 100~
	
			Define:	Brt					CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Brt~ Constraints ~Default 0~
			Define:	Red					CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Red~ Constraints ~Default 0~
			Define:	Grn					CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Grn~ Constraints ~Default 0~
			Define:	Blu					CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Blu~ Constraints ~Default 0~
			Define:	Con					CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Con~ Constraints ~Default 0~
			Define:	Saturation			CopyOf Saturation	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	Sharpen				CopyOf Sharpen		~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	Gamma				CopyOf Gamma		~[Database FieldTypes]~	Fields: Constraints ~Default 1~	
			Define:	GammaRed			CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaRed~ Constraints ~Default 1~	
			Define:	GammaGreen			CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaGreen~ Constraints ~Default 1~	
			Define:	GammaBlue			CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaBlue~ Constraints ~Default 1~	
			Define:	RotateFromDisk		CopyOf Rotation		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	ArbitraryRotation	CopyOf Angle		~[Database FieldTypes]~	Fields: Constraints ~Default 0~

			Define:	ShadowContrast		CopyOf ContrastOffset	~[Database FieldTypes]~	Fields: DisplayName	~ShadowContrast~ Constraints ~Default 0~
			Define:	MidtoneContrast		CopyOf ContrastOffset	~[Database FieldTypes]~	Fields: DisplayName	~MidtoneContrast~ Constraints ~Default 0~
			Define:	HighlightContrast	CopyOf ContrastOffset	~[Database FieldTypes]~	Fields: DisplayName	~HighlightContrast~ Constraints ~Default 0~

			// Composite SBA fields
			Define:	CompBrt				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompBrt~ Constraints ~Default 0~
			Define:	CompRed				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompRed~ Constraints ~Default 0~
			Define:	CompGrn				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompGrn~ Constraints ~Default 0~
			Define:	CompBlu				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompBlu~ Constraints ~Default 0~

			Define:	RedEye				CopyOf RedEye		~[Database FieldTypes]~
			Define:	NearLine			CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~NearLine~	Constraints ~Default 0~	
			Define:	Archive				CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Archive~	Constraints ~Default 0~	
			Define:	RestoreImg			CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Restore~	Constraints ~Default 0~	

			Define:	Path				CopyOf Path			~[Database FieldTypes]~ 
			Define:	OfflinePath			CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~OffLine Path~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )
			Define:	ImageOffline		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Is Offline~	Constraints ~Default 0~	
			Define:	ICCProfile			CopyOf ICCProfile	~[Database FieldTypes]~
			Define: ImageSource			CopyOf Generic20Char ~[Database FieldTypes]~ Fields: DisplayName ~Source~
			
			//	SHASTA PARAMETERS !
			Define:	ApplyShasta			CopyOf ShastaFlag	~[Database FieldTypes]~	Fields: DisplayName	~Auto Enhance~			Constraints ~Default 0~	
			Define: ShastaHighlight		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~Highlight Contrast~	Constraints ~Default 0~	
			Define: ShastaMidTone		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~MidTone Contrast~		Constraints ~Default 0~	
			Define: ShastaShadow		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~Shadow Contrast~		Constraints ~Default 0~	

			Define: PostKPTPBrt			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Brt~			Constraints ~Default 0~
			Define: PostKPTPRed			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Red~			Constraints ~Default 0~
			Define: PostKPTPGrn			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Grn~			Constraints ~Default 0~
			Define: PostKPTPBlu			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Blu~			Constraints ~Default 0~
			Define: PostKPTPCon			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Con~			Constraints ~Default 0~
			Define: PostKPTPGam			CopyOf Gamma		~[Database FieldTypes]~ Fields: DisplayName ~Post PT Gam~			Constraints ~Default 1~
//			Define: PostKPTPSat			CopyOf Saturation	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Sat~			Constraints ~Default 0~

			Define:	PreAE_ICCProfile	CopyOf ICCProfile	~[Database FieldTypes]~ Fields: DisplayName ~Pre AE ICC Profile~

			Define:	LutIndex			CopyOf LutIndex		~[Database FieldTypes]~	Fields: DisplayName	~Lut Index~				Constraints ~Default 10~	
//			Define:	TintRemoval			CopyOf TintRemoval		~[Database FieldTypes]~	Fields: DisplayName	~Tint Removal~			Constraints ~Default 0~	
		}

	Define:		ImagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImagesPrimaryKey Using DDText
				Fields:	Text			~Constraint ImagesPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~

			Define: RefImagesToOrderID Using DDText
				Fields:	Text			~Constraint RefImagesToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~

			//Define: CascadeRefImagesToOrderID Using DDCascade
			//	Fields:	Name			RefImagesToOrderID
			//			Text			~Update Of ID Cascades~
			//			Updates			TRUE
			//			Deletes			TRUE
		}

	Define:		ImagesTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: PathIndex Using DDText
				Fields:	Text	~Create Index ImagesPathIndex on Images(Path)~

			Define: SubjectIDIndex Using DDText
				Fields:	Text	~Create Index ImagesSubjectIDIndex on Images(SubjectID)~
		}

	Define:			Images			Using DDDatabaseTableDef
		Fields:		TableName			Images
					Indexes				ImagesTableIndexes(GetObjectReference)
					TableConstraints	ImagesTableConstraints(GetObjectReference)
					Fields				ImagesFields(GetObjectReference)

	Hang: Images ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineImagesMetadataTable()
{
	Define:				ImagesMetadataFields Using DDLong
		Contains:		InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ 
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define: DateTime	CopyOf DateTime		~[Database FieldTypes]~	Fields: FormatType 3 CustomFormat ~yyyy'/'MM'/'dd hh':'mm':'ss~
			Define: FileName	CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName ~File Name~ LangItem ~~
			Define: FolderName	CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName ~Folder Name~ LangItem ~~
			Define: GroupID		CopyOf GroupID		~[Database FieldTypes]~	Fields: DisplayName ~Group ID~ LangItem ~JobQueueGroupID~ Constraints ~Default 0~	
		}

	Define:		ImagesMetadataTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImagesMetadataPrimaryKey Using DDText
				Fields:	Text			~Constraint ImagesMetadataPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
		}

	Define:				ImagesMetadata			Using DDDatabaseTableDef
		Fields:			TableName			ImagesMetadata
						Fields				ImagesMetadataFields(GetObjectReference)
						TableConstraints	ImagesMetadataTableConstraints(GetObjectReference)

		
	Hang: ImagesMetadata ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineImageCorrectionsTable()
{
	Define:			ImageCorrectionsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
	
			Define:	LUT			CopyOf LUT			~[Database FieldTypes]~
		}

	Define:		ImageCorrectionsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImagesPrimaryKey Using DDText
				Fields:	Text			~Constraint ImageCorrectionsPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
		}

	Define:		ImageCorrectionsTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			ImageCorrections	Using DDDatabaseTableDef
		Fields:		TableName			ImageCorrections
					Indexes				ImageCorrectionsTableIndexes(GetObjectReference)
					TableConstraints	ImageCorrectionsTableConstraints(GetObjectReference)
					Fields				ImageCorrectionsFields(GetObjectReference)

	Hang: ImageCorrections ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineImageAdjustmentsTable()
{
	Define:			ImageAdjustmentsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf Name			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~

			Define:	Category			CopyOf Category		~[Database FieldTypes]~	
			Define:	Sequence			CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~Sequence~ Constraints ~Default 0~
				
			Define:	CustomerID			CopyOf CustomerID	~[Database FieldTypes]~		

			Define:	cDensity			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Brt~ Constraints ~Default 0~
			Define:	cRed				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Red~ Constraints ~Default 0~
			Define:	cGreen				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Grn~ Constraints ~Default 0~
			Define:	cBlue				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Blu~ Constraints ~Default 0~
			
			Define:	cContrast			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Con~ Constraints ~Default 0~
			Define:	cSaturation			CopyOf Saturation	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	cSharpen			CopyOf Sharpen		~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	cGamma				CopyOf Gamma		~[Database FieldTypes]~	Fields: Constraints ~Default 0~	
			Define:	cGammaRed			CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaRed~ Constraints ~Default 0~	
			Define:	cGammaGreen			CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaGreen~ Constraints ~Default 0~	
			Define:	cGammaBlue			CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaBlue~ Constraints ~Default 0~	

			Define:	cLUT				CopyOf LUT			~[Database FieldTypes]~
			Define:	LUTControlPoints	CopyOf LUT			~[Database FieldTypes]~ Fields: DisplayName	~Lut Points~
		}

	Define:		ImageAdjustmentsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImageAdjustmentsPrimaryKey Using DDText
				Fields:	Text			~Constraint IAPrimaryKey PRIMARY KEY(ID)~
		}

	Define:		ImageAdjustmentsTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: PathIndex Using DDText
				Fields:	Text	~Create Index IACategoryIndex on ImageAdjustments(Category)~

			Define: SubjectIDIndex Using DDText
				Fields:	Text	~Create Index IACustomerIDIndex on ImageAdjustments(CustomerID)~
		}

	Define:			ImageAdjustments	Using DDDatabaseTableDef
		Fields:		TableName			ImageAdjustments
					Indexes				ImageAdjustmentsTableIndexes(GetObjectReference)
					TableConstraints	ImageAdjustmentsTableConstraints(GetObjectReference)
					Fields				ImageAdjustmentsFields(GetObjectReference)

	Hang: ImageAdjustments ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineIF36PixMasterTable()
{
	Define:			IF36PixMasterFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ID				~[Database FieldTypes]~	Fields: Constraints ~Default 'Master'~		ReadOnly ~T~	
			Define:	MaxUploads			CopyOf Count			~[Database FieldTypes]~	Fields: DisplayName ~MaxUploads~			Constraints	~NOT NULL Default 5~
			Define:	MaxDownloads		CopyOf Count			~[Database FieldTypes]~	Fields: DisplayName ~MaxDownloads~			Constraints	~NOT NULL Default 5~
			Define:	UploadConnections	CopyOf Count			~[Database FieldTypes]~	Fields:	DisplayName ~Upload Connections~	Constraints	~NOT NULL Default 0~
			Define:	DownloadConnections	CopyOf Count			~[Database FieldTypes]~	Fields: DisplayName ~Download Connections~	Constraints	~NOT NULL Default 0~
			Define:	CutChecker			CopyOf Generic48Char	~[Database FieldTypes]~	Fields: DisplayName ~Cut Checker~ 
			Define:	UserName			CopyOf UserName_36Pix	~[Database FieldTypes]~	Fields: DisplayName ~Lab user Name~
			Define:	Password			CopyOf Password_36Pix	~[Database FieldTypes]~	Fields: DisplayName ~Lab Password~
			Define:	NeedsCutOrderStatus	CopyOf OrderStatus		~[Database FieldTypes]~	Fields: DisplayName ~At 36Pix Status~		LangSection ~~ LangItem ~~
			Define:	OnCutOrderStatus	CopyOf OrderStatus		~[Database FieldTypes]~	Fields: DisplayName ~Cut Complete Status~	LangSection ~~ LangItem ~~
			Define:	CutCompleteOrder	CopyOf OrderStatus		~[Database FieldTypes]~	Fields: DisplayName ~Received Status~		LangSection ~~ LangItem ~~
			Define:	AgingDays			CopyOf Count			~[Database FieldTypes]~	Fields: DisplayName ~Aging Days~			Constraints	~NOT NULL Default 10~
			Define:	SendDelay			CopyOf Count			~[Database FieldTypes]~	Fields: DisplayName ~Send Delay~			Constraints	~NOT NULL Default 0~
			Define:	URLof36PIX			CopyOf Generic255Char	~[Database FieldTypes]~	Fields: DisplayName ~36Pix URL~				Constraints	~Default 'DP2.36Pix.com'~
		}

	Define:		IF36PixMasterTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: IF36PixMasterPrimaryKey Using DDText
				Fields:	Text	~Constraint IF36PixMasterPrimaryKey PRIMARY KEY(ID)~
		}

	Define:		IF36PixMasterTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			IF36PixMaster		Using DDDatabaseTableDef
		Fields:		TableName			IF36PixMaster
					Indexes				IF36PixMasterTableIndexes(GetObjectReference)
					TableConstraints	IF36PixMasterTableConstraints(GetObjectReference)
					Fields				IF36PixMasterFields(GetObjectReference)

	Hang: IF36PixMaster ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineIF36PixTable()
{
	Define:			IF36PixFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID			CopyOf OrderID				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~  ReadOnly ~F~  LangItem ~~
			Define:	Roll			CopyOf Roll					~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	ReadOnly ~F~  LangItem ~~
			Define:	Frame			CopyOf Frame				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	ReadOnly ~F~  LangItem ~~
			Define:	JobID			CopyOf OrderID				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~  ReadOnly ~F~  LangItem ~~ DisplayName ~JobID~

			Define:	ServiceLevel	CopyOf IF36PixService		~[Database FieldTypes]~	Fields: Constraints	~Default 0~
			Define: Priority		CopyOf Priority				~[Database FieldTypes]~ Fields: Constraints	~Default 50~
			
			Define: Status			CopyOf IF36PixStatus		~[Database FieldTypes]~	Fields: Constraints	~Default 1~
			Define: ErrorMsg		CopyOf MultiLineLongText	~[Database FieldTypes]~	Fields: DisplayName	~Error~	
			
			Define: StartDate		CopyOf DateTimeShowingTime	~[Database FieldTypes]~ Fields: DisplayName	~Start~		ReadOnly ~T~
			Define: SentDate		CopyOf DateTimeShowingTime	~[Database FieldTypes]~ Fields: DisplayName	~Sent~		ReadOnly ~T~
			Define: ReadyDate		CopyOf DateTimeShowingTime	~[Database FieldTypes]~ Fields: DisplayName	~Cut~		ReadOnly ~T~
			Define: ReceivedDate	CopyOf DateTimeShowingTime	~[Database FieldTypes]~ Fields: DisplayName	~Received~  ReadOnly ~T~ 
		
			Define: XferUpTime		CopyOf TimeOffset			~[Database FieldTypes]~ Fields: DisplayName	~Xfer Up~	ReadOnly ~T~ Constraints ~Default 0~
			Define: XferDnTime		CopyOf TimeOffset			~[Database FieldTypes]~ Fields: DisplayName	~Xfer Down~	ReadOnly ~T~ Constraints ~Default 0~
		}

	Define:		IF36PixTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: IF36PixPrimaryKey Using DDText
				Fields:	Text	~Constraint IF36PixPrimaryKey PRIMARY KEY(OrderID,Roll,Frame,JobID)~
		}

	Define:		IF36PixTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: PriorityIndex Using DDText
				Fields:	Text	~Create Index IF36PixPriorityIndex on IF36Pix(Priority)~
				
			Define: StatusIndex Using DDText
				Fields:	Text	~Create Index IF36PixStatusIndex on IF36Pix(Status)~

			Define: ServiceLevelIndex Using DDText
				Fields:	Text	~Create Index IF36PixServiceLevelIndex on IF36Pix(ServiceLevel)~

		}

	Define:			IF36Pix			Using DDDatabaseTableDef
		Fields:		TableName			IF36Pix
					Indexes				IF36PixTableIndexes(GetObjectReference)
					TableConstraints	IF36PixTableConstraints(GetObjectReference)
					Fields				IF36PixFields(GetObjectReference)

	Hang: IF36Pix ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineRawImagesTable()
{
	Define:			RawImagesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID			CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~  ReadOnly ~T~
			Define:	Roll			CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	ReadOnly ~T~
			Define:	Frame			CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	ReadOnly ~T~

			Define:	Sequence		CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~Sequence~ Constraints ~Default 0~
			Define:	Processed		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Processed~		Constraints ~Default 0~ 

			Define:	Inspect			CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Adjust~	Constraints ~Default 0~
			Define:	Rejected		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Reject~	Constraints ~Default 0~	
			Define:	Rotation		CopyOf Rotation			~[Database FieldTypes]~	Fields: DisplayName	~Rotation~ Constraints ~Default 0~ 

			Define: ImageType		CopyOf RawImageType	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
		
			Define:	Brt				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Brt~ Constraints ~Default 0~
			Define:	Red				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Red~ Constraints ~Default 0~
			Define:	Grn				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Grn~ Constraints ~Default 0~
			Define:	Blu				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Blu~ Constraints ~Default 0~
			Define:	Con				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Con~ Constraints ~Default 0~
			Define:	Saturation		CopyOf Saturation	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	Gamma			CopyOf Gamma		~[Database FieldTypes]~	Fields: Constraints ~Default 1~	

			Define:	Path			CopyOf Path			~[Database FieldTypes]~

			Define:	OutputPath		CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Output Image Path~
			Define:	LowResImagePath	CopyOf LongText		~[Database FieldTypes]~	Fields: DisplayName	~Low Res Image Path~ ColumnToolTipText Translate( GeneralToolTips,FutureVersion )

			Define:	ICCProfile		CopyOf LongText		~[Database FieldTypes]~	Fields: DisplayName	~ICC Profile Path~
			Define:	WhiteBalance	CopyOf DCWhiteBalType	~[Database FieldTypes]~	Fields: DisplayName ~White Balance~ Constraints ~Default 'AS_SHOT'~
			Define: Exposure		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Exposure~ Constraints ~Default 0.0~	
		}

	Define:		RawImagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RawImagesPrimaryKey Using DDText
				Fields:	Text	~Constraint RawImagesPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
		}

	Define:		RawImagesTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: PathIndex Using DDText
				Fields:	Text	~Create Index RawImagesPathIndex on RawImages(Path)~
		}

	Define:			RawImages			Using DDDatabaseTableDef
		Fields:		TableName			RawImages
					Indexes				RawImagesTableIndexes(GetObjectReference)
					TableConstraints	RawImagesTableConstraints(GetObjectReference)
					Fields				RawImagesFields(GetObjectReference)

	Hang: RawImages ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineSBAImagesTable()
{
	Define:			SBAImagesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	

			Define:	xferDenN	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~xferDenN~	Constraints ~Default 0~
			Define:	xferDenGM	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~xferDenGM~	Constraints ~Default 0~
			Define:	xferDenI	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~xferDenI~	Constraints ~Default 0~

			Define:	AvgDenR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenR~	Constraints ~Default 0~
			Define:	AvgDenG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenG~	Constraints ~Default 0~
			Define:	AvgDenB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenB~	Constraints ~Default 0~
			Define:	AvgDenN		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenN~	Constraints ~Default 0~

			Define:	unwtDenGM	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~UnwtDenGM~	Constraints ~Default 0~
			Define:	unwtDenI	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~UnwtDenI~	Constraints ~Default 0~

			Define:	AvgHue		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgHue~	Constraints ~Default 0~
			Define:	AvgSat		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgSat~	Constraints ~Default 0~

			Define:	SbaR		CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaR~		Constraints ~Default 0~
			Define:	SbaG		CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaG~		Constraints ~Default 0~
			Define:	SbaB		CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaB~		Constraints ~Default 0~
			Define:	SbaFlesh	CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaFlesh~	Constraints ~Default 0~

			Define:	SbaCmd		CopyOf SbaCmd		~[Database FieldTypes]~	Fields: DisplayName	~SbaCmd~	Constraints ~Default 0~
			Define:	SbaCMM		CopyOf CMMField		~[Database FieldTypes]~	Fields: DisplayName	~SbaCMM~	Constraints ~Default 0~
			Define:	PrefClass	CopyOf PrefClass	~[Database FieldTypes]~	Fields: DisplayName	~PrefClass~	Constraints ~Default 0~
			Define:	PCWF		CopyOf PCWF			~[Database FieldTypes]~	Fields: DisplayName	~PCWF~		Constraints ~Default 0~

			Define: IgnoreSFS	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName ~IgnoreSFS~ Constraints ~Default 0~
			
			Define:	SFSFile		CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~SFSFile~ LangSection ~FieldTypes~ LangItem ~SFSFile~

			Define:	FilmTerm	CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~FilmTerm~ LangSection ~FieldTypes~ LangItem ~FilmTerm~
			Define:	FTCollected	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~FT Data Collected~	Constraints ~Default 0~	

			Define:	FTBalR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FTBalR~ Constraints ~Default 0~
			Define:	FTBalG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FTBalG~ Constraints ~Default 0~
			Define:	FTBalB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FTBalB~ Constraints ~Default 0~

			Define:	FpoR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoR~	Constraints ~Default 0~
			Define:	FpoG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoG~	Constraints ~Default 0~
			Define:	FpoB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoB~	Constraints ~Default 0~

			Define:	FpaR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaR~	Constraints ~Default 0~
			Define:	FpaG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaG~	Constraints ~Default 0~
			Define:	FpaB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaB~	Constraints ~Default 0~

			Define:	NeuR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuR~	Constraints ~Default 0~
			Define:	NeuG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuG~	Constraints ~Default 0~
			Define:	NeuB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuB~	Constraints ~Default 0~

			Define:	NeoR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoR~	Constraints ~Default 0~
			Define:	NeoG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoG~	Constraints ~Default 0~
			Define:	NeoB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoB~	Constraints ~Default 0~
		}

	Define:		SBAImagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: SBAImagesPrimaryKey Using DDText
				Fields:	Text			~Constraint SBAImagesPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
			
			Define: RefSBAImagesToOrderID Using DDText
				Fields:	Text			~Constraint RefSBAImagesToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			SBAImages			Using DDDatabaseTableDef
		Fields:		TableName			SBAImages
					TableConstraints	SBAImagesTableConstraints(GetObjectReference)
					Fields				SBAImagesFields(GetObjectReference)

	Hang: SBAImages ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineDSBAImagesTable()
{
	Define:			DSBAImagesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	

			Define:	SbaR		CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaR~		Constraints ~Default 0~
			Define:	SbaG		CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaG~		Constraints ~Default 0~
			Define:	SbaB		CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaB~		Constraints ~Default 0~
			Define:	SbaFlesh	CopyOf SBAOffset	~[Database FieldTypes]~	Fields: DisplayName	~SbaFlesh~	Constraints ~Default 0~

			Define:	EdgeAvgR	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgR~	Constraints ~Default 0~
			Define:	EdgeAvgG	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgG~	Constraints ~Default 0~
			Define:	EdgeAvgB	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgB~	Constraints ~Default 0~
			Define:	EdgeAvgN	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgN~	Constraints ~Default 0~

			Define:	unwtDenGM	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~UnwtDenGM~	Constraints ~Default 0~
			Define:	unwtDenI	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~UnwtDenI~	Constraints ~Default 0~

			Define:	AvgHue		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgHue~	Constraints ~Default 0~
			Define:	AvgSat		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgSat~	Constraints ~Default 0~

			Define:	xferDenN	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~xferDenN~	Constraints ~Default 0~
			Define:	xferDenGM	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~xferDenGM~	Constraints ~Default 0~
			Define:	xferDenI	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~xferDenI~	Constraints ~Default 0~

			Define:	PrefsFile	CopyOf DSbaPrefType	~[Database FieldTypes]~	Fields: DisplayName	~Preference~
			Define: SBALevel	CopyOf SbaCmd		~[Database FieldTypes]~	Fields: DisplayName ~SBALevel~ Constraints ~Default 0~
			Define: Enhanced	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Enhanced~	
			Define:	CTCollected	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~CT Data Collected~	Constraints ~Default 0~	
		}

	Define:		DSBAImagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DSBAImagesPrimaryKey Using DDText
				Fields:	Text			~Constraint DSBAImagesPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
			
			Define: RefDSBAImagesToOrderID Using DDText
				Fields:	Text			~Constraint RefDSBAImagesToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			DSBAImages			Using DDDatabaseTableDef
		Fields:		TableName			DSBAImages
					TableConstraints	DSBAImagesTableConstraints(GetObjectReference)
					Fields				DSBAImagesFields(GetObjectReference)

	Hang: DSBAImages ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineFilmtermDataTable()
{
	Define:	FilmtermDataToolTips USING DDSymbol Contains:
	{
		Define:	sbaField		using DDText Fields: Text STR ( Value calculated by the Scene Balance Algorithm for )
		Define:	scanField		using DDText Fields: Text STR ( Manual adjustment made during scanning for )
		Define:	filmtermField	using DDText Fields: Text STR ( Filmterm file setting for )
	}
		
	Hang:	FilmtermDataToolTips	~[STRINGS]~ ;

	Define:			FilmtermDataFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Filmterm	CopyOf FilmType			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~
								ColumnToolTipText Translate( ~Filmterm name~ )

			Define: TotalScans		CopyOf ScanCount	~[Database FieldTypes]~ Fields: DisplayName	~TotalScans~  ReadOnly ~T~
								ColumnToolTipText Translate( ~Number of scans for this filmterm and SFS File~ )
			Define: TotalFleshScans	CopyOf ScanCount	~[Database FieldTypes]~ Fields: DisplayName	~TotalFleshScans~ ReadOnly ~T~
								ColumnToolTipText Translate( ~Number of scans for this filmterm and SFS File with Enhanced SBA enabled~ )

			Define:	SbaR		CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaR~		Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Red adjustment~
			Define:	SbaG		CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaG~		Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Green adjustment~
			Define:	SbaB		CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaB~		Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Blue adjustment~
			Define:	SbaFlesh	CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaFlesh~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Brightness adjustment (Enhanced SBA)~

			Define:	AvgDenR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenR~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Average Density Red~
			Define:	AvgDenG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenG~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Average Density Green~
			Define:	AvgDenB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenB~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Average Density Blue~
			Define:	AvgDenN		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenN~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,sbaField ) + ~Average Density Neutral~

			Define:	ScanR		CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~ScanR~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,scanField ) + ~Red Override~
			Define:	ScanG		CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~ScanG~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,scanField ) + ~Green Override~
			Define:	ScanB		CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~ScanB~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,scanField ) + ~Blue Override~

			Define:	FTBalR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FTBalR~ Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Filmterm Balance Red~
			Define:	FTBalG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FTBalG~ Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Filmterm Balance Green~
			Define:	FTBalB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FTBalB~ Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Filmterm Balance Blue~

			Define:	FpoR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoR~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Film Population Offset Red~
			Define:	FpoG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoG~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Film Population Offset Green~
			Define:	FpoB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoB~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Film Population Offset Blue~

			Define:	FpaR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaR~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Film Preference Adjustment Red~
			Define:	FpaG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaG~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Film Preference Adjustment Green~
			Define:	FpaB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaB~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Film Preference Adjustment Blue~

			Define:	NeuR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuR~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Neutral under exposure Red~
			Define:	NeuG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuG~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Neutral under exposure Green~
			Define:	NeuB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuB~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Neutral under exposure Blue~

			Define:	NeoR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoR~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Neutral over exposure Red~
			Define:	NeoG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoG~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Neutral over exposure Green~
			Define:	NeoB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoB~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( FilmtermDataTooltips,filmtermField ) + ~Neutral over exposure Blue~

			Define:	SFSFile		CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName	~SFSFile~ ReadOnly ~T~
								ColumnToolTipText Translate( ~Subject Failure Suppression Boundary Set~ ) LangSection ~FieldTypes~ LangItem ~SFSFile~

			Define: ScannerType	CopyOf ScannerType		~[Database FieldTypes]~ Fields: DisplayName ~Scanner~ ReadOnly ~T~
	
		}

	Define:		FilmtermDataTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FilmtermDataPrimaryKey Using DDText
				Fields:	Text			~Constraint FilmtermDataPrimaryKey PRIMARY KEY(Filmterm,SFSFile)~
		}

	Define:			FilmtermData		Using DDDatabaseTableDef
		Fields:		TableName			FilmtermData
					TableConstraints	FilmtermDataTableConstraints(GetObjectReference)
					Fields				FilmtermDataFields(GetObjectReference)

	Hang: FilmtermData ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineDSbaPrefsDataTable()
{
	Define:	DSbaPrefsDataToolTips USING DDSymbol Contains:
	{
		Define:	sbaField		using DDText Fields: Text STR ( Value calculated by the Auto Balance Algorithm for )
		Define:	nameField	using DDText Fields: Text STR ( Preference file setting for )
	}
		
	Hang:	DSbaPrefsDataToolTips	~[STRINGS]~ ;

	Define:			DSbaPrefsDataFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name	CopyOf DSbaPrefType			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~
								ColumnToolTipText Translate( ~Auto Balance Preferences name~ )

			Define: TotalImages		CopyOf ScanCount	~[Database FieldTypes]~ Fields: DisplayName	~Total Images~  ReadOnly ~T~
								ColumnToolTipText Translate( ~Number of images for this Auto Balance Preference~ )
			Define: TotalFleshImages	CopyOf ScanCount	~[Database FieldTypes]~ Fields: DisplayName	~Total Flesh Images~ ReadOnly ~T~
								ColumnToolTipText Translate( ~Number of images for this Auto Balance Preference with Enhanced SBA enabled~ )

			Define:	SbaR		CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaR~		Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Red adjustment~
			Define:	SbaG		CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaG~		Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Green adjustment~
			Define:	SbaB		CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaB~		Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Blue adjustment~
			Define:	SbaFlesh	CopyOf SBAOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaFlesh~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Brightness adjustment (Enhanced SBA)~

			Define:	EdgeAvgDenR	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgDenR~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Edge Average Density Red~
			Define:	EdgeAvgDenG	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgDenG~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Edge Average Density Green~
			Define:	EdgeAvgDenB	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgDenB~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Edge Average Density Blue~
			Define:	EdgeAvgDenN	CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~EdgeAvgDenN~	Constraints ~Default 0~ ReadOnly ~T~
								ColumnToolTipText Translate( DSbaPrefsDataToolTips,sbaField ) + ~Edge Average Density Neutral~

		}

	Define:		DSbaPrefsDataTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DSbaPrefsDataPrimaryKey Using DDText
				Fields:	Text			~Constraint DSbaPrefsDataPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			DSbaPrefsData		Using DDDatabaseTableDef
		Fields:		TableName			DSbaPrefsData
					TableConstraints	DSbaPrefsDataTableConstraints(GetObjectReference)
					Fields				DSbaPrefsDataFields(GetObjectReference)

	Hang: DSbaPrefsData ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineDSbaPrefsDefTable()
{
	Define:	DSbaPrefsDefToolTips USING DDSymbol Contains:
	{
		Define:	nameField	using DDText Fields: Text STR ( Auto Balance Preferences file setting for )
	}
		
	Hang:	DSbaPrefsDefToolTips	~[STRINGS]~ ;

	Define:			DSbaPrefsDefFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name		CopyOf DSbaPrefType	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
								ColumnToolTipText Translate( ~Auto Balance Preferences name~ )

			Define: CreationDate CopyOf DateTime		~[Database FieldTypes]~ Fields: DisplayName	~Creation Date~
								ColumnToolTipText Translate( ~Date this file was created~ )
			Define: Version		CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName	~Version~

			Define:	FpaR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaR~	Constraints ~Default 0~
			Define:	FpaG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaG~	Constraints ~Default 0~
			Define:	FpaB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaB~	Constraints ~Default 0~

			Define:	NeuR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuR~	Constraints ~Default 500~
			Define:	NeuG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuG~	Constraints ~Default 500~
			Define:	NeuB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeuB~	Constraints ~Default 500~

			Define:	NeoR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoR~	Constraints ~Default 500~
			Define:	NeoG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoG~	Constraints ~Default 500~
			Define:	NeoB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~NeoB~	Constraints ~Default 500~

			Define:	SbaCMM		CopyOf CMMField			~[Database FieldTypes]~	Fields: DisplayName	~SbaCMM~ Constraints ~Default 1000~

			Define: NeutralUC	CopyOf SbaNuc			~[Database FieldTypes]~	Fields: DisplayName	~NUC~	Constraints ~Default -1.0~
			Define: NeutralOC	CopyOf SbaDouble		~[Database FieldTypes]~	Fields: DisplayName	~NOC~	Constraints ~Default 5.0~
			Define: NeutralBP	CopyOf Generic4Digit	~[Database FieldTypes]~	Fields: DisplayName	~NBPC~	Constraints ~Default 1679~

			Define:	PCLS		CopyOf PrefClass		~[Database FieldTypes]~	Fields: DisplayName	~PCLS~	Constraints ~Default 0~

			Define:	SFSTable	CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName	~SFSFile~ LangSection ~FieldTypes~ LangItem ~SFSFile~

			Define:	Enhanced	CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Enhanced~	Constraints ~Default 1~
			Define: FleshPrefAdj CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~Flesh Pref Adj~	Constraints ~Default 0~
			Define: BackLitBeta	 CopyOf SbaDouble		~[Database FieldTypes]~	Fields: DisplayName	~Back Lit Beta~	Constraints ~Default 0.361~
			Define: FrontLitBeta CopyOf SbaDouble		~[Database FieldTypes]~	Fields: DisplayName	~Front Lit Beta~	Constraints ~Default 0.361~
			Define: PercFleshAdj CopyOf SbaDouble		~[Database FieldTypes]~	Fields: DisplayName	~Percent Flesh Adj~	Constraints ~Default 1.0~
		
		}

	Define:		DSbaPrefsDefTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DSbaPrefsDefPrimaryKey Using DDText
				Fields:	Text			~Constraint DSbaPrefsDefPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			DSbaPrefsDef		Using DDDatabaseTableDef
		Fields:		TableName			DSbaPrefsDef
					TableConstraints	DSbaPrefsDefTableConstraints(GetObjectReference)
					Fields				DSbaPrefsDefFields(GetObjectReference)

	Hang: DSbaPrefsDef ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineCompSbaPrefsTable()
{
	Define:			CompSbaPrefsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name		CopyOf DSbaPrefType	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
								ColumnToolTipText Translate( ~Composite SBA Preferences name~ )

			Define:	BiasPreference		CopyOf DoubleRange0To2	~[Database FieldTypes]~	Fields: DisplayName	~Bias Preference~	Constraints ~Default 1.5~
			Define:	fleshPivot			CopyOf fleshPivot		~[Database FieldTypes]~	Fields: DisplayName	~Flesh Pivot~		Constraints ~Default 0~

			Define:	SlopeLightFlesh		CopyOf DoubleRange0To1	~[Database FieldTypes]~	Fields: DisplayName	~Slope Light Flesh~	Constraints ~Default 0.25~
			Define:	SlopeDarkFlesh		CopyOf DoubleRange0To1	~[Database FieldTypes]~	Fields: DisplayName	~Slope Dark Flesh~	Constraints ~Default 0.25~

			Define:	OrderBalPrefOffsetD	CopyOf OrderDenBalance	~[Database FieldTypes]~	Fields: DisplayName	~Order Balance Pref Den~	Constraints ~Default 0~
			Define:	OrderBalPrefOffsetR	CopyOf OrderRGBBalance	~[Database FieldTypes]~	Fields: DisplayName	~Order Balance Pref Red~	Constraints ~Default 0~
			Define:	OrderBalPrefOffsetG	CopyOf OrderRGBBalance	~[Database FieldTypes]~	Fields: DisplayName	~Order Balance Pref Green~	Constraints ~Default 0~
			Define:	OrderBalPrefOffsetB	CopyOf OrderRGBBalance	~[Database FieldTypes]~	Fields: DisplayName	~Order Balance Pref Blue~	Constraints ~Default 0~
		}

	Define:		CompSbaPrefsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CompSbaPrefsPrimaryKey Using DDText
				Fields:	Text			~Constraint CompSbaPrefsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			CompSbaPrefs		Using DDDatabaseTableDef
		Fields:		TableName			CompSbaPrefs
					TableConstraints	CompSbaPrefsTableConstraints(GetObjectReference)
					Fields				CompSbaPrefsFields(GetObjectReference)

	Hang: CompSbaPrefs ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineCompSbaDataTable()
{
	Define:			CompSbaDataFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID			CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll			CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame			CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	

			Define: Recalculate		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Recalculate~

			Define:	TotalPixels		CopyOf LongValue	~[Database FieldTypes]~	Fields: DisplayName	~Total Pixels~	
			Define:	FgLAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Foreground L~	
			Define:	FgCbAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Foreground Cb~	
			Define:	FgCrAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Foreground Cr~	

			Define:	FlLAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Flesh L~	
			Define:	FlCbAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Flesh Cb~	
			Define:	FlCrAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Flesh Cr~	
			Define:	FlCount			CopyOf LongValue	~[Database FieldTypes]~	Fields: DisplayName	~Flesh Pixels~	

			Define:	BgLAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background L~	
			Define:	BgCbAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background Cb~	
			Define:	BgCrAve			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background Cr~	

			Define:	BgLStdDev		CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background L StdDev~	
			Define:	BgCbStdDev		CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background Cb StdDev~	
			Define:	BgCrStdDev		CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background Cr StdDev~	

			Define:	BgLKur			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background L Kurtosis~	
			Define:	BgCbKur			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background Cb Kurtosis~	
			Define:	BgCrKur			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Background Cr Kurtosis~	

			Define:	BgCount			CopyOf LongValue	~[Database FieldTypes]~	Fields: DisplayName	~Background Pixels~	

			Define: LeftEyeX		CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Left Eye X%~  	
			Define: LeftEyeY		CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Left Eye Y%~  	
			Define: RightEyeX		CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Right Eye X%~  	
			Define: RightEyeY		CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Right Eye Y%~  	
			Define: NoseX		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Nose X%~  	
			Define: NoseY		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Nose Y%~  	
			Define: ChinX		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Chin X%~  	
			Define: ChinY		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Chin Y%~  	

			// head crop fields for head alignment
			Define: CropX		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Head Crop X% Mid~  	
			Define: CropY			CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Head Crop Y% Mid~
			Define: CropWidth 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Head Crop Width%~  	
			Define: CropLength 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Head Crop Length%~

			// Color adjust fields for images table
			Define:	Brt				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Brt~ Constraints ~Default 0~
			Define:	Red				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Red~ Constraints ~Default 0~
			Define:	Grn				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Grn~ Constraints ~Default 0~
			Define:	Blu				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Blu~ Constraints ~Default 0~

			// Composite SBA fields for images table
			Define:	CompBrt			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompBrt~ Constraints ~Default 0~
			Define:	CompRed			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompRed~ Constraints ~Default 0~
			Define:	CompGrn			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompGrn~ Constraints ~Default 0~
			Define:	CompBlu			CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~CompBlu~ Constraints ~Default 0~

			Define: CheckAlignmentFlag CopyOf CheckAlignmentFlag ~[Database FieldTypes]~ Fields: Constraints ~Default 0~

			Define: FoundEyesManually	CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Found Eyes Manually~
			Define: ManualTopHeadY		CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName	~Manual Top Head Y%~  	
			Define: ManualChinY			CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName	~Manual Chin Y%~  	
			Define: ManualLeftEyeX		CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName	~Manual Left Eye X%~  	
			Define: ManualLeftEyeY		CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName	~Manual Left Eye Y%~  	
			Define: ManualRightEyeX		CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName	~Manual Right Eye X%~  	
			Define: ManualRightEyeY		CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName	~Manual Right Eye Y%~  	
		}

	Define:		CompSbaDataTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CompSbaDataPrimaryKey Using DDText
				Fields:	Text			~Constraint CompSbaDataPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
			
			Define: RefCompSbaDataToOrderID Using DDText
				Fields:	Text			~Constraint RefCompSbaDataToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			CompSbaData			Using DDDatabaseTableDef
		Fields:		TableName			CompSbaData
					TableConstraints	CompSbaDataTableConstraints(GetObjectReference)
					Fields				CompSbaDataFields(GetObjectReference)

	Hang: CompSbaData ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineDSbaBatchSetupsTable()
{
	Define:			DSbaBatchSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Setup 					CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName	~Setup Name~		ReadOnly ~T~
			Define:	Preference				CopyOf DSbaPrefType		~[Database FieldTypes]~ Fields: DisplayName	~Preference~		ReadOnly ~T~
			Define:	SbaLevel				CopyOf DSbaLevelsType	~[Database FieldTypes]~ Fields: DisplayName	~Auto Bal Option~		Constraints	~Default 'DRGB'~ ReadOnly ~T~
			Define:	OrderStatus				CopyOf OrderStatus		~[Database FieldTypes]~ Fields: DisplayName	~Status on Complete~ LangSection ~FieldTypes~ LangItem ~StatusOnComplete~ Constraints	~Default 'Adjust'~ ReadOnly ~T~
			Define: ApplyShasta				CopyOf AutoEnhanceFlag	~[Database FieldTypes]~ Fields: DisplayName	~Auto Enhance~		Constraints	~Default 0~
		}

	Define:			DSbaBatchSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DSbaBatchSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint DSbaBatchSetupsPrimaryKey PRIMARY KEY(Setup)~
		}

	Define:			DSbaBatchSetups	Using DDDatabaseTableDef
		Fields:		TableName			DSbaBatchSetups
					Fields				DSbaBatchSetupsFields(GetObjectReference)
					TableConstraints	DSbaBatchSetupsTableConstraints(GetObjectReference)

	Hang: DSbaBatchSetups ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineFilmtermAdjustmentTable()
{
	Define:		FilmtermAdjustmentFields Using DDLong
		Contains:	InListOrder
		{
			Define:	FilmTerm	CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~FilmTerm~ ReadOnly ~T~ LangSection ~FieldTypes~ LangItem ~FilmTerm~
			Define:	SFSFile		CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~SFSFile~  ReadOnly ~T~ LangSection ~FieldTypes~ LangItem ~SFSFile~

			Define:	FpoR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoR~	Constraints ~Default 0~ ReadOnly ~T~
			Define:	FpoG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoG~	Constraints ~Default 0~ ReadOnly ~T~
			Define:	FpoB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpoB~	Constraints ~Default 0~ ReadOnly ~T~

			Define:	FpaR		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaR~	Constraints ~Default 0~ ReadOnly ~T~
			Define:	FpaG		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaG~	Constraints ~Default 0~ ReadOnly ~T~
			Define:	FpaB		CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~FpaB~	Constraints ~Default 0~ ReadOnly ~T~

			Define:	UpdateFPO	CopyOf Boolean	~[Database FieldTypes]~	Fields: DisplayName	~Update FPO~ Constraints ~Default 1~
			Define:	UpdateFPA	CopyOf Boolean	~[Database FieldTypes]~	Fields: DisplayName	~Update FPA~ Constraints ~Default 1~

		}

	Define:		FilmtermAdjustConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FilmtermAdjustmentPrimaryKey Using DDText
				Fields:	Text			~Constraint FilmtermAdjustmentPrimaryKey PRIMARY KEY(FilmTerm,SFSFile)~
		}

	Define:			FilmtermAdjustment	Using DDDatabaseTableDef
		Fields:		TableName			FilmtermAdjustment
					TableConstraints	FilmtermAdjustConstraints(GetObjectReference)
					Fields				FilmtermAdjustmentFields(GetObjectReference)

	Hang: FilmtermAdjustment ~[DATABASE LocalTableDefinitions]~ InListOrder;
}


VOID DefineRetouchTable()
{
	Define:			RetouchFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	ID			CopyOf RetouchCode	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	Description	CopyOf Description	~[Database FieldTypes]~
			Define:	Std			CopyOf TimeOffset	~[Database FieldTypes]~	Fields: Constraints	~Default 1~ DisplayName ~Std~
			Define:	Actual		CopyOf TimeOffset	~[Database FieldTypes]~	Fields: Constraints	~Default 0~ DisplayName ~Actual~
			Define:	Complete	CopyOf Boolean		~[Database FieldTypes]~	Fields: Constraints	~Default 0~ DisplayName ~Complete~
			Define: RetouchBatchSetup	CopyOf BatchSetup	~[Database FieldTypes]~ Fields: DisplayName ~Batch Setup~
		}

	Define:		RetouchTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RetouchPrimaryKey Using DDText
				Fields:	Text			~Constraint RetouchPrimaryKey PRIMARY KEY(OrderID,Roll,Frame,ID)~

			Define: RefImagesToOrderID Using DDText
				Fields:	Text			~Constraint RefRetouchToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
			//	Fields:	Text			~Constraint RefRetouchToRetouchCodes FOREIGN KEY (ID) REFERENCES RetouchCodes(ID)~

		}

	Define:			Retouch				Using DDDatabaseTableDef
		Fields:		TableName			Retouch
					TableConstraints	RetouchTableConstraints(GetObjectReference)
					Fields				RetouchFields(GetObjectReference)

	Hang: Retouch ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineRetouchCodesTable()
{
	Define:			RetouchCodesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf RetouchCode	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Std			CopyOf TimeOffset	~[Database FieldTypes]~	Fields: Constraints	~Default 1~ DisplayName ~Std~
			Define:	Description	CopyOf Description	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
		}

	Define:		RetouchCodesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RetouchCodesPrimaryKey Using DDText
				Fields:	Text			~Constraint RetouchCodesPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			RetouchCodes		Using DDDatabaseTableDef
		Fields:		TableName			RetouchCodes
					TableConstraints	RetouchCodesTableConstraints(GetObjectReference)
					Fields				RetouchCodesFields(GetObjectReference)

	Hang: RetouchCodes ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineRetouchBatchSetupTable()
{
	Define:			RetouchBatchSetupFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 					CopyOf BatchSetup		~[Database FieldTypes]~ Fields: DisplayName ~Name~ Constraints ~NOT NULL~

			Define: TextureFine				CopyOf RetouchTexture	~[Database FieldTypes]~	Fields: DisplayName ~Fine Texture~ Constraints ~Default 2~
			Define: TextureCoarse			CopyOf RetouchTexture	~[Database FieldTypes]~	Fields: DisplayName ~Coarse Texture~ Constraints ~Default 3~
			Define: TextureDepth			CopyOf RetouchTexture	~[Database FieldTypes]~	Fields: DisplayName ~Depth~ Constraints ~Default 3~
			Define: TextureGrain			CopyOf RetouchTexture	~[Database FieldTypes]~	Fields: DisplayName ~Texture~ Constraints ~Default 2~
			Define: SkinToneSmooth			CopyOf RetouchSkinTone	~[Database FieldTypes]~	Fields: DisplayName ~Skin Tone Smooth~ Constraints ~Default 0~
			Define: SkinToneContrast		CopyOf RetouchSkinTone	~[Database FieldTypes]~	Fields: DisplayName ~Skin Tone Contrast~ Constraints ~Default 2~
			Define: EyeWhitening			CopyOf RetouchWhitener	~[Database FieldTypes]~	Fields: DisplayName ~Eye Whiten~ Constraints ~Default 2~
			Define: TeethWhitening			CopyOf RetouchWhitener	~[Database FieldTypes]~	Fields: DisplayName ~Teeth Whiten~ Constraints ~Default 1~
			Define:	LeftEyeShaping			CopyOf RetouchEyeShaper	~[Database FieldTypes]~	Fields: DisplayName	~Left Eye Shape~ Constraints ~Default 0~
			Define:	RightEyeShaping			CopyOf RetouchEyeShaper	~[Database FieldTypes]~	Fields: DisplayName	~Right Eye Shape~ Constraints ~Default 0~
			Define: RedEyeRemoval			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Red Eye Removal~ Constraints ~Default 0~	
			Define: SkinColorThreshold		CopyOf ByteValue		~[Database FieldTypes]~	Fields: DisplayName	~Skin Color Threshold~ Constraints ~Default 0~
			Define: DefectThreshold			CopyOf Percent			~[Database FieldTypes]~	Fields: DisplayName	~Defect Threshold~ Constraints ~Default 100.0~
			Define: SingleFace				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Single Face~ Constraints ~Default 0~	
			Define: BatchSetupType			CopyOf KparsSetupType	~[Database FieldTypes]~	Fields: DisplayName ~Setup Type~
			Define: DefaultSetting			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Default Setting~
		}

	Define:			RetouchBatchSetupConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RetouchBatchSetupPrimaryKey Using DDText
				Fields:	Text			~Constraint RetouchBatchSetupPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			RetouchBatchSetup	Using DDDatabaseTableDef
		Fields:		TableName			RetouchBatchSetup
					Fields				RetouchBatchSetupFields(GetObjectReference)
					TableConstraints	RetouchBatchSetupConstraints(GetObjectReference)

	Hang: RetouchBatchSetup ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineKparsSetupCodeCrossRefTable()
{
	Define:			KparsSetupCodeCrossRefFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf RetouchCode		~[Database FieldTypes]~	Fields: DisplayName ~Retouch Code~ Constraints ~NOT NULL~
			Define: BatchSetup	CopyOf BatchSetup		~[Database FieldTypes]~ Fields: DisplayName ~Name~ Constraints ~NOT NULL~
		}

	Define:			KparsCodeCrossRefConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: KparsCodeCrossRefPrimaryKey Using DDText
				Fields:	Text			~Constraint KparsCodeCrossRefPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			KparsSetupCodeCrossRef	Using DDDatabaseTableDef
		Fields:		TableName			KparsSetupCodeCrossRef
					Fields				KparsSetupCodeCrossRefFields(GetObjectReference)
					TableConstraints	KparsCodeCrossRefConstraints(GetObjectReference)

		Define: RefKparsToRetouchCodes Using DDText
				Fields:	Text			~Constraint RefKparsToRetouchCodes FOREIGN KEY (ID) REFERENCES RetouchCodes(ID)~

	Hang: KparsSetupCodeCrossRef ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineRetouchImagesTable()
{
	Define:			RetouchImagesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID			CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll			CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Frame			CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	BatchSetup		CopyOf BatchSetup	~[Database FieldTypes]~	Fields: DisplayName	~BatchSetup~
			Define:	BatchCompleteProcessing	CopyOf RetouchBatchComplete ~[Database FieldTypes]~	Fields: DisplayName	~Batch Complete Processing~
			Define:	AutoBatch		CopyOf Boolean		~[Database FieldTypes]~ Fields: DisplayName	~Auto Batch~
			Define:	SingleFace		CopyOf Boolean		~[Database FieldTypes]~ Fields: DisplayName	~Single Face~
			Define: Priority		CopyOf Priority		~[Database FieldTypes]~
			Define:	SubmittedAt		CopyOf SortableDateTime	~[Database FieldTypes]~	Fields: DisplayName ~Submit Date~ LangSection ~FieldTypes~ LangItem ~SubmitDate~
			Define:	RetouchState	CopyOf RetouchState ~[Database FieldTypes]~	Fields: DisplayName	~State~ LangSection	~FieldTypes~ LangSection ~FieldTypes~ LangItem ~RetouchingState~ Constraints

			Define:	IntermediateDataPath	CopyOf Path	~[Database FieldTypes]~	Fields: DisplayName	~Enhancement Data Folder~ LangItem ~EnhancementDataFolder~

			Define: JPEGQuality		  CopyOf JPEGQuality		~[Database FieldTypes]~
			Define:	FileResolution	  CopyOf FileResolution	~[Database FieldTypes]~	Fields: DisplayName ~FileResolution~
			Define: OverwriteOriginal CopyOf Boolean	~[Database FieldTypes]~	Fields: DisplayName ~Overwrite Original~ Constraints ~Default 0~	
			Define:	OriginalPrefix	CopyOf Generic10Char ~[Database FieldTypes]~	Fields: DisplayName	~Original Prefix~
			Define:	OriginalSuffix	CopyOf Generic10Char ~[Database FieldTypes]~	Fields: DisplayName	~Original Suffix~
			Define:	OriginalPath	CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~New Original Path~ LangSection	~FieldTypes~ LangItem ~NewOriginalPath~

			Define:	RotateFromDisk	CopyOf Rotation		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	ArbitraryRotation CopyOf Angle		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	Brt				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Brt~ Constraints ~Default 0~
			Define:	Red				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Red~ Constraints ~Default 0~
			Define:	Grn				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Grn~ Constraints ~Default 0~
			Define:	Blu				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Blu~ Constraints ~Default 0~
			
			Define:	Con				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Con~ Constraints ~Default 0~
			Define:	Saturation		CopyOf Saturation	~[Database FieldTypes]~ Fields: DisplayName ~Saturation~ Constraints ~Default 0~
			Define:	Gamma			CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~Gamma~ Constraints ~Default 0~	
			Define:	GammaRed		CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaRed~ Constraints ~Default 0~	
			Define:	GammaGreen		CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaGreen~ Constraints ~Default 0~	
			Define:	GammaBlue		CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName ~GammaBlue~ Constraints ~Default 0~	

			Define:	ShadowContrast		CopyOf ContrastOffset	~[Database FieldTypes]~	Fields: DisplayName	~ShadowContrast~ Constraints ~Default 0~
			Define:	MidtoneContrast		CopyOf ContrastOffset	~[Database FieldTypes]~	Fields: DisplayName	~MidtoneContrast~ Constraints ~Default 0~
			Define:	HighlightContrast	CopyOf ContrastOffset	~[Database FieldTypes]~	Fields: DisplayName	~HighlightContrast~ Constraints ~Default 0~

			Define: ICCProfile		CopyOf ICCProfile	~[Database FieldTypes]~	Fields: DisplayName ~Input Profile~	
			Define: OutputProfile	CopyOf ICCProfile	~[Database FieldTypes]~	Fields: DisplayName ~Output Profile~	
			Define: ImageSource		CopyOf Generic20Char ~[Database FieldTypes]~ Fields: DisplayName ~Source~
			Define: ImageFlattened	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName ~Flattened~ Constraints ~Default 0~
			Define: DefaultProfileUsed	CopyOf Boolean	~[Database FieldTypes]~	Fields: DisplayName ~Default Profile Used~ Constraints ~Default 0~
			Define: RestoreOriginal	CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName ~Restore Original~ Constraints ~Default 0~
			Define:	BatchID			CopyOf BatchID		~[Database FieldTypes]~ Fields: DisplayName ~Batch ID~	LangSection	~FieldTypes~ LangItem ~BatchID~
			Define:	ReviewID		CopyOf BatchID		~[Database FieldTypes]~ Fields: DisplayName ~Review ID~	LangSection	~FieldTypes~ LangItem ~ReviewID~		
			Define:	MergeID			CopyOf BatchID		~[Database FieldTypes]~ Fields: DisplayName ~Merge ID~	LangSection	~FieldTypes~ LangItem ~MergeID~

			Define:	ApplyShasta			CopyOf ShastaFlag	~[Database FieldTypes]~	Fields: DisplayName	~Auto Enhance~			Constraints ~Default 0~	
			Define: ShastaHighlight		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~Highlight Contrast~	Constraints ~Default 0~	
			Define: ShastaMidTone		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~MidTone Contrast~		Constraints ~Default 0~	
			Define: ShastaShadow		CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~Shadow Contrast~		Constraints ~Default 0~	

			Define: PostKPTPBrt			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Brt~			Constraints ~Default 0~
			Define: PostKPTPRed			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Red~			Constraints ~Default 0~
			Define: PostKPTPGrn			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Grn~			Constraints ~Default 0~
			Define: PostKPTPBlu			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Blu~			Constraints ~Default 0~
			Define: PostKPTPCon			CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName ~Post PT Con~			Constraints ~Default 0~
			Define: PostKPTPGam			CopyOf Gamma		~[Database FieldTypes]~ Fields: DisplayName ~Post PT Gam~			Constraints ~Default 1~

		}

	Define:			RetouchImagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RetouchImagesPrimaryKey Using DDText
				Fields:	Text			~Constraint RetouchImagesPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~

			Define: RefRetouchImagesToOrderID Using DDText
				Fields:	Text			~Constraint RefRetouchImagesToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			RetouchImages	Using DDDatabaseTableDef
		Fields:		TableName			RetouchImages
					Fields				RetouchImagesFields(GetObjectReference)
					TableConstraints	RetouchImagesTableConstraints(GetObjectReference)

	Hang: RetouchImages ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineKparsDataTable()
{
	Define:			KparsDataFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID				CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll				CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Frame				CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define: SkinColor			CopyOf ByteValue	~[Database FieldTypes]~	Fields: DisplayName	~Skin Color~
			Define: DefectPercent		CopyOf Percent		~[Database FieldTypes]~	Fields: DisplayName	~Defect Percent~
		}

	Define:			KparsDataTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: KparsDataPrimaryKey Using DDText
				Fields:	Text			~Constraint KparsDataPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~

//			Define: RefKparsDataToOrderID Using DDText
//				Fields:	Text			~Constraint RefKparsDataToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			KparsData			Using DDDatabaseTableDef
		Fields:		TableName			KparsData
					Fields				KparsDataFields(GetObjectReference)
					TableConstraints	KparsDataTableConstraints(GetObjectReference)

	Hang: KparsData ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineShootDescTable()
{
	WhichTable = ShootDescription;

	Define:	<WhichTable>ToolTips USING DDSymbol Contains:
	{
		Define: ColorsTip	using DDText Fields: Text STR ( 3 Value Color - Can be used in color macro. )
		Define: FileTip		using DDText Fields: Text STR ( File containing image - Can be used in macro. )
	}	
	Hang:	<WhichTable>ToolTips	~[STRINGS]~ ;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf ShootDescID	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define:	Name		CopyOf LongName		~[Database FieldTypes]~	Fields: DisplayName ~Name~
			Define:	Contact		CopyOf CustomerName	~[Database FieldTypes]~ Fields: DisplayName	~Contact~
			Define:	Street		CopyOf Street		~[Database FieldTypes]~
			Define: County		CopyOf County		~[Database FieldTypes]~
			Define:	City		CopyOf City			~[Database FieldTypes]~
			Define:	State		CopyOf State		~[Database FieldTypes]~	
			Define:	ZipCode		CopyOf ZipCode		~[Database FieldTypes]~
			Define:	Color1		CopyOf ColorChar	~[Database FieldTypes]~ Fields: DisplayName ~Color1~ ColumnToolTipText Translate( <WhichTable>ToolTips,ColorsTip ) DefaultDlg ~Color~
			Define:	Color2		CopyOf ColorChar	~[Database FieldTypes]~ Fields: DisplayName ~Color2~ ColumnToolTipText Translate( <WhichTable>ToolTips,ColorsTip ) DefaultDlg ~Color~
			Define:	Background	CopyOf FilePath		~[Database FieldTypes]~ Fields: DisplayName ~Background~ DisplayWidth ~10~
			Define:	TheFile		CopyOf Path			~[Database FieldTypes]~ Fields: DisplayName ~File~   ColumnToolTipText Translate( <WhichTable>ToolTips,FileTip ) LangItem ~File~
			Define:	Comments	CopyOf Description	~[Database FieldTypes]~ Fields: DisplayName ~Comments~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(ID)~

		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

	
VOID DefineOrderDlvrblTable()
{

	Define:			OrderDlvrblFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID				~[Database FieldTypes]~ 
			Define: Name		CopyOf SlctblDlvrblName		~[Database FieldTypes]~
			Define: Choice		CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: DisplayName ~Choice~
			Define:	Groupby		CopyOf SlctblSortName		~[Database FieldTypes]~ Fields: DisplayName ~Page Break~
			Define:	Sortby		CopyOf SlctblSortName		~[Database FieldTypes]~ Fields: DisplayName ~Sort By~
			Define: MultiImages CopyOf MultipleImages		~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: Notes		CopyOf Description			~[Database FieldTypes]~ Fields: DisplayName ~Notes~
			Define: ShipDate	CopyOf DateTime				~[Database FieldTypes]~ Fields: DisplayName	~Ship Date~
			Define: Status		CopyOf Description			~[Database FieldTypes]~ Fields: DisplayName	~Status~
			Define: JobPopulationScript	CopyOf JobName		~[Database FieldTypes]~ Fields:	DisplayName	~Job Population Script~	 ColumnToolTipText ~A Script that drops images in the book found in ?~					
			Define:	MergeWithSubjectPackages	CopyOf Boolean	~[Database FieldTypes]~ Fields: DisplayName	~Merge Order Items With Subject Packages~ ColumnToolTipText ~New order items will be merged with subject's packages.  Only supported for Rows where the Name Column is set to 'DP2 Products'~
		}

	Define:		OrderDlvrblTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderDlvrblPrimaryKey Using DDText
				Fields:	Text			~Constraint OrderDlvrblPrimaryKey PRIMARY KEY(OrderID,Choice)~

			Define: RefOrderDlvrblToOrderID Using DDText
				Fields:	Text			~Constraint RefOrderDlvrblToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:		OrderDlvrblTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: OrderDlvrblIndex Using DDText
				Fields:	Text			~Create Index OrderDlvrblIndex on OrderDlvrbl(OrderID)~
		}


	Define:			OrderDlvrbl		Using DDDatabaseTableDef
		Fields:		TableName			OrderDlvrbl
					Indexes				OrderDlvrblTableIndexes(GetObjectReference)
					TableConstraints	OrderDlvrblTableConstraints(GetObjectReference)
					Fields				OrderDlvrblFields(GetObjectReference)

	Hang: OrderDlvrbl ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineOrderDlvrblChoicesTable()
{

	Define:			OrderDlvrblChoicesFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name		CopyOf DlvrblName			~[Database FieldTypes]~ Fields: DisplayName ~Name~ Constraints	~NOT NULL~
			Define: Choice		CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: DisplayName ~Choice~ Constraints	~NOT NULL~
		}

	Define:		OrderDlvrblChoicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderDlvrblChoicesPrimaryKey Using DDText
				Fields:	Text			~Constraint OrderDlvrblChoicesPrimaryKey PRIMARY KEY(Name,Choice)~

		}

	Define:		OrderDlvrblChoicesTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: OrderDlvrblChoicesIndex Using DDText
				Fields:	Text			~Create Index OrderDlvrblChoicesIndex on OrderDlvrblChoices(Name)~
		}


	Define:			OrderDlvrblChoices		Using DDDatabaseTableDef
		Fields:		TableName			OrderDlvrblChoices
					Indexes				OrderDlvrblChoicesTableIndexes(GetObjectReference)
					TableConstraints	OrderDlvrblChoicesTableConstraints(GetObjectReference)
					Fields				OrderDlvrblChoicesFields(GetObjectReference)

	Hang: OrderDlvrblChoices ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineCompositeTable()
{

	Define:			CompositeFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID				~[Database FieldTypes]~ 
			Define: Collection	CopyOf ProductID			~[Database FieldTypes]~
			Define: Groupby		CopyOf SlctblSortName		~[Database FieldTypes]~ Fields: DisplayName ~Group By~
			Define:	Sortby		CopyOf SlctblSortName		~[Database FieldTypes]~
			Define:	Quantity	CopyOf QtyType				~[Database FieldTypes]~ Fields: DisplayName ~Quantity~ 
			Define:	QtyN		CopyOf Quantity				~[Database FieldTypes]~ Fields: DisplayName ~+N~ LangItem ~PlusN~ Constraints	~Default 0~
			Define: ImagesFrom	CopyOf ImagesFromType		~[Database FieldTypes]~
			Define: SlctdOrders	CopyOf SlctdOrders			~[Database FieldTypes]~
			Define: Notes		CopyOf Description			~[Database FieldTypes]~ Fields: DisplayName ~Notes~
			Define: ShipDate	CopyOf DateTime				~[Database FieldTypes]~ Fields: DisplayName	~Ship Date~
			Define: Status		CopyOf JobStatus			~[Database FieldTypes]~ Fields: DisplayName	~Status~
			Define: MultiImages CopyOf MultipleImages		~[Database FieldTypes]~
			Define:	Definition	CopyOf ProductID			~[Database FieldTypes]~	Fields: DisplayName	~Definition~	
			Define:	OutputSetup	CopyOf Path					~[Database FieldTypes]~	Fields: DisplayName	~Output Setup~ LangItem ~OutputSetup~
			Define: WhoGetsFeatured	CopyOf WhoGetsFeaturedType	~[Database FieldTypes]~ Fields: ColumnToolTipText   ~Determines who gets a featured composite~
			Define: ShuffleStaff	CopyOf ShuffleStaffType	~[Database FieldTypes]~		Fields: ColumnToolTipText ~Identifies how to shuffle the staff when building a featured composite~
			Define: TypeOfComposite	CopyOf TypeOfCompositeType	~[Database FieldTypes]~ Fields: ColumnToolTipText   ~Type of composite, either regular or featured~
			Define: StaffField	CopyOf FieldName	~[Database FieldTypes]~				Fields:	LangItem	~StaffField~ ColumnToolTipText ~Name of a field in the subject info table needed to help build a database query that identifies staff members~
			Define: StaffRestriction CopyOf QueryText		~[Database FieldTypes]~		Fields: LangItem	~StaffRestriction~ ColumnToolTipText ~Partial query to identify staff members when building featured composites~
			Define: FeaturedField	CopyOf FieldName		~[Database FieldTypes]~		Fields: LangItem	~FeaturedField~  ColumnToolTipText ~Name of a field in the subject info table that identifies which subjects ordered a featured composite~
			Define: FeaturedRestriction	CopyOf QueryText	~[Database FieldTypes]~		Fields: LangItem	~FeaturedRestriction~ ColumnToolTipText ~Partial query to identify which subjects ordered a featured composite~
		}

	Define:		CompositeTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CompositePrimaryKey Using DDText
				Fields:	Text			~Constraint CompositePrimaryKey PRIMARY KEY(OrderID,Collection)~

			Define: RefCompositeToOrderID Using DDText
				Fields:	Text			~Constraint RefCompositeToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			Composite		Using DDDatabaseTableDef
		Fields:		TableName			Composite
					TableConstraints	CompositeTableConstraints(GetObjectReference)
					Fields				CompositeFields(GetObjectReference)

	Hang: Composite ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineCompositeNodesTable()
{

	Define:			CompositeNodesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductID	CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define: NodeName	CopyOf NodeName		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	NodeType	CopyOf NodeStyle	~[Database FieldTypes]~	Fields: DisplayName	~Node Type~	Constraints ~Default 0~	
			Define:	Countable	CopyOf Boolean		~[Database FieldTypes]~ Fields: DisplayName	~Countable~
		}

	Define:		CompositeNodesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CompositeNodesPrimaryKey Using DDText
				Fields:	Text			~Constraint CompositeNodesPrimaryKey PRIMARY KEY(ProductID,NodeName)~

		}

	Define:			CompositeNodes		Using DDDatabaseTableDef
		Fields:		TableName			CompositeNodes
					TableConstraints	CompositeNodesTableConstraints(GetObjectReference)
					Fields				CompositeNodesFields(GetObjectReference)

	Hang: CompositeNodes ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineNodeDetailsTable()
{

	Define:			NodeDetailsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	ProductID	CopyOf ProductID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define: NodeName	CopyOf NodeName			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	NodeStyle	CopyOf ProductID		~[Database FieldTypes]~	Fields: DisplayName	~Style~	
			Define:	NodeImage	CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Image~
			Define: NodeText	CopyOf ProcessLongText	~[Database FieldTypes]~  Fields: DisplayName ~Text~
		}

	Define:		NodeDetailsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: NodeDetailsPrimaryKey Using DDText
				Fields:	Text			~Constraint NodeDetailsPrimaryKey PRIMARY KEY(OrderID,ProductID,NodeName)~

		}

	Define:			NodeDetails		Using DDDatabaseTableDef
		Fields:		TableName			NodeDetails
					TableConstraints	NodeDetailsTableConstraints(GetObjectReference)
					Fields				NodeDetailsFields(GetObjectReference)

	Hang: NodeDetails ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineSubjectInfoTable()
{
	WhichTable = SubjectInfo;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:		OrderID				CopyOf OrderID		~[Database FieldTypes]~ Fields: DisplayName ~ID~ Constraints ~NOT NULL~ LangItem ~ID~
			Define:		SubjectID			CopyOf SubjectID	~[Database FieldTypes]~ Fields: DisplayName ~Subject ID~ Constraints ~NOT NULL~


			// Personal Fields
			Define:		LastName			CopyOf CustomerName	~[Database FieldTypes]~ Fields: DisplayName ~Last Name~
			Define:		FirstName			CopyOf CustomerName	~[Database FieldTypes]~	Fields: DisplayName ~First Name~
			Define:		Street				CopyOf Street		~[Database FieldTypes]~
			Define:		City				CopyOf City			~[Database FieldTypes]~
			Define:		State				CopyOf State		~[Database FieldTypes]~	
			Define:		Country				CopyOf Country		~[Database FieldTypes]~	
			
			// School Fields
			Define:		Grade				CopyOf Grade		~[Database FieldTypes]~	
			Define:		School				CopyOf School		~[Database FieldTypes]~	
			Define:		Teacher				CopyOf Teacher		~[Database FieldTypes]~	
			Define:		HomeRoom			CopyOf HomeRoom		~[Database FieldTypes]~	

			Define:		P1					CopyOf ProductID	~[Database FieldTypes]~ Fields: DisplayName ~P1~ 
			Define:		Q1					CopyOf Quantity		~[Database FieldTypes]~ Fields: DisplayName ~Q1~ LangItem ~Q1~ Constraints ~Default 0~
			Define:		P2					CopyOf ProductID	~[Database FieldTypes]~ Fields: DisplayName ~P2~ 
			Define:		Q2					CopyOf Quantity		~[Database FieldTypes]~ Fields: DisplayName ~Q2~ LangItem ~Q2~ Constraints ~Default 0~
			Define:		P3					CopyOf ProductID	~[Database FieldTypes]~ Fields: DisplayName ~P3~ 
			Define:		Q3					CopyOf Quantity		~[Database FieldTypes]~ Fields: DisplayName ~Q3~ LangItem ~Q3~ Constraints ~Default 0~
			Define:		P4					CopyOf ProductID	~[Database FieldTypes]~ Fields: DisplayName ~P4~ 
			Define:		Q4					CopyOf Quantity		~[Database FieldTypes]~ Fields: DisplayName ~Q4~ LangItem ~Q4~ Constraints ~Default 0~

		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(OrderID,SubjectID)~

//			Define: RefSubjectsToOrderID Using DDText
//				Fields:	Text			~Constraint RefSubjectsToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}
			


VOID DefineProductsTable()
{

	Define:			ProductsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ProductID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define: LayoutName			CopyOf ProductName	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	Category			CopyOf Category		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Sequence			CopyOf Sequence		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	SubSequence			CopyOf SubSequence	~[Database FieldTypes]~

			Define: ProductGroup		CopyOf ProductName	~[Database FieldTypes]~ Fields: DisplayName	~Group~
			Define:	CustomerID			CopyOf CustomerID	~[Database FieldTypes]~					
			Define:	UserName			CopyOf User			~[Database FieldTypes]~	Fields:	DisplayName	~User~
			Define:	OrderPadSequence	CopyOf Sequence		~[Database FieldTypes]~	Fields: DisplayName	~Navigator Seq~ LangItem ~NavigatorSeq~
										ColumnToolTipText	~Non null values indicate the product should show in the Navigators list of products~
			Define:	ProductType			CopyOf ProductType	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
										ColumnToolTipText	~Must be Digital.~
										
			Define:	ProdType			CopyOf ProdType		~[Database FieldTypes]~	Fields:
										ColumnToolTipText	~Used in Chroma Key background substitution.  Can contain user defined values.~
										
			Define:	Package				CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Package~  	Constraints ~Default 0~	
										ColumnToolTipText	~If checked, this product is really a package that consists of multiple layouts~
			Define:	Multiple			CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Multiple~	Constraints ~Default 0~		
										ColumnToolTipText	~If checked, this product is one of many layouts depending on the number of images in the job. The product path will be a directory of layouts.~
			Define:	Style				CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Style~		Constraints ~Default 0~	
										ColumnToolTipText	~If checked, the first node of the corresponding layout will be copied to a new layout if the setup is dragged to a node of an open layout.~
			Define:	StyleType			CopyOf NodeStyle	~[Database FieldTypes]~	Fields: DisplayName	~Style Type~		Constraints ~Default 0~	// 0 = Image, 1 = Text, 2 = Image and Text
										ColumnToolTipText	~Describes the type of node this setup is for.  This field is ignored if the Style box is not checked.~
			Define:	ProductLayoutPath	CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Product Path~ LangItem ~ProductPath~
										ColumnToolTipText	~The full path to the corresponding layout or a directory of layouts if Multiple is checked.~
			Define:	PreviewPath			CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Preview Path~ LangItem ~PreviewPath~	
										ColumnToolTipText	~The full path to a small jpeg image that represents a visual view of this product.~
			Define:	ImageNodeAmount		CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~ImageNodeAmount~		Constraints ~Default 0~	
										ColumnToolTipText	~the amount of image nodes in the product, used only by DP1 themed album module.~
			Define:	LastUpdateTime		CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Last Update Time~	
										ColumnToolTipText	~Last Update Time of layout, used only by DP1~
			Define:	Book				CopyOf Boolean		~[Database FieldTypes]~	Fields: DisplayName	~Book~  	Constraints ~Default 0~	
										ColumnToolTipText	~If checked, this product is a book that consists of multiple layouts~
			Define:	DeviceType			CopyOf Generic64Char	~[Database FieldTypes]~	Fields: DisplayName ~Device Type~
										ColumnToolTipText	~The type of press printer~
		}

	Define:		ProductsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProductsPrimaryKey Using DDText
				Fields:	Text			~Constraint ProductsPrimaryKey PRIMARY KEY(ID)~
		}

	Define:		ProductsTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: ProductsCategoryIndex Using DDText
				Fields:	Text	~Create Index ProductsCategoryIndex on Products(Category)~

			Define: ProductsCustomerIDIndex Using DDText
				Fields:	Text	~Create Index ProductsCustomerIDIndex on Products(CustomerID)~

			Define: ProductsOrderPadSequenceIndex Using DDText
				Fields:	Text	~Create Index ProductsOrderPadSequenceIndex on Products(OrderPadSequence)~
		}

	Define:			Products			Using DDDatabaseTableDef
		Fields:		TableName			Products
					Indexes				ProductsTableIndexes(GetObjectReference)
					TableConstraints	ProductsTableConstraints(GetObjectReference)
					Fields				ProductsFields(GetObjectReference)

	Hang: Products ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineBookProductsTableC8000()
{
	Annex = C8000Creo;
	Define:			BookProductsFields<Annex> Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductID			CopyOf ProductID		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	TemplateName		CopyOf Generic255Char	~[Database FieldTypes]~	Fields: DisplayName ~Template Name~
		}

	Define:		BookProductsConstraints<Annex> Using DDLong
		Contains:	InListOrder
		{
			Define: BookProductsPrimaryKey<Annex> Using DDText
				Fields:	Text			~Constraint BookProductsPrimaryKey<Annex> PRIMARY KEY(ProductID)~
		}

	Define:			BookProductsFor<Annex>	Using DDDatabaseTableDef
		Fields:		TableName				BookProductsFor<Annex>
					TableConstraints		BookProductsConstraints<Annex>(GetObjectReference)
					Fields					BookProductsFields<Annex>(GetObjectReference)

	Hang: BookProductsFor<Annex> ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineBookProductsTableNexpress()
{
	Annex = NexPress;
	Define:			BookProductsFields<Annex> Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductID			CopyOf ProductID		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	TemplateName		CopyOf Generic255Char	~[Database FieldTypes]~	Fields: DisplayName ~Template Name~
			Define:	Banner				CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~Banner~
			Define: InkName				CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Ink~
			Define:	Bleed				CopyOf Bleed			~[Database FieldTypes]~ Fields:	DisplayName	~Bleed~	
			Define: DontRenderBleed		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Don't Render Bleed~ 
			Define: DontOverrideTemplateBleed 	CopyOf Boolean	~[Database FieldTypes]~	Fields: DisplayName ~Don't Override Template Bleed~
		}

	Define:		BookProductsConstraints<Annex> Using DDLong
		Contains:	InListOrder
		{
			Define: BookProductsPrimaryKey<Annex> Using DDText
				Fields:	Text			~Constraint BookProductsPrimaryKey<Annex> PRIMARY KEY(ProductID)~
		}

	Define:			BookProductsFor<Annex>	Using DDDatabaseTableDef
		Fields:		TableName				BookProductsFor<Annex>
					TableConstraints		BookProductsConstraints<Annex>(GetObjectReference)
					Fields					BookProductsFields<Annex>(GetObjectReference)

	Hang: BookProductsFor<Annex> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineProductsXrefTable()
{
	Define:			ProductsXrefFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductID			CopyOf ProductID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	ExternalID			CopyOf CustomerID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~ DisplayName ~External ID~
			Define:	ExternalProductID	CopyOf ProductID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~ DisplayName ~External Product ID~
		}

	Define:		ProductsXrefTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProductsXrefPrimaryKey Using DDText
				Fields:	Text			~Constraint ProductsXrefPrimaryKey PRIMARY KEY(ProductID,ExternalID,ExternalProductID)~
		}

	Define:		ProductsXrefTableIndexes Using DDLong
		Contains:	InListOrder
		{
			//Define: ProductsXrefCategoryIndex Using DDText
			//	Fields:	Text	~Create Index ProductsXrefCategoryIndex on ProductsXref(Category)~
		}

	Define:			ProductsXref		Using DDDatabaseTableDef
		Fields:		TableName			ProductsXref
					Indexes				ProductsXrefTableIndexes(GetObjectReference)
					TableConstraints	ProductsXrefTableConstraints(GetObjectReference)
					Fields				ProductsXrefFields(GetObjectReference)

	Hang: ProductsXref ~[DATABASE TableDefinitions]~ InListOrder;
}





VOID DefinePackagesTable()
{
	Define:			PackagesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	PackageID			CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: DisplayName ~Package ID~ Constraints	~NOT NULL~
			Define:	Sequence			CopyOf Sequence				~[Database FieldTypes]~				
			Define:	ProductID			CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	Quantity			CopyOf Quantity				~[Database FieldTypes]~	
			Define:	TargetNode			CopyOf NodeCombo			~[Database FieldTypes]~	Fields: DisplayName ~TargetNode~		
		}

	Define:		PackagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PackagesPrimaryKey Using DDText
				Fields:	Text			~Constraint PackagesPrimaryKey PRIMARY KEY(PackageID,Sequence)~

			Define: RefPackageIDToProductID Using DDText
				Fields:	Text			~Constraint RefPackageIDToProductID FOREIGN KEY (PackageID) REFERENCES Products(ID)~

			Define: RefProductIDToProductID Using DDText
				Fields:	Text			~Constraint RefProductIDToProductID FOREIGN KEY (ProductID) REFERENCES Products(ID)~

		}

	Define:			Packages			Using DDDatabaseTableDef
		Fields:		TableName			Packages
					TableConstraints	PackagesTableConstraints(GetObjectReference)
					Fields				PackagesFields(GetObjectReference)

	Hang: Packages ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineSubjectInfoColumnsTable()
{
	Define:	SubjectInfoColumnsToolTips USING DDSymbol Contains:
	{
		Define: TableName		using DDText Fields: Text STR ( Which SubjectInfo table you are identifying columns for )
		Define: ColumnName		using DDText Fields: Text STR ( Select a column in the SubjectInfo that has product or quantity information )
		Define: Type			using DDText Fields: Text STR ( Select the type of data that is in this column )
		Define: ForColumn		using DDText Fields: Text STR ( If this column is a Qty of a Product/Qty combination, select which field is the corresponding product )

	}
	
	Hang:	SubjectInfoColumnsToolTips	~[STRINGS]~ ;	

	Define:			SubjectInfoColumnsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	TableName			CopyOf TableName			~[Database FieldTypes]~ 
			Define:	ColumnName			CopyOf ColumnName			~[Database FieldTypes]~ 		
			Define:	Type				CopyOf ProductColumnType	~[Database FieldTypes]~ Fields: Constraints ~Not NULL~	
			Define:	ForColumn			CopyOf ColumnName			~[Database FieldTypes]~ Fields: DisplayName ~For~		

		}

	Define:		SubjectInfoColumnsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: SubjectInfoColumnsPrimaryKey Using DDText
				Fields:	Text			~Constraint SubjectInfoColumnsPrimaryKey PRIMARY KEY(TableName,ColumnName)~
		}

	Define:			SubjectInfoColumns	Using DDDatabaseTableDef
		Fields:		TableName			SubjectInfoColumns
					TableConstraints	SubjectInfoColumnsTableConstraints(GetObjectReference)
					Fields				SubjectInfoColumnsFields(GetObjectReference)

	Hang: SubjectInfoColumns ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineSubjectKparsColumnsTable()
{
	Define:	SubjectKparsColumnsToolTips USING DDSymbol Contains:
	{
		Define: TableName		using DDText Fields: Text STR ( Which SubjectInfo table you are identifying columns for )
		Define: ColumnName		using DDText Fields: Text STR ( Select a column in the SubjectInfo that has retouching information )
		Define: Type			using DDText Fields: Text STR ( Select the type of data that is in this column )

	}
	
	Hang:	SubjectKparsColumnsToolTips	~[STRINGS]~ ;	

	Define:			SubjectKparsColumnsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	TableName			CopyOf TableName			~[Database FieldTypes]~ 
			Define:	ColumnName			CopyOf ColumnName			~[Database FieldTypes]~ 		
			Define:	Type				CopyOf KparsColumnType		~[Database FieldTypes]~ Fields: Constraints ~Not NULL~	
		}

	Define:		SubjectKparsColumnsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: SubjectKparsColumnsPrimaryKey Using DDText
				Fields:	Text			~Constraint SubjectKparsColumnsPrimaryKey PRIMARY KEY(TableName,ColumnName)~
		}

	Define:			SubjectKparsColumns	Using DDDatabaseTableDef
		Fields:		TableName			SubjectKparsColumns
					TableConstraints	SubjectKparsColumnsTableConstraints(GetObjectReference)
					Fields				SubjectKparsColumnsFields(GetObjectReference)

	Hang: SubjectKparsColumns ~[DATABASE TableDefinitions]~ InListOrder;
}





VOID DefineCustomerProductsTable()
{
	Define:			CustomerProductsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	CustomerID			CopyOf CustomerID			~[Database FieldTypes]~ 
			Define:	ProgramID			CopyOf CustomerID			~[Database FieldTypes]~	Fields: DisplayName ~ProgramID~			
			Define:	ID					CopyOf ProductID			~[Database FieldTypes]~ Fields: DisplayName ~ID~
			Define:	Sequence			CopyOf Sequence				~[Database FieldTypes]~	Fields: DisplayName ~Sequence~		
			Define:	ProductID			CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: DisplayName ~ProductID~
			Define:	Quantity			CopyOf Quantity				~[Database FieldTypes]~	Fields: DisplayName ~Quantity~
			Define: PrintingRequest		CopyOf PrintingRequest		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
		}

	Define:		CustomerProductsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CustomerProductsPrimaryKey Using DDText
				Fields:	Text			~Constraint CustomerProductsPrimaryKey PRIMARY KEY(CustomerID,ProgramID,ID,Sequence)~
		}

	Define:			CustomerProducts	Using DDDatabaseTableDef
		Fields:		TableName			CustomerProducts
					TableConstraints	CustomerProductsTableConstraints(GetObjectReference)
					Fields				CustomerProductsFields(GetObjectReference)

	Hang: CustomerProducts ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineProShotsProductsTable()
{
	Define:			ProShotsProductsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	CustomerID			CopyOf CustomerID			~[Database FieldTypes]~ Fields: ReadOnly ~T~ DisplayWidth ~12~
			Define:	ProductID			CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: DisplayName ~ProductID~ ReadOnly ~T~ DisplayWidth ~15~
			Define:	Sequence			CopyOf Sequence				~[Database FieldTypes]~
			Define: Category			CopyOf UserTaskCategory		~[Database FieldTypes]~ Fields: DisplayName ~Category~
			Define: Type				CopyOf ProShotsProductType	~[Database FieldTypes]~ Fields: DisplayName ~Type~ DisplayWidth ~30~
			Define:	Quantity			CopyOf Quantity				~[Database FieldTypes]~	Fields: DisplayName ~Quantity~ DisplayWidth ~9~
			Define: Cost				CopyOf Cost					~[Database FieldTypes]~ Fields: DisplayName ~Price~ DisplayWidth ~9~ AllowedChars ~.~
			Define: UnitOfMeasure		CopyOf UnitOfMeasure		~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: IsProof				CopyOf Boolean				~[Database FieldTypes]~ Fields: DisplayName ~Proof Product~ Constraints ~Default 0~
			//Define:	IncludeInCatalog	CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Include In Catalog~ DisplayWidth ~12~
		    Define: AlterMethod		        CopyOf AlterMethod		~[Database FieldTypes]~ Fields: DisplayName ~Alter Method~  Constraints ~Default 0~ 
		}

	Define:		ProShotsProductsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProShotsProductsPrimaryKey Using DDText
				Fields:	Text			~Constraint ProShotsProductsPrimaryKey PRIMARY KEY(CustomerID,ProductID,Type,Quantity)~
		}

	Define:			ProShotsProducts	Using DDDatabaseTableDef
		Fields:		TableName			ProShotsProducts
					TableConstraints	ProShotsProductsTableConstraints(GetObjectReference)
					Fields				ProShotsProductsFields(GetObjectReference)

	Hang: ProShotsProducts ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineProShotsDatabasesTable()
{
	Define:			ProShotsDatabasesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ComputerName		CopyOf ComputerName		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~			
			Define:	UserName			CopyOf User				~[Database FieldTypes]~	Fields:	DisplayName	~User~
			Define:	DBName				CopyOf LongName			~[Database FieldTypes]~ Fields: DisplayName ~Database Name~
			Define:	Path				CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~Database Path~ LangItem ~DatabasePath~
		}

	Define:		ProShotsDatabasesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProShotsDatabasesPrimaryKey Using DDText
				Fields:	Text			~Constraint ProShotsDatabasesPrimaryKey PRIMARY KEY(ComputerName,UserName,DBName)~
		}

	Define:			ProShotsDatabases	Using DDDatabaseTableDef
		Fields:		TableName			ProShotsDatabases
					TableConstraints	ProShotsDatabasesTableConstraints(GetObjectReference)
					Fields				ProShotsDatabasesFields(GetObjectReference)

	Hang: ProShotsDatabases ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineJobServicesTable()
{
	Define:			JobServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ServiceNumber ~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	Label				CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Label~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Code~
			Define: Price				CopyOf Cost ~[Database FieldTypes]~ Fields: DisplayName ~Price~
			Define: ServicesGroup		CopyOf ServicesGroup ~[Database FieldTypes]~ Fields: DisplayName ~Group~
			Define: BW					CopyOf Boolean ~[Database FieldTypes]~ Fields: DisplayName ~Black&White~
			Define: Sepia				CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Sepia~
			Define: LookupLUT			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Lookup LUT~
			Define: ColorMatrix			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Color Matrix~
			Define: ServiceCategory		CopyOf CategoryCode	~[Database FieldTypes]~ Fields: DisplayName ~Service Category~
			Define: UnitOfMeasure		CopyOf UnitOfMeasure	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
		}

	Define:		JobServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: JobServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint JobServicesPrimaryKey PRIMARY KEY(ID)~

		}

	Define:			JobServices	Using DDDatabaseTableDef
		Fields:		TableName			JobServices
					TableConstraints	JobServicesTableConstraints(GetObjectReference)
					Fields				JobServicesFields(GetObjectReference)

	Hang: JobServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineOrderServicesTable()
{
	Define:			OrderServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define: OrderID				CopyOf OrderID			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~		
			Define:	ServicesID			CopyOf ServiceNumber	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~Order File ID~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Service Code~
			Define: Description			CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Description~
		}

	Define:		OrderServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint OrderServicesPrimaryKey PRIMARY KEY(OrderID,ServicesID)~

			Define: RefOrderIDtoOrdersID Using DDText
				Fields:	Text			~Constraint RefOrderIDtoOrdersID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~

		}
	Define:		OrderServicesTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			OrderServices	Using DDDatabaseTableDef
		Fields:		TableName			OrderServices
					Indexes				OrderServicesTableIndexes(GetObjectReference)
					TableConstraints	OrderServicesTableConstraints(GetObjectReference)
					Fields				OrderServicesFields(GetObjectReference)

	Hang: OrderServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineNodeServicesTable()
{
	Define:			NodeServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ServiceNumber ~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	Label				CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Label~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Code~
			Define: Price				CopyOf Cost ~[Database FieldTypes]~ Fields: DisplayName ~Price~
			Define: ServicesGroup		CopyOf ServicesGroup ~[Database FieldTypes]~ Fields: DisplayName ~Group~
			Define: BW					CopyOf Boolean ~[Database FieldTypes]~ Fields: DisplayName ~Black&White~
			Define: Sepia				CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Sepia~
			Define: ServiceCategory		CopyOf CategoryCode	~[Database FieldTypes]~ Fields: DisplayName ~Service Category~
			Define: UnitOfMeasure		CopyOf UnitOfMeasure	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: LookupLUT			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Lookup LUT~
			Define: ColorMatrix			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Color Matrix~


		}

	Define:		NodeServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: NodeServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint NodeServicesPrimaryKey PRIMARY KEY(ID)~
			
		}

	Define:			NodeServices		Using DDDatabaseTableDef
		Fields:		TableName			NodeServices
					TableConstraints	NodeServicesTableConstraints(GetObjectReference)
					Fields				NodeServicesFields(GetObjectReference)

	Hang: NodeServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineOrderedNodeServicesTable()
{
	Define:			OrderedNodeServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define: NodeID				CopyOf NodeID			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define: OrderID				CopyOf OrderID			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~	
			Define: OrderItemID			CopyOf OrderItemID		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define: ProductID			CopyOf SelectableProductID		~[Database FieldTypes]~		
			Define:	ServicesID			CopyOf ServiceNumber	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~Order File ID~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Service Code~
			Define: Description			CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Description~
		}

	Define:		OrderedNodeServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderedNodeServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint OrderedNodeServicesPrimaryKey PRIMARY KEY(NodeID,OrderID,OrderItemID,ServicesID)~

		}
	Define:		OrderedNodeServicesTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			OrderedNodeServices	Using DDDatabaseTableDef
		Fields:		TableName			OrderedNodeServices
					Indexes				OrderedNodeServicesTableIndexes(GetObjectReference)
					TableConstraints	OrderedNodeServicesTableConstraints(GetObjectReference)
					Fields				OrderedNodeServicesFields(GetObjectReference)

	Hang: OrderedNodeServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefinePrintServicesTable()
{
	Define:			PrintServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ServiceNumber ~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	Label				CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Label~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Code~
			Define: Price				CopyOf Cost ~[Database FieldTypes]~ Fields: DisplayName ~Price~
			Define: ServicesGroup		CopyOf ServicesGroup ~[Database FieldTypes]~ Fields: DisplayName ~Group~
			Define: BW					CopyOf Boolean ~[Database FieldTypes]~ Fields: DisplayName ~Black&White~
			Define: Sepia				CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Sepia~
			Define: LookupLUT			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Lookup LUT~
			Define: ColorMatrix			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Color Matrix~
			Define: ServiceCategory		CopyOf CategoryCode	~[Database FieldTypes]~ Fields: DisplayName ~Service Category~
			Define: UnitOfMeasure		CopyOf UnitOfMeasure	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
		}

	Define:		PrintServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrintServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint PrintServicesPrimaryKey PRIMARY KEY(ID)~
			
		}

	Define:			PrintServices	Using DDDatabaseTableDef
		Fields:		TableName			PrintServices
					TableConstraints	PrintServicesTableConstraints(GetObjectReference)
					Fields				PrintServicesFields(GetObjectReference)

	Hang: PrintServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineOrderItemsServicesTable()
{
	Define:			OrderItemsServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define: OrderID				CopyOf OrderID			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~	
			Define: OrderItemID			CopyOf OrderItemID		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define: ProductID			CopyOf SelectableProductID		~[Database FieldTypes]~		
			Define:	ServicesID			CopyOf ServiceNumber	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~Order File ID~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Service Code~
			Define: Description			CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Description~
		}

	Define:		OrderItemsServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrderItemsServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint OrderItemsServicesPrimaryKey PRIMARY KEY(OrderID,OrderItemID,ServicesID)~

			Define: RefOrderItemstoOrdersID Using DDText
				Fields:	Text			~Constraint RefOrderItemstoOrdersID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~

		}
	Define:		OrderItemsServicesTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			OrderItemsServices	Using DDDatabaseTableDef
		Fields:		TableName			OrderItemsServices
					Indexes				OrderItemsServicesTableIndexes(GetObjectReference)
					TableConstraints	OrderItemsServicesTableConstraints(GetObjectReference)
					Fields				OrderItemsServicesFields(GetObjectReference)

	Hang: OrderItemsServices ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineNegativeServicesTable()
{
	Define:			NegativeServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ServiceNumber ~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	Label				CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Label~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Code~
			Define: Price				CopyOf Cost ~[Database FieldTypes]~ Fields: DisplayName ~Price~
			Define: ServicesGroup		CopyOf ServicesGroup ~[Database FieldTypes]~ Fields: DisplayName ~Group~
			Define: BW					CopyOf Boolean ~[Database FieldTypes]~ Fields: DisplayName ~Black&White~
			Define: Sepia				CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Sepia~
			Define: LookupLUT			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Lookup LUT~
			Define: ColorMatrix			CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Color Matrix~
			Define: ServiceCategory		CopyOf CategoryCode	~[Database FieldTypes]~ Fields: DisplayName ~Service Category~
			Define: UnitOfMeasure		CopyOf UnitOfMeasure	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
		}

	Define:		NegativeServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: NegativeServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint NegativeServicesPrimaryKey PRIMARY KEY(ID)~

		}

	Define:			NegativeServices	Using DDDatabaseTableDef
		Fields:		TableName			NegativeServices
					TableConstraints	NegativeServicesTableConstraints(GetObjectReference)
					Fields				NegativeServicesFields(GetObjectReference)

	Hang: NegativeServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineImagesServicesTable()
{
	Define:			ImagesServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define: OrderID				CopyOf OrderID			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~	
			Define: Roll				CopyOf Roll				~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define: Frame				CopyOf Frame			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~		
			Define:	ServicesID			CopyOf ServiceNumber	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~Order File ID~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Service Code~
			Define: Description			CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Description~
		}

	Define:		ImagesServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImagesServicesPrimaryKey Using DDText
				Fields:	Text			~Constraint ImagesServicesPrimaryKey PRIMARY KEY(OrderID,Roll,Frame,ServicesID)~

			Define: RefImagestoOrdersID Using DDText
				Fields:	Text			~Constraint RefImagestoOrdersID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~

		}
	Define:		ImagesServicesTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			ImagesServices	Using DDDatabaseTableDef
		Fields:		TableName			ImagesServices
					Indexes				ImagesServicesTableIndexes(GetObjectReference)
					TableConstraints	ImagesServicesTableConstraints(GetObjectReference)
					Fields				ImagesServicesFields(GetObjectReference)

	Hang: ImagesServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineCropServiceCodesTable()
{
	Define:			CropServiceCodesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ServiceNumber ~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	Label				CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Label~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Code~
			Define: Price				CopyOf Cost ~[Database FieldTypes]~ Fields: DisplayName ~Price~
			Define: ServicesGroup		CopyOf ServicesGroup ~[Database FieldTypes]~ Fields: DisplayName ~Group~
			Define: BW					CopyOf Boolean ~[Database FieldTypes]~ Fields: DisplayName ~Black&White~
			Define: Sepia				CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~Sepia~
			Define: ServiceCategory		CopyOf CategoryCode	~[Database FieldTypes]~ Fields: DisplayName ~Service Category~
			Define: UnitOfMeasure		CopyOf UnitOfMeasure	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
		}

	Define:		CropServiceCodesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CropServiceCodesPrimaryKey Using DDText
				Fields:	Text			~Constraint CropServiceCodesPrimaryKey PRIMARY KEY(ID)~
			
		}

	Define:			CropServiceCodes	Using DDDatabaseTableDef
		Fields:		TableName			CropServiceCodes
					TableConstraints	CropServiceCodesTableConstraints(GetObjectReference)
					Fields				CropServiceCodesFields(GetObjectReference)

	Hang: CropServiceCodes ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineCropServicesTable()
{
	Define:			CropServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define: OrderID				CopyOf OrderID			~[Database FieldTypes]~	Fields: Constraints ~NOT NULL~
			Define: Roll				CopyOf Roll				~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define: Frame				CopyOf Frame			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define: OrderItemID			CopyOf OrderItemID		~[Database FieldTypes]~
			Define: ProductID			CopyOf SelectableProductID		~[Database FieldTypes]~		
			Define: Crop				CopyOf ServiceNumber	~[Database FieldTypes]~ Fields: DisplayName ~Crop~ Constraints ~NOT NULL~
			Define:	ServicesID			CopyOf ServiceNumber	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~Order File ID~
			Define: Code				CopyOf Generic10Char ~[Database FieldTypes]~ Fields: DisplayName ~Service Code~
			Define: Description			CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Description~
		}

	Define:		CropServicesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CropServicesPrimKey Using DDText
				Fields:	Text			~Constraint CropServicesPrimaryKeys PRIMARY KEY(OrderID,OrderItemID,ServicesID)~

			Define: RefCroptoOrdersID Using DDText
				Fields:	Text			~Constraint RefCroptoOrdersID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~

		}
	Define:		CropServicesTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			CropServices	Using DDDatabaseTableDef
		Fields:		TableName			CropServices
					Indexes				CropServicesTableIndexes(GetObjectReference)
					TableConstraints	CropServicesTableConstraints(GetObjectReference)
					Fields				CropServicesFields(GetObjectReference)

	Hang: CropServices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineLogoTable()
{

	Define:	LogoTableToolTips USING DDSymbol Contains:
	{
		Define: FutureOnly		using DDText Fields: Text STR ( This field is reserved for future use )
		Define: lCode		using DDText Fields: Text STR ( This field is used to identify the logo.)
		Define: lLabel		using DDText Fields: Text STR ( This field is a text description of the logo being applied. )
		Define: lPosition	using DDText Fields: Text STR ( This field represents the position of the logo upon output. )
		Define: ImageOnly	using DDText Fields: Text STR ( This field is used for image logos only. )
		Define: TextOnly	using DDText Fields: Text STR ( This field is only used in conjunction with text logos. )
		Define: TextImage	using DDText Fields: Text STR ( This field applies to both text and image logos. )
	}	
	Hang:	LogoTableToolTips	~[STRINGS]~ ;

	Define:			LogoFields Using DDLong
		Contains:	InListOrder
		{
			Define: Code			CopyOf Generic10Char	~[Database FieldTypes]~	Fields: DisplayName	~Logo Code~	ColumnToolTipText Translate( LogoTableToolTips,lCode )
			Define:	Label			CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName	~Label~ ColumnToolTipText Translate( LogoTableToolTips,lLabel )
			Define: Position		CopyOf LogoPosition		~[Database FieldTypes]~ Fields: DisplayName	~Logo Position~ ColumnToolTipText Translate( LogoTableToolTips,lPosition )
			Define: XOffset			CopyOf NegativeDoubleValue ~[Database FieldTypes]~ Fields: DisplayName	~XOffset~ ColumnToolTipText Translate( LogoTableToolTips,TextImage )
			Define: YOffset			CopyOf NegativeDoubleValue ~[Database FieldTypes]~ Fields: DisplayName	~YOffset~ ColumnToolTipText Translate( LogoTableToolTips,TextImage )
			Define: Rotation		CopyOf Rotation			~[Database FieldTypes]~ Fields: DisplayName	~Rotate~ ColumnToolTipText Translate( LogoTableToolTips,ImageOnly )
			Define: LogoFile		CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName	~Logo File~ DisallowedChars ~~ ColumnToolTipText Translate( LogoTableToolTips,ImageOnly ) LangItem ~LogoFile~
			Define: Text			CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName	~Logo Text~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define: RotateText		CopyOf Rotation			~[Database FieldTypes]~ Fields: DisplayName	~Text Rotation~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define: Wordwrap		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Wordwrap~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define: Justification	CopyOf TextJustify		~[Database FieldTypes]~ Fields: DisplayName	~Text Justify~ ColumnToolTipText Translate( LogoTableToolTips,TextOnly )
			Define: TextAlignment	CopyOf TextAlignment	~[Database FieldTypes]~ Fields: DisplayName	~Text Alignment~ ColumnToolTipText Translate( LogoTableToolTips,TextOnly )
			Define: BoldText		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Bold Text~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define: ItalicText		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Italic Text~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define: CharacterSet	CopyOf CharacterSetCombo ~[Database FieldTypes]~ Fields: DisplayName	~Character Set~ ColumnToolTipText Translate( LogoTableToolTips,TextOnly )
			Define: AntiAliased		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Antialias~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define:	rLogo			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~rLogo~	Constraints ~Default 255~ ColumnToolTipText Translate( LogoTableToolTips,ImageOnly )
			Define:	gLogo			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~gLogo~	Constraints ~Default 255~ ColumnToolTipText Translate( LogoTableToolTips,ImageOnly )
			Define:	bLogo			CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~bLogo~	Constraints ~Default 255~ ColumnToolTipText Translate( LogoTableToolTips,ImageOnly )
			Define: Font			CopyOf FontCombo		~[Database FieldTypes]~ Fields: DisplayName	~Font~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define: Tsize			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: DisplayName	~Font Size~ ColumnToolTipText Translate( LogoTableToolTips,FutureOnly )
			Define: AutoRotate		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Auto Rotate w/Image~ ColumnToolTipText Translate( LogoTableToolTips,TextImage )
			Define: Scale			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName	~Scale~ ColumnToolTipText Translate( LogoTableToolTips,TextImage )
		}
	Define:		LogoTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: LogoPrimaryKey Using DDText
				Fields:	Text			~Constraint LogoPrimaryKey PRIMARY KEY(Code)~

		}
	Define:		LogoTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			Logo	Using DDDatabaseTableDef
		Fields:		TableName			Logo
					Indexes				LogoTableIndexes(GetObjectReference)
					TableConstraints	LogoTableConstraints(GetObjectReference)
					Fields				LogoFields(GetObjectReference)

	Hang: Logo ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineFilmDrivesTable()
{
	Define:			FilmDrivesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name			CopyOf Name				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define: FilmDriveVendor	CopyOf FilmDriveVendor	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	SerialPort		CopyOf SerialPort		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	ByteSize		CopyOf SerialByteSize	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	Baud			CopyOf SerialBaud		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	Parity			CopyOf SerialParity		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	StopBits		CopyOf SerialStopBits	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
		}

	Define:		FilmDrivesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FilmDrivesPrimaryKey Using DDText
				Fields:	Text			~Constraint FilmDrivesPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			FilmDrives			Using DDDatabaseTableDef
		Fields:		TableName			FilmDrives
					TableConstraints	FilmDrivesTableConstraints(GetObjectReference)
					Fields				FilmDrivesFields(GetObjectReference)

	Hang: FilmDrives ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineIDsTable()
{
	Define:	IDsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 				CopyOf Name				~[Database FieldTypes]~ Fields: DisplayName ~Name~			
			Define: ID					CopyOf Sequence			~[Database FieldTypes]~	Fields: DisplayName ~ID~ LangItem ~ID~ Constraints	~Default 0~	
			Define: MaxValue			CopyOf Sequence			~[Database FieldTypes]~	Fields: DisplayName ~Max~ LangItem ~Max~ Constraints	~Default 999999999~	
			Define: Format				CopyOf Name				~[Database FieldTypes]~	Fields: DisplayName ~Format~ LangItem ~Format~ Constraints	~Default '%09u'~	
		}

	Define:	IDsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: IDsPrimaryKey Using DDText
				Fields:	Text			~Constraint IDsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:	IDsTableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:	IDs			Using DDDatabaseTableDef
		Fields:		TableName			IDs
					Indexes				IDsTableIndexes(GetObjectReference)
					TableConstraints	IDsTableConstraints(GetObjectReference)
					Fields				IDsFields(GetObjectReference)

	Hang: IDs ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineJobQueueTable()
{
	Define:			JobQueueFields Using DDLong
		Contains:	InListOrder
		{
			Define:	QueueName			CopyOf QueueName		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	BatchID				CopyOf OrderID			~[Database FieldTypes]~	Fields: DisplayName ~Batch~	Constraints	~NOT NULL~ LangItem ~JobQueueBatchID~
			Define:	OrderID				CopyOf OrderID			~[Database FieldTypes]~	Fields: DisplayName ~Order~	Constraints	~NOT NULL~ LangItem ~JobQueueOrderID~
			Define:	OrderSequence		CopyOf Sequence			~[Database FieldTypes]~	Fields: DisplayName ~Order Seq~ LangItem ~JobQueueSequence~
			Define:	OrderItemID			CopyOf OrderItemID		~[Database FieldTypes]~	Fields: DisplayName ~Item~ LangItem ~JobQueueOrderItemID~
			Define:	OrderItemQty		CopyOf Quantity			~[Database FieldTypes]~	Fields: DisplayName ~Qty~ LangItem ~JobQueueQuantity~
			Define:	OrderItemSequence	CopyOf Sequence			~[Database FieldTypes]~	Fields: DisplayName ~Item Seq~ Constraints	~NOT NULL~ LangItem ~JobQueueItemSequence~
			Define:	PrintLength			CopyOf Length			~[Database FieldTypes]~	Fields: DisplayName	~Print Length~ Constraints ~Default 0~ LangItem ~JobQueuePrintLength~ 	
			Define: Priority			CopyOf Priority			~[Database FieldTypes]~
			Define:	SubmitDate			CopyOf SortableDateTime	~[Database FieldTypes]~	Fields: DisplayName ~Submit Date~ LangItem ~JobQueueSubmitDate~
			Define:	JobID				CopyOf JobID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	// remove later
			Define:	PrintStatus			CopyOf PrintStatus		~[Database FieldTypes]~				
		    Define:	Owner				CopyOf Name				~[Database FieldTypes]~	Fields: DisplayName	~Owner~ LangItem ~JobQueueOwner~ 			
			Define:	PrinterName			CopyOf PrinterName		~[Database FieldTypes]~	
			Define:	JobPath				CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~Job Path~ LangItem ~JobQueueJobPath~	
			Define: GroupID				CopyOf GroupID			~[Database FieldTypes]~	Fields: DisplayName ~Group ID~ LangItem ~JobQueueGroupID~ Constraints ~Default 0~	
			Define: GroupQty			CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Group Qty~ LangItem ~JobQueueGroupQty~ Constraints ~Default 0~
			Define: MultiStep			CopyOf Offset			~[Database FieldTypes]~	Fields: DisplayName ~Multi-Step~ LangItem ~JobQueueMultiStep~ Constraints ~Default 0~
		}

	Define:		JobQueueTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: JobQueuePrimaryKey Using DDText
				Fields:	Text			~Constraint JobQueuePrimaryKey PRIMARY KEY(JobID)~

			Define: RefJobQueueToPrinterName Using DDText
				Fields:	Text			~Constraint RefJobQueueToPrinterName FOREIGN KEY (PrinterName) REFERENCES Printers(PrinterName)~

			//Define: CascadeRefJobQueueToPrinterName Using DDCascade
			//	Fields:	Name			RefJobQueueToPrinterName
			//			Text			~Update Of ID Cascades~
			//			Updates			TRUE
			//			Deletes			TRUE
		}

	Define:		JobQueueTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: JobQueueQueueNameIndex Using DDText
				Fields:	Text	~Create Index JobQueueQueueNameIndex on JobQueue(QueueName)~

			Define: JobQueueBatchIDIndex Using DDText
				Fields:	Text	~Create Index JobQueueBatchIDIndex on JobQueue(BatchID)~

			Define: JobQueueOrderIDIndex Using DDText
				Fields:	Text	~Create Index JobQueueOrderIDIndex on JobQueue(OrderID)~

			Define: JobQueuePrintStatusIndex Using DDText
				Fields:	Text	~Create Index JobQueuePrintStatusIndex on JobQueue(PrintStatus)~

			Define: JobQueueCoveringIndex Using DDText
				Fields:	Text	~Create Index JobQueueCoveringIndex on JobQueue(QueueName,PrinterName,SubmitDate,Priority,PrintStatus,BatchID)~

		}

	Define:			JobQueue			Using DDDatabaseTableDef
		Fields:		TableName			JobQueue
					Indexes				JobQueueTableIndexes(GetObjectReference)
					TableConstraints	JobQueueTableConstraints(GetObjectReference)
					Fields				JobQueueFields(GetObjectReference)

	Hang: JobQueue ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineManualPaperFillTable()
{
	Define:			ManualPaperFillFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID				CopyOf OrderID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	OrderItemID			CopyOf OrderItemID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	QueueName			CopyOf QueueName		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	PrintWidth			CopyOf PaperWidth		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	PrintLength			CopyOf PaperAdvance		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	OrderItemQty		CopyOf Quantity			~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define: PaperFillQty		CopyOf Quantity			~[Database FieldTypes]~	Fields: Constraints ~Default 0~
		}

	Define:		ManualPaperFillTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ManualPaperFillPrimaryKey Using DDText
				Fields:	Text			~Constraint ManualPaperFillPrimaryKey PRIMARY KEY(OrderID,OrderItemID,QueueName)~
		}

	Define:		ManualPaperFillTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: ManualPaperFillQueueNameIndex Using DDText
				Fields:	Text	~Create Index ManualPaperFillQueueNameIndex on ManualPaperFill(QueueName)~
		}

	Define:			ManualPaperFill Using DDDatabaseTableDef
		Fields:		TableName			ManualPaperFill
					Indexes				ManualPaperFillTableIndexes(GetObjectReference)
					TableConstraints	ManualPaperFillTableConstraints(GetObjectReference)
					Fields				ManualPaperFillFields(GetObjectReference)

	Hang: ManualPaperFill ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineTemplateOverridesTable()
{
	Define:			TemplateOverridesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OverrideType		CopyOf Generic32Char	~[Database FieldTypes]~		Fields: DisplayName ~Override Type~
			Define:	DisplayName			CopyOf Generic255Char	~[Database FieldTypes]~		Fields: DisplayName ~Display Name~
			Define:	PrinterType			CopyOf DeviceType		~[Database FieldTypes]~		Fields: DisplayName ~Device Type~ Constraints ~NOT NULL~ LangSection ~~ LangItem ~~ ;						
			Define: Sequence			CopyOf Sequence			~[Database FieldTypes]~		Fields: Constraints ~Default 0 Not NULL~
		}

	Define:		TemplateOverridesConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: TemplateOverridesPrimaryKey Using DDText
				Fields:	Text			~Constraint TemplateOverridesPrimaryKey PRIMARY KEY(PrinterType,OverrideType)~
		}


	Define:			TemplateOverrides Using DDDatabaseTableDef
		Fields:		TableName			TemplateOverrides
					TableConstraints	TemplateOverridesConstraints(GetObjectReference)
					Fields				TemplateOverridesFields(GetObjectReference)

	Hang: TemplateOverrides ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineTemplateORSetupTable()
{
	Define:			TemplateORSetupFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OverrideName		CopyOf Generic255Char	~[Database FieldTypes]~		Fields: DisplayName ~Override Name~ Constraints	~NOT NULL~ 
			Define:	OverrideType		CopyOf Generic32Char	~[Database FieldTypes]~		Fields: Constraints	~NOT NULL~ DisplayName ~Override Type~
			Define:	Enabled				CopyOf Boolean			~[Database FieldTypes]~		Fields: DisplayName ~Enabled~		Constraints ~Default 0~
			Define: Sequence			CopyOf Sequence			~[Database FieldTypes]~		Fields: Constraints ~Default 0 Not NULL~
			Define: DeviceType			CopyOf DeviceType		~[Database FieldTypes]~		Fields: DisplayName ~Device Type~
		}

	Define:		TemplateORSetupConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: TemplateORSetupPrimaryKey Using DDText
				Fields:	Text			~Constraint TemplateORSetupPrimaryKey PRIMARY KEY(OverrideName,OverrideType,DeviceType)~
		}


	Define:			TemplateOverridesSetup Using DDDatabaseTableDef
		Fields:		TableName			TemplateOverridesSetup
					TableConstraints	TemplateORSetupConstraints(GetObjectReference)
					Fields				TemplateORSetupFields(GetObjectReference)

	Hang: TemplateOverridesSetup ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineTemplatesTable()
{
	Define:			TemplatesFields Using DDLong
		Contains:	InListOrder
		{
			Define: Category			CopyOf Category			~[Database FieldTypes]~		Fields:	DisplayName	~Category~ Constraints ~NOT NULL~
			Define:	TemplateName		CopyOf Generic255Char	~[Database FieldTypes]~		Fields: DisplayName ~Template Name~
			Define:	Description			CopyOf Description		~[Database FieldTypes]~		Fields: DisplayName ~Description~
			Define: Sequence			CopyOf Sequence			~[Database FieldTypes]~		Fields: Constraints ~Default 0~
			Define: DeviceType			CopyOf DeviceType		~[Database FieldTypes]~
		}

	Define:		TemplatesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: TemplatesPrimaryKey Using DDText
				Fields:	Text			~Constraint TemplatesPrimaryKey PRIMARY KEY(Category,TemplateName)~
		}


	Define:			Templates Using DDDatabaseTableDef
		Fields:		TableName			Templates
					TableConstraints	TemplatesTableConstraints(GetObjectReference)
					Fields				TemplatesFields(GetObjectReference)

	Hang: Templates ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineTemplateAttributesTable()
{
	Define:			BookProductAttributesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductID			CopyOf ProductID		~[Database FieldTypes]~ Fields: DisplayName ~Product ID~ Constraints	~NOT NULL~
			Define: Sequence			CopyOf Sequence			~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	Attribute			CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Attribute~
			Define:	Value				CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Value~
		}

	Define:		BookProductAttributesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BookProductAttributesPrimaryKey Using DDText
				Fields:	Text			~Constraint BookProductAttributesPrimaryKey PRIMARY KEY(ProductID,Attribute)~
		}


	Define:			BookProductAttributes Using DDDatabaseTableDef
		Fields:		TableName			BookProductAttributes
					TableConstraints	BookProductAttributesTableConstraints(GetObjectReference)
					Fields				BookProductAttributesFields(GetObjectReference)

	Hang: BookProductAttributes ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineBookAttributesTable()
{
	Define:			BookAttributesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID				CopyOf OrderID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	GroupID				CopyOf GroupID			~[Database FieldTypes]~	Fields: DisplayName ~Group ID~ LangItem ~GroupID~ Constraints ~Default 0~
			Define: Sequence			CopyOf Sequence			~[Database FieldTypes]~	Fields: Constraints ~Default 0~
			Define:	Attribute			CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Attribute~
			Define:	Value				CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Value~
		}

	Define:		BookAttributesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BookAttributesPrimaryKey Using DDText
				Fields:	Text			~Constraint BookAttributesPrimaryKey PRIMARY KEY(GroupID,OrderId,Sequence)~
		}


	Define:			BookAttributes Using DDDatabaseTableDef
		Fields:		TableName			BookAttributes
					TableConstraints	BookAttributesTableConstraints(GetObjectReference)
					Fields				BookAttributesFields(GetObjectReference)

	Hang: BookAttributes ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineBooksTable()
{
	Define:			BooksFields Using DDLong
		Contains:	InListOrder
		{
			Define:	GroupID				CopyOf GroupID			~[Database FieldTypes]~	Fields: DisplayName ~Group ID~ LangItem ~GroupID~ Constraints ~Default 0~
			Define:	TemplateName		CopyOf Generic255Char	~[Database FieldTypes]~	Fields: DisplayName ~Template Name~
			Define: Quantity			CopyOf Quantity			~[Database FieldTypes]~ Fields:	DisplayName	~Quantity~		Constraints ~Default 0~		
			Define:	OrderID				CopyOf OrderID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Banner				CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~Banner Text~
			Define: InkName				CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Ink~
			Define: DeviceType			CopyOf DeviceType		~[Database FieldTypes]~ Fields:	DisplayName	~Device Type~	
			Define:	Bleed				CopyOf Bleed			~[Database FieldTypes]~ Fields:	DisplayName	~Bleed~	
			Define:	SourceType			CopyOf BookSourceType	~[Database FieldTypes]~ Fields:	DisplayName	~Source Type~	
			Define:	SourceFile			CopyOf FilePath			~[Database FieldTypes]~ Fields:	DisplayName	~Source~	
			Define: DontRenderBleed		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Don't Render Bleed~ 
			Define: DontOverrideTemplateBleed 	CopyOf Boolean	~[Database FieldTypes]~	Fields: DisplayName ~Don't Override Template Bleed~
			Define:	MovieID				CopyOf ID				~[Database FieldTypes]~ Fields: DisplayName ~MovieID~
		}

	Define:		BooksTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BooksPrimaryKey Using DDText
				Fields:	Text			~Constraint BooksPrimaryKey PRIMARY KEY(OrderID,GroupID)~
		}


	Define:			Books Using DDDatabaseTableDef
		Fields:		TableName			Books
					TableConstraints	BooksTableConstraints(GetObjectReference)
					Fields				BooksFields(GetObjectReference)

	Hang: Books ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineBookDescriptionTable()
{
	Define:			BookDescriptionFields Using DDLong
		Contains:	InListOrder
		{
			Define:	GroupID					CopyOf GroupID			~[Database FieldTypes]~	Fields: DisplayName ~Group ID~ LangItem ~GroupID~ Constraints ~Default 0~
			Define:	OrderID					CopyOf OrderID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	ThemeName				CopyOf Generic64Char	~[Database FieldTypes]~	Fields: DisplayName ~Theme Name~ LangItem ~ThemeName~
			Define:	BookSize				CopyOf Generic32Char	~[Database FieldTypes]~	Fields: DisplayName ~Size~ LangItem ~ThemeSize~
			Define: DisplayType				CopyOf Generic32Char	~[Database FieldTypes]~	Fields: DisplayName ~Display Type~ LangItem ~DisplayType~
			Define: BindingType				CopyOf Generic32Char	~[Database FieldTypes]~	Fields: DisplayName ~Binding Type~ LangItem ~BindingType~
			Define: CoverPageCreated		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Created~ LangItem ~CoverPageCreated~ Constraints ~Default 0~
			Define:	BackgroundThemeName		CopyOf Generic64Char	~[Database FieldTypes]~	Fields: DisplayName ~Background Theme~ LangItem ~BackgroundTheme~
			Define: ProductID				CopyOf SelectableProductID ~[Database FieldTypes]~ Fields: DisplayName ~Product ID~
			Define: ProductSubType			CopyOf GroupID			~[Database FieldTypes]~ Fields: DisplayName ~Product SubType~ LangItem ~ProductSubType~
			Define: CalendarDuration		CopyOf GroupID			~[Database FieldTypes]~ Fields: DisplayName ~Calendar Duration~ LangItem ~CalendarDuration~
			Define: StartMonth				CopyOf GroupID			~[Database FieldTypes]~ Fields: DisplayName ~Start Month~ LangItem ~StartMonth~
			Define: StartYear				CopyOf GroupID			~[Database FieldTypes]~ Fields: DisplayName ~Start Year~ LangItem ~StartYear~
			Define: SpineSize				CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Spine Size~ Constraints ~Default NULL~	
			Define: SpineSizeGrowth			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Spine Size Growth~ Constraints ~Default NULL~			
			Define: PageMarginLeft			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Left~ Constraints ~Default NULL~
			Define: PageMarginTop			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Top~ Constraints ~Default NULL~
			Define: PageMarginRight			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Right~ Constraints ~Default NULL~
			Define: PageMarginBottom		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Bottom~ Constraints ~Default NULL~
			Define: CoverPageWidth			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Width~ Constraints ~Default NULL~
			Define: CoverPageHeight			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Height~ Constraints ~Default NULL~
			Define: CoverPageBindingType	CopyOf Generic32Char	~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Binding Type~ LangItem ~CoverPageBindingType~
			Define: CoverPageMarginLeft		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Left~ Constraints ~Default NULL~
			Define: CoverPageMarginTop		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Top~ Constraints ~Default NULL~
			Define: CoverPageMarginRight	CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Right~ Constraints ~Default NULL~
			Define: CoverPageMarginBottom	CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Bottom~ Constraints ~Default NULL~
			Define: ProductCode				CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Product Code~ AllowedChars ~|~
			Define:	MaxNumberOfPages		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Max Num Of Pages~ LangItem ~MaxNumberOfPages~
		}

	Define:		BookDescriptionTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BookDescriptionPrimaryKey Using DDText
				Fields:	Text			~Constraint BookDescriptionPrimaryKey PRIMARY KEY(OrderID,GroupID)~
		}


	Define:			BookDescription Using DDDatabaseTableDef
		Fields:		TableName			BookDescription
					TableConstraints	BookDescriptionTableConstraints(GetObjectReference)
					Fields				BookDescriptionFields(GetObjectReference)

	Hang: BookDescription ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineJobQueueSettingsTable()
{
	Define:			JobQueueSettingsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ComputerName		CopyOf ComputerName		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~			
			Define:	UserName			CopyOf User				~[Database FieldTypes]~	Fields:	DisplayName	~User~
			Define:	QueueName			CopyOf Boolean			~[Database FieldTypes]~	Fields: Constraints ~Default 1~	
			Define:	BatchID				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Batch~ Constraints ~Default 1~
			Define:	OrderID				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Order~ Constraints ~Default 1~
			Define:	OrderSequence		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Order Seq~	Constraints ~Default 1~		
			Define:	OrderItemID			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Item~	Constraints ~Default 1~	
			Define:	OrderItemQty		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Qty~	Constraints ~Default 1~
			Define:	OrderItemSequence	CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Item Seq~	Constraints ~Default 1~			
			Define:	PrintLength			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Print Length~	Constraints ~Default 1~
			Define:	PrintWidth			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Print Width~	Constraints ~Default 1~
			Define: Priority			CopyOf Boolean			~[Database FieldTypes]~	Fields: Constraints ~Default 1~
			Define:	SubmitDate			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Submit Date~	Constraints ~Default 1~			
			Define:	JobID				CopyOf Boolean			~[Database FieldTypes]~	Fields:	Constraints ~Default 1~
			Define:	PrintStatus			CopyOf Boolean			~[Database FieldTypes]~	Fields:	Constraints ~Default 1~			
		    Define:	Owner				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Owner~		Constraints ~Default 1~	
			Define:	PrinterName			CopyOf Boolean			~[Database FieldTypes]~	Fields: Constraints ~Default 1~
			Define:	JobPath				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Job Path~	Constraints ~Default 1~
		}

	Define:			JobQueueSettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: JobQueueSettingsPrimaryKey Using DDText
				Fields:	Text			~Constraint JobQueueSettingsPrimaryKey PRIMARY KEY(ComputerName,UserName)~
		}

	Define:			JobQueueSettings	Using DDDatabaseTableDef
		Fields:		TableName			JobQueueSettings
					Fields				JobQueueSettingsFields(GetObjectReference)
					TableConstraints	JobQueueSettingsTableConstraints(GetObjectReference)

	Hang: JobQueueSettings ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineModuleSettingsTable()
{
	Define:			ModuleSettingsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	UserName		CopyOf User				~[Database FieldTypes]~		Fields:	DisplayName	~User~
			Define: Category		CopyOf Category			~[Database FieldTypes]~		Fields:	DisplayName	~Type~ Constraints ~NOT NULL~
			Define: ColumnNames		CopyOf LongText			~[Database FieldTypes]~		Fields:	DisplayName	~Item~ Constraints ~NOT NULL~			
		}

	Define:			ModuleSettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ModuleSettingsPrimaryKey Using DDText
				Fields:	Text		~Constraint ModuleSettingsPrimaryKey PRIMARY KEY(UserName,Category)~
		}

	Define:			ModuleSettings		Using DDDatabaseTableDef
		Fields:		TableName			ModuleSettings
					Fields				ModuleSettingsFields(GetObjectReference)
					TableConstraints	ModuleSettingsTableConstraints(GetObjectReference)

	Hang: ModuleSettings ~[DATABASE TableDefinitions]~ InListOrder;
}

//	WHEN CHANGING THIS TABLE - DON'T FORGET TO FIX UP THE ADD PRINTER WIZARD !!!!
//	NOTE: WHEN CHANGING DATA IN THE PRINTER OR QUEUE DEFINITION TABLES...
//			YOU MUST CHANGE REDialog.cpp, RenderEngineDlg_2.txt, 
//			ScannerRenderEngine.cpp, CRenderEngineMain.txt, and FieldTypes.txt
//			and AlterExistingTables, Render.txt (page and printer setup)

VOID DefinePrintersTable()
{

	Define:	PrintersToolTips USING DDSymbol Contains:
	{
		Define: ForeignDevice		using DDText Fields: Text STR ( Check to Run Render Engine at program startup. )
		Define: StartPrinting		using DDText Fields: Text STR ( For future use.  Do not use! )
		Define: OnPrintComplete		using DDText Fields: Text STR ( Select a script to run when a print is completed. )
		Define: OnOrderComplete		using DDText Fields: Text STR ( Select a script to run when the order is complete. )
		Define: ControlFolder		using DDText Fields: Text STR ( Select a folder that will be used by the OnOrderComplete script. )
		Define: HFExePath			using DDText Fields: Text STR ( Location of the Hot Folder Application. )
		Define: LogFile				using DDText Fields: Text STR ( Location of the Log File. )
		Define: StartUpScript		using DDText Fields: Text STR ( Select the Start up script for this printer. )
		Define: ResponseFolder		using DDText Fields: Text STR ( Location of the Response Folder. )
		Define: ResponseScript		using DDText Fields: Text STR ( Select the Response script for this printer. )
		Define:	ShutDownScript		using DDText Fields: Text STR ( Select the Shutdown script for this printer. )
		Define:	Program				using DDText Fields: Text STR ( Select which instance of <$App.Name> the auto start applies to. Leave blank if all. You can also leave this blank if running only one instance of <$App.Name>. )
		Define: OrderPunch			using DDText Fields: Text STR ( Enable LFCRT Order Sort Punch. )
		Define: RollToRoll			using DDText Fields: Text STR ( Is this a Roll To Roll Printer? )
	}	

	Hang:	PrintersToolTips	~[STRINGS]~ ;


Define:			PrintersFields Using DDLong
		Contains:	InListOrder
		{

			Define:	PrinterName		CopyOf PrinterName			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~		
			Define: PrinterModel	CopyOf PrinterModel			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~				
			Define: ModelType		CopyOf ModelType			~[Database FieldTypes]~ 				
			Define:	Status			CopyOf PrinterStatus		~[Database FieldTypes]~				
			Define:	QueueName		CopyOf QueueNameCombo		~[Database FieldTypes]~	
			Define: RunAttended		CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Run Attended~			
			Define:	ComputerName	CopyOf ComputerName			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~			
			Define: ProgramPath		CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Path of <$App.Name>~ LangItem ~ProgramPath~ ColumnToolTipText Translate( PrintersToolTips,Program )					
			Define: EnableNoiseReduction	CopyOf Quantity		~[Database FieldTypes]~ Fields:	DisplayName	~Enable Noise Reduction~	Constraints ~Default 0~			
			Define: CreateSpotColorMaskFile	CopyOf Boolean		~[Database FieldTypes]~ Fields:	DisplayName	~Create Spot Color Mask File~	Constraints ~Default 1~			


			Define:	Resolution		CopyOf PrinterResolution	~[Database FieldTypes]~
			Define:	MaxPaperWidth	CopyOf PaperWidth			~[Database FieldTypes]~ Fields:	DisplayName	~Max Paper Width~				
			Define:	MaxPaperAdvance	CopyOf PaperAdvance			~[Database FieldTypes]~ Fields:	DisplayName	~Max Paper Advance~				
			Define: BackPrinter		CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Back Printer~			
			Define: OrderPunch		CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Order Punch~			
			Define: ForeignDevice	CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Auto Startup~ ColumnToolTipText Translate( PrintersToolTips,ForeignDevice )			
			Define: RollToRoll		CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Roll To Roll~ ColumnToolTipText Translate( PrintersToolTips,RollToRoll )	Constraints ~Default 0~		

			Define: OutputFileType	CopyOf SaveFileType			~[Database FieldTypes]~
			Define: OutputPath		CopyOf FilePath				~[Database FieldTypes]~ Fields:	DisplayName	~Output Path~
			Define: SpotColorMaskType	CopyOf SaveFileType			~[Database FieldTypes]~ Fields:	DisplayName	~Spot Color Type~
			Define: SpotColorMaskPath	CopyOf FilePath				~[Database FieldTypes]~ Fields:	DisplayName	~Spot Color Path~
			Define: StartUpScript	CopyOf FilePath				~[Database FieldTypes]~ Fields:	DisplayName	~Start Up Script~		ColumnToolTipText Translate( PrintersToolTips,StartUpScript )
			Define:	HFExePath		CopyOf FilePath				~[Database FieldTypes]~ Fields:	DisplayName	~Hot Folder App Path~	ColumnToolTipText Translate( PrintersToolTips,HFExePath )	
						
			Define: StartPrinting	CopyOf JobName				~[Database FieldTypes]~ Fields:	DisplayName	~Start Printing Script~	 ColumnToolTipText Translate( PrintersToolTips,StartPrinting )					
			Define: OnPrintComplete	CopyOf JobName				~[Database FieldTypes]~ Fields:	DisplayName	~Print Complete Script~	 ColumnToolTipText Translate( PrintersToolTips,OnPrintComplete )					
			Define: OnOrderComplete	CopyOf JobName				~[Database FieldTypes]~ Fields:	DisplayName	~Order Complete Script~	 ColumnToolTipText Translate( PrintersToolTips,OnOrderComplete )					
			Define: ControlFolder	CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Control Folder~ LangItem ~ControlFolder~ ColumnToolTipText Translate( PrintersToolTips,ControlFolder )	
			Define: ResponseScript	CopyOf FilePath				~[Database FieldTypes]~ Fields:	DisplayName	~Response Script~		ColumnToolTipText Translate( PrintersToolTips,ResponseScript )
			Define: ResponseFolder	CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Response Folder~ LangItem ~ResponseFolder~ ColumnToolTipText Translate( PrintersToolTips,ResponseFolder )	
			Define: ShutDownScript	CopyOf FilePath				~[Database FieldTypes]~ Fields:	DisplayName	~Shutdown Script~		ColumnToolTipText Translate( PrintersToolTips,StartUpScript )

			Define:	SCSIHostAdapter	CopyOf SCSIAddress			~[Database FieldTypes]~ Fields:	DisplayName	~SCSI Host Adapter~	
			Define:	SCSIHostBus		CopyOf SCSIAddress			~[Database FieldTypes]~ Fields:	DisplayName	~SCSI Host Bus~	
			Define:	SCSIID			CopyOf SCSIAddress			~[Database FieldTypes]~ Fields:	DisplayName	~SCSI ID~	
			Define:	SCSILUN			CopyOf SCSIAddress			~[Database FieldTypes]~ Fields:	DisplayName	~SCSI LUN~	
			Define:	PrinterBuffers	CopyOf SCSIAddress			~[Database FieldTypes]~ Fields:	DisplayName	~Printer Buffers~
			Define: LogFile			CopyOf LongText				~[Database FieldTypes]~ Fields:	DisplayName	~LogFile~				ColumnToolTipText Translate( PrintersToolTips,LogFile )
			Define: NetworkAddress	CopyOf NetworkAddress		~[Database FieldTypes]~ Fields: DisplayName ~Network Address~

			// USED FOR PRINTER BALANCE OVERRIDE
			Define:	Brt				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Brt~ Constraints ~Default 0~
			Define:	Red				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Red~ Constraints ~Default 0~
			Define:	Grn				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Grn~ Constraints ~Default 0~
			Define:	Blu				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Blu~ Constraints ~Default 0~
			Define:	Con				CopyOf ColorOffset	~[Database FieldTypes]~	Fields: DisplayName	~Con~ Constraints ~Default 0~
			Define:	Gam				CopyOf Gamma		~[Database FieldTypes]~	Fields: DisplayName	~Gam~ Constraints ~Default 1~
			Define:	Sat				CopyOf Saturation	~[Database FieldTypes]~	Fields: DisplayName	~Sat~ Constraints ~Default 0~

		}

	Define:		PrintersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrintersPrimaryKey Using DDText
				Fields:	Text			~Constraint PrintersPrimaryKey PRIMARY KEY(PrinterName)~
		}

	Define:			Printers			Using DDDatabaseTableDef
		Fields:		TableName			Printers
					TableConstraints	PrintersTableConstraints(GetObjectReference)
					Fields				PrintersFields(GetObjectReference)

	Hang: Printers ~[DATABASE TableDefinitions]~ InListOrder;
}


//	WHEN CHANGING THIS TABLE - DON'T FORGET TO FIX UP THE ADD PRINTER WIZARD !!!!
VOID DefinePrinterModelsTable()
{
	Define:			PrinterModelsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Model			CopyOf Name				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~		
			Define:	MaxPaperWidth	CopyOf PaperWidth		~[Database FieldTypes]~ Fields:	DisplayName	~Max Width~				
			Define:	MaxPaperAdvance	CopyOf PaperAdvance		~[Database FieldTypes]~ Fields:	DisplayName	~Max Advance~
			Define: HSpillOver		CopyOf OverSpill		~[Database FieldTypes]~ Fields:	DisplayName	~Horz Spillover~	
			Define: VSpillOver		CopyOf OverSpill		~[Database FieldTypes]~ Fields:	DisplayName	~Vert Spillover~					
		}

	Define:			PrinterModelsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrinterModelsPrimaryKey Using DDText
				Fields:	Text			~Constraint PrinterModelsPrimaryKey PRIMARY KEY(Model)~
		}

	Define:			PrinterModels		Using DDDatabaseTableDef
		Fields:		TableName			PrinterModels
					Fields				PrinterModelsFields(GetObjectReference)
					TableConstraints	PrinterModelsTableConstraints(GetObjectReference)

	Hang: PrinterModels ~[DATABASE TableDefinitions]~ InListOrder;
}


//	WHEN CHANGING THIS TABLE - DON'T FORGET TO FIX UP THE ADD PRINTER WIZARD !!!!
VOID DefinePrinterResTable()
{
	Define:			PrinterResFields Using DDLong
		Contains:	InListOrder
		{
			Define: PrinterModel	CopyOf PrinterModel			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define: PrinterName		CopyOf PrinterName			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~		
			Define: Sequence		CopyOf Sequence				~[Database FieldTypes]~	
			Define:	Resolution		CopyOf PrinterResolution	~[Database FieldTypes]~				
		}

	Define:		PrinterResTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrinterResPrimaryKey Using DDText
				Fields:	Text			~Constraint PrinterResPrimaryKey PRIMARY KEY(PrinterModel,PrinterName,Sequence)~

			Define: RefPrintersToPrinterName Using DDText
				Fields:	Text			~Constraint RefModelToPrinterModel FOREIGN KEY (PrinterModel) REFERENCES PrinterModels(Model)~
		}

	Define:			PrinterRes			Using DDDatabaseTableDef
		Fields:		TableName			PrinterRes
					TableConstraints	PrinterResTableConstraints(GetObjectReference)
					Fields				PrinterResFields(GetObjectReference)

	Hang: PrinterRes ~[DATABASE TableDefinitions]~ InListOrder;
}






if ( 0 )
{
	VOID DefineRenderEngineTable()
	{
		Define:			RenderEngineFields Using DDLong
			Contains:	InListOrder
			{
				Define:	Name			CopyOf RenderEngineName	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
				Define:	QueueName		CopyOf QueueName		~[Database FieldTypes]~	
				Define:	ComputerName	CopyOf ComputerName		~[Database FieldTypes]~	
				Define: AutoRun			CopyOf Boolean			~[Database FieldTypes]~ Fields:	DisplayName	~Auto Run~			
				Define: RunAttended		CopyOf Boolean			~[Database FieldTypes]~ Fields:	DisplayName	~Run Attended~			
				Define: PollInterval	CopyOf Interval			~[Database FieldTypes]~ Fields:	DisplayName	~Poll Interval~			
			}

		Define:			RenderEngineTableConstraints Using DDLong
			Contains:	InListOrder
			{
				Define: RenderEnginePrimaryKey Using DDText
					Fields:	Text			~Constraint RenderEnginePrimaryKey PRIMARY KEY(Name)~
			}

		Define:			RenderEngine		Using DDDatabaseTableDef
			Fields:		TableName			RenderEngine
						Fields				RenderEngineFields(GetObjectReference)
						TableConstraints	RenderEngineTableConstraints(GetObjectReference)

		Hang: RenderEngine ~[DATABASE TableDefinitions]~ InListOrder;
	}
}


//	WHEN CHANGING THIS TABLE - DON'T FORGET TO FIX UP THE ADD PRINTER WIZARD !!!!
//	NOTE: WHEN CHANGING DATA IN THE PRINTER OR QUEUE DEFINITION TABLES...
//			YOU MUST CHANGE REDialog.cpp, RenderEngineDlg_2.txt, Render.txt,
//			ScannerRenderEngine.cpp, CRenderEngineMain.txt, and FieldTypes.txt
//			AlterExistingTables.txt

VOID DefineQueueDefinitionTable()
{
	Define:	QueueDefinitionToolTips USING DDSymbol Contains:
	{
		Define: StartPrinting		using DDText Fields: Text STR ( Add a script to modify batch and page data at render time. )
		Define: OnPrintComplete		using DDText Fields: Text STR ( Select a script to run when a Print is complete. Use for printing to OEM printers. )
		Define: OnOrderComplete		using DDText Fields: Text STR ( Select a script to run when the order is complete. Use for printing to OEM printers. )
		Define: ControlFolder		using DDText Fields: Text STR ( Select a folder that will be used by the OnOrderComplete script when printing to OEM printers. )
		Define: ResponseFolder		using DDText Fields: Text STR ( Location of the Response Folder. )
		Define: QualityOR			using DDText Fields: Text STR ( The Compression quality to use if not explicity defined in the layout or job.  The range is 0-100.  A value of blank or zero is equivalent to 100%. )
		
		if ( RunningVersion( 4.2 ) )
		{
			Define: ResponseFolder	using DDText Fields: Text STR ( Location of the Response Folder. )
		}
	}	
	Hang:	QueueDefinitionToolTips	~[STRINGS]~ ;

	Define:			QueueDefinitionFields Using DDLong
		Contains:	InListOrder
		{
			Define:	QueueName		CopyOf QueueName			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~		
			Define: PrinterModel	CopyOf PrinterModel			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~		
			Define:	PaperType		CopyOf PaperType			~[Database FieldTypes]~	
			Define:	PaperSurface	CopyOf PaperSurface			~[Database FieldTypes]~	
			Define:	PaperOpacity	CopyOf PaperOpacity			~[Database FieldTypes]~
			Define:	ICCProfile		CopyOf ICCProfile			~[Database FieldTypes]~	
			Define: EmbedProfile	CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Embed Profile~			

			Define: PackageCut		CopyOf PackageCut			~[Database FieldTypes]~
			Define:	PaperWidth		CopyOf PaperWidth			~[Database FieldTypes]~
			Define:	PaperAdvance	CopyOf PaperAdvance			~[Database FieldTypes]~ Fields:	Constraints ~Default 0~
			Define:	Resolution		CopyOf PrinterResolution	~[Database FieldTypes]~
			Define: ReverseSeq		CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Reverse Sequence~		Constraints ~Default 0~		
			Define: BookCollation	CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Book Collation~		Constraints ~Default 0~		
		
			Define: FirstOrderSize		CopyOf Quantity			~[Database FieldTypes]~ Fields:	DisplayName	~First Order Size~		Constraints ~Default 0~		
			Define: MaximumOrderSize	CopyOf Quantity			~[Database FieldTypes]~ Fields:	DisplayName	~Max Order Size~		Constraints ~Default 0~		
			Define: OrderSizeTimeout	CopyOf TimeOffset		~[Database FieldTypes]~ Fields:	DisplayName	~Order Size Timeout~	Constraints ~Default 0~			

			Define: PaperFill		CopyOf PaperFill			~[Database FieldTypes]~ Fields:	DisplayName	~Paper Fill~
			Define: BreakOnNewImage	CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Image Break~			
			//			Define: BreakOnNewOrder	CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Order Break~
			Define: SpillOverType	CopyOf SpillOverType		~[Database FieldTypes]~
			Define:	SpillOverAmt	CopyOf SpillOverAmt			~[Database FieldTypes]~
			Define: Gamma			CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Gamma Table~ LangItem ~GammaTable~
			Define: PaperPack		CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Paper Pack~ LangItem ~PaperPack~
			Define: CalibrationLUT	CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Print Lut~ LangItem ~PrintLut~
			Define: OutputFileType	CopyOf SaveFileType			~[Database FieldTypes]~
			Define: OutputPath		CopyOf FilePath				~[Database FieldTypes]~ Fields:	DisplayName	~Output Path~
			Define: SpotColorMaskType	CopyOf SaveFileType		~[Database FieldTypes]~ Fields:	DisplayName	~Spot Color Type~
			Define: SpotColorMaskPath	CopyOf FilePath			~[Database FieldTypes]~ Fields:	DisplayName	~Spot Color Path~
			Define: NoiseReduction	CopyOf Quantity				~[Database FieldTypes]~ Fields:	DisplayName	~Noise Reduction~	Constraints ~Default 0~			

			Define:	Configuration	CopyOf PrinterConfigurationCombo ~[Database FieldTypes]~

			//JW Proposed addition for Job Queue Mgmt
			Define:	AvgProductLength CopyOf PaperWidth			~[Database FieldTypes]~ Fields:	DisplayName	~Avg Product Length~
			Define:	AvgPrintSpeed	 CopyOf Interval			~[Database FieldTypes]~ Fields:	DisplayName	~Avg Print Time~

			Define: StartPrinting	CopyOf JobName				~[Database FieldTypes]~ Fields:	DisplayName	~Start Printing Script~	 ColumnToolTipText Translate( QueueDefinitionToolTips,StartPrinting )					
			Define: OnPrintComplete	CopyOf JobName				~[Database FieldTypes]~ Fields:	DisplayName	~Print Complete Script~	 ColumnToolTipText Translate( QueueDefinitionToolTips,OnPrintComplete )					
			Define: OnOrderComplete	CopyOf JobName				~[Database FieldTypes]~ Fields:	DisplayName	~Order Complete Script~	ColumnToolTipText Translate( QueueDefinitionToolTips,OnOrderComplete )					
			Define: ControlFolder	CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Control Folder~ LangItem ~ControlFolder~ ColumnToolTipText Translate( QueueDefinitionToolTips,ControlFolder )	
			Define: ResponseFolder	CopyOf Path					~[Database FieldTypes]~ Fields:	DisplayName	~Response Folder~ LangItem ~ResponseFolder~ ColumnToolTipText Translate( QueueDefinitionToolTips,ResponseFolder )	

			Define: UseOverrides	CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Use Overrides~			
//			Define:	ChannelOR		CopyOf Channel				~[Database FieldTypes]~	Fields: DisplayName	~Channel Override~ Constraints ~Default 0~
			Define: QualityOR		CopyOf QualityOR			~[Database FieldTypes]~ Fields: ColumnToolTipText Translate( QueueDefinitionToolTips,QualityOR ) Constraints ~Default 0~
			Define:	DeltaRotation	CopyOf Rotation				~[Database FieldTypes]~	Fields: DisplayName ~Delta Rotation~
			Define:	DeltaSharpen	CopyOf Sharpen				~[Database FieldTypes]~ Fields: DisplayName	~Delta Sharpen~	Constraints	~Default 0~
			Define:	PaperSurfaceOR	CopyOf PaperSurface			~[Database FieldTypes]~	Fields: DisplayName	~Paper Surface Override~
			Define:	PaperWidthOR	CopyOf PaperWidth			~[Database FieldTypes]~	Fields: DisplayName	~Paper Width Override~
			Define: PrinterResizeOR	CopyOf Boolean				~[Database FieldTypes]~ Fields:	DisplayName	~Printer Resize Override~			
			Define:	ResolutionOR	CopyOf PrinterResolution	~[Database FieldTypes]~	Fields: DisplayName ~Resolution Override~

			// USED FOR PRINTER BALANCE OVERRIDE
			Define:	Brt				CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~Brt~ Constraints ~Default 0~
			Define:	Red				CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~Red~ Constraints ~Default 0~
			Define:	Grn				CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~Grn~ Constraints ~Default 0~
			Define:	Blu				CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~Blu~ Constraints ~Default 0~
			Define:	Con				CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~Con~ Constraints ~Default 0~
			Define:	Gam				CopyOf Gamma				~[Database FieldTypes]~	Fields: DisplayName	~Gam~ Constraints ~Default 1~
			Define:	Sat				CopyOf Saturation			~[Database FieldTypes]~	Fields: DisplayName	~Sat~ Constraints ~Default 0~

			// used for rendering intent of output side of output profile
			Define:	PrintingRenderingIntent	CopyOf RenderingIntent			~[Database FieldTypes]~ Fields: Constraints ~Default 0~	DisplayName	~Printing Rendering Intent~ LangSection	Fieldtypes LangItem ~PrintingRenderingIntent~
			// used for rendering intent of input side of output profile
			Define:	SoftProofRenderingIntent CopyOf RenderingIntent			~[Database FieldTypes]~	Fields: Constraints ~Default 0~ DisplayName ~Soft Proof Rendering Intent~ LangSection	Fieldtypes LangItem ~SoftProofRenderingIntent~

			Define: ForcePDFOutput	CopyOf ForceOutputType				~[Database FieldTypes]~ Fields:	 Constraints ~Default 0~
			Define: NeutralizeGrayscale	CopyOf Boolean			~[Database FieldTypes]~ Fields:	DisplayName	~Neutralize Grayscale~			
		}

	Define:			QueueDefinitionTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: QueueDefinitionPrimaryKey Using DDText
				Fields:	Text		~Constraint QueueDefinitionPrimaryKey PRIMARY KEY(QueueName)~
		}

	Define:			QueueDefinition			Using DDDatabaseTableDef
		Fields:		TableName			QueueDefinition
					Fields				QueueDefinitionFields(GetObjectReference)
					TableConstraints	QueueDefinitionTableConstraints(GetObjectReference)

	Hang: QueueDefinition ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineRemoteJobDirsTable()
{
	Define:	RemoteJobDirsToolTips USING DDSymbol Contains:
	{
		Define: Enabled				using DDText Fields: Text STR ( Directories are seached for jobs and images only if Enabled is checked )
	//	Define: AutoRun				using DDText Fields: Text STR ( If checked then searching will be begin at application startup.  Otherwise, you will have to manually start it by Right Clicking and selecting 'Watch Remote Queues' )
		Define: Computer			using DDText Fields: Text STR ( Only the Computer specified in this column will watch the directory for work )
		Define: Directory			using DDText Fields: Text STR ( This is the directory that will be searched by the selected Computer for work )
		Define: SearchCriteria		using DDText Fields: Text STR ( Only files matching this search criteria will be considered )
		Define: Priority			using DDText Fields: Text STR ( This is the priority the job will be assigned )
		Define: QueueStatus			using DDText Fields: Text STR ( When the job is moved to the print queue, it will have this initial status )
		Define: DefaultQueue		using DDText Fields: Text STR (  )
	//	Define: OpenOnRun			using DDText Fields: Text STR ( When the job is processed it will either be opened for viewing or put in the job queue )
		Define: AcceptImages		using DDText Fields: Text STR ( If checked the selected directory is being watched for images rather than jobs )
		Define: ProductID			using DDText Fields: Text STR ( If the selected directory is being watched for images, this is the Product that will be made with the image )
		Define: RequiredImages		using DDText Fields: Text STR ( If the selected directory is being watched for images, this is the number of images that will be consumed by the product )
		Define: DeleteAfterPrinting	using DDText Fields: Text STR ( If checked and the queue is watching for images, the image will be deleted after printing )
		Define: ICCProfile			using DDText Fields: Text STR ( If the queue is watching for images, and the image is not in the database, than this profile will be used as the input profile )
		Define: ErrorDirectory		using DDText Fields: Text STR ( If an error occurrs, the image or job will be moved to this directory )
		Define: CompleteDirectory	using DDText Fields: Text STR ( If processing is successful, the image or job will be moved to this directory )
	}	
	Hang:	RemoteJobDirsToolTips	~[STRINGS]~ ;

	Define:	RemoteJobDirsFields Using DDLong Contains: InListOrder
	{
		Define: Enabled				CopyOf Boolean			~[Database FieldTypes]~		Fields:	DisplayName	~Enabled~		ColumnToolTipText Translate( RemoteJobDirsToolTips,Enabled )				
	//	Define: AutoRun				CopyOf Boolean			~[Database FieldTypes]~		Fields:	DisplayName	~Auto Run~		ColumnToolTipText Translate( RemoteJobDirsToolTips,AutoRun )		
		Define: Computer			CopyOf ComputerName		~[Database FieldTypes]~		Fields:	DisplayName	~Computer~		Constraints ~NOT NULL~ ColumnToolTipText Translate( RemoteJobDirsToolTips,Computer )
		Define: Directory			CopyOf Path				~[Database FieldTypes]~		Fields:	DisplayName	~Directory~ LangItem ~Directory~ Constraints ~NOT NULL~ ColumnToolTipText Translate( RemoteJobDirsToolTips,Directory )
		Define: SearchCriteria		CopyOf SearchCriteria	~[Database FieldTypes]~		Fields:								ColumnToolTipText Translate( RemoteJobDirsToolTips,SearchCriteria )
		Define:	Priority			CopyOf Priority			~[Database FieldTypes]~		Fields:								ColumnToolTipText Translate( RemoteJobDirsToolTips,Priority )
		Define:	QueueStatus			CopyOf QueueStatus		~[Database FieldTypes]~		Fields: DisplayName ~Queue As~		ColumnToolTipText Translate( RemoteJobDirsToolTips,QueueStatus )						
	//	Define: DefaultQueue		CopyOf QueueName		~[Database FieldTypes]~		Fields:	DisplayName	~Queue~ LangItem ~Queue~ ColumnToolTipText Translate( RemoteJobDirsToolTips,DefaultQueue )
	//	Define: OpenOnRun			CopyOf Boolean			~[Database FieldTypes]~		Fields:	DisplayName	~Open On Run~	ColumnToolTipText Translate( RemoteJobDirsToolTips,OpenOnRun )			
		Define: AcceptImages		CopyOf Boolean			~[Database FieldTypes]~		Fields:	DisplayName	~Accept Images~	ColumnToolTipText Translate( RemoteJobDirsToolTips,AcceptImages )			
		Define: ProductID			CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	~Product ID~	ColumnToolTipText Translate( RemoteJobDirsToolTips,ProductID )
		Define: RequiredImages		CopyOf RequiredImages	~[Database FieldTypes]~		Fields:								ColumnToolTipText Translate( RemoteJobDirsToolTips,RequiredImages )
		Define: ICCProfile			CopyOf ICCProfile		~[Database FieldTypes]~		Fields: DisplayName ~Profile~		ColumnToolTipText Translate( RemoteJobDirsToolTips,ICCProfile )
		Define: DeleteAfterPrinting	CopyOf Boolean			~[Database FieldTypes]~		Fields:	DisplayName	~Delete After~	ColumnToolTipText Translate( RemoteJobDirsToolTips,DeleteAfterPrinting )			
	//	Define: ErrorDirectory		CopyOf Path				~[Database FieldTypes]~		Fields:	DisplayName	~Error Dir~ LangItem ~ErrorDir~ ColumnToolTipText Translate( RemoteJobDirsToolTips,ErrorDirectory )
	//	Define: CompleteDirectory	CopyOf Path				~[Database FieldTypes]~		Fields:	DisplayName	~Complete Dir~ LangItem ~CompleteDir~ ColumnToolTipText Translate( RemoteJobDirsToolTips,CompleteDirectory )
	}

	Define:			RemoteJobDirsTableConstraints Using DDLong
		Contains:	InListOrder
	{
			Define: RemoteJobDirsPrimaryKey Using DDText
				Fields:	Text		~Constraint RemoteJobDirsPrimaryKey PRIMARY KEY(Computer,Directory)~

			Define: RefRemoteJobDirsToProductID Using DDText
				Fields:	Text			~Constraint RefRemoteJobDirsToProductID FOREIGN KEY (ProductID) REFERENCES Products(ID)~

			//Define: CascadeRefRemoteJobDirsToProductID Using DDCascade
			//	Fields:	Name			RefRemoteJobDirsToProductID
			//			Text			~Update Of ID Cascades~
			//			Updates			TRUE
			//			Deletes			TRUE
	}

	Define: RemoteJobDirs Using DDDatabaseTableDef 
		Fields:	TableName			RemoteJobDirs
				Fields				RemoteJobDirsFields(GetObjectReference)
				TableConstraints	RemoteJobDirsTableConstraints(GetObjectReference)

	Hang: RemoteJobDirs ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineJobsTable()
{
	Define:			JobsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID				CopyOf ID				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	Fields:	DisplayName	~Enabled~
																								Definition	Integer			
			Define:	QueueStatus		CopyOf QueueStatus		~[Database FieldTypes]~	Fields: DisplayName ~Queue As~
																								Definition	Integer							
			Define:	SubmittedAt		CopyOf SortableDateTime	~[Database FieldTypes]~	Fields: DisplayName ~Submit Date~ LangItem ~SubmitDate~
			Define:	RunAt			CopyOf SortableDateTime	~[Database FieldTypes]~	Fields: DisplayName ~Run Date~ LangItem ~RunDate~
			Define: RepeatInterval	CopyOf TimeInterval		~[Database FieldTypes]~ Fields:	DisplayName	~Repeat Interval~	
			Define: Priority		CopyOf Priority			~[Database FieldTypes]~	Fields: Definition	Integer		
			Define:	Quantity		CopyOf Quantity			~[Database FieldTypes]~	Fields: DisplayName ~Qty~ LangItem ~Qty~			
			Define: OpenOnRun		CopyOf Boolean			~[Database FieldTypes]~	Fields:	DisplayName	~Open On Run~
																								Definition	Integer							
			Define: Path			CopyOf Path				~[Database FieldTypes]~	Fields:	DisplayName	~Path~ LangItem ~Path~
		}

	Define:			JobsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: JobsPrimaryKey Using DDText
				Fields:	Text		~Constraint JobsPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			Jobs		Using DDDatabaseTableDef
		Fields:		TableName			Jobs
					Fields				JobsFields(GetObjectReference)
					TableConstraints	JobsTableConstraints(GetObjectReference)

	Hang: Jobs ~[DATABASE LocalTableDefinitions]~ InListOrder;
}


VOID DefineLocalRetouchOrderTable()
{
	Define:			RetouchOrderFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~

		}

	Define:		RetouchOrderTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RetouchOrderPrimaryKey Using DDText
				Fields:	Text			~Constraint RetouchOrderPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
		}

	Define:			RetouchOrder		Using DDDatabaseTableDef
		Fields:		TableName			RetouchOrder
					TableConstraints	RetouchOrderTableConstraints(GetObjectReference)
					Fields				RetouchOrderFields(GetObjectReference)

	Hang: RetouchOrder ~[DATABASE LocalTableDefinitions]~ InListOrder;
}

VOID DefineLocalRawQueueTable()
{
	Define:			RawQueueFields Using DDLong
		Contains:	InListOrder
		{
			Define: Priority		CopyOf priority			~[Database FieldTypes]~	Fields: DisplayName ~Priority~ Constraints ~Default 50~
			Define:	SubmitDate		CopyOf SortableDateTime	~[Database FieldTypes]~	Fields: DisplayName ~Submit Date~ LangItem ~SubmitDate~ Constraints ~NOT NULL~ DisplayWidth 20						
			Define:	OrderID			CopyOf OrderID			~[Database FieldTypes]~	Fields: DisplayName	~OrderID~
			Define:	Roll			CopyOf Roll				~[Database FieldTypes]~	Fields: DisplayName	~Roll~				
			Define:	Frame			CopyOf Frame			~[Database FieldTypes]~	Fields: DisplayName	~Frame~ 				
			Define:	FileType		CopyOf SaveFileTypeText	~[Database FieldTypes]~ Fields: DisplayName	~File Type~ Constraints ~Default 1~
			Define:	WhiteBalance	CopyOf DCWhiteBalType	~[Database FieldTypes]~	Fields: DisplayName ~White Balance~ Constraints ~Default 'AS_SHOT'~
			Define: Exposure		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Exposure~ Constraints ~Default 0.0~	
			Define:	Path			CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName	~Raw Image Path~ LangItem ~RawImagePath~
			Define:	OutputPath		CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName	~Output Image Path~ LangItem ~OutputImagePath~
			Define:	JPEGQuality		CopyOf JPEGQuality		~[Database FieldTypes]~ Fields: DisplayName	~JPG Quality~	Constraints ~Default 100~		
		}

	Define:		RawQueueTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RawQueuePrimaryKey Using DDText
				Fields:	Text			~Constraint RawQueuePrimaryKey PRIMARY KEY(SubmitDate)~
		}

	Define:			RawQueue			Using DDDatabaseTableDef
		Fields:		TableName			RawQueue
					TableConstraints	RawQueueTableConstraints(GetObjectReference)
					Fields				RawQueueFields(GetObjectReference)

	Hang: RawQueue ~[DATABASE LocalTableDefinitions]~ InListOrder;
}

VOID DefineLocalWorkstationSettingsTable()
{
	Define:			WorkstationSettingsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Computer		CopyOf ComputerName	~[Database FieldTypes]~	
			Define: Category		CopyOf Category		~[Database FieldTypes]~		Fields:	DisplayName	~Type~ Constraints ~NOT NULL~
			Define: Item			CopyOf SettingsItem	~[Database FieldTypes]~		Fields:	DisplayName	~Item~ Constraints ~NOT NULL~
			Define: SettingsText	CopyOf SettingsText	~[Database FieldTypes]~		Fields:	DisplayName	~Setting~
			Define: Enabled			CopyOf Boolean		~[Database FieldTypes]~		Fields:	DisplayName	~Enabled~			
		}

	Define:			WorkstationSettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: WorkstationSettingsPrimaryKey Using DDText
				Fields:	Text		~Constraint WorkstationSettingsPrimaryKey PRIMARY KEY(Computer,Category,Item)~
		}

	Define:			WorkstationSettings	Using DDDatabaseTableDef
		Fields:		TableName			WorkstationSettings
					Fields				WorkstationSettingsFields(GetObjectReference)
					TableConstraints	WorkstationSettingsTableConstraints(GetObjectReference)

	Hang: WorkstationSettings ~[DATABASE LocalTableDefinitions]~ InListOrder;
}

VOID DefineWorkstationSettingsTable()
{
	Define:	WorkstationSettingsToolTips USING DDSymbol Contains:
	{
			Define:	Program				using DDText Fields: Text STR ( Select which instance of <$App.Name> the setting applies to. Leave blank if all. You can leave this blank if running only one instance of <$App.Name>. )
	}	
	Hang:	WorkstationSettingsToolTips	~[STRINGS]~ ;

	Define:			WorkstationSettingsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Computer		CopyOf ComputerName	~[Database FieldTypes]~	
			Define: Category		CopyOf Category		~[Database FieldTypes]~		Fields:	DisplayName	~Type~ Constraints ~NOT NULL~
			Define: Item			CopyOf SettingsItem	~[Database FieldTypes]~		Fields:	DisplayName	~Item~ Constraints ~NOT NULL~
			Define: SettingsText	CopyOf SettingsText	~[Database FieldTypes]~		Fields:	DisplayName	~Setting~
			Define: Enabled			CopyOf Boolean		~[Database FieldTypes]~		Fields:	DisplayName	~Enabled~			
		}

	Define:			WorkstationSettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: WorkstationSettingsPrimaryKey Using DDText
				Fields:	Text		~Constraint WorkstationSettingsPrimaryKey PRIMARY KEY(Computer,Category,Item)~
		}

	Define:			WorkstationSettings	Using DDDatabaseTableDef
		Fields:		TableName			WorkstationSettings
					Fields				WorkstationSettingsFields(GetObjectReference)
					TableConstraints	WorkstationSettingsTableConstraints(GetObjectReference)

	Hang: WorkstationSettings ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineApplicationSettingsTable()
{
	Define:	ApplicationSettingsToolTips USING DDSymbol Contains:
	{
			Define:	Program				using DDText Fields: Text STR ( Select which instance of <$App.Name> the setting applies to. )
	}	
	Hang:	ApplicationSettingsToolTips	~[STRINGS]~ ;

	Define:			ApplicationSettingsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ComputerName	CopyOf ComputerName ~[Database FieldTypes]~	Fields: Constraints ~NOT NULL~			
			Define: ProgramPath		CopyOf Path			~[Database FieldTypes]~	Fields:	DisplayName	~Path of <$App.Name>~ LangItem ~ProgramPath~ ColumnToolTipText Translate( ApplicationSettingsToolTips,Program )					
			Define: Category		CopyOf Category		~[Database FieldTypes]~	Fields:	DisplayName	~Type~ Constraints ~NOT NULL~
			Define: Item			CopyOf SettingsItem	~[Database FieldTypes]~	Fields:	DisplayName	~Item~ Constraints ~NOT NULL~
			Define: SettingsText	CopyOf SettingsText	~[Database FieldTypes]~	Fields:	DisplayName	~Setting~
			Define: Enabled			CopyOf Boolean		~[Database FieldTypes]~	Fields:	DisplayName	~Enabled~			
		}

	Define:			ApplicationSettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ApplicationSettingsPrimaryKey Using DDText
				Fields:	Text		~Constraint ApplicationSettingsPrimaryKey PRIMARY KEY(ComputerName,ProgramPath,Category,Item)~
		}

	Define:			ApplicationSettings	Using DDDatabaseTableDef
		Fields:		TableName			ApplicationSettings
					Fields				ApplicationSettingsFields(GetObjectReference)
					TableConstraints	ApplicationSettingsTableConstraints(GetObjectReference)

	Hang: ApplicationSettings ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineSystemSettingsTable()
{
	Define:			SystemSettingsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Category		CopyOf Category		~[Database FieldTypes]~		Fields:	DisplayName	~Type~ Constraints ~NOT NULL~
			Define: Item			CopyOf SettingsItem	~[Database FieldTypes]~		Fields:	DisplayName	~Item~ Constraints ~NOT NULL~
			Define: SettingsText	CopyOf SettingsText	~[Database FieldTypes]~		Fields:	DisplayName	~Setting~
			Define: Enabled			CopyOf Boolean		~[Database FieldTypes]~		Fields:	DisplayName	~Enabled~			
		}

	Define:			SystemSettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: SystemSettingsPrimaryKey Using DDText
				Fields:	Text		~Constraint SystemSettingsPrimaryKey PRIMARY KEY(Category,Item)~
		}

	Define:			SystemSettings		Using DDDatabaseTableDef
		Fields:		TableName			SystemSettings
					Fields				SystemSettingsFields(GetObjectReference)
					TableConstraints	SystemSettingsTableConstraints(GetObjectReference)

	Hang: SystemSettings ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineSettingsTable()
{
	Define:			SettingsFields Using DDLong
		Contains:	InListOrder
		{
		//	Define:	Application		CopyOf Application		~[Database FieldTypes]~		Fields:	DisplayName	~Application~
			Define:	UserName		CopyOf User				~[Database FieldTypes]~		Fields:	DisplayName	~User~
			Define: Category		CopyOf Category			~[Database FieldTypes]~		Fields:	DisplayName	~Type~ Constraints ~NOT NULL~
			Define: Item			CopyOf SettingsItem		~[Database FieldTypes]~		Fields:	DisplayName	~Item~ Constraints ~NOT NULL~
			Define: SettingsText	CopyOf SettingsText		~[Database FieldTypes]~		Fields:	DisplayName	~Setting~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~		Fields:	DisplayName	~Enabled~			
		}

	Define:			SettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: SettingsPrimaryKey Using DDText
				Fields:	Text		~Constraint SettingsPrimaryKey PRIMARY KEY(UserName,Category,Item)~
		}

	Define:			Settings			Using DDDatabaseTableDef
		Fields:		TableName			Settings
					Fields				SettingsFields(GetObjectReference)
					TableConstraints	SettingsTableConstraints(GetObjectReference)

	Hang: Settings ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineQueryTable()
{
	Define:			QueryFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name			CopyOf QueryName		~[Database FieldTypes]~	 Fields: DisplayName ~Name~ DisplayWidth ~30~
			Define:	Sequence		CopyOf Sequence			~[Database FieldTypes]~ 
			Define:	Type			CopyOf QueryType		~[Database FieldTypes]~	
			Define:	Query			CopyOf QueryText		~[Database FieldTypes]~  Fields: DisplayName ~Query~ DisplayWidth ~70~
																	ColumnToolTipText STR ( Your query goes here.  You can use <$@con.SearchCriteraData[FieldName]> to pick up values from above. Replace FieldName with database field name. )
		}

	Define:			QueryTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: QueryPrimaryKey Using DDText
				Fields:	Text		~Constraint QueryPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			Query			Using DDDatabaseTableDef
		Fields:		TableName			Query
					Fields				QueryFields(GetObjectReference)
					TableConstraints	QueryTableConstraints(GetObjectReference)

	Hang: Query ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineSortsTable()
{
	Define:			SortsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name			CopyOf SortName			~[Database FieldTypes]~	 Fields: DisplayName ~Name~ DisplayWidth ~30~
			Define:	Sequence		CopyOf Sequence			~[Database FieldTypes]~ 
			Define:	Type			CopyOf SortOnTable		~[Database FieldTypes]~	
			Define:	Sort			CopyOf QueryText		~[Database FieldTypes]~  Fields: DisplayName ~Sort Order~ DisplayWidth ~30~
			Define: Restriction		CopyOf QueryText		~[Database FieldTypes]~  Fields: DisplayName ~Restriction~ DisplayWidth ~30~	
		}

	Define:			SortsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: SortsPrimaryKey Using DDText
				Fields:	Text		~Constraint SortsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			Sorts			Using DDDatabaseTableDef
		Fields:		TableName			Sorts
					Fields				SortsFields(GetObjectReference)
					TableConstraints	SortsTableConstraints(GetObjectReference)

	Hang: Sorts ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineTasksTable()
{
	Define:			TasksFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name			CopyOf TaskName			~[Database FieldTypes]~	 Fields: DisplayName ~Task~ Constraints ~NOT NULL~
			Define:	Description		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description~
			Define:	Purpose			CopyOf Category			~[Database FieldTypes]~	 Fields: DisplayName ~Purpose~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Enabled~						
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Type			CopyOf TasksType		~[Database FieldTypes]~	 Fields: DisplayName ~Type~
			Define:	Process			CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Process~
			Define: HelpAction		CopyOf ProcessLongText	~[Database FieldTypes]~  Fields: DisplayName ~Help~
		}

	Define:			TasksTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: TasksPrimaryKey Using DDText
				Fields:	Text		~Constraint TasksPrimaryKey PRIMARY KEY(Name)~
		}

	Define:		TasksTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: TasksPurposeIndex Using DDText
				Fields:	Text	~Create Index TasksPurposeIndex on Tasks(Purpose)~
		}

	Define:			Tasks			Using DDDatabaseTableDef
		Fields:		TableName			Tasks
					Indexes				TasksTableIndexes(GetObjectReference)
					Fields				TasksFields(GetObjectReference)
					TableConstraints	TasksTableConstraints(GetObjectReference)

	Hang: Tasks ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineUserTasksTable()
{
	Define:			UserTasksFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name			CopyOf UserTaskName		~[Database FieldTypes]~	 Fields: DisplayName ~Task~ Constraints	~NOT NULL~	
			Define:	UserName		CopyOf User				~[Database FieldTypes]~  Fields: DisplayName ~User~ Constraints	~NOT NULL~	
			Define:	Function		CopyOf QueryName		~[Database FieldTypes]~  Fields: DisplayName ~Function~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Enabled~						
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Category		CopyOf UserTaskCategory	~[Database FieldTypes]~	 Fields: Constraints ~NOT NULL~	
			Define:	Sequence		CopyOf Sequence			~[Database FieldTypes]~	 Fields: DisplayName ~Sequence~
		}

	Define:			UserTasksTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: UserTasksPrimaryKey Using DDText
				Fields:	Text		~Constraint UserTasksPrimaryKey PRIMARY KEY(Name,UserName,Category)~
		}

	Define:			UserTasks			Using DDDatabaseTableDef
		Fields:		TableName			UserTasks
					Fields				UserTasksFields(GetObjectReference)
					TableConstraints	UserTasksTableConstraints(GetObjectReference)

	Hang: UserTasks ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefinePLSTasksTable()
{
	Define:			PLSTasksFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name			CopyOf TaskName			~[Database FieldTypes]~	 Fields: DisplayName ~Task~ Constraints ~NOT NULL~
			Define:	Description		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description~
			Define:	Purpose			CopyOf Category			~[Database FieldTypes]~	 Fields: DisplayName ~Purpose~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Enabled~						
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Type			CopyOf TasksType		~[Database FieldTypes]~	 Fields: DisplayName ~Type~
			Define:	Process			CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Process~
			Define: HelpAction		CopyOf ProcessLongText	~[Database FieldTypes]~  Fields: DisplayName ~Help~
		}

	Define:			PLSTasksTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PLSTasksPrimaryKey Using DDText
				Fields:	Text		~Constraint PLSTasksPrimaryKey PRIMARY KEY(Name)~
		}

	Define:		PLSTasksTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: PLSTasksPurposeIndex Using DDText
				Fields:	Text	~Create Index PLSTasksPurposeIndex on PLSTasks(Purpose)~
		}

	Define:			PLSTasks			Using DDDatabaseTableDef
		Fields:		TableName			PLSTasks
					Indexes				PLSTasksTableIndexes(GetObjectReference)
					Fields				PLSTasksFields(GetObjectReference)
					TableConstraints	PLSTasksTableConstraints(GetObjectReference)

	Hang: PLSTasks ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefinePLSUserTasksTable()
{
	Define:			PLSUserTasksFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name			CopyOf UserTaskName		~[Database FieldTypes]~	 Fields: DisplayName ~Task~ Constraints	~NOT NULL~	
			Define:	UserName		CopyOf User				~[Database FieldTypes]~  Fields: DisplayName ~User~ Constraints	~NOT NULL~	
			Define:	Function		CopyOf QueryName		~[Database FieldTypes]~  Fields: DisplayName ~Function~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Enabled~						
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Category		CopyOf UserTaskCategory	~[Database FieldTypes]~	 Fields: Constraints ~NOT NULL~	
			Define:	Sequence		CopyOf Sequence			~[Database FieldTypes]~	 Fields: DisplayName ~Sequence~
		}

	Define:			PLSUserTasksTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PLSUserTasksPrimaryKey Using DDText
				Fields:	Text		~Constraint PLSUserTasksPrimaryKey PRIMARY KEY(Name,UserName,Category)~
		}

	Define:			PLSUserTasks		Using DDDatabaseTableDef
		Fields:		TableName			PLSUserTasks
					Fields				PLSUserTasksFields(GetObjectReference)
					TableConstraints	PLSUserTasksTableConstraints(GetObjectReference)

	Hang: PLSUserTasks ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineRImageMacrosTable()
{
	Define:			RImageMacrosFields Using DDLong
		Contains:	InListOrder
		{

			Define:	Category		CopyOf Name				~[Database FieldTypes]~	 Fields: DisplayName ~Category~ Constraints ~NOT NULL~ LangItem ~Category~
			Define:	Name			CopyOf MacroName		~[Database FieldTypes]~	 Fields: DisplayName ~Name~ Constraints ~NOT NULL~
			Define:	Description		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Enabled~
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Activate		CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Activate~						
			Define:	Path			CopyOf Path				~[Database FieldTypes]~	 Fields: DisplayName ~Defined In~ LangItem ~DefinedIn~
			Define:	Definition		CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Definition~
		}

	Define:			RImageMacrosTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImageMacrosPrimaryKey Using DDText
				Fields:	Text			~Constraint RImageMacrosPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			RImageMacros		Using DDDatabaseTableDef
		Fields:		TableName			RImageMacros
					Fields				RImageMacrosFields(GetObjectReference)
					TableConstraints	RImageMacrosTableConstraints(GetObjectReference)

	Hang: RImageMacros ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineMacroCategoriesTable()
{
	Define:			MacroCategoriesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Category		CopyOf Name				~[Database FieldTypes]~	 Fields: DisplayName ~Category~ Constraints ~NOT NULL~ LangItem ~Category~
			Define:	Sequence		CopyOf LongValue		~[Database FieldTypes]~  Fields: DisplayName ~Sequence~
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	DescriptionFile CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description File~
			Define:	DescriptionTag	CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description Tag~
			Define:	DescriptionSubTag	CopyOf LongText		~[Database FieldTypes]~  Fields: DisplayName ~Description Sub Tag~
			Define:	IsNodeCategory		CopyOf Boolean		~[Database FieldTypes]~  Fields: DisplayName ~Node Category~
		}

	Define:			MacroCategoriesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: MacroCategoriesPrimaryKey Using DDText
				Fields:	Text			~Constraint MacroCategoriesPrimaryKey PRIMARY KEY(Category)~
		}

	Define:			MacroCategories				Using DDDatabaseTableDef
		Fields:		TableName			MacroCategories
					Fields				MacroCategoriesFields(GetObjectReference)
					TableConstraints	MacroCategoriesTableConstraints(GetObjectReference)

	Hang: MacroCategories ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineMacroItemsTable()
{
	Define:			MacroItemsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Category			CopyOf Name				~[Database FieldTypes]~	 Fields: DisplayName ~Category~ Constraints ~NOT NULL~ LangItem ~Category~
			Define:	MacroItemName		CopyOf MacroName		~[Database FieldTypes]~	 Fields: DisplayName ~Macro Item Name~ Constraints ~NOT NULL~ LangItem ~MacroItemName~
			Define:	MacroName			CopyOf MacroName		~[Database FieldTypes]~	 Fields: DisplayName ~Name~ Constraints ~NOT NULL~
			Define:	Sequence			CopyOf LongValue		~[Database FieldTypes]~  Fields: DisplayName ~Sequence~
			Define: UserDefined			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	DescriptionFile		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description File~
			Define:	DescriptionTag		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description Tag~
			Define:	DescriptionSubTag	CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description Sub Tag~
			Define:	HelpDescriptionFile CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Help Description File~
			Define:	HelpDescriptionTag	CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Help Description Tag~
			Define:	HelpDescriptionSubTag	CopyOf LongText		~[Database FieldTypes]~  Fields: DisplayName ~Help Description Sub Tag~
			Define: RefersToDataTable	CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Refers to Data Table~ Constraints ~Default 0~
			Define:	DataTable			CopyOf TableName		~[Database FieldTypes]~  Fields: DisplayName ~Table Name~
			Define:	FieldName			CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~FieldName~
		}

	Define:			MacroItemsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: MacroItemsPrimaryKey Using DDText
				Fields:	Text			~Constraint MacroItemsPrimaryKey PRIMARY KEY(Category,MacroItemName)~
		}

	Define:			MacroItems			Using DDDatabaseTableDef
		Fields:		TableName			MacroItems
					Fields				MacroItemsFields(GetObjectReference)
					TableConstraints	MacroItemsTableConstraints(GetObjectReference)

	Hang: MacroItems ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineMacrosTable()
{
	Define:			MacrosFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Category		CopyOf Name				~[Database FieldTypes]~	 Fields: DisplayName ~Category~ Constraints ~NOT NULL~ LangItem ~Category~
			Define:	Name			CopyOf MacroName		~[Database FieldTypes]~	 Fields: DisplayName ~Name~ Constraints ~NOT NULL~
			Define:	Description		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description~
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Enabled~
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Activate		CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Activate~						
			Define:	Path			CopyOf Path				~[Database FieldTypes]~	 Fields: DisplayName ~Defined In~ LangItem ~DefinedIn~
			Define:	Definition		CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Definition~
		}

	Define:			MacrosTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: MacrosPrimaryKey Using DDText
				Fields:	Text			~Constraint MacrosPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			Macros				Using DDDatabaseTableDef
		Fields:		TableName			Macros
					Fields				MacrosFields(GetObjectReference)
					TableConstraints	MacrosTableConstraints(GetObjectReference)

	Hang: Macros ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineCompositeMacrosTable()
{
	Define:			CompositeMacrosFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Category		CopyOf Name				~[Database FieldTypes]~	 Fields: DisplayName ~Category~ LangItem ~Category~
			Define:	Name			CopyOf MacroName		~[Database FieldTypes]~	 Fields: DisplayName ~Name~ Constraints ~NOT NULL~
			Define:	Description		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Description~
			Define:	MacroType		CopyOf MacroType		~[Database FieldTypes]~	 Fields: Constraints ~NOT NULL~ 	
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Enabled~
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Activate		CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Activate~						
//			Define:	Path			CopyOf Path				~[Database FieldTypes]~	 Fields: DisplayName ~Defined In~ LangItem ~DefinedIn~
		}

	Define:			CompositeMacrosTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CompositeMacrosPrimaryKey Using DDText
				Fields:	Text			~Constraint CompositeMacrosPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			CompositeMacros		Using DDDatabaseTableDef
		Fields:		TableName			CompositeMacros
					Fields				CompositeMacrosFields(GetObjectReference)
					TableConstraints	CompositeMacrosTableConstraints(GetObjectReference)

	Hang: CompositeMacros ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefinePrimatteCalibrationsTable()
{
	Define:	PrimatteCalibrationsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name		CopyOf Name				~[Database FieldTypes]~		Fields: DisplayName ~Name~ 
			Define:	CustomerID	CopyOf CustomerID		~[Database FieldTypes]~		Fields: DisplayName ~CustomerID~
			Define:	OrderID		CopyOf OrderID			~[Database FieldTypes]~		Fields: DisplayName ~OrderID~
			Define:	KeyData		CopyOf PrimatteKeyData	~[Database FieldTypes]~		Fields: DisplayName ~Data~ Constraints ~NOT NULL~	
		}

	Define:	PrimatteCalibrationsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrimatteCalibrationsPrimaryKey Using DDText
				Fields:	Text			~Constraint PrimatteCalibrationsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:	PrimatteCalibrations		Using DDDatabaseTableDef
		Fields:		TableName			PrimatteCalibrations
					Fields				PrimatteCalibrationsFields(GetObjectReference)
					TableConstraints	PrimatteCalibrationsTableConstraints(GetObjectReference)

	Hang: PrimatteCalibrations ~[DATABASE TableDefinitions]~ InListOrder;
}
	

VOID DefineFileLocationTable()
{
	Define:	FileLocationToolTips USING DDSymbol Contains:
	{
		Define: ComputerName		using DDText Fields: Text STR ( Check for a local copy of the file only on this computer )
		Define: FromPath			using DDText Fields: Text STR ( File to check to see if there is a local copy available )
		Define: ToPath				using DDText Fields: Text STR ( Local copy of the file to use when rendering on this computer )
	}

	Define:			FileLocationFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ComputerName	CopyOf ComputerName		~[Database FieldTypes]~
			Define:	FromPath		CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~From Path~ LangItem ~FromPath~
			Define: ToPath			CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~To Path~ LangItem ~ToPath~					
		}

	Define:			FileLocationTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FileLocationPrimaryKey Using DDText
				Fields:	Text			~Constraint FileLocationPrimaryKey PRIMARY KEY(ComputerName,FromPath)~
		}

	Define:			FileLocation		Using DDDatabaseTableDef
		Fields:		TableName			FileLocation
					Fields				FileLocationFields(GetObjectReference)
					TableConstraints	FileLocationTableConstraints(GetObjectReference)

	Hang: FileLocation ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineLayoutPathsTable()
{
	Define:	LayoutPathsToolTips USING DDSymbol Contains:
	{
		Define: FromPath			using DDText Fields: Text STR ( File path from KPIS layout )
		Define: ToPath				using DDText Fields: Text STR ( File path in DP2 )
	}

	Define:			LayoutPathsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	FromPath		CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~From Path~ LangItem ~FromPath~
			Define: ToPath			CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~To Path~ LangItem ~ToPath~						
		}

	Define:			LayoutPathsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: LayoutPathsPrimaryKey Using DDText
				Fields:	Text			~Constraint LayoutPathsPrimaryKey PRIMARY KEY(FromPath)~
		}

	Define:			LayoutPaths		Using DDDatabaseTableDef
		Fields:		TableName			LayoutPaths
					Fields				LayoutPathsFields(GetObjectReference)
					TableConstraints	LayoutPathsTableConstraints(GetObjectReference)

	Hang: LayoutPaths ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineUsersTable()
{
	Define:			UsersFields Using DDLong
		Contains:	InListOrder
		{
			Define:	UserName			CopyOf UserEditField	~[Database FieldTypes]~  Fields: DisplayName ~UserName~ Constraints ~NOT NULL~
			Define:	Category			CopyOf UserTaskCategory	~[Database FieldTypes]~  Fields: DisplayName ~Initial Tasks~ 
			Define:	ComputerName		CopyOf ComputerName		~[Database FieldTypes]~ 			
			Define:	Admin				CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~Admin~ 
			Define:	Debug				CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~Debug~ 
			Define:	Diagnostic			CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~Diagnostic~ 
			Define:	DatabaseInfo		CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~DatabaseInfo~ 
			Define:	ImageEditing		CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~ImageEditing~ 
			Define:	LayoutEditing		CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~LayoutEditing~ 
			Define:	ExtendedJobEditing	CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~ExtendedJobEditing~ 
			Define:	FilmTermEditing		CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~Filmterm Editing~ 
			Define:	OrderItemResequencing	CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~Order Item Resequencing~ 
			Define:	ProductResequencing	CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName ~Product Resequencing~ 
		}

	Define:			UsersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: UsersPrimaryKey Using DDText
				Fields:	Text			~Constraint UsersPrimaryKey PRIMARY KEY(UserName)~
		}

	Define:			Users				Using DDDatabaseTableDef
		Fields:		TableName			Users
					Fields				UsersFields(GetObjectReference)
					TableConstraints	UsersTableConstraints(GetObjectReference)

	Hang: Users ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineActivityTable()
{
	Define:			ActivityFields Using DDLong
		Contains:	InListOrder
		{
			Define:	DateEntered			CopyOf AsciiDate		~[Database FieldTypes]~	 Fields: DisplayName ~Day~
			Define:	TimeEntered			CopyOf TimeWms			~[Database FieldTypes]~	 Fields: DisplayName ~Time~ 			
			Define:	UserName			CopyOf User				~[Database FieldTypes]~  Fields: DisplayName ~From~
			Define:	Destination			CopyOf User				~[Database FieldTypes]~  Fields: DisplayName ~To~
			Define:	ActivityType		CopyOf ActivityType		~[Database FieldTypes]~			
			Define:	Status				CopyOf ActivityStatus	~[Database FieldTypes]~ 
			Define:	Msg					CopyOf MultiLineLongText ~[Database FieldTypes]~ Fields: DisplayName ~Msg~ 	DisplayWidth 40		
			Define:	ComputerName		CopyOf ComputerName		~[Database FieldTypes]~ 			
		}

	Define:			ActivityTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ActivityPrimaryKey Using DDText
				Fields:	Text			~Constraint ActivityPrimaryKey PRIMARY KEY(DateEntered,TimeEntered,UserName)~
		}

	Define:			Activity			Using DDDatabaseTableDef
		Fields:		TableName			Activity
					Fields				ActivityFields(GetObjectReference)
					TableConstraints	ActivityTableConstraints(GetObjectReference)

	Hang: Activity ~[DATABASE TableDefinitions]~ InListOrder;
}				
		
			
VOID DefineDRGBRefsTable()
{
	Define:			DRGBRefsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 			CopyOf Name				~[Database FieldTypes]~	 Fields: DisplayName ~Name~ Constraints ~NOT NULL~
			Define: rfDensity		CopyOf DRGB				~[Database FieldTypes]~	 Fields: DisplayName ~Density~
			Define: rfRed			CopyOf DRGB				~[Database FieldTypes]~	 Fields: DisplayName ~Red~
			Define: rfGreen			CopyOf DRGB				~[Database FieldTypes]~	 Fields: DisplayName ~Green~
			Define: rfBlue			CopyOf DRGB				~[Database FieldTypes]~	 Fields: DisplayName ~Blue~
			Define: Brightness		CopyOf ColorOffset		~[Database FieldTypes]~	 Fields: DisplayName ~BrightnessOffset~
			Define: RedOffset		CopyOf ColorOffset		~[Database FieldTypes]~	 Fields: DisplayName ~RedOffset~
			Define: GreenOffset		CopyOf ColorOffset		~[Database FieldTypes]~	 Fields: DisplayName ~GreenOffset~
			Define: BlueOffset		CopyOf ColorOffset		~[Database FieldTypes]~	 Fields: DisplayName ~BlueOffset~
			Define: ContrastOffset	CopyOf ColorOffset		~[Database FieldTypes]~	 Fields: DisplayName ~ContrastOffset~			
			Define: UseSlope		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Use Slope~
			Define: SlopeLut		CopyOf Path				~[Database FieldTypes]~	 Fields: DisplayName ~SlopeLut~	LangItem ~SlopeLut~		
			Define: FilmCode		CopyOf FilmCode			~[Database FieldTypes]~
		}

	Define:			DRGBRefsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DRGBRefsPrimaryKey Using DDText
				Fields:	Text			~Constraint DRGBRefsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			DRGBRefs		Using DDDatabaseTableDef
		Fields:		TableName			DRGBRefs
					Fields				DRGBRefsFields(GetObjectReference)
					TableConstraints	DRGBRefsTableConstraints(GetObjectReference)

	Hang: DRGBRefs ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineScanSetupCropsTable()
{
	Define:			ScanSetupCropsFields Using DDLong
		Contains:	InListOrder
		{
			Define: ScanSetup 		CopyOf SelectableScanSetupName	~[Database FieldTypes]~ 
			Define: CropName 		CopyOf Name						~[Database FieldTypes]~		Fields: Displayname	~Crop~ Constraints ~NOT NULL~ LangItem ~Crop~  	
			Define: Sequence		CopyOf Sequence					~[Database FieldTypes]~		Fields: Constraints ~Default 1~	
		}

	Define:			ScanSetupCropsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ScanSetupCropsPrimaryKey Using DDText
				Fields:	Text			~Constraint ScanSetupCropsPrimaryKey PRIMARY KEY(ScanSetup,CropName)~
		}

	Define:			ScanSetupCrops		Using DDDatabaseTableDef
		Fields:		TableName			ScanSetupCrops
					Fields				ScanSetupCropsFields(GetObjectReference)
					TableConstraints	ScanSetupCropsTableConstraints(GetObjectReference)

	Hang: ScanSetupCrops ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineScanSetupsTable()
{
	Define:			ScanSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 					CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~

			Define: xPos					CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~xPos~
			Define: yPos					CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~yPos~
			Define: Scanwidth				CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~Scanwidth~
			Define: Scanlength				CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~Scanlength~

			Define: OverScanXPos			CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~OverscanXPos~ Constraints ~Default 50.0~
			Define: OverScanYPos			CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~OverscanYPos~ Constraints ~Default 50.0~
			Define: OverScanWidth			CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~OverscanWidth~ Constraints ~Default 100.0~
			Define: OverScanlength			CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~OverscanLength~ Constraints ~Default 100.0~

			Define: CalibrationTimeout		CopyOf CalTimeout		~[Database FieldTypes]~	Fields: DisplayName ~CalTimeout~ Constraints ~Default 3~
			Define: IgnoreCalTimeout		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~IgnoreCalTimeout~ Constraints ~Default 0~
	
			Define:	ScanRotation			CopyOf Rotation			~[Database FieldTypes]~	Fields: DisplayName ~Rotation~
			Define: Icon					CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Icon~
			Define: SaveFileType			CopyOf FileType			~[Database FieldTypes]~	Fields: DisplayName ~FileType~
			Define: FileExtension			CopyOf Extension		~[Database FieldTypes]~	Fields: DisplayName ~Extension~
	
			Define: JPEGQuality				CopyOf JPEGQuality		~[Database FieldTypes]~
			Define: MaxThumbNailSize		CopyOf MaxThumbNailSize	~[Database FieldTypes]~
			Define:	FileResolution			CopyOf FileResolution	~[Database FieldTypes]~	Fields: DisplayName ~FileResolution~
			Define: Baud					CopyOf SerialBaud		~[Database FieldTypes]~
			Define: ScannerType				CopyOf ScannerType		~[Database FieldTypes]~
			Define: ScanResolution			CopyOf ScanResolution	~[Database FieldTypes]~	
			Define: Format					CopyOf FilmFormat		~[Database FieldTypes]~
			Define: SpeedQuality			CopyOf SpeedQuality		~[Database FieldTypes]~
			Define: OpticalZoom				CopyOf OpticalZoom		~[Database FieldTypes]~
			Define: Volume					CopyOf Volume			~[Database FieldTypes]~	Fields: DisplayName ~Output Path~
			Define: Simulating				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Simulating~
			Define: FilmType				CopyOf FilmType			~[Database FieldTypes]~ Fields: DisplayName ~FilmType~

			Define: redOverride				CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~RedSlider~
			Define: greenOverride			CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~GreenSlider~
			Define: blueOverride			CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~BlueSlider~
			Define: contrastOverride		CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~ContrastSlider~
			Define: brightnessOverride		CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~BrightnessSlider~

			Define: rDensity				CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~rDensity~
			Define: rRed					CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~rRed~
			Define: rGreen					CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~rGreen~
			Define: rBlue					CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~rblue~

			Define: rfBrightness			CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Brightness~
			Define: rfRed					CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Red~
			Define: rfGreen					CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Green~
			Define: rfBlue					CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Blue~
			Define: rfContrast				CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Contrast~

			Define: dDensity				CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~dDensity~
			Define: dRed					CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~dRed~
			Define: dGreen					CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~dGreen~
			Define: dBlue					CopyOf DRGB				~[Database FieldTypes]~	Fields: DisplayName ~dBlue~

			Define: DisplayLastImage		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~DisplayLastImage~

			Define: EmbedProfile			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~EmbedProfile~
			Define: ScannerProfileEnabled	CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~ScannerProfileEnabled~
			Define: ICCProfile				CopyOf ICCProfile		~[Database FieldTypes]~	Fields: DisplayName ~ScannerProfile~

			Define: OutputProfileEnabled	CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~OutputProfileEnabled~
			Define: ICCOutputProfile		CopyOf ICCProfile		~[Database FieldTypes]~	Fields: DisplayName ~OutputProfile~

			Define: UseAnalyzerDRGBValues	CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~UseAnalyzerDRGBValues~ Constraints ~Default 1~
			Define: UseSBAPlus				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~UseSBAPlus~ Constraints ~Default 0~
			Define: AutoDRGBAdjustments		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AutoDRGBAdjustments~
			Define: DRGBRefs				CopyOf DRGBRefs			~[Database FieldTypes]~	Fields: DisplayName ~DRGBRefs~
			Define: DRGBProfileName			CopyOf ICCProfile		~[Database FieldTypes]~	Fields: DisplayName ~ExposureProfile~
			Define: LockScannerOffsets		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~LockScannerOffsets~ Constraints ~Default 0~
			Define: DensityNormalization	CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~DensityNormalization~ Constraints ~Default 0~

			Define: SBALevel				CopyOf SbaCmd			~[Database FieldTypes]~	Fields: DisplayName ~SBALevel~ Constraints ~Default 0~
			Define: CMMField				CopyOf CMMField			~[Database FieldTypes]~	Fields: DisplayName ~CMM~ Constraints ~Default 100~
			Define: PreferenceClass			CopyOf PrefClass	~[Database FieldTypes]~	Fields: DisplayName ~Preference Class~ Constraints ~Default 0~
			Define: PCWF					CopyOf PCWF				~[Database FieldTypes]~	Fields: DisplayName ~PCWF~ Constraints ~Default 700~
			Define: IgnoreSFS				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~IgnoreSFS~ Constraints ~Default 0~
			Define: SFSFile					CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName ~SFSFile~ LangSection ~FieldTypes~ LangItem ~SFSFile~

			Define: CalibrationFile			CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName ~Cal File~ LangSection ~FieldTypes~ LangItem ~CalFile~
			Define: LutFile					CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName ~Lut File~ LangSection ~FieldTypes~ LangItem ~LutFile~

			Define:	Sharpen					CopyOf Sharpen			~[Database FieldTypes]~ Fields: Constraints ~Default 0~

			Define: CropX					CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~CropX~
			Define: CropY					CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~CropY~
			Define: CropWidth				CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~CropWidth~
			Define: CropLength				CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~CropLength~
		
			Define: FilmDriveVendor			CopyOf FilmDriveVendor	~[Database FieldTypes]~ Fields: DisplayName ~FilmDriveVendor~
			Define: FilmDriveSetup			CopyOf FilmDriveSetup	~[Database FieldTypes]~ Fields: DisplayName ~FilmDriveSetup~
			Define: FilmDriveEnabled		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~FilmDriveEnabled~
			Define: XSliderIFactor			CopyOf XSliderIFactor	~[Database FieldTypes]~ Fields: DisplayName ~XSliderIFactor~
			Define: LogActivity				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~LogActivity~
			Define:	FilmEditor				CopyOf EditorVendor		~[Database FieldTypes]~ Fields: DisplayName	~Film Editor~
			Define:	ScanFromDataBase		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~ScanFromDataBase~ Constraints ~Default 1~
			Define:	FrameToPunch			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~FrameToPunch~
			Define:	FrameToPunchPadding		CopyOf FramePadding		~[Database FieldTypes]~ Fields: DisplayName ~FramePadding~  Constraints ~Default 5~
			Define:	SequentialPunches		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~SequentialPunches~
			Define:	OmitRollInPath			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~OmitRollInPath~
			Define:	PathTemplate			CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~PathTemplate~
			Define: SharpenDelta			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~SharpenDelta~
			Define: Hr500FdaSetup			CopyOf FdaSetup			~[Database FieldTypes]~ Fields: DisplayName ~Hr500FdaFSetup~

			Define: AdaptiveSharpen			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AdaptiveSharpen~
			Define: SharpenAmount			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~SharpenAmount~
			Define: SharpenFaster			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~SharpenFaster~
			Define: SharpenLimit			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~SharpenLimit~
			Define: SharpenThreshold		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~SharpenThreshold~
			Define: SharpenBlurAmount		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~SharpenBlurAmount~

			Define: NoiseReductionAmount	CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~NoiseReductionAmount~
			Define: NoiseReductionFaster	CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~NoiseReductionFaster~

			Define: EdgeSensitivity			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~EdgeSensitivity~
			Define: MinInterframeGap		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~MinInterframeGap~
			Define: ContinueFrameNumber		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~ContinueFrameNum~ Constraints ~Default 0~	
			Define: AutoIncRollNumber		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AutoIncRollNum~ Constraints ~Default 0~	
			Define: FixedNonFDAAdvance		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~FixedAdvance~ Constraints ~Default 0~	
			Define: TwinCheck				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~TwinCheck~ Constraints ~Default 0~	
			
			Define: DigitalIceCheckBox		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~DigitalIce~ Constraints ~Default 0~	
			Define: DigitalIceType			CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~DigitalIceLevel~ Constraints ~Default 5~	
		}

	Define:			ScanSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ScanSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint ScanSetupsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			ScanSetups		Using DDDatabaseTableDef
		Fields:		TableName			ScanSetups
					Fields				ScanSetupsFields(GetObjectReference)
					TableConstraints	ScanSetupsTableConstraints(GetObjectReference)

	Hang: ScanSetups ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineFTScanSetupsTable()
{
	Define:			FTScanSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 					CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName ~Name~ Constraints ~NOT NULL~

			Define: xPos					CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~xPos~
			Define: yPos					CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~yPos~
			Define: Scanwidth				CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~Scanwidth~
			Define: Scanlength				CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~Scanlength~

			Define: OverScanXPos			CopyOf CropPosition		~[Database FieldTypes]~ Fields: DisplayName ~OverscanXPos~ Constraints ~Default 50.0~
			Define: OverScanYPos			CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~OverscanYPos~ Constraints ~Default 50.0~
			Define: OverScanWidth			CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~OverscanWidth~ Constraints ~Default 100.0~
			Define: OverScanlength			CopyOf CropPosition		~[Database FieldTypes]~	Fields: DisplayName ~OverscanLength~ Constraints ~Default 100.0~

			Define: ScansToSave				CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~Scans To Save~ Constraints ~Default 10~
			Define: AvgDenRGBKey			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AvgDenKey~ Constraints ~Default 0~	
			Define:	AvgDenRMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenRMin~ Constraints ~Default 0~
			Define:	AvgDenRMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenRMax~ Constraints ~Default 0~
			Define:	AvgDenGMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenGMin~ Constraints ~Default 0~
			Define:	AvgDenGMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenGMax~ Constraints ~Default 0~
			Define:	AvgDenBMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenBMin~ Constraints ~Default 0~
			Define:	AvgDenBMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenBMax~ Constraints ~Default 0~

			Define: AvgDenNKey				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AvgDenNKey~ Constraints ~Default 0~	
			Define:	AvgDenNMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenNMin~ Constraints ~Default 0~
			Define:	AvgDenNMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenNMax~ Constraints ~Default 0~

			Define: HueSatKey				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~HueSatKey~ Constraints ~Default 0~	
			Define:	AvgHueMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgHueMin~	Constraints ~Default 0~
			Define:	AvgHueMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgHueMax~	Constraints ~Default 0~
			Define:	AvgSatMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgSatMin~	Constraints ~Default 0~
			Define:	AvgSatMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgSatMax~	Constraints ~Default 0~

			Define: SbaFleshKey				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~SbaFleshKey~ Constraints ~Default 0~	
			Define:	SbaFleshMin				CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaFleshMin~ Constraints ~Default 0~
			Define:	SbaFleshMax				CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaFleshMax~ Constraints ~Default 0~

			Define:	SFSFile					CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName	~SFSFile~ LangItem ~SFSFile~

			Define: CalibrationTimeout		CopyOf CalTimeout		~[Database FieldTypes]~	Fields: DisplayName ~CalTimeout~ Constraints ~Default 3~
			Define: IgnoreCalTimeout		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~IgnoreCalTimeout~ Constraints ~Default 0~
	
			Define:	ScanRotation			CopyOf Rotation			~[Database FieldTypes]~	Fields: DisplayName ~Rotation~
			Define: Icon					CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Icon~
			Define: SaveFileType			CopyOf FileType			~[Database FieldTypes]~	Fields: DisplayName ~FileType~
			Define: FileExtension			CopyOf Extension		~[Database FieldTypes]~	Fields: DisplayName ~Extension~

			Define:	ProductID				CopyOf SelectableProductID	~[Database FieldTypes]~
			Define:	QueueName				CopyOf QueueNameCombo		~[Database FieldTypes]~	
	
			Define: JPEGQuality				CopyOf JPEGQuality		~[Database FieldTypes]~
			Define: Format					CopyOf FilmFormat		~[Database FieldTypes]~
			Define: Volume					CopyOf Volume			~[Database FieldTypes]~	Fields: DisplayName ~Output Path~
			Define: FilmType				CopyOf FilmType			~[Database FieldTypes]~ Fields: DisplayName ~FilmType~

			Define: DisplayLastImage		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~DisplayLastImage~

			Define: FilmDriveVendor			CopyOf Hr500FilmDriveVendor	~[Database FieldTypes]~ Fields: DisplayName ~FilmDriveVendor~
			Define: FilmDriveSetup			CopyOf FilmDriveSetup	~[Database FieldTypes]~ Fields: DisplayName ~FilmDriveSetup~
			Define: FilmDriveEnabled		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~FilmDriveEnabled~
			Define: Hr500FdaSetup			CopyOf FdaSetup			~[Database FieldTypes]~ Fields: DisplayName ~Hr500FdaFSetup~
			Define: XSliderIFactor			CopyOf XSliderIFactor	~[Database FieldTypes]~ Fields: DisplayName ~XSliderIFactor~
			Define: LogActivity				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~LogActivity~
			Define:	FilmEditor				CopyOf EditorVendor		~[Database FieldTypes]~ Fields: DisplayName	~Film Editor~
			Define:	ScanFromDataBase		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~ScanFromDataBase~ Constraints ~Default 1~
			Define:	FrameToPunch			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~FrameToPunch~
			Define:	FrameToPunchPadding		CopyOf FramePadding		~[Database FieldTypes]~ Fields: DisplayName ~FramePadding~  Constraints ~Default 5~
			Define:	SequentialPunches		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~SequentialPunches~
			Define:	OmitRollInPath			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~OmitRollInPath~
			Define:	PathTemplate			CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~PathTemplate~

			Define: EdgeSensitivity			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~EdgeSensitivity~
			Define: MinInterframeGap		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~MinInterframeGap~
			Define: ContinueFrameNumber		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~ContinueFrameNum~ Constraints ~Default 0~	
			Define: AutoIncRollNumber		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AutoIncRollNum~ Constraints ~Default 0~	
			Define: FixedNonFDAAdvance		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~FixedAdvance~ Constraints ~Default 0~	
			Define: TwinCheck				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~TwinCheck~ Constraints ~Default 0~	

			Define: ScannerType				CopyOf ScannerType		~[Database FieldTypes]~ Fields: DisplayName ~Scanner~
		}

	Define:			FTScanSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FTScanSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint FTScanSetupsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			FTScanSetups		Using DDDatabaseTableDef
		Fields:		TableName			FTScanSetups
					Fields				FTScanSetupsFields(GetObjectReference)
					TableConstraints	FTScanSetupsTableConstraints(GetObjectReference)

	Hang: FTScanSetups ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineImageSorterSummaryTable()
{
	Define:	ImageSorterToolTips USING DDSymbol Contains:
	{
		Define:	keyField	using DDText Fields: Text STR ( Indicates whether the saved images are constrained by ranges set for )
		Define:	minField	using DDText Fields: Text STR ( Mininum value for )
		Define:	maxField	using DDText Fields: Text STR ( Maximum value for )
	}
		
	Hang:	ImageSorterToolTips	~[STRINGS]~ ;

	Define:			ImageSorterSummaryFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID					CopyOf OrderID			~[Database FieldTypes]~	Fields: DisplayName ~Order~		Constraints	~NOT NULL~ ReadOnly ~T~
											ColumnToolTipText Translate( ~Order ID~ ) LangItem ~Order~
			Define:	Filmterm				CopyOf FilmType			~[Database FieldTypes]~	Fields: DisplayName ~Filmterm~	Constraints	~NOT NULL~ ReadOnly ~T~
											ColumnToolTipText Translate( ~Filmterm name~ )
			Define: SetupName				CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName ~FT Scan Setup~ ReadOnly ~T~
											ColumnToolTipText Translate( ~Name of saved FTScanSetup~ )

			Define: TotalScans				CopyOf ScanCount		~[Database FieldTypes]~ Fields: DisplayName	~Total Scans~ ReadOnly ~T~
											ColumnToolTipText Translate( ~Total number of images scanned while checking for these range settings~ )
			Define: MatchingScans			CopyOf ScanCount		~[Database FieldTypes]~ Fields: DisplayName	~Matching Scans~ ReadOnly ~T~
											ColumnToolTipText Translate( ~Total number of images scanned that match these range settings~ )
			Define:	PercentMatching			CopyOf Percent			~[Database FieldTypes]~ Fields: DisplayName	~Percent Matching~ ReadOnly ~T~
											ColumnToolTipText Translate( ~Percentage of images scanned that match these range settings~ )

			Define: AvgDenRGBKey			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AvgDenRGBKey~		Constraints ~Default 0~	ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,keyField ) + Translate( ~Average Density RGB~ )
			Define:	AvgDenRMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenRmin~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,minField ) + Translate( ~Average Density Red~ )
			Define:	AvgDenRMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenRmax~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,maxField ) + Translate( ~Average Density Red~ )
			Define:	AvgDenGMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenGmin~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,minField ) + Translate( ~Average Density Green~ )
			Define:	AvgDenGMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenGmax~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,maxField ) + Translate( ~Average Density Green~ )
			Define:	AvgDenBMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenBmin~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,minField ) + Translate( ~Average Density Blue~ )
			Define:	AvgDenBMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenBmax~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,maxField ) + Translate( ~Average Density Blue~ )

			Define: AvgDenNKey				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~AvgDenNKey~	Constraints ~Default 0~	ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,keyField ) + Translate( ~Average Density Neutral~ )
			Define:	AvgDenNMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenNmin~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,minField ) + Translate( ~Average Density Neutral~ )
			Define:	AvgDenNMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgDenNmax~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,maxField ) + Translate( ~Average Density Neutral~ )

			Define: HueSatKey				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~HueSatKey~		Constraints ~Default 0~	ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,keyField ) + Translate( ~Average Hue and Average Saturation~ )
			Define:	AvgHueMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgHuemin~		Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,minField ) + Translate( ~Average Hue~ )
			Define:	AvgHueMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgHuemax~		Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,maxField ) + Translate( ~Average Hue~ )
			Define:	AvgSatMin				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgSatmin~		Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,minField ) + Translate( ~Average Saturation~ )
			Define:	AvgSatMax				CopyOf SignedInterval	~[Database FieldTypes]~	Fields: DisplayName	~AvgSatmax~		Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,maxField ) + Translate( ~Average Saturation~ )

			Define: SbaFleshKey				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~SbaFleshKey~	Constraints ~Default 0~ ReadOnly ~T~	
											ColumnToolTipText Translate( ImageSorterToolTips,keyField ) + Translate( ~Enhanced SBA~ )
			Define:	SbaFleshMin				CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaFleshmin~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,minField ) + Translate( ~Enhanced SBA~ )
			Define:	SbaFleshMax				CopyOf ColorOffset		~[Database FieldTypes]~	Fields: DisplayName	~SbaFleshmax~	Constraints ~Default 0~ ReadOnly ~T~
											ColumnToolTipText Translate( ImageSorterToolTips,maxField ) + Translate( ~Enhanced SBA~ )

			Define:	SFSFile					CopyOf Path				~[Database FieldTypes]~	Fields: DisplayName	~SFSFile~ ReadOnly ~T~ LangItem ~SFSFile~
											ColumnToolTipText Translate( ~Subject Failure Suppression Boundary Set~ )
		}

	Define:			ImageSorterSummaryTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImageSorterSummaryPrimaryKey Using DDText
				Fields:	Text			~Constraint ImageSorterSummaryPrimaryKey PRIMARY KEY(OrderID)~

			Define: RefImageSorterSummaryToOrderID Using DDText
				Fields:	Text			~Constraint RefImageSorterSummaryToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			ImageSorterSummary	Using DDDatabaseTableDef
		Fields:		TableName			ImageSorterSummary
					Fields				ImageSorterSummaryFields(GetObjectReference)
					TableConstraints	ImageSorterSummaryTableConstraints(GetObjectReference)

	Hang: ImageSorterSummary ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineExportImageSetupsTable()
{
	Define:			ExportImageSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Setup 					CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName	~Setup Name~

			Define:	Width					CopyOf WidthDouble		~[Database FieldTypes]~
			Define:	Height					CopyOf LengthDouble		~[Database FieldTypes]~

			Define: SizeOption				CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Sizing~
			Define: ScaleFactor				CopyOf Percent			~[Database FieldTypes]~ Fields: DisplayName ~Scale~


			Define: CropX		   			CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~X Mid Point~  	
			Define: CropY					CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Y Mid Point~
			Define: CropWidth 				CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Crop Width~  	
			Define: CropLength 				CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Crop Length~

			Define: ImageCropX		   		CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Image X~  	
			Define: ImageCropY				CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Image Y~
			Define: ImageCropWidth 			CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Image Width~  	
			Define: ImageCropHeight 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Image Height~
			Define: OverrideImageCrop		CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName	~Override Image Crop~

			Define:	ImageRotation			CopyOf Rotation			~[Database FieldTypes]~	Fields: DisplayName		~Image Rotation~
			Define: OverrideImageRotation	CopyOf Boolean			~[Database FieldTypes]~  Fields: DisplayName	~Override Image Rotation~


			Define: OutputDirectory			CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~Directory~
			Define: FileName				CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~File Name~
			Define:	Extension				CopyOf Extension		~[Database FieldTypes]~	Fields: DisplayName ~Extension~

			Define: FileNameOptions			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Name Option~

			Define:	Resolution				CopyOf FileResolution	~[Database FieldTypes]~	Fields: DisplayName ~FileResolution~
			Define:	Rotation				CopyOf Rotation			~[Database FieldTypes]~	Fields: DisplayName ~Rotation~
			Define:	AutoRotate				CopyOf Rotation			~[Database FieldTypes]~	Fields: DisplayName ~Auto Rotate~

			Define:	QueueName				CopyOf QueueNameCombo	~[Database FieldTypes]~	

			Define: SaveFileType			CopyOf OutputFileType	~[Database FieldTypes]~	Fields: DisplayName ~FileType~
			Define: MaxThumbNailSize		CopyOf MaxThumbNailSize	~[Database FieldTypes]~
			Define: CompressionQuality		CopyOf IntegerPercent	~[Database FieldTypes]~ Fields: DisplayName ~Compression~
	
			Define: IgnoreRejected			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Ignore Rejected~
			Define: DefaultInputProfile		CopyOf ICCProfile		~[Database FieldTypes]~	Fields: DisplayName ~Default Input Profile~
			Define: ICCProfile				CopyOf ICCProfile		~[Database FieldTypes]~	Fields: DisplayName ~Output Profile~
			Define: OutputProfileEnabled	CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Output Profile Enabled~
			Define: EmbedProfile			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Embed Profiles~
			Define: ChooseProfiles			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Choose Profiles~
			Define: WorkingSpaceProfile		CopyOf ICCProfile		~[Database FieldTypes]~	Fields: DisplayName ~Working Space Profile~
			Define: Flatten					CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Flatten~

			Define: SharpenValue			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~SharpenValue~
			Define: SharpenFast				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~SharpenFast~
			Define: AdaptiveSharpen			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Adaptive~
			Define: AdaptiveSharpenLimit	 CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Limit~
			Define: AdaptiveSharpenThreshold CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Threshold~
			Define: AdaptiveSharpenBlur		 CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~BlurAmount~

			Define: NoiseReductionAmount	CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~NoiseReductionAmount~
			Define: NoiseReductionFaster	CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~NoiseReductionFaster~

			Define: Density					CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Density~
			Define: Red						CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Red~
			Define: Green					CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Green~
			Define: Blue					CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Blue~

			Define: Contrast				CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Contrast~
			Define: XGamma					CopyOf Gamma			~[Database FieldTypes]~ Fields: DisplayName ~XGamma~
			Define: Saturation				CopyOf ColorOffset		~[Database FieldTypes]~ Fields: DisplayName ~Saturation~

			Define: Negative				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Negative~
			Define: GrayScale				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~GrayScale~

			Define: LutFile					CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~Lut File~
			Define: ColorMatrix				CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~Color Matrix~

			Define: UseFile					CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~Layout~
			Define: UseFileEnabled			CopyOf Boolean			~[Database FieldTypes]~	Fields:	DisplayName	~Enabled~
		
			Define: ProcessAfter			CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~ProcessAfter~
			Define: ProcessAfterFile		CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~ProcessAfter File~

			Define: RImageEnabled			CopyOf Boolean			~[Database FieldTypes]~	Fields:	DisplayName	~RImageEnabled~

			Define: RImageTemplate			CopyOf OrderID			~[Database FieldTypes]~	Fields:	DisplayName	~RImage Template~ LangItem ~RImageTemplate~
			Define: RImageWriter			CopyOf OrderID			~[Database FieldTypes]~	Fields:	DisplayName	~RImage Writer~ LangItem ~RImageWriter~

			Define: RImageCDPath			CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~Output Media Path~
			Define: DeleteAfterRImage		CopyOf Boolean			~[Database FieldTypes]~	Fields:DisplayName	~Delete After~	 Constraints ~Default 0~ 	

			Define: TextRotation1			CopyOf Rotation			~[Database FieldTypes]~	Fields:	DisplayName	~TextRotation 1~
			Define: TextRotation2			CopyOf Rotation			~[Database FieldTypes]~	Fields:	DisplayName	~TextRotation 2~
			Define: TextAlignment1			CopyOf Generic32Char	~[Database FieldTypes]~	Fields:	DisplayName	~TextAlignment 1~
			Define: TextAlignment2			CopyOf Generic32Char	~[Database FieldTypes]~	Fields:	DisplayName	~TextAlignment 2~
			Define: TextJustification1		CopyOf Generic32Char	~[Database FieldTypes]~	Fields:	DisplayName	~TextJustification 1~
			Define: TextJustification2		CopyOf Generic32Char	~[Database FieldTypes]~	Fields:	DisplayName	~TextJustification 2~
			Define: Text1					CopyOf MultiLineJobText	~[Database FieldTypes]~	Fields:	DisplayName	~Text 1~  	
			Define: Text2					CopyOf MultiLineJobText	~[Database FieldTypes]~	Fields:	DisplayName	~Text 2~    
			Define: TextTranslucence1		CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~Text Translucence 1~
			Define: TextTranslucence2		CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~Text Translucence 2~
			Define: BoldText1				CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~Bold Text 1~
			Define: BoldText2				CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~Bold Text 2~
			Define: ItalicText1				CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~Italic Text 1~
			Define: ItalicText2				CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~Italic Text 2~
			Define: WordWrapText1			CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~WordWrap Text 1~
			Define: WordWrapText2			CopyOf LongValue		~[Database FieldTypes]~	Fields: DisplayName ~WordWrap Text 2~
			Define: TextColor1				CopyOf Generic32Char	~[Database FieldTypes]~ Fields: DisplayName ~Text Color 1~
			Define: TextColor2				CopyOf Generic32Char	~[Database FieldTypes]~ Fields: DisplayName ~Text Color 2~
			Define: ShadowColor1			CopyOf Generic32Char	~[Database FieldTypes]~ Fields: DisplayName ~Shadow Color 1~
			Define: ShadowColor2			CopyOf Generic32Char	~[Database FieldTypes]~ Fields: DisplayName ~Shadow Color 2~
			Define: Font1					CopyOf Generic32Char	~[Database FieldTypes]~ Fields: DisplayName ~Font 1~
			Define: Font2					CopyOf Generic32Char	~[Database FieldTypes]~ Fields: DisplayName ~Font 2~
			Define: Angle1					CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Angle 1~
			Define: Angle2					CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Angle 2~
			Define: HorzShadowOffset1		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Horiz Shadow Offset 1~
			Define: HorzShadowOffset2		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Horiz Shadow Offset 2~
			Define: VertShadowOffset1		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Vert Shadow Offset 1~
			Define: VertShadowOffset2		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Vert Shadow Offset 2~
			Define: ShadowStrength1			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Shadow Strength 1~
			Define: ShadowStrength2			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Shadow Strength 2~
			Define: ShadowBlur1				CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Shadow Blur 1~
			Define: ShadowBlur2				CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Shadow Blur 2~
			Define: ShadowEnable1			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Shadow Enable 1~
			Define: ShadowEnable2			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Shadow Enable 2~
			Define: TextXPercent1			CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text X Percent 1~			
			Define: TextXPercent2			CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text X Percent 2~			
			Define: TextYPercent1			CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Y Percent 1~			
			Define: TextYPercent2			CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Y Percent 2~			
			Define: TextWidthPercent1		CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Width Percent 1~		
			Define: TextWidthPercent2		CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Width Percent 2~		
			Define: TextHeightPercent1		CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Height Percent 1~		
			Define: TextHeightPercent2		CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Height Percent 2~		
			Define: CharacterSet1			CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~Character Set 1~
			Define: CharacterSet2			CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~Character Set 2~
			Define: TextStrokeColor1		CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Color 1~
			Define: TextStrokeColor2		CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Color 2~
			Define: TextStrokeEnable1		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Enable 1~
			Define: TextStrokeEnable2		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Enable 2~
			Define: TextStrokeAntialias1	CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Antialias 1~
			Define: TextStrokeAntialias2	CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Antialias 2~
			Define: TextStrokeWidth1		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Width 1~	
			Define: TextStrokeWidth2		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Width 2~		
			Define: TextStrokeOpacity1		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Opacity 1~
			Define: TextStrokeOpacity2		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Stroke Opacity 2~	
			Define: TextBevel1				CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Enable 1~
			Define: TextBevel2				CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Enable 2~
			Define: TextBevelSize1			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Size 1~	
			Define: TextBevelSize2			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Size 2~	
			Define: TextBevelLightAngle1	CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Light Angle 1~				
			Define: TextBevelLightAngle2	CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Light Angle 2~				
			Define: TextBevelStrength1		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Strength 1~
			Define: TextBevelStrength2		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Strength 2~
			Define: TextBevelSoftness1		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Softness 1~
			Define: TextBevelSoftness2		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Text Bevel Softness 2~

			Define: ChromaKeyBGIDOption		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~Use Chroma Key BG~  Constraints ~Default 0~
			Define: DP2BGId					CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~DP2 BG Id~
			Define: ProductType				CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~Product Type~
			Define: CustomerBGId			CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~Customer BG Id~
			Define: OrientationOption		CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~BG Image Orientation~ Constraints ~Default 0~
			Define: NoCorrections			CopyOf LongValue		~[Database FieldTypes]~ Fields: DisplayName ~No Corrections~ Constraints ~Default 0~
			Define: DesiredLogoSize1		CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Desired Logo Size~
			Define: LogoRotation1			CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Rotate Logo~ Constraints ~Default 0~
			Define: LogoAutoRotate1			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Auto Rotate Logo With Image~  Constraints ~Default 0~
			Define: LogoImage1				CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Logo Image Path~  LangItem ~~ 
			Define: LogoMask1				CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Logo Mask Path~  LangItem ~~
			Define: LogoColorOverride1		CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Logo Color~ 
			Define: LogoShiftX1				CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Logo Shift X~ Constraints ~Default 0~
			Define: LogoShiftY1				CopyOf DoubleValue		~[Database FieldTypes]~ Fields: DisplayName ~Logo Shift Y~ Constraints ~Default 0~
			Define: LogoPosition1			CopyOf LogoPositions	~[Database FieldTypes]~ Fields: DisplayName ~Logo Position~ 
		}

	Define:			ExportImageSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ExportImageSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint ExportImageSetupsPrimaryKey PRIMARY KEY(Setup)~
		}

	Define:			ExportImageSetups	Using DDDatabaseTableDef
		Fields:		TableName			ExportImageSetups
					Fields				ExportImageSetupsFields(GetObjectReference)
					TableConstraints	ExportImageSetupsTableConstraints(GetObjectReference)

	Hang: ExportImageSetups ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineExportOrderItemSetupsTable()
{
	Define:			ExportOrderItemSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Setup 					CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName	~Setup Name~
			Define:	Resolution				CopyOf FileResolution	~[Database FieldTypes]~	Fields: DisplayName ~FileResolution~
			Define:	QueueName				CopyOf QueueNameCombo	~[Database FieldTypes]~	

			Define: OutputDirectory			CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~Directory~
			Define: FileName				CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~File Name~
			Define: SaveFileType			CopyOf SaveFileTypeText	~[Database FieldTypes]~	Fields: DisplayName ~FileType~
			Define: CompressionQuality		CopyOf IntegerPercent	~[Database FieldTypes]~ Fields: DisplayName ~Compression~
	
			Define: RImageEnabled			CopyOf Boolean			~[Database FieldTypes]~	Fields:	DisplayName	~RImageEnabled~
			Define: RImageTemplate			CopyOf OrderID			~[Database FieldTypes]~	Fields:	DisplayName	~RImage Template~ LangItem ~RImageTemplate~
			Define: RImageWriter			CopyOf OrderID			~[Database FieldTypes]~	Fields:	DisplayName	~RImage Writer~ LangItem ~RImageWriter~
			Define: RImageCDPath			CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~Output Media Path~
			Define: DeleteAfterRImage		CopyOf Boolean			~[Database FieldTypes]~	Fields:DisplayName	~Delete After~	 Constraints ~Default 0~ 	
			
			Define: ProcessAfter			CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~ProcessAfter~
			Define: ProcessAfterFile		CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~ProcessAfter File~

			Define:	BreakType				CopyOf Sequence			~[Database FieldTypes]~	Fields:	DisplayName	~Break Type~		Constraints ~Default 0~ 		
			Define:	BreakOnCount			CopyOf Sequence			~[Database FieldTypes]~	Fields:	DisplayName	~Break After N~		Constraints ~Default 0~ 	
			Define:	BreakOnSubjectField1	CopyOf FieldName		~[Database FieldTypes]~	Fields:	DisplayName	~SubjectInfo Field 1~		
			Define:	BreakOnSubjectField2	CopyOf FieldName		~[Database FieldTypes]~	Fields:	DisplayName	~SubjectInfo Field 2~		
		}

	Define:			ExportOrderItemSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ExportOrderItemSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint ExportOrderItemSetupsPrimaryKey PRIMARY KEY(Setup)~
		}

	Define:			ExportOrderItemSetups	Using DDDatabaseTableDef
		Fields:		TableName			ExportOrderItemSetups
					Fields				ExportOrderItemSetupsFields(GetObjectReference)
					TableConstraints	ExportOrderItemSetupsTableConstraints(GetObjectReference)

	Hang: ExportOrderItemSetups ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineFileFormatsTable()
{
	Define:			FileFormatsFields Using DDLong
		Contains:	InListOrder
		{
			Define: ID 				CopyOf ID				~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~	
			Define: Sequence		CopyOf Sequence			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~	
			Define: FieldName		CopyOf FieldName		~[Database FieldTypes]~	
			Define: FieldType		CopyOf FieldType		~[Database FieldTypes]~
			Define: FieldSize		CopyOf FieldSize		~[Database FieldTypes]~	
			Define: Quoted			CopyOf Boolean			~[Database FieldTypes]~ Fields:	DisplayName	~Quoted~
			Define: QuoteChar		CopyOf QuoteChar		~[Database FieldTypes]~ Fields:	DisplayName	~QuoteChar~	
			Define: Delimiter		CopyOf Delimiters		~[Database FieldTypes]~ Fields:	DisplayName	~Delimiter~
			Define: IgnoreField		CopyOf Boolean			~[Database FieldTypes]~ Fields:	DisplayName	~Ignore~
			Define: IgnoreIfNull	CopyOf Boolean			~[Database FieldTypes]~ Fields:	DisplayName	~IgnoreIfNull~
			Define: TableName		CopyOf TableName		~[Database FieldTypes]~	
		}

	Define:			FileFormatsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: FileFormatsPrimaryKey Using DDText
				Fields:	Text			~Constraint FileFormatsPrimaryKey PRIMARY KEY(ID,Sequence)~
		}

	Define:			FileFormats		Using DDDatabaseTableDef
		Fields:		TableName			FileFormats
					Fields				FileFormatsFields(GetObjectReference)
					TableConstraints	FileFormatsTableConstraints(GetObjectReference)

	Hang: FileFormats ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineTableFormatsTable()
{
	Define:			TableFormatsFields Using DDLong
		Contains:	InListOrder
		{
			Define: TableName		CopyOf TableName		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~	
			Define: Sequence		CopyOf Sequence			~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~	
			Define: FieldName		CopyOf FieldName		~[Database FieldTypes]~	
			Define: FieldType		CopyOf FieldType		~[Database FieldTypes]~
			Define: FieldLength		CopyOf FieldSize		~[Database FieldTypes]~	
			Define: Displayname		CopyOf DisplayName		~[Database FieldTypes]~ 	
			Define: MaskLength		CopyOf Length			~[Database FieldTypes]~	Fields: DisplayName ~Mask Length~ LangItem ~MaskLength~	
			Define: Mask			CopyOf FieldMask		~[Database FieldTypes]~	
			Define: AllowedChar		CopyOf Allowed			~[Database FieldTypes]~	
			Define: DisAllowedChar	CopyOf DisAllowed		~[Database FieldTypes]~	
			Define: PrimaryKey		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Primary Key~	
			Define: IndexOn			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Create Index~	
		}

	Define:			TableFormatsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: TableFormatsPrimaryKey Using DDText
				Fields:	Text			~Constraint TableFormatsPrimaryKey PRIMARY KEY(TableName,Sequence)~
		}

	Define:			TableFormats		Using DDDatabaseTableDef
		Fields:		TableName			TableFormats
					Fields				TableFormatsFields(GetObjectReference)
					TableConstraints	TableFormatsTableConstraints(GetObjectReference)

	Hang: TableFormats ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineCropsTable()
{
	Define:			CropsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 			CopyOf Name				~[Database FieldTypes]~	 Fields: Displayname	~Crop~ Constraints ~NOT NULL~ LangItem ~Crop~  	
			Define: CropX		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Crop X% Mid~  	
			Define: CropY			CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Crop Y% Mid~
			Define: CropWidth 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Crop Width%~  	
			Define: CropLength 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Crop Length%~
			Define: HeadX		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Head X% Mid~  	
			Define: HeadY			CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Head Y% Mid~
			Define: HeadWidth 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Head Width%~  	
			Define: HeadLength 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Head Length%~
			Define: Format		   	CopyOf FilmFormat		~[Database FieldTypes]~	 Fields: Displayname	~Format~  	
			Define: OpticalZoom		CopyOf OpticalZoom		~[Database FieldTypes]~	 Fields: Displayname	~Zoom~  	
			Define: ScanX		   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Scan X Mid Point~  	
			Define: ScanY			CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~Scan Y Mid Point~
			Define: ScanWidth 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Scan Width~  	
			Define: ScanLength 		CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Scan Length~
			Define: Rotation 		CopyOf Rotation			~[Database FieldTypes]~
			Define: BremsonCropCode CopyOf BremsonCropCode	~[Database FieldTypes]~
			Define: OffsetPPI		CopyOf OffsetPPI		~[Database FieldTypes]~
			Define: OverScanX	   	CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~OverScan X Mid Point~ Constraints ~Default 50~
			Define: OverScanY		CopyOf CropPosition		~[Database FieldTypes]~	 Fields: Displayname	~OverScan Y Mid Point~ Constraints ~Default 50~
			Define: OverScanWidth 	CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~OverScan Width~	Constraints ~Default 100~	
			Define: OverScanLength 	CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~OverScan Length~	Constraints ~Default 100~
			Define:	AspectRatioWidth CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Aspect Ratio Width~	Constraints ~Default 0~ ColumnToolTipText ~used during head alignment~
			Define:	AspectRatioLength CopyOf CropDimension	~[Database FieldTypes]~	 Fields: Displayname	~Aspect Ratio Length~ Constraints ~Default 0~ ColumnToolTipText ~used during head alignment~
			Define: CropMethod		CopyOf CropMethod			~[Database FieldTypes]~	Fields: Displayname		~Crop Method~ Constraints ~Default 0~ ColumnToolTipText ~used during head alignment~
		}

		//scanResolution scanRotation x y width length yOffsetPPI mag magPosition finalWidth finalLength

	Define:			CropsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CropsPrimaryKey Using DDText
				Fields:	Text			~Constraint CropsPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			Crops		Using DDDatabaseTableDef
		Fields:		TableName			Crops
					Fields				CropsFields(GetObjectReference)
					TableConstraints	CropsTableConstraints(GetObjectReference)

	Hang: Crops ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineHeadAlignmentTable()
{
	Define:			HeadAlignmentFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name				CopyOf Name				~[Database FieldTypes]~	Fields: Displayname ~Setup Name~  	
			Define: EnableAlignment		CopyOf Boolean			~[Database FieldTypes]~	Fields: Displayname ~Enable Alignment~
			Define: CropName			CopyOf NameCombo		~[Database FieldTypes]~	Fields: Displayname ~Crop Name~  	
			Define: AllowHorizontal		CopyOf Boolean			~[Database FieldTypes]~	Fields: Displayname ~Allow Horizontal~
			Define: AllowVertical		CopyOf Boolean			~[Database FieldTypes]~	Fields: Displayname ~Allow Vertical~
			Define: AllowZoom			CopyOf Boolean			~[Database FieldTypes]~	Fields: Displayname ~Allow Zoom~
			Define: EnableBalance		CopyOf Boolean			~[Database FieldTypes]~	Fields: Displayname ~Enable Balance~
			Define: BalanceName 		CopyOf NameCombo		~[Database FieldTypes]~	Fields: Displayname ~Balance Name~	
			Define: ImagePopulation 	CopyOf ImagesPopulation	~[Database FieldTypes]~	
			Define: HeadFindingAlgorithm CopyOf HeadFindingAlgorithm ~[Database FieldTypes]~
			Define: EyePosition			Copyof Percent			~[Database FieldTypes]~ Fields: Displayname ~Eye Position %~
			Define: EdgeFindingStrength CopyOf EdgeFindingStrength	~[Database FieldTypes]~
			Define: MinFaceSize			CopyOf MinFaceSize			~[Database FieldTypes]~
			Define: BalanceAlgorithm	CopyOf BalanceAlgorithm ~[Database FieldTypes]~ Fields: Displayname ~Balance Algorithm~ Constraints ~Default 0~
			Define: UseFleshSlopeAdjustments		CopyOf Boolean			~[Database FieldTypes]~	Fields: Displayname ~Use Flesh Slope Adjustments~
	}

	Define:			HeadAlignmentTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: HeadAlignmentPrimaryKey Using DDText
				Fields:	Text			~Constraint HeadAlignmentPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			HeadAlignment		Using DDDatabaseTableDef
		Fields:		TableName			HeadAlignment
					Fields				HeadAlignmentFields(GetObjectReference)
					TableConstraints	HeadAlignmentTableConstraints(GetObjectReference)

	Hang: HeadAlignment ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineProfilesTable()
{
	Define:			ProfilesFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 			CopyOf Name			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define:	Device			CopyOf Devices		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	Type			CopyOf ProfileType	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define: EditableSpace	CopyOf Boolean		~[Database FieldTypes]~ Fields: DisplayName ~EditableSpace~			
			Define: Path		  	CopyOf Path			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
		}

	Define:			ProfilesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProfilesPrimaryKey Using DDText
				Fields:	Text			~Constraint ProfilesPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			Profiles		Using DDDatabaseTableDef
		Fields:		TableName			Profiles
					Fields				ProfilesFields(GetObjectReference)
					TableConstraints	ProfilesTableConstraints(GetObjectReference)

	Hang: Profiles ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineBackgroundsTable()
{
	Define:			BackgroundsFields Using DDLong
		Contains:	InListOrder
		{
			Define: ID				CopyOf BGID			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	Orientation		CopyOf Rotation		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~ DisplayName ~Orientation~
			Define:	Category		CopyOf Category		~[Database FieldTypes]~	Fields: DisplayName ~Category~
			Define:	CustomerID		CopyOf CustomerID	~[Database FieldTypes]~	Fields: DisplayName ~CustomerID~
			Define:	OrderID			CopyOf OrderID		~[Database FieldTypes]~	Fields: DisplayName ~OrderID~

			Define: Path		  	CopyOf Path			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
		}

	Define:			BackgroundsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BackgroundsPrimaryKey Using DDText
				Fields:	Text			~Constraint BackgroundsPrimaryKey PRIMARY KEY(ID,Orientation)~
		}
		
	Define:		BackgroundsTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: BackgroundsCategoryIndex Using DDText
				Fields:	Text	~Create Index BackgroundsCategoryIndex on Backgrounds(Category)~
				
			Define: BackgroundsCustomerIDIndex Using DDText
				Fields:	Text	~Create Index BackgroundsCustomerIDIndex on Backgrounds(CustomerID)~
		
			Define: BackgroundsOrderIDIndex Using DDText
				Fields:	Text	~Create Index BackgroundsOrderIDIndex on Backgrounds(OrderID)~
		}

	Define:			Backgrounds		Using DDDatabaseTableDef
		Fields:		TableName			Backgrounds
					Fields				BackgroundsFields(GetObjectReference)
					Indexes				BackgroundsTableIndexes(GetObjectReference)
					TableConstraints	BackgroundsTableConstraints(GetObjectReference)

	Hang: Backgrounds ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineBackgroundTypesTable()
{
	Define:			BackgroundTypesFields Using DDLong
		Contains:	InListOrder
		{
			Define: BackgroundType	CopyOf ProdType			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~ DisplayName ~Product Type~	
		}

	Define:			BackgroundTypesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BackgroundTypesPrimaryKey Using DDText
				Fields:	Text			~Constraint BackgroundTypesPrimaryKey PRIMARY KEY(BackgroundType)~
		}

	Define:			BackgroundTypes		Using DDDatabaseTableDef
		Fields:		TableName			BackgroundTypes
					Fields				BackgroundTypesFields(GetObjectReference)
					TableConstraints	BackgroundTypesTableConstraints(GetObjectReference)

	Hang: BackgroundTypes ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineBackgroundSubjectColumnsTable()
{
	Define:	BackgroundSubjectColumnsToolTips USING DDSymbol Contains:
	{
		Define: TableName		using DDText Fields: Text STR ( Which SubjectInfo table you are identifying columns for )
		Define: ColumnName		using DDText Fields: Text STR ( Select a column in the SubjectInfo that has backgrounds information )
		Define: Type			using DDText Fields: Text STR ( Select the type of data that is in this column )

	}
	
	Hang:	BackgroundSubjectColumnsToolTips	~[STRINGS]~ ;	

	Define:			BackgroundSubjectColumnsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	TableName		CopyOf TableNameCombo	~[Database FieldTypes]~ Fields: Constraints ~Not NULL~
			Define:	ProductType		CopyOf BGColumnFor		~[Database FieldTypes]~ Fields: Constraints ~Not NULL~	
			Define:	ColumnName		CopyOf ColumnName		~[Database FieldTypes]~ Fields: Constraints ~Not NULL~		
			Define:	Type			CopyOf BGColumnType		~[Database FieldTypes]~ Fields: Constraints ~Not NULL~	
		}

	Define:		BackgroundSubjectColumnsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BackgroundSubjectColumnsPrimaryKey Using DDText
				Fields:	Text			~Constraint BackgroundSubjectColumnsPrimaryKey PRIMARY KEY(TableName,ProductType)~
		}

	Define:			BackgroundSubjectColumns	Using DDDatabaseTableDef
		Fields:		TableName			BackgroundSubjectColumns
					TableConstraints	BackgroundSubjectColumnsTableConstraints(GetObjectReference)
					Fields				BackgroundSubjectColumnsFields(GetObjectReference)

	Hang: BackgroundSubjectColumns ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineCustomerBackgroundsTable()
{
	Define:			CustomerBackgroundsFields Using DDLong
		Contains:	InListOrder
		{
			Define: CustomerID			CopyOf CustomerID			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
			Define:	ProgramID			CopyOf SlctblID				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ DisplayName ~Program ID~			
			Define:	BackgroundType		CopyOf ProdType				~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~		
			Define:	InfoType			CopyOf SubjectInfoTableName	~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define: CustBackgroundID	CopyOf SlctblID				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~ DisplayName ~Customer Background ID~	
			Define: BackgroundID		CopyOf BGID					~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~ DisplayName ~Background ID~ 	
		}

	Define:			CustomerBackgroundsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CustomerBackgroundsPrimaryKey Using DDText
				Fields:	Text			~Constraint CustomerBackgroundsPrimaryKey PRIMARY KEY(CustomerID,ProgramID,InfoType,BackgroundType,CustBackgroundID)~
		}

	Define:			CustomerBackgrounds		Using DDDatabaseTableDef
		Fields:		TableName			CustomerBackgrounds
					Fields				CustomerBackgroundsFields(GetObjectReference)
					TableConstraints	CustomerBackgroundsTableConstraints(GetObjectReference)

	Hang: CustomerBackgrounds ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineBremsonFilmDriveTable()
{
	Define:			BremsonFilmDriveFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 			CopyOf Name					~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define: Simulate	 	CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName	~Simulate~	 
			Define: PunchedFilm	 	CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName	~Punched Film~	 
			Define:	Direction		CopyOf FilmDirection		~[Database FieldTypes]~
			Define: SettleTime	 	CopyOf FilmSettleTime		~[Database FieldTypes]~
			Define: AdvanceDistance	CopyOf AdvanceDistance		~[Database FieldTypes]~
			Define: Port	 		CopyOf SerialPort			~[Database FieldTypes]~ 
			Define: RunSpeed 		CopyOf BremsonRunSpeed		~[Database FieldTypes]~
			Define: CueSpeed 		CopyOf BremsonCueSpeed		~[Database FieldTypes]~
			Define: HomeInterval 	CopyOf BremsonHomeInterval	~[Database FieldTypes]~
			Define: SetupXOffset 	CopyOf BremsonSetupXOffset	~[Database FieldTypes]~
			Define: SetupYOffset 	CopyOf BremsonSetupYOffset	~[Database FieldTypes]~
			Define: Sensor1 		CopyOf BremsonSensor1		~[Database FieldTypes]~
			Define: Sensor2 		CopyOf BremsonSensor2		~[Database FieldTypes]~
			Define: Sensor3 		CopyOf BremsonSensor3		~[Database FieldTypes]~
			Define: Sensor4 		CopyOf BremsonSensor4		~[Database FieldTypes]~
			Define: MachineType 	CopyOf BremsonMachineType	~[Database FieldTypes]~
		}

	Define:			BremsonFilmDriveTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BremsonFilmDrivePrimaryKey Using DDText
				Fields:	Text			~Constraint BremsonFilmDrivePrimaryKey PRIMARY KEY(Name)~
		}

	Define:			BremsonFilmDrive	Using DDDatabaseTableDef
		Fields:		TableName			BremsonFilmDrive
					Fields				BremsonFilmDriveFields(GetObjectReference)
					TableConstraints	BremsonFilmDriveTableConstraints(GetObjectReference)

	Hang: BremsonFilmDrive ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineHR500FilmDriveTable()
{
	Define:			HR500FilmDriveFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 				 CopyOf Name				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define: ScannerSerialNo		 CopyOf Name				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	DisplayName ~Serial Number~ LangItem ~SerialNumber~
			Define: Simulate	 		 CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName	~Simulate~
			Define:	FilmMarkType 		 CopyOf MarkingType			~[Database FieldTypes]~
			Define:	Direction			 CopyOf FilmDirection		~[Database FieldTypes]~
			Define:	StepsPerInch		 CopyOf HR500StepsPerInch			~[Database FieldTypes]~
			Define: FastSpeed			 CopyOf HR500FastSpeed				~[Database FieldTypes]~
			Define: SeekSpeed			 CopyOf HR500SeekSpeed				~[Database FieldTypes]~
			Define: LeftSensorOffset	 CopyOf HR500LeftSensorOffset		~[Database FieldTypes]~
			Define: RightSensorOffset	 CopyOf HR500RightSensorOffset		~[Database FieldTypes]~
			Define: DefaultMoveDistance	 CopyOf HR500DefaultMoveDistance	~[Database FieldTypes]~
			Define: MaxSeekDistance		 CopyOf HR500MaxSeekDistance		~[Database FieldTypes]~
			Define: MaxSyncNotchDistance CopyOf	HR500MaxSyncNotchDistance	~[Database FieldTypes]~ Fields: ColumnToolTipText Translate( ~Distance from frame notch to sync notch in inches (default .685)~ )
		}

	Define:			HR500FilmDriveTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: HR500FilmDrivePrimaryKey Using DDText
				Fields:	Text			~Constraint HR500FilmDrivePrimaryKey PRIMARY KEY(Name,ScannerSerialNo)~
		}

	Define:			HR500FilmDrive	Using DDDatabaseTableDef
		Fields:		TableName			HR500FilmDrive
					Fields				HR500FilmDriveFields(GetObjectReference)
					TableConstraints	HR500FilmDriveTableConstraints(GetObjectReference)

	Hang: HR500FilmDrive ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineHR500AFDFilmDriveTable()
{
	Define:			HR500AFDFilmDriveFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 				 CopyOf Name				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define: ScannerSerialNo		 CopyOf Name				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	DisplayName ~Serial Number~ LangItem ~SerialNumber~
			Define: Simulate	 		 CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName	~Simulate~
			Define:	FilmMarkType 		 CopyOf AFDMarkingType		~[Database FieldTypes]~ 
			Define:	Direction			 CopyOf FilmDirection		~[Database FieldTypes]~
			Define:	StepsPerInch		 CopyOf HR500StepsPerInch			~[Database FieldTypes]~
			Define: FastSpeed			 CopyOf HR500FastSpeed				~[Database FieldTypes]~
			Define: SeekSpeed			 CopyOf HR500SeekSpeed				~[Database FieldTypes]~
			Define: LeftSensorOffset	 CopyOf HR500LeftSensorOffset		~[Database FieldTypes]~
			Define: RightSensorOffset	 CopyOf HR500RightSensorOffset		~[Database FieldTypes]~
			Define: DefaultMoveDistance	 CopyOf HR500DefaultMoveDistance	~[Database FieldTypes]~
			Define: MaxSeekDistance		 CopyOf HR500MaxSeekDistance		~[Database FieldTypes]~
		}

	Define:			HR500AFDFilmDriveConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: HR500AFDFilmDrivePrimaryKey Using DDText
				Fields:	Text			~Constraint HR500AFDFilmDrivePrimaryKey PRIMARY KEY(Name,ScannerSerialNo)~
		}

	Define:			HR500AFDFilmDrive	Using DDDatabaseTableDef
		Fields:		TableName			HR500AFDFilmDrive
					Fields				HR500AFDFilmDriveFields(GetObjectReference)
					TableConstraints	HR500AFDFilmDriveConstraints(GetObjectReference)

	Hang: HR500AFDFilmDrive ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineHR500AFDSetupTable()
{
	Define:			HR500AFDSetupFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 				 CopyOf FdaSetup		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define: ExpectedLength 		 CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName	~Expected Frame Length~
																ColumnToolTipText Translate( ~Expected frame length in inches~ )
			Define:	LengthLowerBound	 CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName	~Frame Length Lower Bound~
																ColumnToolTipText Translate( ~Lower bound of expected frame length in inches~ )
			Define:	LengthUpperBound	 CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName	~Frame Length Upper Bound~
																ColumnToolTipText Translate( ~Upper bound of expected frame length in inches~ )
			Define:	MinimumLength		 CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName	~Minimum Frame Length~
																ColumnToolTipText Translate( ~Minimum acceptable frame length in inches (1/3 of expected frame length)~ )
			Define: MinimumGap			 CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName	~Minimum Interframe Gap~
																ColumnToolTipText Translate( ~Minimum interframe gap in inches (must be greater than Edge Detection Debounce)~ )
			Define: StopOnBlanks		 CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Stop on Blank Frames~
																ColumnToolTipText Translate( ~Stop when a blank frame is detected~ )
			Define: StopOnSplices		 CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Stop on Splices~
																ColumnToolTipText Translate( ~Stop when a splice is detected~ )
			Define: StopOnSplitFrame	 CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~Stop on Split Frames~
																ColumnToolTipText Translate( ~Stop when a split frame is detected~ )
			Define: EdgeDebounce		 CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName	~Edge Detection Debounce~
																ColumnToolTipText Translate( ~Debounce value for edge interrupts~ )
			Define: CameraCardPosition	 CopyOf CameraCardType	~[Database FieldTypes]~ Fields: DisplayName	~Camera Card Position~	
																ColumnToolTipText Translate( ~The camera card's position with respect to the image~ )
		}

	Define:			HR500AFDSetupTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: HR500AFDSetupPrimaryKey Using DDText
				Fields:	Text			~Constraint HR500AFDSetupPrimaryKey PRIMARY KEY(Name)~
		}

	Define:			HR500AFDSetup		Using DDDatabaseTableDef
		Fields:		TableName			HR500AFDSetup
					Fields				HR500AFDSetupFields(GetObjectReference)
					TableConstraints	HR500AFDSetupTableConstraints(GetObjectReference)

	Hang: HR500AFDSetup ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineHalseFilmDriveTable()
{
	Define:			HalseFilmDriveFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 			CopyOf Name				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define: TransportType	CopyOf HalseTransportType ~[Database FieldTypes]~
			Define: Port	 		CopyOf SerialPort		~[Database FieldTypes]~	
		}

	Define:			HalseFilmDriveTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: HalseFilmDrivePrimaryKey Using DDText
				Fields:	Text			~Constraint HalseFilmDrivePrimaryKey PRIMARY KEY(Name)~
		}

	Define:			HalseFilmDrive	Using DDDatabaseTableDef
		Fields:		TableName			HalseFilmDrive
					Fields				HalseFilmDriveFields(GetObjectReference)
					TableConstraints	HalseFilmDriveTableConstraints(GetObjectReference)

	Hang: HalseFilmDrive ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineHicksFilmDriveTable()
{
	Define:			HicksFilmDriveFields Using DDLong
		Contains:	InListOrder
		{
			Define: Name 			CopyOf Name					~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define: Simulate	 	CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName	~Simulate~
			Define: PunchedFilm	 	CopyOf Boolean				~[Database FieldTypes]~	Fields: DisplayName	~Punched Film~	 
			Define: SettleTime	 	CopyOf FilmSettleTime		~[Database FieldTypes]~
			Define: AdvanceDistance	CopyOf AdvanceDistance		~[Database FieldTypes]~
			Define: Port	 		CopyOf SerialPort			~[Database FieldTypes]~	
			Define: BaudRate 		CopyOf SerialBaud			~[Database FieldTypes]~	
			Define: ByteSize 		CopyOf SerialByteSize		~[Database FieldTypes]~	
			Define: Parity	 		CopyOf SerialParity			~[Database FieldTypes]~	
			Define: StopBits		CopyOf SerialStopBits		~[Database FieldTypes]~	
			Define: SetupXOffset 	CopyOf HicksSetupXOffset	~[Database FieldTypes]~
			Define: MinIndex		CopyOf HicksMinIndex		~[Database FieldTypes]~
			Define: MaxIndex		CopyOf HicksMaxIndex		~[Database FieldTypes]~
			Define: DataBitWindow	CopyOf HicksDataBitWindow	~[Database FieldTypes]~
			Define: SampleLength	CopyOf HicksSampleLength	~[Database FieldTypes]~
			Define: InitialOffset	CopyOf HicksInitialOffset	~[Database FieldTypes]~
			Define: FilmDriveSpeed	CopyOf HicksFilmDriveSpeed	~[Database FieldTypes]~
		}

	Define:			HicksFilmDriveTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: HicksFilmDrivePrimaryKey Using DDText
				Fields:	Text			~Constraint HicksFilmDrivePrimaryKey PRIMARY KEY(Name)~
		}

	Define:			HicksFilmDrive	Using DDDatabaseTableDef
		Fields:		TableName			HicksFilmDrive
					Fields				HicksFilmDriveFields(GetObjectReference)
					TableConstraints	HicksFilmDriveTableConstraints(GetObjectReference)

	Hang: HicksFilmDrive ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineBremsonScanListTable()
{
	Define:			BremsonScanListFields Using DDLong
		Contains:	InListOrder
		{
			Define: OrderID 		CopyOf OrderID		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define: Roll		 	CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	 
			Define: Frame		 	CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ 
			Define: YOffset			CopyOf Offset		~[Database FieldTypes]~	Fields: DisplayName	~YOffset~	 
			Define: CropOrientation	CopyOf SerialPort	~[Database FieldTypes]~ Fields: DisplayName	~Orientation~
			Define: CropCode 		CopyOf Interval		~[Database FieldTypes]~ Fields: DisplayName	~CropCode~	
			Define: FileName 		CopyOf Interval		~[Database FieldTypes]~ Fields: DisplayName	~CueSpeed~	
			Define: Density		 	CopyOf DRGB			~[Database FieldTypes]~ Fields: DisplayName	~Den~	
			Define: Red 			CopyOf DRGB			~[Database FieldTypes]~ Fields: DisplayName	~Red~	
			Define: Green 			CopyOf DRGB			~[Database FieldTypes]~ Fields: DisplayName	~Grn~	
			Define: Blue 			CopyOf DRGB			~[Database FieldTypes]~ Fields: DisplayName	~Blu~	
			Define: DeltaDensity 	CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName	~dDen~	
			Define: DeltaRed 		CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName	~dRed~	
			Define: DeltaGreen 		CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName	~dGrn~	
			Define: DeltaBlue 		CopyOf ColorOffset	~[Database FieldTypes]~ Fields: DisplayName	~dBlue~	
		}

	Define:			BremsonScanListTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BremsonScanListPrimaryKey Using DDText
				Fields:	Text			~Constraint BremsonScanListPrimaryKey PRIMARY KEY(OrderID,Roll,Frame)~
		}

	Define:			BremsonScanList	Using DDDatabaseTableDef
		Fields:		TableName			BremsonScanList
					Fields				BremsonScanListFields(GetObjectReference)
					TableConstraints	BremsonScanListTableConstraints(GetObjectReference)

	Hang: BremsonScanList ~[DATABASE TableDefinitions]~ InListOrder;

	// ~<LF><STX>12345671234123+99991H16BytesOfTextXXXDDDRRRGGGBBB-DD+RR-GG+BB~		
}


VOID DefineCalibrationTable()
{
	Define:			CalibrationFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ComputerName	CopyOf ComputerName		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~			
			Define: CalApp 			CopyOf Path				~[Database FieldTypes]~ Fields: DisplayName ~Application~ LangItem ~Application~ Constraints ~NOT NULL~	
		}

	Define:			CalibrationTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CalibrationPrimaryKey Using DDText
				Fields:	Text			~Constraint CalibrationPrimaryKey PRIMARY KEY(ComputerName)~
		}

	Define:			Calibration	Using DDDatabaseTableDef
		Fields:		TableName			Calibration
					Fields				CalibrationFields(GetObjectReference)
					TableConstraints	CalibrationTableConstraints(GetObjectReference)

	Hang: Calibration ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineViewProfilesTable()
{
	Define:			ViewProfilesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ComputerName		CopyOf ComputerName		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~			
			Define:	UserName			CopyOf User				~[Database FieldTypes]~	
			Define:	MonitorProfile		CopyOf ICCProfile		~[Database FieldTypes]~	Fields:	DisplayName	~Monitor~
			Define:	OutputProfile		CopyOf ICCProfile		~[Database FieldTypes]~	Fields:	DisplayName	~Output Viewing~
			Define:	WorkingSpaceProfile	CopyOf ICCProfile		~[Database FieldTypes]~	Fields:	DisplayName	~Working Space~
			Define:	DefaultInputProfile	CopyOf ICCProfile		~[Database FieldTypes]~	Fields:	DisplayName	~Default Input~
			Define:	DefaultColorProfile	CopyOf ICCProfile		~[Database FieldTypes]~	Fields:	DisplayName	~Default Color~
			// used for rendering intent of output side of output profile
			Define:	PrintingRenderingIntent	CopyOf RenderingIntent	~[Database FieldTypes]~ Fields: Constraints ~Default 0~	DisplayName ~Printing Rendering Intent~ LangSection	Fieldtypes LangItem ~PrintingRenderingIntent~
			// used for rendering intent of input side of output profile
			Define:	SoftProofRenderingIntent CopyOf RenderingIntent	~[Database FieldTypes]~	Fields: Constraints ~Default 0~ DisplayName ~Soft Proof Rendering Intent~ LangSection Fieldtypes LangItem ~SoftProofRenderingIntent~
		}

	Define:			ViewProfilesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ViewProfilesPrimaryKey Using DDText
				Fields:	Text			~Constraint ViewProfilesPrimaryKey PRIMARY KEY(ComputerName,UserName)~
		}

	Define:			ViewProfiles	Using DDDatabaseTableDef
		Fields:		TableName			ViewProfiles
					Fields				ViewProfilesFields(GetObjectReference)
					TableConstraints	ViewProfilesTableConstraints(GetObjectReference)

	Hang: ViewProfiles ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineUserPrefsTable()
{
	Define:			UserPrefsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	UserName				CopyOf User			~[Database FieldTypes]~	Fields:	DisplayName	~User~
			Define:	ShowBoxes				CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~NodeBoxes~
			Define:	ShowPrompts				CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~ShowPrompts~
			Define:	ShowBackground			CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~ShowBackground~
			Define:	ShowMasks				CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~ShowMasks~
			Define:	ShowFrames				CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~ShowFrames~
			Define:	ShowText				CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~ShowText~
			Define:	ShowImages				CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~ShowImages~
			Define:	ShowInfo				CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~ShowInfo~
			Define:	HighestResolution		CopyOf BooleanTF	~[Database FieldTypes]~	Fields:	DisplayName	~UseHighestResolution~
		}

	Define:			UserPrefsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: UserPrefsPrimaryKey Using DDText
				Fields:	Text			~Constraint UserPrefsPrimaryKey PRIMARY KEY(UserName)~
		}

	Define:			UserPrefs	Using DDDatabaseTableDef
		Fields:		TableName			UserPrefs
					Fields				UserPrefsFields(GetObjectReference)
					TableConstraints	UserPrefsTableConstraints(GetObjectReference)

	Hang: UserPrefs ~[DATABASE TableDefinitions]~ InListOrder;
}




VOID DefinePackageDefinitionTable()
{
	Define:			PackageDefinitionFields Using DDLong
		Contains:	InListOrder
		{
			Define:	PackageID				CopyOf PackageID	~[Database FieldTypes]~
			Define:	Description				CopyOf Description	~[Database FieldTypes]~
			Define:	CropCode				CopyOf CropCode		~[Database FieldTypes]~
			Define:	ProductID				CopyOf ProductID	~[Database FieldTypes]~
		}

	Define:			PackageDefinitionTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PackageDefinitionPrimaryKey Using DDText
				Fields:	Text			~Constraint PackageDefinitionPrimaryKey PRIMARY KEY(PackageID)~
		}

	Define:			PackageDefinition	Using DDDatabaseTableDef
		Fields:		TableName			PackageDefinition
					Fields				PackageDefinitionFields(GetObjectReference)
					TableConstraints	PackageDefinitionTableConstraints(GetObjectReference)

	Hang: PackageDefinition ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefinePackageUnitsTable()
{
	Define:			PackageUnitsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID						CopyOf PackageID	~[Database FieldTypes]~
			Define:	Sequence				CopyOf Sequence		~[Database FieldTypes]~		
			Define:	UnitID					CopyOf ID			~[Database FieldTypes]~
			Define:	CropCode				CopyOf CropCode		~[Database FieldTypes]~
			Define:	Quantity				CopyOf Quantity		~[Database FieldTypes]~	
		}

	Define:			PackageUnitsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PackageUnitsPrimaryKey Using DDText
				Fields:	Text			~Constraint PackageUnitsPrimaryKey PRIMARY KEY(ID,Sequence)~
		}

	Define:			PackageUnits	Using DDDatabaseTableDef
		Fields:		TableName			PackageUnits
					Fields				PackageUnitsFields(GetObjectReference)
					TableConstraints	PackageUnitsTableConstraints(GetObjectReference)

	Hang: PackageUnits ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefinePrintUnitTable()		// COMPONENTS OF AN "OPTICAL LIKE" PACKAGE
{
	Define:			PrintUnitFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID						CopyOf ID			~[Database FieldTypes]~	Fields:	DisplayName	~Print Unit~
			Define:	Description				CopyOf Description	~[Database FieldTypes]~	
			Define:	Quantity				CopyOf LongValue	~[Database FieldTypes]~	Fields:	DisplayName	~Qty~
			Define:	SizeCode				CopyOf LongValue	~[Database FieldTypes]~	Fields:	DisplayName	~Size~
			Define:	Orientation				CopyOf LongValue	~[Database FieldTypes]~	Fields:	DisplayName	~Orientation~
			Define:	CropCode				CopyOf CropCode		~[Database FieldTypes]~ 
			Define:	Treatment1				CopyOf TreatmentID	~[Database FieldTypes]~ Fields:	DisplayName	~Treatment1~
			Define:	Treatment2				CopyOf TreatmentID	~[Database FieldTypes]~ Fields:	DisplayName	~Treatment2~
			Define:	Treatment3				CopyOf TreatmentID	~[Database FieldTypes]~ Fields:	DisplayName	~Treatment3~
			Define:	Treatment4				CopyOf TreatmentID	~[Database FieldTypes]~ Fields:	DisplayName	~Treatment4~
			Define:	ProductID				CopyOf ProductID	~[Database FieldTypes]~
		}

	Define:			PrintUnitTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrintUnitPrimaryKey Using DDText
				Fields:	Text			~Constraint PrintUnitPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			PrintUnit			Using DDDatabaseTableDef
		Fields:		TableName			PrintUnit
					Fields				PrintUnitFields(GetObjectReference)
					TableConstraints	PrintUnitTableConstraints(GetObjectReference)

	Hang: PrintUnit ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineTreatmentsTable()	// EFFECTS TO BE APPLIED TO THE PRINTS
{
	Define:			TreatmentsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID						CopyOf TreatmentID	~[Database FieldTypes]~
			Define:	Description				CopyOf Description	~[Database FieldTypes]~	
		}

	Define:			TreatmentsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: TreatmentsPrimaryKey Using DDText
				Fields:	Text			~Constraint TreatmentsPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			Treatments			Using DDDatabaseTableDef
		Fields:		TableName			Treatments
					Fields				TreatmentsFields(GetObjectReference)
					TableConstraints	TreatmentsTableConstraints(GetObjectReference)

	Hang: Treatments ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineShooterUnitsTable()	// EFFECTS TO BE APPLIED TO THE PRINTS
{
	Define:			ShooterUnitsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID						CopyOf ID					~[Database FieldTypes]~ 
			Define:	Description				CopyOf Description			~[Database FieldTypes]~
			Define: Size1					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Size1~)	
			Define: Size2					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Size2~)
			Define: Size3					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Size3~)
			Define: Size4					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Size4~)
			Define: Size5					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Size5~)
			Define: Size6					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Size6~)
			Define: Split1					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Split1~)
			Define: Split2					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Split2~)
			Define: Split3					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Split3~)
			Define: Split4					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Split4~)
			Define: Split5					CopyOf SelectableProductID	~[Database FieldTypes]~	Fields:	DisplayName	Translate(~Split5~)
		}

	Define:			ShooterUnitsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ShooterUnitsPrimaryKey Using DDText
				Fields:	Text			~Constraint ShooterUnitsPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			ShooterUnits		Using DDDatabaseTableDef
		Fields:		TableName			ShooterUnits
					Fields				ShooterUnitsFields(GetObjectReference)
					TableConstraints	ShooterUnitsTableConstraints(GetObjectReference)

	Hang: ShooterUnits ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineBremsonCustomersTable()
{
	Define:			CustomersFields Using DDLong
		Contains:	InListOrder
		{
			Define: ID	 					CopyOf BremsonCustomerID	~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define:	dPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~dPref~
			Define:	rPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~rPref~
			Define:	gPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~gPref~
			Define:	bPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~bPref~
			Define:	glassine_writer_layout	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~glassine_writer_layout~
			Define:	paperback_writer_layout	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~paperback_writer_layout~
			Define:	frame_sequence_mode		CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~frame_sequence_mode~
			Define:	Copyright				CopyOf Copyright			~[Database FieldTypes]~	Fields: DisplayName	~Copyright~
			Define:	order_type				CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~order_type~
			Define:	film_type				CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~film_type~
		}

	Define:			CustomersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: CustomersPrimaryKey Using DDText
				Fields:	Text			~Constraint CustomersPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			Customers			Using DDDatabaseTableDef
		Fields:		TableName			Customers
					Fields				CustomersFields(GetObjectReference)
					TableConstraints	CustomersTableConstraints(GetObjectReference)

	Hang: Customers ~[DATABASE BremsonTableDefinitions]~ InListOrder;
}


VOID DefineBremsonRollsTable()
{
	Define:			RollsFields Using DDLong
		Contains:	InListOrder
		{
			Define: BatchID	 				CopyOf BremsonBatchID		~[Database FieldTypes]~ 	
			Define: Sequence	 			CopyOf Sequence				~[Database FieldTypes]~	Fields: DisplayName	~Sequence~
			Define: OrderID		 			CopyOf BremsonOrderID		~[Database FieldTypes]~
			Define: Roll		 			CopyOf BremsonRollID		~[Database FieldTypes]~

			Define: Description		 		CopyOf BremsonRollDescription ~[Database FieldTypes]~
			Define: attached_frames		 	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~attached_frames~
			Define: attached_remakes		CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~attached_remakes~
			Define: marks		 			CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~marks~
			Define: editor_number		 	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~editor_number~
			Define: editor_operator_number	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~editor_operator_number~
			Define: analyzer_number		 	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~analyzer_number~
			Define: analyzer_operator_number CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~analyzer_operator_number~
			
			Define:	aDen					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aDen~
			Define:	aRed					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aRed~
			Define:	aGrn					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aGrn~
			Define:	aBlu					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aBlu~

			Define:	cDen					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cDen~
			Define:	cRed					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cRed~
			Define:	cGrn					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cGrn~
			Define:	cBlu					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cBlu~

			Define:	cCnt					CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~cCnt~
			Define:	FilmType				CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~FilmType~
			Define:	FilmSize				CopyOf LongValue			~[Database FieldTypes]~ Fields: DisplayName	~FilmSize~
			Define:	FilmFormat				CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~FilmFormat~
		}

	Define:			RollsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RollsPrimaryKey Using DDText
				Fields:	Text			~Constraint RollsPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			Rolls				Using DDDatabaseTableDef
		Fields:		TableName			Rolls
					Fields				RollsFields(GetObjectReference)
					TableConstraints	RollsTableConstraints(GetObjectReference)

	Hang: Rolls ~[DATABASE BremsonTableDefinitions]~ InListOrder;
}


VOID DefineBremsonFramesTable()
{
	Define:			FramesFields Using DDLong
		Contains:	InListOrder
		{
			Define: BatchID	 				CopyOf BremsonBatchID		~[Database FieldTypes]~ 	
			Define: Sequence	 			CopyOf Sequence				~[Database FieldTypes]~	Fields: DisplayName	~Order Seq~ LangItem ~OrderSeq~
			Define: OrderID		 			CopyOf BremsonOrderID		~[Database FieldTypes]~
			Define: Roll		 			CopyOf BremsonRollID		~[Database FieldTypes]~
			Define: RollSeq	 				CopyOf Sequence				~[Database FieldTypes]~	Fields: DisplayName	~Roll Seq~ LangItem ~RollSeq~
			Define: Frame		 			CopyOf BremsonFrameID		~[Database FieldTypes]~
			Define: FrameSeq	 			CopyOf Sequence				~[Database FieldTypes]~	Fields: DisplayName	~Frame Seq~ LangItem ~FrameSeq~
			Define: PunchPos		 		CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~PunchPos~
			Define: Status		 			CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~Status~
			Define: Punch		 			CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~Punch~
			Define: sequence_id		 		CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~sequence_id~			
			Define: Description		 		CopyOf BremsonRollDescription ~[Database FieldTypes]~		
			Define: PunchError		 		CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~PunchError~
			Define: XOffset					CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~XOffset~
			Define: YOffset		 			CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~YOffset~
			Define: Mark		 			CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~Mark~
			Define: Ratio1					CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~Ratio1~
			Define: Ratio2					CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~Ratio2~		
			Define: analyzer_number		 	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~analyzer_number~
			Define: analyzer_operator_number CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~analyzer_operator_number~			
			Define:	aDen					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aDen~
			Define:	aRed					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aRed~
			Define:	aGrn					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aGrn~
			Define:	aBlu					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~aBlu~
			Define:	cDen					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cDen~
			Define:	cRed					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cRed~
			Define:	cGrn					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cGrn~
			Define:	cBlu					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~cBlu~
			Define:	cCnt					CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~cCnt~
			Define:	Samples					CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~Samples~	
			Define:	FilmType				CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~FilmType~
			Define:	FilmSize				CopyOf LongValue			~[Database FieldTypes]~ Fields: DisplayName	~FilmSize~
			Define:	FilmFormat				CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~FilmFormat~
			Define: AlternateID		 		CopyOf BremsonAlternateID	~[Database FieldTypes]~
		}

	Define:			FramesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RollsPrimaryKey Using DDText
				Fields:	Text			~Constraint FramesPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			Frames				Using DDDatabaseTableDef
		Fields:		TableName			Frames
					Fields				FramesFields(GetObjectReference)
					TableConstraints	FramesTableConstraints(GetObjectReference)

	Hang: Frames ~[DATABASE BremsonTableDefinitions]~ InListOrder;
}


VOID DefineBremsonOrdersTable()
{
	Define:			OrdersFields Using DDLong
		Contains:	InListOrder
		{
			Define: BatchID	 				CopyOf BremsonBatchID		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define:	Sequence				CopyOf LongValue			~[Database FieldTypes]~ Fields: DisplayName	~Sequence~
			Define: ID	 					CopyOf BremsonOrderID		~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~	
			Define: CustomerID	 			CopyOf BremsonCustomerID	~[Database FieldTypes]~
			Define:	OrderType				CopyOf BremsonOrderType		~[Database FieldTypes]~	
			Define:	FilmType				CopyOf BremsonFilmType		~[Database FieldTypes]~
			Define:	FilmFormat				CopyOf BremsonFilmFormat	~[Database FieldTypes]~
			Define:	FilmSize				CopyOf BremsonFilmSize		~[Database FieldTypes]~

			Define:	RollCount				CopyOf BremsonRollCount		~[Database FieldTypes]~
			Define:	FrameCount				CopyOf BremsonFrameCount	~[Database FieldTypes]~
			Define:	dPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~dPref~
			Define:	rPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~rPref~
			Define:	gPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~gPref~
			Define:	bPref					CopyOf ColorOffset			~[Database FieldTypes]~	Fields: DisplayName	~bPref~
			Define:	paperback_writer_layout	CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~paperback_writer_layout~
			Define:	frame_sequence_mode		CopyOf LongValue			~[Database FieldTypes]~	Fields: DisplayName	~frame_sequence_mode~
			Define:	Copyright				CopyOf BremsonCopyright		~[Database FieldTypes]~	Fields: DisplayName	~Copyright~
			Define:	Description				CopyOf BremsonOrderDescription	~[Database FieldTypes]~
		}

	Define:			OrdersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: OrdersPrimaryKey Using DDText
				Fields:	Text			~Constraint OrdersPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			Orders			Using DDDatabaseTableDef
		Fields:		TableName			Orders
					Fields				OrdersFields(GetObjectReference)
					TableConstraints	OrdersTableConstraints(GetObjectReference)

	Hang: Orders ~[DATABASE BremsonTableDefinitions]~ InListOrder;
}


VOID DefineDatabaseInfoTable()
{
	Define:			DatabaseInfoFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Version			CopyOf LongValue ~[Database FieldTypes]~			
		}

	Define:			DatabaseInfo	Using DDDatabaseTableDef
		Fields:		TableName		DatabaseInfo
					Fields			DatabaseInfoFields(GetObjectReference)

	Hang: DatabaseInfo ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineLocalDatabaseInfoTable()
{
	Define:			LocalDatabaseInfoFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Version				CopyOf LongValue	~[Database FieldTypes]~		
		}

	Define:			LocalDatabaseInfo	Using DDDatabaseTableDef
		Fields:		TableName			LocalDatabaseInfo
					Fields				LocalDatabaseInfoFields(GetObjectReference)

	Hang: LocalDatabaseInfo ~[DATABASE LocalTableDefinitions]~ InListOrder;
}


VOID DefineReportQueueInfoTable()
{
	Define:	ReportQueueToolTips USING DDSymbol Contains:
	{
		Define:	URL			using DDText Fields: Text STR ( if the first non blank character is a <  than the data is assumed to be raw html as in <html>.  Otherwise it is assumed to be a URL )
		Define: SubmitDate	using DDText Fields: Text STR ( You may select a time in the future if you would like the report to print later );
	}
		
	Hang:	ReportQueueToolTips	~[STRINGS]~ ;

	Define:			ReportQueueFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Computer			CopyOf ComputerName		~[Database FieldTypes]~	
			Define: Instance			CopyOf ID				~[Database FieldTypes]~  Fields: DisplayName	~Instance~ 	Constraints ~NOT NULL~
			Define:	SubmitDate			CopyOf SortableDateTime	~[Database FieldTypes]~	 Fields: DisplayName	~Submit Date~ LangItem ~SubmitDate~ Constraints ~NOT NULL~ DisplayWidth 20						
			Define: URL					CopyOf MultiLineLongText ~[Database FieldTypes]~ Fields: DisplayName	~URL or HTML~ Constraints ~NOT NULL~ DisplayWidth 60
		}

	Define:		ReportQueueTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ReportQueuePrimaryKey Using DDText
				Fields:	Text			~Constraint ReportQueuePrimaryKey PRIMARY KEY(Computer,Instance,SubmitDate)~
		}

	Define:			ReportQueue	Using DDDatabaseTableDef
		Fields:		TableName			ReportQueue
					Fields				ReportQueueFields(GetObjectReference)
					TableConstraints	ReportQueueTableConstraints(GetObjectReference)

	Hang: ReportQueue ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineGridDefinitionTable()
{
	Define:			GridDefinitionFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ID		~[Database FieldTypes]~	Fields: DisplayName	~Product ID~
			Define:	PatternPath			CopyOf Path		~[Database FieldTypes]~	Fields: DisplayName	~Pattern Path~ LangItem ~PatternPath~				
			Define:	BackgroundHeight	CopyOf DoubleValue ~Database FieldTypes]~ Fields: DisplayName	~Background Height~          
			Define:	BackgroundWidth		CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Background Width~          
			Define:	BottomMargin		CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Bottom Margin~         
			Define:	HoldAspectRatio		CopyOf LongValue ~Database FieldTypes]~	  Fields: DisplayName	~Hold Aspect Ratio~           
			Define:	HorizGap			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Minimum Horizontal Gap~               
			Define:	IsImageNode			CopyOf Boolean ~Database FieldTypes]~    Fields: DisplayName	~Image Node~        
			Define:	IsTextNode			CopyOf Boolean ~Database FieldTypes]~   Fields: DisplayName	~Text Node~         
			Define:	ProductLayoutPath	CopyOf Path			~[Database FieldTypes]~	Fields: DisplayName	~Product Path~ LangItem ~ProductPath~	
			Define:	LeftMargin			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Left Margin~           
			Define:	MaxHeight			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Maximum Height~           
			Define:	MaxWidth			CopyOf DoubleValue ~Database FieldTypes]~   Fields: DisplayName	~Maximum Width~          
			Define:	NodeStyle			CopyOf ProductID ~[Database FieldTypes]~	Fields: DisplayName	~Style Countable~	
			Define:	NodeStyleText		CopyOf ProductID ~[Database FieldTypes]~	Fields: DisplayName	~Style Title/text~	
			Define:	NodeStyleIcon		CopyOf ProductID ~[Database FieldTypes]~	Fields: DisplayName	~Style Image/Icon~	
			Define:	NodeStyleIPlusT		CopyOf ProductID ~[Database FieldTypes]~	Fields: DisplayName	~Style Image+Text~	
			Define:	BackgroundImageFilePath		CopyOf Path ~[Database FieldTypes]~	Fields: DisplayName	~Background Image~ LangItem ~BackgroundImage~
			Define:	RightMargin			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Right Margin~           
			Define:	TextHeight			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Text Node Height %~          
			Define:	TextLeft			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Horizontal Text Gap %~           
			Define:	TextTop				CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Text Text Gap %~           
			Define:	TextWidth			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Text Node Width %~           
			Define:	TopMargin			CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Top Margin~           
			Define:	VertGap				CopyOf DoubleValue ~Database FieldTypes]~  Fields: DisplayName	~Minimum Vertical Gap~           
			Define:	Units				CopyOf Units ~[Database FieldTypes]~  Fields: DisplayName	~Units~           
		}

	Define:		GridDefinitionTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: GridDefinitionPrimaryKey Using DDText
				Fields:	Text			~Constraint GridDefinitionPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			GridDefinition	Using DDDatabaseTableDef
		Fields:		TableName			GridDefinition
					//Indexes			GridDefinitionTableIndexes(GetObjectReference)
					TableConstraints	GridDefinitionTableConstraints(GetObjectReference)
					Fields				GridDefinitionFields(GetObjectReference)

	Hang: GridDefinition ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineDCQueueTable()
{
	Define:			DCQueueFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~ ReadOnly ~T~

			Define:	BatchID			CopyOf BatchID			~[Database FieldTypes]~	Fields: ReadOnly ~T~

			Define:	OutputTypeID				CopyOf DigitalCameraSaveFileType	~[Database FieldTypes]~	Fields: ReadOnly ~T~
			Define:	JPEGQualityID				CopyOf JPEGQuality					~[Database FieldTypes]~	Fields: ReadOnly ~T~

 			Define:	MaxOutputDimensionID		CopyOf MaximumOutputDimension		~[Database FieldTypes]~	Fields: ReadOnly ~T~
			Define:	Priority					CopyOf PriorityType		~[Database FieldTypes]~	Fields: ReadOnly ~T~
			Define:	Computer					CopyOf ComputerName		~[Database FieldTypes]~	Fields: ReadOnly ~T~
			Define:	Processor					CopyOf ComputerName		~[Database FieldTypes]~	Fields: DisplayName	~Background Processor~ ReadOnly ~T~

			Define:	SrcPicPathID			CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Source Picture Path~ ReadOnly ~T~
			Define:	OutputPicPathID			CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Output Picture Path~ ReadOnly ~T~
			Define:	LowResPicPathID			CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Low-Res Picture Path~ ReadOnly ~T~

			Define:	InputProfPathID			CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Input Profile Path~ ReadOnly ~T~
			Define:	WorkingSpaceProfName	CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Working Space Profile Name~ ReadOnly ~T~

			Define:	EnableRawFileSharpening CopyOf Boolean		~[Database FieldTypes]~ Fields: DisplayName	~Enable Camera Sharpening~		Constraints	~Default 0~ ReadOnly ~T~
			Define:	OverrideDeltaSharpening	CopyOf Boolean		~[Database FieldTypes]~ Fields: DisplayName	~Override Delta Sharpening~		Constraints	~Default 0~ ReadOnly ~T~
			Define:	DeltaSharpeningValue	CopyOf Sharpen		~[Database FieldTypes]~ Fields: DisplayName	~Delta Sharpening Override Value~		Constraints	~Default 0~ ReadOnly ~T~
		}

	Define:			DCQueueConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DCQueuePrimaryKey Using DDText
				Fields:	Text			~Constraint DCQueuePrimaryKey PRIMARY KEY(OrderID, Roll, Frame)~
		}

	Define:			DCQueue						Using DDDatabaseTableDef
		Fields:		TableName					DCQueue
					Fields						DCQueueFields(GetObjectReference)
					TableConstraints			DCQueueConstraints(GetObjectReference)

	Hang: DCQueue ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineDCProfilesTable()
{
	Define:			DCProfilesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID					CopyOf ID	~[Database FieldTypes]~ Fields: DisplayName	~ID~
			Define:	EquipmentMake		CopyOf CameraMake	~[Database FieldTypes]~ Fields: DisplayName	~Camera Make~
			Define:	EquipmentModel		CopyOf CameraModel	~[Database FieldTypes]~ Fields: DisplayName	~Camera Model~
			Define:	ProfilePath			CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Path~ Constraints	~NOT NULL~

			Define:	ColorSpace			CopyOf ColorSpace	~[Database FieldTypes]~ Fields: DisplayName	~Color Space~
			Define:	Illuminant			CopyOf DigitalCameraIlluminant		~[Database FieldTypes]~

			Define:	Type				CopyOf DCProfileType	~[Database FieldTypes]~ Fields: Constraints	~Default 'Input' NOT NULL~

			Define:	Description			CopyOf LongText		~[Database FieldTypes]~ Fields: DisplayName	~Profile Description~
		}

	Define:			DCProfilesConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DCProfilesPrimaryKey Using DDText
				Fields:	Text			~Constraint DCProfilesPrimaryKey PRIMARY KEY(ID)~
		}

	Define:			DCProfiles					Using DDDatabaseTableDef
		Fields:		TableName					DCProfiles
					Fields						DCProfilesFields(GetObjectReference)
					TableConstraints			DCProfilesConstraints(GetObjectReference)

	Hang: DCProfiles ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineDCImagePropertiesTable()
{
	Define:			DCImagePropertiesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID		CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	Roll		CopyOf Roll			~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~				
			Define:	Frame		CopyOf Frame		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	
	
			Define:	ExposureGainID				CopyOf ExposureGain		~[Database FieldTypes]~	Fields:	Constraints ~Default -20~
			Define:	BaseIlluminantID			CopyOf BaseIlluminant	~[Database FieldTypes]~

//			REMOVED WHITE POINT 3/21/03 - MPIRZ - might need it in the future
//			Define:	WhitePointID				CopyOf WhitePoint		~[Database FieldTypes]~	Fields:	Constraints ~Default -1~

			Define:	LookProfPathID				CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName	~Look Profile Path~

			Define:	BalanceTypeID				CopyOf BalanceType		~[Database FieldTypes]~

			// White Balance RGB Triplet
			Define:	WhiteBalanceRed				CopyOf DigitalCameraRGB		~[Database FieldTypes]~	Fields: DisplayName	~Red~
			Define:	WhiteBalanceGreen			CopyOf DigitalCameraRGB		~[Database FieldTypes]~ Fields: DisplayName	~Green~
			Define:	WhiteBalanceBlue			CopyOf DigitalCameraRGB		~[Database FieldTypes]~ Fields: DisplayName	~Blue~

			// Click Balance RGB Triplet
			Define:	ClickBalanceRed				CopyOf DigitalCameraRGB		~[Database FieldTypes]~	Fields: DisplayName	~Click Red~		Constraints ~Default -1~
			Define:	ClickBalanceGreen			CopyOf DigitalCameraRGB		~[Database FieldTypes]~ Fields: DisplayName	~Click Green~	Constraints ~Default -1~
			Define:	ClickBalanceBlue			CopyOf DigitalCameraRGB		~[Database FieldTypes]~ Fields: DisplayName	~Click Blue~	Constraints ~Default -1~

			// Amount, Radius and Threshold are the new sharpening parameters
			Define:	SharpenAmountID				CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Sharpening Amount~ Constraints ~Default -1~
			Define:	SharpenRadiusID				CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Sharpening Radius~ Constraints ~Default -1~
			Define:	SharpenThresholdID			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Sharpening Threshold~ Constraints ~Default -1~

// This field has been removed.
//			Define:	SharpenStrengthID			CopyOf SharpenStrength	~[Database FieldTypes]~	Fields: DisplayName	~Old Sharpening Strength~
			
			Define:	NoiseFilterTypeID			CopyOf NoiseFilter		~[Database FieldTypes]~
			Define:	NoiseFilterStrengthID		CopyOf MoireStrength	~[Database FieldTypes]~	Fields: DisplayName	~Noise Reduction Strength/Threshold~ Constraints ~Default 100~
			Define:	NoiseFilterRadiusID			CopyOf DoubleValue	~[Database FieldTypes]~	Fields: DisplayName	~Noise Reduction Radius~ Constraints ~Default -1~
		}

	Define:			DCImagePropertiesConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DCImagePropertiesPrimaryKey Using DDText
				Fields:	Text			~Constraint DCImagePropertiesPrimaryKey PRIMARY KEY(OrderID, Roll, Frame)~
		}

	Define:			DCImageProperties		Using DDDatabaseTableDef
		Fields:		TableName					DCImageProperties
					Fields						DCImagePropertiesFields(GetObjectReference)
					TableConstraints			DCImagePropertiesConstraints(GetObjectReference)

	Hang: DCImageProperties ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineImportImagesSetupsTable()
{
	Define:			ImportImagesSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Setup 					CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName	~Setup Name~	ReadOnly ~T~
			Define:	EnableProfile			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Specify Input Profile~		Constraints	~Default 0~ ReadOnly ~T~
			Define:	ProfileName				CopyOf Name				~[Database FieldTypes]~ Fields: DisplayName	~Input Profile Name~ LangItem ~InputProfileName~ Constraints	~Default NULL~ ReadOnly ~T~
			Define:	UseEmbeddedProfile		CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Use Embedded Input Profile~ Constraints	~Default 1~ ReadOnly ~T~
			Define:	MakeWritable			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Make Images Writeable~		Constraints	~Default 1~ ReadOnly ~T~
			Define:	CheckKodakRaw			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Check *.tif for Kodak Raw~	Constraints	~Default 1~ ReadOnly ~T~
			Define: SharpenDelta			CopyOf Sharpen			~[Database FieldTypes]~ Fields: DisplayName ~Delta Sharpening Value~ Constraints	~Default 0~ ReadOnly ~T~
			Define:	OrderStatus				CopyOf OrderStatus		~[Database FieldTypes]~ Fields: DisplayName	~Order Status~ LangItem ~OrderStatus~ Constraints	~Default 'Adjust'~ ReadOnly ~T~
			Define:	LutIndex				CopyOf LutIndex			~[Database FieldTypes]~	Fields: DisplayName	~Lut Index~				Constraints ~Default 10~	
//			Define:	BackupERI				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Backup ERI Images~		Constraints	~Default 1~ ReadOnly ~T~
//			Define:	BackupOther				CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Backup Other Images~	Constraints	~Default 1~ ReadOnly ~T~
		}

	Define:			ImportImagesSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImportImagesSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint ImportImagesSetupsPrimaryKey PRIMARY KEY(Setup)~
		}

	Define:			ImportImagesSetups	Using DDDatabaseTableDef
		Fields:		TableName			ImportImagesSetups
					Fields				ImportImagesSetupsFields(GetObjectReference)
					TableConstraints	ImportImagesSetupsTableConstraints(GetObjectReference)

	Hang: ImportImagesSetups ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineDigitalCameraSetupsTable()
{
	Define:			DigitalCameraSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define: Setup 					CopyOf ScanSetupName		~[Database FieldTypes]~ Fields: DisplayName	~Setup Name~		ReadOnly ~T~
			Define:	SaveFileType			CopyOf SaveFileTypeText		~[Database FieldTypes]~ Fields: DisplayName	~File Type~			Constraints	~Default 'TIFF'~ ReadOnly ~T~
			Define:	FileExtension			CopyOf Extension			~[Database FieldTypes]~ Fields: DisplayName	~File Extension~	Constraints	~Default '.tif'~ ReadOnly ~T~
			Define:	JPEGQuality				CopyOf JPEGQuality			~[Database FieldTypes]~ Fields: DisplayName	~JPEG Quality~		Constraints	~Default 0~ ReadOnly ~T~

			Define:	EnableRawFileSharpening CopyOf Boolean				~[Database FieldTypes]~ Fields: DisplayName	~Enable Camera Sharpening~		Constraints	~Default 0~ ReadOnly ~T~
			Define:	OverrideDeltaSharpening	CopyOf Boolean				~[Database FieldTypes]~ Fields: DisplayName	~Override Delta Sharpening~		Constraints	~Default 0~ ReadOnly ~T~
			Define:	DeltaSharpeningValue	CopyOf Sharpen				~[Database FieldTypes]~ Fields: DisplayName	~Delta Sharpening Override Value~		Constraints	~Default 0~ ReadOnly ~T~

			Define:	UseWorkingspaceProfile	CopyOf Boolean				~[Database FieldTypes]~ Fields: DisplayName	~Use DP2 Working Space Profile~	Constraints	~Default 0~ ReadOnly ~T~
			Define:	AlternateOutputProfile	CopyOf ICCProfile			~[Database FieldTypes]~ Fields: DisplayName	~Alternate Profile~		ReadOnly ~T~
		}

	Define:			DigitalCameraSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DigitalCameraSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint DigitalCameraSetupsPrimaryKey PRIMARY KEY(Setup)~
		}

	Define:			DigitalCameraSetups	Using DDDatabaseTableDef
		Fields:		TableName			DigitalCameraSetups
					Fields				DigitalCameraSetupsFields(GetObjectReference)
					TableConstraints	DigitalCameraSetupsTableConstraints(GetObjectReference)

	Hang: DigitalCameraSetups ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineRImageTable()
{
	Define:	RImageToolTips USING DDSymbol Contains:
	{
		Define:	Program				using DDText Fields: Text STR ( Select which instance of <$App.Name> the auto start applies to. Leave blank if all. You can also leave this blank if running only one instance of <$App.Name>. )
	}
		
	Hang:	RImageToolTips	~[STRINGS]~ ;

	Define:			RImageFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID							CopyOf OrderID				~[Database FieldTypes]~	 Fields: DisplayName ~Writer~ LangItem ~Writer~
			Define: Computer					CopyOf ComputerName			~[Database FieldTypes]~	 Fields: DisplayName ~Driving Computer~
			Define: ProgramPath					CopyOf Path					~[Database FieldTypes]~  Fields: DisplayName ~Program Path~ LangItem ~ProgramPath~ ColumnToolTipText Translate( RImageToolTips,Program )	Constraints ~NOT NULL~
			
			Define: Server						CopyOf ComputerName			~[Database FieldTypes]~	 Fields: DisplayName ~Media Burning Computer~
			Define: SoftwareVersion				CopyOf RImageSoftwareVersion ~[Database FieldTypes]~

			Define:	AutoStart					CopyOf Boolean				~[Database FieldTypes]~	 Fields: DisplayName ~Auto Start~	Constraints ~Default 0~
			Define:	Log							CopyOf Boolean				~[Database FieldTypes]~	 Fields: DisplayName ~Enable Logging~ Constraints ~Default 1~

			Define:	MaxBuilds					CopyOf Count				~[Database FieldTypes]~	 Fields: DisplayName ~Max Simultaneous Builds~ Constraints ~Default 1~

			Define:	ImagingOrderFile			CopyOf Path					~[Database FieldTypes]~	 Fields: DisplayName ~Image Order File~ LangItem ~ImageOrderFile~
			Define:	ProductionOrderFile			CopyOf Path					~[Database FieldTypes]~	 Fields: DisplayName ~Production Order File~ LangItem ~ProductionOrderFile~

			Define:	DiskImagingOrderFile		CopyOf Path					~[Database FieldTypes]~	 Fields: DisplayName ~Diskette Imaging Order File~ LangItem ~DisketteImagingOrderFile~
			Define:	DiskProductionOrderFile		CopyOf Path					~[Database FieldTypes]~	 Fields: DisplayName ~Diskette Production Order File~ LangItem ~DisketteProductionOrderFile~

			Define:	ImagePath					CopyOf Path					~[Database FieldTypes]~	 Fields: DisplayName ~Image Construction Path~ LangItem ~ImageConstructionPath~
			
			Define:	LogFilePath					CopyOf Path					~[Database FieldTypes]~	 Fields: DisplayName ~Log File Path~ LangItem ~LogFilePath~

		if ( RunningVersion( 6.1 ) && 0 )
		{
			Define:	CDMediaAvailable			CopyOf Boolean				~[Database FieldTypes]~	 Fields: DisplayName ~CD Media Available~	Constraints ~Default 1~
			Define: CDMediaStorageCapacity		CopyOf CDStorageCapacity	~[Database FieldTypes]~  Fields: DisplayName ~CD Storage Capacity~	Constraints ~Default 0~

			Define:	DVDMediaAvailable			CopyOf Boolean				~[Database FieldTypes]~	 Fields: DisplayName ~DVD Media Available~	Constraints ~Default 0~
			Define: DVDMediaStorageCapacity		CopyOf DVDStorageCapacity	~[Database FieldTypes]~  Fields: DisplayName ~DVD Storage Capacity~	Constraints ~Default 0~
		}
		}

	Define:			RImageTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImagePrimaryKey Using DDText
				Fields:	Text			~Constraint RImagePrimaryKey PRIMARY KEY(ID)~
		}

	Define:			RImage		Using DDDatabaseTableDef
		Fields:		TableName			RImage
					Fields				RImageFields(GetObjectReference)
					TableConstraints	RImageTableConstraints(GetObjectReference)

	Hang: RImage ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineRImageOrdersTable()
{
	Define:			RImageOrdersFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Writer			CopyOf RImageWriterID	~[Database FieldTypes]~	 Fields: DisplayName ~Writer~ Constraints ~NOT NULL~
			Define:	ID				CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Job ID~ LangItem ~JobID~
			Define: Progress		CopyOf RImageProgress	~[Database FieldTypes]~	 

			Define:	SubmitDate		CopyOf SortableDateTime	~[Database FieldTypes]~	 Fields: DisplayName ~Submit Date~ Constraints ~NOT NULL~ LangItem ~SubmitDate~			

			Define:	OrderID			CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Order ID~ Constraints ~NOT NULL~ LangItem ~OrderID~

			Define: Condition		CopyOf RImageCondition  ~[Database FieldTypes]~
			Define:	State			CopyOf RImageState		~[Database FieldTypes]~
			Define:	Status			CopyOf Generic64Char	~[Database FieldTypes]~	 Fields: DisplayName ~Status~

			Define: ImageType		CopyOf RImageType		~[Database FieldTypes]~  Fields: DisplayName ~Image Type~	Constraints ~Default 0~
			Define: MediaType		CopyOf RImageMediaType	~[Database FieldTypes]~  Fields: DisplayName ~Media Type~	Constraints ~Default 0~
			Define:	PowerImage		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Power Image~	Constraints ~Default 0~
			Define:	Span			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Span~
			Define:	RecordingType	CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Incremental~	Constraints ~Default 0~

			Define:	AppleExtensions	CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Apple~	Constraints ~Default 0~
			Define: FileSystem		CopyOf RImageFileSystem	~[Database FieldTypes]~  Fields: DisplayName ~File System Extension~	Constraints ~Default 0~
			Define: Copies			CopyOf Quantity			~[Database FieldTypes]~	 Fields: DisplayName ~Copies~ LangItem ~Copies~ Constraints ~Default 1~
			Define: Priority		CopyOf RImagePriority	~[Database FieldTypes]~	 Fields: Constraints ~Default 5~ 
			Define: Volume			CopyOf MacroString		~[Database FieldTypes]~  Fields: DisplayName ~Volume~	

			// LABEL STUFF
			Define: LabelType		CopyOf RImageLabelType	~[Database FieldTypes]~  Fields: DisplayName ~Label Type~ Constraints ~Default 0~
			Define: LabelFile		CopyOf Path				~[Database FieldTypes]~  Fields: DisplayName ~Label Path~ AllowedChars ~<$[Symbols].AllowableSpecialCharacters[Value]>~ LangItem ~LabelPath~
			Define: NeedMergeFileHeader CopyOf Boolean		~[Database FieldTypes]~	 Fields: DisplayName ~Merge Header~	Constraints ~Default 0~
			Define: MergeFile		CopyOf Path				~[Database FieldTypes]~  Fields: DisplayName ~Merge File~ AllowedChars ~<$[Symbols].AllowableSpecialCharacters[Value]>~ LangItem ~MergeFile~
			Define: MergeData		CopyOf ProcessLongText	~[Database FieldTypes]~  Fields: DisplayName ~Merge Data~ AllowedChars ~<$[Symbols].AllowableSpecialCharacters[Value]>~

			Define:	FileType		CopyOf RImageFileType	~[Database FieldTypes]~
			Define:	CDPath			CopyOf MacroString		~[Database FieldTypes]~	 Fields: DisplayName ~Output Media Path~
			Define:	FilePath		CopyOf Path				~[Database FieldTypes]~	 Fields: DisplayName ~Parent Directory~ AllowedChars ~<$[Symbols].AllowableSpecialCharacters[Value]>~ LangItem ~ParentDirectory~
			Define: Search			CopyOf SearchCriteria	~[Database FieldTypes]~	 Fields: DisplayName ~Criteria~ Constraints ~Default '*.*'~
			Define: DeleteAfter		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Delete After~	Constraints ~Default 0~ 	
			Define: XMLGenerator	CopyOf JobName			~[Database FieldTypes]~  Fields: DisplayName ~XML Generator~		 
		}

	Define:			RImageOrdersTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImageOrdersPrimaryKey Using DDText
				Fields:	Text			~Constraint RImageOrdersPrimaryKey PRIMARY KEY(ID)~

			Define: RefWriterToID Using DDText
				Fields:	Text			~Constraint RefWriterToID FOREIGN KEY (Writer) REFERENCES RImage(ID)~
		}

	Define:		RImageTableIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: RImageWriterIndex Using DDText
				Fields:	Text	~Create Index RImageWriterIndex on RImageOrders(Writer)~
		}


	Define:			RImageOrders		Using DDDatabaseTableDef
		Fields:		TableName			RImageOrders
					Fields				RImageOrdersFields(GetObjectReference)
					Indexes				RImageTableIndexes(GetObjectReference)
					TableConstraints	RImageOrdersTableConstraints(GetObjectReference)

	Hang: RImageOrders ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineRImageEditListTable()
{
	Define:			RImageEditListFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID				CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Job ID~ LangItem ~JobID~
			Define: ToPath			CopyOf AnyPath			~[Database FieldTypes]~  Fields: DisplayName ~To~
			Define: FromPath		CopyOf AnyPath			~[Database FieldTypes]~  Fields: DisplayName ~From~
			Define: DeleteAfter		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Delete After~	 Constraints ~Default 0~ 	
		if ( RunningVersion( 6.1 ) && 0 )
		{
			Define: OnAllDiscs		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Include On All Discs~  Constraints ~Default 0~
		}
		}

	Define:			RImageEditListTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImageEditListPrimaryKey Using DDText
				Fields:	Text			~Constraint RImageELPrimaryKey PRIMARY KEY(ID,ToPath)~

			Define: RefEditListWriterToID Using DDText
				Fields:	Text			~Constraint RefELWriterToID FOREIGN KEY (ID) REFERENCES RImageOrders(ID)~
		}

	Define:			RImageEditList		Using DDDatabaseTableDef
		Fields:		TableName			RImageEditList
					Fields				RImageEditListFields(GetObjectReference)
					TableConstraints	RImageEditListTableConstraints(GetObjectReference)

	Hang: RImageEditList ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineRImageMergeTable()
{
	Define:			RImageMergeFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID				CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Job ID~ LangItem ~JobID~
			Define:	FieldNumber		CopyOf Sequence			~[Database FieldTypes]~	 Fields: DisplayName ~Field~ LangItem ~Field~
			Define: FieldData		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Data~
		}

	Define:			RImageMergeTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImageMergePrimaryKey Using DDText
				Fields:	Text			~Constraint RImageDataPrimaryKey PRIMARY KEY(ID,FieldNumber)~

			Define: RefMergeWriterToID Using DDText
				Fields:	Text			~Constraint RefDataWriterToID FOREIGN KEY (ID) REFERENCES RImageOrders(ID)~
		}

	Define:			RImageMerge		Using DDDatabaseTableDef
		Fields:		TableName			RImageMerge
					Fields				RImageMergeFields(GetObjectReference)
					TableConstraints	RImageMergeTableConstraints(GetObjectReference)

	Hang: RImageMerge ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineRImageTemplatesTable()
{
	Define:			RImageTemplatesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID				CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Template ID~ LangItem ~TemplateID~
			Define:	Writer			CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Writer~ LangItem ~Writer~ 

			Define: ImageType		CopyOf RImageType		~[Database FieldTypes]~  Fields: DisplayName ~Image Type~
			Define: MediaType		CopyOf RImageMediaType	~[Database FieldTypes]~  Fields: DisplayName ~Media Type~	Constraints ~Default 0~
			Define:	PowerImage		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Power Image~
			Define:	Span			CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Span~
			Define:	RecordingType	CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Incremental~

			Define:	AppleExtensions	CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Apple~
			Define: FileSystem		CopyOf RImageFileSystem	~[Database FieldTypes]~  Fields: DisplayName ~File System Extension~	Constraints ~Default 0~
			Define: Copies			CopyOf Quantity			~[Database FieldTypes]~	 Fields: DisplayName ~Copies~ LangItem ~Copies~ 
			Define: Priority		CopyOf RImagePriority	~[Database FieldTypes]~  
			Define: Volume			CopyOf MacroString		~[Database FieldTypes]~  Fields: DisplayName ~Volume~ 

			// LABEL STUFF
			Define: LabelType		CopyOf RImageLabelType	~[Database FieldTypes]~  Fields: DisplayName ~Label Type~
			Define: LabelFile		CopyOf MacroString		~[Database FieldTypes]~  Fields: DisplayName ~Label Path~
			Define: NeedMergeFileHeader CopyOf Boolean		~[Database FieldTypes]~	 Fields: DisplayName ~Merge Header~	Constraints ~Default 0~
			Define: MergeFile		CopyOf MacroString		~[Database FieldTypes]~  Fields: DisplayName ~Merge File~
			Define: MergeData		CopyOf ProcessLongText	~[Database FieldTypes]~  Fields: DisplayName ~Merge Data~ AllowedChars ~<$[Symbols].AllowableSpecialCharacters[Value]>~

			Define:	FileType		CopyOf RImageFileType	~[Database FieldTypes]~	
			Define:	CDPath			CopyOf MacroString		~[Database FieldTypes]~	 Fields: DisplayName ~Output Media Path~
			Define:	FilePath		CopyOf MacroString		~[Database FieldTypes]~	 Fields: DisplayName ~Parent Directory~
			Define: Search			CopyOf SearchCriteria	~[Database FieldTypes]~	 Fields: Constraints ~Default '*.*'~
			Define: DeleteAfter		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Delete After~	Constraints ~Default 0~
			Define: XMLGenerator	CopyOf JobName			~[Database FieldTypes]~  Fields: DisplayName ~XML Generator~	 
		}

	Define:			RImageTemplatesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImageTemplatesPrimaryKey Using DDText
				Fields:	Text			~Constraint RImageTemplPrimaryKey PRIMARY KEY(ID)~
		}


	Define:			RImageTemplates	Using DDDatabaseTableDef
		Fields:		TableName			RImageTemplates
					Fields				RImageTemplatesFields(GetObjectReference)
					TableConstraints	RImageTemplatesTableConstraints(GetObjectReference)

	Hang: RImageTemplates ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineRImageEditListTemplatesTable()
{
	Define:			RImageEditListTemplatesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID				CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Template ID~ LangItem ~TemplateID~
			Define: ToPath			CopyOf Path				~[Database FieldTypes]~  Fields: DisplayName ~To~ LangItem ~To~
			Define: FromPath		CopyOf AnyPath			~[Database FieldTypes]~  Fields: DisplayName ~From~
			Define: DeleteAfter		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Delete After~	Constraints ~Default 0~ 	
		if ( RunningVersion( 6.1 ) && 0 )
		{
			Define: OnAllDiscs		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~Include On All Discs~	 Constraints ~Default 0~
		}
		}

	Define:			RImageEditListTemplatesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImageEditListTemplatesPrimaryKey Using DDText
				Fields:	Text			~Constraint RImageELTemplPrimaryKey PRIMARY KEY(ID,ToPath)~

			Define: RefEditListTemplateToID Using DDText
				Fields:	Text			~Constraint RefELTemplToID FOREIGN KEY (ID) REFERENCES RImageTemplates(ID)~
		}

	Define:			RImageEditListTemplates		Using DDDatabaseTableDef
		Fields:		TableName			RImageEditListTemplates
					Fields				RImageEditListTemplatesFields(GetObjectReference)
					TableConstraints	RImageEditListTemplatesTableConstraints(GetObjectReference)

	Hang: RImageEditListTemplates ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineRImageMergeTemplatesTable()
{
	Define:			RImageMergeTemplatesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID				CopyOf OrderID			~[Database FieldTypes]~	 Fields: DisplayName ~Template~ LangItem ~Template~
			Define:	FieldNumber		CopyOf Sequence			~[Database FieldTypes]~	 Fields: DisplayName ~Field~ LangItem ~Field~
			Define: FieldData		CopyOf LongText			~[Database FieldTypes]~  Fields: DisplayName ~Data~
		}

	Define:			RImageMergeTemplatesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RImageMergeTemplatesPrimaryKey Using DDText
				Fields:	Text			~Constraint RImageMGTemplPrimaryKey PRIMARY KEY(ID,FieldNumber)~

			Define: RefMergeTemplateToID Using DDText
				Fields:	Text			~Constraint RefRImageMGToID FOREIGN KEY (ID) REFERENCES RImageTemplates(ID)~
		}

	Define:			RImageMergeTemplates		Using DDDatabaseTableDef
		Fields:		TableName			RImageMergeTemplates
					Fields				RImageMergeTemplatesFields(GetObjectReference)
					TableConstraints	RImageMergeTemplatesTableConstraints(GetObjectReference)

	Hang: RImageMergeTemplates ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineImageRestoreSetupsTable()
{
	Define:			ImageRestoreSetupsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Computer						CopyOf ComputerName					~[Database FieldTypes]~	
			Define: Instance						CopyOf ID							~[Database FieldTypes]~ Fields: DisplayName	~Instance~ 	Constraints ~NOT NULL~
			Define: Setup							CopyOf ScanSetupName				~[Database FieldTypes]~ Fields: DisplayName	~Setup Name~
			Define: LoadFromDirectory				CopyOf Path							~[Database FieldTypes]~	Fields: DisplayName ~Restore From Directory~ LangItem ~RestoreFromDirectory~
			Define: SearchCriteria					CopyOf ImageRestoreSearchCriteria	~[Database FieldTypes]~	Fields: DisplayName ~Image Restore Search Criteria~ Constraints ~Default '*.*'~
			Define: LoadFromDirFormat				CopyOf ImageRestoreDirFormat		~[Database FieldTypes]~	Fields: DisplayName ~Restore From Directory Format~ Constraints ~Default 0~
			Define:	Roll							CopyOf Roll							~[Database FieldTypes]~	Fields: DisplayName ~Restore Image Roll~
			Define: CopyToDirectory					CopyOf Path							~[Database FieldTypes]~	Fields: DisplayName ~Restore To Directory~ LangItem ~RestoreToDirectory~
			Define: LoadAllImages					CopyOf Boolean						~[Database FieldTypes]~	Fields: DisplayName	~Restore All Images~ Constraints ~Default 1~
			Define: KeepExistingColorCorrections	CopyOf Boolean						~[Database FieldTypes]~	Fields: DisplayName	~Keep Existing Color Corrections~ Constraints ~Default 0~
			Define: CreateDBRecordsOnly	 			CopyOf Boolean						~[Database FieldTypes]~	Fields: DisplayName	~Only Create Image Records~ Constraints ~Default 0~
			Define: RefreshThumbnails	 			CopyOf Boolean						~[Database FieldTypes]~	Fields: DisplayName	~Refresh Thumbnails~ Constraints ~Default 0~
			Define: UnwriteProtect					CopyOf Boolean						~[Database FieldTypes]~	Fields: DisplayName	~Unwrite Protect~ Constraints ~Default 0~
		}

	Define:			ImageRestoreSetupsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ImageRestoreSetupsPrimaryKey Using DDText
				Fields:	Text			~Constraint ImageRestoreSetupsPrimaryKey PRIMARY KEY(Setup)~
		}

	Define:			ImageRestoreSetups Using DDDatabaseTableDef
		Fields:		TableName			ImageRestoreSetups
					Fields				ImageRestoreSetupsFields(GetObjectReference)
					TableConstraints	ImageRestoreSetupsTableConstraints(GetObjectReference)

	Hang: ImageRestoreSetups ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineTranslationsTable()
{
	Define:			TranslationsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Lang				CopyOf ID					~[Database FieldTypes]~ Fields: DisplayName	~Language~
			Define:	Category			CopyOf ID					~[Database FieldTypes]~ Fields: DisplayName	~Category~
			Define:	ID					CopyOf ID					~[Database FieldTypes]~ Fields: DisplayName	~ID~
			Define:	Translation			CopyOf MultiLineLongText	~[Database FieldTypes]~ Fields: DisplayName	~Text~
		}

	Define:			TranslationsConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: TranslationsPrimaryKey Using DDText
				Fields:	Text			~Constraint TranslationsPrimaryKey PRIMARY KEY(Lang,Category,ID)~
		}

	Define:			Translations				Using DDDatabaseTableDef
		Fields:		TableName					Translations
					Fields						TranslationsFields(GetObjectReference)
					TableConstraints			TranslationsConstraints(GetObjectReference)

	Hang: Translations ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefinePLSSettingsTable()
{
	Define:			PLSSettingsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ComputerName				CopyOf ComputerName		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~			
			Define:	UserName					CopyOf User				~[Database FieldTypes]~	Fields:	DisplayName	~User~
			Define:	FTPServer					CopyOf LongText			~[Database FieldTypes]~	
			Define:	FTPUserName					CopyOf LongText			~[Database FieldTypes]~	
			Define:	FTPPassword					CopyOf LongText			~[Database FieldTypes]~	
			Define:	TimeIntCreateProofs			CopyOf LongText			~[Database FieldTypes]~
			Define:	TimeIntSendProofs			CopyOf LongText			~[Database FieldTypes]~
			Define:	TimeIntGetOrders			CopyOf LongText			~[Database FieldTypes]~
			Define:	TimeIntProcessOrders		CopyOf LongText			~[Database FieldTypes]~
			Define: ToStudioDir					CopyOf LongText			~[Database FieldTypes]~
			Define: FromStudioDir				CopyOf LongText			~[Database FieldTypes]~
			Define: CDCreationDir				CopyOf LongText			~[Database FieldTypes]~
			Define: ImageLocationDir			CopyOf LongText			~[Database FieldTypes]~
			Define: ImageDestinationDir			CopyOf LongText			~[Database FieldTypes]~
			Define: OpticalOrderDir				CopyOf LongText			~[Database FieldTypes]~
			Define: BusinessSystemDir			CopyOf LongText			~[Database FieldTypes]~
			Define: CDPath						CopyOf LongText			~[Database FieldTypes]~
			Define: ProofOrdersAutoStart		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: GetFromStudioAutoStart		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	SendToStudioAutoStart		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: ProcessFromStudioAutoStart	CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: ProcessFromCD				CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define:	EmailAddress				CopyOf LongText			~[Database FieldTypes]~
			Define:	SubjectField				CopyOf LongText			~[Database FieldTypes]~
			Define: IncomingServerName			CopyOf LongText			~[Database FieldTypes]~
			Define: OutgoingServerName			CopyOf LongText			~[Database FieldTypes]~
			Define: OutGoingServerUsername		CopyOf LongText			~[Database FieldTypes]~
			Define: MailPassword				CopyOf LongText			~[Database FieldTypes]~
			Define: ProSeriesDB					CopyOf LongText			~[Database FieldTypes]~
			Define: ProShotsDB					CopyOf LongText			~[Database FieldTypes]~
			Define: DigitalCatalogDir			CopyOf LongText			~[Database FieldTypes]~
			Define: DigitalCatalogName			CopyOf LongText			~[Database FieldTypes]~
			Define: JpegQuality					CopyOf LongText			~[Database FieldTypes]~
			Define: CDJpegQuality				CopyOf LongText			~[Database FieldTypes]~
			Define: DefaultRImageTemplate		CopyOf OrderID			~[Database FieldTypes]~
			Define: DefaultRImageWriter			CopyOf OrderID			~[Database FieldTypes]~
			Define: InterfaceSW					CopyOf ServicesGroup	~[Database FieldTypes]~
			Define: CatalogType					CopyOf ServicesGroup	~[Database FieldTypes]~
			Define: DefaultOrderStatus			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: DefaultImageStatus			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~Default 3~
			Define: ScanFlagSetting				CopyOf Generic1Digit	~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: PrintPOFReport				CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define: ShowImageThumbnails			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowJobThumbnails			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowTotalOrderStudioSummary	CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowTotalOrderImageServices	CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowStudioSummary			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowOrderServices			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowImageServices			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowRetouchServices			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowCropServices			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	ShowOrderItemServices		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 1~
			Define:	AlwaysAssignOrderID			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: CrossRefFile				CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~Product Cross Reference~
			Define: SetAutoBalance				CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
		}

	Define:			PLSSettingsTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PLSSettingsPrimaryKey Using DDText
				Fields:	Text			~Constraint PLSSettingsPrimaryKey PRIMARY KEY(ComputerName,UserName)~
		}

	Define:			PLSSettings	Using DDDatabaseTableDef
		Fields:		TableName			PLSSettings
					Fields				PLSSettingsFields(GetObjectReference)
					TableConstraints	PLSSettingsTableConstraints(GetObjectReference)

	Hang: PLSSettings ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineProShotsUtilizationTable()
{

	Define:			ProShotsUtilizationFields Using DDLong
		Contains:	InListOrder
		{
			Define: WeddingOrders		CopyOf Quantity			~[Database FieldTypes]~
			Define: WeddingFrames		CopyOf Quantity			~[Database FieldTypes]~
			Define: PortraitOrders		CopyOf Quantity			~[Database FieldTypes]~
			Define: PortraitFrames		CopyOf Quantity			~[Database FieldTypes]~
			Define: SchoolOrders		CopyOf Quantity			~[Database FieldTypes]~
			Define: SchoolFrames		CopyOf Quantity			~[Database FieldTypes]~
			Define: SportsOrders		CopyOf Quantity			~[Database FieldTypes]~
			Define: SportsFrames		CopyOf Quantity			~[Database FieldTypes]~
			Define: CDOrders			CopyOf Quantity			~[Database FieldTypes]~
			Define: CDFrames			CopyOf Quantity			~[Database FieldTypes]~
			Define: InternetOrders		CopyOf Quantity			~[Database FieldTypes]~
			Define: InternetFrames		CopyOf Quantity			~[Database FieldTypes]~
			Define: CDInternetOrders	CopyOf Quantity			~[Database FieldTypes]~
			Define: CDInternetFrames	CopyOf Quantity			~[Database FieldTypes]~
			Define: Others				CopyOf Quantity			~[Database FieldTypes]~
			Define: ScanOnlyOrders		CopyOf Quantity			~[Database FieldTypes]~
			Define: ScanOnlyFrames		CopyOf Quantity			~[Database FieldTypes]~					
			Define: ScanProofOrders		CopyOf Quantity			~[Database FieldTypes]~
			Define: ScanProofFrames		CopyOf Quantity			~[Database FieldTypes]~
			Define: PrintFrames			CopyOf Quantity			~[Database FieldTypes]~
			Define: PrintOrders			CopyOf Quantity			~[Database FieldTypes]~
			Define: StartReportDate		CopyOf DateTime			~[Database FieldTypes]~
			Define: EndReportDate		CopyOf DateTime			~[Database FieldTypes]~				
		}

	Define:			ProShotsUtilizationTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProShotsUtilizationTablePrimaryKey Using DDText
				Fields:	Text			~Constraint ProShotsUtilizationPrimaryKey PRIMARY KEY(StartReportDate)~
		}

	Define:			ProShotsUtilization	Using DDDatabaseTableDef
		Fields:		TableName			ProShotsUtilization
					Fields				ProShotsUtilizationFields(GetObjectReference)
					TableConstraints	ProShotsUtilizationTableConstraints(GetObjectReference)

	Hang: ProShotsUtilization ~[DATABASE TableDefinitions]~ InListOrder;

}

VOID DefineProSeriesImagesXrefTable()
{
	Define:			ProSeriesImagesXrefFields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID				CopyOf OrderID		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~
			Define:	OriginalFileName	CopyOf Path			~[Database FieldTypes]~ 
			Define:	SequentialFileName	CopyOf Path			~[Database FieldTypes]~ 
			Define:	OrderDate			CopyOf DateTime		~[Database FieldTypes]~
		}

	Define:		ProSeriesImagesXrefTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProSeriesImagesXrefPrimaryKey Using DDText
				Fields:	Text			~Constraint ProSeriesImagesXrefPrimaryKey PRIMARY KEY(OrderID,OriginalFileName)~
		}

	Define:			ProSeriesImagesXref	Using DDDatabaseTableDef
		Fields:		TableName			ProSeriesImagesXref
					TableConstraints	ProSeriesImagesXrefTableConstraints(GetObjectReference)
					Fields				ProSeriesImagesXrefFields(GetObjectReference)

	Hang: ProSeriesImagesXref ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineProShotsClickTable()
{
	Define:			ProShotsClickFields Using DDLong
		Contains:	InListOrder
		{
			Define: ScanClicks			CopyOf DoubleValue			~[Database FieldTypes]~
			Define: HPrintClicks		CopyOf DoubleValue			~[Database FieldTypes]~
			Define: DPrintClicks		CopyOf DoubleValue			~[Database FieldTypes]~
			Define: ProofClicks			CopyOf DoubleValue			~[Database FieldTypes]~
		}

	Define:			ProShotsClickTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProShotsClickTablePrimaryKey Using DDText
				Fields:	Text			~Constraint ProShotsClickPrimaryKey PRIMARY KEY(ScanClicks,HPrintClicks,DPrintClicks,ProofClicks)~
		}

	Define:			ProShotsClick	Using DDDatabaseTableDef
		Fields:		TableName			ProShotsClick
					Fields				ProShotsClickFields(GetObjectReference)
					TableConstraints	ProShotsClickTableConstraints(GetObjectReference)

	Hang: ProShotsClick ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineBremsonProductCrossRefTable()
{
	Define:			BremsonProductCrossRefFields Using DDLong
		Contains:	InListOrder
		{
			Define: ProductID			CopyOf ProductID			~[Database FieldTypes]~
			Define: ProductCode			CopyOf BremsonProductCode	~[Database FieldTypes]~
		}

	Define:			BremsonProdCrossRefConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BremsonProdCrossRefPrimaryKey Using DDText
				Fields:	Text			~Constraint BremsonProdCrossRefPrimaryKey PRIMARY KEY(ProductID)~
		}

	Define:			BremsonProductCrossRef	Using DDDatabaseTableDef
		Fields:		TableName			BremsonProductCrossRef
					Fields				BremsonProductCrossRefFields(GetObjectReference)
					TableConstraints	BremsonProdCrossRefConstraints(GetObjectReference)

	Hang: BremsonProductCrossRef ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineProductXRefTable()
{
	Define:			ProductXRefFields Using DDLong
		Contains:	InListOrder
		{
			Define: OrderID				CopyOf OrderID				~[Database FieldTypes]~
			Define: OrderItemID			CopyOf OrderItemID			~[Database FieldTypes]~
			Define: ProductID			CopyOf ProductID			~[Database FieldTypes]~
			Define: NewProductID		CopyOf ProductID			~[Database FieldTypes]~
			Define: ProductCode			CopyOf ProductID			~[Database FieldTypes]~
		}

	Define:			ProductXRefConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ProductXRefPrimaryKey Using DDText
				Fields:	Text			~Constraint ProductXRefPrimaryKey PRIMARY KEY(OrderID,OrderItemID)~
		}

	Define:			ProductXRef	Using DDDatabaseTableDef
		Fields:		TableName			ProductXRef
					Fields				ProductXRefFields(GetObjectReference)
					TableConstraints	ProductXRefConstraints(GetObjectReference)

	Hang: ProductXRef ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineSepiaTable()
{
	Define:		SepiaFields Using DDLong
		Contains:	InListOrder
		{
			Define: FileName		CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~File Name~ DisplayWidth 55
			Define: Description		CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Description~ DisplayWidth 35

		}

	Define:			SepiaConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: SepiaPrimaryKey Using DDText
				Fields:	Text			~Constraint SepiaPrimaryKey PRIMARY KEY(Description)~
		}

	Define:			Sepia	Using DDDatabaseTableDef
		Fields:		TableName			Sepia
					Fields				SepiaFields(GetObjectReference)
					TableConstraints	SepiaConstraints(GetObjectReference)

	Hang: Sepia ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineColorMatrixTable()
{
	Define:			ColorMatrixFields Using DDLong
		Contains:	InListOrder
		{
			Define: FileName		CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~File Name~ DisplayWidth 55
			Define: Description		CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Description~ DisplayWidth 35

		}

	Define:			ColorMatrixConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: ColorMatrixPrimaryKey Using DDText
				Fields:	Text			~Constraint ColorMatrixPrimaryKey PRIMARY KEY(Description)~
		}

	Define:			ColorMatrix	Using DDDatabaseTableDef
		Fields:		TableName			ColorMatrix
					Fields				ColorMatrixFields(GetObjectReference)
					TableConstraints	ColorMatrixConstraints(GetObjectReference)

	Hang: ColorMatrix ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineLookupLUTTable()
{
	Define:			LookupLUTFields Using DDLong
		Contains:	InListOrder
		{
			Define: FileName		CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~File Name~ DisplayWidth 55
			Define: Description		CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Description~ DisplayWidth 35

		}

	Define:			LookupLUTConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: LookupLUTPrimaryKey Using DDText
				Fields:	Text			~Constraint LookupLUTPrimaryKey PRIMARY KEY(Description)~
		}

	Define:			LookupLUT	Using DDDatabaseTableDef
		Fields:		TableName			LookupLUT
					Fields				LookupLUTFields(GetObjectReference)
					TableConstraints	LookupLUTConstraints(GetObjectReference)

	Hang: LookupLUT ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineMaskTable()
{
	Define:			MaskFields Using DDLong
		Contains:	InListOrder
		{
			Define: FileName		CopyOf FilePath ~[Database FieldTypes]~ Fields: DisplayName ~File Name~ DisplayWidth 55
			Define: Description		CopyOf Generic255Char ~[Database FieldTypes]~ Fields: DisplayName ~Description~ DisplayWidth 35

		}

	Define:			MaskConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: MaskPrimaryKey Using DDText
				Fields:	Text			~Constraint MaskPrimaryKey PRIMARY KEY(Description)~
		}

	Define:			Mask	Using DDDatabaseTableDef
		Fields:		TableName			Mask
					Fields				MaskFields(GetObjectReference)
					TableConstraints	MaskConstraints(GetObjectReference)

	Hang: Mask ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineDPPrintServicesPricesTable()
{
	Define:			DPPrintServicesPricesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductID			CopyOf ProductID ~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	ServiceID			CopyOf ServiceNumber ~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~
			Define:	ServiceOn			CopyOf Boolean ~[Database FieldTypes]~
			Define: Price				CopyOf Cost ~[Database FieldTypes]~ Fields: DisplayName ~Price~ Constraints ~Default 0~
		}

	Define:		DPPrintServicesPricesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: DPPrintServicesPricesPrimaryKey Using DDText
				Fields:	Text			~Constraint DigProductPrintServicesPricesPrimaryKey PRIMARY KEY(ProductID,ServiceID)~
			
		}

	Define:			DPPrintServicesPrices	Using DDDatabaseTableDef
		Fields:		TableName			DigProductPrintServicesPrices
					TableConstraints	DPPrintServicesPricesTableConstraints(GetObjectReference)
					Fields				DPPrintServicesPricesFields(GetObjectReference)

	Hang: DPPrintServicesPrices ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineShippingMethodsTable()
{
	Define:			ShippingMethodsFields Using DDLong
		Contains:	InListOrder
		{
			Define: ProductCode		CopyOf ProductID		~[Database FieldTypes]~	Fields: DisplayName	~Product Code~
			Define: Description		CopyOf Description		~[Database FieldTypes]~
			Define: Price			CopyOf Cost				~[Database FieldTypes]~ Fields: DisplayName ~Price~
			Define: UnitOfMeasure	CopyOf UnitOfMeasure	~[Database FieldTypes]~	Fields: Constraints ~Default 0~	
		}
	Define:			ShippingMethods	Using DDDatabaseTableDef
		Fields:		TableName			ShippingMethods
					Fields				ShippingMethodsFields(GetObjectReference)

	Hang: ShippingMethods ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineServiceCategoryTable()
{
	Define:			ServiceCategoryFields Using DDLong
		Contains:	InListOrder
		{
			Define: Code			CopyOf Generic10Char		~[Database FieldTypes]~ Fields: DisplayName ~Code~
			Define: Description		CopyOf Description			~[Database FieldTypes]~
			Define: CategoryType	CopyOf ServiceCategory		~[Database FieldTypes]~	Fields: Constraints ~Default 0~
		}

	Define:		ServiceCategoryTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrimaryIndex Using DDText
				Fields:	Text			~Constraint ServiceCategoryPrimaryKey PRIMARY KEY(Code)~
		}

	Define:			ServiceCategory	Using DDDatabaseTableDef
		Fields:		TableName			ServiceCategory
					Fields				ServiceCategoryFields(GetObjectReference)
					TableConstraints	ServiceCategoryTableConstraints(GetObjectReference)

	Hang: ServiceCategory ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineProofBookTable()
{
	Define:			ProofBookFields Using DDLong
		Contains:	InListOrder
		{
			Define: Enabled			CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: PageSize		CopyOf ProofBookSize	~[Database FieldTypes]~ Fields: DisplayName ~Page Size~
			Define: Price			CopyOf Cost				~[Database FieldTypes]~	Fields: DisplayName ~Price~
			Define: Color			CopyOf ProofBookColor	~[Database FieldTypes]~	Fields: DisplayName ~Color~
			Define: FourPerPage		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~			
			Define: SixPerPage		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: EightPerPage	CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: NinePerPage		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~				
			Define: TwelvePerPage	CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: ImageNumbering	CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: Watermark		CopyOf Boolean			~[Database FieldTypes]~ Fields: Constraints ~Default 0~
			Define: UnitOfMeasure	CopyOf UnitOfMeasure	~[Database FieldTypes]~ Fields: Constraints ~Default 2~
			Define: UseCrop			CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Use Image Crop~ Constraints ~Default 0~
		}

	Define:		ProofBookTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrimaryIndex Using DDText
				Fields:	Text			~Constraint ProofBookPrimaryKey PRIMARY KEY(PageSize)~
		}

	Define:			ProofBook	Using DDDatabaseTableDef
		Fields:		TableName			ProofBook
					Fields				ProofBookFields(GetObjectReference)
					TableConstraints	ProofBookTableConstraints(GetObjectReference)

	Hang: ProofBook ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineStudioProductCategoryTable()
{
	Define:			StudioProductCategoryFields Using DDLong
		Contains:	InListOrder
		{
			Define: Category		CopyOf Category				~[Database FieldTypes]~
			Define: Sequence		CopyOf Sequence				~[Database FieldTypes]~ Fields: DisplayName ~Sequence~
			Define: Description		CopyOf Description			~[Database FieldTypes]~
		}

	Define:		StudioProductCategoryTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrimaryIndex Using DDText
				Fields:	Text			~Constraint StudioProductCategoryPrimaryKey PRIMARY KEY(Category,Sequence)~
		}

	Define:			StudioProductCategory	Using DDDatabaseTableDef
		Fields:		TableName			StudioProductCategory
					Fields				StudioProductCategoryFields(GetObjectReference)
					TableConstraints	StudioProductCategoryTableConstraints(GetObjectReference)

	Hang: StudioProductCategory ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineInksTable()
{
	Define:			InksFields Using DDLong
		Contains:	InListOrder
		{
			Define: InkName			CopyOf Generic255Char		~[Database FieldTypes]~ Fields: DisplayName	~Ink Name~
			Define: DeviceType		CopyOf DeviceType			~[Database FieldTypes]~
			Define: Enabled			CopyOf Boolean				~[Database FieldTypes]~ Fields: DisplayName ~Enabled~ Constraints ~Default 1~
		}

	Define:		InksTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrimaryIndex Using DDText
				Fields:	Text			~Constraint InksPrimaryKey PRIMARY KEY(InkName,DeviceType)~
		}

	Define:			Inks	Using DDDatabaseTableDef
		Fields:		TableName			Inks
					Fields				InksFields(GetObjectReference)
					TableConstraints	InksTableConstraints(GetObjectReference)

	Hang: Inks ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineTexturesTable()
{
	Define:			TexturesFields Using DDLong
		Contains:	InListOrder
		{
			Define: TextureName		CopyOf Generic255Char		~[Database FieldTypes]~ Fields: DisplayName ~Texture Name~	LangItem ~TextureName~
			Define: DeviceType		CopyOf DeviceType			~[Database FieldTypes]~ Fields: DisplayName ~Device Type~	LangItem ~DeviceType~
			Define: Sequence		CopyOf Sequence				~[Database FieldTypes]~ Fields: DisplayName ~Sequence~		LangItem ~Sequence~
			Define: Value			CopyOf LongValue			~[Database FieldTypes]~ Fields: DisplayName ~Value~			LangItem ~Value~
			Define: Enabled			CopyOf Boolean				~[Database FieldTypes]~ Fields: DisplayName ~Enabled~		LangItem ~Enabled~ Constraints ~Default 1~
		}

	Define:		TexturesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrimaryIndex Using DDText
				Fields:	Text			~Constraint TexturesPrimaryKey PRIMARY KEY(TextureName,DeviceType)~
		}

	Define:			Textures	Using DDDatabaseTableDef
		Fields:		TableName			Textures
					Fields				TexturesFields(GetObjectReference)
					TableConstraints	TexturesTableConstraints(GetObjectReference)

	Hang: Textures ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineEndUserInfoTable()
{
	Define:			EndUserInfoFields Using DDLong
		Contains:	InListOrder
		{
			Define: OrderID			CopyOf OrderID				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define: CustomerName1	CopyOf CustomerName			~[Database FieldTypes]~	Fields: LangItem ~Customer1~
			Define: CustomerName2	CopyOf CustomerName			~[Database FieldTypes]~ Fields: LangItem ~Customer2~
			Define: Address1		CopyOf Street				~[Database FieldTypes]~	Fields: DisplayName	~Address 1~ LangItem ~Address1~
			Define: Address2		CopyOf Street				~[Database FieldTypes]~	Fields: DisplayName	~Address 2~ LangItem ~Address2~
			Define: City			CopyOf City					~[Database FieldTypes]~ Fields: LangItem ~City~
			Define: County			CopyOf County				~[Database FieldTypes]~ Fields: LangItem ~County~
			Define: State			CopyOf State				~[Database FieldTypes]~ Fields: LangItem ~State~
			Define: Country			CopyOf Country				~[Database FieldTypes]~ Fields: LangItem ~Country~
			Define: ZipCode			CopyOf ZipCode				~[Database FieldTypes]~ Fields: LangItem ~ZipCode~
			Define: Phone1			CopyOf Telephone			~[Database FieldTypes]~ Fields: LangItem ~Phone1~
			Define: Phone2			CopyOf Telephone			~[Database FieldTypes]~ Fields: LangItem ~Phone2~
			Define: Email			CopyOf Email				~[Database FieldTypes]~ Fields: LangItem ~Email~
			Define: Others			CopyOf LongText				~[Database FieldTypes]~ Fields: LangItem ~Others~
		}

	Define:		EndUserInfoTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrimaryIndex Using DDText
				Fields:	Text			~Constraint EndUserInfoPrimaryKey PRIMARY KEY(OrderID)~

			Define: RefEndUserToOrderID Using DDText
				Fields:	Text			~Constraint RefEndUserToOrderID FOREIGN KEY (OrderID) REFERENCES Orders(ID)~
		}

	Define:			EndUserInfo		Using DDDatabaseTableDef
		Fields:		TableName			EndUserInfo
					Fields				EndUserInfoFields(GetObjectReference)
					TableConstraints	EndUserInfoTableConstraints(GetObjectReference)

	Hang: EndUserInfo ~[DATABASE TableDefinitions]~ InListOrder;

}

if ( 0 )	// Keep this around as a model of how to setup an index
{
	Define:			ScanSetupsIndexes Using DDLong
		Contains:	InListOrder
		{
			Define: PrimaryIndex Using DDText
				Fields:	Text	~Create Unique Index ScanSetupsIndex on ScanSetups(Name)~
		}

	Define:			ScanSetups		Using DDDatabaseTableDef
		Fields:		TableName			ScanSetups
					Fields				ScanSetupsFields(GetObjectReference)
					TableConstraints	ScanSetupsTableConstraints(GetObjectReference)
					Indexes				ScanSetupsIndexes(GetObjectReference)
}

VOID DefineLabInfoTable()
{
	Define:				LabInfoFields Using DDLong
		Contains:		InListOrder
		{
			Define: LabName		CopyOf CustomerName	~[Database FieldTypes]~	Fields: DisplayName	~Lab Name~
			Define: ContactName	CopyOf CustomerName	~[Database FieldTypes]~	Fields: DisplayName	~Contact~
			Define: Address1	CopyOf Street		~[Database FieldTypes]~	Fields: DisplayName	~Address 1~
			Define: Address2	CopyOf Street		~[Database FieldTypes]~	Fields: DisplayName	~Address 2~
			Define: City		CopyOf City			~[Database FieldTypes]~
			Define: County		CopyOf County		~[Database FieldTypes]~
			Define: State		CopyOf State		~[Database FieldTypes]~
			Define: Country		CopyOf Country		~[Database FieldTypes]~
			Define: ZipCode		CopyOf ZipCode		~[Database FieldTypes]~
			Define: Phone		CopyOf Phone		~[Database FieldTypes]~
			Define: Email		CopyOf Email		~[Database FieldTypes]~
			Define: KNumber		CopyOf KNumber		~[Database FieldTypes]~
			Define: LabUniqueID	CopyOf LabUniqueID	~[Database FieldTypes]~
		}

	Define:				LabInfo			Using DDDatabaseTableDef
		Fields:			TableName			LabInfo
						Fields				LabInfoFields(GetObjectReference)
		
	Hang: LabInfo ~[DATABASE TableDefinitions]~ InListOrder;
}

// ***************************** TABLES FOR DIGITAL PRODUCTS CATALOG *****************************
//
// The following table definitions:
//		CompanyInfo
//		NodeInfo
//		Products
//		TextNode
//
// are for the Digital Products Catalog created by PLS for ProShots viewer.

VOID DefineDPCCompanyInfoTable()
{
	Define:			DPCCompanyInfoFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Company			CopyOf Generic255Char	~[Database FieldTypes]~	 Fields: DisplayName ~Company~
			Define:	Address			CopyOf Generic255Char	~[Database FieldTypes]~	 Fields: DisplayName ~Address~
			Define: City			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~City~
			Define: State			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~State~
			Define: Country			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Country~
			Define: ~Zip Code~		CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Zip Code~
			Define: Contactor		CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Contactor~
			Define: Phone1			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Phone1~
			Define: Phone2			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Phone2~
			Define: Fax1			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Fax1~
			Define: Fax2			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Fax2~
			Define: Email			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Email~
			Define: WebPage			CopyOf Generic60Char	~[Database FieldTypes]~  Fields: DisplayName ~Web Page~
			Define: Note1			CopyOf Generic255Char	~[Database FieldTypes]~  Fields: DisplayName ~Note1~
			Define: Note2			CopyOf Generic255Char	~[Database FieldTypes]~  Fields: DisplayName ~Note2~
			Define: Note3			CopyOf Generic255Char	~[Database FieldTypes]~  Fields: DisplayName ~Note3~
			Define: DatabaseVersion	CopyOf PLSDBVersion		~[Database FieldTypes]~  Fields: DisplayName ~Database Version~
			Define: DatabaseTime	CopyOf PLSDatabaseTime	~[Database FieldTypes]~  Fields: DisplayName ~Database Time~
		}

	Define:			DPCCompanyInfo		Using DDDatabaseTableDef
		Fields:		TableName			CompanyInfo
					Fields				DPCCompanyInfoFields(GetObjectReference)

	Hang: DPCCompanyInfo ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCNodeInfoTable()
{
	Define:			DPCNodeInfoFields Using DDLong
		Contains:	InListOrder
		{
			Define:	PCode			CopyOf PLSPCode			~[Database FieldTypes]~
			Define:	NodeNo			CopyOf PLSNodeNo		~[Database FieldTypes]~
			Define: NodeType		CopyOf PLSNodeType		~[Database FieldTypes]~
			Define: NodeName		CopyOf PLSNodeName		~[Database FieldTypes]~
			Define: Prompt			CopyOf PLSPrompt		~[Database FieldTypes]~
			Define: Left			CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~Left~
			Define: Top				CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~Top~
			Define: Width			CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~Width~
			Define: Height			CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~Height~
			Define: Shape			CopyOf PLSShape			~[Database FieldTypes]~
			Define: ScanOrientation	CopyOf PLSScanOrientation ~[Database FieldTypes]~
			Define: Note			CopyOf PLSNote			~[Database FieldTypes]~
			Define: NodeID			CopyOf PLSNodeNo		~[Database FieldTypes]~  Fields: DisplayName ~NodeID~
			Define: NodeColor       CopyOf PLSInteger       ~[Database FieldTypes]~
			Define: Angle			CopyOf PLSRotateText	~[Database FieldTypes]~  Fields: DisplayName ~Angle~
		}

	Define:			DPCNodeInfo			Using DDDatabaseTableDef
		Fields:		TableName			NodeInfo
					Fields				DPCNodeInfoFields(GetObjectReference)

	Hang: DPCNodeInfo ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCProductsTable()
{
	Define:			DPCProductsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductCode		CopyOf PLSPCode			~[Database FieldTypes]~  Fields: DisplayName ~ProductCode~
			Define:	Description		CopyOf PLSDescription	~[Database FieldTypes]~
			Define: Image			CopyOf PLSImage			~[Database FieldTypes]~
			Define: Cost			CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~Cost~
			Define: ProdWidth		CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~ProdWidth~
			Define: ProdHeight		CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~ProdHeight~
			Define: NumberNodes		CopyOf PLSNumberNodes	~[Database FieldTypes]~
			Define: Note			CopyOf PLSNote			~[Database FieldTypes]~
			Define: Category		CopyOf UserTaskCategory	~[Database FieldTypes]~  Fields: DisplayName ~Category~
			Define: Sequence		CopyOf Sequence			~[Database FieldTypes]~  Fields: DisplayName ~Sequence~
		}

	Define:			DPCProducts			Using DDDatabaseTableDef
		Fields:		TableName			Products
					Fields				DPCProductsFields(GetObjectReference)

	Hang: DPCProducts ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCDSSProductsTable()
{
	Define:			DPCDSSProductsFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductCode		CopyOf PLSPCode			~[Database FieldTypes]~  Fields: DisplayName ~ProductCode~
			Define:	Description		CopyOf PLSDescription	~[Database FieldTypes]~
			Define: Image			CopyOf PLSImage			~[Database FieldTypes]~
			Define: Cost			CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~Cost~
			Define: ProdWidth		CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~ProdWidth~
			Define: ProdHeight		CopyOf PLSSingle		~[Database FieldTypes]~  Fields: DisplayName ~ProdHeight~
			Define: NumberNodes		CopyOf PLSNumberNodes	~[Database FieldTypes]~
			Define: Note			CopyOf PLSNote			~[Database FieldTypes]~
			Define: Category		CopyOf UserTaskCategory	~[Database FieldTypes]~  Fields: DisplayName ~Category~
			Define: Sequence		CopyOf Sequence			~[Database FieldTypes]~  Fields: DisplayName ~Sequence~
		}

	Define:			DPCDSSProducts	Using DDDatabaseTableDef
		Fields:		TableName			DSSProducts
					Fields				DPCDSSProductsFields(GetObjectReference)

	Hang: DPCDSSProducts ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCTextNodeTable()
{
	Define:			DPCTextNodeFields Using DDLong
		Contains:	InListOrder
		{
			Define:	PCode			CopyOf PLSPCode			~[Database FieldTypes]~
			Define:	NodeNo			CopyOf PLSNodeNo		~[Database FieldTypes]~
			Define: Font			CopyOf PLSFont			~[Database FieldTypes]~
			Define: FontSize		CopyOf PLSFontSize		~[Database FieldTypes]~
			Define: FontRed			CopyOf PLSFontRed		~[Database FieldTypes]~
			Define: FontGreen		CopyOf PLSFontGreen		~[Database FieldTypes]~
			Define: FontBlue		CopyOf PLSFontBlue		~[Database FieldTypes]~
			Define: Style			CopyOf PLSStyle			~[Database FieldTypes]~
			Define: Justify			CopyOf PLSJustify		~[Database FieldTypes]~
			Define: Note			CopyOf PLSNote			~[Database FieldTypes]~
			Define: RotateText		CopyOf PLSRotateText	~[Database FieldTypes]~
			Define: WordWrap		CopyOf PLSWordWrap		~[Database FieldTypes]~
			Define: CR_Allowed		CopyOf PLSCRAllowed		~[Database FieldTypes]~
		}

	Define:			DPCTextNode			Using DDDatabaseTableDef
		Fields:		TableName			TextNode
					Fields				DPCTextNodeFields(GetObjectReference)

	Hang: DPCTextNode ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCTextNodeMinFontSizeTable()
{
	Define:			DPCTextNodeMinFontSizeFields Using DDLong
		Contains:	InListOrder
		{
			Define:	PCode			CopyOf PLSPCode			~[Database FieldTypes]~
			Define:	NodeNo			CopyOf PLSNodeNo		~[Database FieldTypes]~
			Define: MinFontSize		CopyOf PLSFontSize		~[Database FieldTypes]~
		}

	Define:			DPCTextNodeMinFontSize	Using DDDatabaseTableDef
		Fields:		TableName			TextNodeMinFontSize
					Fields				DPCTextNodeMinFontSizeFields(GetObjectReference)

	Hang: DPCTextNodeMinFontSize ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCPrintServicesTable()
{
	Define:			DPCPrintServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ServiceID		CopyOf PLSServiceID		~[Database FieldTypes]~
			Define:	ServiceItem		CopyOf Generic25Char	~[Database FieldTypes]~	Fields: DisplayName	~ServiceItem~
			Define: ServiceCode		CopyOf Generic10Char	~[Database FieldTypes]~	Fields: DisplayName	~ServiceCode~
			Define: ServicePrice	CopyOf PLSSingle		~[Database FieldTypes]~ Fields: DisplayName ~ServicePrice~
			Define: ServiceGroup	CopyOf PLSServiceGroup	~[Database FieldTypes]~
			Define: ServiceSpecial	CopyOf Generic10Char	~[Database FieldTypes]~	Fields: DisplayName	~ServiceSpecial~
			Define: ServiceInstruction CopyOf Generic60Char	~[Database FieldTypes]~	Fields: DisplayName	~ServiceInstruction~
			Define: ServiceNote		CopyOf Generic30Char	~[Database FieldTypes]~	Fields: DisplayName	~ServiceNote~
		}

	Define:			DPCPrintServices	Using DDDatabaseTableDef
		Fields:		TableName			PrintServices
					Fields				DPCPrintServicesFields(GetObjectReference)

	Hang: DPCPrintServices ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCProductPrintServicesTable()
{
	Define:			DPCProductPrintServicesFields Using DDLong
		Contains:	InListOrder
		{
			Define:	ProductCode		CopyOf ProductID		~[Database FieldTypes]~	Fields: DisplayName	~ProductCode~
			Define: ServiceCode		CopyOf Generic10Char	~[Database FieldTypes]~	Fields: DisplayName	~ServiceCode~
			Define: ServicePrice	CopyOf PLSSingle		~[Database FieldTypes]~ Fields: DisplayName ~ServicePrice~
		}

	Define:			DPCProductPrintServices	Using DDDatabaseTableDef
		Fields:		TableName			ProductPrintServices
					Fields				DPCProductPrintServicesFields(GetObjectReference)

	Hang: DPCProductPrintServices ~[DATABASE DPCTableDefinitions]~ InListOrder;
}

VOID DefineDPCCategoryTable()
{
	Define:			DPCCategoryFields Using DDLong
		Contains:	InListOrder
		{
			Define:	Category		CopyOf UserTaskCategory	~[Database FieldTypes]~	Fields: DisplayName	~Category~
			Define: Sequence		CopyOf Sequence			~[Database FieldTypes]~	Fields: DisplayName	~Sequence~
		}

	Define:			DPCCategory	Using DDDatabaseTableDef
		Fields:		TableName			Category
					Fields				DPCCategoryFields(GetObjectReference)

	Hang: DPCCategory ~[DATABASE DPCTableDefinitions]~ InListOrder;
}
// ***************************** END OF TABLES FOR DIGITAL PRODUCTS CATALOG *****************************



//----------------------------- Begin DataMiner Proposed Additions ------------------------------

// A brief discussion of the Data miner tables and their purpose.
// 
//
// The Operator, Computer, Events and Operations tables exist solely for the purpose of assigning
// a human readable lable to each numerical representation of an element in the set of things held
// by that table.
//
// The Status table also assignes a human readable label to a numerical status value but also 
// defines information about what operation a given status belongs to and anticipated durations
// for a status (or state...conceptualy this table contains that variuous states that an order 
// may pass through).
//
// The EventHandler table contains the list of event handlers, or actions to be taken when a
// given event occures.
//
// The Tracking table simply records information about every event that occures.
//
// The WorkInProgress table exists to track the status of an order as it passes through the lab.  Why
// not just add a field to the Orders table you ask?  Well, a single order may actually be passing
// through multiple flows in a lab simultaineously.  For example, an order may have a number of normal
// prints a set of buttons and maybe a mug to produce.  This means that the order would fall into three 
// workflows.  The WorkInProgress would contain a record for each work flow that the order falls 
// into.
// 
// The StandardRouting table tells us how the status of an order would change given events that occure
// in the system.  It contains a current state field, and event and a next state field.  While this
// lends itself to being set up as a straight state transition table it is not limited to that kind of
// set up.  There is a constant defined kAnyState that can be set in the current state field which
// facilitates defining the transitions as being driven by the event only.
//


VOID DefineOperatorTable()
{
	WhichTable = Operator;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define:	Name		CopyOf Generic64Char	~[Database FieldTypes]~	Fields: DisplayName ~Name~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(ID)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineComputerTable()
{
	WhichTable = Computer;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define:	Name		CopyOf ComputerName		~[Database FieldTypes]~	
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(ID)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineDP2PrivilegesTable()
{
	WhichTable = DP2Privileges;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	PrivilegeId					CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~PrivilegeId~
			Define:	PrivilegeName				CopyOf Generic255Char	~[Database FieldTypes]~
			Define:	Forbid						CopyOf Generic5Digit	~[Database FieldTypes]~		
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(PrivilegeId)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineRolesTable()
{
	WhichTable = Roles;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	RoleID				CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~RoleID~
			Define:	RoleName			CopyOf Generic255Char	~[Database FieldTypes]~
			Define:	RoleDescription		CopyOf Generic255Char	~[Database FieldTypes]~			
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(RoleID)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineRolePrivilegesTable()
{
	WhichTable = RolePrivileges;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	RoleID				CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~RoleID~
			Define:	PrivilegeID			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~PrivilegeID~			
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(RoleID, PrivilegeID)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineUserRoleMappingTable()
{
	WhichTable = UserRoleMapping;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	OperatorId			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~OperatorId~
			Define:	RoleId				CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~RoleId~			
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(OperatorId, RoleId)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineWorkstationRoleMappingTable()
{
	WhichTable = WorkstationRoleMapping;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	WorkstationId		CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~WorkstationId~
			Define:	RoleId				CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~RoleId~			
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(WorkstationId, RoleId)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineOperatorsTable()
{
	WhichTable = Operators;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	OperatorId		CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~OperatorId~
			Define:	LogonName			CopyOf LogonName		~[Database FieldTypes]~
			Define:	OperatorFullName	CopyOf OperatorName		~[Database FieldTypes]~
			Define:	LogonPassword		CopyOf LogonPassword	~[Database FieldTypes]~
			Define:	Address				CopyOf Address			~[Database FieldTypes]~
			Define:	Telephone			CopyOf Telephone		~[Database FieldTypes]~			
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(OperatorId)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}
VOID DefineWorkstationsTable()
{
	WhichTable = Workstations;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	WorkstationID			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~WorkstationID~
			Define:	WorkstationName			CopyOf Generic255Char	~[Database FieldTypes]~
			Define:	WorkstationDescription	CopyOf Generic255Char	~[Database FieldTypes]~ 
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(WorkstationID)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineEventsTable()
{
	WhichTable = Events;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define:	Name		CopyOf Generic255Char	~[Database FieldTypes]~	Fields: DisplayName ~Name~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(ID)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineEventHandlerTable()
{
	WhichTable = EventHandler;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	Sequence		CopyOf Sequence			~[Database FieldTypes]~  Fields: Constraints ~NOT NULL~
			Define:	EventID			CopyOf Generic5Digit	~[Database FieldTypes]~  Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define: UserDefined		CopyOf Boolean			~[Database FieldTypes]~	 Fields: DisplayName ~User Defined~ Constraints ~Default 0~
			Define:	Type			CopyOf TasksType		~[Database FieldTypes]~	 Fields: DisplayName ~Type~
			Define:	Process			CopyOf ProcessLongText	~[Database FieldTypes]~	 Fields: DisplayName ~Process~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(Sequence)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineOperationsTable()
{
	WhichTable = Operations;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define:	Name		CopyOf Generic255Char	~[Database FieldTypes]~	Fields: DisplayName ~Name~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(ID)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineStatusTable()
{
	WhichTable = Status;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID			CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define:	Name		CopyOf Generic255Char	~[Database FieldTypes]~	Fields: DisplayName ~Name~
			Define:	Duration	CopyOf TimeOffset		~[Database FieldTypes]~	Fields: DisplayName ~Duration~
			Define:	OperationID	CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: DisplayName ~Operation~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(ID)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineTrackingTable()
{
	WhichTable = Tracking;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	Sequence	CopyOf Sequence			~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	OrderID		CopyOf OrderID			~[Database FieldTypes]~ Fields: DisplayName ~OrderID~ LangItem ~OrderID~
			Define:	Event		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Event~
			Define:	EventData1	CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Event Data 1~
			Define:	EventData2	CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Event Data 2~
			Define:	Status		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Status~
			Define:	EventTime	CopyOf SortableDateTime	~[Database FieldTypes]~ Fields: DisplayName ~Time~ LangItem ~Time~
			Define:	Computer	CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: DisplayName ~Computer~
			Define:	Operator	CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: DisplayName ~Operator~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(Sequence)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineWorkInProgressTable()
{
	WhichTable = WorkInProgress;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	OrderID			CopyOf OrderID			~[Database FieldTypes]~ Fields: DisplayName ~OrderID~ LangItem ~OrderID~
			Define:	WorkFlowName	CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~WorkFlowName~
			Define:	Status			CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Status~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(OrderID,WorkFlowName)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}



VOID DefineStandardRoutingTable()
{
	WhichTable = StandardRouting;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	WorkFlowName	CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~WorkFlowName~
			Define:	CurrentStatus	CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: DisplayName ~Current Status~
			Define:	Event			CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Event~
			Define:	NextStatus		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Next Status~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(WorkFlowName,CurrentStatus,Event)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

//------------------------------ End DataMiner Proposed Additions -------------------------------

VOID DefinePrintsInfoTable()
{
	WhichTable = PrintsInfo;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	ID						CopyOf ID				~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~ID~
			Define:	Item					CopyOf PrintItem		~[Database FieldTypes]~ Fields: DisplayName ~Print Item~
			Define:	ProductID				CopyOf SelectableProductID ~[Database FieldTypes]~ Fields: DisplayName ~Product ID~
			Define:	ProductSubType			CopyOf Generic5Digit	 ~[Database FieldTypes]~ Fields: DisplayName ~Product Subtype~ Constraints ~Default 0~
			Define: Description				CopyOf Description		~[Database FieldTypes]~ Fields: DisplayName ~Description~
			Define:	PrintWidth				CopyOf WidthDouble		~[Database FieldTypes]~ Fields: DisplayName ~Print Width~ LangItem ~PrintWidth~
			Define:	PrintHeight				CopyOf LengthDouble		~[Database FieldTypes]~	Fields: DisplayName ~Print Height~ LangItem ~PrintHeight~
			Define:	NumPages				CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Number Of Pages~ LangItem ~NumberOfPages~
			Define:	MaxImagesPerPage		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Max Images Per Page~ LangItem ~MaxImagesPerPage~
			Define: BookBasePrice			CopyOf	PricePerPage	~[Database FieldTypes]~	Fields: DisplayName ~Book Base Price~ LangItem ~BookBasePrice~
			Define:	PricePerPage			CopyOf PricePerPage		~[Database FieldTypes]~	Fields: DisplayName ~Price Per Page~ LangItem ~PricePerPage~
			Define:	QueueName				CopyOf QueueName		~[Database FieldTypes]~ Fields: DisplayName ~Queue Name~ LangItem ~QueueName~
			Define: Hidden					CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Hidden~ LangItem ~Hidden~ Constraints ~Default 0~
			Define: RoutingType				CopyOf RoutingType		~[Database FieldTypes]~ Fields: DisplayName ~Routing~ LangItem ~RoutingType~ Constraints ~Default 0~
			Define:	BindingType				CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Binding Type~ LangItem ~BindingType~ Constraints ~Default 0~
			Define: SpineSize				CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Spine Size~ LangItem ~SpineSize~ Constraints ~Default 0~
			Define: SpineSizeGrowth			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Spine Size Growth~ LangItem ~SpineSizeGrowth~ Constraints ~Default 0~
			Define: PageMarginLeft			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Left~ LangItem ~PageMarginLeft~ Constraints ~Default 0.0~
			Define: PageMarginTop			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Top~ LangItem ~PageMarginTop~ Constraints ~Default 0.0~
			Define: PageMarginRight			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Right~ LangItem ~PageMarginRight~ Constraints ~Default 0.0~
			Define: PageMarginBottom		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Page Margin Bottom~ LangItem ~PageMarginBottom~ Constraints ~Default 0.0~
			Define: CoverPageWidth			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Width~ LangItem ~CoverPageWidth~ Constraints ~Default 0.0~
			Define: CoverPageHeight			CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Height~ LangItem ~CoverPageHeight~ Constraints ~Default 0.0~
			Define:	CoverPageBindingType	CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Binding Type~ LangItem ~CoverPageBindingType~ Constraints ~Default 0~
			Define: CoverPageMarginLeft		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Left~ LangItem ~CoverPageMarginLeft~ Constraints ~Default 0.0~
			Define: CoverPageMarginTop		CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Top~ LangItem ~CoverPageMarginTop~ Constraints ~Default 0.0~
			Define: CoverPageMarginRight	CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Right~ LangItem ~CoverPageMarginRight~ Constraints ~Default 0.0~
			Define: CoverPageMarginBottom	CopyOf DoubleValue		~[Database FieldTypes]~	Fields: DisplayName ~Cover Page Margin Bottom~ LangItem ~CoverPageMarginBottom~ Constraints ~Default 0.0~
			Define:	MaxNumberOfPages		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Max Num Of Pages~ LangItem ~MaxNumberOfPages~
			Define:	GridLocation			CopyOf ByteValue	    ~[Database FieldTypes]~	Fields: DisplayName ~Calendar Grid Location~ LangItem ~GridLocation~ Constraints ~Default 0~
			Define:	DoubleSided				CopyOf ByteValue	    ~[Database FieldTypes]~	Fields: DisplayName ~Double Sided~ LangItem ~DoubleSided~ Constraints ~Default 0~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(ID)~
		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefinePrintChannelsTable()
{
	WhichTable = PrintChannels;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define: PrintsInfoID	CopyOf ID				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	Surface			CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Surface~ LangItem ~Surface~
			Define:	Channel			CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Channel~ LangItem ~Channel~
			Define: PaperWidth		CopyOf PaperWidth		~[Database FieldTypes]~
			Define:	IsDefault		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~IsDefault~ LangItem ~IsDefault~
			Define: SurfaceDesc		CopyOf LongText			~[Database FieldTypes]~ Fields: DisplayName ~SurfaceDesc~ LangItem ~SurfaceDesc~
			Define: IsInstalled		CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~IsInstalled~ LangItem ~IsInstalled~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(PrintsInfoID,Surface)~

			Define: RefPrintChannelsToPrintsInfo Using DDText
				Fields:	Text			~Constraint RefPrintChannelsToPrintsInfo FOREIGN KEY (PrintsInfoID) REFERENCES PrintsInfo(ID)~

		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefinePrintOptionsTable()
{
	WhichTable = PrintOptions;

	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define: PrintsInfoID	CopyOf ID				~[Database FieldTypes]~ Fields: Constraints	~NOT NULL~
			Define:	OptionType		CopyOf PrintOptions		~[Database FieldTypes]~ Fields: DisplayName ~Option Type~ Constraints ~Default 0~
			Define:	OptionID		CopyOf Generic32Char	~[Database FieldTypes]~	Fields: DisplayName ~Print Type ID~
			Define:	Description		CopyOf Generic64Char	~[Database FieldTypes]~	Fields: DisplayName ~Description~
			Define: Price			CopyOf Cost				~[Database FieldTypes]~	Fields: DisplayName ~Price~
			Define: NoLongerUsed	CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName ~Not Used~ Constraints ~Default 0~
		}

	Define:		<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(PrintsInfoID,OptionType,OptionID)~

			Define: RefPrintChannelsToPrintsInfo Using DDText
				Fields:	Text			~Constraint RefPrintOptionsToPrintsInfo FOREIGN KEY (PrintsInfoID) REFERENCES PrintsInfo(ID)~

		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}


	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineYearbookDefsTable()
{
	WhichTable = YearbookDefs;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	YearbookID				CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName ~Yearbook ID~ Constraints ~NOT NULL~ 
			Define:	GroupFields				CopyOf QueryText		~[Database FieldTypes]~ Fields: DisplayName ~Group Fields~
			Define:	GroupBy					CopyOf QueryText		~[Database FieldTypes]~ Fields: DisplayName ~Group By~
			Define:	SortBy					CopyOf QueryText		~[Database FieldTypes]~ Fields: DisplayName ~Sort By~
			Define:	ImageSize				CopyOf PSPASize			~[Database FieldTypes]~ Fields: DisplayName ~Image Size~
			Define:	ImageWidth				CopyOf Width			~[Database FieldTypes]~
			Define:	ImageLength				CopyOf Length			~[Database FieldTypes]~
			Define: CompressionQuality		CopyOf IntegerPercent	~[Database FieldTypes]~ Fields: DisplayName ~Compression~
			Define:	Resolution				CopyOf FileResolution	~[Database FieldTypes]~	Fields: DisplayName ~FileResolution~
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(YearbookID)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineYearbookFieldsTable()
{
	WhichTable = YearbookFields;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	YearbookID				CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName ~Yearbook ID~ LangItem ~Yearbook ID~ Constraints ~NOT NULL~
			Define:	FieldName				CopyOf FieldName		~[Database FieldTypes]~ Fields: DisplayName ~Field Name~ LangItem ~Field Name~
			Define:	Sequence				CopyOf YBFieldSequence	~[Database FieldTypes]~ Fields: DisplayName	~Sequence~ LangItem ~Sequence~
			Define:	Reserved				CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName ~Reserved~ LangItem ~Reserved~
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(YearbookID,FieldName)~
	
			Define: RefYbFieldsToYb Using DDText
				Fields:	Text			~Constraint RefYbFieldsToYb FOREIGN KEY (YearbookID) REFERENCES YearbookDefs(YearbookID)~

		}

	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineYBSIFieldMapTable()
{
	WhichTable = YBSIFieldMap;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	YearbookID		CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~Yearbook ID~
			Define:	InfoType		CopyOf SlctblInfoType	~[Database FieldTypes]~ Fields: DisplayName ~Info Type~			
			Define: FieldName		CopyOf FieldName		~[Database FieldTypes]~ Fields: Constraints ~NOT NULL~ DisplayName ~Yearbook Field~	LangItem ~Yearbook Field~		
			Define: SIFieldName		CopyOf FieldName		~[Database FieldTypes]~ Fields: DisplayName ~Info Type Field~ LangItem ~Info Type Field~		
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(YearbookID,FieldName,InfoType)~

			Define: RefYbMapToYb Using DDText
				Fields:	Text			~Constraint RefYbMapToYb FOREIGN KEY (YearbookID,FieldName) REFERENCES YearbookFields(YearbookID,FieldName)~

		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}


VOID DefineExportYBSetupsTable()
{
	WhichTable = ExportYBSetups;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define: Setup 					CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName	~Setup Name~
			Define: SchoolName				CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~School Name~ LangItem ~School Name~
			Define:	YearbookIDInst			CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName ~Yearbook ID~ LangItem ~Yearbook ID~
			Define:	InfoType				CopyOf ScanSetupName	~[Database FieldTypes]~ Fields: DisplayName ~Info Type~ LangItem ~Info Type~
			Define: AllPosesEnabled			CopyOf Boolean			~[Database FieldTypes]~	Fields: DisplayName	~All Poses~	
			Define:	Profile					CopyOf ICCProfile		~[Database FieldTypes]~ Fields: DisplayName	~Profile~
			Define:	embed					CopyOf Boolean			~[Database FieldTypes]~ Fields: DisplayName	~Embed~
			Define:	QueueName				CopyOf QueueNameCombo	~[Database FieldTypes]~	

			Define: OutputDirectory			CopyOf LongText			~[Database FieldTypes]~	Fields:	DisplayName	~Directory~
	
			Define: RImageEnabled			CopyOf Boolean			~[Database FieldTypes]~	Fields:	DisplayName	~RImage Enabled~
			Define: RImageTemplate			CopyOf OrderID			~[Database FieldTypes]~	Fields:	DisplayName	~RImage Template~ LangItem ~RImageTemplate~
			Define: RImageWriter			CopyOf OrderID			~[Database FieldTypes]~	Fields:	DisplayName	~RImage Writer~ LangItem ~RImageWriter~
			Define: RImageCDPath			CopyOf LongText			~[Database FieldTypes]~	Fields: DisplayName ~Output Media Path~
			Define: DeleteAfterRImage		CopyOf Boolean			~[Database FieldTypes]~	Fields:DisplayName	~Delete After~	 Constraints ~Default 0~ 	
			Define: GroupsPerCD				CopyOf Generic4Digit	~[Database FieldTypes]~	Fields:DisplayName	~Groups Per CD~	 Constraints ~Default 0~ 	

			Define: AutoCropSrcX			CopyOf CropPosition		~[Database FieldTypes]~	Fields:	DisplayName	~Auto Crop Src X~
			Define: AutoCropSrcY			CopyOf CropPosition		~[Database FieldTypes]~	Fields:	DisplayName	~Auto Crop Src Y~
			Define: AutoCropDstX			CopyOf CropPosition		~[Database FieldTypes]~	Fields:	DisplayName	~Auto Crop Dst X~
			Define: AutoCropDstY			CopyOf CropPosition		~[Database FieldTypes]~	Fields:	DisplayName	~Auto Crop Dst Y~
			Define:	AutoCropWidth			CopyOf CropDimension	~[Database FieldTypes]~	Fields: DisplayName	~Auto CropW~ Constraints ~Default 100~
			Define:	AutoCropLength			CopyOf CropDimension	~[Database FieldTypes]~	Fields: DisplayName	~Auto CropL~ Constraints ~Default 100~

			Define: ChromaKeyBGIDOption		CopyOf ChromaKeyBGIDOption ~[Database FieldTypes]~ Fields: DisplayName ~ChromaKey~  Constraints ~Default 0~
			Define: DP2BGId					CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~DP2 BG Id~
			Define: ProductType				CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~Product Type~
			Define: CustomerBGId			CopyOf Generic64Char	~[Database FieldTypes]~ Fields: DisplayName ~Customer BG Id~
		
			Define: BGRed					CopyOf ByteValue		~[Database FieldTypes]~ Fields: DisplayName ~Red~ Constraints ~Default 0~
			Define: BGGreen					CopyOf ByteValue		~[Database FieldTypes]~ Fields: DisplayName ~Green~ Constraints ~Default 0~
			Define: BGBlue					CopyOf ByteValue		~[Database FieldTypes]~ Fields: DisplayName ~Blue~ Constraints ~Default 0~
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: <WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(Setup)~
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Fields				<WhichTable>Fields(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineSchoolLabInfoTable()
{
	WhichTable = SchoolLabInfo;
	Define:				<WhichTable>Fields Using DDLong
		Contains:		InListOrder
		{
			Define: LabName		CopyOf CustomerName	~[Database FieldTypes]~	Fields: DisplayName	~Lab Name~
			Define: Location	CopyOf Generic255Char ~[Database FieldTypes]~	Fields: DisplayName	~Location~
			Define: ContactName	CopyOf CustomerName	~[Database FieldTypes]~	Fields: DisplayName	~Contact~
			Define: Phone		CopyOf Phone		~[Database FieldTypes]~
			Define: Email		CopyOf Email		~[Database FieldTypes]~
		}

	Define:				<WhichTable>		Using DDDatabaseTableDef
		Fields:			TableName			<WhichTable>
						Fields				<WhichTable>Fields(GetObjectReference)
		
	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefinePrintSummaryTable()
{
	Define:			PrintSummaryFields Using DDLong
		Contains:	InListOrder
		{
			Define: Type				CopyOf Generic20Char	~[Database FieldTypes]~ Fields: DisplayName ~Type~
			Define: CLOID				CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~CLOID~
			Define:	ProductID			CopyOf SelectableProductID	~[Database FieldTypes]~ Fields: DisplayName ~Product ID~
			Define: NumPrints			CopyOf Quantity			~[Database FieldTypes]~ Fields: DisplayName ~Number of Prints~ Constraints ~Default 0~
			Define: TotalPrice			CopyOf Cost				~[Database FieldTypes]~ Fields: DisplayName ~Total Cost~ Constraints ~Default 0~
			Define: KEXTotalPrice		CopyOf Cost				~[Database FieldTypes]~ Fields: DisplayName ~KEX Total Cost~ Constraints ~Default 0~
		}

	Define:			PrintSummaryTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: PrintSummaryTablePrimaryKey Using DDText
				Fields:	Text			~Constraint PrintSummaryPrimaryKey PRIMARY KEY(Type,CLOID,ProductID)~
		}

	Define:			PrintSummary	Using DDDatabaseTableDef
		Fields:		TableName			PrintSummary
					Fields				PrintSummaryFields(GetObjectReference)
					TableConstraints	PrintSummaryTableConstraints(GetObjectReference)

	Hang: PrintSummary ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineRoutingProgressTable()
{
	Define:			RoutingProgressFields Using DDLong
		Contains:	InListOrder
		{
			Define: Token				CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Token~ LangItem ~Token~
			Define:	DownloadCount		CopyOf Generic5Digit	~[Database FieldTypes]~ Fields: DisplayName ~Download Count~ LangItem ~DownloadCount~
		}

	Define:			RoutingProgressTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: RoutingProgressTablePrimaryKey Using DDText
				Fields:	Text			~Constraint RoutingProgressPrimaryKey PRIMARY KEY(Token)~
		}

	Define:			RoutingProgress	Using DDDatabaseTableDef
		Fields:		TableName			RoutingProgress
					Fields				RoutingProgressFields(GetObjectReference)
					TableConstraints	RoutingProgressTableConstraints(GetObjectReference)

	Hang: RoutingProgress ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineBackgroundImagesTable()
{
	Define:			BackgroundImagesFields Using DDLong
		Contains:	InListOrder
		{
			Define: RelativePath		CopyOf Generic255Char	~[Database FieldTypes]~ Fields: DisplayName ~Relative Path~ LangItem ~RelativePath~
			Define:	ExpirationDate		CopyOf Generic10Char	~[Database FieldTypes]~ Fields: DisplayName ~Expiration Date~ LangItem ~ExpirationDate~
		}

	Define:			BackgroundImagesTableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define: BackgroundImagesTablePrimaryKey Using DDText
				Fields:	Text			~Constraint BackgroundImagesPrimaryKey PRIMARY KEY(RelativePath)~
		}

	Define:			BackgroundImages	Using DDDatabaseTableDef
		Fields:		TableName			BackgroundImages
					Fields				BackgroundImagesFields(GetObjectReference)
					TableConstraints	BackgroundImagesTableConstraints(GetObjectReference)

	Hang: BackgroundImages ~[DATABASE TableDefinitions]~ InListOrder;
}

VOID DefineClickBalanceAimsDefTable()
{
	WhichTable = ClickBalanceAimsDef;
	Define:			<WhichTable>Fields Using DDLong
		Contains:	InListOrder
		{
			Define:	Name		CopyOf Name			~[Database FieldTypes]~ Fields: DisplayName ~Name~ Constraints ~NOT NULL~ 
			Define:	RedValue	CopyOf ByteValue	~[Database FieldTypes]~ Fields: DisplayName ~Red Value~
			Define:	GreenValue	CopyOf ByteValue	~[Database FieldTypes]~ Fields: DisplayName ~Green Value~
			Define:	BlueValue	CopyOf ByteValue	~[Database FieldTypes]~ Fields: DisplayName ~Blue Value~
		}

	Define:			<WhichTable>TableConstraints Using DDLong
		Contains:	InListOrder
		{
			Define:<WhichTable>PrimaryKey Using DDText
				Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(Name)~
		}
	Define:		<WhichTable>TableIndexes Using DDLong
		Contains:	InListOrder
		{
		}

	Define:			<WhichTable>		Using DDDatabaseTableDef
		Fields:		TableName			<WhichTable>
					Indexes				<WhichTable>TableIndexes(GetObjectReference)
					TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
					Fields				<WhichTable>Fields(GetObjectReference)

	Hang: <WhichTable> ~[DATABASE TableDefinitions]~ InListOrder;
}


OptionalInclude( ~<$App.ShareDirectory>\Scripts\PreFieldTypesOverrides.txt~ );

DefineFieldTypes( ~<$Sym.DatabaseManager>~ );

OptionalInclude( ~<$App.ShareDirectory>\Scripts\FieldTypesOverrides.txt~ );

OptionalInclude( ~<$App.AppDirectory>\PLSTextFiles\ProdXRefTypes.txt~ );

// LOCAL TABLES
DefineOrderItemsToQueueTable();
DefineOrdersToProofTable();
DefineJobsTable();
DefineLocalWorkstationSettingsTable();
DefineLocalDatabaseInfoTable();
DefineFilmtermAdjustmentTable();
DefineLocalRetouchOrderTable();
DefineLocalRawQueueTable();

// SHARED TABLES
DefineSystemSettingsTable();
DefineWorkstationSettingsTable();
//DefineApplicationSettingsTable();
DefineSettingsTable();
DefineProductsTable();
//DefineProductsXrefTable(); // DPT - Commented out on 7/1/03 because it's not used
DefinePackagesTable();
DefineSubjectInfoColumnsTable();
DefineSubjectKparsColumnsTable();
DefineBackgroundSubjectColumnsTable();
DefineCustomerProductsTable();
DefineCustomerTable();
DefineStudiosTable();
DefineOrdersTable();
DefineOrderNotificationsTable();
DefineOrderItemsTable();
DefineSubjectInfoTable();
DefineImagesTable();
DefineSBAImagesTable();
DefineDSBAImagesTable();
DefineFilmtermDataTable();
DefineCompSbaPrefsTable();
DefineCompSbaDataTable();
DefineDSbaPrefsDataTable();
DefineDSbaPrefsDefTable();
DefineDSbaBatchSetupsTable();
DefineKparsDataTable();
DefineRollsTable();
if ( RunningVersion(3.0) )
{
	DefineShootDescTable();
	DefineOrderDlvrblChoicesTable();
	DefineOrderDlvrblTable();
	DefineCompositeTable();
	DefineCompositeNodesTable();	
	DefineNodeDetailsTable();	
	DefineSortsTable();
}
DefineFilmTypesTable();
DefineFilmFormatsTable();
DefineFilmDrivesTable();
DefineDRGBRefsTable();
DefineScanSetupsTable();
DefineFTScanSetupsTable();
DefineImageSorterSummaryTable();
DefineExportImageSetupsTable();
DefineExportOrderItemSetupsTable();
DefineCropsTable();
DefineHeadAlignmentTable();
DefineProfilesTable();
DefinePrintersTable();
DefineJobQueueTable();
DefineManualPaperFillTable();
DefineTemplatesTable();
DefineBooksTable();
DefineBookProductsTableNexpress();
DefineBookProductsTableC8000();
DefineBookAttributesTable();
DefineBookDescriptionTable();
DefineTemplateAttributesTable();
DefineTemplateOverridesTable();
DefineTemplateORSetupTable();
DefineJobQueueSettingsTable();
DefineModuleSettingsTable();
DefinePrinterModelsTable();
DefinePrinterResTable();
DefineQueueDefinitionTable();
DefineRemoteJobDirsTable();
DefineTasksTable();
DefineUserTasksTable();
DefineFileFormatsTable();
DefineMacrosTable();
DefineMacroItemsTable();
DefineMacroCategoriesTable();
DefineRImageMacrosTable();
DefineCompositeMacrosTable();
DefineFileLocationTable();
DefineLayoutPathsTable();
DefineUsersTable();
DefineActivityTable();
DefineBremsonFilmDriveTable();
DefineHR500FilmDriveTable();
DefineHR500AFDFilmDriveTable();
DefineHR500AFDSetupTable();
DefineHalseFilmDriveTable();
DefineHicksFilmDriveTable();
DefineBremsonScanListTable();
DefineCalibrationTable();
DefineViewProfilesTable();
DefineUserPrefsTable();

DefineBremsonCustomersTable();
DefineBremsonOrdersTable();
DefineBremsonRollsTable();
DefineBremsonFramesTable();


DefinePackageDefinitionTable();
DefinePackageUnitsTable();
DefinePrintUnitTable();
DefineTreatmentsTable();

DefineShooterUnitsTable();

DefineDatabaseInfoTable();

DefineTableFormatsTable();

DefineEditorsTable();
DefineNavigateTable();
DefineKPLTable();
DefineProductTreeTable();

DefineRetouchCodesTable();
DefineRetouchTable();
DefineRetouchBatchSetupTable();
DefineRetouchImagesTable();
DefineKparsSetupCodeCrossRefTable();

DefineDCQueueTable();
DefineDCImagePropertiesTable();
DefineDCProfilesTable();
DefineDigitalCameraSetupsTable();

DefineImportImagesSetupsTable();

DefineOrderItemImagesTable();
DefineIDsTable();
DefineRawImagesTable();
DefineIF36PixTable();
DefineIF36PixMasterTable();
DefineImageCorrectionsTable();
DefineImageAdjustmentsTable();

DefineGridDefinitionTable();

DefineScanSetupCropsTable();

DefineTranslationsTable();

DefineRImageTable();
DefineRImageOrdersTable();
DefineRImageEditListTable();
DefineRImageMergeTable();

DefineRImageTemplatesTable();
DefineRImageEditListTemplatesTable();
DefineRImageMergeTemplatesTable();

DefineImageRestoreSetupsTable();

DefineReportQueueInfoTable();
DefineStudioProductCategoryTable();
DefineInksTable();
DefineTexturesTable();


// Table definition for saving PLS settings
DefinePLSSettingsTable();
DefineProShotsClickTable();
DefinePLSTasksTable();
DefinePLSUserTasksTable();

// Table definitions for maintain ProShots information
DefineProShotsProductsTable();
DefineProShotsDatabasesTable();
DefineProShotsUtilizationTable();
DefineJobServicesTable();
DefinePrintServicesTable();
DefineNodeServicesTable();
DefineNegativeServicesTable();
DefineOrderServicesTable();
DefineOrderItemsServicesTable();
DefineOrderedNodeServicesTable();
DefineImagesServicesTable();
DefineCropServiceCodesTable();
DefineCropServicesTable();
DefineBremsonProductCrossRefTable();
DefineLogoTable();
DefineDPPrintServicesPricesTable();
DefineProductXRefTable();
DefineSepiaTable();
DefineColorMatrixTable();
DefineLookupLUTTable();
DefineMaskTable();
DefineLabInfoTable();
DefineEndUserInfoTable();

// Table definitions for Digital Catalog creation in PLS
DefineDPCCompanyInfoTable();
DefineDPCNodeInfoTable();
DefineDPCProductsTable();
DefineDPCDSSProductsTable();
DefineDPCTextNodeTable();
DefineDPCTextNodeMinFontSizeTable();
DefineDPCPrintServicesTable();
DefineDPCProductPrintServicesTable();
DefineDPCCategoryTable();

// To support XML Catalog creation
DefineShippingMethodsTable();
DefineServiceCategoryTable();
DefineProofBookTable();

DefineBackgroundsTable();
DefineBackgroundTypesTable();
DefineCustomerBackgroundsTable();

DefinePrimatteCalibrationsTable();


// Table definitions specifically for PLS support of ProSeries 
DefineProSeriesImagesXrefTable();

// ----- Begin DataMiner Addition -----
DefineOperatorTable();
DefineComputerTable();
DefineDP2PrivilegesTable();
DefineRolesTable();
DefineRolePrivilegesTable();
DefineOperatorsTable();
DefineWorkstationsTable();
DefineUserRoleMappingTable();
DefineWorkstationRoleMappingTable();
DefineEventsTable();
DefineEventHandlerTable();
DefineOperationsTable();
DefineStatusTable();
DefineTrackingTable();
DefineWorkInProgressTable();
DefineStandardRoutingTable();
DefineImagesMetadataTable();
// ----- End DataMiner Addition -----

if ( Authorized( ~KEXDSS~ ) )
{
	DefinePrintsInfoTable();
	DefinePrintChannelsTable();
	DefinePrintSummaryTable();
	DefinePrintOptionsTable();
	DefineBackgroundImagesTable();
}

DefineRoutingProgressTable();

DefineYearbookDefsTable();
DefineYearbookFieldsTable();
DefineYBSIFieldMapTable();
DefineSchoolLabInfoTable();
DefineExportYBSetupsTable();

DefineClickBalanceAimsDefTable();

DefineAnimotoTable();
DefineAnimotoCustomerTable();
DefineAnimotoMovieTable();
DefineAnimotoVisualsTable();
DefineAnimotoRendersTable();

DefineAnimotoLocalStorageTable();
DefineAnimotoWebStorageTable();

DefineAnimotoUsageTable();

//DefineAnimotoSongsTable();


MoreFiles = findfile( aDirectoryEntry,Find,~<$App.ShareDirectory>\Scripts\UserTableDefinitions\*.txt~ );

while ( $Morefiles )
{
	Morefiles = aDirectoryEntry( Next );

	aDirectoryEntry( Get,Path,aPath );
		
	if ( aDirectoryEntry( Dots ) )
		continue;
		
	if ( aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		continue;

	Include: ~<aPath>~;
}

DefineQueryTable();				// THIS WILL HAVE TO GO LAST IF IT IS EVER USED

