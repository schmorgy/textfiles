IncludeClass( BaseGrid );

VOID Computers::Computers()					// CONSTRUCTOR
{
	TableName = ~Computer~;
	DocumentQuery = ~Select * from <TableName> Order By ID~;
	Title = ~Computers~;
	WindowTop = 0;
	WindowWidth = 50;
	WindowHeight = 25;
	InsertActiveCell = ~ID~;
}

STR Computers::GetKey( &Item )	{ return ~ID = <$con.Item[ID]>~; }		// PRIMARY KEY FOR THE TABLE


NUMERIC Computers::ChangeRecordAudits( &Changed )	// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[ID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ID cannot be blank.~ ) ); }

	return TRUE;
}

NUMERIC Computers::OnAddRecord( &NewRow )
{
	//NewRow( Set,ID,~ ~ );
	
	return TRUE;
}

NUMERIC Computers::OnDuplicateRecord( &NewRow )	{ return NewRow( Set,ID,~~ ); }


NUMERIC Computers::OpenSelected()	{ return OnDoubleClick(); }


NUMERIC Computers::OnDoubleClick()
{
	if ( !DataView( GetSelected,SelectedItems ) )	{ return Warning( ~There were no selected items~ ); }

	while ( SelectedItems( GetNext,Item ) )
	{
		ID = ~<$con.Item[ID]>~;
	}

	return TRUE;
}


NUMERIC Computers::DeleteRelatedRecords( &connection,&Item )
{
	return TRUE;

	ID = ~<$con.Item[ID]>~;

	Cmd = ~Delete From  ???~;

	if ( !connection( Cmd,~<Cmd>~ ) )
	{
		return Warning(~Failed to delete the ??? for Operator '<ID>'~ );
	}
	
	return TRUE;
}

NUMERIC Init()
{
	if ( Defined(Grid) )
	{
		Grid.ReOpen();
		return TRUE;
	}

	Class( Computers,Extends,BaseGrid );

	Computers( New,Grid );

	Grid.DefineWindow();
	Grid.Init();

	return Global( Grid );
}


