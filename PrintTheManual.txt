IncludeClass(BaseHTML);
IncludeClass(BaseReport);

Class( Print,Extends,BaseHTML );
Class( Report,Extends,BaseReport );

VOID Print::DefineMessages()
{
	BaseHtml::DefineMessages();
	
	//LoadTranslationFile(Manual,PrintTheManual,PrintTheManual);
}


VOID Print::Handle_Chapter_Node( &Node )
{
	ParseNodesOfList( Node );
}


VOID Print::Handle_Page_Node( &Node )
{
	if ( Node( SelectSingleNode,TitleNode,~Title~ ) )
	{
		Report( New,objReport );
		
		if ( Node( SelectSingleNode,URLNode,~URL~ ) )
		{
			objReport.URL(~<$App.ReportServer>/Manual/<$XMLNode.URLNode[text]>~); 
			
			objReport.Print();
		}
		
		ParseNodesOfList( Node );
	}
}


VOID Print::ParseNodesOfList( &Node )
{
	if ( Node( GetChildNodes, List ) )
	{
		ParseXMLNodes( List );
	}
}


VOID Print::ParseXMLNodes( &NodesList )
{
	while ( NodesList( GetNextNode,Node ) )
	{
		if ( MethodDefined(~Handle_<$XMLNode.Node[Name]>_Node~) )	// Handler defined?
		{
			PushBack(~Handle_<$XMLNode.Node[Name]>_Node(Node);~);	
		}
	}
}


VOID Print::ShowManualContents()
{
	xml( parser );

	if ( !parser( load,~<$App.ShareDirectory>/Scripts/HtmlPages/Manual/ManualTableOfContents.xml~ ) )
	{
		WaitCursor( End );
		return Warning( TR( PrintTheManual,NothingToPring,~<$App.ShareDirectory>/Scripts/HtmlPages/Manual/ManualTableOfContents.xml~) );
	}

	NumNodes = parser( SelectNodes,ChaptersList,~/TableOfContents/*~ );
	
	if ( <NumNodes> == 0 )
	{
		WaitCursor( End );
		return Warning( TR( PrintTheManual,NothingToPring ) );
	}

	ParseXMLNodes( ChaptersList );	
	
	WaitCursor( End );
}


VOID Print::OnPrint()
{
	ShowManualContents();

	Warning( ~Printing~ );
}
	

VOID	Print::ViewDefinition()		{ Fields:	HTMLCloseBox	TRUE; }
VOID	ReOpen()					{ Win.ReOpen(); }

Print( New,Win );

Win.Static();

Win.CreateAndOpen( ~<$App.HTTPServer>/Manual/PrintTheManual.kpl~ );

Win.SetWindowTitle(TR(PrintTheManual,Title));







