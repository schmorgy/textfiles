
NUMERIC RefreshDoc()
{
	RefreshListView();
}

NUMERIC RefreshListView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate( ~Would you like to save your pending changes?~ ),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <DocumentQuery>. <theErr>~ );
	}

	SetDocumentData( List(GetObject) );
	
	DataWindow( StatusBar,Text,~Refreshing~ );
	DataWindow( RefreshWindow );
	DataWindow( StatusBar,Text,~~ );

	return TRUE;
}


NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,Changed,Orig,ChangedRow,IsNewRow ) )
		{ return Warning( Translate( ~There was no changed row.~ ) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$con.Changed[Name]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Name cannot be blank.~ ) ); }

	Key = ~Name = '<$con.Orig[Name]>'~;
	
	Query = ~Select * From Macros Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	if ( !List( UpdateFrom,Changed,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( ~Could not update Macro record where <Key>. <theErr>~ );
	}

	DataView( CommitChanges );	
	
	return TRUE;
}


NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,ItemsToDelete ) )		
		{ return Warning( Translate( ~There were no Macros selected to delete~ ) ); }

	Count = ItemsToDelete( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There were no items selected to delete~ ) ); }

	if ( MessageBox( Translate( ~Are you sure you want to delete the <Count> selected rows from Macros?~ ),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not connect to the database. <theErr>~ );
	}

	StringList( RowsToDelete,New );

	while ( ItemsToDelete( GetNext,Item ) )
	{
		Key = ~Name = '<$con.Item[Name]>'~;

		Cmd = ~Delete From Macros Where <Key>~;

		if ( !dBase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			Warning( Translate(~Database update failed: <Cmd>. <theErr>~) );
		}
		else
		{
			RowsToDelete( AddString,ItemsToDelete(GetCurrentPosition) );
		}
	}

	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}


NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	NewRow( Set,UserDefined,TRUE );
	
	RowBeingAdded = DataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate( ~You are too low on memory to add any more rows~ ) ); }

	DataView( SetActiveCell,<RowBeingAdded>,SubmittedAt );

	return TRUE;
}


VOID OpenSelected()
{
	ViewAsText();
}


NUMERIC ViewAsText()
{
	if ( !DataView( GetSelected,ItemsToView ) )
		{ return Warning( ~There is nothing selected~ ); }

	Count = ItemsToView( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There are no selected Items to view ~ ) ); }

	Program = ~<$Sys.Directory>\Notepad.exe~;

	if ( !Files( FileExists,~<Program>~ ) )
	{
		return Warning( Translate( ~Could not find NotePad.exe at <Program>~ ) );
	}

	while ( ItemsToView(GetNext,Item) )
	{
		if ( ~<$con.Item[Path]>~ == ~~ )
		{
			Warning( Translate( ~<$con.Item[Name]> is not defined in a file that can be opened~ ) );
		}
		else 
		{
			if ( !ShellExecute( Open,~<Program>~,~<$con.Item[Path]>~ ) )
			{
				GetLastError( ErrorString,theErr );
				return Warning( Translate( ~Could not open <$con.Item[Path]>. <theErr>~ ) );
			}
		}
	}

	return TRUE;
}


NUMERIC OnButtonClick()
{
	DataView( GetActiveCell,Row,Col );

	if ( FileDialog( Title,Translate(~Find File Containing Macro Definition~),Path,Path,Open ) )
	{

		if ( !Files( IsUNC,~<Path>~ ) && NetworkOperation() )
		{
			Msg = Translate( UIMessages,UnsharedFile,~<Path>~ );

			if ( MessageBox( ~<Msg>~,YESNO ) != YES )
				{ return FALSE; }
		}

		GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );

		Fields( GetAt,<col> - 1,ColumnDefinition );

		DataView( SetCellValue,<Row>,<Col>,~<Path>~ );
	}

	return TRUE;
}


NUMERIC AllOptions()
{
	return DataView( DisplayMenu,ListViewMenu,0,0  );
}



NUMERIC RightClickInListView()
{
	DataView( DisplayMenu,ListViewMenu );

	return TRUE;
}


VOID OnKeydown()
{
	GenCon( View,GetActiveView );

	Key = View( GetLastKeyStateless,KeyString );
	
	if (  !View( PerformMenuAction,ListViewMenu,~<KeyString>~ ) )
	{
		DataView( DisplayMenu,ListViewMenu,0,0  );
	}
}


NUMERIC OnCloseDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate( ~Would you like to save your pending changes?~ ),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	return DataWindow( ForceCloseWindow );
}


NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new macros that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}


FirstTime = TRUE; // Only open a new window the first time

NUMERIC Init( WhichMacros,DocumentQuery )
{
	DataWindow( Set,Title,~<WhichMacros>~ == ~~ ? ~Macro Data~ : ~Macro Data - <WhichMacros>~ );

	Global( DocumentQuery,WhichMacros );

	if ( <FirstTime> )
	{
		FirstTime = TRUE;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			Error( ~Query Failed: <DocumentQuery>. <theErr>~ );
		}

		SetDocumentData( List(GetObject) );

		if ( !DataWindow( CreateWindow,Translate( ~Macros~ ) ) )
		{
			 Error( Translate( ~Failed to create the window~ ) ); 
		}

		return TRUE;
	}

	RefreshListView();

	return TRUE;
}

ButtonWidth = 55;  ButtonHeight = 20;  hGap = 1; vGap = 2;

Include: ~DefineStdGridButtons~;


if ( !GenCon( TableDefinition,GetFrom,Macros,~[DATABASE TableDefinitions]~ ) )
	{ Error( Translate( ~The Macros Table is not properly defined~ ) ); }
	

Define:	ListViewMenu Using DDMenuDef AsSymbol ListViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{
		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add Macro~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )

		Define:	NULL1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

		Define:	DeleteRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Delete~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(); )
	}

Define: DataWindow Using DDWinDef
	Fields:		Title					Translate( ~Macros~ )
				Position				0 50 70 40
				IsPositionPercent		T
				EnableStatusBar			F
				TypeName				SplitterWnd
				SplitterRows			~2 1 90~
				SplitterColumns			1

	Contains:	INLISTORDER
	{
		Define: ControlView Using DDViewDef AsSymbol ControlView
			Fields:			ViewType				FormView
							KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
							HActionsText			ACTION SHOWHELPPAGE ( AdminHelpFile "MacrosData.htm" )
				Contains:
				{
					position = DefineStdGridButtons(Macro) + 10;
				}

		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				ListView
					GridControlTypes		TableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					ButtonClickActionsText	ACTION Exec ( OnButtonClick() )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					CloseActionsText		ACTION Call ( OnCloseDataView() )
					DoubleClickActionsText	ACTION Exec ( ViewAsText() )
					KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
					FontSize				10
					HActionsText			ACTION SHOWHELPPAGE ( AdminHelpFile "MacrosData.htm" );
	};
	
	
OptionalInclude( ~<$App.ShareDirectory>\Scripts\ScriptOverrides\MacrosDoc.txt~ );



