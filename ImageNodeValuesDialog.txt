LeftMargin = 20;
StaticTextWidth = 70;
SmallStaticTextWidth = 35;
BigStaticTextWidth = 200;
BigEditTextWidth = 115;
MediumStaticTextWidth = 145;
EditTextWidth = 70; 
MediumEditTextWidth = 200; 
SliderWidth = 170;
VerticalGap = 10;
UnitsWidth = 19;
hGap = 5;
HelpButtonXOffset = 15;	HelpButtonYOffset = 30;
HelpButtonWidth = 30;	HelpButtonLength = 20;
CropButtonWidth = 70;
UnitsXOffset = 3;
UnitsYOffset = 0;
SmallRadioButtonWidth = 40;
MediumRadioButtonWidth = 60;
RadioButtonWidth = 100;
SmallRadioButtonIncrement = 10;
RadioButtonOffset = 150;
MedStaticTextWidth = 70;
Startingypos = 90;
AutoCropWidth = 55;
AutoCropStaticWidth = 26;

StringList(Dummy,New);
if (!Dummy(GetList,FacePositions))
{
	StringList: Name ~FacePositions~ 
		Fields: String ~Bottom of Chin~
		Fields: String ~Top of Head~
	Hang:	FacePositions	~[STRINGS]~;
}


Query = ~Select TextureName from Textures Order By Sequence~;

// Note:  DActions fields in dialogs should be set up to save
// values each time the user moves a slider, edits a text field, etc.
// The reason is that UGenDlg is set up to copy data from its source GenCon
// to the control each time a view is activated.  If we activate a UGenDlg
// to move a slider, then click in the view, we copy the data from its GenCon
// to its control.  If we hadn't saved the new slider value as it changed, it
// can be wiped out.

// ypos = current y value within the tab
// Prefix unique 2 character prefix for each tab.  Cannot be more than 2 characters
// SpotColorKeyword for example ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword)
// SpotTextureKeyword for example ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword)
// TranslucenceKeyword for example ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
// TextureNameKeyword for example SpotColorImageTexture: name of keyword that contains the nae of the texture.
VOID DefineSpotColorControls(&ypos,Prefix,SpotColorKeyword,SpotTextureKeyword,TranslucenceKeyword,TextureNameKeyword)
{
	Hidden = IsNull(~<TextureNameKeyword>~) ? ~T~ : ~F~;
	Define: <Prefix>SpotColorComboBox Using DDwinCtrlDef AsSymbol <Prefix>SpotColorComboBox
	Fields: TypeName		SComboBox
			Position		$LeftMargin ,  <ypos>+5, $MediumRadioButtonWidth+ 30, 100
			// Iactions were moved into the engine 2/1/11 in ImageNodeValuesDialog.cpp for speed reasons
			//IActionsText ACTIONS ( 	
			//				GetList(SpotColorChoices)
			//				ExecFile(ImageNodeDlgRoutines.txt)
			//				Exec(SetComboBox(<Prefix>SpotColorComboBox,~<SpotColorKeyword>~, ~<SpotTextureKeyword>~,<Prefix>TextureComboBox,<Prefix>SpotColorTranslucenceEditText,<Prefix>SpotColorTranslucenceSlider);)
			//				) 
			DActionsText ACTIONS ( 
							ExecFile(ImageNodeDlgRoutines.txt)
							Exec(OnSpotColorComboBoxPressed(ImageNodeValuesDialog,<Prefix>SpotColorComboBox,~<SpotColorKeyword>~, ~<SpotTextureKeyword>~,<Prefix>TextureComboBox,<Prefix>SpotColorTranslucenceEditText,<Prefix>SpotColorTranslucenceSlider);)
							) 
			Text			~Texture~
			Keyword1		~<SpotColorKeyword>~			// used for engine processing of this control
			Keyword2		~<SpotTextureKeyword>~			// used for engine processing of this control
			Tooltip			~Select the type of spot color~;

	Define: <Prefix>SpotColorTranslucenceStatic Using DDWinCtrlDef AsSymbol <Prefix>SpotColorTranslucenceStatic
	fields:	TypeName StaticText
			Text ~Spot color opacity:~
			Position <Prefix>SpotColorComboBox(GetRight,Position) + 15 <Prefix>SpotColorComboBox(GetTop,Position) 90  30

	Define: <Prefix>SpotColorTranslucenceEditText Using DDWinCtrlDef AsSymbol <Prefix>SpotColorTranslucenceEditText
	fields:	TypeName MaskedEditText
			GenConName THIS
			GenConField ~<TranslucenceKeyword>~
			IActionsText [Get]
			Position <Prefix>SpotColorTranslucenceStatic(GetRight,Position) + 15, <Prefix>SpotColorComboBox(GetTop,Position) , 40 , 20
			Mask		 ~###~ 
			AllowedChars ~-~
			PromptChar	 ~ ~		
			InsertOn	~T~	
			ControlToUpdate <Prefix>SpotColorTranslucenceSlider
			EnableIfFieldTrue ~<SpotColorKeyword>~
			Tooltip ~0 = greatest amount of spot color, 100 = no spot color~;


	Define: <Prefix>SpotColorTranslucenceSlider Using DDWinCtrlDef AsSymbol <Prefix>SpotColorTranslucenceSlider
	fields:	TypeName Slider
			GenConName THIS
			GenConField ~<TranslucenceKeyword>~
			Position <Prefix>SpotColorTranslucenceEditText(GetRight,Position) + 5, <Prefix>SpotColorComboBox(GetTop,Position) , 100 , 20
			ControlToUpdate <Prefix>SpotColorTranslucenceEditText
			EnableIfFieldTrue ~<SpotColorKeyword>~
			Tooltip ~0 = greatest amount of spot color, 100 = no spot color~;

	ypos = <ypos> + 30;
	Define: <Prefix>TextureStaticText Using DDWinCtrlDef AsSymbol <Prefix>TextureStaticText
	fields:	TypeName StaticText
			Position $LeftMargin <ypos>  $StaticTextWidth + 20  30
			IsHidden	~<Hidden>~
			Text ~Spot Texture:~;


	Define: <Prefix>TextureComboBox Using DDWinCtrlDef AsSymbol <Prefix>TextureComboBox
	fields:	TypeName SComboBox
			GenConName THIS
			GenConField ~<TextureNameKeyword>~
			Position <Prefix>TextureStaticText(GetRight,Position)+ 5,  <ypos> , 200 , 100
			IActionsText	~[GetList(TextureChoices) Get]~
			IsHidden	~<Hidden>~
			DactionsText ACTIONS ( 
								ExecFile(ImageNodeDlgRoutines.txt)
								Exec(SaveComboBox(ImageNodeValuesDialog,<Prefix>TextureComboBox,~<TextureNameKeyword>~,~<Prefix>SpotColorTranslucenceSlider~,~<Prefix>SpotColorTranslucenceEditText>~);)
								) 								
			Tooltip ~Select a texture.  This is for Nexpress prints using dimensional ink~;

	Define: ZZ<Prefix>SpotColorGroupBox Using DDWinCtrlDef
	fields:	TypeName GroupBox
			Text ~Spot Color~
			Position $LeftMargin - 5, <Prefix>SpotColorComboBox(GetTop,Position) - 17, 370, <Prefix>TextureStaticText(GetBottom,Position) - <Prefix>SpotColorComboBox(GetTop,Position) + 14  ;

}

VOID DefineImageTab()
{

	Define: Tab1 Using DDWinCtrlDef
	fields: Text ~Image~
			TypeName Tab
			Tooltip ~Define image file or copy from rectangle~

	Contains: InListOrder
	{

	ypos = $StartingYPos - 15;
	Define: PromptStaticText Using DDWinCtrlDef
	fields:	TypeName StaticText
			Position $LeftMargin <ypos>  $StaticTextWidth  20
			Text ~Prompt:~

	Define: PromptEditText Using DDWinCtrlDef
	fields:	TypeName MaskedEditText
			Position $StaticTextWidth + $LeftMargin + 10,  <ypos> , 270 , 20
			GenConField ~IPrompt:~
			Mask		 RepeatStr(1023,~%~)	
			PromptChar	 ~ ~	
			InsertOn	~T~	
			Tooltip ~Enter a prompt.  You can control which node is initially selected when you open a job by providing a prompt.~;


	Define: ImageNodeOptionsHelpButton Using DDWinCtrlDef
	fields:	TypeName		Button
			Text			~Help~
			Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
							ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
							$HelpButtonWidth $HelpButtonLength
			DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INImage Text.htm" ) ;


	ypos = <ypos> + 25;
	Define: ImageButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Image...~
			Position $LeftMargin <ypos>  60  20
			GenConField ~IFile:~
			Tooltip ~Select an image file~;

	Define: ClearImageButton Using DDWinCtrlDef
			fields:	TypeName Button
			Text ~Remove Image~
			Position $LeftMargin + 70, <ypos> , 80 , 20
			GenConField ~IFile:~
			Tooltip ~Clear the image file field~;


	Define: INTIDStaticText Using DDWinCtrlDef
	fields:	TypeName StaticText
			Text ~Node ID:~
			Position 190 <ypos> + 3  50  20 ;

	Define: INTIDField Using DDWinCtrlDef
	fields:	TypeName StaticText
			GenConField ~INTID:~
			Position 250 <ypos> + 3  59  20
			Tooltip ~Node ID~;

	Define: CountableStaticText Using DDWinCtrlDef
	fields:	TypeName StaticText
			Text ~Countable~
			Position 311, <ypos> + 3 , 60 , 20;

	ypos = <ypos> + 25;
	Define: ImageEditText Using DDWinCtrlDef
//		fields:	TypeName MLEditText
	fields:	TypeName MaskedEditText
			Position $LeftMargin <ypos> 350  20
//				Position $LeftMargin <ypos> 350  30
			GenConField ~IFile:~
//				InsertOn	~T~	
//				NoVerticalScroll ~T~
//				WantReturnKey ~F~
			RightJustified 1
			Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
			PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
			AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
			DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
			Tooltip ~Edit image file path~;

	ypos = <ypos> + 30;
	Define: FilenameStaticText Using DDWinCtrlDef
	fields:	TypeName StaticText
			Position $LeftMargin, <ypos>  , 300 , 20;

	ypos = <ypos> + 34;
	Define: ImageResizeRadioButtonL Using DDWinCtrlDef
	fields: TypeName RadioButton  
			Position $LeftMargin + 20 , <ypos> ,80 ,20 
			GenConField ~ImageResize:~
			RadioTrueValue ~L~
			Text ~Bilinear~
			IsTabStop 1	 
			Tooltip ~Use a fast, high quality resize algorithm.  (Recommended)~;

	Define: ImageResizeRadioButtonC Using DDWinCtrlDef
	fields: TypeName RadioButton  
			Position $LeftMargin + 130 , <ypos> ,80 ,20 
			GenConField ~ImageResize:~
			RadioTrueValue ~C~
			Text ~Bicubic~
			IsTabStop 1	 
			Tooltip ~Use a slower, very high quality resize algorithm~;

	Define: ImageResizeRadioButtonN Using DDWinCtrlDef
	fields: TypeName RadioButton  
			Position $LeftMargin + 230 , <ypos> ,120 ,20 
			GenConField ~ImageResize:~
			RadioTrueValue ~N~
			IsTabStop 1
			Text ~Nearest Neighbor~	 
			Tooltip ~Use a very fast, lower quality resize algorithm.  Adequate for proofing or small non-critical images~;
	groupBoxYPos = <ypos> - 15;

	Define: ZZImageResizeGroupBox Using DDWinCtrlDef
	fields:	TypeName GroupBox
			Text ~Image Resize Method:~
			Position $LeftMargin <groupBoxYPos> 360  40;

	Define: ImageNodeOptionsHelpButton Using DDWinCtrlDef
	fields:	TypeName		Button
			Text			~Help~
			Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
							ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
							$HelpButtonWidth $HelpButtonLength;


	ypos = <ypos> + 50;
	copyFromYPos = <ypos> - 20;
	Define: CopyFromXStaticText Using DDWinCtrlDef AsSymbol CopyFromXStaticText
	fields:	TypeName StaticText
			Text ~Left:~
			Position $LeftMargin + 3 <ypos>   $SmallStaticTextWidth  20 


	Define: CopyFromXEditText Using DDWinCtrlDef AsSymbol CopyFromXEditText
	fields:	TypeName MaskedEditText
			Position CopyFromXStaticText(GetRight,Position) + 5 <ypos> $BigEditTextWidth  20
			GenConField ~CopyFrom:~
			ArrayPos 0
			Mask		 ~##################~
			AllowedChars ~.-~
			PromptChar	 ~ ~		
			Tooltip ~Edit left~;

	Define: CopyFromXUnitsStaticText Using DDWinCtrlDef AsSymbol CopyFromXUnitsStaticText
	fields:	TypeName StaticText
			Text ~in.~
			Position CopyFromXEditText(GetRight,Position) + $UnitsXOffset <ypos>  $UnitsWidth  20 

	Define: CopyFromYStaticText Using DDWinCtrlDef AsSymbol CopyFromYStaticText
	fields:	TypeName StaticText
			Text ~Top:~
			Position CopyFromXUnitsStaticText(GetRight,Position) + +$UnitsXOffset  <ypos>+$UnitsYOffset   $SmallStaticTextWidth  50 


	Define: CopyFromYEditText Using DDWinCtrlDef AsSymbol CopyFromYEditText
	fields:	TypeName MaskedEditText
			Position CopyFromYStaticText(GetRight,Position) + 5 <ypos> $BigEditTextWidth  20
			GenConField ~CopyFrom:~
			ArrayPos 1
			Mask		 ~##################~
			AllowedChars ~.-~
			PromptChar	 ~ ~		
			Tooltip ~Edit top~;

	Define: CopyFromYUnitsStaticText Using DDWinCtrlDef AsSymbol CopyFromYUnitsStaticText
	fields:	TypeName StaticText
			Text ~in.~
			GenConName THIS
			Position CopyFromYEditText(GetRight,Position) +$UnitsXOffset <ypos>+$UnitsYOffset  $UnitsWidth  20 ;

	ypos = <ypos> + 30; 
	Define: CopyFromWidthStaticText Using DDWinCtrlDef AsSymbol CopyFromWidthStaticText
	fields:	TypeName StaticText
			Text ~Width:~
			Position CopyFromXStaticText(GetLeft,Position) <ypos>   $SmallStaticTextWidth  20 

	Define: CopyFromWidthEditText Using DDWinCtrlDef AsSymbol CopyFromWidthEditText
	fields:	TypeName MaskedEditText
			Position CopyFromWidthStaticText(GetRight,Position)+5 <ypos> $BigEditTextWidth  20
			GenConField ~CopyFrom:~
			ArrayPos 2
			Mask		 ~##################~
			AllowedChars ~.~
			PromptChar	 ~ ~		
			Tooltip ~Edit width~;

	Define: CopyFromWUnitsStaticText Using DDWinCtrlDef AsSymbol CopyFromWUnitsStaticText
	fields:	TypeName StaticText
			Text ~in.~
			GenConName THIS
			Position CopyFromWidthEditText(GetRight,Position) + $UnitsXOffset <ypos>+$UnitsYOffset  $UnitsWidth  20 

	Define: CopyFromHeightStaticText Using DDWinCtrlDef AsSymbol CopyFromHeightStaticText
	fields:	TypeName StaticText
			Text ~Height:~
			Position CopyFromWUnitsStaticText(GetRight,Position) + 5  <ypos>   $SmallStaticTextWidth  20 


	Define: CopyFromHeightEditText Using DDWinCtrlDef AsSymbol CopyFromHeightEditText
	fields:	TypeName MaskedEditText
			Position CopyFromHeightStaticText(GetRight,Position) + 5 <ypos> $BigEditTextWidth  20
			GenConField ~CopyFrom:~
			ArrayPos 3
			Mask		 ~##################~
			AllowedChars ~.~
			PromptChar	 ~ ~		
			Tooltip ~Edit height~;

	Define: CopyFromHUnitsStaticText Using DDWinCtrlDef AsSymbol CopyFromHUnitsStaticText
	fields:	TypeName StaticText
			Text ~in.~
			GenConName THIS
			Position CopyFromHeightEditText(GetRight,Position) + $UnitsXOffset <ypos>+$UnitsYOffset  $UnitsWidth  20 ;

	ypos = <ypos> + 40; 
	
	Define: ZZCopyFromGroupBox Using DDWinCtrlDef
	fields:	TypeName GroupBox
			Text ~Copy From Rectangle~
			Position $LeftMargin - 5 <copyFromYPos> 360 + 10  <ypos> - <copyFromYPos> - 15  ;
	
	Prefix = II;		// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
	DefineSpotColorControls(ypos,~<Prefix>~,~ISpotColorImage:~, ~ISpotTextureImage:~, ~ISpotColorTranslucence:~,~SpotColorImageTexture:~);

	ypos = <ypos> + 22;
	Define: DontRenderCheckBox Using DDWinCtrlDef AsSymbol DontRenderCheckBox
	fields:	TypeName CheckBox
			GenConField ~NoRender:~
			Text ~Don't Render~
			Position $LeftMargin, <ypos>+5, 100, 15
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			OActionsText ~[Save]~
			Tooltip ~Don't Render this node.  Useful for using subject info macros that find text based on an invisible image~;

	Define: DontPrintCheckBox Using DDWinCtrlDef AsSymbol DontPrintCheckBox
	fields:	TypeName CheckBox
			GenConField ~NoPrint:~
			Text ~Don't Print~
			Position DontRenderCheckBox(GetRight,Position) + 20, <ypos>+5, 70, 15
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			OActionsText ~[Save]~
			Tooltip ~Render this node to the screen but Don't Print this node.  Useful for using subject info macros that find text based on an invisible image.~;

	Define: DontRenderImageCheckBox Using DDWinCtrlDef AsSymbol DontRenderImageCheckBox
	fields:	TypeName CheckBox
			GenConField ~NoRenderImage:~
			Text ~Don't Render Image~
			Position DontPrintCheckBox(GetRight,Position) + 20, <ypos>+5, 120, 15
			IsTabStop 1
			IActionsText ~[Get]~
			DActionsText ~[Save]~
			OActionsText ~[Save]~
			Tooltip ~Render the text in this node but not the image in this node.  Useful for using subject info macros that find text based on the invisible image in an image and text node.~;


			
	Define: AfterNodeRenderStaticText Using DDWinCtrlDef AsSymbol AfterNodeRenderStaticText
		fields:	TypeName StaticText
				Text ~Effects~
				Position DontRenderCheckBox(GetLeft,Position) + 45 DontRenderCheckBox(GetBottom,Position)+8 35 20

	Define: AfterNodeRenderEditText Using DDWinCtrlDef AsSymbol AfterNodeRenderEditText
		fields:	TypeName MaskedEditText
				GenConName THIS
				GenConField ~AfterNodeRender:~
				Position AfterNodeRenderStaticText(GetRight,Position) , AfterNodeRenderStaticText(GetTop,Position)-2 , 285 , 20
				Mask		 RepeatStr(1024,~*~) 
				PromptChar	 ~ ~		
				InsertOn	~T~	
				IActionsText	~[GetIfImageNode]~
				DActionsText	~[SaveIfImageNode SETATTRSTATUSCHANGE]~
				OActionsText	~[SaveIfImageNode]~
				Tooltip ~Calls to alter the image before pasting into the background~;
	}
}

VOID DefineTab14()
{
		Define: Tab14 Using DDWinCtrlDef
		fields: Text ~Chroma Key~
				TypeName Tab
				Tooltip ~Define chroma key background file~

		Contains: InListOrder
		{

		ypos = $StartingYPos;
		Define: ChromaKeyPortraitBGButton Using DDWinCtrlDef AsSymbol ChromaKeyPortraitBGButton
		fields:	TypeName Button
				Text ~Chroma Key Portrait Background...~
				Position $LeftMargin <ypos>  190  20
				GenConField ~ChromaKeyPortraitBGFile:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[FileOpenBuildThumbnailRegister UpdateControl(ChromaKeyPortraitEditText)]~
				OActionsText ~[NULL]~
				Tooltip ~Select an chroma key portrait bg~;

		Define: ClearChromaKeyPGButton Using DDWinCtrlDef AsSymbol ClearChromaKeyPGButton
				fields:	TypeName Button
				Text ~Remove~
				Position ChromaKeyPortraitBGButton(GetRight,Position)+5, <ypos> , 162 , 20
				GenConField ~ChromaKeyPortraitBGFile:~
				IActionsText ~[GetIfImageNode]~
				DactionsText ACTIONS ( 
									ExecFile(ClearField.txt)
									Exec(ClearField(ImageNodeValuesDialog,~ChromaKeyPortraitBGFile:~);)
									Update(ChromaKeyPortraitEditText)
									Update(ChromaKeyPortraitBGButton)
									)							
				OActionsText ~[NULL]~
				Tooltip ~Clear the Chroma key portrait bg~;
		ypos = <ypos> + 30;
		Define: ChromaKeyPortraitStaticText Using DDWinCtrlDef AsSymbol ChromaKeyPortraitStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+160  20
				Text ~Chroma Key Portrait Background:~;

		ypos = <ypos> + 18;
		Define: ChromaKeyPortraitEditText Using DDWinCtrlDef AsSymbol ChromaKeyPortraitEditText
		fields:	TypeName MaskedEditText
				Position ChromaKeyPortraitStaticText(GetLeft,Position),  <ypos> , 360 , 20
				GenConField ~ChromaKeyPortraitBGFile:~
				RightJustified 1
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit background file path~
				PromptChar	 ~ ~	
				InsertOn	~T~	
					IActionsText ~[GetIfImageNode]~
					DActionsText ~[SaveIfImageNode]~
					OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter a chroma key file.~;

		ypos = <ypos> + 45;
		Define: ChromaKeyLandscapeBGButton Using DDWinCtrlDef AsSymbol ChromaKeyLandscapeBGButton
		fields:	TypeName Button
				Text ~Chroma Key Landscape Background...~
				Position $LeftMargin <ypos>  190  20
				GenConField ~ChromaKeyLandscapeBGFile:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[FileOpenBuildThumbnailRegister UpdateControl(ChromaKeyLandscapeEditText)]~
				OActionsText ~[NULL]~
				Tooltip ~Select an chroma key Landscape bg~;

		Define: ClearChromaKeyLGButton Using DDWinCtrlDef AsSymbol ClearChromaKeyLGButton
				fields:	TypeName Button
				Text ~Remove~
				Position ChromaKeyLandscapeBGButton(GetRight,Position)+5, <ypos> , 162 , 20
				GenConField ~ChromaKeyLandscapeBGFile:~
				IActionsText ~[GetIfImageNode]~
				DactionsText ACTIONS ( 
									ExecFile(ClearField.txt)
									Exec(ClearField(ImageNodeValuesDialog,~ChromaKeyLandscapeBGFile:~);)
									Update(ChromaKeyLandscapeEditText)
									Update(ChromaKeyLandscapeBGButton)
									)							
				OActionsText ~[NULL]~
				Tooltip ~Clear the Chroma key Landscape background file~;
		ypos = <ypos> + 30;
		Define: ChromaKeyLandscapeStaticText Using DDWinCtrlDef AsSymbol ChromaKeyLandscapeStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+160  20
				Text ~Chroma Key Landscape Background:~;

		ypos = <ypos> + 18;
		Define: ChromaKeyLandscapeEditText Using DDWinCtrlDef AsSymbol ChromaKeyLandscapeEditText
		fields:	TypeName MaskedEditText
				Position ChromaKeyLandscapeStaticText(GetLeft,Position),  <ypos> , 360 , 20
				GenConField ~ChromaKeyLandscapeBGFile:~
				RightJustified 1
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit background file path~
				PromptChar	 ~ ~	
				InsertOn	~T~	
					IActionsText ~[GetIfImageNode]~
					DActionsText ~[SaveIfImageNode]~
					OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter a chroma key file.~;

		ypos = <ypos> + 45;
		Define: ChromaKeyBackIDStaticText Using DDWinCtrlDef AsSymbol ChromaKeyBackIDStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+140  30
				Text ~Chroma Key Background ID:~;

		ypos = <ypos> + 18;
		Define: ChromaKeyBackIDComboBox Using DDWinCtrlDef AsSymbol ChromaKeyBackIDComboBox
		fields:	TypeName SComboBox
				GenConName THIS
				GenConField ~Chromakeybgid:~
				Position ChromaKeyBackIDStaticText(GetLeft,Position),  <ypos> , 360 , 100
				Tooltip ~Select a background id~;

		ypos = <ypos> + 30;
		Define: NoMergeBackground Using DDWinCtrlDef AsSymbol NoMergeBackground
		fields:	TypeName CheckBox
				GenConField ~NoMergeBackground:~
				Text ~Never merge background~
				Position ChromaKeyBackIDStaticText(GetLeft,Position) ,<ypos> 170 15
				IsTabStop 1
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Never merge the background for this image.  This would allow you to put a transparent .png file in this node, for example~;
				
		ypos = <ypos> + 20;
		Define: RulesStaticText Using DDWinCtrlDef AsSymbol RulesStaticText
		fields:	TypeName StaticText
				GenConField ~Rules~
				Position $LeftMargin <ypos>  ChromaKeyBackIDComboBox(GetWidth,Position)+8   40
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~If the rules are used to find a background they are shown here in the order Customer ID, Program ID, Product Type, Info Table, Customer Background ID.  If the rules are not used, this space is blank.~
				Text ~~;


		Define: ChromaKeyHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "ChromaKey.htm" ) ;

		}
}


VOID DefineTab1()
{
		Define: Tab01 Using DDWinCtrlDef
		fields: Text ~Head Align~
				TypeName Tab				
		Tooltip ~Align Heads~

		Contains: InListOrder
		{

		ypos = $StartingYPos;

		Define: AlignHeadsCheckBox using DDWinCtrlDef
		fields:	TypeName CheckBox
				Position $LeftMargin <ypos> 200  20
				GenConField ~AlignHeads:~
				Text ~Align Heads~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Align the eye position of the image over a desired position in the node~;
		
		ypos = <ypos> + 30;
		Define: HeadAlignEyeXStaticText Using DDWinCtrlDef AsSymbol HeadAlignEyeXStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+100  20
				Text ~Average Horizontal Eye Position~;

		Define: HeadAlignEyeXEditText Using DDWinCtrlDef AsSymbol HeadAlignEyeXEditText
		fields:	TypeName MaskedEditText
				Position HeadAlignEyeXStaticText(GetRight,Position)+5,  <ypos> , 60 , 20
				GenConField ~HorizontalEyePosition:~
				Mask		 ~####~
				PromptChar	 ~ ~	
				InsertOn	~T~	
				AllowedChars ~.~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode  UpdateControl(HeadAlignEyeXSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the average of the left and right eye horizontal coordinate as a percentage of the image node~;


		Define: HeadAlignEyeXSlider Using DDWinCtrlDef AsSymbol HeadAlignEyeXSlider
		fields:	TypeName Slider
				Position HeadAlignEyeXEditText(GetRight,Position)+10 <ypos> 100  20
				GenConField ~HorizontalEyePosition:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode  UpdateControl(HeadAlignEyeXEditText)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the average of the left and right eye horizontal coordinate as a percentage of the image node~;


		ypos = <ypos> + 30;
		Define: HeadAlignEyeYStaticText Using DDWinCtrlDef AsSymbol HeadAlignEyeYStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+100  20
				Text ~Average Vertical Eye Position~;

		Define: HeadAlignEyeYEditText Using DDWinCtrlDef AsSymbol HeadAlignEyeYEditText
		fields:	TypeName MaskedEditText
				Position HeadAlignEyeYStaticText(GetRight,Position)+5,  <ypos> , 60 , 20
				GenConField ~VerticalEyePosition:~
				Mask		 ~####~
				PromptChar	 ~ ~	
				InsertOn	~T~	
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode UpdateControl(HeadAlignEyeYSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the where to vertically position the eyes in the image node as a percentage (0-100) of the image node.~;

		Define: HeadAlignEyeYSlider Using DDWinCtrlDef AsSymbol HeadAlignEyeYSlider
		fields:	TypeName Slider
				Position HeadAlignEyeYEditText(GetRight,Position)+10 <ypos> 100  20
				GenConField ~VerticalEyePosition:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode  UpdateControl(HeadAlignEyeYEditText)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the where to vertically position the eyes in the image node as a percentage (0-100) of the image node.~;
		ypos = <ypos> + 60;
		Define: HeadAlignCropMethodStatic  Using DDWinCtrlDef AsSymbol HeadAlignCropMethodStatic
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+110  20
				Text ~Zoom Using Vertical Eye Position and~;
		Define: HeadAlignCropMethod Using DDWinCtrlDef AsSymbol HeadAlignCropMethod
		fields:	TypeName SComboBox
				Position HeadAlignCropMethodStatic(GetRight,Position)+ 10 <ypos>  $StaticTextWidth+100  80
				IActionsText ACTIONS	(
				GetList(FacePositions) 
				GetIfImageNode
										)
				DActionsText ACTIONS ( 
								ExecFile(ImageNodeDlgRoutines.txt)
								Exec(OnHeadAlignCropMethod(ImageNodeValuesDialog);)
								) 								
				OActionsText ~[SaveIfImageNode]~
				GenConField ~HeadAlignmentCropMethod:~
				IsIndex	1
				Tooltip ~Choose Bottom of Chin to calculate zooming based on the eyes and chin position.  Choose Top of Head to calculate zooming based on the top of the head and the eyes~;

		ypos = <ypos> + 30;
		Define: HeadAlignChinStatic  Using DDWinCtrlDef AsSymbol HeadAlignChinStatic 
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+50  20
				Text ~Vertical Chin Position~;
		Define: HeadAlignChinYEditText Using DDWinCtrlDef AsSymbol HeadAlignChinYEditText
		fields:	TypeName MaskedEditText
				Position HeadAlignCropMethodStatic(GetRight,Position),  <ypos> , 60 , 20
				GenConField ~VerticalChinPosition:~
				Mask		 ~####~
				PromptChar	 ~ ~	
				InsertOn	~T~	
				
				IActionsText ACTIONS	(
				GetIfImageNode
				ExecFile(ImageNodeDlgRoutines.txt)
				Exec(OnInitHeadAlignChinYEditText(ImageNodeValuesDialog);)
										)

				DActionsText ~[SaveIfImageNode  UpdateControl(HeadAlignChinYSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the where to vertically position the bottom of the chin in the image node as a percentage (0-100) of the image node.  This should be greater than the vertical eye position.~;

		Define: HeadAlignChinYSlider Using DDWinCtrlDef AsSymbol HeadAlignChinYSlider
		fields:	TypeName Slider
				Position HeadAlignChinYEditText(GetRight,Position)+10 <ypos> 100  20
				GenConField ~VerticalChinPosition:~
				IActionsText ACTIONS	(
				GetIfImageNode
				ExecFile(ImageNodeDlgRoutines.txt)
				Exec(OnInitHeadAlignChinYSlider(ImageNodeValuesDialog);)
										)
				DActionsText ~[SaveIfImageNode  UpdateControl(HeadAlignChinYEditText)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the where to vertically position the bottom of the chin in the image node as a percentage (0-100) of the image node.  This should be greater than the vertical eye position.~;

		ypos = <ypos> + 30;
		Define: HeadAlignTopOfHeadStatic  Using DDWinCtrlDef AsSymbol HeadAlignTopOfHeadStatic 
		fields:	TypeName StaticText
				Position $LeftMargin <ypos>  $StaticTextWidth+50  20
				Text ~Top of Head~;
		Define: HeadAlignTopOfHeadEditText Using DDWinCtrlDef AsSymbol HeadAlignTopOfHeadEditText
		fields:	TypeName MaskedEditText
				Position HeadAlignCropMethodStatic(GetRight,Position),  <ypos> , 60 , 20
				GenConField ~TopOfHeadPosition:~
				Mask		 ~####~
				PromptChar	 ~ ~	
				InsertOn	~T~	
				IActionsText ACTIONS	(
				GetIfImageNode
				ExecFile(ImageNodeDlgRoutines.txt)
				Exec(OnInitHeadAlignTopOfHeadEditText(ImageNodeValuesDialog);)
										)
				DActionsText ~[SaveIfImageNode  UpdateControl(HeadAlignTopOfHeadSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the where to vertically position the top of the head in the image node as a percentage (0-100) of the image node.  This should be less than the vertical eye position.~;

		Define: HeadAlignTopOfHeadSlider Using DDWinCtrlDef AsSymbol HeadAlignTopOfHeadSlider
		fields:	TypeName Slider
				Position HeadAlignTopOfHeadEditText(GetRight,Position)+10 <ypos> 100  20
				GenConField ~TopOfHeadPosition:~
				IActionsText ACTIONS	(
				GetIfImageNode
				ExecFile(ImageNodeDlgRoutines.txt)
				Exec(OnInitHeadAlignTopOfHeadSlider(ImageNodeValuesDialog);)
										)
				DActionsText ~[SaveIfImageNode  UpdateControl(HeadAlignTopOfHeadEditText)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Enter the where to vertically position the top of the head in the image node as a percentage (0-100) of the image node.  This should be less than the vertical eye position.~;
				
		ypos = <ypos> + 30;

		Define: HeadAlignHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INHead_Align.htm" ) ;

		}
}

VOID DefineTab2()
{
		Define: Tab2 Using DDWinCtrlDef
		fields: Text ~Coords~
				TypeName Tab
				Tooltip ~Change node coordinates~

		Contains: InListOrder
		{

		ypos = $StartingYPos;
		Define: XStaticText Using DDWinCtrlDef AsSymbol XStaticText
		fields:	TypeName StaticText
				Text ~Left:~
				Position $LeftMargin <ypos>   $SmallStaticTextWidth  20 


		Define: XEditText Using DDWinCtrlDef AsSymbol XEditText
		fields:	TypeName MaskedEditText
				Position XStaticText(GetRight,Position) + 5 <ypos> $BigEditTextWidth  20
				GenConField ~IX:~
				Mask		 ~##################~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				Tooltip ~Edit left~;

		Define: XUnitsStaticText Using DDWinCtrlDef AsSymbol XUnitsStaticText
		fields:	TypeName StaticText
				Text ~in.~
				Position XEditText(GetRight,Position) + $UnitsXOffset <ypos>+$UnitsYOffset  $UnitsWidth  20 

		Define: YStaticText Using DDWinCtrlDef AsSymbol YStaticText
		fields:	TypeName StaticText
				Text ~Top:~
				Position XUnitsStaticText(GetRight,Position) + 10  <ypos>   $SmallStaticTextWidth  50 


		Define: YEditText Using DDWinCtrlDef AsSymbol YEditText
		fields:	TypeName MaskedEditText
				Position YStaticText(GetRight,Position) + 5 <ypos> $BigEditTextWidth  20
				GenConField ~IY:~
				Mask		 ~##################~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				Tooltip ~Edit top~;

		Define: YUnitsStaticText Using DDWinCtrlDef AsSymbol YUnitsStaticText
		fields:	TypeName StaticText
				Text ~in.~
				Position YEditText(GetRight,Position) + 5 <ypos>+$UnitsYOffset  $UnitsWidth  20 ;

		ypos = <ypos> + 30;
		Define: WidthStaticText Using DDWinCtrlDef AsSymbol WidthStaticText
		fields:	TypeName StaticText
				Text ~Width:~
				Position $LeftMargin <ypos>   $SmallStaticTextWidth  20 


		Define: WidthEditText Using DDWinCtrlDef AsSymbol WidthEditText
		fields:	TypeName MaskedEditText
				Position WidthStaticText(GetRight,Position)+5 <ypos> $BigEditTextWidth  20
				GenConField ~IWidth:~
				Mask		 ~##################~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Edit width~;

		Define: WUnitsStaticText Using DDWinCtrlDef AsSymbol WUnitsStaticText
		fields:	TypeName StaticText
				Text ~in.~
				GenConName THIS
				Position WidthEditText(GetRight,Position) + $UnitsXOffset <ypos>+$UnitsYOffset  $UnitsWidth  20 

		Define: HeightStaticText Using DDWinCtrlDef AsSymbol HeightStaticText
		fields:	TypeName StaticText
				Text ~Height:~
				Position WUnitsStaticText(GetRight,Position) + 10  <ypos>   $SmallStaticTextWidth  20 


		Define: HeightEditText Using DDWinCtrlDef AsSymbol HeightEditText
		fields:	TypeName MaskedEditText
				Position HeightStaticText(GetRight,Position) + 5 <ypos> $BigEditTextWidth  20
				GenConField ~IHeight:~
				Mask		 ~##################~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Edit height~;

		Define: HUnitsStaticText Using DDWinCtrlDef AsSymbol HUnitsStaticText
		fields:	TypeName StaticText
				Text ~in.~
				GenConName THIS
				Position HeightEditText(GetRight,Position) + $UnitsXOffset <ypos>+$UnitsYOffset  $UnitsWidth  20 ;

		ypos = <ypos> + 30;

		Define: NodeNameStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~NodeName:~
				Position $LeftMargin <ypos>   $StaticTextWidth  20 


		Define: NodeNameEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position $StaticTextWidth + $LeftMargin + 10 <ypos> 200  20
				GenConField ~NodeName:~
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[NodeName]>~
				PromptChar	 ~ ~		
				DisallowedChars ~ ~
				Tooltip ~Enter Node Name~;

/*		Code to show crop marks 
		
		ypos = <ypos> + 30;
		Define: ShowCropMarksCheckBox using DDWinCtrlDef
		fields:	TypeName CheckBox
				Position $LeftMargin + 10 <ypos> 200  20
				GenConField ~ShowCropMarks:~
				Text ~Show Crop Marks~
				Tooltip ~Show Crop Marks on the image.  Used primarily by Commercial Labs as a visual guide to cutting images~;
*/
		ypos = <ypos> + 30;
		Define: FeaturedNodeButton Using DDWinCtrlDef
		fields:	TypeName Button
				Text ~Make Featured Node~
				Position $LeftMargin  <ypos> 150  20
				GenConField ~NodeName:~
				Tooltip ~Used to designate a node the featured node in a composite.~;

		ypos = <ypos> + 30;

		Define: CoordinatesHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INCoordinates.htm" ) ;

	}
}

VOID DefineTab3()
{
		Define: Tab3 Using DDWinCtrlDef
		fields: Text ~Sharpen~
				TypeName Tab
				Tooltip ~Change sharpness~

		Contains: InListOrder
		{

			ypos = $Startingypos + 10;
			Define: SharpenRadioButtonFaster Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 20 , <ypos> ,120 ,20 
					GenConField ~SharpenType~
					RadioTrueValue ~F~
 					IsTabStop 1
					Text ~Faster~
					Tooltip ~Use a fast, high quality sharpening algorithm~;

			Define: SharpenRadioButtonNormal Using DDWinCtrlDef AsSymbol SharpenRadioButtonNormal
			fields: TypeName RadioButton  
					Position $LeftMargin + 150 , <ypos> ,130 ,20 
					GenConField ~SharpenType~
					RadioTrueValue ~S~
 					Text ~Higher Quality~
					IsTabStop 1
					Tooltip ~Use a very high quality sharpening algorithm~;


			yBottompos =  SharpenRadioButtonNormal(GetBottom,Position) + 10;
			ypos =  SharpenRadioButtonNormal(GetTop,Position) - 15;
			Define: ZZSharpenGroupBox Using DDWinCtrlDef AsSymbol ZZSharpenGroupBox
			fields:	TypeName GroupBox
					Text ~Quality~
					Position $LeftMargin, <ypos>, 360, <yBottompos> - <ypos>;

			ypos =  ZZSharpenGroupBox(GetBottom,Position) + 15;

/*
			Define: SharpenValueStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Amount:~
					Position $LeftMargin + 20 <ypos> 80  20

			Define: SharpenValueEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~SharpenValue~
					Mask		 ~####~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Sharpening amounts in DP2 produce approximately half as much sharpening as KPIS.  To get the same amount of sharpening as KPIS, double the amount used in KPIS.~

			Define: SharpenValueSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~SharpenValue~
					Tooltip ~Sharpening amounts in DP2 produce approximately half as much sharpening as KPIS.  To get the same amount of sharpening as KPIS, double the amount used in KPIS.~;
*/

			ypos = <ypos> + 30;
			Define: SharpenStaticText Using DDWinCtrlDef AsSymbol SharpenStaticText
			fields:	TypeName StaticText
					Text ~Amount:~
					Position $LeftMargin <ypos> 60  20
			Define: SharpenValueEditText Using DDWinCtrlDef AsSymbol SharpenValueEditText 
			fields:	TypeName MaskedEditText
					Position SharpenStaticText(GetRight,Position) + 5 <ypos>  $EditTextWidth  20
					GenConField ~SharpenValue:~
					Mask		 ~####~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Sharpening amounts in DP2 produce approximately half as much sharpening as KPIS.  To get the same amount of sharpening as KPIS, double the amount used in KPIS.~
			Define: SharpenValueSlider Using DDWinCtrlDef AsSymbol SharpenValueSlider
			fields:	TypeName Slider
					Position SharpenValueEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
					GenConField ~SharpenValue~
					Tooltip ~Sharpening amounts in DP2 produce approximately half as much sharpening as KPIS.  To get the same amount of sharpening as KPIS, double the amount used in KPIS.~;
			Define: COSharpenStaticText Using DDWinCtrlDef AsSymbol COSharpenStaticText
			fields:	TypeName StaticText
					GenConField COSharpen
					Position SharpenValueSlider(GetRight,Position)+5 <ypos> 40  20;
			Define: COSharpenTitleStaticText Using DDWinCtrlDef 
			fields:	TypeName StaticText
					Text ~Cust/Ord Pref~
					Position COSharpenStaticText(GetLeft,Position)-4 <ypos> - 36 44  30;

			ypos = <ypos> + 30;
			Define: SharpenMethodCheckBox Using DDWinCtrlDef AsSymbol SharpenMethodCheckBox
			fields:	TypeName Checkbox
					Position $LeftMargin + 20 <ypos>  $MediumEditTextWidth  20
					GenConField ~AdaptiveSharpen:~
					Text ~Adaptive Sharpen~
					Tooltip ~Use adaptive sharpening~;

			ypos = <ypos> + 30;
			Define: LimitValueStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Limit:~
					Position $LeftMargin + 20 <ypos> 80  20

			Define: LimitValueEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~AdaptiveSharpenLimit:~
					Mask		 ~####~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Set adaptive sharpen limit.~

			Define: LimitValueSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~AdaptiveSharpenLimit:~
					Tooltip ~Set adaptive sharpen limit.~;

			ypos = <ypos> + 30;
			Define: ThresholdStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Threshold:~
					Position $LeftMargin + 20 <ypos> 80  20

			Define: ThresholdEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~AdaptiveSharpenThreshold:~
					Mask		 ~####~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Set adaptive sharpen threshhold~

			Define: ThresholdSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~AdaptiveSharpenThreshold:~
					Tooltip ~Set adaptive sharpen threshold~;

			ypos = <ypos> + 30;
			Define: AdaptiveSharpenBlurStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Blur:~
					Position $LeftMargin + 20 <ypos> 80  20

			Define: AdaptiveSharpenBlurEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~AdaptiveSharpenBlur:~
					Mask		 ~####~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Set adaptive sharpen blur~

			Define: AdaptiveSharpenBlurSlider Using DDWinCtrlDef AsSymbol AdaptiveSharpenBlurSlider
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~AdaptiveSharpenBlur:~
					Tooltip ~Set adaptive sharpen blur~;


			Define: SharpnessHelpButton Using DDWinCtrlDef
			fields:	TypeName		Button
					Text			~Help~
					Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
									ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
									$HelpButtonWidth $HelpButtonLength
					DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INSharpness.htm" ) ;



		}
}

VOID DefineBlurTab()
{		
	Define: BlurTab Using DDWinCtrlDef
	fields: Text ~Blur~
			TypeName Tab
			Tooltip ~Change blur~

	Contains: InListOrder
	{

		ypos = $Startingypos ;
		Define: BlurRadioButtonFaster Using DDWinCtrlDef
		fields: TypeName RadioButton  
				Position $LeftMargin + 20 , <ypos> ,80 ,20 
				GenConField ~BlurType~
				RadioTrueValue ~F~
				IsTabStop 1
				Text ~Faster~
				Tooltip ~Use a faster and weaker blur algorithm~;

		Define: BlurRadioButtonNormal Using DDWinCtrlDef AsSymbol BlurRadioButtonNormal
		fields: TypeName RadioButton  
				Position $LeftMargin + 150 , <ypos> ,130 ,20 
				GenConField ~BlurType~
				RadioTrueValue ~S~
				Text ~Higher Quality~
				IsTabStop 1
				Tooltip ~Use a stronger blur algorithm, slightly slower~;

		ypos =  <ypos> + 30;
		Define: BlurValueStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Amount:~
				Position $LeftMargin + 20 <ypos> 80  20

		Define: BlurValueEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $EditTextWidth  20
				GenConField ~BlurValue~
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				Tooltip ~Edit blur amount~

		Define: BlurValueSlider Using DDWinCtrlDef
		fields:	TypeName Slider
				Position 200 <ypos> 170  20
				GenConField ~BlurValue~
				Tooltip ~Set blur amount~;

		ypos =  <ypos> + 30;
		Define: BlurUseWeightCheckBox Using DDWinCtrlDef AsSymbol BlurUseWeightCheckBox
		fields:	TypeName Checkbox
				Position $LeftMargin + 20 <ypos>  $MediumEditTextWidth  20
				GenConField ~WeightedBlurKernel:~
				Text ~Use weighted blur kernel~
				Tooltip ~Use a weighted or non weighted blur kernel.  The weighted kernel is weaker.~;

		ypos =  BlurRadioButtonNormal(GetTop,Position) - 15;
		yBottompos =  BlurUseWeightCheckBox(GetBottom,Position) + 10;

		Define: ZZBlurGroupBox Using DDWinCtrlDef AsSymbol ZZBlurGroupBox
		fields:	TypeName GroupBox
				Text ~Blur~
				Position $LeftMargin ,<ypos>, 360 ,<yBottompos> - <ypos>;

		ypos =  ZZBlurGroupBox(GetBottom,Position) + 25;


		Define: SoftFocusStaticText Using DDWinCtrlDef AsSymbol SoftFocusStaticText
		fields:	TypeName StaticText
				Text ~Amount:~
				Position $LeftMargin + 20 <ypos> 70  20

		Define: SoftFocusValueEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $EditTextWidth  20
				GenConField ~Soften:~
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode  UpdateControl(SoftFocusValueSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Edit soft focus amount~

		Define: SoftFocusValueSlider Using DDWinCtrlDef AsSymbol SoftFocusValueSlider
		fields:	TypeName Slider
				Position 200 <ypos> 170  20
				GenConField ~Soften:~
				Tooltip ~Set soft focus amount~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode  UpdateControl(SoftFocusValueEditText)]~
				OActionsText ~[SaveIfImageNode]~;

		ypos =  <ypos> + 25;
		Define: SoftFocusOverrideStaticText Using DDWinCtrlDef AsSymbol SoftFocusOverrideStaticText
		fields:	TypeName StaticText
				Text ~Override:~
				Position $LeftMargin + 20 <ypos>-3 70  20

		Define: SoftFocusOverrideEditText Using DDWinCtrlDef AsSymbol SoftFocusOverrideEditText
		fields:	TypeName MaskedEditText
				Position SoftFocusOverrideStaticText(GetRight,Position) <ypos>  260  20
				GenConField ~SoftenOverride:~
				MASK RepeatStr(1024,~*~)
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Edit soft focus amount or macro~;

		ypos =  SoftFocusStaticText(GetTop,Position) - 15;
		yBottompos =  SoftFocusOverrideEditText(GetBottom,Position) + 10;
		Define: SoftFocusGroupBox Using DDWinCtrlDef AsSymbol SoftFocusGroupBox
		fields:	TypeName GroupBox
				Text ~Soft Focus~
				Position $LeftMargin ,<ypos>, 360 ,<yBottompos> - <ypos>;

		ypos =  SoftFocusGroupBox(GetBottom,Position) + 20;

		Define: DespeckleStaticText Using DDWinCtrlDef AsSymbol DespeckleStaticText
		fields:	TypeName StaticText
				Text ~Amount:~
				Position $LeftMargin + 20 <ypos> 70  20

		Define: DespeckleValueEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $EditTextWidth  20
				GenConField ~Despeckle:~
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				Tooltip ~Edit noise reduction amount~

		Define: DespeckleValueSlider Using DDWinCtrlDef AsSymbol DespeckleValueSlider
		fields:	TypeName Slider
				Position 200 <ypos> 170  20
				GenConField ~Despeckle:~
				Tooltip ~Set noise reduction amount~;

		ypos =  DespeckleStaticText(GetTop,Position) - 15;
		yBottompos =  DespeckleValueSlider(GetBottom,Position) + 10;
		Define: ZZDespeckleGroupBox Using DDWinCtrlDef
		fields:	TypeName GroupBox
				Text ~Noise Reduction~
				Position $LeftMargin ,<ypos>, 360 ,<yBottompos> - <ypos>;

		ypos =  <yBottompos> + 25;
		Define: NoiseReductionStaticText Using DDWinCtrlDef AsSymbol NoiseReductionStaticText
		fields:	TypeName StaticText
				Text ~Enter 0-150 or a macro (overrides printer queue):~
				Position $LeftMargin +20 <ypos> 330  20;

		Define: NoiseReductionValueEditText Using DDWinCtrlDef AsSymbol NoiseReductionValueEditText
		fields:	TypeName MaskedEditText
				Position NoiseReductionStaticText(GetLeft,Position) NoiseReductionStaticText(GetBottom,Position)  320  20
				GenConField ~NoiseReductionOverride:~
				MASK			RepeatStr(1024,~*~)
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Noise reduction override for NexPress prints.  This overrides the value in the printer queue and the value on the Output to NexPress printer.  Enter 0-150 or a macro.~;

		yBottompos =  NoiseReductionValueEditText(GetBottom,Position) + 10;
		Define: ZZNexpressBlurGroupBox Using DDWinCtrlDef AsSymbol ZZBlurGroupBox
		fields:	TypeName GroupBox
				Text ~Noise reduction for NexPress prints~
				Position $LeftMargin ,NoiseReductionStaticText(GetTop,Position) - 15, 360 ,<yBottompos> - (NoiseReductionStaticText(GetTop,Position) - 15);

		Define: BlurHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INBlur.htm" ) ;
	}
}

VOID DefineTab4()
{
		Define: Tab4 Using DDWinCtrlDef
		fields: Text ~Adjust~
				TypeName Tab
				Tooltip ~Change color or brightness~


		Contains: InListOrder
	{
		ypos = $Startingypos + 10;
		Define: DensityStaticText Using DDWinCtrlDef AsSymbol DensityStaticText
		fields:	TypeName StaticText
				Text ~Density:~
				Position $LeftMargin <ypos> 60  20
		Define: DensityEditText Using DDWinCtrlDef AsSymbol DensityEditText 
		fields:	TypeName MaskedEditText
				Position DensityStaticText(GetRight,Position) + 5 <ypos>  $EditTextWidth  20
				GenConField ~Density:~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Increase or decrease density~;
		Define: DensitySlider Using DDWinCtrlDef AsSymbol DensitySlider
		fields:	TypeName Slider
				Position DensityEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
				GenConField ~Density:~
				Tooltip ~Increase or decrease density~;
		Define: CODensityStaticText Using DDWinCtrlDef  AsSymbol CODensityStaticText
		fields:	TypeName StaticText
				GenConField CODensity
				Position DensitySlider(GetRight,Position)+6 <ypos>+2 40  20;

		Define: COAdjustTitleStaticText Using DDWinCtrlDef 
		fields:	TypeName StaticText
				Text ~Cust/Ord Pref~
				Position CODensityStaticText(GetLeft,Position)-4 <ypos> - 29 44  30;

		ypos = <ypos> + 29;
		Define: RGBRedStaticText Using DDWinCtrlDef AsSymbol RGBRedStaticText
		fields:	TypeName StaticText
				Text ~Red:~
				Position $LeftMargin <ypos> 60  20
		Define: RGBRedEditText Using DDWinCtrlDef AsSymbol RGBRedEditText 
		fields:	TypeName MaskedEditText
				Position DensityStaticText(GetRight,Position) + 5 <ypos>  $EditTextWidth  20
				GenConField ~RGBRed:~
				Tooltip ~Specify a color shift for red component~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
		Define: RGBRedSlider Using DDWinCtrlDef AsSymbol RGBRedSlider
		fields:	TypeName Slider
				Position DensityEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
				Tooltip ~Increase or decrease red~
				GenConField ~RGBRed:~;
		Define: CORGBRedStaticText Using DDWinCtrlDef 
		fields:	TypeName StaticText
				GenConField CORed
				Position RGBRedSlider(GetRight,Position)+5 <ypos>+2 40  20;

		ypos = <ypos> + 29;
		Define: RGBGreenStaticText Using DDWinCtrlDef AsSymbol RGBGreenStaticText
		fields:	TypeName StaticText
				Text ~Green:~
				Position $LeftMargin <ypos> 60  20
		Define: RGBGreenEditText Using DDWinCtrlDef AsSymbol RGBGreenEditText 
		fields:	TypeName MaskedEditText
				Position DensityStaticText(GetRight,Position) + 5 <ypos>+2  $EditTextWidth  20
				GenConField ~RGBGreen:~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Specify a color shift for green component~
		Define: RGBGreenSlider Using DDWinCtrlDef AsSymbol RGBGreenSlider
		fields:	TypeName Slider
				Position DensityEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
				GenConField ~RGBGreen:~
				Tooltip ~Increase or decrease green~;
		Define: CORGBGReenStaticText Using DDWinCtrlDef 
		fields:	TypeName StaticText
				GenConField COGreen
				Position RGBGreenSlider(GetRight,Position)+5 <ypos>+2 40  20;

		ypos = <ypos> + 29;
		Define: RGBBlueStaticText Using DDWinCtrlDef AsSymbol RGBBlueStaticText
		fields:	TypeName StaticText
				Text ~Blue:~
				Position $LeftMargin <ypos> 60  20
		Define: RGBBlueEditText Using DDWinCtrlDef AsSymbol RGBBlueEditText 
		fields:	TypeName MaskedEditText
				Position RGBBlueStaticText(GetRight,Position) + 5 <ypos>  $EditTextWidth  20
				GenConField ~RGBBlue:~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Specify a color shift for blue component~
		Define: RGBBlueSlider Using DDWinCtrlDef AsSymbol RGBBlueSlider
		fields:	TypeName Slider
				Position RGBBlueEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
				GenConField ~RGBBlue:~
				Tooltip ~Increase or decrease blue~
		Define: CORGBBlueStaticText Using DDWinCtrlDef 
		fields:	TypeName StaticText
				GenConField COBlue
				Position RGBBlueSlider(GetRight,Position)+5 <ypos>+2 40  20;

		ypos = <ypos> + 29;
		Define: ContrastStaticText Using DDWinCtrlDef AsSymbol ContrastStaticText
		fields:	TypeName StaticText
				Text ~Contrast:~
				Position $LeftMargin <ypos> 60  20
		Define: ContrastEditText Using DDWinCtrlDef AsSymbol ContrastEditText 
		fields:	TypeName MaskedEditText
				Position ContrastStaticText(GetRight,Position) + 5 <ypos>  $EditTextWidth  20
				GenConField ~Contrast:~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Increase or decrease contrast~
		Define: ContrastSlider Using DDWinCtrlDef AsSymbol ContrastSlider
		fields:	TypeName Slider
				Position ContrastEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
				GenConField ~Contrast:~
				Tooltip ~Increase or decrease contrast~
		Define: COContrastStaticText Using DDWinCtrlDef 
		fields:	TypeName StaticText
				GenConField COContrast
				Position ContrastSlider(GetRight,Position)+5 <ypos>+2 40  20;

		ypos = <ypos> + 29;
		Define: XGammaStaticText Using DDWinCtrlDef AsSymbol XGammaStaticText
		fields:	TypeName StaticText
				Text ~XGamma:~
				Position $LeftMargin <ypos> 60  20
		Define: XGammaEditText Using DDWinCtrlDef AsSymbol XGammaEditText
		fields:	TypeName MaskedEditText
				Position XGammaStaticText(GetRight,Position) + 5 <ypos>  $EditTextWidth  20
				GenConField ~XGamma:~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Change the gamma~;
		Define: XGammaSlider Using DDWinCtrlDef AsSymbol XGammaSlider
		fields:	TypeName Slider
				Position XGammaEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
				GenConField ~XGamma:~
				Units .01
				Tooltip ~Change the gamma~;
		Define: COGammaStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				GenConField COGamma
				Position XGammaSlider(GetRight,Position)+5, <ypos>+2 30  20;

		ypos = <ypos> + 29;
		Define: SaturationStaticText Using DDWinCtrlDef AsSymbol SaturationStaticText
		fields:	TypeName StaticText
				Text ~Saturation:~
				Position $LeftMargin <ypos> 60  20
		Define: SaturationEditText Using DDWinCtrlDef AsSymbol SaturationEditText 
		fields:	TypeName MaskedEditText
				Position SaturationStaticText(GetRight,Position) + 5 <ypos>  $EditTextWidth  20
				GenConField ~Saturation:~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Increase or decrease saturation~
		Define: SaturationSlider Using DDWinCtrlDef AsSymbol SaturationSlider
		fields:	TypeName Slider
				Position SaturationEditText(GetRight,Position)+10 <ypos> $SliderWidth  20
				GenConField ~Saturation:~
				Tooltip ~Increase or decrease saturation~
		Define: COSaturationStaticText Using DDWinCtrlDef 
		fields:	TypeName StaticText
				GenConField COSaturation
				Position SaturationSlider(GetRight,Position)+5 <ypos>+2 40  20;

		ypos = <ypos> + 29;
		Define: Negative Using DDWinCtrlDef AsSymbol Negative
		fields:	TypeName CheckBox
				GenConField ~Negative:~
				Text ~Negative~
				Position $LeftMargin <ypos> 70 15
				IsTabStop 1
				Tooltip ~Make a negative image~;

		Define: MakeGrayscale Using DDWinCtrlDef AsSymbol MakeGrayscale
		fields:	TypeName CheckBox
				GenConField ~MakeGrayscale:~
				Text ~Make Grayscale~
				Position Negative(GetRight,Position)+ 10 ,<ypos> 100 15
				IsTabStop 1
				Tooltip ~Convert the image to grayscale~;

		ypos = <ypos> + 29;
		Define: NoApplyCorrectionsStaticText Using DDWinCtrlDef AsSymbol NoApplyCorrectionsStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> 85   20
				Text ~Apply Corrections:~;

		Define: NoApplyCorrectionsComboBox Using DDWinCtrlDef AsSymbol NoApplyCorrectionsComboBox
		fields:	TypeName SComboBox
				GenConField ~NoApplyCorrections:~
				Position NoApplyCorrectionsStaticText(GetRight,Position) + 5 <ypos> 275  90
				IActionsText ~[GetList(NoApplyCorrectionsChoices) GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				IsIndex 1
				Tooltip ~Choose which corrections you want to apply.~;			
		ypos = <ypos> + 30;

		Define: ColorBrightHelpButton Using DDWinCtrlDef AsSymbol ColorBrightHelpButton
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INColorBright.htm" ) ;

		Define: COAdjustmentStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				GenConField ~COAdjustmentAuditTrail~
				Position ColorBrightHelpButton(GetRight,Position) + 10 ,ColorBrightHelpButton(GetTop,Position) 120 15
				Tooltip ~Indicates the customer/order preferences to the adjustments that were made for the image in this node~;

	}
}

VOID DefineTab5()
{
		Define: Tab5 Using DDWinCtrlDef
		fields: Text ~Mask~
				TypeName Tab
				Tooltip ~Masking Options~
		Contains: InListOrder
	{
		ypos = $StartingYPos;
		Define: MaskFileButton Using DDWinCtrlDef
		fields:	TypeName Button
				Text ~Mask...~
				GenConField ~MaskFile:~
				Position $LeftMargin,  <ypos> ,  150,  20
				Tooltip ~Select a mask file~;

		Define: ClearMaskButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Mask~
				Position $LeftMargin + 170, <ypos> , 100 , 20
				GenConField ~Maskfile:~
				Tooltip ~Clear the mask file field~;

		ypos = <ypos> + 30;
		Define: MaskFileEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~MaskFile:~
				Position $LeftMargin, <ypos> , 350 , 20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit mask file path~;


		ypos = <ypos> + 30;
		Define: IFileOpacityStaticText Using DDWinCtrlDef AsSymbol IFileOpacityStaticText
		fields:	TypeName StaticText
				Text ~Opacity of Image File:~
				Position $LeftMargin <ypos> $StaticTextWidth  30
		Define: IFileOpacityEditText Using DDWinCtrlDef AsSymbol IFileOpacityEditText
		fields:	TypeName MaskedEditText
				Position IFileOpacityStaticText(GetRight,Position)  + 10 ,<ypos> ,$EditTextWidth , 20
				GenConField ~IFileOpacity:~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Blends image with background (0 = all background, 50 = half background/half image, 100 = all image)~;
		Define: IFileOpacitySlider Using DDWinCtrlDef
		fields:	TypeName Slider
				Position IFileOpacityEditText(GetRight,Position) + 20 ,<ypos>  ,170 , 20
				GenConField ~IFileOpacity:~
				Tooltip ~Blends image with background (0 = all background, 50 = half background/half image, 100 = all image)~;

		ypos = <ypos> + 10;
		ypos = <ypos> + 50;
		Define: MakeHardMaskCheckBox Using DDWinCtrlDef AsSymbol MakeHardMaskCheckBox
		fields:	TypeName CheckBox
				GenConField ~MakeHardMask:~
				Text ~Make a hard mask from the image in this node~
				Position $LeftMargin + 10, <ypos> 300 15
				IsTabStop 1
				Tooltip ~Make a hard mask from the image in this node~;

		ypos = <ypos> + 30;
		Define: MakeSoftMaskStaticTextText Using DDWinCtrlDef 
		fields:	TypeName StaticText
				Position $LeftMargin + 10 ,<ypos> ,$StaticTextWidth + 10 , 20
				Text	~Make Soft Mask~

		Define: MakeSoftMaskEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position $LeftMargin + $StaticTextWidth  + 25 ,<ypos> ,$EditTextWidth , 20
				GenConField ~MakeSoftMask:~
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				Tooltip ~Enter a value (1 - 255) to make a mask.  A pixel in the image having a value less than this creates a black pixel in the mask; otherwise a white pixel is created.  Used if nonzero, the make hard mask check box is unchecked, and there is no mask file.~;


		Define: ZZMakeHardMaskGroupBox Using DDWinCtrlDef
		fields:	TypeName GroupBox
				Text ~Make a Mask from the Image in this Node~
				Position		MakeHardMaskCheckBox(GetLeft,Position) - 10,
								MakeHardMaskCheckBox(GetTop,Position) - 20,
								360,85;
		ypos = <ypos> + 45;
		Define: TPMaskFileButton Using DDWinCtrlDef
		fields:	TypeName Button
				Text ~Transparency Mask...~
				GenConField ~TransparencyMaskFile:~
				Position $LeftMargin,  <ypos> ,  150,  20
				IActionsText ~[GetIfNonBkgImageNode]~
				DActionsText ~[FileOpenBuildThumbnailRegister UpdateControl(TPMaskFileEditText)]~
				OActionsText ~[NULL]~ 
				Tooltip ~Select a mask file~;

		Define: TPClearMaskButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Transparency Mask~
				Position $LeftMargin + 170, <ypos> , 170 , 20
				GenConField ~TransparencyMaskfile:~
				Tooltip ~Clear the transparency mask file field~;

		ypos = <ypos> + 30;
		Define: TPMaskFileEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~TransparencyMaskfile:~
				Position $LeftMargin, <ypos> , 350 , 20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Edit transparency mask file path~;

		Define: MaskingHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INMore.htm" ) ;

	}
}

VOID DefineTab6()
{
		Define: Tab6 Using DDWinCtrlDef
		fields: Text ~Fill~
				TypeName Tab
				Tooltip ~Fill color~

	Contains: InListOrder
	{
		ypos = $StartingYPos;
		Define: IColorButton Using DDWinCtrlDef AsSymbol IColorButton
		fields:	TypeName Button
				Text ~Fill Color...~
				Position $LeftMargin  <ypos> 200  20
				GenConField ~IColor:~
				Tooltip ~Select a fill color~;

		Define: ApplyColor Using DDWinCtrlDef
		fields:	TypeName CheckBox
				GenConField ~IColor:~
				Text ~Apply~
				IsTabStop 1
				Position IColorButton(GetRight,Position) + 10 <ypos> 120 15
				Tooltip ~Use fill color~;

		ypos = <ypos> + 30;
		Define: IColorStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Macro for Fill Color:~
				Position $LeftMargin  <ypos> - 3 80 30

		Define: IColorOverrideEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~IColorOverride:~
				MASK			RepeatStr(1024,~*~)
				Position $LeftMargin + 85, <ypos> , 265 , 20
				Tooltip ~Insert RGB values or a macro.  This overrides the color selected above.~;

		ypos = <ypos> + 30;
		Define: BGColorOpacityStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Opacity:~
				Position $LeftMargin <ypos> $StaticTextWidth  20
		Define: BGColorOpacityEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position $LeftMargin + $StaticTextWidth  + 20 ,<ypos> ,$EditTextWidth , 20
				GenConField ~BGColorOpacity:~
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Select opacity of fill color~
		Define: BGColorOpacitySlider Using DDWinCtrlDef
		fields:	TypeName Slider
				Position $LeftMargin + $StaticTextWidth  + 100 + 20 ,<ypos>  ,170 , 20
				GenConField ~BGColorOpacity:~
				Tooltip ~Selects opacity of fill color~;

		ypos = <ypos> + 30;
		Define: BGColorMaskButton Using DDWinCtrlDef
		fields:	TypeName Button
				Text ~Background Color Mask...~
				GenConField ~BGColorMask:~
				Position $LeftMargin,  <ypos> ,  170,  20
				Tooltip ~Select a background color mask file.  This grayscale file controls the strength of the fill color.  The fill color is pasted onto the node through this file.~

		Define: ClearBGColorMaskButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Mask~
				Position $LeftMargin + 180, <ypos> , 170 , 20
				GenConField ~BGColorMask:~
				Tooltip ~Clear the background color mask field~;

		Define: BGColorMaskEditText Using DDWinCtrlDef AsSymbol BGColorMaskEditText
		fields:	TypeName MaskedEditText
				GenConField ~BGColorMask:~
				Position $LeftMargin, <ypos> + 30 , 350 , 20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit background color mask path.   This grayscale file controls the strength of the fill color.  The fill color is pasted onto the node through this file.~;

	ypos = <ypos> + 80;
	Prefix = BG;		// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
	DefineSpotColorControls(ypos,~<Prefix>~,~ISpotColorIColor:~, ~ISpotTextureIColor:~, ~BGColorSpotColorTranslucence:~,~SpotColorFillColorTexture:~);

		Define: FillColorHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INFillColor.htm" ) ;

	}
}

VOID DefineTab7()
{		Define: Tab7 Using DDWinCtrlDef
		fields: Text ~Tables~
				TypeName Tab
				Tooltip ~Apply lookup table or matrix~
		Contains: InListOrder
	{
		ypos = $StartingYPos;

		Define: LUTButton Using DDWinCtrlDef
		fields:	TypeName Button
				Text ~Lookup Table...~
				GenConField ~LUT:~
				Position $LeftMargin,  <ypos>,  150,  20
				Tooltip ~Select a lookup table file~
		Define: ClearLUTButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove LUT~
				Position $LeftMargin + 160, <ypos> , 150 , 20
				GenConField ~LUT:~
				Tooltip ~Remove the lookup table~;
		ypos = <ypos> + 30;
		Define: LUTEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~LUT:~
				Position $LeftMargin, <ypos> , 350 , 20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit lookup table path~;
		ypos = <ypos> + 50;
		Define: ColorMatrixButton Using DDWinCtrlDef
		fields:	TypeName Button
				Text ~Color Matrix...~
				GenConField ~ColorMatrix:~
				Position $LeftMargin,  <ypos>,  150,  20
				Tooltip ~Select a color matrix file~

		Define: ClearColorMatrixButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Color Matrix~
				Position $LeftMargin + 160, <ypos> , 150 , 20
				GenConField ~ColorMatrix:~
				Tooltip ~Remove the color matrix~;

		ypos = <ypos> + 30;
		Define: ColorMatrixEditText Using DDWinCtrlDef AsSymbol ColorMatrixEditText
		fields:	TypeName MaskedEditText
				GenConField ~ColorMatrix:~
				Position $LeftMargin, <ypos> , 290 , 20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit color matrix file path~;

		Define: NeutralizeGrayscale Using DDWinCtrlDef AsSymbol NeutralizeGrayscale
		fields:	TypeName CheckBox
				GenConField ~NeutralizeGrayscale:~
				Text ~Grayscale~
				Position ColorMatrixEditText(GetRight,Position)+ 10 ,<ypos> 65 15
				IsTabStop 1
				Tooltip ~Check this box if the purpose of the matrix is to convert to grayscale.  Makes sure all pixels are 100 percent grayscale, even if color management is applied.  Only applies if a color matrix is specified~;

		ypos = <ypos> + 50;
		Define: SepiaButton Using DDWinCtrlDef
		fields:	TypeName Button
				GenConField ~Sepia:~
				Text ~Sepia Lookup Table...~
				Position $LeftMargin,  <ypos>,  150,  20
				Tooltip ~Select a sepia lookup table file~

		Define: ClearSepiaButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Sepia~
				Position $LeftMargin + 160, <ypos> , 150 , 20
				GenConField ~Sepia:~
				Tooltip ~Remove the sepia lookup table~;

		ypos = <ypos> + 30;
		Define: SepiaEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~Sepia:~
				Position $LeftMargin, <ypos> , 350 , 20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit sepia lookup table path~

		Define: TablesHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INColorMgmt.htm" ) ;


	}
}

VOID DefineTab6a()
{
	Define: Tab6a Using DDWinCtrlDef
		fields: Text ~Shadows~
				TypeName Tab
				Tooltip ~Shadows~
		Contains: InListOrder
		{
			ypos = $StartingYPos -10;
			Define: ShadowEnableCheckBox Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConField ~ImageShadowEnable:~
					Text ~Enable shadows~
					Position $LeftMargin <ypos> 150 15
					IsTabStop 1
					Tooltip ~Enable shadows~;

			ypos = <ypos> + 25;
			Define: ShadowColorButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Shadow Color...~
					Position $LeftMargin, <ypos>, 150, 20
					GenConName THIS
					GenConField ~ImageShadowColorOverride:~
					Tooltip ~Select Shadow Color~;

			ypos = <ypos> + 30;
			Define: ShadowColorOverrideEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConField ~ImageShadowColorOverride:~
					MASK			RepeatStr(1024,~*~)
					Position $LeftMargin , <ypos> , 330 , 20
					Tooltip ~Insert RGB values or a macro.~;

			ypos = <ypos> + 30;
			Define: ShadowOffsetXStaticText Using DDWinCtrlDef AsSymbol ShadowOffsetXStaticText
			fields:	TypeName StaticText
					GenConName THIS
					Text ~Horizontal Offset:~
					Position $LeftMargin <ypos> $StaticTextWidth+60  20;

			Define: ShadowOffsetXEditText Using DDWinCtrlDef AsSymbol ShadowOffsetXEditText
			fields:	TypeName MaskedEditText
					Position ShadowOffsetXStaticText(GetRight,Position) + 10 <ypos>  $EditTextWidth  20
					GenConName THIS
					GenConField ~ImageShadowOffsetX:~
					Mask		 ~######~
					AllowedChars ~-.~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Set horizontal shadow offset in inches.    Enter a negative number to place the shadow to the left of the image, and a positive number to place the shadow to the right of the image.~;

			Define: ShadowOffsetXUnitsStaticText Using DDWinCtrlDef AsSymbol ShadowOffsetXUnitsStaticText
			fields:	TypeName StaticText
					Text ~in.~
					Position ShadowOffsetXEditText(GetRight,Position) + $UnitsXOffset <ypos>  $UnitsWidth  20;
					
			ypos = <ypos> + 30;
			Define: ShadowOffsetYStaticText Using DDWinCtrlDef AsSymbol ShadowOffsetYStaticText
			fields:	TypeName StaticText
					GenConName THIS
					Text ~Vertical Offset:~
					Position $LeftMargin <ypos> $StaticTextWidth+60  20;

			Define: ShadowOffsetYEditText Using DDWinCtrlDef AsSymbol ShadowOffsetYEditText
			fields:	TypeName MaskedEditText
					Position ShadowOffsetYStaticText(GetRight,Position) + 10 <ypos> $EditTextWidth  20
					GenConField ~ImageShadowOffsetY:~
					Mask		 ~######~
					AllowedChars ~-.~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Set vertical shadow offset in inches.  Enter a negative number to place the shadow above the image, and a positive number to place the shadow below the image.~;

			Define: ShadowOffsetYUnitsStaticText Using DDWinCtrlDef AsSymbol ShadowOffsetYUnitsStaticText
			fields:	TypeName StaticText
					Text ~in.~
					Position ShadowOffsetYEditText(GetRight,Position) + $UnitsXOffset <ypos>  $UnitsWidth  20; 

			ypos = <ypos> + 30;
/*			Define: ShadowMaskSizeStaticText Using DDWinCtrlDef AsSymbol ShadowMaskSizeStaticText
			fields:	TypeName StaticText
					Position $LeftMargin <ypos> $StaticTextWidth+20  20
					Text ~Size %:~;

			Define: ShadowMaskSizeEditText Using DDWinCtrlDef AsSymbol ShadowMaskSizeEditText
			fields:	TypeName MaskedEditText
					Position ShadowMaskSizeStaticText(GetRight,Position) + 10 <ypos>  $EditTextWidth  20
					GenConField ~ImageShadowMaskSize:~
					Mask		 ~###~
					AllowedChars ~.-~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Resize the shadow mask by this  percentage~;

			Define: ShadowMaskSizeSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position ShadowMaskSizeEditText(GetRight,Position) + 20 <ypos> 170  20
					GenConField ~ImageShadowMaskSize:~
					Tooltip ~Set shadow blur amount~;

			ypos = <ypos> + 30;
*/
			Define: ShadowMaskFeatherStaticText Using DDWinCtrlDef AsSymbol ShadowMaskFeatherStaticText
			fields:	TypeName StaticText
					Position $LeftMargin <ypos> $StaticTextWidth+20  50
					Text ~Spread in pixels (Max 50 with a mask):~;

			Define: ShadowMaskFeatherEditText Using DDWinCtrlDef AsSymbol ShadowMaskFeatherEditText
			fields:	TypeName MaskedEditText
					Position ShadowOffsetYEditText(GetLeft,Position) <ypos>  $EditTextWidth-20  20
					GenConField ~ImageShadowMaskFeather:~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~How many pixels to spread.  If you have a mask in the node, 50 is the maximum spread.~;

			Define: ShadowMaskFeatherSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position ShadowMaskFeatherEditText(GetRight,Position) + 20 <ypos> 150  20
					GenConField ~ImageShadowMaskFeather:~
					Tooltip ~How many pixels to average~;


			ypos = <ypos> + 50;
			Define: ShadowStrengthStaticText Using DDWinCtrlDef AsSymbol ShadowStrengthStaticText
			fields:	TypeName StaticText
					Text ~Strength:~
					GenConName THIS
					Position $LeftMargin <ypos> $StaticTextWidth+20  20;

			Define: ShadowStrengthEditText Using DDWinCtrlDef AsSymbol ShadowStrengthEditText
			fields:	TypeName MaskedEditText
					Position ShadowStrengthStaticText(GetRight,Position) + 10 <ypos>  $EditTextWidth  20
					GenConField ~ImageShadowStrength:~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Set shadow strength amount.~;
 
			Define: ShadowStrengthSlider Using DDWinCtrlDef AsSymbol ShadowStrengthSlider
			fields:	TypeName Slider
					Position ShadowStrengthEditText(GetRight,Position) + 20 <ypos>  $EditTextWidth  20
					GenConName THIS
					GenConField ~ImageShadowStrength:~
					Tooltip ~Set shadow strength amount.~;


	ypos = <ypos> + 30;
	Prefix = SH;		// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
	DefineSpotColorControls(ypos,~<Prefix>~,~ISpotColorShadow:~, ~ISpotTextureShadow:~, ~IShadowSpotColorTranslucence:~,~SpotColorShadowTexture:~);
	ypos = <ypos> + 30;



			Define: ShadowHelpButton Using DDWinCtrlDef
			fields:	TypeName		Button
					Text			~Help~
					Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
									ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
									$HelpButtonWidth $HelpButtonLength
					DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INShadows.htm" ) ;

		}
}

VOID DefineTab8()
{
		Define: Tab8 Using DDWinCtrlDef
		fields: Text ~Crop~
				TypeName Tab
				Tooltip ~Cropping Options~
		Contains: InListOrder
	{
		ypos = $StartingYPos;
		Define: CropRadioButtonCrop Using DDWinCtrlDef
		fields: TypeName RadioButton  
				Position $LeftMargin + 20 , <ypos> ,80 ,20 
				GenConField ~AutoCropMode:~
				RadioTrueValue ~C~
				Text ~Crop~
				IsTabStop 1
				Tooltip ~Fit smallest side and crop edges of shortest side~;

		Define: CropRadioButtonFit Using DDWinCtrlDef
		fields: TypeName RadioButton  
				Position $LeftMargin + 100 , <ypos> ,60 ,20 
				GenConField ~AutoCropMode:~
				RadioTrueValue ~F~
				IsTabStop 1
				Text ~Fit~
				Tooltip ~Fit entire image inside node~;
if ( 0 )
{
		Define: CropRadioButtonRespect Using DDWinCtrlDef
		fields: TypeName RadioButton  
				Position $LeftMargin + 180 , <ypos> ,80 ,20 
				GenConField ~AutoCropMode:~
				RadioTrueValue ~R~
				IsTabStop 1
				Text ~Respect~
				Tooltip ~Crop image and fit cropped image inside node~;
}

		Define: CropRadioButtonPreserve Using DDWinCtrlDef
		fields: TypeName RadioButton  
				Position $LeftMargin + 170 , <ypos> ,80 ,20 
				GenConField ~AutoCropMode:~
				RadioTrueValue ~P~
				IsTabStop 1
				Text ~Preserve~
				Tooltip ~Use all the image as possible without resizing.~;

		ypos = $Startingypos - 10;
		Define: ZZCropGroupBox Using DDWinCtrlDef
		fields:	TypeName GroupBox
				Text ~Crop Method~
				Position $LeftMargin <ypos> 360  50;

		ypos = <ypos> + 60;
		Define: ResetCropButton Using DDWinCtrlDef
		fields:	TypeName Button
				Text ~Reset Crop~
				GenConField ~AutoCrop:~
				Position $LeftMargin,  <ypos>,  150,  20
				Tooltip ~Reset the crop to centered and unzoomed~;
		ypos = <ypos> + 25;

/*
	ypos = <ypos> + 60;
	Define: AutoCropSrcXStaticText Using DDWinCtrlDef AsSymbol AutoCropSrcXStaticText
	fields:	TypeName StaticText
			Text ~SrcX:~
			Position $LeftMargin + 3 <ypos>   $AutoCropStaticWidth  20 


	Define: AutoCropSrcXEditText Using DDWinCtrlDef AsSymbol AutoCropSrcXEditText
	fields:	TypeName MaskedEditText
			Position AutoCropSrcXStaticText(GetRight,Position) + 1 <ypos> $AutoCropWidth  20
			GenConField ~AutoCrop:~
			ArrayPos 0
			Mask		 ~##################~
			AllowedChars ~.-~
			PromptChar	 ~ ~		
			IActionsText ~[GetIfImageNode]~
			DActionsText ~[SaveIfImageNode]~
			OActionsText ~[SaveIfImageNode]~
			Tooltip ~Edit SrcX~;

	Define: AutoCropSrcYStaticText Using DDWinCtrlDef AsSymbol AutoCropSrcYStaticText
	fields:	TypeName StaticText
			Text ~SrcY:~
			Position AutoCropSrcXEditText(GetRight,Position) + +$UnitsXOffset  <ypos>+$UnitsYOffset   $AutoCropStaticWidth  50 


	Define: AutoCropSrcYEditText Using DDWinCtrlDef AsSymbol AutoCropSrcYEditText
	fields:	TypeName MaskedEditText
			Position AutoCropSrcYStaticText(GetRight,Position) + 1 <ypos> $AutoCropWidth  20
			GenConField ~AutoCrop:~
			ArrayPos 1
			Mask		 ~##################~
			AllowedChars ~.-~
			PromptChar	 ~ ~		
			IActionsText ~[GetIfImageNode]~
			DActionsText ~[SaveIfImageNode]~
			OActionsText ~[SaveIfImageNode]~
			Tooltip ~Edit DestY~;

	Define: AutoCropDestXStaticText Using DDWinCtrlDef AsSymbol AutoCropDestXStaticText
	fields:	TypeName StaticText
			Text ~DstX:~
			Position AutoCropSrcYEditText(GetRight,Position)+ 5 <ypos>   $AutoCropStaticWidth  20 


	Define: AutoCropDestXEditText Using DDWinCtrlDef AsSymbol AutoCropDestXEditText
	fields:	TypeName MaskedEditText
			Position AutoCropDestXStaticText(GetRight,Position)+1 <ypos> $AutoCropWidth  20
			GenConField ~AutoCrop:~
			ArrayPos 2
			Mask		 ~##################~
			AllowedChars ~.~
			PromptChar	 ~ ~		
			IActionsText ~[GetIfImageNode]~
			DActionsText ~[SaveIfImageNode]~
			OActionsText ~[SaveIfImageNode]~
			Tooltip ~Edit DstX~;

	Define: AutoCropDestYStaticText Using DDWinCtrlDef AsSymbol AutoCropDestYStaticText
	fields:	TypeName StaticText
			Text ~DstY:~
			Position AutoCropDestXEditText(GetRight,Position)+ 5 <ypos>   $AutoCropStaticWidth  20 

	Define: AutoCropDestYEditText Using DDWinCtrlDef AsSymbol AutoCropDestYEditText
	fields:	TypeName MaskedEditText
			Position AutoCropDestYStaticText(GetRight,Position)+1 <ypos> $AutoCropWidth  20
			GenConField ~AutoCrop:~
			ArrayPos 3
			Mask		 ~##################~
			AllowedChars ~.~
			PromptChar	 ~ ~		
			IActionsText ~[GetIfImageNode]~
			DActionsText ~[SaveIfImageNode]~
			OActionsText ~[SaveIfImageNode]~
			Tooltip ~Edit DstY~;

		
		ypos = <ypos> + 30;
		
	Define: AutoCropZoomXStaticText Using DDWinCtrlDef AsSymbol AutoCropZoomXStaticText
	fields:	TypeName StaticText
			Text ~ZmX:~
			Position AutoCropSrcXStaticText(GetLeft,Position) <ypos>   $AutoCropStaticWidth  20 

	Define: AutoCropZoomXEditText Using DDWinCtrlDef AsSymbol AutoCropZoomXEditText
	fields:	TypeName MaskedEditText
			Position AutoCropZoomXStaticText(GetRight,Position)+1 <ypos> $AutoCropWidth  20
			GenConField ~AutoCrop:~
			ArrayPos 4
			Mask		 ~##################~
			AllowedChars ~.~
			PromptChar	 ~ ~		
			IActionsText ~[GetIfImageNode]~
			DActionsText ~[SaveIfImageNode]~
			OActionsText ~[SaveIfImageNode]~
			Tooltip ~Edit ZoomX~;

	Define: AutoCropZoomYStaticText Using DDWinCtrlDef AsSymbol AutoCropZoomYStaticText
	fields:	TypeName StaticText
			Text ~ZmY:~
			Position AutoCropZoomXEditText(GetRight,Position)+ 5 <ypos>   $AutoCropStaticWidth  20 

	Define: AutoCropZoomYEditText Using DDWinCtrlDef AsSymbol AutoCropZoomYEditText
	fields:	TypeName MaskedEditText
			Position AutoCropZoomYStaticText(GetRight,Position)+1 <ypos> $AutoCropWidth  20
			GenConField ~AutoCrop:~
			ArrayPos 5
			Mask		 ~##################~
			AllowedChars ~.~
			PromptChar	 ~ ~		
			IActionsText ~[GetIfImageNode]~
			DActionsText ~[SaveIfImageNode]~
			OActionsText ~[SaveIfImageNode]~
			Tooltip ~Edit ZoomX~;		
		
		ypos = <ypos> + 30;
	*/	
		
		Define: SameAsCropStaticText Using DDWinCtrlDef AsSymbol SameAsCropStaticText
		fields:	TypeName StaticText
				Position $LeftMargin,  <ypos>,  250,  20
				Tooltip ~Describes whether the crop is copied from another node~;
		ypos = <ypos> + 30;

		ypos = <ypos> + 20;
		Define: ZoomInButton Using DDWinCtrlDef AsSymbol ZoomInButton
		fields:	TypeName Button
				Text ~In~
				Position $LeftMargin + 10,  <ypos>,  $CropButtonWidth,  20
				Tooltip ~Zoom in on image before cropping~;

		Define: ZoomOutButton Using DDWinCtrlDef AsSymbol ZoomOutButton
		fields:	TypeName Button
				Text ~Out~
				Position ZoomInButton(GetRight,Position) + 10, <ypos>, $CropButtonWidth,  20
				Tooltip ~Zoom out on image before cropping~;


		// Note the naming convention used here.  The LEFT button moves the image in the left
		// direction on the screen, meaning the crop rect moves toward the right of the image
		ypos = <ypos> + 30;
		Define: CropLeftButton Using DDWinCtrlDef AsSymbol CropLeftButton  // moves crop rect right and image left in node
		fields:	TypeName Button
				Text ~Left~
				Position $LeftMargin + 10,  <ypos>,  $CropButtonWidth,  20
				Tooltip ~Move image left~;

		// Note the naming convention used here.  The RIGHT button moves the image in the right
		// direction on the screen, meaning the crop rect moves toward the left of the image
		Define: CropRightButton Using DDWinCtrlDef AsSymbol CropRightButton // moves crop rect left and image right in node
		fields:	TypeName Button
				Position		CropLeftButton(GetRight,Position) + 10,
								CropLeftButton(GetTop,Position),
								$CropButtonWidth,  20
				Text ~Right~
				Tooltip ~Move image right~;

		// Note the naming convention used here.  The UP button moves the image in the upward
		// direction on the screen, meaning the crop rect moves down in the image
		Define: CropUpButton Using DDWinCtrlDef AsSymbol CropUpButton // moves crop rect down and image up in node
		fields:	TypeName Button
				Text ~Up~
				Position		CropRightButton(GetRight,Position) + 10,
								CropRightButton(GetTop,Position),
								$CropButtonWidth,  20
				Tooltip ~Move image up~;


		// Note the naming convention used here.  The DOWN button moves the image in the upward
		// direction on the screen, meaning the crop rect moves down in the image
		Define: CropDownButton Using DDWinCtrlDef AsSymbol CropDownButton // moves crop rect up and image down in node
		fields:	TypeName Button
				Text ~Down~
				Position		CropUpButton(GetRight,Position) + 10,
								CropUpButton(GetTop,Position),
								$CropButtonWidth,  20
				Tooltip ~Move image down~;

		Define: ZZCrop2GroupBox Using DDWinCtrlDef
		fields:	TypeName GroupBox
				Text ~Crop an Image in a Rotated or Highly Zoomed Node~
				Position		SameAsCropStaticText(GetLeft,Position),
								SameAsCropStaticText(GetBottom,Position) + $VerticalGap,
								360,80;

		ypos = <ypos> + 40 ;
		Define: OverrideImageCropCheckBox Using DDWinCtrlDef AsSymbol OverrideImageCropCheckBox 
		fields:	TypeName CheckBox
				GenConField ~OverrideImageCrop:~
				Text ~Override image crop~
				Position $LeftMargin <ypos> 150 15
				IsTabStop 1
				Tooltip ~Override the crop that is in the database for the image in this node~;

		Define: OverrideImageCropXStaticText Using DDWinCtrlDef AsSymbol OverrideImageCropXStaticText 
		fields:	TypeName StaticText
				Text ~X:~
				Position OverrideImageCropCheckBox(GetRight,Position) + $hGap , <ypos> ,20 , 20

		Define: OverrideImageCropXEditText Using DDWinCtrlDef AsSymbol OverrideImageCropXEditText 
		fields:	TypeName MaskedEditText
				Position OverrideImageCropXStaticText(GetRight,Position) + $hGap , <ypos> ,$EditTextWidth , 20
				GenConField ~ImageCropX:~
				Mask		 ~#######~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Set center x-coordinate of crop as a percentage of the image width~;

		Define: OverrideImageCropYStaticText Using DDWinCtrlDef AsSymbol OverrideImageCropYStaticText 
		fields:	TypeName StaticText
				Text ~Y:~
				Position OverrideImageCropXEditText(GetRight,Position) + $hGap , <ypos> ,20 , 20

		Define: OverrideImageCropYEditText Using DDWinCtrlDef AsSymbol OverrideImageCropYEditText 
		fields:	TypeName MaskedEditText
				Position OverrideImageCropYStaticText(GetRight,Position) + $hGap , <ypos> ,$EditTextWidth , 20
				GenConField ~ImageCropY:~
				Mask		 ~#######~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Set center y-coordinate of crop as a percentage of the image height~;

		ypos = <ypos> + 30;
		Define: OverrideImageCropWStaticText Using DDWinCtrlDef AsSymbol OverrideImageCropWStaticText 
		fields:	TypeName StaticText
				Text ~W:~
				Position OverrideImageCropXStaticText(GetLeft,Position) , <ypos> ,20 , 20

		Define: OverrideImageCropWEditText Using DDWinCtrlDef AsSymbol OverrideImageCropWEditText 
		fields:	TypeName MaskedEditText
				Position OverrideImageCropWStaticText(GetRight,Position) + $hGap , <ypos> ,$EditTextWidth , 20
				GenConField ~ImageCropWidth:~
				Mask		 ~#######~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Set width of crop as a percentage~;

		Define: OverrideImageCropHStaticText Using DDWinCtrlDef AsSymbol OverrideImageCropHStaticText 
		fields:	TypeName StaticText
				Text ~L:~
				Position OverrideImageCropWEditText(GetRight,Position) + $hGap , <ypos> ,20 , 20

		Define: OverrideImageCropHEditText Using DDWinCtrlDef AsSymbol OverrideImageCropHEditText 
		fields:	TypeName MaskedEditText
				Position OverrideImageCropHStaticText(GetRight,Position) + $hGap , <ypos> ,$EditTextWidth , 20
				GenConField ~ImageCropHeight:~
				Mask		 ~#######~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				Tooltip ~Set length (height) of crop as a percentage~;


		Define: CropHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INCrop.htm" ) ;

	}
}

VOID DefineTab9()
{
		Define: Tab9 Using DDWinCtrlDef
		fields: Text ~Frame~
				TypeName Tab
				Tooltip ~Frames~
		Contains: InListOrder
	{
		ypos = $StartingYPos;
		Define: FrameFileButton Using DDWinCtrlDef AsSymbol FrameFileButton
		fields:	TypeName Button
				Text ~Frame...~
				GenConField ~FrameFile:~
				Position $LeftMargin,  <ypos> ,  150,  20
				Tooltip ~Select a frame file~;

		Define: ClearFrameButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove frame~
				Position $LeftMargin + 170, <ypos> , 100 , 20
				GenConField ~FrameFile:~
				Tooltip ~Clear the frame file field~;

		Define: FrameFileEditText Using DDWinCtrlDef AsSymbol FrameFileEditText
		fields:	TypeName MaskedEditText
				GenConField ~FrameFile:~
				Position		FrameFileButton(GetLeft,Position),
								FrameFileButton(GetBottom,Position) + $VerticalGap,
								350,20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit frame file path~;

		Define: FrameResizeRadioButtonL Using DDWinCtrlDef AsSymbol FrameResizeRadioButtonL
		fields: TypeName RadioButton  
				Position		FrameFileEditText(GetLeft,Position) + 20,
								FrameFileEditText(GetBottom,Position) + $VerticalGap + $VerticalGap +5,
								80,20
				GenConField ~FrameResize:~
				RadioTrueValue ~L~
				Text ~Bilinear~
				IsTabStop 1
				Tooltip ~Use a fast, high quality resize algorithm. This is the recommended algorithm to use.~;

		Define: FrameResizeRadioButtonC Using DDWinCtrlDef AsSymbol FrameResizeRadioButtonC
		fields: TypeName RadioButton  
				Position		FrameResizeRadioButtonL(GetRight,Position) + 10,
								FrameResizeRadioButtonL(GetTop,Position),
								80,20
				GenConField ~FrameResize:~
				RadioTrueValue ~C~
				Text ~Bicubic~
				Tooltip ~Use a slower, very high quality resize algorithm.~
				IsTabStop 1;

		Define: FrameResizeRadioButtonN Using DDWinCtrlDef AsSymbol FrameResizeRadioButtonN
		fields: TypeName RadioButton  
				Position		FrameResizeRadioButtonC(GetRight,Position) + 10,
								FrameResizeRadioButtonC(GetTop,Position),
								140,20
				GenConField ~FrameResize:~
				RadioTrueValue ~N~
				Text ~Nearest Neighbor~
				IsTabStop 1	 
				Tooltip ~Use a very fast, low quality resize algorithm~;

		Define: FrameResizeZGroupBox Using DDWinCtrlDef AsSymbol FrameResizeZGroupBox
		fields:	TypeName GroupBox
				Text ~Frame Resize Method:~
				Position		FrameFileEditText(GetLeft,Position),
								FrameFileEditText(GetBottom,Position) + $VerticalGap,
								360,40


		Define: FrameRectOverlapStaticText Using DDWinCtrlDef AsSymbol FrameRectOverlapStaticText
		fields:	TypeName StaticText
				Text ~Frame Horizontal Overlap %:~
				Position		FrameResizeZGroupBox(GetLeft,Position),
								FrameResizeZGroupBox(GetBottom,Position) + $VerticalGap,
								160,20
		Define: FrameRectOverlapXEditText Using DDWinCtrlDef AsSymbol FrameRectOverlapXEditText
		fields:	TypeName MaskedEditText
				GenConField ~FrameRectOverlapX:~
				Position		FrameRectOverlapStaticText(GetRight,Position) + 10,
								FrameRectOverlapStaticText(GetTop,Position),
								80,20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				Tooltip ~Enter percent of horizontal overlap~


/*
		This was taken out because the slider tended to cause the edit text field
		to lose precision.  Should not use sliders with floating point numbers
		Paul Forleo 7/22/05

		Define: FrameRectOverlapXSlider Using DDWinCtrlDef AsSymbol FrameRectOverlapXSlider
		fields:	TypeName Slider
				GenConField ~FrameRectOverlapX:~
				Position		FrameRectOverlapXEditText(GetRight,Position) + 10,
								FrameRectOverlapXEditText(GetTop,Position),
								90,20
				Tooltip ~Adjust horizontal overlap~
*/
		Define: FrameRectOverlapYStaticText Using DDWinCtrlDef AsSymbol FrameRectOverlapYStaticText
		fields:	TypeName StaticText
				Text ~Frame Vertical Overlap %:~
				Position		FrameRectOverlapStaticText(GetLeft,Position),
								FrameRectOverlapStaticText(GetBottom,Position) + $VerticalGap,
								160,20
		Define: FrameRectOverlapYEditText Using DDWinCtrlDef AsSymbol FrameRectOverlapYEditText
		fields:	TypeName MaskedEditText
				GenConField ~FrameRectOverlapY:~
				Position		FrameRectOverlapYStaticText(GetRight,Position) + 10,
								FrameRectOverlapYStaticText(GetTop,Position),
								80,20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				Tooltip ~Enter percent of vertical overlap~;
				
		ypos = FrameRectOverlapYEditText(GetTop,Position) + 30;

/*
		Define: FrameRectOverlapYSlider Using DDWinCtrlDef AsSymbol FrameRectOverlapYSlider
		fields:	TypeName Slider
				GenConField ~FrameRectOverlapY:~
				ArrayPos 3
				Position		FrameRectOverlapYEditText(GetRight,Position) + 10,
								FrameRectOverlapYEditText(GetTop,Position),
								90,20
				Tooltip ~Adjust vertical overlap~
*/

	ypos = <ypos> + 30;
	Prefix = FR;		// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
	DefineSpotColorControls(ypos,~<Prefix>~,~ISpotColorFrame:~, ~ISpotTextureFrame:~, ~FrameSpotColorTranslucence:~,~SpotColorFrameTexture:~);

	Define: FramesHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INFrames.htm" ) ;



	}
}

VOID DefineTab10()
{
		Define: Tab10 Using DDWinCtrlDef
		fields: Text ~Frame Mask~
				TypeName Tab
				Tooltip ~Frame Mask~
		Contains: InListOrder
	{
		ypos = $StartingYPos;

		Define: FrameMaskFileButton Using DDWinCtrlDef  AsSymbol FrameMaskFileButton
		fields:	TypeName Button
				Text ~Frame Mask...~
				GenConField ~FrameMask:~
				Position		$LeftMargin,<ypos>,150,20
				Tooltip ~Select a frame mask file and override the Auto Frame Mask Generation settings below.~;

		Define: ClearFrameMaskButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove frame mask~
				Position $LeftMargin + 160, <ypos> , 150 , 20
				GenConField ~FrameMask:~
				Tooltip ~Clear the frame mask file field~;

		Define: FrameMaskFileEditText Using DDWinCtrlDef AsSymbol FrameMaskFileEditText
		fields:	TypeName MaskedEditText
				GenConField ~FrameMask:~
				Position		FrameMaskFileButton(GetLeft,Position),
								FrameMaskFileButton(GetBottom,Position) + $VerticalGap,
								350,20
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Select a frame mask file.  Leave blank to create one using Auto Frame Mask Generation settings below.~

		Define: FrameMaskColorButton Using DDWinCtrlDef AsSymbol FrameMaskColorButton
		fields:	TypeName Button
				Text ~Select color in the frame that is transparent in the mask...~
				Position		FrameMaskFileEditText(GetLeft,Position) + 20,
								FrameMaskFileEditText(GetBottom,Position) + $VerticalGap + 15,
								280,20
				GenConField ~FrameMaskInsideColor:~
				Tooltip ~Select a color~;


		Define: FrameMaskToleranceStaticText Using DDWinCtrlDef AsSymbol FrameMaskToleranceStaticText
		fields:	TypeName StaticText
				Text ~Frame Mask Tolerance~
				Position		FrameMaskColorButton(GetLeft,Position),
								FrameMaskColorButton(GetBottom,Position) + $VerticalGap,
								140,20

		Define: FrameMaskToleranceEditText Using DDWinCtrlDef AsSymbol FrameMaskToleranceEditText
		fields:	TypeName MaskedEditText
				GenConField ~FrameMaskTolerance:~
				Position		FrameMaskToleranceStaticText(GetRight,Position) + 10,
								FrameMaskToleranceStaticText(GetTop,Position),
								80,20
				Mask		 ~###~
				AllowedChars ~~
				PromptChar	 ~ ~		
				Tooltip ~Enter tolerance amount for transparency color~

		Define: FrameMaskToleranceSlider Using DDWinCtrlDef AsSymbol FrameMaskToleranceSlider
		fields:	TypeName Slider
				GenConField ~FrameMaskTolerance:~
				Position		FrameMaskToleranceEditText(GetRight,Position) + 10,
								FrameMaskToleranceEditText(GetTop,Position),
								90,20 
				Tooltip ~Adjust tolerance~

		Define: FrameMaskFeatheringStaticText Using DDWinCtrlDef AsSymbol FrameMaskFeatheringStaticText
		fields:	TypeName StaticText
				Text ~Frame Mask Feathering~
				Position		FrameMaskToleranceStaticText(GetLeft,Position),
								FrameMaskToleranceStaticText(GetBottom,Position) + $VerticalGap,
								140,20

		Define: FrameMaskFeatheringEditText Using DDWinCtrlDef AsSymbol FrameMaskFeatheringEditText
		fields:	TypeName MaskedEditText
				GenConField ~FrameMaskFeathering:~
				Position		FrameMaskFeatheringStaticText(GetRight,Position) + 10,
								FrameMaskFeatheringStaticText(GetTop,Position),
								80,20
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				Tooltip ~Enter mask feathering~

		Define: FrameMaskFeatheringSlider Using DDWinCtrlDef AsSymbol FrameMaskFeatheringSlider
		fields:	TypeName Slider
				GenConField ~FrameMaskFeathering:~
				ArrayPos 3
				Position		FrameMaskFeatheringEditText(GetRight,Position) + 10,
								FrameMaskFeatheringEditText(GetTop,Position),
								90,20
				Tooltip ~Adjust feathering~

		Define: ZZMakeFrameBox Using DDWinCtrlDef AsSymbol ZZMakeFrameBox
		fields:	TypeName GroupBox
				Text ~Auto Frame Mask Generation~
				Position		FrameMaskFileEditText(GetLeft,Position),
								FrameMaskFileEditText(GetBottom,Position) + $VerticalGap,
							360,100

		Define: FrameMaskHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INFramemask.htm" ) ;
	}
}

VOID DefineTab10a()
{
		Define: Tab10a Using DDWinCtrlDef
		fields: Text ~Emboss~
				TypeName Tab
				Tooltip ~Emboss~
		Contains: InListOrder
	{
				ypos = 72;
		Define: ApplyImageEmboss Using DDWinCtrlDef
		fields:	TypeName CheckBox
				GenConName THIS
				GenConField ~ImageEmboss:~
				Text ~Emboss~
				IsTabStop 1
				Position $LeftMargin <ypos> 120 15
				Tooltip ~If checked, will emboss the image.  If unchecked, no emboss will be applied.~;

		ypos = <ypos> + 30;

		Define: EmbossSizeStaticText Using DDWinCtrlDef AsSymbol EmbossSizeStaticText
		fields:	TypeName StaticText
				Text ~Size (pixels):~
				Position $LeftMargin <ypos> 100  20

		Define: EmbossSizeEditText Using DDWinCtrlDef AsSymbol EmbossSizeEditText
		fields:	TypeName MaskedEditText
				Position EmbossSizeStaticText(GetRight,Position)+10 <ypos>  50  20
				GenConName THIS
				GenConField ~ImageEmbossSize:~
				Mask		 ~###~
				AllowedChars ~~
				InsertOn	~T~	
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode UpdateControl(ImageEmbossSizeSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~The size is expressed in pixels.~;

		Define: ImageEmbossSizeSlider Using DDWinCtrlDef
		fields:	TypeName Slider
				GenConName THIS
				GenConField ~ImageEmbossSize:~
				Position EmbossSizeEditText(GetRight,Position)+10  <ypos> 180 20
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode UpdateControl(EmbossSizeEditText)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~The size is expressed as a percentage of the font size that is used.  Values between 2 and 8 are good starting points~;

		ypos = <ypos> + 30;
		Define: EmbossLightAngleStaticText Using DDWinCtrlDef AsSymbol EmbossLightAngleStaticText
		fields:	TypeName StaticText
				Text ~Light Source:~
				Position $LeftMargin <ypos> $MedStaticTextWidth  20

		Define: EmbossLightAngleComboBox Using DDWinCtrlDef AsSymbol EmbossLightAngleComboBox
		fields:	TypeName SComboBox
				GenConField ~ImageEmbossLightAngle:~
				Position EmbossSizeEditText(GetLeft,Position) <ypos> 90  210
				IActionsText ~[GetList(BevelAngles) GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Specify source of light~;

		ypos = <ypos> + 30;

		Define: EmbossStrengthStaticText Using DDWinCtrlDef AsSymbol EmbossStrengthStaticText
		fields:	TypeName StaticText
				Text ~Strength:~
				Position $LeftMargin <ypos> 100  20

		Define: ImageEmbossStrengthEditText Using DDWinCtrlDef AsSymbol ImageEmbossStrengthEditText
		fields:	TypeName MaskedEditText
				GenConField ~ImageEmbossStrength:~
				Position EmbossSizeEditText(GetLeft,Position)  <ypos>  50 20
				Mask		 ~###~
				AllowedChars ~~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode UpdateControl(ImageEmbossStrengthSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Sets the strength of the emboss (0-100)~;

		Define: ImageEmbossStrengthSlider Using DDWinCtrlDef
		fields:	TypeName Slider
				GenConName THIS
				GenConField ~ImageEmbossStrength:~
				Position ImageEmbossStrengthEditText(GetRight,Position)+10  <ypos> 180 20
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode UpdateControl(ImageEmbossStrengthEditText)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Sets the strength of the emboss (0-100) ~;

		ypos = <ypos> + 30;
		Define: EmbossSoftnessStaticText Using DDWinCtrlDef AsSymbol EmbossSoftnessStaticText
		fields:	TypeName StaticText
				Text ~Softness:~
				Position $LeftMargin <ypos> 100  20

		Define: ImageEmbossSoftnessEditText Using DDWinCtrlDef AsSymbol ImageEmbossSoftnessEditText
		fields:	TypeName MaskedEditText
				GenConField ~ImageEmbossSoftness:~
				Position EmbossSizeEditText(GetLeft,Position)  <ypos>  50 20
				Mask		 ~###~
				AllowedChars ~~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode UpdateControl(ImageEmbossSoftnessSlider)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Set the softness of the emboss (0-10)~;

		Define: ImageEmbossSoftnessSlider Using DDWinCtrlDef
		fields:	TypeName Slider
				GenConName THIS
				GenConField ~ImageEmbossSoftness:~
				Position   ImageEmbossSoftnessEditText(GetRight,Position) + 10 <ypos> 180 20
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode UpdateControl(ImageEmbossSoftnessEditText)]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~Set the softness of the emboss (0-10)~;

		Define: ImageEmbossHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "InEmboss.htm" ) ;
	}
}

VOID DefineTab11()
{
		Define: Tab11 Using DDWinCtrlDef
		fields: Text ~Orientation~
				TypeName Tab
				Tooltip ~Orientation~
		Contains: InListOrder
	{
			
		ypos =  80;
		Define: OverrideImageRotationStaticText Using DDWinCtrlDef AsSymbol OverrideImageRotationStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> $MediumStaticTextWidth -   $SmallRadioButtonIncrement - $SmallRadioButtonWidth, 30
				Text ~Override Image Rotation:~;

		Define: OverrideRadioButtonNone Using DDWinCtrlDef AsSymbol OverrideRadioButtonNone
		fields: TypeName RadioButton  
				Position OverrideImageRotationStaticText(GetRight,Position) + 20 , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~OverrideImageRotation:~
				Text ~Off~
				Tooltip ~Use the rotation value in the database~;

		Define: OverrideRadioButton0 Using DDWinCtrlDef AsSymbol OverrideRadioButton0
		fields: TypeName RadioButton  
				Position OverrideRadioButtonNone(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~OverrideImageRotation:~
				RadioTrueValue ~0~
				Text ~0~
				Explicit 1
				Tooltip ~Ignore the database rotation value for the image in this node and apply no rotation~;

		Define: OverrideRadioButton90 Using DDWinCtrlDef AsSymbol OverrideRadioButton90
		fields: TypeName RadioButton  
				Position OverrideRadioButton0(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~OverrideImageRotation:~
				RadioTrueValue ~90~
				Text ~90~
				Tooltip ~Ignore the database rotation value for the image in this node and rotate the image 90 degrees clockwise instead~;

		Define: OverrideRadioButton180 Using DDWinCtrlDef AsSymbol OverrideRadioButton180
		fields: TypeName RadioButton  
				Position OverrideRadioButton90(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~OverrideImageRotation:~
				RadioTrueValue ~180~
				Text ~180~
				Tooltip ~Ignore the database rotation value for the image in this node and rotate the image 180 degrees instead~;

		Define: OverrideRadioButton270 Using DDWinCtrlDef AsSymbol OverrideRadioButton270
		fields: TypeName RadioButton  
				Position OverrideRadioButton180(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth+5 ,20 
				GenConField ~OverrideImageRotation:~
				RadioTrueValue ~270~
				Text ~270~
				Tooltip ~Ignore the database rotation value for the image in this node and rotate the image 90 degrees counterclockwise instead~;


		ypos = OverrideImageRotationStaticText(GetBottom,Position) + 10 ;


		Define: RotateFromDiskStaticText Using DDWinCtrlDef AsSymbol RotateFromDiskStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> $MediumStaticTextWidth  30
				Text ~Rotate From Disk:~;

		Define: RotateFromDiskRadioButton0 Using DDWinCtrlDef AsSymbol RotateFromDiskRadioButton0
		fields: TypeName RadioButton  
				Position RotateFromDiskStaticText(GetRight,Position) + 20, <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~RotateFromDisk:~
				RadioTrueValue ~0~
				Text ~0~
				Tooltip ~No rotation is done~;

		Define: RotateFromDiskRadioButton90 Using DDWinCtrlDef AsSymbol RotateFromDiskRadioButton90
		fields: TypeName RadioButton  
				Position RotateFromDiskRadioButton0(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~RotateFromDisk:~
				RadioTrueValue ~90~
				Text ~90~
				Tooltip ~Rotates the image by 90 degree in a clockwise direction after applying Override Image Rotation~;

		Define: RotateFromDiskRadioButton180 Using DDWinCtrlDef AsSymbol RotateFromDiskRadioButton180
		fields: TypeName RadioButton  
				Position RotateFromDiskRadioButton90(GetRight,Position) +$SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~RotateFromDisk:~
				RadioTrueValue ~180~
				Text ~180~
				Tooltip ~Rotates the image by 180 degree in a clockwise direction after applying Override Image Rotation~;

		Define: RotateFromDiskRadioButton270 Using DDWinCtrlDef AsSymbol RotateFromDiskRadioButton270
		fields: TypeName RadioButton  
				Position RotateFromDiskRadioButton180(GetRight,Position) +$SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth+5 ,20 
				GenConField ~RotateFromDisk:~
				RadioTrueValue ~270~
				Text ~270~
				Tooltip ~Rotates the image by 90 degree in a counter-clockwise direction after applying Override Image Rotation~;

		ypos = RotateFromDiskStaticText(GetBottom,Position) + 10 ;

		Define: AutoRotateStaticText Using DDWinCtrlDef AsSymbol AutoRotateStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> $MediumStaticTextWidth  30
				Text ~Best Fit Auto Rotate on Image Size:~;

		Define: AutoRotateRadioButton0 Using DDWinCtrlDef AsSymbol AutoRotateRadioButton0
		fields: TypeName RadioButton  
				Position AutoRotateStaticText(GetRight,Position) + 20 , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~AutoRotate:~
				RadioTrueValue ~0~
				Text ~0~
				Tooltip ~No auto rotation based on the uncropped image's size.~;

		Define: AutoRotateRadioButton90 Using DDWinCtrlDef AsSymbol AutoRotateRadioButton90
		fields: TypeName RadioButton  
				Position AutoRotateRadioButton0(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~AutoRotate:~
				Text ~90~
				RadioTrueValue ~90~
				Tooltip ~Rotate the image clockwise if the orientation of the uncropped image does not match the orientation of the node~;

		Define: AutoRotateRadioButton270 Using DDWinCtrlDef
		fields: TypeName RadioButton  
				Position AutoRotateRadioButton90(GetRight,Position) + $SmallRadioButtonIncrement + $SmallRadioButtonWidth + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth+5 ,20 
				GenConField ~AutoRotate:~
				Text ~270~
				RadioTrueValue ~270~
				Tooltip ~Rotate the image counter clockwise if the orientation of the uncropped image does not match the orientation of the node~;

		ypos = AutoRotateStaticText(GetBottom,Position) + 10;


		Define: AutoRotateCropStaticText Using DDWinCtrlDef AsSymbol AutoRotateCropStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> $MediumStaticTextWidth  30
				Text ~Best Fit Auto Rotate on Crop Size:~;

		Define: AutoRotateCropRadioButton0 Using DDWinCtrlDef AsSymbol AutoRotateCropRadioButton0
		fields: TypeName RadioButton  
				Position  AutoRotateCropStaticText(GetRight,Position) + 20, <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~AutoRotateImageDuringAutoCrop:~
				RadioTrueValue ~0~
				Text ~0~
				Tooltip ~Do not apply any auto rotation of the cropped image~;

		Define: AutoRotateCropRadioButton90 Using DDWinCtrlDef AsSymbol AutoRotateCropRadioButton90
		fields: TypeName RadioButton  
				Position AutoRotateCropRadioButton0(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth ,20 
				GenConField ~AutoRotateImageDuringAutoCrop:~
				RadioTrueValue ~90~
				Text ~90~
				Tooltip ~Rotate the image clockwise if the orientation of the cropped image does not match the orientation of the node~;

		Define: AutoRotateCropRadioButton270 Using DDWinCtrlDef
		fields: TypeName RadioButton  
				Position AutoRotateCropRadioButton90(GetRight,Position) + $SmallRadioButtonIncrement + $SmallRadioButtonWidth + $SmallRadioButtonIncrement , <ypos> ,$SmallRadioButtonWidth+5 ,20 
				GenConField ~AutoRotateImageDuringAutoCrop:~
				RadioTrueValue ~270~
				Text ~270~
				Tooltip ~Rotate the image counter-clockwise if the orientation of the cropped image does not match the orientation of the node~;


		ypos = AutoRotateCropStaticText(GetBottom,Position) + 10;

		// attempt to put the group box last to allow tooltip messages to come in
		// for the radio controls.  But it didn't work (PDF 9/3/98)

		Define: MirrorHorizontalCheckBox Using DDWinCtrlDef AsSymbol MirrorHorizontalCheckBox
		fields:	TypeName CheckBox
				GenConField ~MirrorHorizontal:~
				Text ~Mirror Horizontal~
				IsTabStop 1
				Position $LeftMargin <ypos> 130 15
				Tooltip ~Flip the image along a horizontal axis~;

		Define: AngleStaticText Using DDWinCtrlDef AsSymbol AngleStaticText
		fields:	TypeName StaticText
				Position MirrorHorizontalCheckBox(GetRight,Position)+20 <ypos> $StaticTextWidth+ 30  20
				Text ~Camera Tilt:~;

		Define: RotateImageEditText Using DDWinCtrlDef AsSymbol RotateImageEditText
		fields:	TypeName MaskedEditText
				Position AngleStaticText(GetRight,Position)+20 <ypos>  $EditTextWidth  20
				GenConField ~IRotationCorrection:~
				Mask		 ~############~
				InsertOn	~T~	
				AllowedChars ~-.~
				PromptChar	 ~ ~		
				Tooltip ~Rotate the image due to a tilted camera.  This is added to the Angle in the database for this image.  If the image is a chroma keyed image using background substitution, the background is rotated with the image.~;

		ypos = <ypos> + 30;
		Define: ChromaKeyBGRotationStaticText Using DDWinCtrlDef AsSymbol ChromaKeyBGRotationStaticText
		fields:	TypeName StaticText
				Position $LeftMargin+100 <ypos> $StaticTextWidth+ 90  20
				Text ~Chroma key background rotation:~;

		Define: ChromaKeyBGRotationEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position RotateImageEditText(GetLeft,Position) <ypos>  $EditTextWidth  20
				GenConField ~ChromaKeyBackgroundRotation:~
				Mask		 ~############~
				InsertOn	~T~	
				AllowedChars ~-.~
				PromptChar	 ~ ~		
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				Tooltip ~If the image is a chroma keyed image, rotate the background by an arbitrary angle.  The angle is relative to the image.  The background is rotated by this amount plus the amount that the image is rotated due to Camera Tilt.~;
		ypos = <ypos> + 30;

		Define: MirrorVerticalCheckBox	 Using DDWinCtrlDef AsSymbol MirrorVerticalCheckBox
		fields:	TypeName CheckBox
				GenConField ~MirrorVertical:~
				Text ~Mirror Vertical~
				Position $LeftMargin <ypos> 130 15
				IsTabStop 1
				Tooltip ~Flip the image along a vertical axis~;

		Define: RotateImageStaticText Using DDWinCtrlDef AsSymbol RotateImageStaticText
		fields:	TypeName StaticText
				Position MirrorVerticalCheckBox(GetRight,Position)+20 <ypos> $StaticTextWidth+ 30  20
				Text ~Skew:~;

		Define: RotateAutoCropImageEditText Using DDWinCtrlDef
		fields:	TypeName EditText
				Position RotateImageStaticText(GetRight,Position)+20 <ypos>  $EditTextWidth  20
				GenConField ~AutoCropRotation:~
				Mask		 ~############~
				InsertOn	~T~	
				AllowedChars ~-.~
				PromptChar	 ~ ~		
				Tooltip ~Image Rotation done in the studio.  Rotates the image by the angle specified.~;


		Define: OrientationHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INOrientation.htm" ) ;


	}
}

VOID DefineTab12()
{
		Define: Tab12 Using DDWinCtrlDef
		fields: Text ~Bevel~
				TypeName Tab
				Tooltip ~Add Bevel~
				Contains: InListOrder
		{
				ypos = $Startingypos + 2;
		Define: BevelInside Using DDWinCtrlDef AsSymbol BevelInside
		fields: TypeName RadioButton  
				Position $LeftMargin + 10 , <ypos> ,70 ,20 
				GenConField ~BIRInside:~
				RadioTrueValue ~1~
				Text ~Inside~
				Tooltip ~Create a bevel inside the image node~;

		Define: BevelOutside Using DDWinCtrlDef AsSymbol BevelOutside
		fields: TypeName RadioButton  
				Position BevelInside(GetRight,Position) + 5 , <ypos> ,70 ,20 
				GenConField ~BIRInside:~
				RadioTrueValue ~0~
				Text ~Outside~
				Tooltip ~Create a bevel outside the image node~;

		Define: BevelNode Using DDWinCtrlDef AsSymbol BevelNode;
		fields: TypeName RadioButton  
				Position BevelOutside(GetRight,Position)+25 , <ypos> ,70 ,20 
				GenConField ~BIRBevelImage:~
				RadioTrueValue ~0~
				Text ~Node~
				Tooltip ~Bevel the inside or outside of the node~;

		Define: BevelImage Using DDWinCtrlDef AsSymbol BevelImage
		fields: TypeName RadioButton  
				Position BevelNode(GetRight,Position)+5 , <ypos> ,70 ,20 
				GenConField ~BIRBevelImage:~
				RadioTrueValue ~1~
				Text ~Image~
				Tooltip ~Bevel the inside or outside the image.  Best used when Auto Crop Mode is F~;

		ypos =  BevelOutside(GetBottom,Position) + 18;
		Define: BIRWidthStaticText Using DDWinCtrlDef AsSymbol BIRWidthStaticText
		fields:	TypeName StaticText
				Text ~Width/Percent:~
				Position $LeftMargin <ypos> $StaticTextWidth  20

		Define: BIRWidthEditText Using DDWinCtrlDef AsSymbol BIRWidthEditText
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $BigEditTextWidth  20
				GenConField ~BIRWidth:~
				Mask		 ~##################~
				InsertOn	~T~	
				AllowedChars ~-.~
				PromptChar	 ~ ~		
				Tooltip ~Specify width and height of beveled area~;

		Define: BevelUnitsArePercent Using DDWinCtrlDef AsSymbol BevelUnitsArePercent
		fields: TypeName SComboBox  
				Position BIRWidthEditText(GetRight,Position)+10 , <ypos> ,100 ,90
				GenConField ~BIRUnits:~
				IsIndex 1
				Tooltip ~Select units~;

		ypos = <ypos> + 29;
		Define: BIRLeftStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Left:~
				Position $LeftMargin <ypos> 100  20

		Define: BIRLeftEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $EditTextWidth  20
				GenConField ~BIRLeftDelta:~
				Mask		 ~####~
				AllowedChars ~-~
				InsertOn	~T~	
				PromptChar	 ~ ~		
				Tooltip ~Specify left brightness change~

		Define: BIRLeftSlider Using DDWinCtrlDef
		fields:	TypeName Slider
				Position 200 <ypos> 170  20
				GenConField ~BIRLeftDelta:~
				Tooltip ~Specify left brightness change~;

		ypos = <ypos> + 29;

		Define: BIRTopStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Top:~
				Position $LeftMargin <ypos> 100  20
		Define: BIRTopEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $EditTextWidth  20
				GenConField ~BIRTopDelta:~
				Tooltip ~Specify top brightness change~
				InsertOn	~T~	
				Mask		 ~####~
				AllowedChars ~-~
				PromptChar	 ~ ~		
		Define: BIRTopSlider Using DDWinCtrlDef
		fields:	TypeName Slider
				Position 200 <ypos> 170  20
				GenConField ~BIRTopDelta:~
				Tooltip ~Specify top brightness change~;
		ypos = <ypos> + 29;
		Define: BIRRightStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Right:~
				Position $LeftMargin <ypos> 100  20
		Define: BIRRightEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $EditTextWidth  20
				GenConField ~BIRRightDelta:~
				Mask		 ~####~
				InsertOn	~T~	
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Specify right brightness change~

		Define: BIRRightSlider Using DDWinCtrlDef
		fields:	TypeName Slider
				Position 200 <ypos> 170  20
				GenConField ~BIRRightDelta:~
				Tooltip ~Specify right brightness change~;

		ypos = <ypos> + 29;
		Define: BIRBottomStaticText Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Bottom:~
				Position $LeftMargin <ypos> 100  20
		Define: BIRBottomEditText Using DDWinCtrlDef AsSymbol BIRBottomEditText
		fields:	TypeName MaskedEditText
				Position 120 <ypos>  $EditTextWidth  20
				GenConField ~BIRBottomDelta:~
				Mask		 ~####~
				InsertOn	~T~	
				AllowedChars ~-~
				PromptChar	 ~ ~		
				Tooltip ~Specify bottom brightness change~
		Define: BIRBottomSlider Using DDWinCtrlDef AsSymbol BIRBottomSlider
		fields:	TypeName Slider
				Position 200 <ypos> 170  20
				GenConField ~BIRBottomDelta:~
				Tooltip ~Specify bottom brightness change~;

	ypos = <ypos> + 30;
	Prefix = BE;		// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
	DefineSpotColorControls(ypos,~<Prefix>~,~ISpotColorBevel:~, ~ISpotTextureBevel:~, ~BevelSpotColorTranslucence:~,~SpotColorBevelTexture:~);


		ypos = $Startingypos - 15;
		Define: ZZBevelInsideGroupBox Using DDWinCtrlDef AsSymbol ZZBevelInsideGroupBox
		fields:	TypeName GroupBox
				Text ~Inside or Outside Bevel~
				Tooltip ~Specify an inside or outside bevel~
				Position $LeftMargin <ypos> 165  45;

		Define: ZZBevelImageGroupBox Using DDWinCtrlDef
		fields:	TypeName GroupBox
				Text ~Bevel Node or Image~
				Tooltip ~Specify an inside or outside bevel~
				Position $LeftMargin+ 170 <ypos> 165  43;

		ypos = BIRBottomEditText(GetBottom,Position)+ 8;
/*			Define: BevelImageFileButton Using DDWinCtrlDef  AsSymbol BevelImageFileButton
		fields:	TypeName Button
				Text ~Bevel Image...~
				GenConField ~BevelImageFilePath:~
				Position $LeftMargin,<ypos>,150,20
				Tooltip ~Select an image file for providing color and texture to the bevel.~;

		Define: ClearBevelImageButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove bevel image file~
				Position $LeftMargin + 160, <ypos> , 150 , 20
				GenConField ~BevelImageFilePath:~
				Tooltip ~Clear the bevel image file~;

		Define: BevelImageFileEditText Using DDWinCtrlDef AsSymbol BevelImageFileEditText
		fields:	TypeName MaskedEditText
				GenConField ~BevelImagefilePath:~
				Position		BevelImageFileButton(GetLeft,Position),
								BevelImageFileButton(GetBottom,Position) + $VerticalGap,
								350,20
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Select a bevel image file.~
*/
		Define: BevelHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength
				DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INBevel.htm" ) ;

		}
}

VOID DefineTab13()
{
		Define: Tab13 Using DDWinCtrlDef
		fields: Text ~Stroke~
		TypeName Tab
		Tooltip ~Add Stroke~
		Contains: InListOrder
		{
			ypos = $Startingypos -5;
			Define: StrokeRadioButtonRect Using DDWinCtrlDef AsSymbol StrokeRadioButtonRect
			fields: TypeName RadioButton  
					Position $LeftMargin  , <ypos> ,67 ,20 
					GenConField ~StrokeType:~
					RadioTrueValue ~0~
 					Text ~Rectangle~
					IsTabStop 1
					Tooltip ~Fit smallest side and crop edges of shortest side~;

			Define: StrokeRadioButtonMask Using DDWinCtrlDef AsSymbol StrokeRadioButtonMask
			fields: TypeName RadioButton  
					Position StrokeRadioButtonRect(GetRight,Position) + 8 , <ypos> ,46 ,20 
					GenConField ~StrokeType:~
					RadioTrueValue ~1~
 					IsTabStop 1
					Text ~Mask~
					Tooltip ~Draw a stroke around the mask for the image~;

			Define: StrokeRadioButtonOval Using DDWinCtrlDef AsSymbol StrokeRadioButtonOval
			fields: TypeName RadioButton  
					Position StrokeRadioButtonMask(GetRight,Position) + 8 , <ypos> ,40 ,20 
					GenConField ~StrokeType:~
					RadioTrueValue ~2~
 					IsTabStop 1
					Text ~Oval~
					Tooltip ~Draw an oval stroke~;
			StrokeGroupBoxSize=39;
			Define: ZZStrokeTypeGroupBox Using DDWinCtrlDef AsSymbol ZZStrokeTypeGroupBox
			fields:	TypeName GroupBox
					Text ~Stroke Type~
					Tooltip ~Specify an inside or outside stroke~
					Position $LeftMargin-5  StrokeRadioButtonRect(GetTop,Position) - 15 StrokeRadioButtonOval(GetRight,Position) -StrokeRadioButtonRect(GetLeft,Position)+10   $StrokeGroupBoxSize;

			Define: StrokeRadioButtonImageMask Using DDWinCtrlDef AsSymbol StrokeRadioButtonImageMask
			fields: TypeName RadioButton  
					Position StrokeRadioButtonOval(GetRight,Position) + 16 , <ypos> ,48 ,20 
					GenConField ~StrokeMaskType:~
					RadioTrueValue ~0~
 					Text ~Image~
					IsTabStop 1
					Tooltip ~Use the image mask~;

			Define: StrokeRadioButtonBGColorMask Using DDWinCtrlDef AsSymbol StrokeRadioButtonBGColorMask
			fields: TypeName RadioButton  
					Position StrokeRadioButtonImageMask(GetRight,Position) + 5 , <ypos> ,62 ,20 
					GenConField ~StrokeMaskType:~
					RadioTrueValue ~1~
 					IsTabStop 1
					Text ~BG Color~
					Tooltip ~Use the background color mask~;

			Define: ZZMaskTypeGroupBox Using DDWinCtrlDef AsSymbol ZZMaskTypeGroupBox
			fields:	TypeName GroupBox
					Text ~Which Mask?~
					Tooltip ~Specify an image or background color mask~
					Position StrokeRadioButtonImageMask(GetLeft,Position) - 10  StrokeRadioButtonImageMask(GetTop,Position) - 15 StrokeRadioButtonBGColorMask(GetRight,Position) -StrokeRadioButtonImageMask(GetLeft,Position) +10   $StrokeGroupBoxSize;

			ypos = ZZStrokeTypeGroupBox(GetBottom,Position) + 9;

			Define: StrokeInside Using DDWinCtrlDef AsSymbol StrokeInside
			fields: TypeName RadioButton  
					Position $LeftMargin + 10 , <ypos>+10 ,60 ,20 
					GenConField ~SIRInside:~
					RadioTrueValue ~1~
 					Text ~Inside~
					Tooltip ~Create a stroke inside the image node~;

			Define: StrokeOutside Using DDWinCtrlDef AsSymbol StrokeOutside;
			fields: TypeName RadioButton  
					Position StrokeInside(GetRight,Position) + 5 , <ypos>+10 ,60 ,20 
					GenConField ~SIRInside:~
					RadioTrueValue ~0~
 					Text ~Outside~
					Tooltip ~Create a stroke outside the image node~;

			Define: StrokeNode Using DDWinCtrlDef AsSymbol StrokeNode;
			fields: TypeName RadioButton  
					Position StrokeOutside(GetRight,Position)+25 , <ypos>+10 ,50 ,20 
					GenConField ~SIRStrokeImage:~
					RadioTrueValue ~0~
 					Text ~Node~
					Tooltip ~Stroke the inside or outside of the node~;

			Define: StrokeImage Using DDWinCtrlDef AsSymbol StrokeImage
			fields: TypeName RadioButton  
					Position StrokeNode(GetRight,Position)+5 , <ypos>+10 ,50 ,20 
					GenConField ~SIRStrokeImage:~
					RadioTrueValue ~1~
 					Text ~Image~
					Tooltip ~Stroke the inside or outside the image.  Best used when Auto Crop Mode is F~;

			ypos =  StrokeInside(GetTop,Position) - 7;
			Define: ZZStrokeInsideGroupBox Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Inside or Outside Stroke~
					Tooltip ~Specify an inside or outside stroke~
					Position $LeftMargin ZZStrokeTypeGroupBox(GetBottom,Position) +5 StrokeOutside(GetRight,Position) - StrokeInside(GetLeft,Position)+20  $StrokeGroupBoxSize;

			Define: ZZStrokeImageGroupBox Using DDWinCtrlDef AsSymbol ZZStrokeImageGroupBox
			fields:	TypeName GroupBox
					Text ~Stroke Node or Image~
					Tooltip ~Specify an inside or outside stroke~
					Position StrokeNode(GetLeft,Position) - 10 ZZStrokeTypeGroupBox(GetBottom,Position) +5 StrokeImage(GetRight,Position) - StrokeNode(GetLeft,Position)+20  $StrokeGroupBoxSize;

			Define: StrokeAntialiasCheckBox Using DDWinCtrlDef AsSymbol StrokeAntialiasCheckBox
			fields:	TypeName CheckBox
					GenConField ~StrokeAntialias:~
					Text ~Antialias~
					Position ZZStrokeImageGroupBox(GetRight,Position) + 20, StrokeNode(GetTop,Position) 70 15
					IsTabStop 1
					Tooltip ~Antialias stroke around the image in this node~;

			ypos =  StrokeOutside(GetBottom,Position) + 9;

			Define: SIRExpansionStaticText Using DDWinCtrlDef AsSymbol SIRExpansionStaticText
			fields:	TypeName StaticText
					Text ~Oval Expansion:~
					Position $LeftMargin <ypos> 90  20

			Define: SIRExpansionEditText Using DDWinCtrlDef AsSymbol SIRExpansionEditText
			fields:	TypeName MaskedEditText
					Position SIRExpansionStaticText(GetRight,Position)+10 <ypos>   $EditTextWidth  20
					GenConField ~Strokeexpansion:~
					Mask		 ~#####~
					AllowedChars ~-~
					InsertOn	~T~	
					PromptChar	 ~ ~		
					Tooltip ~Specify how much to expand the oval.  Units are in tenths of one percent of the image node width~

			Define: SIRExpansionSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position SIRExpansionEditText(GetRight,Position) + 10 <ypos> 170  20
					GenConField ~Strokeexpansion:~
					Tooltip ~Specify how much to expand the oval.  0 = entirely within the node, 50 = stroke half inside and half outside of the node, 100 = entirely outside of the node~;

			StrokeHGap=24;
			ypos = <ypos> + $StrokeHGap;
			Define: SIRThresholdStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Threshold:~
					Position $LeftMargin <ypos> 100  20
			Define: SIRThresholdEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~StrokeThreshold:~
					Mask		 ~####~
					AllowedChars ~-~
					InsertOn	~T~	
					PromptChar	 ~ ~		
					Tooltip ~Specify a darkness threshold in the mask, expressed as a difference from 128.  For example, 0 = gray, -25 = dark gray, 25 = light gray.~;

			Define: SIRThresholdSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~StrokeThreshold:~
					Tooltip ~Specify a darkness threshold in the mask, expressed as a difference from 128.  For example, 0 = gray, -25 = dark gray, 25 = light gray.~;

			ypos = <ypos> + $StrokeHGap;
			Define: SIRWidthStaticText Using DDWinCtrlDef AsSymbol SIRWidthStaticText
			fields:	TypeName StaticText
					Text ~Width/Percent:~
					Position $LeftMargin <ypos> $StaticTextWidth  20

			Define: SIRWidthEditText Using DDWinCtrlDef AsSymbol SIRWidthEditText
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $BigEditTextWidth  20
					GenConField ~SIRWidth:~
					Mask		 ~##################~
					InsertOn	~T~	
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Specify width and height of stroked area~;

			Define: StrokeUnitsArePercent Using DDWinCtrlDef 
			fields: TypeName SComboBox  
					Position SIRWidthEditText(GetRight,Position)+10 , <ypos> ,100 ,90
					GenConField ~SIRUnits:~
					IsIndex 1
					Tooltip ~Select units~;

			ypos = <ypos> + $StrokeHGap;
			Define: SIRRedStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Red:~
					Position $LeftMargin <ypos> 100  20
			Define: SIRRedEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~SIRRed:~
					Mask		 ~####~
					AllowedChars ~-~
					InsertOn	~T~	
					PromptChar	 ~ ~		
					Tooltip ~Specify red value~

			Define: SIRRedSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~SIRRed:~
					Tooltip ~Specify red value~;

			ypos = <ypos> + $StrokeHGap;

			Define: SIRGreenStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Green:~
					Position $LeftMargin <ypos> 100  20
			Define: SIRGreenEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~SIRGreen:~
					Tooltip ~Specify green value~
					Mask		 ~####~
					InsertOn	~T~	
					AllowedChars ~-~
					PromptChar	 ~ ~		
			Define: SIRGreenSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~SIRGreen:~
					Tooltip ~Specify green value~;
			ypos = <ypos> + $StrokeHGap;
			Define: SIRBlueStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Blue:~
					Position $LeftMargin <ypos> 100  20
			Define: SIRBlueEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~SIRBlue:~
					Mask		 ~####~
					AllowedChars ~-~
					InsertOn	~T~	
					PromptChar	 ~ ~		
					Tooltip ~Specify blue value~

			Define: SIRBlueSlider Using DDWinCtrlDef
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~SIRBlue:~
					Tooltip ~Specify blue value~;

			ypos = <ypos> + $StrokeHGap;
			Define: SIROpacityStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Opacity:~
					Position $LeftMargin <ypos> 100  20
			Define: SIROpacityEditText Using DDWinCtrlDef AsSymbol SIROpacityEditText
			fields:	TypeName MaskedEditText
					Position 120 <ypos>  $EditTextWidth  20
					GenConField ~SIROpacity:~
					Mask		 ~####~
					AllowedChars ~-~
					InsertOn	~T~	
					PromptChar	 ~ ~		
					Tooltip ~Specify opacity~
			Define: SIROpacitySlider Using DDWinCtrlDef AsSymbol SIROpacitySlider
			fields:	TypeName Slider
					Position 200 <ypos> 170  20
					GenConField ~SIROpacity:~
					Tooltip ~Specify opacity~;

			ypos = SIROpacitySlider(GetBottom,Position) + 8;

	Prefix = ST;		// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
	DefineSpotColorControls(ypos,~<Prefix>~,~ISpotColorStroke:~, ~ISpotTextureStroke:~, ~StrokeSpotColorTranslucence:~,~SpotColorStrokeTexture:~);


//			This is required and is used to recompute values to Mask's number of digits
//			Don't delete this; if you do Undo will stop working
			Define: DummyEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position (-1000) (-1000)  100  100
					GenConField ~Dummy~
					Mask		 ~##################~
					AllowedChars ~-.~
					PromptChar	 ~ ~		

			Define: StrokeHelpButton Using DDWinCtrlDef
			fields:	TypeName		Button
					Text			~Help~
					Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
									ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
									$HelpButtonWidth $HelpButtonLength
					DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "INStroke.htm" ) ;
		}
}

VOID DefineTab15()
{
		Define: Tab15 Using DDWinCtrlDef
		fields: Text ~Spot Color~
				TypeName Tab
				Tooltip ~Define spot color mask file for Nexpress printer~

		Contains: InListOrder
	{

		ypos = $StartingYPos;
		Define: SpotColorButton Using DDWinCtrlDef AsSymbol SpotColorButton
		fields:	TypeName Button
				Text ~Spot Color Mask...~
				Position $LeftMargin <ypos>  160  20
				GenConField ~ISpotColorMask:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[FileOpen UpdateControl(SpotColorMaskEditText)]~
				OActionsText ~[NULL]~
				GenConName THIS
				GenConField ~ISpotColorMask:~
				Tooltip ~Select a spot color mask file~;
		Define: ClearSpotColorButton Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Spot Color Mask~
				Position SpotColorButton(GetRight,Position) + 20, <ypos> , 180 , 20
				GenConField ~ISpotColorMask:~
				IActionsText ~[GetIfImageNode]~
				DactionsText ACTIONS 
				( 
				ExecFile(ClearField.txt)
				Exec(ClearField(ImageNodeValuesDialog,~ISpotColorMask:~);)
				Update(SpotColorMaskEditText)
				Update(SpotColorButton)
				)							
				OActionsText ~[NULL]~
				Tooltip ~Clear the spot color mask field~;

		ypos = <ypos> + 30;
		Define: SpotColorMaskEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position $LeftMargin <ypos> 360  20
				GenConField ~ISpotColorMask:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[SaveIfImageNode]~
				OActionsText ~[SaveIfImageNode]~
				RightJustified 1
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit spot color mask path~;

		ypos = <ypos> + 30;

		Define: ISpotColorTranslucenceStaticText Using DDWinCtrlDef AsSymbol ISpotColorTranslucenceStaticText
		fields:	TypeName StaticText
				Text ~Spot color opacity:~
				Position $LeftMargin <ypos> 70  30

		Define: ISpotColorTranslucenceEditText Using DDWinCtrlDef AsSymbol ISpotColorTranslucenceEditText
		fields:	TypeName MaskedEditText
				GenConName THIS
				GenConField ~SpotColorTranslucence:~
				Position ISpotColorTranslucenceStaticText(GetRight,Position) + 15, <ypos>, 40 , 20
				Mask		 ~###~ 
				AllowedChars ~-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				ControlToUpdate ISpotColorTranslucenceSlider
				EnableIfFieldTrue ~ISpotColorMask:~
				Tooltip ~0 = greatest amount of spot color, 100 = no spot color~;


		Define: ISpotColorTranslucenceSlider Using DDWinCtrlDef AsSymbol ISpotColorTranslucenceSlider
		fields:	TypeName Slider
				GenConName THIS
				GenConField ~SpotColorTranslucence:~
				Position ISpotColorTranslucenceEditText(GetRight,Position) + 15, <ypos> , 140 , 20
				ControlToUpdate ISpotColorTranslucenceEditText
				EnableIfFieldTrue ~ISpotColorMask:~
				Tooltip ~0 = greatest amount of spot color, 100 = no spot color~;

		ypos = <ypos> + 30;
		
		Define: ApplyAsTextureCheckBox Using DDWinCtrlDef AsSymbol ApplyAsTextureCheckBox
		fields:	TypeName CheckBox
				GenConField ~ApplyAsSpotTexture:~
				Text ~Apply as spot texture~
				Position $LeftMargin, <ypos>+5, 150, 15
				IsTabStop 1
				IActionsText ~[Get]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip ~Apply the mask file as a texture~;

		ypos = <ypos> + 50; 
		Define: SpotColorFitStaticText Using DDWinCtrlDef AsSymbol SpotColorFitStaticText
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> $StaticTextWidth  30
				Text ~Alignment~;

		Define: SpotColorAlignWithImageButton Using DDWinCtrlDef AsSymbol SpotColorAlignWithImageButton
		fields: TypeName RadioButton  
				Position SpotColorFitStaticText(GetRight,Position) + 20, <ypos> ,$RadioButtonWidth ,20 
				GenConField ~FitSpotColorMaskToNode:~
				RadioTrueValue ~0~
				Text ~Align with image~
				Tooltip ~Spot color mask aligns with the image.  The spot color mask is resized and cropped to fit the image.~;

		Define: SpotColorAlignWithNodeButton Using DDWinCtrlDef AsSymbol SpotColorAlignWithNodeButton
		fields: TypeName RadioButton  
				Position SpotColorAlignWithImageButton(GetRight,Position) + $SmallRadioButtonIncrement , <ypos> ,$RadioButtonWidth ,20 
				GenConField ~FitSpotColorMaskToNode:~
				RadioTrueValue ~1~
				Text ~Align with node~
				Tooltip ~Spot color mask aligns with node.~;

		Define: SpotColorOptionsHelpButton Using DDWinCtrlDef
		fields:	TypeName		Button
				Text			~Help~
				Position		ImageNodeOptions(GetLeft,Position) + $HelpButtonXOffset,
								ImageNodeOptions(GetBottom,Position) - $HelpButtonYOffset,
								$HelpButtonWidth $HelpButtonLength;
	}
}

Define: ImageNodeValuesDialog Using DDWinDef  // if the name is ever changed, you must also change UGenDlgBar::GetWindowPosition
fields: Position 400 20 400 450
		AutoPosition	1
		Title ~Image Node Properties~
		TypeName ~DialogBar~
		Purpose ~ImageAndTextNode~
		OActionsText ~[PerformOActions]~
		HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "INEdit.htm" )

Contains:
{
	Define: INTIDFieldAgain Using DDWinCtrlDef AsSymbol INTIDFieldAgain
	fields:	TypeName StaticText
			GenConField ~INTID:~
			Position 10 418  70  20
			FontWeight		600
			Tooltip ~Node ID~;

	Define: NodeNameFieldAgain Using DDWinCtrlDef AsSymbol NodeNameFieldAgain
	fields:	TypeName StaticText
			GenConField ~NodeName:~
			FontWeight		600
			Position IntIDFieldAgain(GetRight,Position)+5 INTIDFieldAgain(GetTop,Position)  175  20
			IActionsText ~[Get]~
			Tooltip ~Node Name~;


	Define: OKButton Using DDWinCtrlDef	AsSymbol OKButton
	fields:	TypeName Button
			Text ~Close~
			Position NodeNameFieldAgain(GetRight,Position)+5  INTIDFieldAgain(GetTop,Position) 55  20
			Tooltip ~Close window~

	Define: PreviewButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Preview~
			Position   OKButton(GetRight,Position)+5 INTIDFieldAgain(GetTop,Position) 55  20
			Tooltip ~Preview Changes~

	Define: ImageNodeOptions Using DDWinCtrlDef  AsSymbol ImageNodeOptions
	fields:	Position 10 10 380 405
			TypeName TabCtrl
			Text ~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~

	Contains: InListOrder
	{
		yPos = 0;
		DefineImageTab();
		DefineTab14();
		DefineTab1();
		DefineTab2();
		DefineTab3();
		DefineBlurTab();
		DefineTab4();
		DefineTab5();
		DefineTab6();
		DefineTab6a();
		DefineTab7();
		DefineTab8();
		DefineTab9();
		DefineTab10();
		DefineTab10a();
		DefineTab11();
		DefineTab12();
		DefineTab13();
		DefineTab15();
	}
}

Hang: ImageNodeValuesDialog ~[UI Dialogs]~ ;

