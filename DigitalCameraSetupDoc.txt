Include: ~Classes\BaseGrid~;

VOID DCSetupsGrid::DCSetupsGrid()					// CONSTRUCTOR
{
	TableName = ~DigitalCameraSetups~;
	DocumentQuery = ~Select * from <TableName> Order By Setup~;
	Title = ~Digital Camera Setups~;
	WindowWidth = 75; WindowHeight = 30;
	HelpFile = ~KPISHelpFile~;
	HelpPage = ~DC_Setups.htm~;
}

STR DCSetupsGrid::GetKey( &Item )					// PRIMARY KEY FOR THE TABLE
{
	return ~Setup = '<$con.Item[Setup]>'~;
}


NUMERIC DCSetupsGrid::SaveAllChanges()
{
	if (BaseGrid::SaveAllChanges())
	{
		RefreshListView();
	}

	return TRUE;
}

NUMERIC DCSetupsGrid::ProcessTextDrop( &Item )
{
	return TRUE;
}


NUMERIC DCSetupsGrid::OnDoubleClick()
{
	return TRUE;
}


VOID DCSetupsGrid::Init( theTitle )
{
	Title = ~<theTitle>~ == ~~ ? ~Digital Camera Setups~  : ~<theTitle>~;

	BaseGrid::Init();
}



NUMERIC Init(theTitle)
{
	if (Defined(Grid))
	{
		Grid.ReOpen();
		return TRUE;
	}

	Class( DCSetupsGrid,Extends,BaseGrid );

	DCSetupsGrid( New, Grid );

	Grid.DefineWindow();
	Grid.Init(~<theTitle>~);

	return Global( Grid );
}


NUMERIC DCSetupsGrid::DefineStdGridButtons( Subject )
{
	xPosition = $hGap;

	if ( MethodDefined( DeleteRecord ) )
	{
		Define: DeleteButton Using DDWinCtrlDef AsSymbol DeleteButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.DeleteRecord(TRUE) )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~&Delete~ )
					TOOLTIP			Translate( ~Delete the selected <Subject>s~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap;
	}

	if ( MethodDefined( RefreshListView ) )
	{
		Define: RefreshButton Using DDWinCtrlDef AsSymbol RefreshButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.RefreshListView() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~&Refresh~ )
					TOOLTIP			Translate( ~Refresh the list of <Subject>s~ )
					TYPENAME		BUTTON ;

			xPosition += $StdButtonWidth + $hGap;
	}

	return $xPosition;
}

VOID DCSetupsGrid::AddStdMenuItems()
{
	AddMenuItem( TRUE,	FALSE,Translate(UIMenuText,MenuDelete),ACTION EXEC ( <THIS>.DeleteRecord() ) );
	AddMenuItem( TRUE,	FALSE,Translate(UIMenuText,MenuRefresh),ACTION EXEC ( <THIS>.RefreshListView() ) );
}
