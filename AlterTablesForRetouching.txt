NUMERIC BaseStartup::AlterTablesForRetouching( &dBase )
{
	AddColumn( dBase,~Orders~,~RetouchBatchSetup~ );
	AddColumn( dBase,~Rolls~,~RetouchBatchSetup~ );
	AddColumn( dBase,~Images~,~RetouchBatchSetup~ );
	AddColumn( dBase,~Retouch~,~RetouchBatchSetup~ );
	AddColumn( dBase,~RetouchImages~,~ImageSource~ );
	DropColumn( dBase,~RetouchImages~,~<$str.LUT.QuoteFieldName>~ );
	AddColumn( dBase,~RetouchImages~,~OutputProfile~ );
	AddColumn( dBase,~RetouchImages~,~RestoreOriginal~ );
	AddColumn( dBase,~RetouchImages~,~BatchID~ );
	AddColumn( dBase,~RetouchImages~,~MergeID~ );
	AddColumn( dBase,~RetouchImages~,~DefaultProfileUsed~ );
	AddColumn( dBase,~RetouchImages~,~AutoBatch~ );
	AddColumn( dBase,~RetouchImages~,~SingleFace~ );

	if ( !ColumnExists( ~RetouchImages~,~ReviewID~,dBase ) )
	{
		AddColumn( dBase,~RetouchImages~,~ReviewID~ );

		if ( ColumnExists( ~RetouchImages~,~ComputerName~,dBase ) )
		{
			SQLCommand = ~UPDATE RetouchImages SET ReviewID = ComputerName~;
			if (!dBase(Cmd, ~<SQLCommand>~) )
			{
				Warning( Translate( ~Unable to update RetouchImages field.~ ) );
				return FALSE;
			}
		}
	}

	DropColumn( dBase,~RetouchImages~,~ComputerName~ );
	AddColumn( dBase,~RetouchImages~,~SubmittedAt~ );
	DropColumn( dBase,~RetouchBatchSetup~,~ID~ );
	DropColumn( dBase,~Orders~,~RetouchPriority~ );
	DropColumn( dBase,~Rolls~,~RetouchPriority~ );
	DropColumn( dBase,~Images~,~RetouchPriority~ );
	DropColumn( dBase,~RetouchImages~,~MaxThumbnailSize~ );

	if ( !GetSystemSettings( ~AutoRetouching~,~AutoMergeOnAccept~,Value,Enabled ))
	{
		SetSystemSettings( ~AutoRetouching~,~AutoMergeOnAccept~,TRUE,TRUE );
	}

	if ( !GetSystemSettings( ~AutoRetouching~,~IgnoreColorProfiles~,Value,Enabled ))
	{
		SetSystemSettings( ~AutoRetouching~,~IgnoreColorProfiles~,FALSE,TRUE );
	}

	if ( !GetSystemSettings( ~AutoRetouching~,~EmbedProfiles~,Value,Enabled ))
	{
		SetSystemSettings( ~AutoRetouching~,~EmbedProfiles~,FALSE,TRUE );
	}

	if ( !GetSystemSettings( ~AutoRetouching~,~ApplyColorCorrections~,Value,Enabled ))
	{
		SetSystemSettings( ~AutoRetouching~,~ApplyColorCorrections~,TRUE,TRUE );
	}

	if ( !GetSystemSettings( ~AutoRetouching~,~AutoBatch~,Value,Enabled ))
	{
		SetSystemSettings( ~AutoRetouching~,~AutoBatch~,FALSE,TRUE );
	}

	if ( !GetSystemSettings( ~AutoRetouching~,~SingleFace~,Value,Enabled ))
	{
		SetSystemSettings( ~AutoRetouching~,~SingleFace~,FALSE,TRUE );
	}

	AddColumn( dBase,~Images~,~AutoRetouchComplete~ );
	AddColumn( dBase,~RetouchBatchSetup~,~SkinColorThreshold~ );
	AddColumn( dBase,~RetouchBatchSetup~,~DefectThreshold~ );
	AddColumn( dBase,~RetouchBatchSetup~,~BatchSetupType~ );
	AddColumn( dBase,~RetouchBatchSetup~,~DefaultSetting~ );
	AddColumn( dBase,~RetouchBatchSetup~,~RedEyeRemoval~ );

	AddColumn( dBase,~RetouchImages~,~ApplyShasta~ );
	AddColumn( dBase,~RetouchImages~,~ShastaHighlight~ );
	AddColumn( dBase,~RetouchImages~,~ShastaMidTone~ );
	AddColumn( dBase,~RetouchImages~,~ShastaShadow~ );
	AddColumn( dBase,~RetouchImages~,~PostKPTPBrt~ );
	AddColumn( dBase,~RetouchImages~,~PostKPTPRed~ );
	AddColumn( dBase,~RetouchImages~,~PostKPTPGrn~ );
	AddColumn( dBase,~RetouchImages~,~PostKPTPBlu~ );
	AddColumn( dBase,~RetouchImages~,~PostKPTPCon~ );
	AddColumn( dBase,~RetouchImages~,~PostKPTPGam~ );

	AddColumn( dBase,~RetouchImages~,~ShadowContrast~ );
	AddColumn( dBase,~RetouchImages~,~MidtoneContrast~ );
	AddColumn( dBase,~RetouchImages~,~HighlightContrast~ );

	AddSetupTypeRows( dBase );

	return TRUE;
}

NUMERIC BaseStartup::AddSetupTypeRows(&dBase)
{
	fields	  = ~Name,TextureFine,TextureCoarse,TextureDepth,TextureGrain,SkinToneSmooth,SkinToneContrast,
				EyeWhitening,TeethWhitening,LeftEyeShaping,RightEyeShaping,SingleFace,
				SkinColorThreshold,DefectThreshold,BatchSetupType,DefaultSetting~ ;

	numValues = ~2,2,2,2,0,2,1,1,0,0,0,80,0.26~;

	name = ~DarkSkinHighBlemish~ ;
	CreateSetupType( dBase, ~<name>~, ~<fields>~,~<numValues>~,FALSE );

	name = ~DarkSkinLowBlemish~ ;
	CreateSetupType( dBase, ~<name>~, ~<fields>~,~<numValues>~,FALSE );

	name = ~LightSkinHighBlemish~ ;
	CreateSetupType( dBase, ~<name>~, ~<fields>~,~<numValues>~,FALSE );

	name = ~LightSkinLowBlemish~ ;
	typeQuery = ~Select count(*) from RetouchBatchSetup Where DefaultSetting = 1~;
	if ( dBase( RecordCountFor,~<typeQuery>~ ) == 0 )
	{
		CreateSetupType( dBase, ~<name>~, ~<fields>~,~<numValues>~,TRUE );
	}
	else
	{
		CreateSetupType( dBase, ~<name>~, ~<fields>~,~<numValues>~,FALSE );
	}

	ForgetPrivate( Kpars );

	return TRUE;

}

VOID BaseStartup::CreateSetupType(&dBase, name, fields, numValues, defaultSetting)
{
	typeQuery = ~Select count(*) from RetouchBatchSetup Where BatchSetupType = '<name>'~;
	if ( dBase( RecordCountFor,~<typeQuery>~ ) == 0 )
	{
		cmd = ~Insert into RetouchBatchSetup(<fields>) Values('<name>',<numValues>,'<name>',<defaultSetting>)~ ;
		if (!dBase( Cmd,~<cmd>~) )
		{
			dBase( GetErrorDescription,theErr);
			Log(Session, ~Failed to create Kpars Batch Setup for <name>~ );
		}

		Query = ~Select * From RetouchBatchSetup Where BatchSetupType = '<name>'~;
		
		if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			Log( Session, ~Query Failed: <Query>. <theErr>~ );
		}

		GenCon( NewEntry,NewFrom,List(GetDataDictionary),Private );

		NewEntry( SetValues,TextureFine,2,TextureCoarse,2,TextureDepth,2, TextureGrain,2 );
		NewEntry( SetValues,SkinToneSmooth,0,SkinToneContrast,2 );
		NewEntry( SetValues,EyeWhitening,1,TeethWhitening,1,LeftEyeShaping,0,RightEyeShaping,0 );
		NewEntry( SetValues,RedEyeRemoval,0 );
		NewEntry( SetValues,SingleFace,0 );
		NewEntry( SetValues,SkinColorThreshold,80, DefectThreshold,0.26 );
		NewEntry( SetValues,BatchSetupType,~<name>~,Name,~<name>~,DefaultSetting,<defaultSetting> );

		retval = StoreKparsSettings( NewEntry );
		ForgetPrivate( NewEntry );
	}

}

NUMERIC BaseStartup::StoreKparsSettings( &entryToSave )
{
	WaitCursor( Begin );
	if (!Defined(Kpars) )
	{
		if ( !KparsConnect() )
		{
			return FALSE;
		}
	}

	if ( !Kpars( StoreSettings,entryToSave ) )
	{
		Log( Session, ~Unable to save settings to file.~ );
		Warning( ~Unable to save settings to file.~ );
		return FALSE;
	}

	WaitCursor( End );
	return TRUE;
}

NUMERIC BaseStartup::KparsConnect( Mode )
{
	if ( Defined( Kpars ) )
	{
		return TRUE;
	}

	if (  !KPARS_Batch( Kpars ) )
	{
		Msg = ~Error starting the retouching software interface.~;
		StatusBar( 0, Translate( ~<Msg>~ ));
		return Warning( Translate( ~<Msg>~ ) );
	}

	Private( Kpars );

	return TRUE;
}



