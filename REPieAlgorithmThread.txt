//	REPieAlgorithmThread.txt

ExecC() ;

char	*NULL ;
int		 FALSE = 0 ;
int		 TRUE  = ! FALSE ;


// GLOBALS
REPieAlgThread	*gAlgorithm ;	//	THE ALGORITHM TO RENDER

int		 gDebug = FALSE ;

UGenCon	*gRELookAhead	= NULL ;
long	 gLogAmount		= 0L ;

/*
Dictionary:	DDPieApplyAlgorithm
	Fields:	Name		~AlgObj~			Type	long
	Fields:	Name		~OpCode~			Type	long
	Fields:	Name		~SrcRect~			Type	TinyInt		Length	16
	Fields:	Name		~DstRect~			Type	TinyInt		Length	16
	Fields:	Name		~MskRect~			Type	TinyInt		Length	16
	Fields:	Name		~Complete~			Type	long
	Fields:	Name		~AlgThread~			Type	long

	Fields:	Name		~ThreadToNotify~	Type	long	NOT YET USED
	Fields:	Name		~SuccessMsg~		Type	long	NOT YET USED
	Fields:	Name		~CancelMsg~			Type	long	NOT YET USED
	Fields:	Name		~ErrorMsg~			Type	long	NOT YET USED
*/


main()
{
//	gRELookAhead = GetTreeObject(_T("RELookAhead"),_T("[GenCons]")) ;
//	gLogAmount	= gRELookAhead->GetLongValue(_T("RELogLevel")) ;

//	UCInterpreter	*thisCI = THIS() ;
//	thisCI->SetProfiling( TRUE ) ;


	return( TRUE ) ;
}


int Advertize()
{
	SessionLogDirect( _T("REPieAlgorithmThread.Advertize: (V1.00)")) ;
	return( TRUE ) ;
}

//	THREADING CODE


CIThread	*gThisThread ;
int			WM_QUIT  = 0x0012 ;
int			WM_TIMER = 0x0113 ;

//	9000 SERIES FOR THE RENDER ENGINE DIALOG THREAD
//	9100 SERIES FOR THE RENDER ENGINE MAIN THREAD
//	9200 SERIES FOR THE RENDER ENGINE BATCH THREAD
//	9300 SERIES FOR THE RENDER ENGINE RENDERING THREAD
//	9400 SERIES FOR THE RENDER ENGINE RESPONSE THREAD
//	9500 SERIES FOR THE RENDER ENGINE SCRIPT THREAD ?

//	UNITS SERIES FOR SENDING DATA
//	TENS SERIES FOR STARTUP AND SHUTDOWN
//	TWENTY SERIES FOR SUSPEND AND RESUME
//	THIRTY TO SIXTY SERIES FOR WORK COMMANDS
//	SEVENTY SERIES FOR COMPLETE MESSAGES
//	EIGHTY SERIES FOR CANCEL MESSAGES
//	NINETY SERIES FOR ERROR MESSAGES

//	THE RENDER ENGINE DIALOG THREAD
int			 REM_DIALOG					= 0x9000 ;
int			 REM_DATAGC					= 0x9001 ;
int			 REM_RE_START				= 0x9010 ;
int			 REM_RE_SHUTDOWN			= 0x9011 ;
int			 REM_RE_HAS_SHUTDOWN		= 0x9012 ;
int			 REM_RE_SUSPEND				= 0x9020 ;
int			 REM_RE_RESUME				= 0x9021 ;

//	THE RENDER ENGINE MAIN THREAD
int			 REM_PRINTERSETUP			= 0x9102 ;
int			 REM_STATUS_GC				= 0x9103 ;
int			 REM_SHUTDOWN				= 0x9111 ;
int			 REM_SUSPEND				= 0x9120 ;
int			 REM_RESUME					= 0x9121 ;
int			 REM_STATUS_REQUEST			= 0x9130 ;
int			 REM_RESERVE_NEXT_BATCH		= 0x9131 ;
int			 REM_GET_PAGE_LIST			= 0x9132 ;
int			 REM_START_BATCH			= 0x9133 ;
int			 REM_RESPONSESCRIPT			= 0x9134 ;
int			 REM_DB_SQL					= 0x9135 ;
int			 REM_ORDER_COMPLETE			= 0x9170 ;
int			 REM_BATCH_COMPLETE			= 0x9171 ;
int			 REM_CANCEL_BATCH			= 0x9180 ;


//	THE RENDER ENGINE BATCH THREAD
int			 REM_BATCH_PRINTERSETUP		= 0x9202 ;
int			 REM_BATCH_STATUS_GC		= 0x9203 ;
int			 REM_BATCH_BATCH_GC			= 0x9204 ;
int			 REM_BATCH_START_RENDER		= 0x9205 ;
int			 REM_BATCH_SHUTDOWN			= 0x9211 ;
int			 REM_BATCH_SUSPEND			= 0x9220 ;
int			 REM_BATCH_RESUME			= 0x9221 ;

int			 REM_BATCH_STATUS_REQ		= 0x9230 ;
int			 REM_BATCH_PARSE_JOB		= 0x9234 ;
int			 REM_BATCH_PRGRM_JOB		= 0x9235 ;
int			 REM_BATCH_RENDER_JOB		= 0x9236 ;

int			 REM_BATCH_ORDERCOMP		= 0x9250 ;
int			 REM_BATCH_BATCHCOMP		= 0x9251 ;
int			 REM_SCRIPT_COMPLETE		= 0x9252 ;

int			 REM_BATCH_CANCEL_BATCH		= 0x9260 ;
int			 REM_BATCH_CANCEL_ORDER		= 0x9261 ;
int			 REM_BATCH_CANCEL_PAGE		= 0x9262 ;

int			 REM_BATCH_RNDR_SUCCESS		= 0x9270 ;
int			 REM_BATCH_RNDR_ERROR		= 0x9271 ;
int			 REM_BATCH_RNDR_CANCEL		= 0x9272 ;

int			 REM_BATCH_PRINT_SUCCESS	= 0x9280 ;
int			 REM_BATCH_PRINT_ERROR		= 0x9281 ;
int			 REM_BATCH_PRINT_CANCEL		= 0x9282 ;

//	THE RENDER ENGINE PIE THREAD
int			 REM_PIE_SET_PAGE			= 0x9300 ;
int			 REM_PIE_START_RENDER		= 0x9301 ;
int			 REM_PIE_ADVERTIZE			= 0x9302 ;
int			 REM_PIE_STATUS				= 0x9330 ;

//	THE RENDER ENGINE RESPONSE THREAD

//	THE RENDER ENGINE SCRIPT THREAD




int InitInstance(CIThread *ThisThread)
{
	//	START THE THREAD HERE !
//	SessionLogDirect( _T("******\REPieAlgorithmThread.InitInstance: ThisThread: %08lX"), ThisThread ) ;
	gThisThread = ThisThread ;

	gAlgorithm = new REPieAlgThread ;
	if( gAlgorithm )
	{
		gAlgorithm->InitInstance(ThisThread) ;
	}

	return( TRUE ) ;
}

int OnIdle( long Count )
{
	return( Count ) ;
}

int ExitInstance()
{
	//	TBD
	if( gAlgorithm )
	{
		gAlgorithm->ExitInstance() ;
		delete gAlgorithm ;
	}
 
//	SessionLogDirect( _T("******\REPieAlgorithmThread.ExitInstance: ThisThread: %08lX"), gThisThread ) ;
//	PostAThreadMessage( gREBatchThread, gResendMsg, 0L, gPage ) ;
}


//	TBD:	DESIGN DECISION
//
//	SHOULD THIS THREAD STAY AROUND AND WE JUST PASS IN
//	NEW PAGES TO RENDER, OR SHOULD IT COME AND GO ????
//
//
int PreTranslateMessage( UGenCon *pMsg)
{
	if( gAlgorithm )
	{
		int Result = gAlgorithm->PreTranslateMessage( pMsg ) ;
		return( Result ) ;
	}

	long		MessageHandled = FALSE ;
	long		Value ;

	long		Message = pMsg->GetLongValue(_T("Message")) ;
	long		wParam  = pMsg->GetLongValue(_T("wParam"))  ;
	long		lParam  = pMsg->GetLongValue(_T("lParam"))  ;

	switch( Message )
	{
		case		WM_TIMER			:	//	HANDLE TIMER CODE
			break ;

		case		REM_PIE_ADVERTIZE	:	//	ADVERTIZE THIS SCRIPT
//	SessionLogDirect( _T("******\REPieAlgorithmThread.PreTranslateMessage: REM_PIE_ADVERTIZE: ThisThread: %08lX"), gThisThread ) ;
			Advertize() ;
			MessageHandled = TRUE ;
			break ;

		case		REM_PIE_START_RENDER :	//	RENDER THE PAGE
//	SessionLogDirect( _T("******\REPieAlgorithmThread.PreTranslateMessage: REM_PIE_START_RENDER: ThisThread: %08lX"), gThisThread ) ;
			ApplyAlgorithm(lParam) ;
//			PostAThreadMessage( gThisThread, WM_QUIT, 0L, 0L ) ;
			MessageHandled = TRUE ;
			break ;

	}

	return( MessageHandled ) ;
}

int ApplyAlgorithm(UGenCon *AlgGC)
{
	if( gAlgorithm )
	{
		int Result = gAlgorithm->ApplyAlgorithm( AlgGC ) ;
		return( Result ) ;
	}

	long	SrcRect[4] ;
	long	DstRect[4] ;
	long	MskRect[4] ;

	long	OpCode = AlgGC->GetLongValue(_T("OpCode")) ;

//	SessionLogDirect( _T("******\REPieAlgorithmThread.ApplyAlgorithm: OpCode: %ld"), OpCode ) ;

	switch( OpCode )
	{
		case	1029	:	//	REORIENT
			PIEReOrient	*ReOrienter = (PIEReOrient *) AlgGC->GetLongValue( _T("AlgObj")) ;
			AlgGC->GetAttrValue( _T("DstRect"), DstRect ) ;
//			SessionLogDirect( _T("******\REPieAlgorithmThread.ReOrient: DstRect: [%ld, %ld, %ld, %ld]"), 
//								DstRect[0], DstRect[1], DstRect[2], DstRect[3] ) ;
			ReOrienter->DoOp( NULL, DstRect, NULL ) ;
			break ;

		case	1037	:	//	SHARPEN
			PIESharpen	*Sharpener = (PIESharpen *) AlgGC->GetLongValue( _T("AlgObj")) ;
			AlgGC->GetAttrValue( _T("DstRect"), DstRect ) ;
//			SessionLogDirect( _T("******\REPieAlgorithmThread.Sharpen: DstRect: [%ld, %ld, %ld, %ld]"), 
//								DstRect[0], DstRect[1], DstRect[2], DstRect[3] ) ;
			Sharpener->DoOp( NULL, DstRect, NULL ) ;
			break ;

/*		case	9999 :		//	HOLD LOCATION
			AlgGC->GetAttrValue( _T("SrcRect"), SrcRect ) ;
			AlgGC->GetAttrValue( _T("DstRect"), DstRect ) ;
			AlgGC->GetAttrValue( _T("MskRect"), MskRect ) ;
			break ;
*/
	}
	AlgGC->SetLongValue(_T("Complete"), 1L ) ;
	return(TRUE) ;
}



int PostAThreadMessage( CIThread *theThread, long MsgNum, long wParam, long lParam )
{
	int		Result = 0 ;
	int		Count  = 0 ;
	long	LastError = 0L ;
	long	ThreadID = theThread->GetThreadID() ;

//	SessionLogDirect( _T("******\tREPieThread.PostAThreadMessage: Msg: 0x%08lX, wP: %ld, lP: %ld, theThread: 0x%08lX, ThreadID: 0x%08lX"), 
//		MsgNum, wParam, lParam, theThread, ThreadID ) ;

//	DumpCStack(_T("******\tREPIE.PostAThreadMessage:")) ;

	while( Result == 0 )
	{
		Result = theThread->PostThreadMessage( MsgNum, wParam, lParam ) ;
		if( Result == 0 )
		{
			LastError = GetLastError() ;
			SessionLogDirect( _T("******\tREPieThread.PostAThreadMessage(0x%08lX, %ld, %ld): Failed: Thread: 0x%08lX, ThreadID: 0x%08lX, Error: %d"),
					MsgNum, wParam, lParam, theThread, ThreadID, LastError ) ;
			Sleep( 1000 ) ;
		}

		Count++ ;

		if( Count > 5 )
		{
			break ;
		}
	}

	return( Result ) ;
}

//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================
//=============================================================================

//	FOR THIS EXCEPTION HANDLER TO WORK, THERE SHOULD BE A DDTEXT GENCON ON THE
//	DATA TREE DESCRIBING WHERE THE SCRIPT CRASHED.  WE SHOULD OUTPUT THE MESSAGE
//	TO THE SESSION LOG, CLEAN UP THE TREE, AND POST MESSAGES TO THE APPROPRIATE
//	THREADS TO KEEP THEM MOVING.

int ExceptionHandler()
{
	if( gAlgorithm )
	{
		int Result = gAlgorithm->ExceptionHandler() ;
		return( Result ) ;
	}

	SessionLogDirect( _T("******\tREPieThread.ExceptionHandler: Inside: BatchThread: 0x%08lX, Page: 0x%08lX"),
			gREBatchThread, gPage ) ;

	UGenCon *theMsgGC = PluckTreeObject(_T("CRunTimeError"), _T("[GenCons]")) ;
	if( theMsgGC )
	{
		TCHAR	*theMsg = theMsgGC->GetStringValue(_T("Text")) ;
		SessionLogDirect( _T("******\tREPieThread.ExceptionHandler: The Error Message: \"%s\"."),
							theMsg ) ;

		delete theMsgGC ;
	}

	DumpCStack(_T("******REPie.ExceptionHandler")) ;

	if( gREBatchThread )
	{
		PostAThreadMessage( gREBatchThread, REM_BATCH_RNDR_ERROR, 0L, gPage ) ;
		PostAThreadMessage( gThisThread, WM_QUIT, 0L, 0L ) ;
	}
	return( TRUE ) ;
}

int DumpCStack(TCHAR *Where)
{
	UCInterpreter *ThisCInterp = THIS() ;
	TCHAR	*StackText = ThisCInterp->GetStackText() ;
	SessionLogDirect( _T("******\tREPieThread.%s: Stack:\n%s"), Where, StackText ) ;
	free( StackText ) ;
	return( TRUE ) ;
}


