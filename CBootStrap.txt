//	THIS FILE WILL BOOT STRAP THE APPLICATION.

char	*NULL ;
int		 TRUE = 1 ;
int		 FALSE = 0 ;

main()
{
	char	*theDataDict ;
	char	*SymbolDict ;
	char	*KeywordCtrlDict ;
	char	*theParser ;
	char	*treeObject ;
	char	*treeChildList ;
	TCHAR	*DataDictText ;
	TCHAR	*KeywordCtrlText ;
	TCHAR	*ApplName ;
	TCHAR	 StartupScript[275] ;
	TCHAR	 message[64] ;
	TCHAR	 msg[128] ;
	TCHAR	*FileText ;
	int		 result ;
	int		 CheckLibFirst = 1 ;


//	ResetApp() ;		//	RESET THE APPLICATION TO NOTHING.

	//	CREATE THE TEMPORARY KEYWORD LIST
	SymbolDict = AddDDSymbol() ;

	AddDDText() ;
	AddDDPath() ;
	AddDD2Longs() ;
	AddDDFindInFile() ;

	theDataDict = AddDDKeyword() ;

	if( theDataDict )
	{
		CreateKeywords( theDataDict ) ;

		//	READ IN THE REAL KEYWORD LIST

		//	GET THE NAME OF THE APPLICATION.TXT FILE
		ApplName = GetExeName() ;

		strcpy( StartupScript, ApplName ) ;
		strcat( StartupScript, ".txt" ) ;

		FileText = GetFile( StartupScript ) ;

		if( FileText == NULL )
		{
			MessageBox( "Cannot find Startup Script.", "MB_OK" ) ;
			return ;
		}
		else
		{
			free( FileText ) ;
		}

		theParser = NewKPLParser() ;
		//					UIC		    jobName		JobText	    LibFirst    IsJob   AlreadyUnicode
		result = KPLParse( theParser, StartupScript, NULL,   CheckLibFirst, FALSE,    FALSE ) ;

		if( result )
		{
			RemoveUserKeywords() ;
		}
		else
		{
			MessageBox( "Keyword parse failed.", "MB_OK" ) ;
			treeObject = PluckTreeObject( GetName(theParser), "[UserData Jobs]") ;
			if( treeObject ) { treeObject = Delete(treeObject) ; }
			theParser = Delete( theParser ) ;
			return ;
		}
	}
	else
	{
		MessageBox( "Could not create the keyword dictionary.", "MB_OK" ) ;
	}

	treeObject = PluckTreeObject( GetName(theParser), "[UserData Jobs]") ;
	if( treeObject ) { treeObject = Delete(treeObject) ; }
	theParser  = Delete(theParser);

	UDataDict *aDD = AddDDThread() ;
	CreateThreadBranch(aDD) ;

	aDD = AddDDCInterp() ;
	SetCInterpLogValue(aDD) ;
	CreateDDDebugScript() ;
}


RemoveUserKeywords()
{
	char *userKWGC ;
	char *masterObj ;
	char *masterList ;

	masterObj	= GetTreeObject( "GENCONS", "[]" ) ;
	userKWGC	= GetTreeObject( "USERKEYWORDS", "[GENCONS]" ) ;
	
	if( userKWGC )
	{
		if( masterObj )
		{
			masterList = GetChildren( masterObj ) ;
			RemoveItem( masterList, userKWGC ) ;
			Delete(userKWGC) ;
		}
	}
}


AddDDKeyword()
{
	char	*theDataDict ;
	TCHAR	*DataDictText ;

	DataDictText = "IsMajor				SHORT	0	0	0	0	0\
					HasMinors			SHORT	0	0	0	0	0\
					ControlType			SHORT	0	0	0	0	0\
					IsOutputDev			SHORT	0	0	0	0	0\
					DefaultID			LONG	0	0	0	0	0\
					ArgTypes			STRING	32	0	0	0	0\
					DataDict			STRING	32	0	0	0	0\
					NoSaveToJob			LONG	0	0	0	0	0\
					NotUndoable			LONG	0	0	0	0	0\
					NotCopyable			LONG	0	0	0	0	0\
					NotSetupable		LONG	0	0	0	0	0\
					SaveToPattern		LONG	0	0	0	0	0\
					IsTextKW			LONG	0	0	0	0	0\
					IsImageKW			LONG	0	0	0	0	0\
					SaveToCompositeJob	LONG	0	0	0	0	0\
					NoSaveToCompositeLayout	LONG	0	0	0	0	0\
					MaxArgs				LONG	0	0	0	0	0\
					MinArgs				LONG	0	0	0	0	0\
					FieldName			STRING	32	0	0	0	0" ;

	theDataDict = CreateDataDict( DataDictText, 0 ) ;

	if( theDataDict )
	{
		SetName( theDataDict, "DDKeyword" ) ;
		AddDataDictToApp( theDataDict ) ;
	}
	return( theDataDict ) ;
}

AddDDSymbol()
{
	char	*theSymbolDict ;
	TCHAR	*SymbolDictText ;

	SymbolDictText =	"Value		STRING	256	0	0	0	0" ;

	theSymbolDict = CreateDataDict( SymbolDictText, 0 ) ;
	if( theSymbolDict )
	{
		SetName( theSymbolDict, "DDSymbol" ) ;
		AddDataDictToApp( theSymbolDict ) ;
	}

	return( theSymbolDict ) ;
}

AddDDPath()
{
	char	*theSymbolDict ;
	TCHAR	*SymbolDictText ;

	SymbolDictText =	"Path		STRING	256	0	0	0	0" ;

	theSymbolDict = CreateDataDict( SymbolDictText, 0 ) ;
	if( theSymbolDict )
	{
		SetName( theSymbolDict, "DDPath" ) ;
		AddDataDictToApp( theSymbolDict ) ;
	}

	return( theSymbolDict ) ;
}

AddDD2Longs()
{
	char	*theDataDict ;
	TCHAR	*DataDictText ;

	DataDictText = "Long1			Long	0	0	0	0	0\
					Long2			Long	0	0	0	0	0" ;

	theDataDict = CreateDataDict( DataDictText, 0 ) ;

	if( theDataDict )
	{
		SetName( theDataDict, "DD2Longs" ) ;
		AddDataDictToApp( theDataDict ) ;
	}
	return( theDataDict ) ;
}

AddDDFindInFile()
{
	char	*theSymbolDict ;
	TCHAR	*SymbolDictText ;

	SymbolDictText =	"String		text	0	0	0	0	0\
						 Length		long	0	0	0	0	0" ;

	theSymbolDict = CreateDataDict( SymbolDictText, 0 ) ;
	if( theSymbolDict )
	{
		SetName( theSymbolDict, "DDFindInFile" ) ;
		AddDataDictToApp( theSymbolDict ) ;
	}
	return( theSymbolDict ) ;
}


AddDDCInterp()
{
	char	*theDataDict ;
	TCHAR	*DataDictText ;

	DataDictText = "CInterpLogValue	Long	0	0	0	0	10" ;

	theDataDict = CreateDataDict( DataDictText, 0 ) ;

	if( theDataDict )
	{
		SetName( theDataDict, "DDCInterp" ) ;
		AddDataDictToApp( theDataDict ) ;
	}
	return( theDataDict ) ;
}

SetCInterpLogValue(UDataDict *aDD)
{
	UGenCon	*CInterpLogGC = new UGenCon(aDD) ;
	CInterpLogGC->SetName("CInterpLogValue") ;
	CInterpLogGC->SetLongValue( _T("CInterpLogValue"), 0L ) ;
	HangTreeObject( CInterpLogGC, "[GenCons]" ) ;
}

AddDDText()
{
	char	*theSymbolDict ;
	TCHAR	*SymbolDictText ;

	SymbolDictText =	"Text		text	0	0	0	0	0" ;

	theSymbolDict = CreateDataDict( SymbolDictText, 0 ) ;
	if( theSymbolDict )
	{
		SetName( theSymbolDict, "DDText" ) ;
		AddDataDictToApp( theSymbolDict ) ;
	}
	return( theSymbolDict ) ;
}

AddSymbol( TCHAR *name, TCHAR *value, char *theDataDict )
{
	char	*aGC ;
	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, name ) ;
	SetAttrValue( aGC, "Value", value ) ;
	HangTreeObject( aGC, "[SYMBOLS]" ) ;
}


CreateKeywords( char *theDataDict )
{
	char	*aGC ;
	TCHAR	*IsMajorText = "IsMajor" ;
	TCHAR	*HasMinorsText = "HasMinors" ;
	TCHAR	*ControlTypeText = "ControlType" ;
	TCHAR	*DefaultIDText = "DefaultID" ;
	TCHAR	*DataDictText = "DataDict" ;
	TCHAR	*ArgTypesText = "ArgTypes" ;
	TCHAR	*FieldNameText = "FieldName" ;
	TCHAR	*Branch = "[GENCONS USERKEYWORDS]" ;
	TCHAR	*One = "1" ;
	TCHAR	*Zero = "0" ;
	TCHAR	*Questions = "???" ;
	TCHAR	 message[64] ;
	TCHAR	 msg[128] ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Contains:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, "4" ) ;

	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Define:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, One ) ;
	SetAttrValue(aGC, ControlTypeText, "2" ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Dict:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, One ) ;
	SetAttrValue(aGC, ControlTypeText, One ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Dictionary:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, One ) ;
	SetAttrValue(aGC, ControlTypeText, One ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "EndContains:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, "5" ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Fields:" ) ;
	SetAttrValue(aGC, IsMajorText, Zero ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, "3" ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Hang:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, "7" ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "INCLUDE:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, Zero ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDText" ) ;
	SetAttrValue(aGC, ArgTypesText, "S" ) ;
	SetAttrValue(aGC, FieldNameText, "Text" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Menu:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, "8" ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "Set:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, Zero ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, "I" ) ;
	SetAttrValue(aGC, FieldNameText, "Text" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "StringList:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, "9" ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "TreeBranch:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, "6" ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDSymbol" ) ;
	SetAttrValue(aGC, ArgTypesText, Questions ) ;
	SetAttrValue(aGC, FieldNameText, "" ) ;
	HangTreeObject( aGC, Branch ) ;

	aGC = CreateGenCon( theDataDict ) ;
	SetName( aGC, "USE:" ) ;
	SetAttrValue(aGC, IsMajorText, One ) ;
	SetAttrValue(aGC, HasMinorsText, Zero ) ;
	SetAttrValue(aGC, ControlTypeText, Zero ) ;
	SetAttrValue(aGC, DefaultIDText, Zero ) ;
	SetAttrValue(aGC, DataDictText, "DDText" ) ;
	SetAttrValue(aGC, ArgTypesText, "S" ) ;
	SetAttrValue(aGC, FieldNameText, "Text" ) ;
	HangTreeObject( aGC, Branch ) ;

}

AddDDThread()
{
	char	*theSymbolDict ;
	TCHAR	*SymbolDictText ;

	SymbolDictText =	"ThreadHandle	Long	0	0	0	0	0\
						 ThreadID		Long	0	0	0	0	0\
						 DocumentName	Text	0	0	0	0	0\
						 ClassName		Text	0	0	0	0	0\
						 Status			Text	0	0	0	0	0" ;

	theSymbolDict = CreateDataDict( SymbolDictText, 0 ) ;
	if( theSymbolDict )
	{
		SetName( theSymbolDict, "DDThread" ) ;
		AddDataDictToApp( theSymbolDict ) ;
	}

	return( theSymbolDict ) ;
}

CreateThreadBranch(UDataDict *theDD )
{
	UGenCon	*aGC = new UGenCon( theDD ) ;
	aGC->SetName( "Threads" ) ;
	HangTreeObject( aGC, "[GenCons]" ) ;
}


void CreateDDDebugScript()
{
								//ATTRIBNAME	        TYPE   LEN PRC SCL LOW HIGH
	TCHAR *DataDictText = _T("\
									CInterpreter		Long	0	0	0	0	0\
									CInterpThread		Long	0	0	0	0	0\
									DebuggerThread		Long	0	0	0	0	0\
							") ;

	UDataDict *aDD = CreateDataDict( DataDictText, 0 ) ;
	if( aDD )
	{
		aDD->SetName(_T("DDDebugScript")) ;
		AddDataDictToApp( aDD ) ;
	}
}
