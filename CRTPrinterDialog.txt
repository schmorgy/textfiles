DialogWidth = 400;
DialogHeight = 410;
TabWidth = <DialogWidth> - 20;
TabHeight = <DialogHeight> - 50;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 150;
CheckBoxHeight = 20;
BigEditTextWidth = 115;
ComboBoxWidth = 120;
ComboBoxHeight = 150;

Gap = 20;

// use EditTextWidth when after a static text on a line
MediumEditTextWidth = <TabWidth> - <StaticTextWidth> - <Gap> - <LeftMargin>;

// use LargeEditTextWidth when the only control on a line
LargeEditTextWidth = <TabWidth> - <LeftMargin>;
EditTextWidth = 80;
EditTextHeight = 20;
FileEditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 200;
SmallButtonWidth = 80;
ButtonHeight = 20;
VerticalSeparation = 30;
FileVerticalSeparation = 60;
AnnotationVerticalSeparation = 50;
AnnotationVerticalSeparation2 = 45;
InitialVerticalPosition = 50;
AnnotationEditTextHeight = 40;

if ( !Tree( Name,LFCRTQueuesLists,Location,~[STRINGS]~,Exists ) )
{
	StringList: Name LFCRTQueuesLists
		Fields:	String	~Default~
	Hang:	LFCRTQueuesLists	~[STRINGS]~ ;

	StringList: Name CRTQueuesLists
		Fields:	String	~Default~
	Hang:	CRTQueuesLists	~[STRINGS]~ ;

	StringList: Name KPDMQueuesLists
		Fields:	String	~Default~
	Hang:	KPDMQueuesLists	~[STRINGS]~ ;

	StringList: Name ~CRTResolutionChoices~
		Fields: String  ~Default~
	Hang:	CRTResolutionChoices	~[STRINGS]~ ;

	StringList: Name ~CRTPrinterChoices~
		Fields: String  ~Default~
	Hang:	CRTPrinterChoices	~[STRINGS]~ ;

	StringList: Name ~CRTModelChoices~
		Fields:	String	~Default~
	 Hang:	CRTModelChoices	~[STRINGS]~ ;
}
 
Define: CRTPrinterDialog Using DDWinDef
fields: Position 430 50 <DialogWidth> <DialogHeight> // if the name is ever changed, you must also change UGenDlgBar::GetWindowPosition
		Title ~Output to CRT Printer~
		AutoPosition 1
		TypeName ~DialogBar~
		IActionsText ~[NULL]~
		Purpose ~CRTPrinter~
		OActionsText ~[PerformOActions]~
		HActionsText ACTION SHOWHELPPAGE ( KPISHelpFile "CRT_Intro.htm" ) ;

Contains:
{
	Define: OKButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Activate~
			Position <DialogWidth> - 100 , <DialogHeight> - 30,  <SmallButtonWidth> , <ButtonHeight>
			Tooltip ~Close window and save values.  Make the CRT Printer the active device.~

	Define: CloseButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Close~
			Position <DialogWidth> - 190  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			Tooltip ~Close window and save values.  Don't change the active device.~

 
	Define: PreviewButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Preview~
			Position <DialogWidth> - 280  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			Tooltip ~Preview the image.  Useful after you change the resolution if this is the active device.~

	Define: SaveSpecButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Save Output Spec~
			Position <DialogWidth> - 390  ,<DialogHeight> - 30, <SmallButtonWidth> + 20  <ButtonHeight>
			Tooltip ~Save an output specification in text format.~

	Define: CRTPrinterOptions Using DDWinCtrlDef
	fields:	Position 10 10 <TabWidth>  <TabHeight>
			TypeName TabCtrl
			Text ~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~


	Contains:
	{

		Define: Tab0 Using DDWinCtrlDef
		fields: Text ~Setup~
				TypeName Tab
				Tooltip ~Setup~

		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: ModelStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Model:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>;

			Query2 = ~Select Distinct PrinterModel From PrinterRes Where PrinterModel in ('Kodak CRT', 'Kodak LFCRT', 'KPDM', 'KPDM II')~;
			Define: ModelComboBox Using DDWinCtrlDef
			fields: TypeName SComboBox  
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos> ,120 ,150 
					GenConField ~Model:~
					Tooltip  ~Select a model~;


			ypos = <ypos> + <VerticalSeparation>;
			Define: PrinterNameStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Printer Name:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>;

			Query = ~Select PrinterName From Printers Where PrinterModel = '%s'~;
			Define: PrinterNameComboBox Using DDWinCtrlDef
			fields: TypeName SComboBox  
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos> ,100 ,150 
					GenConField ~PrinterName:~
					Tooltip ~ Select a printer~;


			ypos = <ypos> + <VerticalSeparation>;
			Define: ResolutionStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Resolution:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>;

			Query = ~Select Resolution From PrinterRes Where PrinterName = '%s' And PrinterModel = '%s'~;
			Define: ResolutionComboBox Using DDWinCtrlDef AsSymbol ResolutionComboBox
			fields: TypeName SComboBox  
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos> ,100 ,150 
					GenConField ~Resolution:~
					Tooltip ~ Select a resolution~;

			Define: ResolutionUnitsStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~pixels per inch~
					Position ResolutionComboBox(GetRight,Position)+ 10, <ypos>,  <StaticTextWidth>,<StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;

			Define: ResolutionStaticText1 Using DDWinCtrlDef AsSymbol ResolutionStaticText1
			fields:	TypeName StaticText
					GenConField ~Resolution:~
					DecimalPlaces 2
					Position ResolutionComboBox(GetLeft,Position), <ypos>, <StaticTextWidth>,<StaticTextHeight>

			Define: ResolutionUnitsStaticText1 Using DDWinCtrlDef AsSymbol ResolutionStaticText1
			fields:	TypeName StaticText
					Text ~~
					Position ResolutionComboBox(GetRight,Position)+ 10, <ypos>, <StaticTextWidth>,<StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ResolutionOverrideMsgStaticText Using DDWinCtrlDef AsSymbol  ResolutionOverrideMsgStaticText
			fields:	TypeName StaticText
					Position <LeftMargin>, <ypos>,  350 ,  <StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperWidthStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Paper Width:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>;


			Define: PaperWidthEditText Using DDWinCtrlDef AsSymbol PaperWidthEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>, <BigEditTextWidth>,<EditTextHeight>
					GenConField ~PaperWidth:~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip  ~Set the paper width~;

			Define: ResolutionUnitsStaticText2 Using DDWinCtrlDef AsSymbol ResolutionStaticText1
			fields:	TypeName StaticText
					Text ~~
					Position PaperWidthEditText(GetRight,Position)+ 10, <ypos>, <StaticTextWidth>,<StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperAdvanceStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Paper Advance:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: PaperAdvanceEditText Using DDWinCtrlDef AsSymbol PaperAdvanceEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <BigEditTextWidth>,<EditTextHeight>
					GenConField ~PaperAdvance:~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Set the paper advance~;

			Define: ResolutionUnitsStaticText3 Using DDWinCtrlDef AsSymbol ResolutionStaticText1
			fields:	TypeName StaticText
					Text ~~
					Position PaperAdvanceEditText(GetRight,Position)+ 10, <ypos>, <StaticTextWidth>,<StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CopiesStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Copies:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CopiesEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConField ~Copies:~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter the number of copies to print~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: BorderlessCheckBox Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConField ~Borderless:~
					Text ~Borderless (Spillover)~
					Position $LeftMargin <ypos> 180 15
					IsTabStop 1
					Tooltip ~Make a borderless print~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: QueueNameStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Queue Name:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight> ;

			Query = ~Select QueueName From QueueDefinition Where PrinterModel In ('KPDM II','KPDM','Kodak CRT','Kodak LFCRT') Order By QueueName~;

			Define: QueueNameComboBox Using DDWinCtrlDef
			fields:	TypeName SComboBox
					GenConField ~QueueName:~
					Position <LeftMargin>  + <StaticTextWidth> + <Gap>, <ypos>,  <MediumEditTextWidth>, 150
					Tooltip ~Select a queue name~;
		}

		
		Define: Tab0a Using DDWinCtrlDef
		fields: Text ~File~
				TypeName Tab
				Tooltip ~Set Punch Options~

		Contains: InListOrder
		{
					ypos = <InitialVerticalPosition>;
			Define: SaveImageButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Output File...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText 	ACTIONS (
									ExecFile(FileSave.txt)
									Exec(FileSave(CRTPrinterDialog, SaveImageButton, ~SaveName:~, ~SaveFileType:~, SaveImageEditText);)
									)
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~SaveName:~
					Tooltip ~Select a directory and file name~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: SaveImageEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~SaveName:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: FileTypeStaticText Using DDWinCtrlDef AsSymbol FileTypeStaticText
			fields:	TypeName StaticText
					Text ~File Type:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: FileTypeComboBox Using DDWinCtrlDef
			fields: TypeName SComboBox  
					Position FileTypeStaticText(GetRight,Position), <ypos> ,<ComboBoxWidth> ,<ComboBoxHeight> 
					IActionsText ACTIONS ( GetList(SaveImageFileTypeChoices) Get
									ExecFile(UpdateFileType.txt)
									Exec(UpdateFileType(CRTPrinterDialog, FileTypeComboBox , ~SaveName:~ , ~~);) )

					DActionsText ACTIONS (
								Save
								ExecFile(UpdateFileType.txt)
								Exec(UpdateFileType(CRTPrinterDialog, FileTypeComboBox , ~SaveName:~ , SaveImageEditText);)
								)
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~SaveFileType:~
					Tooltip ~Select a file type~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CompressionQualityStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Compression Quality:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CompressionQualityEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> , <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~CompressionQuality:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter quality value between 0 and 100.   0 = not used.   1 = extremely low quality (very high compression).  100 = very high quality ( low compression). ~;
		}

		Define: Tab1 Using DDWinCtrlDef
		fields: Text ~Punch~
				TypeName Tab
				Tooltip ~Set Punch Options~

		Contains: InListOrder
		{

			ypos = <InitialVerticalPosition>;
			Define: MultiPunchPrompt Using DDWinCtrlDef	AsSymbol MultiPunchPrompt
			fields:	TypeName StaticText
					Position <LeftMargin>, <ypos>, <StaticTextWidth>, <StaticTextHeight>
					Text	~Multi Punch Code~

			Define: MultiPunchField Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConField ~MultiPunch:~
					Position MultiPunchPrompt(GetRight,Position) + $Gap, <ypos>, <EditTextWidth>, <EditTextHeight>
					IsTabStop 1
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Specify a multi punch code for package cutters~
		}

		Define: Tab2 Using DDWinCtrlDef
		fields: Text ~Positioning~
				TypeName Tab
				Tooltip ~Positioning~
		Contains: InListOrder
		{
			ypos = <ypos> + <VerticalSeparation>;
			Define: RotatedRadioButton0 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 20 , <ypos> ,50 ,20 
					GenConField ~Rotated:~
					RadioTrueValue ~0~
 					Text ~None~
					Tooltip ~Do not rotate the image~;

			Define: RotatedRadioButton90 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 100 , <ypos> ,60 ,20 
					GenConField ~Rotated:~
					RadioTrueValue ~90~
 					Text ~90~
					Tooltip ~Rotate the image 90 degrees clockwise~;

			Define: RotatedRadioButton180 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 180 , <ypos> ,60 ,20 
					GenConField ~Rotated:~
					RadioTrueValue ~180~
 					Text ~180~
					Tooltip ~Rotate the image 180 degrees~;

			Define: RotatedRadioButton270 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 260 , <ypos> ,60 ,20 
					GenConField ~Rotated:~
					RadioTrueValue ~270~
					Text ~270~
					Tooltip ~Rotate the image 270 degrees clockwise~;

// attempt to put the group box last to allow tooltip messages to come in
// for the radio controls.  But it didn't work (PDF 9/3/98)
			apos = <ypos>  - 20;
			Define: ZZRotatedGroupBox Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Rotation~
					Tooltip ~Choose an angle of rotation~
					Position $LeftMargin <apos> 360  50;			
			}


		Define: Tab3 Using DDWinCtrlDef
		fields: Text ~Adjustments~
				TypeName Tab
				Tooltip ~Use Color Matrix or Gamma to adjust image~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: ColorMatrixButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Color Matrix...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					GenConField ~ColorMat:~
					Tooltip ~Select a color matrix file~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ColorMatrixEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConField ~ColorMat:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit Color Matrix path~;

			ypos = <ypos> + <FileVerticalSeparation>;
			Define: GammaButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Gamma...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					GenConField ~Gamma:~
					Tooltip ~Select a gamma file~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: GammaEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConField ~Gamma:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit gamma profile path~;
		}

		Define: Tab4 Using DDWinCtrlDef
		fields: Text ~Tables~
				TypeName Tab
				Tooltip ~Device Tables~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: PaperCalTableButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Paper Pack...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					GenConField ~PaperCalTable:~
					Tooltip ~Select a paper pack to override the one in the printer queue (<FileName>.pap)~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperCalTableEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConField ~PaperCalTable:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit paper pack file path to override the one specified in the printer queue~;

			ypos = <ypos> + <FileVerticalSeparation>;
			Define: LUTButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Print LUT...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					GenConField ~Lookup:~
					Tooltip ~Select a print LUT (<FileName>.prt) to override the one specified in the printer queue~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: LUTEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConField ~Lookup:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit print LUT path to override the one specified in the printer queue~;

		}

		Define: Tab5 Using DDWinCtrlDef
		fields: Text ~BackPrint~
				TypeName Tab
				Tooltip ~Backprint~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: Annotation1StaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Annotation 1~
					Position <LeftMargin>,  <ypos>,  <StaticTextWidth>,<StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;
			Define: Annotation1EditText Using DDWinCtrlDef
			fields:	TypeName MLEditText
					GenConField ~Annotation1:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>
					InsertOn	~T~	
					NoHorizontalScroll 1
					Tooltip ~Edit backprinting field~;

			ypos = <ypos> + <AnnotationVerticalSeparation>;
			Define: Annotation1ResultText Using DDWinCtrlDef
			fields:	TypeName StaticText
					GenConField ~Annotation1Result:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>;

			ypos = <ypos> + <AnnotationVerticalSeparation2>;
			Define: Annotation2StaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Annotation 2~
					Position <LeftMargin>,  <ypos>,  <StaticTextWidth>,<StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;
			Define: Annotation2EditText Using DDWinCtrlDef
			fields:	TypeName MLEditText
					GenConField ~Annotation2:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>
					InsertOn	~T~	
					NoHorizontalScroll 1
					Tooltip ~Edit backprinting field~;

			ypos = <ypos> + <AnnotationVerticalSeparation>;
			Define: Annotation2ResultText Using DDWinCtrlDef
			fields:	TypeName StaticText
					GenConField ~Annotation2Result:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<AnnotationEditTextHeight>;

			ypos = <ypos> + <AnnotationVerticalSeparation2>;
			Define: RefreshAnnotationButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Refresh~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					Tooltip ~Refresh the Annotation text~;

//			This is required and is used to recompute values to Mask's number of digits
//			Don't delete this; if you do Undo will stop working, and the doc will get dirty when it shouldn't
				Define: DummyEditText Using DDWinCtrlDef
				fields:	TypeName MaskedEditText
						Position (-1000) (-1000)  100  100
						GenConField ~Dummy~
						Mask		 ~##################~
						AllowedChars ~-.~
						PromptChar	 ~ ~		
		}
	}
}

Hang: CRTPrinterDialog ~UI Dialogs~
