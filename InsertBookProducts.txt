IncludeClass( BookProduct);

if ( !DictionaryExists( BooksData ) )
{

	Dictionary: BooksData
		Fields:	Name TemplateName		Type	text
		Fields:	Name Banner				Type	text
		Fields:	Name Bleed				Type	text
		Fields:	Name Inkname			Type	text
}


if ( !DictionaryExists( ProductsData ) )
{

	Dictionary: ProductsData
		Fields:	Name ID		Type	text
}

Class(	AddBookClass,Extends,BaseClass );
Class(	AddBookProduct,Extends,BookProduct );



NUMERIC AddBookClass::AddBookProduct3(&i,PackageID, Description, first, last)
{ //calendars
//		debug(1);

	GenCon( BooksData,New,BooksData );
	BooksData(SetValue,TemplateName,~~);
	BooksData(SetValue,Banner,~~);
	BooksData(SetValue,InkName,~~);
	BooksData(SetValue,Bleed,~~);

	if (Defined(ProductsList))
	{ 
		ForgetPrivate(ProductsList);
	}
	GenCon( ProductsList,New,DDSymbol);
	Private(ProductsList);

	j = 0;
	while (<++j> < 26)
	{
		AddPage(<++i>,~<first>~);
	}
	AddPage(<++i>,~<last>~);

	Category = QualexSampleBooks;
	DeviceType = ~~;
	return fBookProd.AddBook(  ~<PackageID>~,~<Description>~,~<Category>~, BooksData, ~<DeviceType>~,ProductsList  );
}
NUMERIC AddBookClass::AddBookProduct2(&i, PackageID, Description, outside, inside)
{ //folded cards
//		debug(1);

	GenCon( BooksData,New,BooksData );
	BooksData(SetValue,TemplateName,~~);
	BooksData(SetValue,Banner,~~);
	BooksData(SetValue,InkName,~~);
	BooksData(SetValue,Bleed,~~);

	if (Defined(ProductsList))
	{ 
		ForgetPrivate(ProductsList);
	}
	GenCon( ProductsList,New,DDSymbol);
	Private(ProductsList);

	AddPage(<++i>, ~<outside>~);
	AddPage(<++i>, ~<inside>~);

	Category = QualexSampleBooks;
	DeviceType = ~~;
//	debug(1);
	return fBookProd.AddBook(  ~<PackageID>~,~<Description>~,~<Category>~, BooksData, ~<DeviceType>~,ProductsList  );

}

NUMERIC AddBookClass::AddBookProduct1(&i, PackageID, Description, first, even, odd, last, count)
{ //books
//		debug(1);

	GenCon( BooksData,New,BooksData );
	BooksData(SetValue,TemplateName,~~);
	BooksData(SetValue,Banner,~~);
	BooksData(SetValue,InkName,~~);
	BooksData(SetValue,Bleed,~~);

	if (Defined(ProductsList))
	{ 
		ForgetPrivate(ProductsList);
	}
	GenCon( ProductsList,New,DDSymbol);
	Private(ProductsList);

	AddPage(<++i>, ~<first>~);

	j = 0;
	while (<++j> < <count>)
	{
		AddPage(<++i>,~<even>~);
		AddPage(<++i>,~<odd>~);
	}

	AddPage(<++i>, ~<last>~);
	Category = QualexSampleBooks;
	DeviceType = ~~;
//	debug(1);
	return fBookProd.AddBook(  ~<PackageID>~,~<Description>~,~<Category>~, BooksData, ~<DeviceType>~,ProductsList  );

}

NUMERIC AddBookClass::AddPage(i, textfilename)
{
	GenCon( ProductsData<i>,New,ProductsData );
	Private(ProductsData<i>);
	ProductsData<i>(SetValue,ID,~<textfilename>~);
	ProductsList(InsertBack,ProductsData<i>);
	return TRUE;
}


NUMERIC AddBookClass::AddBookClass()
{
	AddBookProduct( New,fBookProd );
	Private( fBookProd );
	return TRUE;

}

NUMERIC AddBookClass::AddBookProducts()
{
	i = 0;
	ReturnOnFailure(AddBookProduct1(i,~7x5WSCBk~,~7x5WSCBk~,~7x5_first_window~,~7x5_even~,~7x5_odd~,~7x5_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~11x8HCLinBk~,~11x8HCLinBk~,      ~11x8_first~,           ~11x8_even~,~11x8_odd~,~11x8_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~11x8WHCLinBk~,~11x8WHCLinBk~,    ~11x8_first_window~,    ~11x8_even~,~11x8_odd~,~11x8_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~11x8EcoHCLinBk~,~11x8EcoHCLinBk~,~11x8_eco_first_window~,~11x8_even~,~11x8_odd~,~11x8_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~8x6HCLinBk~,~8x6HCLinBk~,      ~8x6_first~,            ~8x6_even~,~8x6_odd~,~8x6_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~8x6WHCLinBk~,~8x6WHCLinBk~,    ~8x6_first_window~,     ~8x6_even~,~8x6_odd~,~8x6_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~8x6EcoHCLinBk~,~8x6EcoHCLinBk~,~8x6_eco_first_window~, ~8x6_even~,~8x6_odd~,~8x6_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~8x6SCLthrBk~,~8x6SCLthrBk~,    ~8x6_soft_first~,       ~8x6_soft_even~,~8x6_soft_odd~,~8x6_soft_last~,11));
	ReturnOnFailure(AddBookProduct1(i,~8x6WSCFxBk~,~8x6WSCFxBk~,      ~8x6_soft_first_window~,~8x6_soft_even~,~8x6_soft_odd~,~8x6_soft_last~,11));
	ReturnOnFailure(AddBookProduct3(i, ~8x11CustClndr~,~8x11CustClndr~,~8x11_calendar~,~8x11_calendar_last~));
	ReturnOnFailure(AddBookProduct3(i, ~9x12GlsClndr~,~9x12GlsClndr~,  ~9x12_calendar~,~9x12_calendar_last~));
	ReturnOnFailure(AddBookProduct2(i, ~5x7CustCd5pkLandscape~,~5x7CustCard5pkLandscape~,~foldedcard_LO~,~foldedcard_LI~));
	ReturnOnFailure(AddBookProduct2(i, ~5x7CustCd5pkPortrait~, ~5x7CustCard5pkPortrait~, ~foldedcard_PO~,~foldedcard_PI~));
	return TRUE;
}

NUMERIC AddBookProduct::AddBook(ProductID,ProductDescription,Category, &Container, DeviceType,&SelectedItems)
{
	Container(GetValue,TemplateName,TemplateName);
	Container(GetValue,Banner,Banner);
	Container(GetValue,InkName,InkName);
	Container(GetValue,Bleed,Bleed);
	Bleed = Numeric(~<Bleed>~);

	Query = ~Select * from Products Where ID = '<ProductID>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		Log( Session, ~Query Failed: <Query>. <theErr>~ );
		return FALSE;
	}

	if ( List( GetFirst,Product ) )
	{
		Log( Session, ~A product already exists with ID = <ProductID>~ );
		return FALSE;
	}

	NextSequence = CalcNextSequenceForCategory( Products,Category,~<Category>~,Sequence,1 );

	PreviewIconPath = ~<$App.ShareDirectory>\Images\BookIcon.tif~;

	theSQL = ~Insert Into Products(ID,LayoutName,Package,Category,ProductType,Sequence,PreviewPath,Book,DeviceType)
							VALUES('<ProductID>','<ProductDescription>',1,'<Category>','Digital',<NextSequence>,'<PreviewIconPath>',1,'<DeviceType>')~;

	if ( !fConnection( CMD,~<theSQL>~ ) )
	{
		fConnection( GetErrorDescription,theErr );
		Log( Session, ~Insert book product into products failed.  <theSQL>. Error = <theErr>~ );
		return FALSE;
	}

	if (!IsNull(~<DeviceType>~))
	{
		theSQL = ~Insert Into BookProductsFor<DeviceType> (ProductID,TemplateName,Banner,Inkname,Bleed)
								VALUES('<ProductID>','<TemplateName>','<Banner>','<Inkname>',<Bleed>)~;

		if ( !fConnection( CMD,~<theSQL>~ ) )
		{
			fConnection( GetErrorDescription,theErr );
			Log( Session, ~Insert book product into BookProducts failed.  <theSQL>. Error = <theErr>~ );
			return FALSE;
		}
	}
	if (AddPackageData(~<ProductID>~,SelectedItems))
	{
		// update book products attributes table
		UpdateAttributesTable(~<ProductID>~);	
	}

	return TRUE;

}

NUMERIC AddBookProduct::UpdateAttributesTable( ProductID)
{
	Sequence = -1;
	
	// Update the books attributes table
	i = 1;
	if (!MemberDefined(fMaster))
	{
		return TRUE;
	}
	while (fMaster( GetNext,Child))
	{
		Child(GetValue,Value,Value);
		Child(GetValue,Attribute,Attribute);
	
		// Does the book product attributes table have a record already there?
		Key = STR ( ProductID = '<ProductID>' AND Attribute = '<Attribute>' );
		Cmd = ~Select Count(*) From BookProductAttributes Where <Key>~;
		numRecs = fConnection( RecordCountFor,~<Cmd>~ );
		if (<numRecs> > 0)
		{
			SQLCmd = ~Update BookProductAttributes Set [Value] = '<val>' Where <Key>~;
			if (!fConnection(Cmd, ~<SQLCmd>~))
			{
				fConnection(GetErrorDescription, theErr);
				Log( Session, ~Update book product attributes failed.  Value = <val>. Key = <Key>. Error = <theErr>~ );
				return FALSE;
			}
		}
		else
		{
			if (<Sequence> < 0)
			{
				Sequence = CalcNextSequenceForCategory(BookProductAttributes, ProductID,~<ProductID>~,Sequence,10);
			}
			Fields = STR ( ProductID,Sequence,Attribute,[Value] );
			Values = STR ( '<ProductID>',<Sequence>,'<Attribute>','<Value>' );
			SQLCmd = STR ( Insert Into BookProductAttributes(<Fields>) Values(<Values>) );
			if ( !fConnection( CMD,~<SQLCmd>~ ) )
			{
				fConnection( GetErrorDescription,theErr );
				WaitCursor( End );
				Log( Session, ~Insert into BookProductAttributes failed.  <SQLCmd>. Error = <theErr>~ );
				return FALSE;
			}
			Sequence = <Sequence> + 10;
		}
	}
	return TRUE;
}


// update packages table
NUMERIC AddBookProduct::AddPackageData( PackageID,&ProductsList)
{	

	Count = 0;

	while ( ProductsList( GetNext,Product ) )
	{
		ProductID = ~<$con.Product[ID]>~;
		NextSequence  = CalcNextSequenceForCategory( Packages,PackageID,~<PackageID>~,Sequence,10 );

		theSQL = ~Insert Into Packages(PackageID,ProductID,Sequence,Quantity,TargetNode)
								VALUES('<PackageID>','<ProductID>',<NextSequence>,1,-1)~;

		if (!fConnection(Cmd, ~<theSQL>~))
		{
			fConnection(GetErrorDescription, theErr);
			Log( Session, ~Insert into Packages failed.  <SQLCmd>. Error = <theErr>~ );
			return FALSE;
		}
	}
	return TRUE;
}
