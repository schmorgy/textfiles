

	LeftX = hGap = vGap = 10;

	PromptHeight = 20;		PromptWidth = 60;		
	ValueWidth = 150;
	ButtonWidth = 90;		ButtonHeight = 20;	
	LeftX = $hGap;			CurrentY = $vGap;		


VOID DefineDialog()
{
	if ( !DictionaryExists( DDNetworkMessage ) )
	{
		Dictionary:		DDNetworkMessage
			Fields:		Name Msg			Type Text
			Fields:		Name Domain			Type Text
			Fields:		Name All			Type long
	}

	Define: DlgData Using DDNetworkMessage

	Define: aDialog Using DDWinDef
		Fields:	POSITION				100, 100, 600,600 
				TITLE					~Send a message to other workstations~
				TYPENAME				Dialog 
				STATUSBAR				~1 100~
				WANTSMINIMIZEBOX		TRUE
				OACTIONSTEXT			ACTION EXEC ( CloseDialog(FALSE) )
				HACTIONSTEXT			ACTION SHOWHELPPAGE ( KPISHelpFile "NetworkMessage.htm" ) 

		Contains: INLISTORDER
		{
			Define: MessagePrompt Using DDWinCtrlDef AsSymbol MessagePrompt
				Fields:	TypeName		StaticText
						Text			~Message:~
						FontWeight		600
						RightJustified	1
						Position		$hGap $vGap,$PromptWidth $ButtonHeight

			Define: MessageField Using DDWinCtrlDef AsSymbol MessageField 
				Fields: TypeName		MLEDITTEXT
						GenConField		Msg
						GenConName		THIS
						IActionsText	ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Position		MessagePrompt(GetRight,Position) + $hGap,MessagePrompt(GetTop,Position),500,$PromptHeight*8;

			Define: ClearButton Using DDWinCtrlDef AsSymbol ClearButton
				Fields:	TypeName		Button
						Text			~Clear~
						DActionsText	ACTION EXEC ( OnClearButton() )
						Position		MessagePrompt(GetLeft,Position) MessagePrompt(GetBottom,Position)+$vGap*4,$PromptWidth $ButtonHeight

			Define: DomainPrompt Using DDWinCtrlDef AsSymbol DomainPrompt
				Fields:	TypeName		StaticText
						Text			~Domain:~
						RightJustified	1
						FontWeight		600
						Position		MessagePrompt(GetLeft,Position),MessageField(GetBottom,Position)+$vGap,$PromptWidth ,$PromptHeight

			Define: DomainField Using DDWinCtrlDef AsSymbol DomainField 
				Fields: TypeName		EDITTEXT
						GenConField		Domain
						GenConName		THIS
						ToolTip			Translate( ~Leave blank for the current domain~ )
						IActionsText	ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Position		DomainPrompt(GetRight,Position) + $hGap,DomainPrompt(GetTop,Position),150,$PromptHeight;

			Define: RefreshButton Using DDWinCtrlDef AsSymbol RefreshButton
				Fields:	TypeName		Button
						Text			~Refresh~
						DActionsText	ACTION EXEC ( PopulateServersList() )
						Position		DomainField(GetRight,Position) + $hGap,DomainField(GetTop,Position),70,$PromptHeight;

			Define: ToPrompt Using DDWinCtrlDef AsSymbol ToPrompt
				Fields:	TypeName		StaticText
						Text			~Send To:~
						FontWeight		600
						RightJustified	1
						Position		DomainPrompt(GetLeft,Position),DomainPrompt(GetBottom,Position)+$vGap,$PromptWidth ,$PromptHeight
		
			Define: WorkstationsListBox Using DDWinCtrlDef AsSymbol WorkstationsListBox
				Fields:	POSITION		ToPrompt(GetRight,Position)+$hGap,DomainPrompt(Getbottom,Position)+$vGap,250 ,$PromptHeight * 8
						GENCONNAME		THIS
						GENCONFIELD		~ImagePath~
						AllowMultipleSelection	TRUE
						IACTIONSTEXT	ACTIONS ( Get )
						DACTIONSTEXT	ACTIONS ( Save )
						OACTIONSTEXT	ACTIONS ( Save )
						NoDuplicates	TRUE
						ToolTip			Translate( ~Select users to receive the message~ )
						TYPENAME		ListBox ;

			Define: AllCheckBox Using DDWinCtrlDef AsSymbol AllCheckBox 
				Fields: TypeName		CheckBox
						GenConField		All
						GenConName		THIS
						Text			~&All Workstations~
						IActionsText	ACTIONS ( Get )
						DActionsText	ACTIONS ( Save "Exec(OnAllCheckBox())" )
						OActionsText	ACTIONS ( Save )
						Position		WorkstationsListBox(GetRight,Position) + $hGap,WorkstationsListBox(GetTop,Position),100,$PromptHeight;

			DialogWidth = MessageField(GetRight,Position) + $hGap * 1.5;

			Define: SendButton Using DDWinCtrlDef AsSymbol SendButton
				Fields:	TypeName		Button
						Text			~&Send~
						DActionsText	ACTION EXEC ( OnSend() )
						Position		$DialogWidth/2 - $ButtonWidth - $hGap/2,WorkstationsListBox(GetBottom,Position)+$vGap*3,$ButtonWidth $ButtonHeight

			Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
				Fields:	TypeName		Button
						Text			~&Cancel~
						DActionsText	ACTION EXEC ( CloseDialog() )
						Position		SendButton(GetRight,Position) + $hGap,SendButton(GetTop,Position),$ButtonWidth $ButtonHeight;
		}

	DialogHeight = SendButton(GetBottom,Position) + $vGap + 25;

	aDialog( Set,Position,~20  20  <DialogWidth>  <DialogHeight>~ );

	GenDlg( dlg,Definition,aDialog,Data,DlgData,Document,$Doc.This,New,Temporary );

	Global( dlg,aDialog,DlgData );
}

NUMERIC OnAllCheckBox()
{
	WantAll = MakeNumber( ~<$con.DlgData[All]>~ );

	if ( <WantAll> )
	{
		dlg( ListBox,WorkstationsListBox,SetSel,-1,FALSE );
	}

	return dlg( EnableControls,!<WantAll>,WorkstationsListBox );
}


NUMERIC OnClearButton()
{
	return dlg( SetStrings,Msg,~~ );
}


NUMERIC OnSend()
{
	dlg( GetInput);

	if ( IsNull( ~<$con.DlgData[Msg]>~ ) )
	{
		return Warning( ~You must enter a message you wish to send~ );
	}

	if ( MakeNumber( ~<$con.DlgData[All]>~ ) )
	{
		if ( MessageBox( ~Are you sure you would like to send the message to all workstations?~,YESNO ) != YES )
		{
			return FALSE;
		}

		ShellExecute( Open,~Net~,~Send * "<$con.DlgData[Msg]>"~,~~,SHOWMINNOACTIVE );

		dlg( SetStatus,0,~Message sent to all workstation(s)~ );

		return TRUE;
	}

	if ( !dlg( ListBox,WorkstationsListBox,MakeSelectedStringList,WorkstationList ) )
	{
		return Warning( Translate( ~You must select one or more workstations~ ) );
	}

	if ( WorkstationList( Empty ) )
	{
		return Warning( Translate( ~You must select a workstation to send the message to~ ) );
	}

	Count = WorkstationList( Num );

	if ( MessageBox( ~Are you sure you would like to send the message to the <count> selected workstation(s)?~,YESNO ) != YES )
	{
		return FALSE;
	}

	More = WorkstationList( GetFirstString,Workstation );

	while ( <more> )
	{
		ShellExecute( Open,~Net~,~Send <Workstation> "<$con.DlgData[Msg]>"~,~~,SHOWMINNOACTIVE );

		dlg( SetStatus,0,~Sending to <Workstation>~ );

		More = WorkstationList( GetNextString,Workstation );
	}

	dlg( SetStatus,0,~Message sent to <count> workstation(s)~ );

	return TRUE;
}

VOID Reopen()
{
	dlg( SetFocus );
}


VOID CloseDialog()
{
	dlg( End );

	Exit();
}


NUMERIC PopulateServersList()
{
	dlg( GetInput );

	dlg( ListBox,WorkstationsListBox,ResetContent );

	dlg( SetStatus,0,~Searching for workstations~ );

	WaitCursor( Begin );

	if ( !MakeServersList( List,Type,Workstation,Type,Workstation,Domain,~<$con.DlgData[Domain]>~ ) )
	{
		dlg( SetStatus,0,~Search failed~ );
		WaitCursor( End );
		return FALSE;
	}

	WaitCursor( End );

	More = List( GetFirstString,Workstation );

	while ( <more> )
	{
		dlg( ListBox,WorkstationsListBox,AddString,~<Workstation>~ );

		More = List( GetNextString,Workstation );
	}

	dlg( SetStatus,0,~Workstation search complete~ );

	return TRUE;
}


DefineDialog();

PopulateServersList();

OnAllCheckBox();




