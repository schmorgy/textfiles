//	REBatchThread.txt

ExecC() ;

char	*NULL ;
int		 FALSE = 0 ;
int		 TRUE  = ! FALSE ;


UREBatch *gREBatch	= NULL ;
int		  gResult	= 0 ;


//Trace(4) ;

main()
{
	Debug(0) ;
	SessionLogDirect( _T("REBatchThread.main: Version 1.0.3")) ;

//	UCInterpreter	*thisCI = THIS() ;
//	thisCI->SetProfiling( TRUE ) ;
}


//	START THE THREAD HERE !
//	NOTE THAT THE THREAD STARTS OUT SUSPENDED
//	UNTIL WE ARE TOLD TO START.

int InitInstance(CIThread *ThisThread)
{
	TCHAR	buffer[256] ;
	gResult = GetEnvironmentVariable(_T("NUMBER_OF_PROCESSORS"), buffer, 256 ) ;
	long NumProcessors = atoi( buffer ) ;

	long	NumSimultaneousRenders = NumProcessors ;
	UGenCon *PieDefaults = (UGenCon *) GetTreeObject( _T("PIEDefaultsGC"), _T("[GenCons]")) ;
	if( PieDefaults )
	{
		long	ConCurrentRenders = PieDefaults->GetLongValue(_T("ConcurrentRenders")) ;
		if( ConCurrentRenders > 0 )
		{
			NumSimultaneousRenders = ConCurrentRenders ;
		}
	}

//	if( NumSimultaneousRenders > NumProcessors )
//	{
//		NumSimultaneousRenders = NumProcessors ;
//	}

	SessionLogDirect( _T("REBatch.InitInstance: Number of Processors: %ld,\tNumber of Simultaneous Renders: %ld"),
									NumProcessors, NumSimultaneousRenders ) ;

	gREBatch = new UREBatch ;
	if( gREBatch )
	{
		gResult = gREBatch->InitInstance( ThisThread ) ;
		gREBatch->SetNumSimultaneousRenders( NumSimultaneousRenders ) ;
		return( gResult ) ;
	}

	return( TRUE ) ;
}

int OnIdle( long Count )
{
	return( Count ) ;
}

int ExitInstance()
{
	gResult = FALSE ;
	if( gREBatch )
	{
		UREBatch *theREBatch = gREBatch ;
		gREBatch = NULL ;

		gResult = theREBatch->ExitInstance() ;
		delete theREBatch ;
	}
	return( gResult ) ;
}


int PreTranslateMessage( UGenCon *pMsg)
{
	gResult = FALSE ;
	if( gREBatch )
	{
		gResult = gREBatch->PreTranslateMessage(pMsg) ;
	}
	return( gResult ) ;
}

int ExceptionHandler()
{
	gResult = FALSE ;
	if( REBatch )
	{
		UREBatch *REBatch = gREBatch ;
		gREBatch = NULL ;
		gResult = REBatch->ExceptionHandler() ;
	}
	return( gResult ) ;
}

