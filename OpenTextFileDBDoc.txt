
Include: ~UtilityRoutines~;

if ( !DataDict( TheDictionary,Get,DDOpenTextDB ) )
{
	Dictionary: DDOpenTextDB
	Fields: Name Path Type Text
}

Define: DlgData Using DDOpenTextDB ;

VOID DefineDialog()
{
    Left = 5; Top = 5; hGap = 5; vGap = 2;
    TextHeight = 20;        TextWidth = 110;  
	ButtonHeight = 20;		ButtonWidth = 70;
	StaticTextWidth = 40;	StaticTextHeight = 20;
    EditTextWidth = 350;	EditTextHeight = 20;
	x = $Left;				y = $Top;

    Define: DlgDefinition Using DDWinDef
            Fields: Position 180 50 $DialogWidth $DialogHeight
                    Title Translate( ~Open Text Database~ )
                    TypeName ~Dialog~
					HACTIONSTEXT ACTION SHOWHELPPAGE ( KPISHelpFile "OpenDatabase.htm" )
					DropActionsText ACTION EXEC ( HandleDrop() )
                    OACTIONSTEXT ACTION EXEC ( CloseDialog() ) ;

    Contains: InListOrder
    {
    Define: thePrompt Using DDWinCtrlDef AsSymbol thePrompt 
            Fields: TypeName StaticText
                    Text Translate( ~File~ )
					RightJustified TRUE
                    Position $x,$y,$StaticTextWidth,$StaticTextHeight

        Define: ItemField Using DDWinCtrlDef AsSymbol ItemField 
            Fields: TypeName EditText  
                    Position thePrompt(GetRight,Position) + $hGap,thePrompt(GetTop,Position),<EditTextWidth> ,<EditTextHeight> 
					IActionsText ACTIONS ( Get )
					DActionsText ACTIONS ( Save )
					OActionsText ACTIONS ( Save )
                    GenConName       THIS
                    GenConField ~Path~
                    Tooltip         ~Select a File~

		Define: FindButton Using DDWinCtrlDef AsSymbol FindButton 
					Fields: TypeName Button
							Text Translate( ~?~ )
							Position ItemField(GetRight,Position)+$hGap,ItemField(GetTop,Position),20,20
							DActionsText ACTION EXEC ( OnBrowseButton() ) 
							Tooltip Translate( ~Find the file~ );

		DialogWidth = FindButton(GetRight,Position) + ($hGap * 3);

		Define: ExploreButton Using DDWinCtrlDef AsSymbol ExploreButton 
					Fields: TypeName Button
							Text Translate( ~Explorer~ )
							Position $DialogWidth/2 - $ButtonWidth+$hGap-$ButtonWidth,FindButton(GetBottom,Position) + 30,$ButtonWidth, $ButtonHeight
							DActionsText ACTION EXEC ( OnExplorerButton() ) 
							IsEnabled T
							Tooltip Translate( ~Open the text file database~ );

		Define: ViewButton Using DDWinCtrlDef AsSymbol ViewButton 
					Fields: TypeName Button
							Text Translate( ~View~ )
							Position ExploreButton(GetRight,Position)+$hGap,ExploreButton(GetTop,Position),$ButtonWidth, $ButtonHeight
							DActionsText ACTION EXEC ( OnViewButton() ) 
							IsEnabled T
							Tooltip Translate( ~View the text file before opening~ );

		Define: QuotesButton Using DDWinCtrlDef AsSymbol QuotesButton 
					Fields: TypeName Button
							Text Translate( ~Add Quotes~ )
							Position ViewButton(GetRight,Position)+$hGap,ViewButton(GetTop,Position),$ButtonWidth, $ButtonHeight
							DActionsText ACTION EXEC ( OnQuotesButton() ) 
							IsEnabled F
							IsHidden  T
							Tooltip Translate( ~Add Quotes "" to the fields~ );

		Define: GoButton Using DDWinCtrlDef AsSymbol GoButton 
					Fields: TypeName DefaultButton
							Text Translate( ~Open~ )
							Position QuotesButton(GetRight,Position)+$hGap,QuotesButton(GetTop,Position),$ButtonWidth, $ButtonHeight
							DActionsText ACTION EXEC ( OnGoButton() ) 
							IsEnabled T
							Tooltip Translate( ~Open the text file database~ );
    };

	ScreenWidth = App( thisApp,MainWindow,GetClientWidth );
	x = $ScreenWidth / 2;
	y = 40;

	RightEdge = <x> + <DialogWidth>;

	if ( <RightEdge> > <ScreenWidth> )
	{
		x = <ScreenWidth> - <DialogWidth> - 10;
	}

	DialogHeight = GoButton(GetBottom,Position) + $vGap + 40;

    DlgDefinition( Set,Position,~<x> <y> <DialogWidth> <DialogHeight>~ );

	GenDlg( dlg,Definition,DlgDefinition,Data,DlgData,Document,$Doc.This,New,Temporary );

    Global( dlg );
}




NUMERIC HandleDrop()
{
	if ( !GenCon( DragDropInfo,GetDropInfo ) )
	{ 
		return FALSE;
	}

	Tree( Location,~[GenCons]~,Name,DragDropInfo,Pluck ); // REMOVE THE DRAG INFO FROM THE TREE

	dlg( EnableControls,TRUE,StopButton );

	ExternalDrop(DragDropInfo); 

	dlg( EnableControls,FALSE,StopButton ); 

	return TRUE;
}


NUMERIC ExternalDrop( &DragDropInfo )
{
	if ( !DragDropInfo( GetDraggedFiles,DraggedFileList ) )
	{ 
		return ~There were no files in the object you dragged~;
	}

	count = DraggedFileList( ChildCount );

	if ( $count <= 0 )
	{ 
		return Warning( ~There were no files in the object you dragged~; )
	}

	count = ProcessDraggedFiles( DraggedFileList );

	return TRUE;
}


NUMERIC ProcessDraggedFiles( &DraggedFileList )
{
	more = DraggedFileList( GetFirst,Item );

	if ( <more> )
	{
		dlg( SetString,~<$Con.Item[Text]>~,Path,0 );
	}

	return TRUE;
}


VOID OnBrowseButton()
{
	Title = Translate( ~Select the file you wish to open~ );

	if ( FileDialog( Title,~<Title>~,PATH,theFile,Open ) ) // ASK THE USER TO FIND THE FILE(s)
	{
		dlg( SetString,~<theFile>~,Path,0 ); 
	} 
}


VOID CloseDialog()
{
	if (DefinedAndNotNull( MaxFields ) )
	{
		Position = 0;
		while ( <Position> < <MaxFields> )
		{
			ForgetGlobal( FieldsList<Position++> );
		}
		ForgetGlobal( MaxFields );
	}
	dlg( END );
    Exit();
}


NUMERIC OnViewButton()
{
	dlg( GetInput );

	if ( ~<$con.dlgData[Path]>~ == ~~ )
	{
		return Warning( Translate( ~You must specify the path to the file~ ) );
	}

	if ( !Files( FileExists,~<$con.dlgData[Path]>~ ) )
	{
		return Warning( ~<$con.dlgData[Path]> does not exist~ );
	}

	if ( !ViewFileInNotepad( ~<$con.dlgData[Path]>~ ) )
	{
		GetLastError( ErrorString,theErr );
		return Warning( ~Could not open <$con.dlgData[Path]>. <theErr>~ );
	}

	return TRUE;
}


NUMERIC OnQuotesButton()
{
	dlg( GetInput );

	if ( ~<$con.dlgData[Path]>~ == ~~ )
	{
		return Warning( Translate( ~You must specify the path to the file~ ) );
	}

	TargetDirectory = ~<$con.DlgData[Path].Path>\Quoted~;
	FileName = 	~<$con.DlgData[Path].FileName>~;

	OutputPath = ~<TargetDirectory>\<FileName>~;

	Directory( Create,~<TargetDirectory>~ ); 

	if ( QuoteFile( ~<$con.DlgData[Path]>~,~<OutputPath>~ ) )
	{
		dlg( SetStrings,Path,~<OutputPath>~ );
		return Warning( ~The file '<OutputPath>' contains the quoted data.  The original file has not been altered.~ );
	}

	return TRUE;
}



NUMERIC QuoteFile( InputPath,OutputPath )
{
	if ( !File( Input, Open, ~<InputPath>~, Read, Text ) ) 
	{
		Warning( Translate( ~Could not open <InputPath>~ ) );
		return;
	}

	if ( !File( Output,Open,~<OutputPath>~,Create,Write ) )	// CREATE AND OPEN THE JOB
	{
		return Warning( ~Failed to create <OutputPath>~ );
	}

	SearchString = ~,~;
	ReplaceString = ~","~;

	while ( Input( ReadString, Buffer ) ) 
	{
		OnContentsOf( Buffer,Replace,SearchString,ReplaceString  );	

		Output( ~"<$str.$Buffer.QuoteSafe>"~ );
 	}

	return TRUE;
}


NUMERIC OpenItem( Path )
{
	FileName = ~<$str.$path.filename>~;
	Extension = ~<$str.$FileName.ext>~;

	FilePath = ~<$Str.$Path.Path>~;
	FileName = ~<$Str.$Path.Filename.WithoutExt>~;
	Extension = ~<$Str.$Path.Ext>~;

	Source = ~DRIVER={Microsoft Text Driver (*.txt; *.csv)};DBQ=<FilePath>;~;

	QuerySource = ~<Extension>~ == ~~ ? ~<FileName>~ : ~<FileName>#<Extension>~;
	Query = ~Select * from [<QuerySource>] ~;

	Action = ACTION DOC ( EditAnyRecset Open EditAnyRecsetDoc "CreateXMLRecordsetFrom( ~<Source>~,~<Query>~,~<Path>~ );" );
	return PerformActions( Action );
}


NUMERIC OnGoButton()
{
	dlg( GetInput );

	if ( ~<$con.dlgData[Path]>~ == ~~ )
	{
		return Warning( Translate( ~You must specify the path to the file~ ) );
	}

	OpenItem( ~<$con.dlgData[Path]>~ );

	return TRUE;
}


NUMERIC OnExplorerButton()
{
	Actions = ACTION DOC ( Explorer Open ExplorerDoc "Init(~Explore~,~~);" );
	return PerformActions( Actions );
}


VOID Init( Path )
{
	if ( !Defined( dlg ) )
	{
		DefineDialog(); 
	}

	if ( ~<Path>~ != ~~ )
	{
		dlg( SetString,~<Path>~,Path,0 ); 
	}
}



