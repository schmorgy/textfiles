//	LuchtPaperFillInclude.cpp


//	THE INTERFACE TO THIS ALGORITHM IS...
//
//	CALL THIS ONCE AT START UP
//		SetLuchtPageSize( double PaperWidth, double MinAdvance, double MaxAdvance ) ;
//
//	FOR EACH PAGE TO BE PAPER FILLED CALL...
//
//		int Result = AddLuchtPage(	UGenCon *RenderPage, TCHAR *ImageID, TCHAR *OrderID,
//										double Width, double Height, DeleteAfter ) ;
//
//	IF THE RESULT IS FALSE THEN THE PAGE COULD NOT BE ADDED TO THE CURRENT PACKAGE SO...
//		UGenCon *theLayout = GetLuchtPackage() ;
//		DO WHAT YOU NEED TO WITH THE LAYOUT AND THEN
//		SEND THIS PAGE AGAIN.  IF IT FAILS, IT CAN NOT BE PAPER FILLED.
//		DON'T FORGET TO:
//			delete theLayout ;
//
//	WHEN SUBMITTING THE LAST PAGE, 
//		UGenCon *theLayout = GetLuchtPackage() ;
//		AND DO WHAT MUST BE DONE WITH THIS LAYOUT.
//		DON'T FORGET TO:
//			delete theLayout ;
//
//=============================================================================
//=============================================================================
//========================= ARBITRARY PAPER FILL ==============================
//=============================================================================
//=============================================================================
/*
	Dictionary:	DDPackagePage
		Fields:	Name	PackageCode		Type	long
		Fields:	Name	StringState		Type	long
		Fields:	Name	BarCodeString	Type	String	Length	  32
		Fields:	Name	PaperAdvance	Type	double	Precision 15 Scale 8
		Fields:	Name	PaperWidth		Type	double	Precision 15 Scale 8
		Fields:	Name	SizeQtys		Type	string	Length	  32
		Fields:	Name	SizeQtyInUse	Type	string	Length	  32
		Fields:	Name	AreaInUse		Type	double
		Fields:	Name	NumImages		Type	long
		Fields:	Name	Quantity		Type	long
		Fields:	Name	RenderPageList	Type	long
		Fields:	Name	BPHead1			Type	long
		Fields:	Name	BPHead2			Type	long
	;

	Dictionary:	DDImageSlot
		Fields:	Name	ImageAdvance		Type	double	Precision 15 Scale 8
		Fields:	Name	ImageHeight			Type	double	Precision 15 Scale 8
		Fields:	Name	ImageWidth			Type	double	Precision 15 Scale 8
		Fields:	Name	ImageLength			Type	double	Precision 15 Scale 8
		Fields:	Name	AdvancePos			Type	double	Precision 15 Scale 8
		Fields:	Name	HeightPos			Type	double	Precision 15 Scale 8
		Fields:	Name	Area				Type	double
		Fields:	Name	Orientation			Type	long
		Fields:	Name	InUse				Type	long
		Fields:	Name	RenderPage			Type	long
		Fields:	Name	FilePath			Type	text
		Fields:	Name	PreDefinedPkgCode	Type	long
		Fields:	Name	ImgGC				Type	long
		Fields:	Name	DeleteAfter			Type	long
	;
*/


//	THE DDPackagePage SizeQtys FIELD IS DEFINED AS FOLLOWS...
//			BYTE		SIZE
//			0	 0		TOTAL IMAGES
//			1	 1		 1.75 x  2.50
//			2	 2		 2.50 x  3.50
//			3	 3		 3.50 x  5.00
//			4	 4		 4.00 x  5.00
//			5	 5		 4.00 x  6.00		
//			6	 6		 5.00 x  5.00
//			7	 7		 5.00 x  7.00
//			8	 8		 7.00 x 10.00
//			9	 9		 8.00 x  8.00
//			A	10		 8.00 x 10.00
//			B	11		10.00 x 10.00
//			C	12		 8.00 x 12.00
//			D	13		10.00 x 13.00
//			E	14		10.00 x 14.00
//			F	15		11.00 x 14.00
//			G	16		 6.00 x  8.00
//			H	17		 2.33 x  3.33
//			I	18		 3.50 x	10.00
//			J	19		 4.00 x	10.00
//			K	20		 4.25 x  5.00
//			L	21		 5.00 x  5.25
//			M	22		 5.00 x  7.25
//			N	23		 7.25 x 10.00
//			O	24		 8.25 x 10.00
//		QUANTITIES ARE IN ORDER OF 0-9, A-Z.
int		 gMaxSizeQtys = 32 ;
int		 gNumSizeQtys = 25 ;
TCHAR	 gSizeQtys[gMaxSizeQtys] ;
UList	*gLuchtPageList ;
UGenCon	*gLuchtPackage ;
UList	*gPackages ;						//	FROM THE TREE
UGenCon	*gTempLuchtPackage ;
double	 gMinPaperAdvance ;

UGenCon	*GetLuchtPackage()
{
	if( gLuchtPackage == NULL )
	{
		if( gTempLuchtPackage )
		{
			//	IS THIS THE BEST PACKAGE (LOWEST WASTE) ?
			GetLowestWastePackage( gLuchtPageList ) ;

			AddPagesToPackage( gTempLuchtPackage, gLuchtPageList ) ;
			gTempLuchtPackage = NULL ;
		}
	}

	UGenCon	*ReturnPkg = gLuchtPackage ;

	gLuchtPackage = NULL ;

	return( ReturnPkg ) ;
}


int	InitializeLuchtLookUpCode()
{
//						 1234567890123456789012345
//						 0123456789ABCDEFGHIJKLMNO
	TCHAR	*Zeros = _T("0000000000000000000000000") ;
	strcpy( gSizeQtys, Zeros ) ;

//	SessionLogDirect( _T("Lucht.Init Lookup Codes")) ;

	return( TRUE ) ;
}

int CleanUpLuchtPaperFill()
{
	if( gLuchtPageList )
	{
		UGenCon *LuchtPkg = GetLuchtPackage() ;
		if( LuchtPkg )
		{
			delete LuchtPkg ;
		}

		gLuchtPageList->RemoveAll() ;	//	THIS NOW CONTAINS DDPaperFillPage GenCons
		delete gLuchtPageList ;
		gLuchtPageList = NULL ;

	}
	return( TRUE ) ;
}


int AddLuchtPage( UGenCon *RenderPage, TCHAR *ImageID, TCHAR *OrderID, double Width, double Height, int DeleteAfter )
{
	if( gLogAmount >= 4 )
	{
		SessionLogDirect( _T("LuchtPaperFillInclude.AddLuchtPage: ImageID: \"%s\", OrderID: \"%s\" Width: %lf, Height: %lf, DeleteAfter: %d"),
						ImageID, OrderID, Width, Height, DeleteAfter ) ;
	}


	GetMinPaperAdvance( RenderPage ) ;

	if( gTempLuchtPackage  == NULL )	{ InitializeLuchtLookUpCode() ; }

	if( gLuchtPageList == NULL )		{ gLuchtPageList = new UList ; }
	
//	SessionLogDirect( _T("Lucht.AddLuchtPage: ID: \"%s\", W: %lf, H: %lf"), ImageID, Width, Height ) ;

	RenderPage->SetDoubleValue( _T("PageWidth"), Width ) ;
	RenderPage->SetDoubleValue( _T("PageHeight"), Height ) ;

	int Result = AddPrintToLookUpCode( Width, Height ) ;

	if( Result == FALSE )
	{
		SessionLogDirect( _T("LuchtPaperFillInclude.AddLuchtPage: Error: Could not find Layout with image size W: %lf, H: %lf"),
						Width, Height ) ;
		return( -1 ) ;
	}

//=============================================================================
	int PkgCode = LookUpCode( gSizeQtys ) ;
//=============================================================================

	//	PkgCode == -1: Error Could not find the packages.
	//	PkgCode == 0 : No Package found
	//	PkgCode  > 0 : Have a partial package

//	SessionLogDirect( _T("LuchtPaperFillInclude.AddLuchtPage: Page: \"%s\", PackageCode: %d"), ImageID, PkgCode ) ;

	if( PkgCode == -1 )
	{
		//	WE HAD SOME KIND OF AN ERROR   TBD
		return( -1 ) ;
	}

	if( PkgCode > 0 )		//	WE HAVE A PARTIAL PACKAGE
	{
		gLuchtPageList->InsertBack( RenderPage ) ;	//	SAVE THIS PAGE

		UObject	*DeleteAfterObj = new UObject ;
		DeleteAfterObj->SetName(_T("DeleteAfterObject")) ;
		DeleteAfterObj->SetNext( DeleteAfter ) ;
		gLuchtPageList->InsertBack( DeleteAfterObj ) ;	//	A KLUGE TO KEEP THE DELETE AFTER FLAG TEMPORARILY

		return( TRUE ) ;
	}

	return( FALSE ) ;	//	ADDED 12/22/04
}


int AddPagesToPackage( UGenCon *LuchtPackage, UList *LuchtPageList )
{
	double			 Width ;
	double			 Height ;
	URenderList		*theRL ;
	UGenCon			*MainNode ;
	long			 DeleteAfter ;
	UObject			*DeleteAfterObj ;

	gLuchtPackage	= LuchtPackage->Copy() ;

//	SessionLogDirect( _T("******\tLuchtPaperFill.AddPagesToPackage: gLuchtPackage: 0x%08lX"), gLuchtPackage ) ;

	UListIterator	*PageIter	= new UListIterator( LuchtPageList ) ;
	UGenCon			*aPage		= (UGenCon *) PageIter->GetFirst() ;
					
	while( aPage )
	{
		theRL = aPage->GetLongValue(_T("URenderList")) ;
		if( theRL )
		{
			MainNode = (UGenCon *) theRL->GetMainNode() ;
			if( MainNode )
			{
				Width  = MainNode->GetDoubleValue(_T("IWidth:")) ;
				Height = MainNode->GetDoubleValue(_T("IHeight:")) ;

				//	SETUP THE DELETE AFTER KEYWORD
				DeleteAfterObj = PageIter->GetNext() ;
				DeleteAfter = DeleteAfterObj->GetNext() ;
				delete DeleteAfterObj ;

				AddThisPageToPackage( gLuchtPackage, aPage, Width, Height, DeleteAfter ) ;
			}
		}

		aPage	= (UGenCon *) PageIter->GetNext() ;
	}

	LuchtPageList->RemoveAll() ;

	delete PageIter ;
	return( TRUE ) ;
}

int AddThisPageToPackage( UGenCon *LuchtPackage, UGenCon *aPage, double Width, double Height, long DeleteAfter )
{
	double			 SlotAdvance ;
	double			 SlotWidth ;
	double			 ImgWidth ;
	double			 ImgHeight ;

	int				 Pos ;

//gDebugCompareDoubles = TRUE ;

	TCHAR	 PageIDString[128] ;
	GetPageIDString( aPage, PageIDString ) ;

	UListIterator	*SlotIter	= new UListIterator( LuchtPackage->GetChildren() ) ;
	UGenCon			*aSlot		= (UGenCon *) SlotIter->GetFirst() ;
	while( aSlot )
	{
		if( aSlot->GetLongValue(_T("InUse")) == FALSE )
		{
			SlotAdvance = aSlot->GetDoubleValue(_T("ImageAdvance")) ;
			SlotWidth	= aSlot->GetDoubleValue(_T("ImageHeight")) ;

			if( gLogAmount >= 6 )
			{
				SessionLogDirect( _T("LuchtPaperFillInclude.AddThisPageToPackage: SlotAdv: %lf, SlotWidth: %lf, Width: %lf, Height: %lf"),
								SlotAdvance, SlotWidth, Width, Height ) ;
			}


			if((CompareDoubles( Width,  SlotAdvance )	== 0	&&
				CompareDoubles( Height, SlotWidth )		== 0 )	||
			   (CompareDoubles( Width,  SlotWidth )		== 0	&&
				CompareDoubles( Height, SlotAdvance )	== 0 )	)
			{
				aSlot->SetLongValue(_T("InUse"), 1L ) ;
				aSlot->SetDoubleValue(_T("ImageWidth"), Width ) ;
				aSlot->SetDoubleValue(_T("ImageLength"), Height ) ;
				aSlot->SetDoubleValue(_T("Area"), Width * Height ) ;
				aSlot->SetLongValue(_T("RenderPage"), aPage ) ;
				aSlot->SetAttrValue(_T("FilePath"), PageIDString ) ;
				aSlot->SetLongValue(_T("DeleteAfter"), DeleteAfter ) ;

	//			aSlot->Dump(_T("LuchtPaperFillInclude.AddThisPageToPackage: aSlot")) ;
//				SessionLogDirect( _T("LuchtPaperFillInclude.AddThisPageToPackage: SlotAdv: %lf, SlotWidth: %lf, ImgWidth: %lf, ImgHeight: %lf, FOUND EXACT SLOT."),
//									SlotAdvance, SlotWidth, Width, Height ) ;

				break ;
			}
			else	//	THE IMAGE DID NOT EXACTLY FIT IN THE SLOT, SO...
			{

				Pos = ConvertImageSizeToLookupPos( Width, Height ) ;			
				ConvertPosToSlotSize( Pos, &ImgWidth, &ImgHeight ) ;

//				SessionLogDirect( _T("LuchtPaperFillInclude.AddThisPageToPackage: SlotAdv: %lf, SlotWidth: %lf, ImgWidth: %lf, ImgHeight: %lf"),
//									SlotAdvance, SlotWidth, ImgWidth, ImgHeight ) ;

				if((CompareDoubles( ImgWidth,  SlotAdvance ) <= 0 &&
					CompareDoubles( ImgHeight, SlotWidth )	 <= 0 )		||
				   (CompareDoubles( ImgWidth,  SlotWidth )	 <= 0 &&
				    CompareDoubles( ImgHeight, SlotAdvance ) <= 0 )		)
				{
					aSlot->SetLongValue(_T("InUse"), 1L ) ;
					aSlot->SetDoubleValue(_T("ImageWidth"), Width ) ;
					aSlot->SetDoubleValue(_T("ImageLength"), Height ) ;
					aSlot->SetDoubleValue(_T("Area"), Width * Height ) ;
					aSlot->SetLongValue(_T("RenderPage"), aPage ) ;
					aSlot->SetAttrValue(_T("FilePath"), PageIDString ) ;
					aSlot->SetLongValue(_T("DeleteAfter"), DeleteAfter ) ;

	//				aSlot->Dump(_T("LuchtPaperFillInclude.AddThisPageToPackage: aSlot")) ;

//					SessionLogDirect( _T("LuchtPaperFillInclude.AddThisPageToPackage: SlotAdv: %lf, SlotWidth: %lf, ImgWidth: %lf, ImgHeight: %lf, FOUND SLOT."),
//										SlotAdvance, SlotWidth, ImgWidth, ImgHeight ) ;
					break ;
				}
				else
				{
					SessionLogDirect( _T("LuchtPaperFillInclude.AddThisPageToPackage: SlotAdv: %lf, SlotWidth: %lf, ImgWidth: %lf, ImgHeight: %lf, COMPARE FAILED."),
										SlotAdvance, SlotWidth, ImgWidth, ImgHeight ) ;
				}
			}
		}
		aSlot = (UGenCon *) SlotIter->GetNext() ;
	}

//gDebugCompareDoubles = FALSE ;

	delete SlotIter ;
	return( TRUE ) ;
}



int LookUpCode( TCHAR *theLookUpCode )
{
	int		 Result = FALSE ;
	int		 PkgCode = 0 ;
	double	 PaperAdvance ;
	TCHAR	 SizeQtys[gMaxSizeQtys] ;
	UGenCon	*SmallPkg ;
	long	 SmallPkgCode ;

	if( gPackages == NULL )
	{
		gPackages = GetTreeObject( _T("PackageCodesEx"), _T("[GenCons]")) ;
	}

	if( gPackages == NULL )
	{
		SessionLogDirect( _T("LuchtPaperFillInclude.LookUpCode: Could not get Package Codes.")) ;
		return( -1 ) ;
	}

	UListIterator	*anIter = new UListIterator( gPackages->GetChildren() ) ;
	UGenCon			*aPkg = (UGenCon *) anIter->GetFirst() ;
	while( aPkg )
	{
		aPkg->GetAttrValue(_T("SizeQtys"), SizeQtys ) ;

		Result = CompareSizeQtys( theLookUpCode, SizeQtys ) ;

		if( Result == 2 )	//	AN EXACT MATCH
		{
			//	WE FOUND A PACKAGE (BUT SAY IT'S A PARTIAL ANYWAY !)
			PkgCode = aPkg->GetLongValue(_T("PackageCode")) ;
			gTempLuchtPackage = aPkg ;
//			SessionLogDirect( _T("LuchtPaperFillInclude.LookUpCode: We have an exact match: Code: %ld."), PkgCode ) ;
			break ;
		}

		if( Result == 1 )	//	A PARTIAL MATCH
		{
			//	CHECK TO SEE IF THIS PACKAGE IS LEGAL FOR THIS PRINTER
			PaperAdvance = aPkg->GetDoubleValue(_T("PaperAdvance")) ;
			if( PaperAdvance >= gMinPaperAdvance )
			{
				PkgCode = aPkg->GetLongValue(_T("PackageCode")) ;
				gTempLuchtPackage = aPkg ;
//				SessionLogDirect( _T("LuchtPaperFillInclude.LookUpCode: We have a partial match: Code: %ld."), PkgCode ) ;
			}
			else	//	SAVE THIS PACKAGE TEMPORARILY
			{
				SmallPkgCode = aPkg->GetLongValue(_T("PackageCode")) ;
				SmallPkg = aPkg ;
//				SessionLogDirect( _T("LuchtPaperFillInclude.LookUpCode: We have a partial match (too small): Code: %ld."), SmallPkgCode ) ;
			}
		}

		//	NO MATCH AT ALL...	KEEP LOOKING
		aPkg = (UGenCon *) anIter->GetNext() ;
	}

	delete anIter ;

	//	IF WE DID NOT FIND A PACKAGE, THEN USE THE SMALL PACKAGE.
	//	TBD  WILL THIS FIND THE WRONG PACKAGE ???????
	if( PkgCode == 0 && SmallPkgCode )
	{
		gTempLuchtPackage = SmallPkg ;
		PkgCode = SmallPkgCode ;
	}

	return( PkgCode ) ;
}

int CompareSizeQtys( TCHAR *SrcSizeQtys, TCHAR *PkgSizeQtys )
{
	int		Result = 1 ;

	if( strcmp( SrcSizeQtys, PkgSizeQtys) == 0 )
	{
		Result = 2 ;					//	WE HAVE AN EXACT MATCH
	}

	if( Result == 1 )
	{
		int	loop ;
		int	NumTargetPrints = ConvertQty(SrcSizeQtys[0]) ;
		int	NumMatches = 0 ;
		int	Count ;
		int	SrcQty ;
		int	PkgQty ;

		for( loop = 1L ; loop < gNumSizeQtys ; loop++ )
		{
			SrcQty = ConvertQty( SrcSizeQtys[loop] ) ;
			PkgQty = ConvertQty( PkgSizeQtys[loop] ) ;

//			SessionLogDirect( _T("******\tLucht.CompareSizeQtys: loop: %ld, SrcQty: %d, PkgQty: %d"),
//									loop, SrcQty, PkgQty ) ;

			if( SrcQty == PkgQty )
			{
				NumMatches += SrcQty ;	//	PARTIAL PACKAGE
			}

			if( SrcQty > PkgQty )
			{
				Result =  0 ;			//	NOT THIS PACKAGE !
				break ;
			}
		}
	}

//	SessionLogDirect( _T("Lucht.CompareSizeQtys: Return: %ld, Src: \"%s\", Pkg: \"%s\"."),
//							Result, SrcSizeQtys, PkgSizeQtys ) ;

	return( Result ) ;
}

int	ConvertQty( int Char )
{
	if( Char >= 0x41 )	{ return( Char - 0x37 ) ; }
	return( Char - 0x30 ) ;
}



int AddPrintToLookUpCode( double Width, double Height )
{
	TCHAR		Count ;
	int			Result = 0 ;

	int	Pos = ConvertImageSizeToLookupPos( Width, Height ) ;

//	SessionLogDirect( _T("******\tLucht.AddPrintToLookUpCode: Width: %lf, Height: %lf, Pos: %d"),
//							Width, Height, Pos ) ;

	if( Pos )
	{
		Count = gSizeQtys[Pos] ;
		if( Count == 0x39 )		//	'9'
		{
			Count = 0x41 ;		//	'A'
		}
		else
		{
			Count++ ;
		}
		gSizeQtys[Pos] = Count ;

		//	UPDATE NUMBER OF IMAGES IN PACKAGE
		Count = gSizeQtys[0] ;
		if( Count == 0x39 )		//	'9'
		{
			Count = 0x41 ;		//	'A'
		}
		else
		{
			Count++ ;
		}
		gSizeQtys[0] = Count ;

		if( Count > 0x47 )
		{
			Result = -1 ;
		}
		else
		{
			Result = 1 ;
		}
	}

//	SessionLogDirect( _T("******\tLucht.AddPrintToLookUpCode: Count: %c 0x%02X, Result: %ld"),
//						Count, Count, Result ) ;

//	SessionLogDirect( _T("Lucht.AddPrintToLookUpCode: gSizeQtys: \"%s\"."),
//							gSizeQtys ) ;

	return( Result ) ;
}

int ConvertImageSizeToLookupPos( double Width, double Height )
{
	if( Width > Height )
	{
		SwapDoubles( &Width, &Height ) ;
	}

	if( CompareDoubles( Width,  1.75 ) <= 0 &&  CompareDoubles( Height,  2.50 ) <= 0 )	{ return(  1 ) ; }
//	if( CompareDoubles( Width,  2.33 ) <= 0 &&  CompareDoubles( Height,  3.33 ) <= 0 )	{ return( 17 ) ; }
	if( CompareDoubles( Width,  2.50 ) <= 0 &&  CompareDoubles( Height,  3.50 ) <= 0 )	{ return(  2 ) ; }
	if( CompareDoubles( Width,  3.50 ) <= 0 &&  CompareDoubles( Height,  5.00 ) <= 0 )	{ return(  3 ) ; }
	if( CompareDoubles( Width,  3.50 ) <= 0 &&  CompareDoubles( Height, 10.00 ) <= 0 )	{ return( 18 ) ; }
	if( CompareDoubles( Width,  4.00 ) <= 0 &&  CompareDoubles( Height,  5.00 ) <= 0 )	{ return(  4 ) ; }
	if( CompareDoubles( Width,  4.00 ) <= 0 &&  CompareDoubles( Height,  6.00 ) <= 0 )	{ return(  5 ) ; }
	if( CompareDoubles( Width,  4.00 ) <= 0 &&  CompareDoubles( Height, 10.00 ) <= 0 )	{ return( 19 ) ; }
	if( CompareDoubles( Width,  4.25 ) <= 0 &&  CompareDoubles( Height,  5.00 ) <= 0 )	{ return( 20 ) ; }
	if( CompareDoubles( Width,  5.00 ) <= 0 &&  CompareDoubles( Height,  5.00 ) <= 0 )	{ return(  6 ) ; }
	if( CompareDoubles( Width,  5.00 ) <= 0 &&  CompareDoubles( Height,  5.25 ) <= 0 )	{ return( 21 ) ; }
	if( CompareDoubles( Width,  5.00 ) <= 0 &&  CompareDoubles( Height,  7.00 ) <= 0 )	{ return(  7 ) ; }
	if( CompareDoubles( Width,  5.00 ) <= 0 &&  CompareDoubles( Height,  7.25 ) <= 0 )	{ return( 22 ) ; }
	if( CompareDoubles( Width,  6.00 ) <= 0 &&  CompareDoubles( Height,  8.00 ) <= 0 )	{ return( 16 ) ; }
	if( CompareDoubles( Width,  7.00 ) <= 0 &&  CompareDoubles( Height, 10.00 ) <= 0 )	{ return(  8 ) ; }
	if( CompareDoubles( Width,  7.25 ) <= 0 &&  CompareDoubles( Height, 10.00 ) <= 0 )	{ return( 23 ) ; }
	if( CompareDoubles( Width,  8.00 ) <= 0 &&  CompareDoubles( Height,  8.00 ) <= 0 )	{ return(  9 ) ; }
	if( CompareDoubles( Width,  8.00 ) <= 0 &&  CompareDoubles( Height, 10.00 ) <= 0 )	{ return( 10 ) ; }
	if( CompareDoubles( Width,  8.00 ) <= 0 &&  CompareDoubles( Height, 12.00 ) <= 0 )	{ return( 12 ) ; }
	if( CompareDoubles( Width,  8.25 ) <= 0 &&  CompareDoubles( Height, 10.00 ) <= 0 )	{ return( 24 ) ; }
	if( CompareDoubles( Width, 10.00 ) <= 0 &&  CompareDoubles( Height, 10.00 ) <= 0 )	{ return( 11 ) ; }
	if( CompareDoubles( Width, 10.00 ) <= 0 &&  CompareDoubles( Height, 13.00 ) <= 0 )	{ return( 13 ) ; }
	if( CompareDoubles( Width, 10.00 ) <= 0 &&  CompareDoubles( Height, 14.00 ) <= 0 )	{ return( 14 ) ; }
	if( CompareDoubles( Width, 11.00 ) <= 0 &&  CompareDoubles( Height, 14.00 ) <= 0 )	{ return( 15 ) ; }

	return( 0 ) ;
}

void ConvertPosToSlotSize( int Pos, double *Width, double *Height )
{
	*Width = 0.0 ;
	*Height = 0.0 ;

	switch( Pos )
	{
		case	 1	:	*Width =  1.75 ; *Height =  2.50 ; break ;
		case	 2	:	*Width =  2.50 ; *Height =  3.50 ; break ;
		case	 3	:	*Width =  3.50 ; *Height =  5.00 ; break ;
		case	 4	:	*Width =  4.00 ; *Height =  5.00 ; break ;
		case	 5	:	*Width =  4.00 ; *Height =  6.00 ; break ;
		case	 6	:	*Width =  5.00 ; *Height =  5.00 ; break ;
		case	 7	:	*Width =  5.00 ; *Height =  7.00 ; break ;
		case	 8	:	*Width =  7.00 ; *Height = 10.00 ; break ;
		case	 9	:	*Width =  8.00 ; *Height =  8.00 ; break ;
		case	10	:	*Width =  8.00 ; *Height = 10.00 ; break ;
		case	11	:	*Width = 10.00 ; *Height = 10.00 ; break ;
		case	12	:	*Width =  8.00 ; *Height = 12.00 ; break ;
		case	13	:	*Width = 10.00 ; *Height = 13.00 ; break ;
		case	14	:	*Width = 10.00 ; *Height = 14.00 ; break ;
		case	15	:	*Width = 11.00 ; *Height = 14.00 ; break ;
		case	16	:	*Width =  6.00 ; *Height =  8.00 ; break ;
//		case	17	:	*Width =  2.33 ; *Height =  3.33 ; break ;
		case	18	:	*Width =  3.50 ; *Height = 10.00 ; break ;
		case	19	:	*Width =  4.00 ; *Height = 10.00 ; break ;
		case	20	:	*Width =  4.25 ; *Height =  5.00 ; break ;
		case	21	:	*Width =  5.00 ; *Height =  5.25 ; break ;
		case	22	:	*Width =  5.00 ; *Height =  7.25 ; break ;
		case	23	:	*Width =  7.25 ; *Height = 10.00 ; break ;
		case	24	:	*Width =  8.25 ; *Height = 10.00 ; break ;
	}
}

double GetMinPaperAdvance(UGenCon *RenderPage)
{
	if( gMinPaperAdvance != 0.0 )	{ return( gMinPaperAdvance ) ; }

	UGenCon *BatchInfo = (UGenCon *) RenderPage->GetParent() ;
	if( BatchInfo )
	{
		UGenCon *PrinterSetup = (UGenCon *) BatchInfo->GetLongValue(_T("PrinterSetup")) ;
		if( PrinterSetup )
		{
			TCHAR	*PrinterModel = PrinterSetup->GetStringValue(_T("PrinterModel")) ;
			if( PrinterModel )
			{
				UGenCon *PrinterData = (UGenCon *) GetTreeObject( PrinterModel, _T("[PrintingScripts]")) ;
				if( PrinterData )
				{
					gMinPaperAdvance = PrinterData->GetDoubleValue(_T("MinPaperAdvance")) ;
//					SessionLogDirect( _T("Lucht.GetMinPaperAdv: Model: %s, Min Adv: %lf"), PrinterModel, gMinPaperAdvance ) ;
				}
			}
		}
	}
	return( gMinPaperAdvance ) ;
}


int GetLowestWastePackage( UList *LuchtPageList )
{
	int		Result ;
	double	Width ;
	double	Height ;

//	SessionLogDirect( _T("******\tLucht.GetLowestWastePackage: PageList has %ld entries."),
//					LuchtPageList->GetNumEntries()) ;

	InitializeLuchtLookUpCode() ;	//	RESTART THE LOOKUP CODE

//	SessionLogDirect( _T("******\tLucht.GetLowestWastePackage: gSizeQtys: \"%s\"."), gSizeQtys ) ;

	UListIterator	*anIter = new UListIterator(LuchtPageList) ;
	UGenCon			*aPage  = (UGenCon *) anIter->GetFirst() ;
	while( aPage )
	{
		Width  = aPage->GetDoubleValue(_T("PageWidth")) ;
		Height = aPage->GetDoubleValue(_T("PageHeight")) ;

		Result = AddPrintToLookUpCode( Width, Height ) ;

//		SessionLogDirect( _T("******\tLucht.GetLowestWastePackage: gSizeQtys: \"%s\"."), gSizeQtys ) ;
	
		aPage  = (UGenCon *) anIter->GetNext() ;	//	SKIP THE DELETE AFTER FLAG
		aPage  = (UGenCon *) anIter->GetNext() ;
	}
	delete anIter ;

	UGenCon *LowWastePkg = FindLowWastePkg( gSizeQtys ) ;

	if( LowWastePkg )
	{
//		SessionLogDirect( _T("******\tLucht.GetLowestWastePackage: PkgCode: %ld."), LowWastePkg->GetLongValue(_T("PackageCode")) ) ;
		gTempLuchtPackage = LowWastePkg ;
	}

	return( TRUE ) ;
}


UGenCon *FindLowWastePkg( TCHAR *theLookUpCode )
{
	int		 Result = FALSE ;
	double	 PaperAdvance ;
	TCHAR	 SizeQtys[gMaxSizeQtys] ;
	UGenCon	*SmallPkg = NULL ;
	UGenCon	*LowWastePkg = NULL ;
	double	 SmallestPaperAdvance	= 1000.0 ;
	double	 SmallPkgAdvance		= 1000.0 ;

	if( gPackages == NULL )
	{
		gPackages = GetTreeObject( _T("PackageCodesEx"), _T("[GenCons]")) ;
	}

	if( gPackages == NULL )
	{
		SessionLogDirect( _T("LuchtPaperFillInclude.LookUpCode: Could not get Package Codes.")) ;
		return( -1 ) ;
	}

	UListIterator	*anIter = new UListIterator( gPackages->GetChildren() ) ;
	UGenCon			*aPkg = (UGenCon *) anIter->GetFirst() ;
	while( aPkg )
	{
		aPkg->GetAttrValue(_T("SizeQtys"), SizeQtys ) ;

		Result = CompareSizeQtys( theLookUpCode, SizeQtys ) ;

		if( Result == 2 )	//	AN EXACT MATCH
		{
			//	WE FOUND A PACKAGE
			LowWastePkg = aPkg ;
			break ;
		}

		if( Result == 1 )	//	A PARTIAL MATCH
		{
			//	CHECK TO SEE IF THIS PACKAGE IS LEGAL FOR THIS PRINTER
			PaperAdvance = aPkg->GetDoubleValue(_T("PaperAdvance")) ;
			if( PaperAdvance >= gMinPaperAdvance )
			{
				if( PaperAdvance < SmallestPaperAdvance )
				{
					LowWastePkg = aPkg ;
					SmallestPaperAdvance = PaperAdvance ;
				}
			}
			else	//	SAVE THIS PACKAGE TEMPORARILY
			{
				if( PaperAdvance < SmallPkgAdvance )
				{
					SmallPkg = aPkg ;
					SmallPkgAdvance = PaperAdvance ;
				}
			}
		}

		//	NO MATCH AT ALL...	KEEP LOOKING
		aPkg = (UGenCon *) anIter->GetNext() ;
	}

	delete anIter ;

	//	IF WE DID NOT FIND A PACKAGE, THEN USE THE SMALL PACKAGE.
	//	TBD  WILL THIS FIND THE WRONG PACKAGE ???????
	if( LowWastePkg == NULL && SmallPkg )
	{
		LowWastePkg = SmallPkg ;
	}

	return( LowWastePkg ) ;
}

