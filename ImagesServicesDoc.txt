Include: ~FormattingRoutines~;

IncludeClass( BaseGrid );

VOID	ImagesServices::ImagesServices()						// CONSTRUCTOR
{
	TableName = ~ImagesServices~;
	DocumentQuery = ~Select * from <TableName> Order By OrderID,Roll,Frame,ServicesID~;
	Title = ~Images Services~;
	WindowTop = 25;
	WindowWidth = 90;
	WindowHeight = 25;
	HelpPage = ~ImagesServices.htm~;
	SplitterRows = ~2 7 93~;
}

STR		ImagesServices::GetKey( &Item )					// PRIMARY KEY FOR THE TABLE
{
	return ~OrderID = '<$con.Item[OrderID]>' AND Roll = '<$con.Item[Roll]>' AND Frame = '<$con.Item[Frame]>' AND ServicesID = <$con.Item[ServicesID]>~;
}

NUMERIC ImagesServices::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[OrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  OrderID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Roll]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Roll cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Frame]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Frame cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[ServicesID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ServicesID cannot be blank.~ ) ); }

	return TRUE;
}

NUMERIC ImagesServices::OnAddRecord( &NewRow )
{
	return NewRow( Set,OrderID,~<fOrderID>~ );
}

NUMERIC Init( Which,Query )
{
	if ( Defined( Grid ) )
	{
		Grid.ReOpen();
		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.Set( fOrderID,~<Which>~ );
		Grid.RefreshListView();
	}
	else
	{
		Class( ImagesServices,Extends,BaseGrid,
				Member,fOrderID,Str,~<Which>~ );

		ImagesServices( New,Grid );

		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.DefineWindow();
		Grid.Init();
		Global( Grid );
	}

	Grid.SetTitle( ~Image Services - <fOrderID>~ );

	return TRUE;
}

