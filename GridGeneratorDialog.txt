DialogWidth = 610;
DialogHeight = 390;
LeftMargin = 40;
MiddleMargin = 200;
StaticTextWidth = 70;
StaticTextHeight = 20;
CheckBoxWidth = 200;
CheckBoxHeight = 20;
ComboBoxWidth = 160;
ComboBoxHeight = 150;
hGap = vGap = 10;

LeftOffset = 120;
EditTextWidth = 50;
EditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 50;
ButtonHeight = 20; 
VerticalSeparation = 30;
InitialVerticalPosition = 70;
maxPatterns = 78;
MidOffset = 310;
BigEditText = 115;
MarginStaticTextWidth = 80;

Tree( Location,~[STRINGS]~,Name,GridCategoryChoices,PluckAndFree );

StringList: Name ~GridCategoryChoices~
	Fields: String  ~Default~
Hang:	GridCategoryChoices	~[STRINGS]~ ;

// Initial Default values for items in this dialog box are stored in job.txt.
// Initial Default values will be used the first time this dialog box is displayed after a new
// empty database is used.  After that, values for the last product ID are used.  If the last
// product ID is blank or invalid, values for the last time the create button was hit are
// used.

// get a copy of GridLayoutParameters from the tree, which was loaded at startup from
// the user settings table
GenCon(GridLayoutParameters,CopyFrom,GridLayoutParameters,[Gencons]);// copied from tree, sets deleteOnDestruction TRUE


VOID CreateDialog()
{

	Define: GridGeneratorDialog Using DDWinDef
	fields: Position 100 100 <DialogWidth> <DialogHeight>
			Title ~New Composite~
			TypeName ~Dialog~
			DropTypes		~Products~
			OActionsText ACTION EXEC ( CancelPressed() )
			HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "GridGeneratorProperties.htm" )
			WantsMinimizeBox		TRUE

	Contains: INLISTORDER
	{

		ypos = 30;

		Define: UnitsStatic Using DDWinCtrlDef AsSymbol UnitsStatic
		fields:	TypeName StaticText
				Text ~Units:~
				Position $LeftMargin  <ypos> 100 20

		Define: UnitsComboBox Using DDWinCtrlDef AsSymbol UnitsComboBox
		fields:	TypeName SComboBox
				GenConField ~Units~
				Position $LeftMargin +$LeftOffset  <ypos>  	100,80
				IActionsText ACTION EXEC ( SetUnitsComboList();)
				DActionsText ACTION EXEC ( UpdateUnits2(); )
				Tooltip ~Select your preferred units~;

		Define: UnitsGroupBox Using DDWinCtrlDef AsSymbol UnitsGroupBox
		fields:	TypeName GroupBox
				Text ~Units:~
				Position	UnitsStatic(GetLeft,Position) - 20
							UnitsStatic(GetTop,Position) - 20,
							UnitsComboBox(GetRight,Position) -  UnitsStatic(GetLeft,Position) + 40,
							50;

		ypos = UnitsStatic(GetBottom,Position) + 40;

		Define: BGWStatic Using DDWinCtrlDef AsSymbol BGWStatic
		fields:	TypeName StaticText
				Text ~Width:~
				Position $LeftMargin  <ypos> $MarginStaticTextWidth 20

		Define: BGWEditText Using DDWinCtrlDef AsSymbol BGWEditText
		fields:	TypeName MaskedEditText
				GenConField ~BackgroundWidth~
				Position BGWStatic(GetRight,Position)  <ypos>  $BigEditText 20
				Mask		 ~##################~
				AllowedChars ~.~
				DisallowedChars ~-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the width~;

		Define: BGWUnitsStatic Using DDWinCtrlDef AsSymbol BGWUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position BGWEditText(GetRight,Position) + 10, BGWEditText(GetTop,Position)+ 5 20 20;

		ypos = <ypos> + 30;
		Define: BGHStatic Using DDWinCtrlDef AsSymbol BGHStatic
		fields:	TypeName StaticText
				Text ~Height:~
				Position $LeftMargin  <ypos> $MarginStaticTextWidth 50

		Define: BGHEditText Using DDWinCtrlDef AsSymbol BGHEditText
		fields:	TypeName MaskedEditText
				GenConField ~BackgroundHeight~
				Position BGHStatic(GetRight,Position)  <ypos>  $BigEditText 20
				Mask		 ~##################~
				DisallowedChars ~-~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the height~;

		Define: BGHUnitsStatic Using DDWinCtrlDef AsSymbol BGHUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position BGHEditText(GetRight,Position) + 10, BGHEditText(GetTop,Position)+ 5 20 20;

		Define: BGSizeGroupBox Using DDWinCtrlDef AsSymbol BGSizeGroupBox
		fields:	TypeName GroupBox
				Text ~Background Size:~
				Position	BGWStatic(GetLeft,Position) - 20
							BGWStatic(GetTop,Position) - 20,
							BGHUnitsStatic(GetRight,Position) -  BGHStatic(GetLeft,Position) + 40,
							BGHEditText(GetBottom,Position) -  BGWEditText(GetTop,Position) + 40;


		ypos =  BGHStatic(GetBottom,Position) + 30;

		Define: LeftMarginStatic Using DDWinCtrlDef  AsSymbol LeftMarginStatic
		fields:	TypeName StaticText
				Text ~Left Margin:~
				Position $LeftMargin  <ypos> $MarginStaticTextWidth 20

		Define: LeftMarginEditText Using DDWinCtrlDef AsSymbol LeftMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~LeftMargin:~
				Position LeftMarginStatic(GetRight,Position)  <ypos>  $BigEditText 20
				Mask		 ~##################~
				DisallowedChars ~-~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the left margin~;

		Define: LeftMarginUnitsStatic Using DDWinCtrlDef AsSymbol LeftMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position LeftMarginEditText(GetRight,Position) + 10, LeftMarginEditText(GetTop,Position)+ 5 20 20;

		ypos = <ypos> + 30;
		Define: RightMarginStatic Using DDWinCtrlDef AsSymbol RightMarginStatic
		fields:	TypeName StaticText
				Text ~Right Margin:~
				Position $LeftMargin  <ypos> $MarginStaticTextWidth 20

		Define: RightMarginEditText Using DDWinCtrlDef AsSymbol  RightMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~RightMargin:~
				Position RightMarginStatic(GetRight,Position)  <ypos>  $BigEditText 20
				Mask		 ~##################~
				DisallowedChars ~-~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the right margin~;

		Define: RightMarginUnitsStatic Using DDWinCtrlDef AsSymbol RightMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position RightMarginEditText(GetRight,Position) + 10, RightMarginEditText(GetTop,Position)+ 5 20 20;

		ypos = <ypos> + 30;
		Define: TopMarginStatic Using DDWinCtrlDef AsSymbol TopMarginStatic
		fields:	TypeName StaticText
				Text ~Top Margin:~
				Position $LeftMargin  <ypos> $MarginStaticTextWidth 20
//				DoubleclickActionsText ACTION EXEC ( KillFocusActions(TopMarginStatic) )	


		Define: TopMarginEditText Using DDWinCtrlDef AsSymbol TopMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~TopMargin:~
				Position TopMarginStatic(GetRight,Position)  <ypos>  $BigEditText 20
				Mask		 ~##################~
				AllowedChars ~.~
				DisallowedChars ~-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the top margin~;

		Define: TopMarginUnitsStatic Using DDWinCtrlDef AsSymbol TopMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position TopMarginEditText(GetRight,Position) + 10, TopMarginEditText(GetTop,Position)+ 5 20 20;

		ypos = <ypos> + 30;
		Define: BottomMarginStatic Using DDWinCtrlDef AsSymbol BottomMarginStatic
		fields:	TypeName StaticText
				Text ~Bottom Margin:~
				Position $LeftMargin  <ypos> $MarginStaticTextWidth 20

		Define: BottomMarginEditText Using DDWinCtrlDef AsSymbol BottomMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~BottomMargin:~
				Position BottomMarginStatic(GetRight,Position)  <ypos>  $BigEditText 20
				Mask		 ~##################~
				AllowedChars ~.~
				DisallowedChars ~-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the bottom margin~;

		Define: BottomMarginUnitsStatic Using DDWinCtrlDef AsSymbol BottomMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position BottomMarginEditText(GetRight,Position) + 10, BottomMarginEditText(GetTop,Position)+ 5 20 20;

		Define: MarginGroupBox Using DDWinCtrlDef AsSymbol MarginGroupBox
		fields:	TypeName GroupBox
				Text ~Margins:~
				Position	LeftMarginStatic(GetLeft,Position) - 20
							LeftMarginStatic(GetTop,Position) - 20,
							BottomMarginUnitsStatic(GetRight,Position) -  LeftMarginStatic(GetLeft,Position) + 40,
							BottomMarginEditText(GetBottom,Position) -  LeftMarginStatic(GetTop,Position) + 40;

		Define: ProductIDPrompt Using DDWinCtrlDef AsSymbol ProductIDPrompt
			fields:	TypeName		StaticText
					Text			~Product ID:~
					Position		LeftMarginStatic(GetLeft,Position) -10,
									MarginGroupBox(GetBottom,Position) + 40,
									$StaticTextWidth, $EditTextHeight

		Define: ProductIDField Using DDWinCtrlDef AsSymbol ProductIDField
			fields:	TypeName		MaskedEditText
					Mask			~<$[DATABASE FieldTypes].ProductID[Mask]>~
					AllowedChars	~<$[DATABASE FieldTypes].ProductID[AllowedChars]>~
					DisallowedChars	~<$[DATABASE FieldTypes].ProductID[DisallowedChars]>~
					PromptChar		~<$[DATABASE FieldTypes].ProductID[PromptChar]>~		
					InsertOn		T
					DActionsText	ACTION EXEC ( ProductIDDactions())
					GenConField		~ProductID:~
					Position		TopMarginEditText(GetLeft,Position),
									ProductIDPrompt(GetTop,Position),
									$StaticTextWidth + 40, $EditTextHeight
//					KillFocusActionsText ACTION EXEC ( KillFocusActions(ProductIDField) )	
					ToolTip			~Enter a unique identifier for this product~;

		Define: ProductNamePrompt Using DDWinCtrlDef AsSymbol ProductNamePrompt
			fields:	TypeName		StaticText
					Text			~Description:~
					Position		ProductIDPrompt(GetLeft,Position),
									ProductIDPrompt(GetBottom,Position) + $vGap,
									$StaticTextWidth +30, $EditTextHeight

		Define: ProductNameField Using DDWinCtrlDef AsSymbol ProductNameField
			fields:	TypeName		MaskedEditText
					Mask			~<$[DATABASE FieldTypes].ProductName[Mask]>~
					AllowedChars	~<$[DATABASE FieldTypes].ProductName[AllowedChars]>~
					DisallowedChars	~<$[DATABASE FieldTypes].ProductName[DisallowedChars]>~
					PromptChar		~<$[DATABASE FieldTypes].ProductName[PromptChar]>~		
					Text			~~
					InsertOn T
					GenConField		~ProductName~
//					KillFocusActionsText ACTION EXEC ( KillFocusActions(ProductNameField) )	
					ToolTip	~Enter a description for this product~
					Position		ProductIDField(GetLeft,Position),
									ProductNamePrompt(GetTop,Position),
									$StaticTextWidth + 40, $EditTextHeight ;

		Define: CategoryNamePrompt Using DDWinCtrlDef AsSymbol CategoryNamePrompt
			fields:	TypeName		StaticText
					Text			~Category~
					Position		ProductNamePrompt(GetLeft,Position),
									ProductNamePrompt(GetBottom,Position) + $vGap,
									$StaticTextWidth +30, $EditTextHeight;

		Query = ~Select Distinct Category From Products Order By Category~;
		Define: CategoryNameComboBox Using DDWinCtrlDef AsSymbol CategoryNameComboBox
		fields: TypeName		ComboBox  
				Position		ProductNameField(GetLeft,Position),
								CategoryNamePrompt(GetTop,Position),
								$ComboBoxWidth, 200
				IActionsText	~[UpdateStringList(GridCategoryChoices "<Query>" Category THIS "Category" -1) GetList(GridCategoryChoices) Get]~
				Mask			~<$[DATABASE FieldTypes].ProductName[Mask]>~
				AllowedChars	~<$[DATABASE FieldTypes].ProductName[AllowedChars]>~
				DisallowedChars	~<$[DATABASE FieldTypes].ProductName[DisallowedChars]>~
				PromptChar		~<$[DATABASE FieldTypes].ProductName[PromptChar]>~		
				ToolTip	~Select or type the desired category you want this product to appear in~
				IsTabStop		1
//				KillFocusActionsText ACTION EXEC ( KillFocusActions(CategoryNameComboBox) )	
				GenConField		~Category~;

		Define: RestoreButton Using DDWinCtrlDef AsSymbol RestoreButton
		fields:	TypeName Button
			Position	ProductNamePrompt(GetLeft,Position),
							CategoryNamePrompt(GetBottom,Position) + 10,
							240 , 20
				Text ~Restore Info for ~
				DActionsText ACTION EXEC ( RestoreGridSettingsW() )	
				Tooltip ~Restore previous values~;

		Define: ProductGroupBox Using DDWinCtrlDef AsSymbol ProductGroupBox
		fields:	TypeName GroupBox
				Text ~Product Information:~
				Position	ProductIDPrompt(GetLeft,Position) - 20
							ProductIDPrompt(GetTop,Position) - 20,
							CategoryNameComboBox(GetRight,Position) -  ProductIDPrompt(GetLeft,Position) + 30,
							RestoreButton(GetBottom,Position) -  ProductIDPrompt(GetTop,Position) + 40;


		ypos =  30;
		Define: ImageNodeCheckBox Using DDWinCtrlDef AsSymbol ImageNodeCheckBox
		fields:	TypeName CheckBox
				GenConField ~IsImageNode:~
				Position MarginGroupBox(GetRight,Position) + 35 <ypos>  85 20
				Text	~Image Node~
				DActionsText ACTION EXEC ( DoImageNodeCheckBoxStuff() )	
				Tooltip ~Check if you want image nodes~;

		Define: TextNodeCheckBox Using DDWinCtrlDef AsSymbol TextNodeCheckBox
		fields:	TypeName CheckBox
				GenConField ~IsTextNode:~
				Position ImageNodeCheckBox(GetRight,Position) + 20, ImageNodeCheckBox(GetTop,Position)  85 20
				Text	~Text Node~	
				DActionsText ACTION EXEC ( DoTextNodeCheckBoxStuff() )	
				Tooltip ~Check if you want text nodes~;

		ypos = <ypos> + 30;
		Define: TextRightOffsetStatic Using DDWinCtrlDef AsSymbol TextRightOffsetStatic
		fields:	TypeName StaticText
				Text ~Horizontal Text Gap %:~
				Position ImageNodeCheckBox(GetLeft,Position) <ypos> 120 20

		Define: TextRightOffsetEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~TextLeft:~
				Position TextRightOffsetStatic(GetRight,Position)+10  <ypos>  50 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the offset from the left of the image node to the left of the text node as a percentage of the image node width~;

		ypos = <ypos> + 30;
		Define: TextWidthStatic Using DDWinCtrlDef AsSymbol TextWidthStatic
		fields:	TypeName StaticText
				Text ~Text Node Width %:~
				Position ImageNodeCheckBox(GetLeft,Position)  <ypos> 120 20

		Define: TextWidthText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~TextWidth:~
				Position TextWidthStatic(GetRight,Position)+10  <ypos>  50 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter text node width as a percentage of image node width~;

		ypos = <ypos> + 30;
		Define: TextTopOffsetStatic Using DDWinCtrlDef AsSymbol TextTopOffsetStatic
		fields:	TypeName StaticText
				Text ~Vertical Text Gap %:~
				Position ImageNodeCheckBox(GetLeft,Position)  <ypos> 120 20

		Define: TextTopOffsetEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~TextTop:~
				Position TextTopOffsetStatic(GetRight,Position)+10  <ypos>  50 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the offset from the bottom of the image node to the top of the text node as a percentage of the image node height~;

		ypos = <ypos> + 30;
		Define: TextHeightStatic Using DDWinCtrlDef AsSymbol TextHeightStatic
		fields:	TypeName StaticText
				Text ~Text Node Height %:~
				Position ImageNodeCheckBox(GetLeft,Position)  <ypos> 120 20

		Define: TextHeightText Using DDWinCtrlDef AsSymbol TextHeightText
		fields:	TypeName MaskedEditText
				GenConField ~TextHeight:~
				Position TextHeightStatic(GetRight,Position)+10  <ypos>  50 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter text node height as a percentage of image node height~;

		ypos = <ypos> + 30;
		Define: HorizGapStatic Using DDWinCtrlDef AsSymbol HorizGapStatic
		fields:	TypeName StaticText
				Text ~Minimum Horizontal Gap:~
				Position ImageNodeCheckBox(GetLeft,Position)  <ypos> 120 50

		Define: HorizGapEdit Using DDWinCtrlDef AsSymbol HorizGapEdit
		fields:	TypeName MaskedEditText
				GenConField ~HorizGap:~
				Position HorizGapStatic(GetRight,Position)+10  <ypos>  $BigEditText 20
				Mask		 ~##################~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the minimum horizontal gap between nodes.  ~;

		Define: HorizGapUnitsStatic Using DDWinCtrlDef AsSymbol HorizGapUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position HorizGapEdit(GetRight,Position) + 4, HorizGapEdit(GetTop,Position)+ 5 18 20;

		ypos = <ypos> + 30;
		Define: VertGapStatic Using DDWinCtrlDef AsSymbol VertGapStatic
		fields:	TypeName StaticText
				Text ~Minimum Vertical Gap:~
				Position ImageNodeCheckBox(GetLeft,Position) <ypos> 120 20

		Define: VertGapEdit Using DDWinCtrlDef AsSymbol VertGapEdit
		fields:	TypeName MaskedEditText
				GenConField ~VertGap:~
				Position VertGapStatic(GetRight,Position)+10  <ypos>  $BigEditText 20
				Mask		 ~##################~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the minimum vertical gap between nodes~;

		Define: VertGapUnitsStatic Using DDWinCtrlDef AsSymbol VertGapUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position VertGapEdit(GetRight,Position) + 4, VertGapEdit(GetTop,Position)+ 5 18 20;

		ypos = <ypos> + 30;
		Define: HoldAspectRatioCheckBox Using DDWinCtrlDef
		fields:	TypeName CheckBox
				GenConField ~HoldAspectRatio:~
				Position ImageNodeCheckBox(GetLeft,Position)  <ypos>  150 20
				Text	~Hold Aspect Ratio~	
				Tooltip ~Check if you to want the new nodes to have the aspect ratio of the Maximum Width / Maximum Height values~;

		ypos = <ypos> + 30;
		Define: AspectRatioWidthStatic Using DDWinCtrlDef AsSymbol AspectRatioWidthStatic
		fields:	TypeName StaticText
				Text ~Maximum Width:~
				Position ImageNodeCheckBox(GetLeft,Position) <ypos> 120 20

		Define: AspectRatioWidthEdit Using DDWinCtrlDef AsSymbol AspectRatioWidthEdit
		fields:	TypeName MaskedEditText
				GenConField ~MaxWidth:~
				Position AspectRatioWidthStatic(GetRight,Position)+10 <ypos>  $BigEditText 20
				Mask		 ~##################~
				DisallowedChars ~-~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the maximum width of an image node~;

		Define: AspectRatioWidthUnitsStatic Using DDWinCtrlDef AsSymbol AspectRatioWidthUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position AspectRatioWidthEdit(GetRight,Position) + 4, AspectRatioWidthEdit(GetTop,Position)+ 5 18 20;

		ypos = <ypos> + 30;
		Define: AspectRatioHeightStatic Using DDWinCtrlDef AsSymbol AspectRatioHeightStatic
		fields:	TypeName StaticText
				Text ~Maximum Height:~
				Position ImageNodeCheckBox(GetLeft,Position) <ypos> 120 20

		Define: AspectRatioHeightEdit Using DDWinCtrlDef AsSymbol AspectRatioHeightEdit
		fields:	TypeName MaskedEditText
				GenConField ~MaxHeight:~
				Position AspectRatioHeightStatic(GetRight,Position)+10  <ypos>  $BigEditText 20
				Mask		 ~##################~
				DisallowedChars ~-~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the maximum height of an image node~;

		Define: AspectRatioHeightUnitsStatic Using DDWinCtrlDef AsSymbol AspectRatioHeightUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position AspectRatioHeightEdit(GetRight,Position) + 4, AspectRatioHeightEdit(GetTop,Position)+ 5 18 20;

		Define: NodeGroupBox Using DDWinCtrlDef AsSymbol NodeGroupBox
		fields:	TypeName GroupBox
				Text ~Node Sizing:~
				Position	ImageNodeCheckBox(GetLeft,Position) - 20
							ImageNodeCheckBox(GetTop,Position) - 20,
							VertGapUnitsStatic(GetRight,Position) + 10 -  ImageNodeCheckBox(GetLeft,Position) + 15,
							AspectRatioHeightEdit(GetBottom,Position) -  ImageNodeCheckBox(GetTop,Position) + 40;

		Define:  StyleStaticText Using DDWinCtrlDef AsSymbol StyleStaticText 
			Fields: TYPENAME        StaticText  
					POSITION		ImageNodeCheckBox(GetLeft,Position) NodeGroupBox(GetBottom,Position) + 30 60, 20
					Text			~Countable:~

		Define: StyleComboBox Using DDWinCtrlDef AsSymbol StyleComboBox 
            Fields: TypeName		SComboBox  
					POSITION		StyleStaticText(GetRight,Position) + 30,  
									StyleStaticText(GetTop,Position), 
									140,200
					GenConField		~NodeStyle:~
					DropDownActionsText	ACTION EXEC ( GetStyleList(0) )
					IActionsText	ACTION EXEC ( GetStyleList(1) ) // not executed Why?
					OActionsText	ACTIONS ( Save )
					Tooltip			~Choose a Style to be applied to countable nodes~;

		Define:  TStyleStaticText Using DDWinCtrlDef AsSymbol TStyleStaticText 
			Fields: TYPENAME        StaticText  
					POSITION		StyleStaticText(GetLeft,Position) StyleComboBox(GetTop,Position) + 30 60, 20
					Text			~Title/Text:~

		Define: TStyleComboBox Using DDWinCtrlDef AsSymbol TStyleComboBox 
            Fields: TypeName		SComboBox  
					POSITION		TStyleStaticText(GetRight,Position) + 30,  
									TStyleStaticText(GetTop,Position), 
									140,200
					GenConField		~NodeStyleText:~
					DropDownActionsText	ACTION EXEC ( GetStyleTextList(0) )
					IActionsText	ACTION EXEC ( GetStyleTextList(1) ) // not executed Why?
					OActionsText	ACTIONS ( Save )
					Tooltip			~Choose a Style to be applied to title/text bars~;

		Define:  IStyleStaticText Using DDWinCtrlDef AsSymbol IStyleStaticText 
			Fields: TYPENAME        StaticText  
					POSITION		TStyleStaticText(GetLeft,Position) TStyleComboBox(GetTop,Position) + 30 60, 20
					Text			~Images:~

		Define: IStyleComboBox Using DDWinCtrlDef AsSymbol IStyleComboBox 
            Fields: TypeName		SComboBox  
					POSITION		IStyleStaticText(GetRight,Position) + 30,  
									IStyleStaticText(GetTop,Position), 
									140,200
					GenConField		~NodeStyleIcon:~
					DropDownActionsText	ACTION EXEC ( GetStyleIconList(0) )
					IActionsText	ACTION EXEC ( GetStyleIconList(1) ) // not executed Why?
					OActionsText	ACTIONS ( Save )
					Tooltip			~Choose a Style to be applied to uncountable image nodes~;

		Define:  IPlusTStyleStaticText Using DDWinCtrlDef AsSymbol IPlusTStyleStaticText 
			Fields: TYPENAME        StaticText  
					POSITION		IStyleStaticText(GetLeft,Position) IStyleComboBox(GetTop,Position) + 30 60, 20
					Text			~Image+Text:~

		Define: IPlusTStyleComboBox Using DDWinCtrlDef AsSymbol IPlusTStyleComboBox 
            Fields: TypeName		SComboBox  
					POSITION		IPlusTStyleStaticText(GetRight,Position) + 30,  
									IPlusTStyleStaticText(GetTop,Position), 
									140,200
					GenConField		~NodeStyleIPlusT:~
					DropDownActionsText	ACTION EXEC ( GetStyleIPlusTList(0) )
					IActionsText	ACTION EXEC ( GetStyleIPlusTList(1) ) // not executed Why?
					OActionsText	ACTIONS ( Save )
					Tooltip			~Choose a Style to be applied to image + text nodes~;

		Define: StyleGroupBox Using DDWinCtrlDef AsSymbol StyleGroupBox
		fields:	TypeName GroupBox
				Text ~Styles:~
				Position	StyleStaticText(GetLeft,Position) - 20
							StyleStaticText(GetTop,Position) - 20,
							IPlusTStyleComboBox(GetRight,Position) -  IPlusTStyleStaticText(GetLeft,Position) + 40,
							IPlusTStyleStaticText(GetBottom,Position) -  StyleStaticText(GetTop,Position) + 40;

		Define: OutputSpecButton Using DDWinCtrlDef AsSymbol OutputSpecButton
		fields:	TypeName Button
				Position $LeftMargin -20  StyleGroupBox(GetBottom,Position)+ 20,  100  20
				Text ~Output Spec ->~
				IActionsText ~[Get]~
				DActionsText ~[FileOpen UpdateControl(OutputSpecEditText)]~
				Tooltip ~Find a previously created output specification.  To create a new one, open any layout or order item, click on the LED, CRT, NT or Save Image Toolbar button, and then Save Output Spec~
				GenConField ~OutputSpec~;

		Define: OutputSpecEditText Using DDWinCtrlDef AsSymbol OutputSpecEditText
		fields:	TypeName EditText
				Position	OutputSpecButton(GetRight,Position) + 20
							OutputSpecButton(GetTop,Position)
							435   20
				IActionsText ~[Get]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip ~Enter the path of a previously created output specification.  To create a new one, open any layout or order item, click on the LED, CRT, NT or Save Image Toolbar button, and then Save Output Spec~
				GenConField ~OutputSpec~;

		Define: PatternpathButton Using DDWinCtrlDef AsSymbol PatternpathButton
		fields:	TypeName Button
				Position $LeftMargin -20  OutputSpecButton(GetBottom,Position)+ 30,  100  20
				Text ~Pattern Directory ->~
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( PatternPathButtonDactions())
				Tooltip ~Find directory of patterns~

		Define: PatternpathEditText Using DDWinCtrlDef AsSymbol PatternpathEditText
		fields:	TypeName MaskedEditText
				Position	PatternpathButton(GetRight,Position) + 20
							PatternpathButton(GetTop,Position)
							330   20
				IActionsText ~[Get]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip ~Enter path to directory of patterns~
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				GenConField ~PatternPath~;

		Define: EditPatternButton Using DDWinCtrlDef AsSymbol EditPatternButton
		fields:	TypeName Button
				Position PatternpathEditText(GetRight,Position)+ 25  PatternpathEditText(GetTop,Position),  80  20
				Text ~Edit Pattern~
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( EditPattern() )
				Tooltip ~Edit the pattern file~;

		Define: BackgroundImageButton Using DDWinCtrlDef AsSymbol BackgroundImageButton
		fields:	TypeName Button
				Position $LeftMargin -20  PatternpathEditText(GetBottom,Position)+ 30,  120  20
				Text ~Background Image ->~
				IActionsText ~[Get]~
				DActionsText ~[FileOpen UpdateControl(BackgroundImageEditText)]~
				Tooltip ~Find background image~
				GenConField ~BackgroundImageFilePath:~;
		
		Define: BackgroundImageEditText Using DDWinCtrlDef AsSymbol BackgroundImageEditText
		fields:	TypeName MaskedEditText
				Position	BackgroundImageButton(GetRight,Position) + 20
							BackgroundImageButton(GetTop,Position)
				 415   20
				IActionsText ~[Get]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip ~Enter path to background image~
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				GenConField ~BackgroundImageFilePath:~;

		Define: LayoutpathButton Using DDWinCtrlDef AsSymbol LayoutpathButton
		fields:	TypeName Button
				Position $LeftMargin -35  BackgroundImageEditText(GetBottom,Position)+ 30,  150  20
				Text ~Master Grid Layout Directory ->~
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( LayoutPathButtonDactions())
				Tooltip ~Find directory of layouts~
				GenConField ~LayoutPath~;

		
		Define: LayoutpathEditText Using DDWinCtrlDef AsSymbol LayoutpathEditText
		fields:	TypeName MaskedEditText
				Position	LayoutpathButton(GetRight,Position) + 20
							LayoutpathButton(GetTop,Position)
				 400   20
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( LayoutPathDactions())
				OActionsText ~[Save]~
				Tooltip ~Enter path to directory of layouts~
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				GenConField ~LayoutPath~;


		Define: OpenStaticText Using DDWinCtrlDef AsSymbol OpenStaticText 
			Fields: TYPENAME        StaticText  
					POSITION		LayoutpathButton(GetLeft,Position),  
									LayoutpathButton(GetBottom,Position) + 20 30, 50 
					Text			~From Size:~

		Define: OpenLEditText Using DDWinCtrlDef AsSymbol OpenLEditText 
 		fields:	TypeName MaskedEditText
				GenConField ~StartSize~
				POSITION		OpenStaticText(GetRight,Position) + 20,  
								OpenStaticText(GetTop,Position), 
								40,20
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				DActionsText ACTION EXEC ( UpdateOpenButton())
				Tooltip ~Enter the start size~;

		ypos = OpenStaticText(GetTop,Position) ;

		Define: OpenHStaticText Using DDWinCtrlDef AsSymbol OpenHStaticText 
			Fields: TYPENAME        StaticText  
				POSITION		OpenLEditText(GetRight,Position) + 20,  
								OpenStaticText(GetTop,Position), 
								30,50
					Text			~To Size:~

		Define: OpenHEditText Using DDWinCtrlDef AsSymbol OpenHEditText 
 		fields:	TypeName MaskedEditText
				GenConField ~FinishSize~
				POSITION		OpenHStaticText(GetRight,Position) + 20,  
								OpenHStaticText(GetTop,Position), 
								40,20
				Mask		 ~####~
				AllowedChars ~~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the highest size to create~;

		Define: OpenNextButton Using DDWinCtrlDef AsSymbol OpenNextButton
		fields:	TypeName Button
				Text ~Next~
				Position OpenHStaticText(GetLeft,Position), OpenHStaticText(GetTop,Position), <SmallButtonWidth>-10, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( BumpSize() )
				OActionsText ~[NULL]~
				IsHidden T
				Tooltip ~Create the size shown~;

		Define: OpenPrevButton Using DDWinCtrlDef AsSymbol OpenPrevButton
		fields:	TypeName Button
				Text ~Prev~
				Position OpenNextButton(GetRight,Position)+ 20, <ypos>, <SmallButtonWidth> -10, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( DownSize() )
				OActionsText ~[NULL]~
				IsHidden T
				Tooltip ~Create the size shown~;

		Define: OpenOneCheckBox Using DDWinCtrlDef AsSymbol OpenOneCheckBox
		fields:	TypeName CheckBox
				GenConField ~OneAtATime~
				POSITION		OpenHEditText(GetRight,Position) + 20,  
								OpenHEditText(GetTop,Position), 
								68,20
				Text			~1 at a time~
				DActionsText	ACTION EXEC ( DoOneAtATimeStuff() )
				Tooltip ~Open one layout at a time~;

		Define: OpenCheckBox Using DDWinCtrlDef AsSymbol OpenCheckBox
		fields:	TypeName CheckBox
				GenConField ~OpenOnCreate~
				POSITION		OpenOneCheckBox(GetRight,Position) + 10,  
								OpenOneCheckBox(GetTop,Position), 
								95,20
				Text			~Open on Create~
				Tooltip ~Check if you want to open each layout as it is created~;

		Define: OpenButton2 Using DDWinCtrlDef AsSymbol OpenButton2
		fields:	TypeName Button
				POSITION		OpenCheckBox(GetRight,Position) + 10,  
								OpenCheckBox(GetTop,Position), <SmallButtonWidth> + 10, <ButtonHeight>
				Text ~Open~
				DActionsText ACTION EXEC ( OpenCurrent())
				Tooltip ~Open a previously created layout of size~

		Define: CloseButton Using DDWinCtrlDef AsSymbol CloseButton
		fields:	TypeName Button
				Text ~Cancel~
				POSITION		OpenButton2(GetRight,Position) + 10,  
								OpenButton2(GetTop,Position), <SmallButtonWidth>, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( CancelPressed() )
				OActionsText ~[NULL]~
				Tooltip ~Close this dialog box~;

		Define: ApplyButton Using DDWinCtrlDef AsSymbol ApplyButton
		fields:	TypeName DefaultButton
				Text ~Create~
				POSITION		CloseButton(GetRight,Position) + 10,  
								CloseButton(GetTop,Position), <SmallButtonWidth>, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( Apply() )
				OActionsText ~[NULL]~
				Tooltip ~Create layouts~;

	}

	ypos = CloseButton(GetBottom, Position) + 45;

	if ( !Defined(dlg) )
	{
		GridGeneratorDialog( Set, Position, ~550 10 <DialogWidth> <ypos> ~);
		// use the GenCon called GridLayoutParameters and refer to it as GridLayoutParameters inside this script
		GenDlg( dlg,Definition,GridGeneratorDialog,Data,GridLayoutParameters,Document,$Doc.This,New,Temporary );
		Global( dlg,GridGeneratorDialog);
	}

	else
	{
		dlg(SetFocus);
	}
}

Include: ~UpdateUserSettings~;


// The database and executable file we are creating must have the full layout path
// The Dialog box contains the directory of the parent folder, so it will not usually have to be changed
// 
NUMERIC Apply()
{

	dlg( GetInput );

	dlg( GetControlValue,StyleComboBox,CurrentVal);
	if (~<CurrentVal>~ == ~None~)
	{
		GridLayoutParameters( SetValue, ~NodeStyle:~, ~~);
		CurrentVal = ~~;
	}
	GetStylePathFromStyleID(~<CurrentVal>~, ~NodeStylePath:~);

	dlg( GetControlValue,TStyleComboBox,CurrentVal);
	if (~<CurrentVal>~ == ~None~)
	{
		GridLayoutParameters( SetValue, ~NodeStyleText:~, ~~);
		CurrentVal = ~~;
	}
	GetStylePathFromStyleID(~<CurrentVal>~, ~NodeStylePathText:~);

	dlg( GetControlValue,IStyleComboBox,CurrentVal);
	if (~<CurrentVal>~ == ~None~)
	{
		GridLayoutParameters( SetValue, ~NodeStyleIcon:~, ~~);
		CurrentVal = ~~;
	}
	GetStylePathFromStyleID(~<CurrentVal>~, ~NodeStylePathIcon:~);

	dlg( GetControlValue,IPlusTStyleComboBox,CurrentVal);
	if (~<CurrentVal>~ == ~None~)
	{
		GridLayoutParameters( SetValue, ~NodeStyleIPlusT:~, ~~);
		CurrentVal = ~~;
	}
	GetStylePathFromStyleID(~<CurrentVal>~, ~NodeStylePathIPlusT:~);

	GridLayoutParameters( GetValue, ~ProductID:~, ProductID);
	GridLayoutParameters( GetValue, ~ProductName~, ProductName);
	GridLayoutParameters( GetValue, ~Category~, Category);
	GridLayoutParameters( GetValue, ~LayoutPath~, LayoutPath);
	GridLayoutParameters( GetValue, ~OneAtATime~, OneAtATime);
	GridLayoutParameters( GetValue, ~StartSize~, StartSize);
	GridLayoutParameters( GetValue, ~FinishSize~, FinishSize);
	GridLayoutParameters( GetValue, ~BackgroundHeight~, BackgroundHeight);
	GridLayoutParameters( GetValue, ~BackgroundWidth~, BackgroundWidth);
	GridLayoutParameters( GetValue, ~MaxWidth:~, MaxWidth);
	GridLayoutParameters( GetValue, ~MaxHeight:~, MaxHeight);
	GridLayoutParameters( GetValue, ~IsImageNode:~, IsImageNode);
	GridLayoutParameters( GetValue, ~IsTextNode:~, IsTextNode);
	GridLayoutParameters( GetValue, ~Units~, Units);

	if (~<ProductID>~ == ~~)
	{
		return Warning( Translate( ~Product ID cannot be blank~ ));
	}

	if (~<ProductName>~ == ~~)
	{
		return Warning( Translate( ~Description cannot be blank~ ));
	}

	if (~<Category>~ == ~~)
	{
		return Warning( Translate( ~Category cannot be blank~ ));
	}

	if (~<LayoutPath>~ == ~~)
	{
		return Warning( Translate( ~Master Grid Layout Directory cannot be blank~ ));
	}
	
	if (<BackgroundWidth> <= 0.0)
	{
		return Warning( Translate( ~Background Width must be greater than 0~ ));
	}

	if (<BackgroundHeight> <= 0.0)
	{
		return Warning( Translate( ~Background Height must be greater than 0~ ));
	}

	if (<MaxWidth> <= 0.0)
	{
		return Warning( Translate( ~Maximum Width must be greater than 0~ ));
	}

	if (<BackgroundHeight> <= 0.0)
	{
		return Warning( Translate( ~Maximum Height must be greater than 0~ ));
	}
	if (<IsImageNode> == 0 && <IsTextNode> == 0)
	{
		return Warning( Translate( ~Either Image Node or Text Node (or both) must be checked~ ));
	}

	MaxWidthInInches = 250;
	MaxHeightInInches = 250;
	MaxWidthInCm = <MaxWidthInInches>*2.54;
	MaxHeightInCm = <MaxHeightInInches>*2.54;
	MaxWidthInMm = <MaxWidthInInches>*25.4;
	MaxHeightInMm = <MaxHeightInInches>*25.4;
	if (~<Units>~ == ~Inches~)
	{
		if (<BackgroundHeight> > <MaxHeightInInches> || <BackgroundWidth> > <MaxWidthInInches>)
		{
			return Warning( Translate( ~Background Width and Height cannot exceed <MaxHeightInInches> inches~ ));
		}
		if (<BackgroundHeight> > 100.0 || <BackgroundWidth> > 100.0)
		{
			bw = Numeric(<BackgroundWidth>);  // this does a prettyFTOA in the engine which removes unnecessary trailing zeroes
			bh = Numeric(<BackgroundHeight>);
			Msg = Translate( ~You have selected a background width of <bw> inches and background height of <bh> inches.  This may be very slow.  Do you want to continue?~ );
			if ( MessageBox( ~<Msg>~,YESNO ) == NO )
			{
				return FALSE;
			}
		}

	}
	else if (~<Units>~ == ~Centimeters~)
	{
		if (<BackgroundHeight> >  <MaxHeightInCm> || <BackgroundWidth> > <MaxWidthInCm> )
		{
			return Warning( Translate( ~Background Width and Height cannot exceed <MaxWidthInCm> centimeters~ ));
		}
		if (<BackgroundHeight> > 254.0 || <BackgroundWidth> > 254.0)
		{
			bw = Numeric(<BackgroundWidth>); // this does a prettyFTOA in the engine which removes unnecessary trailing zeroes
			bh = Numeric(<BackgroundHeight>);
			Msg = Translate( ~You have selected a background width of <bw> cm and background height of <bh> cm.  This may be very slow.  Do you want to continue?~ );
			if ( MessageBox( ~<Msg>~,YESNO ) == NO )
			{
				return FALSE;
			}
		}

	}
	else if (~<Units>~ == ~Millimeters~)
	{
		if (<BackgroundHeight> > <MaxHeightInMm> || <BackgroundWidth> > <MaxWidthInMm>)
		{
			return Warning( Translate( ~Background Width and Height cannot exceed <MaxWidthInMm> millimeters~ ));
		}
		if (<BackgroundHeight> > 2540.0 || <BackgroundWidth> > 2540.0)
		{
			bw = Numeric(<BackgroundWidth>); // this does a prettyFTOA in the engine which removes unnecessary trailing zeroes
			bh = Numeric(<BackgroundHeight>);
			Msg = Translate( ~You have selected a background width of <bw> mm and background height of <bh> mm.  This may be very slow.  Do you want to continue?~ );
			if ( MessageBox( ~<Msg>~,YESNO ) == NO )
			{
				return FALSE;
			}
		}
	}

	ParentLayoutPath = ~<LayoutPath>~;
	LayoutPath = ~<LayoutPath>\<ProductID>~;
	LayoutPath = MakePath(type, unc, ~<LayoutPath>~);
	productExists = CheckIfProductExists(~<ProductID>~);
	if (!<productExists>)
	{
		if ( !AddANewProduct( ~<ProductID>~,~<ProductName>~,~<Category>~,~<LayoutPath>~) )
			{ return FALSE; }
	}
	else
	{
		// product exists, check if the layout path the same as in the database
		if (!CheckForValidLayoutPath(~<ProductID>~,~<LayoutPath>~))
		{ return FALSE; }
	}

	Directory( Create,~<LayoutPath>~ );

	InPath = ~<$App.ShareDirectory>\Layouts\GridLayouts\Create\<ProductID>BaseGrid.txt~;
	if ( !File( DataFile,OPEN,~<InPath>~,READ ) )			
	{ 

		InPath = ~<$App.ShareDirectory>\Layouts\GridLayouts\Create\BaseGrid.txt~;
		if ( !File( DataFile,OPEN,~<InPath>~,READ ) )			
		{ 
			return Warning( Translate( ~Could not open <InPath>~ ));
		}
	}

	// Read <$App.ShareDirectory>\Layouts\GridLayouts\Create\BaseGrid.txt into a file having symbol named Executable
	DataFile( ReadTextFile,Executable );

	Path = ~<$App.Directory>\Layouts\GridLayouts\Create\<ProductID>GridTemp.txt~;
	Files( Delete,~<Path>~ );

	// Create a file called <$App.Directory>\Layouts\GridLayouts\Create\<ProductID>GridTemp.txt. 
	// Symbolically refer to the file as GridParameters
	// We will merge the grid parameters and executable code into this file
	// and then execute it.
	if ( !File( GridParameters,Open,~<Path>~,Create,Write,Close ) )	
	{
		return Warning( Translate( ~Failed to create <Path>~ ) );
	}

	Actions = ACTION Doc ( PatternEditorDoc3 "AskToSave( TRUE );" );

	PerformActions( Actions );	
	
	GridLayoutParameters( SetValue, ~Operation~, 0);

	// restore to the full directory path where the layouts are
	GridLayoutParameters( SetValue, ~LayoutPath~, ~<LayoutPath>~);

	// Create a new GenCon called GridLayoutParameters2 and make it a copy of GridLayoutParameters
	GenCon( GridLayoutParameters2,IsCopyOf,GridLayoutParameters);

	// Convert Units from Metric, if user has chosen centimeters or millimeters as the preferred units
	ConvertUnits(GridLayoutParameters2);

	// Write out the Gencon values into GridTemp.txt
	GridParameters( WriteGenConDefinition,GridLayoutParameters2 );

	// Write out the executable code into GridTemp.txt 
	GridParameters( WriteContentsOf,Executable );

	// Close the file
	GridParameters( Close );

	// get a pointer to the original parameters from the tree (which had been refreshed at startup)
	GenCon(OriginalParameters,GetGenCon,GridLayoutParameters);

	// copy the user's values to the original parameters
	OriginalParameters(SetValuesFrom,GridLayoutParameters);

	GridLayoutParameters( GetValue, ~OneAtATime~, OneAtATime);

	// update the user settings table 
	UpdateUserSettings( GridLayoutParameters,GridLayoutParameters );

	// update the grid definition table
	UpdateGridSettings( );

	// restore to the parent directory for the dialog box
	GridLayoutParameters( SetValue, ~LayoutPath~, ~<ParentLayoutPath>~);

	// Execute GridTemp.txt
	Open( Any,~<Path>~ );

	UpdateRestoreButton(); 
	return 1;

}

NUMERIC DoTheWork(Path)
{
	Open( Any, ~<Path>~);
	return 1;
}



VOID  EnableTextHeightBox() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextHeightText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextHeightText );
	}
}


VOID  EnableTextTopOffsetEditText() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextTopOffsetEditText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextTopOffsetEditText );
	}
}

VOID  EnableTextRightOffsetEditText() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextRightOffsetEditText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextRightOffsetEditText );
	}
}


VOID  EnableTextWidthText() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextWidthText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextWidthText );
	}
}



VOID ReOpen()
{
}

VOID CancelPressed()
{
	dlg( End );
	Exit();
}

VOID Init( PatternPath )
{
	if ( !Defined( GridGeneratorDialog ) )
	{
		GridLayoutParameters( GetValue,~OneAtATime~,value1);
		GridLayoutParameters( Set,PatternPath,~<PatternPath>~ );
		CreateDialog();
		GetStyleList(1);
		GetStyleTextList(1);
		GetStyleIconList(1);
		GetStyleIPlusTList(1);
		RestoreGridSettings(1);
		UpdateRestoreButton();
		InitOneAtATime();
		EnableTextRightOffsetEditText();
		EnableTextWidthText();
		EnableTextTopOffsetEditText();
		EnableTextHeightBox();
	}
	else
	{
		Warning( Translate(~New Composite Dialog is already open~));
	}
}


VOID DoImageNodeCheckBoxStuff()
{
	EnableTextRightOffsetEditText();
	EnableTextWidthText();
	EnableTextTopOffsetEditText();
	EnableTextHeightBox();

}


VOID DoTextNodeCheckBoxStuff()
{
	EnableTextRightOffsetEditText();
	EnableTextWidthText();
	EnableTextTopOffsetEditText();
	EnableTextHeightBox();
}

VOID DoOneAtATimeStuff()
{
	dlg( GetControlValue,OpenOneCheckBox,value1);
	if ( <value1> == 0)
	{
		dlg( SetControlValue,OpenStaticText,~From Size:~ );
		dlg( ShowControls,1,OpenHStaticText,OpenHEditText );
		dlg( ShowControls,0 ,OpenPrevButton,OpenNextButton);
	}
	else
	{
		dlg( SetControlValue,OpenStaticText,~Size:~ );
		dlg( EnableControls,TRUE, OpenCheckBox );
		dlg( ShowControls,0,OpenHStaticText,OpenHEditText );
		dlg( ShowControls,1,OpenPrevButton,OpenNextButton );
	}
}

VOID InitOneAtATime()
{	
	GridLayoutParameters( GetValue,~OneAtATime~,value1);
	if ( <value1> == 0)
	{
		dlg( SetControlValue,OpenStaticText,~From Size:~ );
		dlg( ShowControls,1,OpenHStaticText,OpenHEditText );
		dlg( ShowControls,0 ,OpenPrevButton,OpenNextButton);
	}
	else
	{
		dlg( SetControlValue,OpenStaticText,~Size:~ );
		dlg( ShowControls,0,OpenHStaticText,OpenHEditText );
		dlg( ShowControls,1,OpenPrevButton,OpenNextButton );
	}




}

NUMERIC UpdateReferenceImagesList()
{
	return dlg( SetControlFromStringList,TitleBarComboBox,Images);
}


VOID SetUnitsComboList()
{
	StringList(MyUnitsList,New);
	MyUnitsList(AddString,~Inches~);
	MyUnitsList(AddString,~Centimeters~);
	MyUnitsList(AddString,~Millimeters~);
	GridLayoutParameters( GetValue, ~Units~, CurrentUnits);
	dlg( SetControlFromStringList,UnitsComboBox,MyUnitsList,Selection );
	dlg( SetControlValue,UnitsComboBox, ~<CurrentUnits>~); 
	UpdateUnits(~<CurrentUnits>~ );
}


NUMERIC GetStyleList(WantSelection)
{
	StringList(NodeStyleList,New);
	NodeStyleList( AddString,~None~ );

	theQuery = ~Select ID From Products Where Style <> 0 Order By ID~;
	
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);

	if (<count> > 0)
	{
		while ( List( GetNext,Record ) )
		{
			++count;
			NodeStyleList( AddString,~<$pcon.Record[ID]>~ );
		}
	}

	GridLayoutParameters( GetValue, ~NodeStyle:~, CurrentVal);
	if (~<CurrentVal>~ == ~~)
	{
		GridLayoutParameters( SetValue, ~NodeStyle:~, ~None~);
	}

	if (<WantSelection>)
	{
		dlg( SetControlFromStringList,StyleComboBox,NodeStyleList,Selection );
		dlg( SetControlValue,StyleComboBox, ~<CurrentVal>~); 
	}
	else
	{
		dlg( SetControlFromStringList,StyleComboBox,NodeStyleList,NoSelection );
	}

	return TRUE;
}

NUMERIC GetStyleTextList(WantSelection)
{

	StringList(NodeStyleList,New);
	NodeStyleList( AddString,~None~ );

	theQuery = ~Select ID From Products Where Style <> 0 Order By ID~;	
	
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);

	if (<count> > 0)
	{
		while ( List( GetNext,Record ) )
		{
			++count;
			NodeStyleList( AddString,~<$pcon.Record[ID]>~ );
		}
	}

	GridLayoutParameters( GetValue, ~NodeStyleText:~, CurrentVal);
	if (~<CurrentVal>~ == ~~)
	{
		GridLayoutParameters( SetValue, ~NodeStyleText:~, ~None~);
	}

	if (<WantSelection>)
	{
		dlg( SetControlFromStringList,TStyleComboBox,NodeStyleList,Selection );
		dlg( SetControlValue,TStyleComboBox, ~<CurrentVal>~); 
	}
	else
	{
		dlg( SetControlFromStringList,TStyleComboBox,NodeStyleList,NoSelection );
	}

	return TRUE;
}

NUMERIC GetStyleIconList(WantSelection)
{

	StringList(NodeStyleList,New);
	NodeStyleList( AddString,~None~ );

	// Style type:  0 = Image, 1 = Text, 2 = Image and Text
	theQuery = ~Select ID From Products Where Style <> 0 AND StyleType = 0 Order By ID~;	
	
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);

	if (<count> > 0)
	{
		while ( List( GetNext,Record ) )
		{
			++count;
			NodeStyleList( AddString,~<$pcon.Record[ID]>~ );
		}
	}

	GridLayoutParameters( GetValue, ~NodeStyleIcon:~, CurrentVal);
	if (~<CurrentVal>~ == ~~)
	{
		GridLayoutParameters( SetValue, ~NodeStyleIcon:~, ~None~);
	}

	if (<WantSelection>)
	{
		dlg( SetControlFromStringList,IStyleComboBox,NodeStyleList,Selection );
		dlg( SetControlValue,IStyleComboBox, ~<CurrentVal>~); 
	}
	else
	{
		dlg( SetControlFromStringList,IStyleComboBox,NodeStyleList,NoSelection );
	}

	return TRUE;
}

NUMERIC GetStyleIPlusTList(WantSelection)
{

	StringList(NodeStyleList,New);
	NodeStyleList( AddString,~None~ );

	dlg( GetControlValue,ImageNodeCheckBox,isImage);
	dlg( GetControlValue,TextNodeCheckBox,isText);

	// Style type:  0 = Image, 1 = Text, 2 = Image and Text

	if ((<isImage> && <isText>) || (!<isImage> && !<isText>))
	{
		theQuery = ~Select ID From Products Where Style <> 0 Order By ID~;
	}
	else if (<isImage>)
	{
		theQuery = ~Select ID From Products Where Style <> 0 AND StyleType = 0 Order By ID~;
	}
	else if (<isText>)
	{
		theQuery = ~Select ID From Products Where Style <> 0 AND StyleType = 1 Order By ID~;
	}	

	
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);

	if (<count> > 0)
	{
		while ( List( GetNext,Record ) )
		{
			++count;
			NodeStyleList( AddString,~<$pcon.Record[ID]>~ );
		}
	}

	GridLayoutParameters( GetValue, ~NodeStyleIPlusT:~, CurrentVal);
	if (~<CurrentVal>~ == ~~)
	{
		GridLayoutParameters( SetValue, ~NodeStyleIPlusT:~, ~None~);
	}

	if (<WantSelection>)
	{
		dlg( SetControlFromStringList,IPlusTStyleComboBox,NodeStyleList,Selection );
		dlg( SetControlValue,IPlusTStyleComboBox, ~<CurrentVal>~); 
	}
	else
	{
		dlg( SetControlFromStringList,IPlusTStyleComboBox,NodeStyleList,NoSelection );
	}

	return TRUE;
}

NUMERIC SaveSize()
{
	dlg( GetControlValue,OpenLEditText,CurrentVal);
	GridLayoutParameters( SetValue, ~OpenOnCreate~, ~<CurrentVal>~);
	GridLayoutParameters( SetValue, ~StartSize~, <CurrentVal>);
	GridLayoutParameters( SetValue, ~FinishSize~, <CurrentVal>);
	v = Apply();
	return 1;
}

NUMERIC BumpSize()
{
	dlg( GetControlValue,OpenLEditText,CurrentVal);
	CurrentVal = <CurrentVal> + 1;
	dlg( SetControlValue,OpenLEditText,<CurrentVal>);
	SaveSize();
	return 1;
}

VOID LayoutPathDactions()
{
	SetLayoutPathTooltip();
}


VOID OpenCurrent()
{
	GridLayoutParameters( GetValue, ~ProductID:~, ProductID);
	GridLayoutParameters( GetValue, ~LayoutPath~, LayoutPath);
	GridLayoutParameters( GetValue, ~StartSize~, StartSize);
	GridLayoutParameters( GetValue, ~ProductName~, ProductName);
	aPath = ~<LayoutPath>\<ProductID>\layout.<$Str.$StartSize.%03ld>~;
	GridLayoutParameters( SetValue, CurrentLayoutFilePath, ~<aPath>~);

	if (!GenCon( Info,New,DDDocumentInfo ) )
	{ 
		Warning( ~Could not create document info for <LayoutPath>~ ); 
		return;
	}
		
	Info( SetValues,ProductID,~<ProductID>~,LayoutName,~<ProductName>~ );
	success = GridLayoutParameters( Open, Layout, CurrentLayoutFilePath, ~~,Info);

}

VOID PatternPathButtonDactions()
{
	Title = Translate( ~Find the Pattern directory~ );
	GridLayoutParameters( GetValue, ~PatternPath~, Path);
	if ( FileDialog( Title,~<title>~,PATH,Path,DefaultFile,~Any File~,Save ) )
	{
		Path = MakePath(type, unc, ~<Path>~);
		GetParentDirectory( Path);
		GridLayoutParameters( SetValue, ~PatternPath~, ~<Path>~);
		dlg( SetControlValue,PatternpathEditText,~<Path>~);

	}
}

VOID LayoutPathButtonDactions()
{
	dlg( GetControlValue,LayoutpathEditText,CurrentVal);
	dlg( GetControlValue,ProductIDField,ProductID);
	if (~<CurrentVal>~ != ~~)
	{
		if (~<ProductID>~ != ~~)
		{
			path = ~<CurrentVal>\<ProductID>~;
			strippedPath = ~<$Str.$path.RemoveDoubleBackSlashes>~;
			Msg = Translate( ~Layouts will be created in <strippedPath>.  It is unusual to change this directory.  Do you want to continue?~ );
			if ( MessageBox( ~<Msg>~,YESNO ) == NO )
			{
				return;
			}
		}
	}



	Title = Translate( ~Find the GridLayouts directory~ );
	GridLayoutParameters( GetValue, ~LayoutPath~, Path);
	if ( FileDialog( Title,~<title>~,PATH,Path,DefaultFile,~Any File~,Save ) )
	{
		Path = MakePath(type, unc, ~<Path>~);
		GetParentDirectory( Path);
		GridLayoutParameters( SetValue, ~LayoutPath~, ~<Path>~);
		dlg( SetControlValue,LayoutpathEditText,~<Path>~);

	}
}


VOID ProductIDDactions()
{
	UpdateRestoreButton(); 
	SetLayoutPathTooltip();
}

VOID SetLayoutPathTooltip()
{
	dlg( GetControlValue,LayoutpathEditText,CurrentVal);
	dlg( GetControlValue,ProductIDField,ProductID);
	if (~<CurrentVal>~ != ~~)
	{
		if (~<ProductID>~ != ~~)
		{
			path = ~<CurrentVal>\<ProductID>~;
			strippedPath = ~<$Str.$path.RemoveDoubleBackSlashes>~;
			dlg( SetValueInCtrlDef, LayoutpathEditText, ~Tooltip~, ~Layouts will be created in <strippedPath>~);
			dlg( SetValueInCtrlDef, LayoutpathButton, ~Tooltip~, ~Layouts will be created in <strippedPath>~);
		}
		else
		{
			dlg( SetValueInCtrlDef, LayoutpathEditText, ~Tooltip~, ~Layouts will not be created because the Product ID has not been specified~);
			dlg( SetValueInCtrlDef, LayoutpathButton, ~Tooltip~, ~Layouts will not be created because the Product ID has not been specified~);
		}
	}
	else
	{
		dlg( SetValueInCtrlDef, LayoutpathEditText, ~Tooltip~, ~Layouts will not be created because the Master Grid Layout Directory has not been specified~);
		dlg( SetValueInCtrlDef, LayoutpathButton, ~Tooltip~, ~Layouts will not be created because the Master Grid Layoyut Directory has not been specified~);
	}
}


VOID GetParentDirectory (&x)
{
	if ( !IsNull( String( EndsWith,~\~,~<x>~ ) ) )
	{
		substr( ~<x>~,0,strlen(~<x>~)-1,x );
	}

	x = ~<$Str.$x.Path>~;
}

NUMERIC DownSize()
{
	dlg( GetControlValue,OpenLEditText,CurrentVal);
	CurrentVal = <CurrentVal> - 1;
	dlg( SetControlValue,OpenLEditText,<CurrentVal>);
	SaveSize();
	return 1;
}

VOID UpdateRestoreButton()
{
	dlg( GetControlDefinitionValue,RestoreButton, Text,OrgText );
	dlg( GetControlValue, ProductIDField, aValue);
	if (GridSettingsAvailable(~<aValue>~))
	{
		dlg( SetControlTitle, RestoreButton, ~<OrgText> <avalue>~);
		dlg( EnableControls, TRUE, RestoreButton);
	}
	else
	{
		dlg( SetControlTitle, RestoreButton, ~No product info for <avalue>~);
		dlg( EnableControls, FALSE, RestoreButton);
	}


}



NUMERIC GetStylePathFromStyleID(ID, StyleFilePathAttr)
{
//	GridLayoutParameters( GetValue, ~NodeStyle:~, ID);
	if (~<ID>~ != ~~ && ~<ID>~ != ~None~)
	{
		theQuery = ~Select ProductLayoutPath From Products Where ID = '<ID>'~;	
		
		if ( !ADO( dBase,Connect,GetValuesFor,~<theQuery>~,StylePath ) ) 
		{
			dBase( GetErrorDescription,theErr );
			Invoke( ShowWarning,Translate(DBMessages,ConnectionFailed,~Products~,~<theErr>~) );
			return FALSE;
		}

//		GridLayoutParameters( SetValue, ~NodeStylePath:~, ~<StylePath>~);
		GridLayoutParameters( SetValue, ~<StyleFilePathAttr>~, ~<StylePath>~);
	}
	else
	{
//		GridLayoutParameters( SetValue, ~NodeStylePath:~, ~~);
		GridLayoutParameters( SetValue, ~<StyleFilePathAttr>~, ~~);
	}
	return TRUE;
}


NUMERIC CheckForValidLayoutPath(ID,LayoutPath)
{
	if ( !Ado( dbase,Connect ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}

	Query = ~Select ProductLayoutPath from Products Where ID = '<ID>'~;

	if ( dBase( GetValuesFor,~<Query>~,ProductLayoutPath ) )
	{
		if (!SimilarStr(~<ProductLayoutPath>~, ~<LayoutPath>~))
		{
			theLayoutPath = ~<ProductLayoutPath>~;
			GetParentDirectory( theLayoutPath);
			Msg = Translate( ~The Product Path in the database for product <ID> is <ProductLayoutPath> but the layouts will be created at <LayoutPath>.  This conflict will cause the Composite Job Generator to fail.  Press Yes if you want to update the Product Path for product <ID> with <LayoutPath>.  Press No to update the Master Grid Layout Directory with <theLayoutPath>, or Press Cancel to do nothing.~ );
			UsersChoice = MessageBox( ~<Msg>~,YESNOCANCEL );
			if (~<UsersChoice>~== CANCEL)
			{
				Warning(~Layouts will not be created~);
				return FALSE;
			}
			else if (~<UsersChoice>~ == YES)
			{
				UpdateCmd = ~UPDATE Products SET ProductLayoutPath = '<LayoutPath>' WHERE ID = '<ID>'~;

				if ( !dbase( CMD,~<UpdateCmd>~ ) )
				{
					dbase( GetErrorDescription,theErr );
					return Warning( Translate( ~Database update failed <Cmd>. <theErr>~ ) );
				}
				return Warning(~The Product Path for Product <ID> has been updated to <LayoutPath>.  Layouts will not be created.  Please review this and retry if correct.~);

			}
			else
			{
				dlg( SetControlValue,LayoutpathEditText,~<theLayoutPath>~);
				GridLayoutParameters( SetValue, ~LayoutPath~, ~<theLayoutPath>~);
				Warning(~The Master Grid Layout Directory has been updated to <theLayoutPath>.  Layouts will not be created.  Please review this and retry if correct.~);
				return FALSE;

			}

		}
		return TRUE;
	}

	return FALSE;

}


NUMERIC CheckIfProductExists(ID)
{
	if ( !Ado( dbase,Connect ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}


	Query = ~Select Multiple,ProductLayoutPath from Products Where ID = '<ID>'~;

	if ( dBase( GetValuesFor,~<Query>~,Multiple,ProductLayoutPath ) )
	{
		return TRUE;
	}

	return FALSE;

}

NUMERIC AddANewProduct( ID,Name,Category,LayoutPath )
{
	if ( !Ado( dbase,Connect ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}

	MultipleLayouts = TRUE;
	ProductType = ~Digital~;

	if ( <MultipleLayouts> )
	{
		Query = ~Select Multiple,ProductLayoutPath from Products Where ID = '<ID>'~;

		if ( dBase( GetValuesFor,~<Query>~,Multiple,ProductLayoutPath ) )
		{
			if ( !<Multiple> )
			{
				return Warning( ~Product <ID> already exists and does not consist of multiple layouts~ );
			}

			if ( !IsNull( ~<ProductLayoutPath>~ ) )
			{
				if ( !SimilarStr( ~<LayoutPath>~,~<ProductLayoutPath>~ ) )
				{
					return Warning( ~Product <ID> already exists as a multiple layout product\nbut the directory is <ProductLayoutPath> rather than <LayoutPath>~ );
				}
			}

			return TRUE;
		}
	}

	Cmd = ~Delete From Products Where ID = '<ID>'~;

	if ( !dbase( CMD,~<Cmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Database update failed <Cmd>. <theErr>~ ) );
	}

	NextSequence = CalcNextSequenceForCategory( dbase,Products,Category,~<Category>~,Sequence );

	UpdateCmd = ~INSERT INTO  Products(ID,LayoutName,Category,Sequence,ProductType,ProductLayoutPath,Multiple)
								Values('<ID>','<Name>','<Category>',<NextSequence>,'<ProductType>','<LayoutPath>',<MultipleLayouts>)~;

	if ( !dbase( CMD,~<UpdateCmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( ~Database update failed <UpdateCmd>. <theErr>~ );
	}

	return TRUE;
}

NUMERIC CalcNextSequenceForCategory( &Connection,Table,CategoryField,NewCategory,SequenceField )
{
	if ( !Connection( CMD,~Select MAX(<SequenceField>) From <Table> Where <CategoryField> = '<NewCategory>'~,MaxSequence ) )
	{
		NextSequence = -1;
	}
	else
	{
		NextSequence = ~<$rs.MaxSequence[#0]>~ == ~~ ? ~-1~ : ~<$rs.MaxSequence[#0]>~;
	}

	return $NextSequence + 1;
}


NUMERIC EditPattern()
{
	if ((~<$App.Name>~ !=~DP1.exe~) && (!GetUserPermissions( LayoutEditing ) ))
	{
		return Warning( Translate(UIMessages,NoPermission) );
	}

	dlg( GetControlValue,OpenLEditText,size);
	GridLayoutParameters( GetValue, PatternPath, PatternPath);

	PatternFilePath = ~<PatternPath>\Pattern.<$Str.$size.%03ld>~;


	Actions = ACTION Doc (  PatternEditorDoc3 Open PatternEditorDoc3 "OpenPattern(~<PatternFilePath>~);" );
	PerformActions( Actions );

	return 1;

	Program = ~<$Sys.Directory>\Notepad.exe~;

	if ( !Files( FileExists,~<Program>~ ) )
	{
		return Warning( ~Could not find NotePad.exe at <Program>~ );
	}

	dlg( GetControlValue,OpenLEditText,size);
	GridLayoutParameters( GetValue, PatternPath, PatternPath);

	PatternFilePath = ~<PatternPath>\Pattern.<$Str.$size.%03ld>~;

	if ( !Files( FileExists,~<PatternFilePath>~ ) )
	{
		return Warning( ~Could not find <PatternFilePath>~ );
	}

	if ( !ShellExecute( Open,~<Program>~,~<PatternFilePath>~ ) )
	{
		GetLastError( ErrorString,theErr );
		return Warning( ~Could not open <<PatternFilePath>>. <theErr>~ );
	}

	return TRUE;
}


// calling params:  category is index field into database,
// options - gencon to update database with
NUMERIC UpdateGridSettings( )
{
	GridLayoutParameters( GetValue, ~BackgroundHeight~, BackgroundHeight);
	GridLayoutParameters( GetValue, ~BackgroundWidth~, BackgroundWidth);
	GridLayoutParameters( GetValue, ~BottomMargin:~, BottomMargin);
	GridLayoutParameters( GetValue, ~TopMargin:~, TopMargin);
	GridLayoutParameters( GetValue, ~HoldAspectRatio:~, HoldAspectRatio);
	GridLayoutParameters( GetValue, ~HorizGap:~, HorizGap);
	GridLayoutParameters( GetValue, ~VertGap:~, VertGap);
	GridLayoutParameters( GetValue, ~IsImageNode:~, IsImageNode);
	GridLayoutParameters( GetValue, ~IsTextNode:~, IsTextNode);
	GridLayoutParameters( GetValue, ~LeftMargin:~, LeftMargin);.
	GridLayoutParameters( GetValue, ~MaxHeight:~, MaxHeight);
	GridLayoutParameters( GetValue, ~MaxWidth:~, MaxWidth);
	GridLayoutParameters( GetValue, ~NodeStyle:~, NodeStyle);
	GridLayoutParameters( GetValue, ~NodeStyleText:~, NodeStyleText);
	GridLayoutParameters( GetValue, ~NodeStyleIcon:~, NodeStyleIcon);
	GridLayoutParameters( GetValue, ~NodeStyleIPlusT:~, NodeStyleIPlusT);
	GridLayoutParameters( GetValue, ~RightMargin:~, RightMargin);
	GridLayoutParameters( GetValue, ~TextHeight:~, TextHeight);
	GridLayoutParameters( GetValue, ~TextLeft:~, TextLeft);
	GridLayoutParameters( GetValue, ~TextTop:~, TextTop);
	GridLayoutParameters( GetValue, ~TextWidth:~, TextWidth);
	GridLayoutParameters( GetValue, ~PatternPath~, PatternPath);
	GridLayoutParameters( GetValue, ~LayoutPath~, ProductLayoutPath);
	GridLayoutParameters( GetValue, ~ProductID:~, ProductID);
	GridLayoutParameters( GetValue, ~BackgroundImageFilePath:~, BackgroundImageFilePath);
	GridLayoutParameters( GetValue, ~Units~, Units);

	Key = ~ID = '<ProductID>'~;

	Query = ~Select * From GridDefinition Where <Key>~;

	if ( Ado( dbase,Connect ) )
	{
		Cmd = ~Delete From GridDefinition Where ID = '<ProductID>'~;
		if ( !dbase( CMD,~<Cmd>~ ) )
		{
			dbase( GetErrorDescription,theErr );
			return Warning( Translate( ~Database update failed <Cmd>. <theErr>~ ) );
		}
	}

	else
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate(DBMessages,ConnectionFailed,~GridDefinition~,~<theErr>~) );
		return FALSE;
	}

	UpdateCmd = ~INSERT INTO  GridDefinition(ID,BackgroundHeight,BackgroundWidth,BottomMargin,HoldAspectRatio,
							HorizGap, IsImageNode, IsTextNode, ProductLayoutPath, LeftMargin, MaxHeight, MaxWidth,  
							RightMargin, TextHeight, TextLeft,TextTop ,TextWidth , TopMargin,VertGap,PatternPath,NodeStyle,NodeStyleText,NodeStyleIcon, NodeStyleIPlusT, BackgroundImageFilePath,Units)

						Values('<ProductID>','<BackgroundHeight>','<BackgroundWidth>','<BottomMargin>','<HoldAspectRatio>',
						'<HorizGap>','<IsImageNode>', '<IsTextNode>','<ProductLayoutPath>','<LeftMargin>','<MaxHeight>','<MaxWidth>',
						'<RightMargin>','<TextHeight>','<TextLeft>','<TextTop>','<TextWidth>','<TopMargin>','<VertGap>','<PatternPath>','<NodeStyle>','<NodeStyleText>','<NodeStyleIcon>','<NodeStyleIPlusT>','<BackgroundImageFilePath>','<Units>')~;



	if ( !dbase( CMD,~<UpdateCmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( ~Database update failed <UpdateCmd>. <theErr>~ );
	}

	return TRUE;
}

NUMERIC RestoreGridSettingsW()
{
	dlg( GetControlValue, ProductIDField, aValue);

	Msg = Translate( ~This will replace values with values for product <aValue>.  Do you want to continue?~ );
	if ( MessageBox( ~<Msg>~,YESNO ) == NO )
	{
		return TRUE;
	}
	RestoreGridSettings(0);
	return TRUE;
}

VOID UpdateOpenButton()
{
	dlg( GetControlValue, OpenLEditText, curSize);
	GridLayoutParameters( SetValue, ~StartSize~, ~<curSize>~);
	dlg( SetControlTitle, OpenButton2, ~Open <curSize>~);
	dlg( SetValueInCtrlDef, OpenButton2, ~Tooltip~, ~Open a previously created layout of size <curSize>.  Layouts will not be created.~);

}



NUMERIC KillFocusActions(Text)
{
	Msg = Translate( ~You have just double clicked the <Text>.~ );
	StatusBarText( Translate( ~ <Msg>~ ) );
	return TRUE;
}


NUMERIC GridSettingsAvailable(ProductID )
{
	if (~<ProductID>~ != ~~)
	{
		Query = ~Select *	From GridDefinition Where ID = '<ProductID>'~;
		if ( PGenConList( List, Connect, Cursor, Forward, GetExistingRecordFor,~<Query>~,Item))
		{
			return TRUE;
		}
	}
	return FALSE;
}



// calling params:  category is index field into database,
// options - gencon to update database with
NUMERIC RestoreGridSettings( FirstTime)
{

	dlg( GetInput );
	GridLayoutParameters(GetValue, ~ProductID:~, ProductID);

	if (~<ProductID>~ != ~~)
	{
		Query = ~Select *	From GridDefinition Where ID = '<ProductID>'~;
		if ( PGenConList( List, Connect, Cursor, Forward, GetExistingRecordFor,~<Query>~,Item))
		{
			GridLayoutParameters( SetValue, ~BackgroundHeight~, ~<$pcon.Item[BackgroundHeight]>~);
			GridLayoutParameters( SetValue, ~BackgroundWidth~, ~<$pcon.Item[BackgroundWidth]>~);
			GridLayoutParameters( SetValue, ~BottomMargin:~, ~<$pcon.Item[BottomMargin]>~);
			GridLayoutParameters( SetValue, ~TopMargin:~, ~<$pcon.Item[TopMargin]>~);
			GridLayoutParameters( SetValue, ~HoldAspectRatio:~, ~<$pcon.Item[HoldAspectRatio]>~);
			GridLayoutParameters( SetValue, ~HorizGap:~, ~<$pcon.Item[HorizGap]>~);
			GridLayoutParameters( SetValue, ~VertGap:~, ~<$pcon.Item[VertGap]>~);
			GridLayoutParameters( SetValue, ~IsImageNode:~, ~<$pcon.Item[IsImageNode]>~);
			GridLayoutParameters( SetValue, ~IsTextNode:~, ~<$pcon.Item[IsTextNode]>~);
			GridLayoutParameters( SetValue, ~LeftMargin:~, ~<$pcon.Item[LeftMargin]>~);.
			GridLayoutParameters( SetValue, ~MaxHeight:~, ~<$pcon.Item[MaxHeight]>~);
			GridLayoutParameters( SetValue, ~MaxWidth:~, ~<$pcon.Item[MaxWidth]>~);
			GridLayoutParameters( SetValue, ~NodeStyle:~, ~<$pcon.Item[NodeStyle]>~);
			if ( IsNull( ~<NodeStyle>~ ) )
			{
				GridLayoutParameters( SetValue, ~NodeStyle:~, ~None~);
			}

			GridLayoutParameters( SetValue, ~NodeStyleText:~, ~<$pcon.Item[NodeStyleText]>~);
			if ( IsNull( ~<NodeStyleText>~ ) )
			{
				GridLayoutParameters( SetValue, ~NodeStyleText:~, ~None~);
			}

			GridLayoutParameters( SetValue, ~NodeStyleIcon:~, ~<$pcon.Item[NodeStyleIcon]>~);
			if ( IsNull( ~<NodeStyleIcon>~ ) )
			{
				GridLayoutParameters( SetValue, ~NodeStyleIcon:~, ~None~);
			}
			GridLayoutParameters( SetValue, ~NodeStyleIPlusT:~, ~<$pcon.Item[NodeStyleIPlusT]>~);
			if ( IsNull( ~<NodeStyleIPlusT>~ ) )
			{
				GridLayoutParameters( SetValue, ~NodeStyleIPlusT:~, ~None~);
			}
			GridLayoutParameters( SetValue, ~RightMargin:~, ~<$pcon.Item[RightMargin]>~);
			GridLayoutParameters( SetValue, ~TextHeight:~, ~<$pcon.Item[TextHeight]>~);
			GridLayoutParameters( SetValue, ~TextLeft:~, ~<$pcon.Item[TextLeft]>~);
			GridLayoutParameters( SetValue, ~TextTop:~, ~<$pcon.Item[TextTop]>~);
			GridLayoutParameters( SetValue, ~TextWidth:~, ~<$pcon.Item[TextWidth]>~);
			GridLayoutParameters( SetValue, ~PatternPath~, ~<$pcon.Item[PatternPath]>~);
			GridLayoutParameters( SetValue, ~Units~, ~<$pcon.Item[Units]>~);

			// Dialog box shows parent directory of layout path
			theLayoutPath = ~<$pcon.Item[ProductLayoutPath]>~;
			GetParentDirectory( theLayoutPath);
			GridLayoutParameters( SetValue, ~LayoutPath~, ~<theLayoutPath>~);

			//GridLayoutParameters( SetValue, ~LayoutPath~, ~<$pcon.Item[ProductLayoutPath]>~);
			GridLayoutParameters( SetValue, ~BackgroundImageFilePath:~, ~<$pcon.Item[BackgroundImageFilePath]>~);
		}
		else
		{
			// List( GetErrorDescription,theErr );

			if (~<aValue>~ != ~~)
			{
				Msg = Translate( ~Info for product <ProductID> does not exist.  Do you want to load previous settings?~ );
				if ( MessageBox( ~<Msg>~,YESNO ) == NO )
				{
					return TRUE;
				}
				GetUsersSettings( ~GridLayoutParameters~,GridLayoutParameters );
				GridLayoutParameters( GetValue, ~LayoutPath~, theLayoutPath);
				GetParentDirectory( theLayoutPath);
				GridLayoutParameters( SetValue, ~LayoutPath~, ~<theLayoutPath>~);
			}
		}
	}
	else
	{
		if (<FirstTime> == 0)
		{
			Msg = Translate( ~Product ID is blank.  Do you want to load your previous settings?~ );
			if ( MessageBox( ~<Msg>~,YESNO ) == YES )
			{
				GetUsersSettings( ~GridLayoutParameters~,GridLayoutParameters );
				GridLayoutParameters( GetValue, ~LayoutPath~, theLayoutPath);
				GetParentDirectory( theLayoutPath);
				GridLayoutParameters( SetValue, ~LayoutPath~, ~<theLayoutPath>~);
			}
		}
		else
		{
			GetUsersSettings( ~GridLayoutParameters~,GridLayoutParameters );
			GridLayoutParameters( GetValue, ~LayoutPath~, theLayoutPath);
			GetParentDirectory( theLayoutPath);
			GridLayoutParameters( SetValue, ~LayoutPath~, ~<theLayoutPath>~);
		}
	}


	dlg( Update );
	EnableTextRightOffsetEditText();
	EnableTextWidthText();
	EnableTextTopOffsetEditText();
	EnableTextHeightBox();

	return TRUE;
}

NUMERIC GetUsersSettings( Category,&Options )
{
	StatusBarText( Translate( ~Loading <Category> Settings for <$App.UserName>~ ) );

	Query = ~Select * From Settings Where UserName = '<$App.UserName>' AND Category = '<Category>' AND Enabled <> 0~;

	if ( !PGenConList( List,Connect,BeginTransaction,Cursor,Static,Lock,Optimistic,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Log( Session,Translate( ~Query Failed: <Query>. <theErr>~) );
	}

	Field = -1;

	while ( Options( Attribute,<++Field>,Name ) )
	{
		List( Filter,~Item = '<Name>'~ );

		if ( List( GetFirst,Setting ) )
		{
			Options( SetValue,~<Name>~,~<$pcon.Setting[SettingsText]>~ );
		}
		else
		{
			List( AddNew,Setting );
			Setting( Set,UserName,~<$App.UserName>~,Category,~<Category>~,Item,~<Name>~,SettingsText,~<$con.Options[<Name>]>~,Enabled,1 );	
			List( Update );	
		}	
	}

	List( CommitTransaction );

	return TRUE;
}

VOID SelectSize( Path,Num )
{
	if ( Defined(dlg) )
	{
		MyPath = ~~;
		dlg( GetControlValue,PatternpathEditText, MyPath);
		if (~<MyPath>~ != ~<Path>~)
		{
			Msg = Translate( ~Do you want to change the pattern directory to <Path>?~ );
			if ( MessageBox( ~<Msg>~,YESNO ) == NO )
			{
				return;
			}
		}
		dlg( SetStrings,PatternPath,~<Path>~,StartSize,<Num>);
	}
}

VOID UpdateUnits2()
{
	// before it changed
	dlg( GetControlValue,UnitsComboBox, NewUnits); 

	dlg( SetControlValue, UnitsComboBox, NewUnits);

	ConvertControls(~<OldUnits>~, ~<NewUnits>~);

	UpdateUnits(~<NewUnits>~);
}

// update the static text 'cm.' items
VOID UpdateUnits(CurrentUnits)
{
	if (~<CurrentUnits>~ == ~Inches~)
	{
		SetUnitsFields(~in.~);
	}
	else 	if (~<CurrentUnits>~ == ~Centimeters~)
	{
		SetUnitsFields(~cm.~);
	}
	else 	if (~<CurrentUnits>~ == ~Millimeters~)
	{
		SetUnitsFields(~mm.~);
	}

	OldUnits = ~<CurrentUnits>~;
	Global(OldUnits);
}

VOID SetUnitsFields(UnitsValue)
{
	dlg( SetControlValue, BGWUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, BGHUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, LeftMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, RightMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, TopMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, BottomMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, HorizGapUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, VertGapUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, AspectRatioWidthUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, AspectRatioHeightUnitsStatic, ~<UnitsValue>~);
}



VOID ConvertControls( PrevUnits, UnitsValue)
{
	if (~<PrevUnits>~ == ~<UnitsValue>~)
	{
		return;
	}
	if (~<PrevUnits>~ == ~Inches~)
	{
		if (~<UnitsValue>~ == ~Millimeters~)
		{
			// Inches to Millimeters
			Conversion = 25.4;
		}
		else if (~<UnitsValue>~ == ~Centimeters~)
		{
			// Inches to Centimeters
			Conversion = 2.54;
		}
	}
	else if (~<PrevUnits>~ == Centimeters)
	{
		if (~<UnitsValue>~ == ~Millimeters~)
		{
			// Centimeters to Millimeters
			Conversion = 10.0;
		}
		else if (~<UnitsValue>~ == ~Inches~)
		{
			// Centimeters to Inches
			Conversion = 1.0/2.54;
		}
	}
	else if (~<PrevUnits>~ == Millimeters)
	{
		if (~<UnitsValue>~ == ~Inches~)
		{	
			Conversion = 1.0/25.4;
		}
		else if (~<UnitsValue>~ == ~Centimeters~)
		{
			// Millimeters to Centimeters
			Conversion = 0.1;
		}
	}
	

	SetUnitsConversionFields(BGWEditText, <Conversion>);
	SetUnitsConversionFields(BGHEditText, <Conversion>);
	SetUnitsConversionFields(LeftMarginEditText, <Conversion>);
	SetUnitsConversionFields(RightMarginEditText, <Conversion>);
	SetUnitsConversionFields(TopMarginEditText, <Conversion>);
	SetUnitsConversionFields(BottomMarginEditText, <Conversion>);
	SetUnitsConversionFields(HorizGapEdit, <Conversion>);
	SetUnitsConversionFields(VertGapEdit, <Conversion>);
	SetUnitsConversionFields(AspectRatioWidthEdit, <Conversion>);
	SetUnitsConversionFields(AspectRatioHeightEdit, <Conversion>);
}


VOID SetUnitsConversionFields(ControlName, Conversion)
{
	dlg(GetControlValue , ~<ControlName>~, aValue);
	aValue = <aValue>*<Conversion>; 
	dlg(SetControlValue , ~<ControlName>~, ~<aValue>~);

}

// Convert from centimeters or millimeters to inches
// The Units field is also reset to ~Inches~
VOID ConvertUnits( &GridLayoutParameters)
{
	GridLayoutParameters( GetValue, Units, theUnits);
	if (~<theUnits>~ == ~Inches~)
	{
		return;
	}
	if (~<theUnits>~ == ~Centimeters~)
	{
		ConversionFactor = 1.0 / 2.54;
	}

	else if (~<theUnits>~ == ~Millimeters~)
	{
		ConversionFactor = 1.0 / 25.4;
	}

	X = <ConversionFactor> * NUMERIC( ~<$Con.GridLayoutParameters[LeftMargin:]>~);
	GridLayoutParameters( SetValue, ~LeftMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[TopMargin:]>~);
	GridLayoutParameters( SetValue, ~TopMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[RightMargin:]>~);
	GridLayoutParameters( SetValue, ~RightMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[BottomMargin:]>~);
	GridLayoutParameters( SetValue, ~BottomMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[HorizGap:]>~);
	GridLayoutParameters( SetValue, ~HorizGap:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[VertGap:]>~);
	GridLayoutParameters( SetValue, ~VertGap:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[BackgroundWidth]>~);
	GridLayoutParameters( SetValue, ~BackgroundWidth~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[BackgroundHeight]>~);
	GridLayoutParameters( SetValue, ~BackgroundHeight~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[MaxWidth:]>~);
	GridLayoutParameters( SetValue, ~MaxWidth:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[MaxHeight:]>~);
	GridLayoutParameters( SetValue, ~MaxHeight:~, <X>);

	GridLayoutParameters( SetValue, ~Units~, ~Inches~);


}