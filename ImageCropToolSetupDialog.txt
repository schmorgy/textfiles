DialogWidth = 300;
DialogHeight = 300;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 200;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;
hGap = vGap = 5;


EditTextWidth = 50;
EditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 50;
ButtonHeight = 20; 
VerticalSeparation = 30;
InitialVerticalPosition = 70;

// look up a GenCon called ImageCropToolParameters on the tree and refer to it as ImageCropToolParameters inside this script

GenCon(ImageCropToolParameters,GetGenCon,ImageCropToolParameters);

if ( !Tree( Name,ImageCropsList,Location,~[STRINGS]~,Exists ) )
{
	StringList: Name ImageCropsList
			Fields:	String	~Predefined~
	Hang:	ImageCropsList	~[STRINGS]~ ;
}


VOID CreateDialog()
{
	Define: ImageCropToolSetupDialog Using DDWinDef
	fields: Position 250 100 <DialogWidth> <DialogHeight>
			Title ~Image Crop Tool Properties~
			TypeName ~Dialog~
			OActionsText ACTION EXEC ( CancelPressed() )
			HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "Image Crop Tool.htm" )

	Contains: INLISTORDER
	{

		ypos = 10;
		Define: ZZRectExpansionTypeGroupBox Using DDWinCtrlDef AsSymbol RectExpansionTypeGroupBox
		fields:	TypeName GroupBox
				Text ~Style~
				Position $LeftMargin <ypos> 250  70;

		Define: NormalRadioButton Using DDWinCtrlDef AsSymbol NormalRadioButton
		fields: TypeName RadioButton  
				Position $LeftMargin + 10 , RectExpansionTypeGroupBox(GetTop,position) + $vGap * 3 ,220 ,20 
				IActionsText ~[Get]~
				DActionsText	~[
								CheckButton(NormalRadioButton) 
								UncheckButton(ConstantAspectRatioRadioButton) 
								Disable(WidthEditText)
								Disable(HeightEditText)
								Disable(CropChoicesComboBox)
								Save
								]~
				OActionsText ~[Save]~
				GenConName ImageCropToolParameters
				GenConField ~Style~
				RadioTrueValue ~N~
 				Text ~Normal~
				Tooltip ~Draw an expanding rectangle~;

		Define: ConstantAspectRatioRadioButton Using DDWinCtrlDef AsSymbol ConstantAspectRatioRadioButton
		fields: TypeName RadioButton  
				Position $LeftMargin + 10 ,  NormalRadioButton(GetBottom,position) + $vGap ,220 ,20 
				IActionsText ~[Get]~
				DActionsText	~[
								CheckButton(ConstantAspectRatioRadioButton) 
								UncheckButton(NormalRadioButton)
								Enable(WidthEditText)
								Enable(HeightEditText)
								Enable(CropChoicesComboBox);
								Save
								]~
				OActionsText ~[Save]~
				GenConName ImageCropToolParameters
				GenConField ~Style~
				RadioTrueValue ~C~
 				Text ~Constrain Aspect Ratio~
				Tooltip ~Draw an expanding rectangle holding the aspect ratio constant (using the ratio of width to length below)~;

		Define: WidthStaticText Using DDWinCtrlDef AsSymbol WidthStaticText
		fields:	TypeName StaticText
				Text ~Width:~
				Position $LeftMargin + 10, RectExpansionTypeGroupBox(GetBottom,position) + $vGap + 5, $StaticTextWidth,  20;
		Define: WidthEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Text ~Width:~
				Position (WidthStaticText(GetRight,Position) + $hGap) RectExpansionTypeGroupBox(GetBottom,position) + $vGap 80 20
				GenConName ImageCropToolParameters
				GenConField ~Width~
				IActionsText ~[GET]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip		Translate( ~The width to use for the constrained aspect ratio.~ )
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				IsEnabled (~<$con.ImageCropToolParameters[Style]>~ != N) ? T : F;

		Define: HeightStaticText Using DDWinCtrlDef AsSymbol HeightStaticText
		fields:	TypeName StaticText
				Text ~Length:~
				Position $LeftMargin + 10, WidthStaticText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: HeightEditText Using DDWinCtrlDef AsSymbol HeightEditText
		fields:	TypeName MaskedEditText
				Position (HeightStaticText(GetRight,Position) + $hGap) HeightStaticText(GetY,position) 80 20
				GenConName ImageCropToolParameters
				GenConField ~Height~
				IActionsText ~[GET]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip		Translate( ~The height to use for the constrained aspect ratio.~ )
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				IsEnabled (~<$con.ImageCropToolParameters[Style]>~ != N) ? T : F;

		Define: CropChoicesStaticText Using DDWinCtrlDef AsSymbol CropChoicesStaticText
		fields:	TypeName StaticText
				Text ~Crop:~
				Position $LeftMargin + 10, HeightStaticText(GetBottom,position) + $vGap , $StaticTextWidth , 20

		Define: CropChoicesComboBox Using DDWinCtrlDef AsSymbol CropChoicesComboBox
		fields:	TypeName SComboBox
				Position (CropChoicesStaticText(GetRight,Position) + $hGap) (CropChoicesStaticText(GetY,position))  <ComboBoxWidth> <ComboBoxHeight>
				GenConName ImageCropToolParameters
				GenConField ~CropName~
				IActionsText ~[GetList(ImageCropsList) Get]~
				//IActionsText	ACTIONS ( UpdateList(ImageCropsList "Select Name From Crops" Name) GetList(ImageCropsList) Get )
				DropDownActionsText ACTIONS ( UpdateList(ImageCropsList "Select Name From Crops" Name) GetList(ImageCropsList) Get "Exec(LookupWidthAndHeight();)" )
				DActionsText ACTION EXEC ( LookupWidthAndHeight() )
				OActionsText ~[Save]~
				Tooltip		Translate( ~Select the aspect ratio from the CropWidth and CropLength in the predefined crops~ )
				IsEnabled T;

		Define: EditCrops_Button Using DDWinCtrlDef AsSymbol EditCrops_Button 
			Fields:	TypeName		Button
					Text			Translate( ~?~ )
					Position		CropChoicesComboBox(GetRight,Position) + $hGap,
									CropChoicesComboBox(GetTop,Position),
									<ButtonHeight>,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnEditCrops() ) 
					Tooltip			Translate( ~Edit the predefined crops~ );

		Define: SampleSizeStaticText Using DDWinCtrlDef AsSymbol SampleSizeStaticText
		fields:	TypeName StaticText
				Text ~SampleSize:~
				Position $LeftMargin + 10, CropChoicesStaticText(GetBottom,position) + ($vGap * 3) , $StaticTextWidth , 20

		Define: SampleSizeComboBox Using DDWinCtrlDef AsSymbol SampleSizeComboBox
		fields:	TypeName SComboBox
				Position (SampleSizeStaticText(GetRight,Position) + $hGap) (SampleSizeStaticText(GetY,position))  <ComboBoxWidth> <ComboBoxHeight>
				GenConName ImageCropToolParameters
				GenConField ~SampleSize~
				IActionsText ~[GetList(SampleSizeChoices) Get]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip		Translate( ~Select the size of the area under the cursor to average when showing the RGB values in an image~ )
				IsEnabled T;

		Define: ZoomPercentageStaticText Using DDWinCtrlDef AsSymbol ZoomPercentageStaticText
		fields:	TypeName StaticText
				Text ~Zoom Percentage:~
				Position $LeftMargin + 10, SampleSizeStaticText(GetBottom,position) + $vGap + 5, $StaticTextWidth,  20;
		Define: ZoomPercentageEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position (ZoomPercentageStaticText(GetRight,Position) + $hGap) ZoomPercentageStaticText(GetTop,position) 80 20
				GenConName ImageCropToolParameters
				GenConField ~ImageCropZoomPercentage~
				IActionsText ~[GET]~
				DActionsText ~[Save]~
				OActionsText ~[Save]~
				Tooltip		Translate( ~Enter a Percentage reduction or expansion of crop rectangle.  A typical value should be 5 or 10 percent.~ )
				Mask		 ~########~
				AllowedChars ~.~
				PromptChar	 ~ ~		

		Define: OKButton Using DDWinCtrlDef AsSymbol OKButton
		fields:	TypeName DefaultButton
				Text ~OK~
				Position <DialogWidth> - 80 , ZoomPercentageStaticText(GetTop,position) + $vGap + 30,  <SmallButtonWidth> , <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( Done() )
				OActionsText ~[NULL]~
				Tooltip ~Save values~;

	}

	ypos = OKButton(GetBottom,Position) + 50;

	if ( !Defined(dlg) )
	{
		ImageCropToolSetupDialog(Set,Position,~350 20 <DialogWidth> <ypos> ~);
		GenDlg( dlg,Definition,ImageCropToolSetupDialog,Data,ImageCropToolParameters,Document,$Doc.This,New,Temporary );
		Global( dlg );
	}

	else
	{
		dlg (SetFocus);
	}

	ImageCropToolParameters( GetValue, Style, theStyle);
	if (~<theStyle>~ == ~N~)
	{
		dlg( EnableControls, FALSE, CropChoicesComboBox);
	}
	else
	{
		dlg( EnableControls, TRUE, CropChoicesComboBox);
	}

}


Include: ~UpdateUserSettings~;

VOID Done()
{
	dlg( GetInput );

	UpdateUserSettings( ImageCropToolParameters,ImageCropToolParameters );
	
	dlg( End );
	Exit();
}





VOID CancelPressed()
{
	dlg( End );
	Exit();
}

VOID ReOpen()
{
	dlg( SetFocus );
}



NUMERIC LookupWidthAndHeight()
{
	dlg( GetInput );

	CropName = ~<$Con.ImageCropToolParameters[CropName]>~;

	if ( DefinedAndNotNull(CropName) )
	{

		Query = ~Select CropWidth,CropLength From Crops Where Name = '<CropName>'~;

		if ( !ADO( dBase,Connect,GetValuesFor,~<Query>~,Width,Height ) )
		{
			return Warning( Translate( ~There are no Crops defined~ ) );
		}

		ImageCropToolParameters( SetValue,Width,~<Width>~ );
		ImageCropToolParameters( SetValue,Height,~<Height>~ );

		return dlg( Update );
	}

	return FALSE;
}


VOID OnEditCrops()
{
	Query = STR ( SELECT * From Crops Order By Name );

	Actions = ACTION Doc ( ~Crops~ OpenOnce CropsDoc "Init( ~~,~<Query>~ );" );

	PerformActions( Actions );
}




CreateDialog();



