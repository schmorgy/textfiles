

NUMERIC RefreshListView( Requery )
{
	if ( FilmDrivesDataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	FilmDrivesDataWindow( RefreshWindow );

	return TRUE;
}


STR GetKey( &FilmDrive )
{
	return ~Name = '<$con.FilmDrive[Name]>'~;
}


NUMERIC ChangeField()
{
}


NUMERIC ChangeRecord()
{
	if ( !FilmDrivesDataView( GetChangedRow,ChangedSetting,OrigSetting,ChangedRow,IsNewRow ) )
		{ return Warning( ~There was no changed row.~ ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$con.ChangedSetting[Name]>~ == ~~ )
		{ return Warning( ~Unable to save pending changes.  Name cannot be blank.~ ); }

	Key = STR ( ID = '<$con.OrigSetting[ID]>' );
	
	Query = ~Select * From FilmDrives Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	if ( !List( UpdateFrom,ChangedSetting,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( ~Could not update Film Drive record where <Key>. <theErr>~ );
	}

	FilmDrivesDataView( CommitChanges );
	
	return TRUE;
}


NUMERIC DeleteRecord()
{
	if ( !FilmDrivesDataView( GetSelectedRows,FilmDrivesToDelete ) )		
		{ return Warning( ~There was no row selected to delete~ ); }

	if ( MessageBox( ~Are you sure you want to delete the selected items?~,YESNO ) != YES )
		{ return FALSE; }

	StringList( RowsToDelete,New );

	while ( FilmDrivesToDelete( GetNext,Setting ) )
	{
		Key = GetKey( Setting );

		if ( !db( CMD,~Delete From FilmDrives Where <Key>~ ) )
		{
			db( GetErrorDescription,theErr,RollBackTransaction );
			Warning( ~Could not delete Setting where Setting = <$con.Setting[Setting]>. <theErr>~ );
			break;
		}

		RowsToDelete( AddString,FilmDrivesToDelete(GetCurrentPosition) );
	}

	FilmDrivesDataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}


NUMERIC AddRecord()
{
	GenCon( NewRow,NewFrom,FilmDrivesList(GetDataDictionary) );

	//NewRow( Set,Baud,~4800~ );
	NewRow( Setvalues,Baud,~4800~,Parity,~Odd~ );
	
	RowBeingAdded = FilmDrivesDataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( ~You are too low on memory to add any more rows~ ); }

	FilmDrivesDataView( SetActiveCell,<RowBeingAdded>,Setting );

	return TRUE;
}





NUMERIC RightClickInListView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( ~There was no active view~ ); }

	ActiveView( DisplayMenu,FilmDrivesListViewMenu );

	return TRUE;
}


NUMERIC NotImplementedYet( what )
{
	MessageBox( ~<what> is not implemented yet!~ );
	return TRUE;
}



NUMERIC Init( WhichFilmDrives,Query )
{
	if ( !PGenConList( FilmDrivesList,Connect,Cursor,Dynamic,QUERY,~<Query>~ ) )
		{ Error( ~Failed to query the FilmDrives table~ ); }

	SetDocumentData( FilmDrivesList(GetObject) );

	Global( WhichFilmDrives,FilmDrivesList );

	if ( !FilmDrivesDataWindow( CreateWindow,~FilmDrives~ ) )
		{ Error( ~Failed to create the window~ ); }

	return TRUE;
}


NUMERIC OnCloseFilmDrivesDataView()
{
	if ( FilmDrivesDataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	FilmDrivesDataWindow( ForceCloseWindow );
	return TRUE;
}


NUMERIC SaveAllChanges()
{
	while ( FilmDrivesDataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !FilmDrivesDataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new film drives that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( FilmDrivesDataView( PendingChanges ) )
	{
		FilmDrivesDataView( RollBackChanges );
	}

	return TRUE;
}

if ( !GenCon( FilmDrivesTableDefinition,GetFrom,FilmDrives,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The FilmDrives Table is not properly defined~ ); }
	
if ( !ado( db,CONNECT ) )
	{ Error( ~Could not open Database to access the FilmDrives Table~ ); }	

Define:	FilmDrivesListViewMenu Using DDMenuDef AsSymbol FilmDrivesListViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{
		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add Film Drive~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )

		Define:	NULL1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

		Define:	DeleteRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Delete~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )
	}

Define: FilmDrivesDataWindow Using DDWinDef
	Fields:		Title					~FilmDrive Choices~
				Position				0 0 100 25
				IsPositionPercent		T

	Contains:	INLISTORDER
	{
		Define: FilmDrivesDataView Using DDViewDef AsSymbol FilmDrivesDataView
			Fields:	ViewType				~ListView~
					GridControlTypes		FilmDrivesTableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "FilmDrivesData.htm" )
					CloseActionsText		ACTION Call ( OnCloseFilmDrivesDataView() ) ;
	}
	

