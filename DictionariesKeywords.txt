//	THIS FILE CONTAINS THE DICTIONARIES FOR HOLDING 
//	KEYWORD INFORMATION.

Dictionary:	DDFileType
	Fields:	Name		~INTID:~				Type		long
	Fields:	Name		Layout					Type		char	Length		1
	Fields:	Name		Job						Type		char	Length		1
	Fields:	Name		DisplayOutputPrompt		Type		char	Length		1
	Fields:	Name		NoDisplayOutputPrompt	Type		char	Length		1
	Fields:	Name		RunOnInputComplete		Type		char	Length		1
	Fields:	Name		NoRunOnInputComplete	Type		char	Length		1
	Fields:	Name		CloseOnRun				Type		char	Length		1
	Fields:	Name		NoCloseOnRun			Type		char	Length		1
	Fields:	Name		SaveOnClose				Type		char	Length		1
	Fields:	Name		NoSaveOnClose			Type		char	Length		1
	Fields:	Name		Compose					Type		char	Length		1
	Fields:	Name		PromptForSaveOnClose	Type		char	Length		1
	Fields:	Name		NoPromptForSaveOnClose	Type		char	Length		1
	Fields:	Name		AlwaysOpenFromQueue		Type		char	Length		1
	Fields:	Name		NoAlwaysOpenFromQueue	Type		char	Length		1
	Fields:	Name		NeverOpenFromQueue		Type		char	Length		1
	Fields:	Name		NoNeverOpenFromQueue	Type		char	Length		1
	Fields:	Name		PreviewImages			Type		char	Length		1
	Fields:	Name		NoPreviewImages			Type		char	Length		1
	Fields:	Name		PreviewMasks			Type		char	Length		1
	Fields:	Name 		NoPreviewMasks			Type		char	Length		1
  

Dictionary:	DDImageAndTextNode ForceAttrNameUpper
	Fields: Name	~INTID:~					Type	long
	Fields: Name	~NodeName:~					Type	text
	Fields:	Name	~PreviousCorrections~		Type	reference	// GenCon type is DDImgCorrections
	Fields:	Name	~LatestCorrections~			Type	long		// GenCon type is DDImgCorrections
	Fields:	Name	~PreviousFrameCorrections~	Type	reference	// GenCon type is DDImgCorrections
	Fields:	Name	~LatestFrameCorrections~	Type	long		// GenCon type is DDImgCorrections
	Fields:	Name	~PreviousTextureCorrections~	Type	reference	// GenCon type is DDImgCorrections
	Fields:	Name	~LatestTextureCorrections~	Type	long		// GenCon type is DDImgCorrections
	Fields: Name	~ActualCropRect~			Type	Multitype  // Used in CInterpreter script in left,top,right,bottom format
	Contains:
	{
		Fields: Name	~ACRX:~				Type	double	Precision   10     Scale     6
		Fields: Name	~ACRY:~				Type	double	Precision   10     Scale     6
		Fields: Name	~ACRWidth:~			Type	double	Precision   10     Scale     6
		Fields: Name	~ACRHeight:~		Type	double	Precision   10     Scale     6
	}

	Fields: Name	~ActualCropRectWithoutAutocrop~	Type	Multitype  // Used in CInterpreter script in left,top,right,bottom format
	Contains:
	{
		Fields: Name	~AWCRX:~				Type	double	Precision   10     Scale     6
		Fields: Name	~AWCRY:~				Type	double	Precision   10     Scale     6
		Fields: Name	~AWCRWidth:~			Type	double	Precision   10     Scale     6
		Fields: Name	~AWCRHeight:~			Type	double	Precision   10     Scale     6
	}

	Fields: Name	~LateResolveNodeNumber~	Type	text  
	Fields: Name	~PasteOffset~			Type	Multitype  // Defines offset from ILocation to do the paste operation
	Contains:
	{
		Fields: Name	~PX~				Type	double	Precision   10     Scale     6 // temporary, where the image is located, before IRotation
		Fields: Name	~PY~				Type	double	Precision   10     Scale     6
		Fields: Name	~PW~				Type	double	Precision   10     Scale     6
		Fields: Name	~PH~				Type	double	Precision   10     Scale     6
	}
	Fields: Name	~LogoOffset1~			Type	Multitype  // Defines position of a logo
	Contains:
	{
		Fields: Name	~LX1~				Type	double	Precision   10     Scale     6
		Fields: Name	~LY1~				Type	double	Precision   10     Scale     6
		Fields: Name	~LW1~				Type	double	Precision   10     Scale     6
		Fields: Name	~LH1~				Type	double	Precision   10     Scale     6
	}
	Fields: Name	~LogoOffset2~			Type	Multitype  // Defines position of a logo
	Contains:
	{
		Fields: Name	~LX2~				Type	double	Precision   10     Scale     6
		Fields: Name	~LY2~				Type	double	Precision   10     Scale     6
		Fields: Name	~LW2~				Type	double	Precision   10     Scale     6
		Fields: Name	~LH2~				Type	double	Precision   10     Scale     6
	}

	Fields: Name	~PXColor~				Type	double	Precision   10     Scale     6
	Fields: Name	~PYColor~				Type	double	Precision   10     Scale     6

	Fields: Name	~PXFrame~				Type	double	Precision   10     Scale     6
	Fields: Name	~PYFrame~				Type	double	Precision   10     Scale     6

	Fields: Name	~ILocationFromImage:~	Type	Text

	Fields: Name	~ILocation:~			Type	Multitype
	Contains:
	{
		Fields: Name	~IX:~				Type	double	Precision   10     Scale     6
		Fields: Name	~IY:~				Type	double	Precision   10     Scale     6
		Fields: Name	~IWidth:~			Type	double	Precision   10     Scale     6
		Fields: Name	~IHeight:~			Type	double	Precision   10     Scale     6
	}
	
	Fields: Name	~OverrideImageCrop:~	Type	long
	Fields: Name	~ImageCropX:~			Type	double	Precision   10     Scale     6
	Fields: Name	~ImageCropY:~			Type	double	Precision   10     Scale     6
	Fields: Name	~ImageCropWidth:~		Type	double	Precision   10     Scale     6
	Fields: Name	~ImageCropHeight:~		Type	double	Precision   10     Scale     6

	Fields: Name	~XOffset:~				Type	double	Precision   10     Scale     6
	Fields: Name	~YOffset:~				Type	double	Precision   10     Scale     6
	Fields: Name	~Maskfile:~				Type	text
	Fields: Name	~TransparencyMaskfile:~	Type	text
	Fields: Name	~MaskRect:~				Type	double4	Precision   10     Scale     6 // not implemented as of 4/1/99
	Fields: Name	~MakeHardMask:~			Type	long
	Fields: Name	~MakeSoftMask:~			Type	long	 Lowvalue 0 HighValue 255
	Fields: Name	~CropMask~				Type	long	
	Fields: Name	~FrameFile:~			Type	text
	Fields: Name	~FrameMask:~			Type	text
	Fields: Name	~FrameMaskInsideColor:~	Type	MultiType
	Contains:
	{
		Fields: Name	~FColorAlpha:~		Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~FColorRed:~		Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~FColorGreen:~		Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~FColorBlue:~		Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~FrameMaskTolerance:~	Type	long    Lowvalue 0 HighValue 255
	Fields: Name	~FrameMaskFeathering:~	Type	double  Lowvalue 0 HighValue 100	
	Fields: Name	~FrameResize:~			Type	char Length 10	
	Fields: Name	~FrameRect:~			Type	double4	Precision   10     Scale     6
	Fields: Name	~StrokeImageRect:~		Type	MultiType							
	Contains:
	{
		Fields:	Name	~SIRWidth:~			Type	double	Precision	10		Scale	6	
		Fields: Name	~SIRUnits:~			Type	long
		Fields: Name	~SIROpacity:~		Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 100
		Fields: Name	~SIRRed:~			Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 255
		Fields: Name	~SIRGreen:~			Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 255
		Fields: Name	~SIRBlue:~			Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 255
		Fields: Name	~SIRInside:~		Type	long
		Fields: Name	~SIRStrokeImage:~	Type	long
	}
	Fields: Name	~StrokeMethod:~		Type	long		// 0 = find edges, 1 = overlay
	Fields: Name	~StrokeMaskType:~		Type	long	// 0 = image mask, 1 = background color mask
	Fields: Name	~StrokeType:~			Type	long	// 0 = rectangle, 1 = mask, 2 = oval
	Fields: Name	~StrokeThreshold:~		Type	long	Lowvalue (-128) HighValue 127 
	Fields: Name	~StrokeExpansion:~		Type	long	Lowvalue (-1000) HighValue 1000
	Fields: Name	~StrokeAntialias:~		Type	long
	Fields: Name	~BevelImageRect:~		Type	MultiType							
	Contains:
	{
		Fields:	Name	~BIRWidth:~			Type	double	Precision	10		Scale	6	 
		Fields: Name	~BIRUnits:~			Type	long
		Fields: Name	~BIRLeftDelta:~		Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BIRTopDelta:~		Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BIRRightDelta:~	Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BIRBottomDelta:~	Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BIRInside:~		Type	long
		Fields: Name	~BIRBevelImage:~	Type	long
	}
	Fields:	Name	~BevelImageFilePath:~	Type	text

	Fields: Name	~StrokeTextRect:~		Type	MultiType							
	Contains:
	{
		Fields:	Name	~STRWidth:~			Type	double	Precision	10		Scale	6	
		Fields: Name	~STRUnits:~			Type	long
		Fields: Name	~STROpacity:~		Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 100
		Fields: Name	~STRRed:~			Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 255
		Fields: Name	~STRGreen:~			Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 255
		Fields: Name	~STRBlue:~			Type	double	Precision	10		Scale	6	Lowvalue 0 HighValue 255
		Fields: Name	~STRInside:~		Type	long 
	}
	Fields: Name	~StrokeTextAntialias:~	Type	long	LowValue		0		HighValue	20 
	Fields: Name	~StrokeTextColor:~		Type	text
	Fields: Name	~StrokeTextOpacity:~	Type	long	Precision	10		Scale	6	Lowvalue 0 HighValue 100
	Fields: Name	~StrokeTextWidth:~		Type	long	Precision	10		Scale	6	Lowvalue 0 HighValue 50
	Fields: Name	~BevelTextRect:~		Type	MultiType

	Contains:
	{
		Fields:	Name	~BTRWidth:~			Type	double	Precision	10		Scale	6	
		Fields: Name	~BTRUnits:~			Type	long
		Fields: Name	~BTRLeftDelta:~		Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BTRTopDelta:~		Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BTRRightDelta:~	Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BTRBottomDelta:~	Type	double	Precision	10		Scale	6	Lowvalue (-255) HighValue 255
		Fields: Name	~BTRInside:~		Type	long
	}
	Fields:	Name	~BevelTextFilePath:~	Type	text

	Fields: Name	~AutoCrop:~				Type	double6	Precision   10     Scale     6 Lowvalue		0		HighValue 100
	Fields: Name	~AutoCropMode:~			Type	char	Length		1
	Fields: Name	~CropRect:~				Type	double4	Precision   10     Scale     6	// obsolete as of 4/1/99
	Fields: Name	~IColor:~				Type	MultiType
	Contains:
	{
		Fields: Name	~IColorAlpha:~			Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~IColorRed:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~IColorGreen:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~IColorBlue:~			Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~BGColorMask:~			Type	text
	Fields: Name	~TextBGColorMask:~		Type	text 
	Fields: Name	~BGColorOpacity:~		Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~IFileOpacity:~			Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~Saturation:~			Type	long	Lowvalue		(-100)	HighValue 100
	Fields: Name	~Density:~				Type	long    /*Precision   10     Scale     6*/ Lowvalue		(-100)	HighValue 100
	Fields: Name	~Contrast:~				Type	long	/*Precision   10     Scale     6*/ Lowvalue		(-100)	HighValue 100
	Fields: Name	~XGamma:~				Type	double	Lowvalue		0.0		HighValue 5.0
	Fields: Name	~SuppressTextRendering:~ Type	long
	Fields: Name	~AutoLevel:~			Type	MultiType								// not implemented as of 4/1/99
	Contains:
	{
		Fields: Name	~AutoLevelMin:~		Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~AutoLevelMax:~		Type	long	Lowvalue 0 HighValue 255
	}
	// Keywords for Logo text stuff 4/9/03



	Fields: Name	~LogoTextColorOverride1:~	Type	text  // ~0 r g b~ format
	Fields: Name	~LogoTextColorOverride2:~	Type	text  // ~0 r g b~ format
	Fields:	Name	~LogoTextArbRotation1:~     Type	double
	Fields:	Name	~LogoTextArbRotation2:~     Type	double
	Fields: Name	~LogoTextColor1:~			Type	MultiType
	Contains:
	{
		Fields: Name	~LogoTextColorAlpha1:~	Type	text	//Lowvalue 0 HighValue 255	
		Fields:	Name	~LogoTextColorRed1:~	Type	text	//Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextColorGreen1:~	Type	text	//Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextColorBlue1:~	Type	text	//Lowvalue 0 HighValue 255
	}
	Fields: Name	~LogoTextColor2:~			Type	MultiType
	Contains:
	{
		Fields: Name	~LogoTextColorAlpha2:~	Type	text	//Lowvalue 0 HighValue 255	
		Fields:	Name	~LogoTextColorRed2:~	Type	text	//Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextColorGreen2:~	Type	text	//Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextColorBlue2:~	Type	text	//Lowvalue 0 HighValue 255
	}
	Fields: Name	~LogoRotateText1:~			Type	double	Precision   10     Scale     6
	Fields: Name	~LogoRotateText2:~			Type	double	Precision   10     Scale     6
	Fields: Name	~LogoText1:~				Type	text
	Fields: Name	~LogoText2:~				Type	text
	Fields: Name	~LogoFont1:~				Type	text
	Fields: Name	~LogoFont2:~				Type	text
	Fields: Name	~LogoMaxFontSize1:~				Type	double    Lowvalue		0		HighValue 2000
	Fields: Name	~LogoMaxFontSize2:~				Type	double    Lowvalue		0		HighValue 2000
	Fields: Name	~LogoMinFontSize1:~			Type	double	Lowvalue		1		HighValue 2000
	Fields: Name	~LogoMinFontSize2:~			Type	double	Lowvalue		1		HighValue 2000
	Fields: Name	~LogoStyle1:~				Type	long
	Contains:
	{
		Fields:	Name	~LogoBold1:~			Type	Bit	scale  0b0000000000000001  
		Fields: Name	~LogoItalic1:~			Type	Bit	scale  0b0000000000000010
		Fields: Name	~LogoStrikeout1:~		Type	Bit	scale  0b0000000010000000  // not implemented
	}
	Fields: Name	~LogoStyle2:~				Type	long
	Contains:
	{
		Fields:	Name	~LogoBold2:~			Type	Bit	scale  0b0000000000000001  
		Fields: Name	~LogoItalic2:~			Type	Bit	scale  0b0000000000000010
		Fields: Name	~LogoStrikeout2:~		Type	Bit	scale  0b0000000010000000  // not implemented
	}
	Fields: Name	~LogoJustification1:~		Type	char	Length		1
	Fields: Name	~LogoJustification2:~		Type	char	Length		1
	Fields: Name	~LogoJoinLines1:~			Type	short
	Fields: Name	~LogoJoinLines2:~			Type	short
	Fields: Name	~LogoDisableJoinLines1:~	Type	short
	Fields: Name	~LogoDisableJoinLines2:~	Type	short
	Fields: Name	~LogoSuppressTextRendering1:~	Type	long
	Fields: Name	~LogoSuppressTextRendering2:~	Type	long
	Fields: Name	~LogoWordWrap1:~			Type	short
	Fields: Name	~LogoWordWrap2:~			Type	short
	Fields: Name	~LogoTranslucentText1:~		Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoTranslucentText2:~		Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoScriptSystem1:~		Type	text
	Fields: Name	~LogoScriptSystem2:~		Type	text
	Fields: Name	~LogoTextAntialias1:~		Type	long	LowValue		0		HighValue	20 // obsolete as of 4/1/99
	Fields: Name	~LogoTextAntialias2:~		Type	long	LowValue		0		HighValue	20 // obsolete as of 4/1/99
	Fields: Name	~LogoTextAlignment1:~		Type	text
	Fields: Name	~LogoTextAlignment2:~		Type	text
	// text logo shadows 1
	Fields: Name	~LogoShadowEnable1:~			Type	short
	Fields: Name	~LogoShadowOffset1:~			Type	MultiType
	Contains:
	{
		Fields: Name	~LogoShadowOffsetX1:~			Type	double	Lowvalue (-100) HighValue 100	
		Fields:	Name	~LogoShadowOffsetY1:~			Type	double	Lowvalue (-100) HighValue 100
	}
	Fields: Name	~LogoShadowBlur1:~			Type	long	LowValue		0		HighValue 100
	Fields: Name	~LogoShadowColor1:~			Type	Text
	Fields: Name	~LogoShadowStrength1:~		Type	long	 LowValue		0		HighValue 100


	// text logo shadows 2
	Fields: Name	~LogoShadowEnable2:~			Type	short
	Fields: Name	~LogoShadowOffset2:~			Type	MultiType
	Contains:
	{
		Fields: Name	~LogoShadowOffsetX2:~			Type	double	Lowvalue (-100) HighValue 100	
		Fields:	Name	~LogoShadowOffsetY2:~			Type	double	Lowvalue (-100) HighValue 100
	}
	Fields: Name	~LogoShadowBlur2:~			Type	long	LowValue		0		HighValue 100
	Fields: Name	~LogoShadowColor2:~			Type	Text
	Fields: Name	~LogoShadowStrength2:~		Type	long	 LowValue		0		HighValue 100

	// End Keywords for Logo text stuff 4/9/03

	Fields: Name	~LogoMask1:~				Type	text
	Fields: Name	~LogoMask2:~				Type	text
	Fields: Name	~LogoImage1:~				Type	text
	Fields: Name	~LogoImage2:~				Type	text
	Fields: Name	~LogoPosition1:~			Type	text
	Fields: Name	~LogoPosition2:~			Type	text
	Fields: Name	~LogoShiftX1:~			Type	double
	Fields: Name	~LogoShiftY1:~			Type	double
	Fields: Name	~LogoShiftX2:~			Type	double
	Fields: Name	~LogoShiftY2:~			Type	double
	Fields: Name	~LogoTextX1:~			Type	double
	Fields: Name	~LogoTextY1:~			Type	double
	Fields: Name	~LogoTextX2:~			Type	double
	Fields: Name	~LogoTextY2:~			Type	double
	Fields: Name	~LogoTextWidth1:~		Type	double
	Fields: Name	~LogoTextHeight1:~		Type	double
	Fields: Name	~LogoTextWidth2:~		Type	double
	Fields: Name	~LogoTextHeight2:~		Type	double
	Fields: Name	~LogoTextHorizontalBorder1:~	Type	double
	Fields: Name	~LogoTextHorizontalBorder2:~	Type	double
	Fields: Name	~LogoTextVerticalBorder1:~	Type	double
	Fields: Name	~LogoTextVerticalBorder2:~	Type	double
	Fields: Name	~EnhancedTextLogos1:~		Type	long
	Fields: Name	~EnhancedTextLogos2:~		Type	long
	Fields: Name	~LogoTextLeading1:~			Type	double	LowValue		(-1)		HighValue 5
	Fields: Name	~LogoTextLeading2:~			Type	double	LowValue		(-1)		HighValue 5

	Fields: Name	~LogoStrokeTextAntialias1:~	Type	long	LowValue		0		HighValue	20 
	Fields: Name	~LogoStrokeTextColor1:~		Type	text
	Fields: Name	~LogoStrokeTextOpacity1:~	Type	long	Precision	10		Scale	6	Lowvalue 0 HighValue 100
	Fields: Name	~LogoStrokeTextWidth1:~		Type	long	Precision	10		Scale	6	Lowvalue 0 HighValue 50
	Fields: Name	~LogoStrokeTextAntialias2:~	Type	long	LowValue		0		HighValue	20 
	Fields: Name	~LogoStrokeTextColor2:~		Type	text
	Fields: Name	~LogoStrokeTextOpacity2:~	Type	long	Precision	10		Scale	6	Lowvalue 0 HighValue 100
	Fields: Name	~LogoStrokeTextWidth2:~		Type	long	Precision	10		Scale	6	Lowvalue 0 HighValue 50
	Fields: Name	~LogoTextBevel1:~			Type	long	// 0 or 1
	Fields: Name	~LogoTextBevelLightAngle1:~	Type	long	// 0,45,90,135,180,225,270,315,360 Note: the engine treats this like a double.  However, the text node properties dialog uses a combo box and translation table which requires a long.  
															// In the future this could become a double if continuous values are ever used.  Paul Forleo 9/12/06
	Fields: Name	~LogoTextBevelSize1:~		Type	long	LowValue 0 HighValue 20 // in pixels
	Fields: Name	~LogoTextBevelStrength1:~	Type	long	LowValue 0 HighValue 100
	Fields: Name	~LogoTextBevelSoftness1:~	Type	long	LowValue 0 HighValue 10
	Fields: Name	~LogoTextBevel2:~			Type	long	// 0 or 1
	Fields: Name	~LogoTextBevelLightAngle2:~	Type	long	// 0,45,90,135,180,225,270,315,360 Note: the engine treats this like a double.  However, the text node properties dialog uses a combo box and translation table which requires a long.  
															// In the future this could become a double if continuous values are ever used.  Paul Forleo 9/12/06
	Fields: Name	~LogoTextBevelSize2:~		Type	long	LowValue 0 HighValue 20 // in pixels
	Fields: Name	~LogoTextBevelStrength2:~	Type	long	LowValue 0 HighValue 100
	Fields: Name	~LogoTextBevelSoftness2:~	Type	long	LowValue 0 HighValue 10

	Fields: Name	~LogoColor1:~			Type	MultiType
	Contains:
	{
		Fields: Name	~LogoColorAlpha1:~	Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~LogoColorRed1:~	Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoColorGreen1:~	Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoColorBlue1:~	Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~LogoColor2:~			Type	MultiType
	Contains:
	{
		Fields: Name	~LogoColorAlpha2:~	Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~LogoColorRed2:~	Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoColorGreen2:~	Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoColorBlue2:~	Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~LogoScale:~			Type	double  Precision	10		Scale	6	Lowvalue 0 HighValue 1000
	Fields: Name	~LogoScale1:~			Type	double  Precision	10		Scale	6	Lowvalue 0 HighValue 1000
	Fields: Name	~LogoScale2:~			Type	double  Precision	10		Scale	6	Lowvalue 0 HighValue 1000

	Fields: Name	~LogoOnNodeImage1:~		Type	long  // For auto crop modes f and p, the image is offset from the image, not the node
	Fields: Name	~LogoOnNodeImage2:~		Type	long  // For auto crop modes f and p, the image is offset from the image, not the node

//	Fields: Name	~ApplyStyle:~			Type	text
	Fields: Name	~LogoRotation:~			Type	double
	Fields: Name	~LogoAutoRotate:~		Type	long
	Fields: Name	~RGB:~					Type	MultiType
	Contains:
	{
		Fields: Name	~RGBAlpha:~			Type	long	Lowvalue (-255) HighValue 255	
		Fields:	Name	~RGBRed:~			Type	long	Lowvalue (-255) HighValue 255
		Fields:	Name	~RGBGreen:~			Type	long	Lowvalue (-255) HighValue 255
		Fields:	Name	~RGBBlue:~			Type	long	Lowvalue (-255) HighValue 255
	}

	Fields: Name	~MirrorHorizontal:~		Type	short
	Fields: Name	~MirrorVertical:~		Type	short
	Fields: Name	~IRotation:~			Type	double	Precision   10     Scale     6 Lowvalue		(-360)		HighValue 360 
	Fields: Name	~IRotationCorrection:~	Type	double	Precision   10     Scale     6 Lowvalue		(-360)		HighValue 360 
	Fields: Name	~ChromaKeyBackgroundRotation:~	Type	double	Precision   10     Scale     6 Lowvalue		(-360)		HighValue 360 
	Fields: Name	~LUT:~					Type	text
	Fields: Name	~ColorMatrix:~			Type	text
	Fields: Name	~Sepia:~				Type	text
	Fields: Name	~Sharpen:~				Type	long	Lowvalue		0		HighValue 2000	// If these values are changed, we also
																									// should change DictionariesStd.txt
	Fields: Name	~SharpenFaster:~		Type	long	Lowvalue		0		HighValue 2000	// If these values are changed, we also
																									// should change DictionariesStd.txt
	Fields: Name	~Blur:~					Type	long	Lowvalue		0		HighValue 100 
	Fields: Name	~BlurFaster:~			Type	long	Lowvalue		0		HighValue 100 
	Fields: Name	~Despeckle:~			Type	long	Lowvalue		0		HighValue 100        
	Fields: Name	~DespeckleFaster:~		Type	long	Lowvalue		0		HighValue 100	// not implemented
	Fields: Name	~ResizeAntiAlias:~		Type	long	Lowvalue		0		HighValue 100   
	Fields: Name	~ImageResize:~			Type	text										    // implemented for L (Bilinear) and C (Bicubic) on 4/19/99.
	Fields: Name	~SourceImageRatio:~		Type	double2	Precision   10     Scale     6 Lowvalue		1		HighValue 100 // not implemented as of 4/1/99
	Fields: Name	~IFile:~				Type	text
	Fields: Name	~ChromaKeyLandscapeBGFile:~	Type	text	// this overrides CommonChromaKeyLandscapeBackgroundFile, ProductType
	Fields: Name	~ChromaKeyPortraitBGFile:~	Type	text	// this overrides CommonChromaKeyPortraitBackgroundFile, ProductType
	Fields: Name	~ChromaKeyBGID:~		Type	text	// this overrides CommonChromaKeyBackgroundFile, ProductType 
	Fields: Name	~Postpassthrough:~		Type	text
	Fields: Name	~Postprocess:~			Type	text
	Fields: Name	~ProcessAfter:~			Type	text
	Fields: Name	~FirstPassCallback1:~	Type	text			// before a node goes thru first pass
	Fields: Name	~FirstPassCallback2:~	Type	text			// after a node goes thru first pass
	Fields: Name	~UseLowRes:~			Type	short			// not implemented as of 4/1/99
	Fields: Name	~MakeGrayScale:~		Type	short			
	Fields: Name	~Negative:~				Type	short
	Fields: Name	~NeutralizeGrayScale:~	Type	short			
	Fields: Name	~DeleteAfter:~			Type	short			// not implemented as of 4/1/99
	Fields: Name	~IgnoreCR:~				Type	short
	Fields: Name	~MoveAfter:~			Type	text			// not implemented as of 4/1/99
	Fields: Name	~IPrompt:~				Type	text
	Fields: Name	~RenderText:~			Type	text
	Fields: Name	~RenderImage:~			Type	text
	Fields: Name	~WeightedBlurKernel:~	Type	long
	Fields: Name	~ImageRenderingError~	Type	text
	Fields: Name	~LastErrorCode~			Type	text
	Fields: Name	~RotateFromDisk:~		Type	long
	Fields: Name	~RotateMaskFromDisk:~	Type	long
	Fields: Name	~RotateFrameMaskFromDisk:~	Type	long
	Fields: Name	~RotateFrameFromDisk:~	Type	long
	Fields: Name	~RotateBGColorMaskFromDisk:~	Type	long
	Fields: Name	~RotateTextBGColorMaskFromDisk:~	Type	long
	Fields: Name	~RotateSpotColorMaskFromDisk:~	Type	long	
	Fields: Name	~FitSpotColorMaskToNode:~	Type	long		// 1= resize to node, 0 = resize to image
	
	
	Fields:	Name	~IgnoreSpatialOps:~		Type	long			//	USED FOR RESTORING IMAGES INTO PDF FILES
	Fields: Name	~AutoRotate:~			Type	long
	Fields:	Name	~HardEdgeDropShadows:~	Type	long			// to revert to 9.0 drop shadows with hard edges
	Fields: Name	~CopyFrom:~				Type	double4	Precision   10     Scale     6 // implementation completed 6/21/99
	Fields: Name	~TPrompt:~				Type	text			// implementation complete
	Fields: Name	~TLocation:~			Type	MultiType	/*Precision   10     Scale     6*/
	Contains:
	{
		Fields: Name	~TX:~				Type	double	Precision   10     Scale     6
		Fields: Name	~TY:~				Type	double	Precision   10     Scale     6
		Fields: Name	~TWidth:~			Type	double	Precision   10     Scale     6
		Fields: Name	~THeight:~			Type	double	Precision   10     Scale     6
	}	
	Fields: Name	~Text:~					Type	text
	Fields: Name	~DisableCharacterModifiers:~ Type long
	Fields: Name	~MirrorTextHorizontal:~	Type	long
	Fields: Name	~MirrorTextVertical:~	Type	long
	Fields: Name	~TextKerning:~			Type	long
	Fields: Name	~TextColorOverride:~	Type	text  // you can put a macro here!
	Fields: Name	~IRotationCornerColor:~	Type	text
	Fields: Name	~FrameRotationCornerColor:~	Type	text
	Fields: Name	~NoApplyCorrections:~		Type	long
	Fields: Name	~NoAllowMove:~			Type	long
	Fields: Name	~LogoColorOverride1:~	Type	text  // you can put a macro here!
	Fields: Name	~LogoColorOverride2:~	Type	text  // you can put a macro here!


	Fields: Name	~LogoTextBGColor1:~		Type	MultiType  // 
	Contains:
	{
		Fields: Name	~LogoTextBGColorAlpha1:~		Type	text	Lowvalue 0 HighValue 255	
		Fields:	Name	~LogoTextBGColorRed1:~			Type	text	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextBGColorGreen1:~		Type	text	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextBGColorBlue1:~			Type	text	Lowvalue 0 HighValue 255
	}
	Fields: Name	~LogoTextBGColor2:~		Type	MultiType  // 
	Contains:
	{
		Fields: Name	~LogoTextBGColorAlpha2:~		Type	text	Lowvalue 0 HighValue 255	
		Fields:	Name	~LogoTextBGColorRed2:~			Type	text	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextBGColorGreen2:~		Type	text	Lowvalue 0 HighValue 255
		Fields:	Name	~LogoTextBGColorBlue2:~			Type	text	Lowvalue 0 HighValue 255
	}
	Fields: Name	~TextBGColorOverride:~	Type	text  // you can put a macro here!
	Fields: Name	~IColorOverride:~		Type	text  // you can put a macro here!
	Fields: Name	~TColor:~				Type	MultiType
	Contains:
	{
		Fields: Name	~TColorAlpha:~			Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~TColorRed:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~TColorGreen:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~TColorBlue:~			Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~TFont:~				Type	text
	Fields: Name	~TGroup:~				Type	text
	Fields: Name	~TSize:~				Type	double    Lowvalue		0		HighValue 2000
	Fields: Name	~MinFontSize:~			Type	double	Lowvalue		1		HighValue 2000
	Fields: Name	~TStyle:~				Type	long
	Contains:
	{
		Fields:	Name	~Bold:~				Type	Bit	scale  0b0000000000000001  
		Fields: Name	~Italic:~			Type	Bit	scale  0b0000000000000010
		Fields: Name	~Underline:~		Type	Bit	scale  0b0000000000000100 // not implemented as of 4/1/99
		Fields: Name	~Outline:~			Type	Bit	scale  0b0000000000001000 // not implemented as of 4/1/99
		Fields: Name	~Shadow:~			Type	Bit	scale  0b0000000000010000 // not implemented as of 4/1/99
		Fields: Name	~Condense:~			Type	Bit	scale  0b0000000000100000 // not implemented as of 4/1/99
		Fields: Name	~Extend:~			Type	Bit	scale  0b0000000001000000 // not implemented as of 4/1/99
		Fields: Name	~Strikeout:~		Type	Bit	scale  0b0000000010000000
	}
	Fields: Name	~Justification:~		Type	char	Length		1
	Fields: Name	~TextFlowDirection:~	Type	char	Length		1
	Fields: Name	~TextLineDirection:~	Type	char	Length		1
	Fields: Name	~NodeGridCreationType:~ Type	text
	Fields: Name	~JoinLines:~			Type	short
	Fields: Name	~DisableJoinLines:~		Type	short
	Fields: Name	~WordWrap:~				Type	short
	Fields: Name	~TScriptSystem:~		Type	text
	Fields: Name	~ILabel:~				Type	text
	Fields: Name	~Rules~					Type	text	// temporary, not saved
	Fields: Name	~CutAndStackSequence:~	Type	text	// filled in by cut and stack job population technique to save the sequence of the image in case the stack of prints is dropped on the floor

	Fields: Name	~Antialias:~			Type	long	LowValue		0		HighValue	20 
	Fields: Name	~UseAlternateFontMetrics:~		Type	long	LowValue		0		HighValue	1 // values are 0 = type 1, 1 = type 2, 2 = type 3
	Fields: Name	~TextSharpen:~			Type	long	LowValue		0		HighValue	100 // obsolete as of 4/1/99
	Fields: Name	~ActualRotation~		Type	long	LowValue		0		HighValue	360 // actual orthogonal rotation as derived from RotateFromDisk, AutoRotate and AutoRotateDuringAutoCrop keywords; not including image corrections
	Fields: Name	~TextTexture:~			Type	text
	Fields: Name	~TTexture:~				Type	text	//	A DUPLICATE OF THE ABOVE TEXTTEXTURE
	Fields: Name	~TextBlockTexture:~		Type	text
	Fields: Name	~TranslucentText:~		Type	long	Lowvalue		0		HighValue 100	// includes stroke and shadow
	Fields: Name	~TranslucentTextFill:~	Type	long	Lowvalue		0		HighValue 100	// does not include stroke and shadow
	Fields: Name	~TextMask:~				Type	text
	Fields: Name	~TextAlignment:~		Type	text
	Fields: Name	~TextPath:~				Type	text	// not implemented as of 4/1/99
	Fields: Name	~CubicBezierPath:~		Type	text	// 4 control points per segment, normalized 0 -> 1
	Fields: Name	~RotateBezierPath:~		Type	long
	Fields: Name	~TLeading:~				Type	double	LowValue		(-1)		HighValue 5
	Fields: Name	~RotateText:~			Type	double	Precision   10     Scale     6
	Fields: Name	~ShadowEnable:~			Type	short
	Fields: Name	~TextBevel:~			Type	long	// 0 or 1
	Fields: Name	~TextBevelLightAngle:~	Type	long	// 0,45,90,135,180,225,270,315,360 Note: the engine treats this like a double.  However, the text node properties dialog uses a combo box and translation table which requires a long.  
															// In the future this could become a double if continuous values are ever used.  Paul Forleo 9/12/06
	Fields: Name	~TextBevelSize:~		Type	long	LowValue 0 HighValue 20 // in pixels
	Fields: Name	~TextBevelStrength:~	Type	long	LowValue 0 HighValue 100
	Fields: Name	~TextBevelSoftness:~	Type	long	LowValue 0 HighValue 10


	Fields: Name	~ImageEmboss:~			Type	long	// 0 or 1
	Fields: Name	~ImageEmbossLightAngle:~	Type	long	// 0,45,90,135,180,225,270,315,360 Note: the engine treats this like a double.  However, the text node properties dialog uses a combo box and translation table which requires a long.  
															// In the future this could become a double if continuous values are ever used.  Paul Forleo 9/12/06
	Fields: Name	~ImageEmbossSize:~		Type	long	LowValue 0 HighValue 50 // in pixels
	Fields: Name	~ImageEmbossStrength:~	Type	long	LowValue 0 HighValue 100
	Fields: Name	~ImageEmbossSoftness:~	Type	long	LowValue 0 HighValue 10


	Fields: Name	~AAForceRebuild:~		Type	short	// setting this will force a rebuild of the renderchains at the next preview
	Fields: Name	~FittedFontSize~		Type	double  // used in font sizing - is a temporary value indicating font size in pixels
	Fields: Name	~ShadowOffset:~			Type	MultiType
	Contains:
	{
		Fields: Name	~ShadowOffsetX:~			Type	double	Lowvalue (-100) HighValue 100	
		Fields:	Name	~ShadowOffsetY:~			Type	double	Lowvalue (-100) HighValue 100
	}

	Fields: Name	~ImageShadowEnable:~			Type	short
	Fields: Name	~ImageShadowOffset:~			Type	MultiType
	Contains:
	{
		Fields: Name	~ImageShadowOffsetX:~			Type	double	Lowvalue (-500) HighValue 500	
		Fields:	Name	~ImageShadowOffsetY:~			Type	double	Lowvalue (-500) HighValue 500
	}
	Fields: Name	~ImageShadowMaskSize:~			Type	double Lowvalue (-100) HighValue (100)	// not implemented
	Fields: Name	~ImageShadowMaskFeather:~			Type	double Lowvalue (0) HighValue (200)
	Fields: Name	~ImageShadowColorOverride:~		Type    text
	Fields: Name	~ImageShadowColor:~			Type	MultiType  // not implemented
	Contains:
	{
		Fields: Name	~ImageShadowColorAlpha:~			Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~ImageShadowColorRed:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~ImageShadowColorGreen:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~ImageShadowColorBlue:~			Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~ImageShadowStrength:~		Type	long	 LowValue		0		HighValue 100

	Fields: Name	~MaskIsPrerotated:~		Type	long	
	Fields: Name	~SpotColorMaskIsPrerotated:~		Type	long		
	Fields: Name	~ShadowBlur:~			Type	long	LowValue		0		HighValue 100
	Fields: Name	~ShadowColor:~			Type	MultiType
	Contains:
	{
		Fields: Name	~ShadowColorAlpha:~			Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~ShadowColorRed:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~ShadowColorGreen:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~ShadowColorBlue:~			Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~ShadowStrength:~		Type	long	 LowValue		0		HighValue 100
	Fields: Name	~SameAs:~				Type	long  // not implemented as of 8/31/99
	Fields: Name	~SameAutoCropAs:~		Type	long	// takes a node number as a parameter
	Fields: Name	~CropAmount~			Type	double
	Fields: Name	~TextBGColor:~			Type	MultiType
	Contains:
	{
		Fields: Name	~TextBGColorAlpha:~			Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~TextBGColorRed:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~TextBGColorGreen:~			Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~TextBGColorBlue:~			Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~TextBGColorOpacity:~	Type	long	Lowvalue		0		HighValue 100		
	Fields: Name	~ImageInputProfile:~	Type	text	// 
	Fields: Name	~ColorInputProfile:~	Type	text	// not implemented as of 4/1/99	
	Fields: Name	~OutputProfile:~		Type	text	// not implemented as of 4/1/99
	Fields: Name	~MonitorProfile:~		Type	text	// not implemented as of 4/1/99
	Fields: Name	~UseDefaultLeading:~	Type	short	// not implemented as of 4/1/99
	Fields: Name	~Package:~				Type	reference	// not implemented as of 4/1/99
	Fields: Name	~FrameRectOverlapX:~	Type	double   LowValue (-50) HighValue 100 // a percentage > -50 and less than 100 This overrides FrameRect
	Fields: Name	~FrameRectOverlapY:~	Type	double   LowValue (-50) HighValue 100 // a percentage > -50 and less than 100 This overrides FrameRect
	Fields:	Name	~SharpenType~			Type	char	Length		1 // used in dialog boxes
	Fields:	Name	~LogoUseSameFontSize:~	Type	long	 // used in dialog boxes
	Fields: Name	~SharpenValue~			Type	long	Lowvalue		0		HighValue 2000	// If these values are changed, we also
	Fields:	Name	~BlurType~				Type	char	Length		1 // used in dialog boxes
	Fields: Name	~BlurValue~				Type	long	Lowvalue		0		HighValue 100	// If these values are changed, we also																									// should change DictionariesStd.txt
	Fields:	Name	~PreviousAttrStatus~	Type	Text  // used for the undo operation
	Fields: Name	~NumberOfErrors~		Type	long // number of errors per job (not node)
	Fields: Name	~FullResImageWidth~		Type	long  // temporary, to record width of full size image
	Fields: Name	~FullResImageHeight~	Type	long  // temporary, to record height of full size image
	Fields: Name	~SSImageWidth~			Type	long  // temporary, to record width of subsample image
	Fields: Name	~SSImageHeight~			Type	long  // temporary, to record height of subsample image
	Fields: Name	~EffectiveResolution~	Type	Double 
	Fields: Name	~ProcessingStatus~		Type	long 
	Fields: Name	~RelatedNode~			Type	long // points to a node in another render list
	Fields: Name	~CenterX~				Type	Double  // used as a temporary field for sorting purposes
	Fields: Name	~Row~					Type	Long	// used as a temporary field for sorting purposes
	Fields: Name	~Column~				Type	Long	// used as a temporary field for sorting purposes
	Fields: Name	~TextProcessingStatus~			Type	long 
	Fields: Name	~CropCalculator~		Type reference;
	Fields: Name	~AdaptiveSharpen:~		Type long
	Fields: Name	~AdaptiveSharpenLimit:~      Type long Lowvalue		10		HighValue 255
	Fields: Name	~AdaptiveSharpenThreshold:~  Type long Lowvalue		0		HighValue 100
	Fields: Name	~AdaptiveSharpenBlur:~       Type long Lowvalue		0		HighValue 100
	Fields: Name	~AutoCropRotation:~			Type Double
	Fields: Name	~AutoRotateBasedOnCropSize~	Type Long  // temporary, is the resulting auto rotation due to crop size
	Fields: Name	~OverrideImageRotation:~       Type long
	Fields: Name	~AutoRotateImageDuringAutoCrop:~	Type long
	// To create a transparent png image, both the NoMergeBackground: and the TransparentImage: keyword need to be set.
	// Additionally, the SaveMetaData: major keyword must be set to 1.  If you don't have all three your
	// .png image will not be transparent
	Fields: Name	~NoMergeBackground:~	Type long	// if non zero, does not merge the source image onto a background.
	Fields: Name	~TransparentImage:~		Type long	// if non zero, and a transparency mask is used, composites the tint removed image onto the background without a mask (i.e. copies the tint removed image to the background).
	Fields:	Name	~UseUnkeyedImage:~		Type long	// use the original unkeyed image.  If 0 uses tint removed image and chroma key mask.  If 1 uses original image on green background and does not use the chroma key mask
	Fields: Name	~NodeData:~				Type	text	//
	Fields: Name	~ApplyAsSpotTexture:~		Type	long
	Fields: Name	~ViewerNodeColor:~			Type	MultiType
	Contains:
	{
		Fields: Name	~ViewerNodeColorAlpha:~		Type	long	Lowvalue 0 HighValue 255	
		Fields:	Name	~ViewerNodeColorRed:~		Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~ViewerNodeColorGreen:~		Type	long	Lowvalue 0 HighValue 255
		Fields:	Name	~ViewerNodeColorBlue:~		Type	long	Lowvalue 0 HighValue 255
	}
	Fields: Name	~ShowCropMarks:~	Type	Long  // Show crop marks - true or false

	Fields: Name	~ISpotColor:~				Type	long
	Contains:
	{
		// Each bit means the user wants either spot color or spot texture on a node component
		// Due to Nexpress hardware constraints, spot texture and spot color on the same node component is not allowed
		// Therefore the ISpotTextureImage and ISpotTextureFrame cannot be set in the same long.  Same is true for other components
//																		  3         2         1
//																		 10987654321098765432109876543210								
		Fields:	Name	~ISpotColorImage:~			Type	Bit	scale  0b00000000000000000000000000000001 // spot color on image ->> indicates spot color on the image in the node.  
		Fields: Name	~ISpotColorFrame:~			Type	Bit	scale  0b00000000000000000000000000000010 // spot color on frame
		Fields: Name	~ISpotColorStroke:~			Type	Bit	scale  0b00000000000000000000000000000100 // spot color on stroke
		Fields: Name	~ISpotColorBevel:~			Type	Bit	scale  0b00000000000000000000000000001000 // spot color on bevel
		Fields: Name	~ISpotColorIColor:~			Type	Bit	scale  0b00000000000000000000000000010000 // spot color on fill color
		Fields: Name	~ISpotColorShadow:~			Type	Bit	scale  0b00000000000000000000000000100000 // spot color on drop shadow
		Fields: Name	~ISpotColorUserMask:~		Type	Bit	scale  0b00000000000000000000000001000000 // spot color on user provided mask; used internally in the engine
		Fields:	Name	~ISpotTextureImage:~		Type	Bit	scale  0b00000000000000010000000000000000 // spot color on image ->> indicates spot texture on the image in the node. 
		Fields: Name	~ISpotTextureFrame:~		Type	Bit	scale  0b00000000000000100000000000000000 // spot texture on frame
		Fields: Name	~ISpotTextureStroke:~		Type	Bit	scale  0b00000000000001000000000000000000 // spot texture on stroke
		Fields: Name	~ISpotTextureBevel:~		Type	Bit	scale  0b00000000000010000000000000000000 // spot texture on bevel
		Fields: Name	~ISpotTextureIColor:~		Type	Bit	scale  0b00000000000100000000000000000000 // spot texture on fill color
		Fields: Name	~ISpotTextureShadow:~		Type	Bit	scale  0b00000000001000000000000000000000 // spot texture on drop shadow
		Fields: Name	~ISpotTextureUserMask:~		Type	Bit	scale  0b00000000010000000000000000000000 // spot texture on user provided mask; used internally in the engine
	}
	Fields: Name	~TSpotColor:~				Type	long
	Contains:
	{
//																		  3         2         1
//																		 10987654321098765432109876543210								
		Fields:	Name	~TSpotColorText:~			Type	Bit	scale  0b00000000000000000000000000000001 // spot color on text 
		Fields: Name	~TSpotColorShadow:~			Type	Bit	scale  0b00000000000000000000000000000010 // spot color on shadow
		Fields: Name	~TSpotColorStroke:~			Type	Bit	scale  0b00000000000000000000000000000100 // spot color on stroke of text
		Fields: Name	~TSpotColorTColor:~			Type	Bit	scale  0b00000000000000000000000000001000 // spot color on text bg color
		Fields: Name	~TSpotColorStrokeNode:~		Type	Bit	scale  0b00000000000000000000000000010000 // spot color around text node boundaries
		Fields: Name	~TSpotColorBevelNode:~		Type	Bit	scale  0b00000000000000000000000000100000 // spot color around text node boundaries
		Fields:	Name	~TSpotTextureText:~			Type	Bit	scale  0b00000000000000010000000000000000 // spot texture on text 
		Fields: Name	~TSpotTextureShadow:~		Type	Bit	scale  0b00000000000000100000000000000000 // spot texture on shadow
		Fields: Name	~TSpotTextureStroke:~		Type	Bit	scale  0b00000000000001000000000000000000 // spot texture on stroke
		Fields: Name	~TSpotTextureTColor:~		Type	Bit	scale  0b00000000000010000000000000000000 // spot texture on text bg color
		Fields: Name	~TSpotTextureStrokeNode:~	Type	Bit	scale  0b00000000000100000000000000000000 // spot texture around text node boundaries
		Fields: Name	~TSpotTextureBevelNode:~	Type	Bit	scale  0b00000000001000000000000000000000 // spot texture around text node boundaries
	}
	Fields: Name	~ISpotColorMask:~				Type	text
	Fields: Name	~SpotColorTranslucence:~		Type	long	Lowvalue		0		HighValue 100  // on the user provided spot color mask
	Fields: Name	~ISpotColorTranslucence:~		Type	long	Lowvalue		0		HighValue 100  // on the ifile
	Fields: Name	~FrameSpotColorTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~BGColorSpotColorTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~BevelSpotColorTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~StrokeSpotColorTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~IShadowSpotColorTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~TSpotColorTranslucence:~		Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~TSpotColorShadowTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~TSpotColorStrokeTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~TSpotColorTColorTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~TSpotColorStrNodeTranslucence:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~TSpotColorBevNodeTranslucence:~	Type	long	Lowvalue		0		HighValue 100

	Fields: Name	~LogoISpotColor1:~				Type	long
	Contains:
	{
		Fields:	Name	~LogoISpotColorMask1:~		Type	Bit	scale  0b00000000000000000000000000000001 // spot color on mask 
		Fields:	Name	~LogoISpotTextureMask1:~	Type	Bit	scale  0b00000000000000010000000000000000 // spot color on mask 
	}
	Fields: Name	~LogoTSpotColor1:~				Type	long
	Contains:
	{
		Fields:	Name	~LogoTSpotColorText1:~		Type	Bit	scale  0b00000000000000000000000000000001 // spot color on text 
		Fields: Name	~LogoTSpotColorShadow1:~	Type	Bit	scale  0b00000000000000000000000000000010 // spot color on shadow
		Fields: Name	~LogoTSpotColorStroke1:~	Type	Bit	scale  0b00000000000000000000000000000100 // spot color on stroke
		Fields:	Name	~LogoTSpotTextureText1:~	Type	Bit	scale  0b00000000000000010000000000000000 // spot color on text 
		Fields: Name	~LogoTSpotTextureShadow1:~	Type	Bit	scale  0b00000000000000100000000000000000 // spot color on shadow
		Fields: Name	~LogoTSpotTextureStroke1:~	Type	Bit	scale  0b00000000000001000000000000000000 // spot color on stroke
	}
	Fields: Name	~LogoISpotColorTransluc1:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoTSpotColorTransluc1:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoTSpotColorStrokeTransluc1:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoTSpotColorShadowTransluc1:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoISpotColor2:~				Type	long
	Contains:
	{
		Fields:	Name	~LogoISpotColorMask2:~		Type	Bit	scale  0b00000000000000000000000000000001 // spot color on mask 
		Fields:	Name	~LogoISpotTextureMask2:~	Type	Bit	scale  0b00000000000000010000000000000000 // spot texture on mask 
	}
	Fields: Name	~LogoTSpotColor2:~				Type	long
	Contains:
	{
		Fields:	Name	~LogoTSpotColorText2:~		Type	Bit	scale  0b00000000000000000000000000000001 // spot color on text 
		Fields: Name	~LogoTSpotColorShadow2:~	Type	Bit	scale  0b00000000000000000000000000000010 // spot color on shadow
		Fields: Name	~LogoTSpotColorStroke2:~	Type	Bit	scale  0b00000000000000000000000000000100 // spot color on stroke
		Fields:	Name	~LogoTSpotTextureText2:~	Type	Bit	scale  0b00000000000000010000000000000000 // spot texture on text 
		Fields: Name	~LogoTSpotTextureShadow2:~	Type	Bit	scale  0b00000000000000100000000000000000 // spot texture on shadow
		Fields: Name	~LogoTSpotTextureStroke2:~	Type	Bit	scale  0b00000000000001000000000000000000 // spot texture on stroke
	}
	Fields: Name	~LogoISpotColorTransluc2:~		Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoTSpotColorTransluc2:~		Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoTSpotColorStrokeTransluc2:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~LogoTSpotColorShadowTransluc2:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~NoiseReductionOverride:~		Type	Text	// Can take a macro.  0 -> 100 ; null string means do not override queue


	Fields:	Name	~NXPNodeTextureMask:~	Type	Text	//	NexPress Node Texture Mask (E Surface) IMPLEMENTED 01/21/11 LK


			//	PDF FILE KEYWORDS
	Fields:	Name	~PDFObjNum:~			Type	long	//	PDF OOBJECT NUMBER FOR THIS NODE
	Fields:	Name	~PDFGenNum:~			Type	long	//	PDF GENERATION NUMBER FOR THIS NODE

	Fields: Name	~SoftenOverride:~		Type	text  
	Fields:	Name	~Soften:~				Type	long	Lowvalue		0		HighValue 100 //	SOFTENS IMAGE FOR PORTRAITS
	Fields:	Name	~AfterNodeRender:~		Type	Text	//	SCRIPT TO RUN AFTER  RENDERING A NODE
	Fields:	Name	~BeforeNodeRender:~		Type	Text	//	SCRIPT TO RUN BEFORE RENDERING A NODE
	Fields:	Name	~ResolvedImageCorrectionsPath~	Type	Text	// Only used by URenderNode to free the image corrections
	Fields:	Name	~ResolvedFrameCorrectionsPath~	Type	Text	// Only used by URenderNode to free the frame corrections
	Fields:	Name	~ResolvedTextureCorrectionsPath~	Type	Text	// Only used by URenderNode to free the texture corrections
	Fields: Name	~EmbedTransparencyMaskInOutput:~	Type	long	Lowvalue		0		HighValue 100
	Fields: Name	~NoRender:~				Type	long	
	Fields: Name	~NoPrint:~				Type	long
	Fields: Name	~NoRenderImage:~		Type	long	


	Fields:	Name	~SpotColorMaskTexture:~				Type	Text	// spot color texture on the user provided spot color mask
	Fields:	Name	~SpotColorImageTexture:~			Type	Text	// spot color texture on the image
	Fields:	Name	~SpotColorStrokeTexture:~			Type	Text	// spot color texture on the stroke
	Fields:	Name	~SpotColorBevelTexture:~			Type	Text	// spot color texture on the bevel
	Fields:	Name	~SpotColorFrameTexture:~			Type	Text	// spot color texture on the frame
	Fields:	Name	~SpotColorShadowTexture:~			Type	Text	// spot color texture on the image shadow
	Fields:	Name	~SpotColorFillColorTexture:~		Type	Text	// spot color texture on the fill color (IColor: )
	Fields: Name	~SpotColorTextFillColorTexture:~	Type	Text	// spot color texture on the text fill color (TextBGColor: ) done
	Fields:	Name	~SpotColorTextTexture:~				Type	Text	// spot color texture on the text
	Fields:	Name	~SpotColorTextShadowTexture:~		Type	Text	// spot color texture on the text shadow
	Fields:	Name	~SpotColorTextStrokeTexture:~		Type	Text	// spot color texture on the text stroke
	Fields:	Name	~SpotColorTextStrokeNodeTexture:~	Type	Text	// spot color texture on the text stroke around the text node
	Fields:	Name	~SpotColorTextBevelNodeTexture:~	Type	Text	// spot color texture on the text stroke around the text node
	
	Fields:	Name	~SpotColorLogoTextTexture1:~		Type	Text	// spot color  texture on logo 1 made from text
	Fields:	Name	~SpotColorLogoTextTexture2:~		Type	Text	// spot color  texture on logo 2 made from text
	Fields:	Name	~SpotColorLogoTexture1:~			Type	Text	// spot color  texture on logo 1 made from files
	Fields:	Name	~SpotColorLogoTexture2:~			Type	Text	// spot color  texture on logo 2 made from files
	Fields:	Name	~SpotColorLogoTextStroTexture1:~	Type	Text	// spot color  texture on logo 1 made from text stroke
	Fields:	Name	~SpotColorLogoTextStroTexture2:~	Type	Text	// spot color  texture on logo 2 made from text stroke
	Fields:	Name	~SpotColorLogoTextShadTexture1:~	Type	Text	// spot color  texture on logo 1 made from text shadow
	Fields:	Name	~SpotColorLogoTextShadTexture2:~	Type	Text	// spot color  texture on logo 2 made from text shadow
	Fields: Name	~HorizontalEyePosition:~			Type	Long	LowValue 0 HighValue 100
	Fields: Name	~VerticalEyePosition:~				Type	Long	LowValue 0 HighValue 100
	Fields: Name	~VerticalChinPosition:~				Type	Long	LowValue 0 HighValue 100
	Fields: Name	~AlignHeads:~						Type	Long
	Fields: Name	~HeadAlignmentCropMethod:~			Type	Long	// 0 = use eye position and chin position
																		// 1 = use eye position and top of head position
	Fields: Name	~TopOfHeadPosition:~				Type	Long	LowValue 0 HighValue 100
	Fields: Name	~GenerateQRCode:~					Type	Long	
	Fields: Name	~QRCodeErrorCorrection:~			Type	Text
	Fields: Name	~QRCodeTooSmallMsg~					Type	Text	// for holding a message to the user	
;

Dictionary: DDJobType
	Fields:	Name	~INTID:~				Type	long
	Fields:	Name	CountableNodes			Type	long
	Fields:	Name	ImagePath				Type	text
	Fields:	Name	LayoutPath				Type	text
	Fields:	Name	MaskPath				Type	text
	Fields:	Name	FramePath				Type	text
	Fields:	Name	FrameMaskPath			Type	text
	Fields:	Name	FileType				Type	text
	Fields:	Name	JobData					Type	text
	Fields:	Name	RenderPage				Type	long


Dictionary:	DDPackage					// not implemented as of 4/1/99
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~Package:~			Type	reference

Dictionary:	DDPathPrefix
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~Path~				Type	text

// Dictionary:	DDPPU
//  if this is ever reactivated, don't forget to add INTID: field.  Disabled 8/24/98
//	Fields:	Name	~PPU~			Type	Double	Precision	10		Scale	6

Dictionary:	DDPrintRange
	Fields:	Name	PrintRange1			Type	double	Precision	10		Scale	6
	Fields:	Name	PrintRange2			Type	double	Precision	10		Scale	6

Dictionary:	DDUnitOfMeasure
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~UnitOfMeasure:~	Type	text

Dictionary:	DDMacros
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~Macros:~			Type	text

Dictionary:	DDDataRecords
	Fields:	Name	~INTID:~		Type	long
	Fields:	Name	~DataRecords:~	Type	long

Dictionary:	DDSameAs
	Fields:	Name	~NodeNumber~	Type	long
	Fields:	Name	~AttrName~		Type	string	Length	64
;

Dictionary:	DDTrace
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~Trace:~			Type	text
;

Dictionary:	DDUseColorTransforms
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~UseColorTransforms:~		Type	long
;

Dictionary:	DDUsePie
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~UsePie:~			Type	long
;

Dictionary:	DDPackageNode
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~PackageNode:~		Type	long
;

Dictionary:	DDBookNode
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~Book:~				Type	long
;

Dictionary: DDPreRenderAction
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~PreRenderAction:~	Type	Text
;

Dictionary: DDAutoSizeToImage
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~AutoSizeToImage:~	Type	long  // Contains a node number.  Sets the bg width and height to the size of the IFile in the node having this node number in pixels
;

Dictionary: DDFeatured
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~Featured:~			Type	long  // Contains a node number. 

Dictionary: DDMaxSize
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~MaxPixels:~		Type	long  // maximum number of pixels in one direction or the other
	Fields:	Name	~MaxInches:~		Type	double  // maximum number of inches in one direction or the other
;

Dictionary:	DDSaveMetaData
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~SaveMetaData:~		Type	long  // used to insert the embedded chroma key mask or transparency mask provided with TransparencyMask: keyword
;

Dictionary: DDGroup						//	USED FOR GROUPING PRODUCTS FOR NEXPRESS
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~GroupQuantity:~		Type	long
	Fields:	Name	~GroupTemplateName:~	Type	text
;

Dictionary: DDPDFSourceFile
	Fields:	Name	~INTID:~			Type	long
	Fields:	Name	~PDFSourceFile:~	Type	text
;

Dictionary:	DD_C_SCript
	Fields:	Name	~INTID:~				Type	long
	Fields:	Name	~C_Script~				Type	text
;

Dictionary: DDProductInfo
	Fields: Name	~INTID:~							Type	long
	Fields: Name	~CommonChromaKeyLandscapeBGFile:~	Type	text  // this overrides ProductType
	Fields: Name	~CommonChromaKeyPortraitBGFile:~	Type	text  // this overrides ProductType
	Fields: Name	~CommonChromaKeyBGID:~				Type	text  
	Fields: Name	~ProductType:~						Type	text  //
	Fields: Name	~CreatedFromSubjectInfoField:~		Type	text  //
;


