
//	THIS FILE WILL HANDLE THE CGETJOBSINSELECTEDQUEUE COMMAND
//
//	IT GETS THE SELECTED QUEUE THROUGH THE CCODEGENCON WHICH
//	CONTAINS ONE UPGENCON.
//	FOR THE SELECTED QUEUE, LOOK UP THE JOBS IN THE QUEUE
//	USING A QUERY.

char	*NULL ;
int		 FALSE = 0 ;
int		 TRUE  = 1 ;


main()
{
	char	*SelQueueGC ;
	char	*anIter ;
	char	*SelectedQueue ;
	char	*anObj ;
	char	*SelQueueList ;
	char	*PGCList ;
	TCHAR	*theQuery ;
	int		 result ;
	TCHAR	 word[32];

	//Debug( TRUE ) ;	//	INVOKE THE DEBUGGER !

	//	GET THE DATA PASSED IN FROM THE LIST VIEW
	SelQueueGC = GetCCodeGenCon() ;

	if( SelQueueGC == NULL )
	{
		MessageBox("Could not find GenCon.","MB_OK") ;
		anObj = PluckTreeObject( GetName(SelQueueGC), "[GenCons]" ) ;
		Delete(anObj);
		return ;
	}

	SelQueueList = GetChildren( SelQueueGC ) ;
	if( SelQueueList == NULL )
	{
		MessageBox("GenCon has no children.","MB_OK") ;
		anObj = PluckTreeObject( GetName(SelQueueGC), "[GenCons]" ) ;
		Delete(anObj);
		return ;
	}

	PGCList = NewPGenConList( GetKPISConnection() ) ;
	if( PGCList == NULL )
	{
		DeleteIterator( anIter ) ;
		MessageBox("Could not Create PGenConList.","MB_OK") ;
		anObj = PluckTreeObject( GetName(SelQueueGC), "[GenCons]" ) ;
		Delete(anObj);
		return ;
	}

	anIter = CreateIterator(SelQueueList) ;
	if( anIter == NULL )
	{
		MessageBox("Cannot create iterator.","MB_OK") ;
		anObj = PluckTreeObject( GetName(SelQueueGC), "[GenCons]" ) ;
		Delete(anObj);
		return ;
	}

	theQuery = malloc(20000);

	SelectedQueue = GetFirst( anIter ) ;
	if ( SelectedQueue )
	{
		strcpy(theQuery, "Select * From ");
		strcat(theQuery, GetAttrValue( SelectedQueue, "Queue", word ));
		strcat(theQuery, " Order By ID");
	}

	result = Query( PGCList, theQuery, "ReadOnly", "ForwardOnly") ;
	if( result == 1 )
	{
		anObj = NewObject( "Jobs" ) ;
		SetChildren( anObj, PGCList ) ;
		
		HangTreeObject( anObj, "[GenCons]" ) ;
	}

	theQuery = free(theQuery);
	anObj = PluckTreeObject( GetName(SelQueueGC), "[GenCons]" ) ;
	Delete(anObj);
	anIter = Delete( anIter ) ;
}