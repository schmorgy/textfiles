Include: ~FormattingRoutines~;

IncludeClass( BaseGrid );

VOID OrderItemImages::OrderItemImages(OrderID)					// CONSTRUCTOR
{
	TableName = ~OrderItemImages~;
	Title = ~OrderItemImages~;
	WindowTop = 60;
	WindowWidth = 50;
	WindowHeight = 30;
	HelpPage = ~Remake_ViewOrderItemImages.htm~;
	fOrderID = ~<OrderID>~;
}

STR OrderItemImages::GetKey( &Item )					// PRIMARY KEY FOR THE TABLE
{
	return ~OrderID = '<$con.Item[OrderID]>' AND Roll = '<$con.Item[Roll]>' AND Frame = '<$con.Item[Frame]>' AND ItemOrderID = '<$con.Item[ItemOrderID]>' AND ItemID = <$con.Item[ItemID]>~;
}


NUMERIC OrderItemImages::ChangeRecordAudits( &Changed )	// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[OrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  OrderID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Roll]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Roll cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Frame]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Frame cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[ItemOrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ItemOrderID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[ItemID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ItemID cannot be blank.~ ) ); }

	return TRUE;
}


NUMERIC OrderItemImages::OpenSelected()	{ return OnDoubleClick(); }


NUMERIC OrderItemImages::OnDoubleClick()
{
	if ( !DataView( GetSelected,SelectedItems ) )	{ return Warning( ~There were no selected items~ ); }

	if ( SelectedItems( GetNext,Item ) )
	{
		ExistsClause = ~Select * From OrderItemImages Where ItemOrderID='<$con.Item[ItemOrderID]>' AND ItemID=<$con.Item[ItemID]> AND Images.OrderID=OrderItemImages.OrderID AND Images.Roll=OrderItemImages.Roll AND Images.Frame=OrderItemImages.Frame~;

		Query = ~SELECT * FROM Images WHERE EXISTS (<ExistsClause>) Order By Roll,Frame~ ;

		Actions = ACTION Doc ( ~ImagesDoc~ Open ImagesDoc "Init( ~~,TRUE,~<Query>~,0 );" );
		PerformActions( Actions );

		DataWindow( StatusBar,Text,~Opened Images used by Order <$con.Item[ItemOrderID]>, Item <$con.Item[ItemID]>~ );
	}

	return TRUE;
}


NUMERIC	OrderItemImages::OnMaintainOrderItems()
{
	if ( !IsNull( ~<fOrderID>~ ) )
	{

		Actions = ACTION Doc ( ~MaintainOrdersDoc~ Open MaintainOrdersDoc "Init( ~<fOrderID>~,FALSE,TRUE,FALSE );" );
		PerformActions( Actions );
	}

	return FALSE;
}


NUMERIC OrderItemImages::AddControls( position )
{
	Define: MaintainOrderItemsButton Using DDWinCtrlDef AsSymbol MaintainOrderItemsButton Private
		Fields:	TYPENAME		BUTTON
				DACTIONSTEXT	ACTION EXEC ( <THIS>.OnMaintainOrderItems() )
				POSITION		$position + $hGap, $vGap 50 $ButtonHeight
				TEXT			Translate( ~Maintain~ )
				TOOLTIP			Translate( ~Update this order~ );
				
	return MaintainOrderItemsButton( GetRight,Position );
}


NUMERIC Init( Which,Query )
{
	if ( Defined( Grid ) )
	{
		return Grid.ReOpen();
	}

	Class( OrderItemImages,Extends,BaseGrid,Member,fOrderID,Str,~~ );

	OrderItemImages( New,Grid,~<Which>~ );

	Grid.Set(DocumentQuery,~<Query>~ );
	Grid.Set(Title,~OrderItemImages - <which>~ );

	Grid.DefineWindow();
	Grid.Init();

	return Global( Grid );
}




