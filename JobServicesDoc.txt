Include: ~FormattingRoutines~;

IncludeClass( BaseGrid );

VOID	JobServices::JobServices()						// CONSTRUCTOR
{
	TableName = ~JobServices~;
	DocumentQuery = ~Select * from <TableName> Order By ID~;
	Title = ~Job Services~;
	WindowTop = 25;
	WindowWidth = 50;
	WindowHeight = 25;
	HelpPage = ~JobServices.htm~;
	SplitterRows = ~2 7 93~;
}

STR		JobServices::GetKey( &Item )					// PRIMARY KEY FOR THE TABLE
{
	return ~ID = <$con.Item[ID]>~;
}

NUMERIC JobServices::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[ID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ID cannot be blank.~ ) ); }

	return TRUE;
}

NUMERIC JobServices::UpdateServiceCategoryCombo( &ColumnDefinition, row, col )
{

	if ( !Ado( dBase,Connect ) )
	{ 
		return Warning( ~Unable to connect to the database to verify order ID.~ );
	}

	Query = ~Select Code From ServiceCategory~;
	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		return Warning( ~Unable to query the database for service categories.~ );
	}

	List( MakeStringList, CategoryStringList,Code);

	if ( !UpdateComboBox( ColumnDefinition,CategoryStringList,<col> ) )
	{
		return Warning(Translate(~UpdateCharacterSetCombo: Unable to update Service Category combo box.~ ) );
	}

	return TRUE;
}

NUMERIC JobServices::UpdateUnitOfMeasureCombo( &ColumnDefinition, row, col )
{

	StringList( UOMJobList, Is, ~<$[DATABASE FieldTypes].UnitOfMeasure[ChoiceList]>~ );
	StringList( UOMJobStringList,CopyOf, UOMJobList );

	UOMJobStringList( DeleteStringByContents, ~PRODUCT~ );
	UOMJobStringList( DeleteStringByContents, ~PAGE~ );

	if ( !UpdateComboBox( ColumnDefinition,UOMJobStringList,<col> ) )
	{
		return Warning(Translate(~UpdateCharacterSetCombo: Unable to update Unit Of Measure combo box.~ ) );
	}

	return TRUE;
}

NUMERIC Init( Which,Query )
{
	if ( Defined( Grid ) )
	{
		Grid.ReOpen();
		return TRUE;
	}
	else
	{
		Class( JobServices,Extends,BaseGrid );

		JobServices( New,Grid );

		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.DefineWindow();
		Grid.Init();
		return Global( Grid );
	}
}

