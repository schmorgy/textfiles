Tree( Location,~[STRINGS]~,Name,CategoryChoices,PluckAndFree );

StringList: Name ~CategoryChoices~
	Fields: String  ~Default~
Hang:	CategoryChoices	~[STRINGS]~ ;

Include: ~UpdateUserSettings~;

MaxWidthInches = 250;
MaxWidthCm		= <MaxWidthInches> * 2.54;
MaxWidthMm		= <MaxWidthCm> * 10;

MaxHeightInches = 250;
MaxHeightCm		= <MaxHeightInches> * 2.54;
MaxHeightMm		= <MaxHeightCm> * 10;

MinWidthInches = 1;
MinWidthCm		= <MinWidthInches> * 2.54;
MinWidthMm		= <MinWidthCm> * 10;

MinHeightInches = 1;
MinHeightCm		= <MinHeightInches> * 2.54;
MinHeightMm		= <MinHeightCm> * 10;

StringList: Name ~NewLayoutFileTypeChoices~
	Fields:	String	~JPEG~
	Fields:	String	~TIFF~
Hang:	NewLayoutFileTypeChoices	~[STRINGS]~ ;

GenCon( NewLayout,New,DDNewLayout);

VOID CreateDialog( Category )
{
	if ( Defined( dlg ) )
	{
		Warning( Translate(~New Product Dialog is already open~));
		return;

	}
	NewLayout( Set,Width,~8~ );
	NewLayout( Set,Height,~10~ );
	GetUsersSettings( ~NewLayout~,NewLayout );
	NewLayout( Set,Category,~<Category>~ );
	NewLayout( SetValue,ProductID,~~);
	NewLayout( SetValue,ProductName,~~);
	NewLayout( SetValue,AutoSize,0);

	hGap = vGap = 10;		
	PromptHeight = 20;		PromptWidth = 120;		EditTextWidth = 150;
	ButtonWidth = 90;		ButtonHeight = 20;		EditTextHeight = 20;
	LeftX = $hGap;			CurrentY = $vGap;		CurrentRight = 0;
	ComboBoxWidth = 250;	ComboBoxHeight = 100;	StaticTextWidth = 150;
	PromptLeft = $hGap;		ValueLeft = $PromptLeft + $StaticTextWidth;
	SmallComboBoxWidth = 100; SmallEditTextWidth = 75;

	HelpButtonXOffset = 15;	HelpButtonYOffset = 15;
	HelpButtonWidth = 30;	HelpButtonLength = 20;

	Define: LayoutNewDialog Using DDWinDef
	fields: Position				0 0 400 230
			Title					~Create a New Product~
			TypeName				~Dialog~
			IsCenteredHorizontal	~T~
			IsCenteredVertical		~T~
			HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "NewLayout.htm" )
			OActionsText			ACTION Exec ( CancelPressed() )
			
	Contains: INLISTORDER
		{
			Define: FromWidthAndHeightButton Using DDWinCtrlDef AsSymbol FromWidthAndHeightButton
			Fields:	POSITION		$PromptLeft 20  150, 20
					TOOLTIP			~Use Width and Height~
					TYPENAME		~RadioButton~ 
					TEXT			~From Width and Height~
					RADIOTRUEVALUE	~0~
					GENCONNAME		THIS
					GENCONFIELD		~FromPSD~
					IACTIONSTEXT    ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS (  CheckButton(FromWidthAndHeightButton) UncheckButton(FromPSDButton)  "Exec(FromWidthAndHeightChanged())")
					OACTIONSTEXT	ACTIONS ( Save )
					
			Define: FromPSDButton	Using DDWinCtrlDef AsSymbol FromPSDButton
			Fields:	POSITION		FromWidthAndHeightButton(GetRight,Position) + $hGap, FromWidthAndHeightButton(GetTop,Position), 250, 20
					TOOLTIP			~From a Layered PSD File~
					TYPENAME		~RadioButton~ 
					TEXT			~From a Layered PSD File~
					RADIOTRUEVALUE	~1~
					GENCONNAME		THIS
					GENCONFIELD		~FromPSD~
					IACTIONSTEXT    ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS (  CheckButton(FromPSDButton) UncheckButton(FromWidthAndHeightButton)  "Exec(OnFromPSDChanged())")
					OACTIONSTEXT	ACTIONS ( Save )

		Define: ImageButton Using DDWinCtrlDef AsSymbol ImageButton
		fields:	TypeName Button
				Text ~PSD File...~
				Position FromWidthAndHeightButton(GetLeft,Position) FromWidthAndHeightButton(GetTop,Position) +  30  $StaticTextWidth  $EditTextHeight
				IsHidden T
				DActionsText ACTION EXEC ( OnImageButton() )
				Tooltip ~Select a PSD file~;

		Define: ImageEditText Using DDWinCtrlDef AsSymbol ImageEditText
		fields:	TypeName MaskedEditText
				Position ImageButton(GetLeft,Position)  ImageButton(GetTop,Position)+30 , 400 , 20
				IsHidden T
				GenConField ~PSDFilePath~
				RightJustified 1
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				OActionsText ~[Save]~
				Tooltip ~Edit PSD file path~;

			Define: WidthStaticText Using DDWinCtrlDef AsSymbol WidthStaticText
			fields:	TypeName StaticText
					Text ~Maximum Image Width:~
					Position FromWidthAndHeightButton(GetLeft,Position) FromWidthAndHeightButton(GetTop,Position) +  30  $StaticTextWidth  $EditTextHeight

			Define: WidthEditText Using DDWinCtrlDef AsSymbol WidthEditText
			fields:	TypeName MaskedEditText
					Position	$ValueLeft,WidthStaticText(GetTop,Position),
								$SmallEditTextWidth, $EditTextHeight
					GenConField ~Width~
//					IActionsText ~[GET]~
					DActionsText ~[NULL]~
					OActionsText ~[Save]~
					Mask		 ~############~
					AllowedChars ~.~
					InsertOn T
					PromptChar	 ~ ~		
					ToolTip	~Enter the width (horizontal size)~

			Define: WidthUnitsStaticText Using DDWinCtrlDef AsSymbol WidthUnitsStaticText
			fields:	TypeName StaticText
					Position WidthEditText(GetRight,Position) + 5 WidthEditText(GetTop,Position)  50  $EditTextHeight


			Define: HeightStaticText Using DDWinCtrlDef AsSymbol HeightStaticText
			fields:	TypeName StaticText
					Text ~Maximum Image Height:~
					Position	$PromptLeft,
								WidthStaticText(GetBottom,Position) + $vGap,
								$StaticTextWidth, $EditTextHeight

			Define: HeightEditText Using DDWinCtrlDef AsSymbol HeightEditText
			fields:	TypeName MaskedEditText
					Position	$ValueLeft,
								HeightStaticText(GetTop,Position),
								$SmallEditTextWidth, $EditTextHeight
					GenConField ~Height~
//					IActionsText ~[GET]~
					DActionsText ~[NULL]~
					OActionsText ~[Save]~
					Mask		 ~############~
					AllowedChars ~.~
					InsertOn T
					PromptChar	 ~ ~		
					ToolTip	~Enter the height (vertical size)~


			Define: HeightUnitsStaticText Using DDWinCtrlDef AsSymbol HeightUnitsStaticText
			fields:	TypeName StaticText
					Position HeightEditText(GetRight,Position) + 5 HeightEditText(GetTop,Position)  50  $EditTextHeight


			Define: AutosizeCheckBox Using DDWinCtrlDef AsSymbol AutosizeCheckBox
				Fields:	Position		HeightUnitsStaticText(GetRight,Position)+$vgap, WidthEditText(GetTop,Position),140, $EditTextHeight
						TypeName		CheckBox
						Text			Translate( ~Auto Size To Image Size~ )				
						GenConName		THIS
						GenConField		~AutoSize~
						IActionsText	ACTIONS ( Get )
						DActionsText	ACTION EXEC ( OnAutoSizeBox() )
						OActionsText	ACTIONS ( Save )	
						IsTabStop		TRUE
						IsEnabled		TRUE
						ToolTip			Translate( ~Check this box to have the product change size based on the image in Node 1~ );

			Define: ProductIDPrompt Using DDWinCtrlDef AsSymbol ProductIDPrompt
				fields:	TypeName		StaticText
						Text			~Product ID:~
						Position		$PromptLeft,HeightUnitsStaticText(GetBottom,Position) + $vGap,$StaticTextWidth, $EditTextHeight


			Define: ProductIDField Using DDWinCtrlDef AsSymbol ProductIDField
				fields:	TypeName		MaskedEditText
						Mask			~<$[DATABASE FieldTypes].ProductID[Mask]>~
						AllowedChars	~<$[DATABASE FieldTypes].ProductID[AllowedChars]>~
						DisallowedChars	~<$[DATABASE FieldTypes].ProductID[DisallowedChars]>?*/\:><~
						PromptChar		~<$[DATABASE FieldTypes].ProductID[PromptChar]>~		
						Text			~~
						DActionsText	ACTION EXEC ( OnProductIDCharTyped() )
						InsertOn T
						GenConField		~ProductID~
						Position		$ValueLeft,ProductIDPrompt(GetTop,Position),$EditTextWidth, $EditTextHeight
						ToolTip	~Enter a unique identifier for this product~

			Define: MultipleBox Using DDWinCtrlDef AsSymbol MultipleBox
				fields:	TypeName		CheckBox
						Text			~Composite Layouts~
						GenConField		~MultipleLayouts~
						IActionsText	ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						DActionsText	ACTION EXEC ( OnMultipleBox() )
						ToolTip			~If checked, this product has more than one layout associated with it~
						Position		ProductIDField(GetRight,Position)+$hGap,ProductIDField(GetTop,Position),$EditTextWidth, $EditTextHeight


			Define: ProductNamePrompt Using DDWinCtrlDef AsSymbol ProductNamePrompt
				fields:	TypeName		StaticText
						Text			~Description:~
						Position		$PromptLeft,ProductIDPrompt(GetBottom,Position) + $vGap,$StaticTextWidth, $EditTextHeight

			Define: ProductNameField Using DDWinCtrlDef AsSymbol ProductNameField
				fields:	TypeName		MaskedEditText
						Mask			~<$[DATABASE FieldTypes].ProductName[Mask]>~
						AllowedChars	~<$[DATABASE FieldTypes].ProductName[AllowedChars]>~
						DisallowedChars	~<$[DATABASE FieldTypes].ProductName[DisallowedChars]>~
						PromptChar		~<$[DATABASE FieldTypes].ProductName[PromptChar]>~		
						Text			~~
						InsertOn T
						GenConField		~ProductName~
						ToolTip	~Enter a description for this product~
						Position		$ValueLeft,ProductNamePrompt(GetTop,Position),$EditTextWidth, $EditTextHeight ;

			Define: PositionsPrompt Using DDWinCtrlDef AsSymbol PositionsPrompt
				fields:	TypeName		StaticText
						Text			~Positions:~
						IsHidden		T
						Position		ProductNameField(GetRight,Position) + $hGap *2,ProductNameField(GetTop,Position),50, $EditTextHeight

			Define: PositionsField Using DDWinCtrlDef AsSymbol PositionsField
				fields:	TypeName		MaskedEditText
						Mask			~####~
						PromptChar		~ ~		
						Text			~~
						InsertOn T
						GenConField		~Positions~
						IsHidden		T
						ToolTip	~The position is only used if the multiple box is checked.  School labs should enter the number of countable nodes (variable images) this layout will have~
						Position		PositionsPrompt(GetRight,Position) + $hGap,PositionsPrompt(GetTop,Position),40, $EditTextHeight ;

			Define: CategoryNamePrompt Using DDWinCtrlDef AsSymbol CategoryNamePrompt
				fields:	TypeName		StaticText
						Text			~Category:~
						Position		$PromptLeft,ProductNamePrompt(GetBottom,Position) + $vGap,$StaticTextWidth, $EditTextHeight;

			Query = ~Select Distinct Category From Products Order By Category~;
			Define: CategoryNameComboBox Using DDWinCtrlDef AsSymbol CategoryNameComboBox
			fields: TypeName		ComboBox  
					Position		$ValueLeft,CategoryNamePrompt(GetTop,Position),$ComboBoxWidth, 200
					IActionsText	~[UpdateStringList(CategoryChoices "<Query>" Category THIS "Category" -1) GetList(CategoryChoices) Get ]~
					DActionsText	ACTION EXEC ( GetAutoSaveLayoutText())
					Mask			~<$[DATABASE FieldTypes].Category[Mask]>~
					AllowedChars	~<$[DATABASE FieldTypes].Category[AllowedChars]>~
					DisallowedChars	~<$[DATABASE FieldTypes].Category[DisallowedChars]>~
					PromptChar		~<$[DATABASE FieldTypes].Category[PromptChar]>~		
					ToolTip	~Select or type the desired category you want this product to appear in~
					GenConField		Category;


			Define: LayoutpathButton Using DDWinCtrlDef AsSymbol LayoutpathButton
			fields:	TypeName Button
					Position CategoryNamePrompt(GetLeft,Position),  CategoryNamePrompt(GetBottom,Position)+ $vGap,  150,  20
					Text ~Master Layout Directory ->~
					IActionsText ~[Get]~
					DActionsText ACTION EXEC ( LayoutPathButtonDactions())
					Tooltip ~Find directory of layouts~
					GenConField ~LayoutPath~;

			
			Define: LayoutpathEditText Using DDWinCtrlDef AsSymbol LayoutpathEditText
			fields:	TypeName MaskedEditText
					Position	LayoutpathButton(GetLeft,Position)
								LayoutpathButton(GetBottom,Position) + $vGap
					400   20
					IActionsText ~[Get]~
					DActionsText ACTION EXEC ( LayoutPathDactions())
					OActionsText ~[Save]~
					Tooltip ~Enter path to directory of layouts.  The layout file will be stored in its own directory two levels below this directory.  You should set this once and never, or rarely, change it.~
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					GenConField ~LayoutDirectory~;

			Define: AutoSaveLayoutCheckBox Using DDWinCtrlDef AsSymbol AutoSaveLayoutCheckBox
				Fields:	Position		$PromptLeft, LayoutpathEditText(GetBottom,Position)+$vGap,420, $EditTextHeight+$vGap+10
						TypeName		CheckBox
//						Text			Translate( ~Save Layout in ~<$Con.NewLayout[LayoutDirectory]>~ )				
						GenConName		THIS
						GenConField		~AutoSaveLayout~
						DActionsText	ACTIONS ( Save "Exec(OnChangeAutoSaveLayoutCheckBox())")	
						IsTabStop		TRUE
						Multiline		TRUE
						ToolTip			Translate( ~Automatically saves layout in <$App.ShareDirectory>, and does not ask you where each time you create a layout~ );

			Define: AutoStoreMasksCheckBox Using DDWinCtrlDef AsSymbol AutoStoreMasksCheckBox
				Fields:	Position		$PromptLeft, AutoSaveLayoutCheckBox(GetBottom,Position)+$vGap,400, $EditTextHeight
						TypeName		CheckBox
						Text			Translate( ~Don't ask me where to save mask files when creating nodes~ )				
						GenConName		THIS
						GenConField		~AutoSaveMasks~
						DActionsText	ACTIONS ( Save )	
						IsTabStop		TRUE
						ToolTip			Translate( ~When you are creating nodes in DP2, using the oval, polygon or magic wand tool, do you want DP2 to save the mask without first asking you where to save it?~ );

/*
			Define: KPSSCheckBox Using DDWinCtrlDef AsSymbol KPSSCheckBox
				Fields:	Position		$PromptLeft, AutoStoreMasksCheckBox(GetBottom,Position)+$vGap,$EditTextWidth*2, $EditTextHeight
						TypeName		CheckBox
						Text			Translate( ~Product for Kodak ProShots Studio Software~ )				
						GenConName		THIS
						GenConField		~KPSSProduct~
						DActionsText	ACTIONS ( Save )	
						IsTabStop		TRUE
						ToolTip			Translate( ~Check this box to have the product marked as a product for Kodak ProShots Studio Software~ );

			Define: KPLSCheckBox Using DDWinCtrlDef AsSymbol KPLSCheckBox
				Fields:	Position		$PromptLeft, KPSSCheckBox(GetBottom,Position)+$vGap,$EditTextWidth*2+20, $EditTextHeight
						TypeName		CheckBox
						Text			Translate( ~Product for Kodak Proshots Basics Software~ )				
						GenConName		THIS
						GenConField		~KPLSProduct~
						DActionsText	ACTIONS ( Save )	
						IsTabStop		TRUE
						ToolTip			Translate( ~Check this box to have the product marked as a product for Kodak Proshots Basics Software~ );
*/

			Define: FileTypeStaticText Using DDWinCtrlDef AsSymbol FileTypeStaticText
				fields:	TypeName StaticText
						Text	~Convert Artwork to:~
						Position	AutoStoreMasksCheckBox(GetLeft,Position),AutoStoreMasksCheckBox(GetBottom,Position)+$vGap,100, 20
			
			Define: FileTypeComboBox Using DDWinCtrlDef AsSymbol FileTypeComboBox
			fields: TypeName		SComboBox  
					Position		CategoryNameComboBox(GetLeft,Position),FileTypeStaticText(GetTop,Position),60, 60
					IActionsText ACTIONS ( GetList(NewLayoutFileTypeChoices) Get )
					DActionsText	ACTIONS ( Save )	
					ToolTip	~Select the file type to save artwork in.  Masks will always be saved as tiffs~
					GenConField		Filetype;

			Define: ArtworkPathButton Using DDWinCtrlDef AsSymbol ArtworkPathButton
			fields:	TypeName Button
					Position $PromptLeft FileTypeStaticText(GetBottom,Position)+$vGap,  320 , $EditTextHeight
					Text ~Extract Artwork and Masks from PSD File to Directory...~
					IActionsText ~[Get]~
					DActionsText ACTION EXEC ( ArtworkPathButtonDactions())
					Tooltip ~Find directory to store images and masks that are extracted from the PSD file.  This won't affect where the layout will be stored~

			Define: ArtworkPathEditText Using DDWinCtrlDef AsSymbol ArtworkPathEditText
			fields:	TypeName MaskedEditText
					Position	ArtworkPathButton(GetLeft,Position)
								ArtworkPathButton(GetBottom,Position) + $vGap
								400   20
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Tooltip ~Enter path to directory where you want the artwork saved.  The artwork will be saved in a sub-directory having the same name as the product ID and inside the directory you enter here.~
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					GenConField ~ArtworkPath~;

			CurrentRight = AutosizeCheckBox(GetRight,Position) + $hGap * 2;

			Define: CreateButton Using DDWinCtrlDef AsSymbol CreateButton
				fields:	TypeName		DefaultButton
						Text			~Create~
						Position		(($CurrentRight - $PromptLeft) / 2) - $ButtonWidth - $hGap - $hGap,
										ArtworkPathEditText(GetBottom,Position) + $vGap,
										$ButtonWidth, $ButtonHeight
						IActionsText	~[NULL]~
						DActionsText	ACTION EXEC ( CreateButton() )
						OActionsText	~[NULL]~
						ToolTip	~Create the product~

			Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
				fields:	TypeName		Button
						Text			~Cancel~
						Position		(($CurrentRight - $PromptLeft) / 2) + $hGap,CreateButton(GetTop,Position),
										$ButtonWidth, $ButtonHeight
					IActionsText		~[Get]~
					DActionsText		ACTION EXEC ( CancelPressed() )
					OActionsText		~[NULL]~
					ToolTip	~Click this button if you want to cancel~

			Define: NewLayoutHelpButton Using DDWinCtrlDef
			fields:	TypeName		Button
					Text			~Help~
					Position		LayoutNewDialog(GetLeft,Position) + $HelpButtonXOffset,
									CancelButton(GetTop,Position),
									$HelpButtonWidth $HelpButtonLength
					DActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "NewLayout.htm" ) ;
		}	

	CurrentY = CreateButton(GetBottom,Position) + $vGap + 40;

	LayoutNewDialog( Set,Position,~0  10  <CurrentRight>  <CurrentY>~ );

	GenDlg( dlg,Definition,LayoutNewDialog,Data,NewLayout,Document,$Doc.This,New,Temporary );
	Global( dlg );
	SetInitialUnits();
	SetInitialDialogSettings();
}
VOID GetAutoSaveLayoutText()
{
	dlg( GetControlValue,ProductIDField,ProductID);
	dlg( GetControlValue,LayoutpathEditText,DefaultLayoutDirectory);
	dlg( GetControlValue,CategoryNameComboBox,Category);
	if (!IsNull(~<ProductID>~))
	{
		TextContents = ~Save Layout in <DefaultLayoutDirectory>\<Category>\<ProductID>~;
		TooltipContents = ~Layout will be saved in <DefaultLayoutDirectory>\<Category>\<ProductID>~;
	}
	else
	{
		TextContents = ~Save Layout in <DefaultLayoutDirectory>\<Category>\~;
		TooltipContents = ~Layout will be saved in <DefaultLayoutDirectory>\<Category>\~;
	}
	dlg( SetControlTitle,AutoSaveLayoutCheckBox,~<TextContents>~);
	dlg( SetValueInCtrlDef, AutoSaveLayoutCheckBox, ~Tooltip~, ~<TooltipContents>~);

//	TextContents = ~Save Masks in <DefaultLayoutDirectory>\<Category><ProductID>~;
//	dlg( SetControlTitle,AutoStoreMasksCheckBox,~<TextContents>~);
}

VOID OnAutoSizeBox()
{
	dlg( GetInput );

	WantAutoSize = MakeNumber( ~<$Con.NewLayout[AutoSize]>~ );

	dlg( ShowControls,!<WantAutoSize>,MultipleBox,WidthStaticText,WidthEditText,WidthUnitsStaticText,HeightStaticText,HeightEditText,HeightUnitsStaticText );
}

OldProductID = ~~;
VOID OnProductIDCharTyped()
{
	dlg( GetControlValue,LayoutpathEditText,LayoutDirectory);
	dlg( GetControlValue,ProductIDField,ProductID);
	dlg( GetControlValue,ProductNameField,ProductName);
	dlg( GetControlValue,CategoryNameComboBox,Category);
	dlg( GetControlValue,AutoSaveLayoutCheckBox,checked);
	if (Numeric(~<checked>~))
	{
		dlg( SetValueInCtrlDef, AutoSaveLayoutCheckBox, ~Tooltip~, ~Layout will be saved in <LayoutDirectory>\<Category>\<ProductID>~);
	}
	else
	{
		dlg( SetValueInCtrlDef, AutoSaveLayoutCheckBox, ~Tooltip~, ~DP2 will ask you where to save the layout~);
	}
	dlg( SetControlTitle,AutoSaveLayoutCheckBox,~Save Layout in <LayoutDirectory>\<Category>\<ProductID>~);
	if (~<ProductName>~ == ~<OldProductID>~)
	{
		dlg( SetControlValue,ProductNameField, ~<ProductID>~);
	} 
	OldProductID = ~<ProductID>~;
	
}

VOID OnMultipleBox()
{
	dlg( GetInput );

	WantMultiple = MakeNumber( ~<$Con.NewLayout[MultipleLayouts]>~ );

	dlg( ShowControls,<WantMultiple>,PositionsPrompt,PositionsField );
}

NUMERIC CalcNextSequenceForCategory( &Connection,Table,CategoryField,NewCategory,SequenceField )
{
	if ( !Connection( CMD,~Select MAX(<SequenceField>) From <Table> Where <CategoryField> = '<NewCategory>'~,MaxSequence ) )
	{
		NextSequence = -1;
	}
	else
	{
		NextSequence = ~<$rs.MaxSequence[#0]>~ == ~~ ? ~-1~ : ~<$rs.MaxSequence[#0]>~;
	}

	return $NextSequence + 1;
}


NUMERIC ProductAlreadyExists( ID )
{
	Query = STR ( Select * From Products Where ID = '<ID>' );

	if ( !PGenConList( ListOfProducts,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		ListOfProducts( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Database query failed: <Query>. <theErr>~ ) );
	}

	return  ListOfProducts( NumEntries ) != 0;
}


NUMERIC AddANewProduct( ID,Name,Category,ProductType,LayoutPath,MultipleLayouts,KPSSProduct,KPLSProduct )
{
	if ( !Ado( dbase,Connect ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}

	if ( <MultipleLayouts> )
	{
		LayoutPath = ~<$Str.$LayoutPath.path>~;

		Query = ~Select Multiple,ProductLayoutPath from Products Where ID = '<ID>'~;

		if ( dBase( GetValuesFor,~<Query>~,Multiple,ProductLayoutPath ) )
		{
			if ( !<Multiple> )
			{
				return Warning( ~Product <ID> already exists and does not consist of multiple layouts~ );
			}

			if ( !IsNull( ~<ProductLayoutPath>~ ) )
			{
				if ( !SimilarStr( ~<LayoutPath>~,~<ProductLayoutPath>~ ) )
				{
					return Warning( ~Product <ID> already exists as a multiple layout product\nbut the directory is <ProductLayoutPath> rather than <LayoutPath>~ );
				}
			}

			return TRUE;
		}
	}

	Cmd = ~Delete From Products Where ID = '<ID>'~;

	if ( !dbase( CMD,~<Cmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Database update failed <Cmd>. <theErr>~ ) );
	}

	NextSequence = CalcNextSequenceForCategory( dbase,Products,Category,~<Category>~,Sequence );

	UpdateCmd = ~INSERT INTO  Products(ID,LayoutName,Category,Sequence,ProductType,ProductLayoutPath,Multiple)
								Values('<ID>','<Name>','<Category>',<NextSequence>,'<ProductType>','<LayoutPath>',<MultipleLayouts>)~;

	if ( !dbase( CMD,~<UpdateCmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( ~Database update failed <UpdateCmd>. <theErr>~ );
	}

	if ( <KPSSProduct> )
	{
		UpdateCmd = ~INSERT INTO ProShotsProducts(CustomerID,ProductID,Type,Quantity,Cost)
									Values('All','<ID>',0,0,'0.00')~;

		if ( !dbase( CMD,~<UpdateCmd>~ ) )
		{
			dbase( GetErrorDescription,theErr );
			return Warning( ~Database update failed <UpdateCmd>. <theErr>~ );
		}
	}

	if ( <KPLSProduct> )
	{
		UpdateCmd = ~INSERT INTO ProShotsProducts(CustomerID,ProductID,Type,Quantity,Cost)
									Values('All','<ID>',1,0,'0.00')~;

		if ( !dbase( CMD,~<UpdateCmd>~ ) )
		{
			dbase( GetErrorDescription,theErr );
			return Warning( ~Database update failed <UpdateCmd>. <theErr>~ );
		}
	}

	return TRUE;
}


NUMERIC CreateButton()
{
	dlg( GetInput );

	MultipleLayouts = ~<$con.NewLayout[MultipleLayouts]>~;
	KPSSProduct = ~<$con.NewLayout[KPSSProduct]>~;
	KPLSProduct = ~<$con.NewLayout[KPLSProduct]>~;
	Positions = MakeNumber( ~<$con.NewLayout[Positions]>~ );
	ID = ~<$con.NewLayout[ProductID]>~;
	Name = ~<$con.NewLayout[ProductName]>~;
	Category = ~<$con.NewLayout[Category]>~;
	UnitOfMeasure = ~<$con.NewLayout[UnitOfMeasure]>~;
	Width = ~<$con.NewLayout[Width]>~;
	Height = ~<$con.NewLayout[Height]>~;
	PsdFile = ~<$con.NewLayout[PSDFilePath]>~;
	ArtworkPath = ~<$con.NewLayout[ArtworkPath]>~;
	FromPSD = ~<$con.NewLayout[FromPSD]>~;
	ArtworkFileType = ~<$con.NewLayout[Filetype]>~;
	AutoSaveLayout = ~<$con.NewLayout[AutoSaveLayout]>~;
	MasterLayoutDirectory = ~<$con.NewLayout[LayoutDirectory]>~;

	AutoSize = ~<$con.NewLayout[AutoSize]>~;

	if ( !<AutoSize> && !<FromPSD> )
	{
		if (<UnitOfMeasure> == Inches)
		{
			if (<Width> < <MinWidthInches>)
			{
				return Warning( Translate( ~Width must be greater than or equal to <MinWidthInches> inch.~ ) );
			}

			if (<Width> > <MaxWidthInches>)
			{
				return Warning( Translate( ~Width must be less than or equal to <MaxWidthInches> inches.~ ) );
			}

			if (<Height> < <MinHeightInches>)
			{
				return Warning( Translate( ~Height must be greater than or equal to <MinHeightInches> inch.~ ) );
			}
			if (<Height> > <MaxHeightInches>)
			{
				return Warning( Translate( ~Height must be less than or equal to <MaxHeightInches> inches.~ ) );
			}

		}
		else if (<UnitOfMeasure> == Centimeters)
		{
			if (<Width> < <MinWidthCm>)
			{
				return Warning( Translate( ~Width must be greater than or equal to <MinWidthCm> Centimeters.~ ) );
			}

			if (<Height> < <MinHeightCm>)
			{
				return Warning( Translate( ~Height must be greater than or equal to <MinHeightCm> Centimeters.~ ) );
			}

			if (<Width> > <MaxWidthCm>)
			{
				return Warning( Translate( ~Width must be less than or equal to <MaxWidthCm> Centimeters.~ ) );
			}

			if (<Height> > <MaxHeightCm>)
			{
				return Warning( Translate( ~Height must be less than or equal to <MaxHeightCm> Centimeters.~ ) );
			}

		}
		else if (<UnitOfMeasure> == Millimeters)
		{
			if (<Width> < <MinWidthMm>)
			{
				return Warning( Translate( ~Width must be greater than or equal to <MinWidthMm> Millimeters.~ ) );
			}

			if (<Height> < <MinHeightMm>)
			{
				return Warning( Translate( ~Height must be greater than or equal to <MinHeightMm> Millimeters.~ ) );
			}

			if (<Width> > <MaxWidthMm>)
			{
				return Warning( Translate( ~Width must be less than or equal to <MaxWidthMm> Millimeters.~ ) );
			}

			if (<Height> > <MaxHeightMm>)
			{
				return Warning( Translate( ~Height must be less than or equal to <MaxHeightMm> Millimeters.~ ) );
			}
		}
	}
	else if (<AutoSize>)
	{
		// This is an AutoSize Layout
		MultipleLayouts = FALSE;
	}

	if ( ~<ID>~ == ~~ )
		{ return Warning( Translate( ~Product ID cannot be blank~ ) ); }

	if ( ~<Name>~ == ~~ )
		{ return Warning( Translate( ~Description cannot be blank~ ) ); }

	// If multiple layouts, don't check for duplicate product ID
	if ( !<MultipleLayouts> )
	{
		if ( ProductAlreadyExists( ~<ID>~ ) )
			{ return Warning( Translate( ~A Product already exists with ID '<ID>'~ ) ); }
	}

	if ( ~<Category>~ == ~~ )
		{ Category = ~New~; }

	LayoutDirectory = ~<MasterLayoutDirectory>\<Category>~;
	if ( <MultipleLayouts> )
	{
		if ( <Positions> <= 0 )
		{
			return Warning( ~You must specify the number of positions in the layout~ );
		}

		LayoutDirectory = ~<$App.ShareDirectory>\Layouts\<Category>\<ID>~;
		Directory( Create,~<LayoutDirectory>~ );
		if (<Positions> < 10)
		{
			Extension = ~00<Positions>~;
		}
		else
		{
			if (<Positions> < 100)
			{
				Extension = ~0<Positions>~;
			}
			else
			{
				Extension = ~<Positions>~;
			}
		}
		LayoutFile = ~<LayoutDirectory>\Layout.<Extension>~;
		DefaultExt = ~~;
		aFilter = ~~;
	}
	else
	{
		if (<AutoSaveLayout> != 0)
		{
			LayoutDirectory = ~<LayoutDirectory>\<ID>~;
			LayoutFile = ~<ID>~;
		}
		else
		{
			LayoutFile = ~<LayoutDirectory>\<ID>~;
		}
		Directory( Create,~<LayoutDirectory>~ );
		DefaultExt = ~txt~;
		// no default directory, will default to the last time you saved it
		aFilter = ~Text Files (*.txt;*.txt)|*.txt; *.txt|All Files (*.*)|*.*||~;
	}

	if (<AutoSaveLayout> == 0)
	{
		if ( !FileDialog( DefaultExt,~<DefaultExt>~,HIDEREADONLY,NOREADONLYRETURN,CREATEPROMPT,
							Title,~Where do you want to save the Layout for this Product?~,
								Filter,~<aFilter>~,DefaultFile,~<LayoutFile>~,Path,LayoutPath,Save ) )
		{
			error = GetLastCommDlgError();
			if (<error> != 0)
			{
				if (<error> == 12290)
				{
					return Warning( Translate( ~Could not open the dialog to save the layout for this product\nbecause the category and/or product ID are invalid.  These\nfields cannot contain the following characters:\n\n \ / : " < > | '\n\nIf these fields contains any of these characters, remove them\nand then select the Create button again to save the layout. ~ ) );
				}
				else
				{
					return Warning( Translate( ~Could not open the dialog to save the layout for this product.\n\nThe error code is <error>.~ ) );
				}
			}
			else
			{
				return FALSE;
			}
		}
	}
	else
	{
		Directory( Create,~<LayoutDirectory>~ );
		if (!<MultipleLayouts>)
		{
			LayoutFile = ~<ID>~;
			LayoutPath = ~<LayoutDirectory>\<LayoutFile>.txt~;
		}
		else
		{
			LayoutPath = ~<LayoutFile>~;
		}
	}


//	Sleep( 5);
	LayoutPath = MakePath(type, unc, ~<LayoutPath>~);
	if ( Files( FileOrDirectoryExists,~<LayoutPath>~ ) )
	{
		Msg = Translate( ~<LayoutFile> already exists.  Do you want to replace it?~ );
		if ( MessageBox( ~<Msg>~,YESNO ) == NO )
		{
			return FALSE;
		}
	}
	
	if ( <FromPSD> && Files( FileOrDirectoryExists,~<PSDFile>~ )== 0 )
	{
		Msg = Translate( ~PSD file <PSDFile> does not exist.~ );
		if ( MessageBox( ~<Msg>~,OK ) == OK )
		{
			return FALSE;
		}
	}

	if (<FromPSD> && IsNull(~<ArtworkPath>~))
	{
		ArtworkPath = ~<MasterLayoutDirectory>\<Category>~;
	}


	if ( !AddANewProduct( ~<ID>~,~<Name>~,~<Category>~,~Digital~,~<LayoutPath>~,~<MultipleLayouts>~,~<KPSSProduct>~,~<KPLSProduct>~) )
	{ 
		return FALSE;
	}

	GenCon( DocInfo,New,DDDocumentInfo );

	DocInfo( Set,ProductID,~<ID>~ );

	if ( IsNull( ~<LayoutPath>~ ) )
	{
		return Warning( Translate( ~The path to the layout cannot be null~ ) );
	}

	if (!<FromPSD>)
	{

		if ( !NewLayout( CreateNewLayout,~<LayoutPath>~,DocInfo,<AutoSize> ? ~<$App.ShareDirectory>\Layouts\AutoResizingLayout.txt~ : ~~ ) )
		{ 
			return Warning( Translate( ~Failed to create Layout <LayoutPath>~ ) );
		}
	}
	else
	{
		WaitCursor( Begin );

		if ( !NewLayout( ImportLayoutFromPSD,~<PsdFile>~, ~<LayoutPath>~,DocInfo,~~,FALSE,~<ArtworkFileType>~,~<ArtworkPath>~ ) ) // ArtworkFileType is required and can be JPEG JPG or TIFF
		{ 
			DeleteProduct(~<ID>~);
			WaitCursor( End );
			return Warning( Translate( ~Failed to Import Layout <LayoutPath> from PSD file <PsdFile>.~) );
		}
		WaitCursor( End );
	}
	

	SeeTheImagesForThisProduct( ~<ID>~ );

	//now handling this directly in LayoutAndJobView.cpp
//	UpdateTheProductWindow(~<LayoutPath>~);
	NotifyAffectedDocuments(ProductLayoutPath );

	// SWITCH THE CATEGORY IN THE PRODUCTS WINDOW TO SHOW THE PRODUCT

	Actions = ACTION Doc ( Products "SelectProduct(~<ID>~);" );
	PerformActions( Actions );

	UpdateUserSettings(NewLayout,NewLayout);
	
	dlg( End );
	Exit();	// EXIT BECAUSE THE DOCUMENT THAT IS THE SCRIPT NEEDS TO GO AWAY
}

VOID DeleteProduct(ID)
{
	if ( !Ado( dbase,Connect ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}
	
	Cmd = ~Delete From Products Where ID = '<ID>'~;

	if ( !dbase( CMD,~<Cmd>~ ) )
	{
		dbase( GetErrorDescription,theErr );
		return Warning( Translate( ~Database update failed <Cmd>. <theErr>~ ) );
	}
}


VOID SeeTheImagesForThisProduct( ID )
{
	Actions = ACTION Doc ( Products "ImagesForThisProduct(~<ID>~);" );
	PerformActions( Actions );
}


VOID UpdateTheProductWindow( LayoutPath )
{
	Actions = ACTION Doc ( Products "UpdateProductPreviewImages(~<LayoutPath>~);" );
	PerformActions( Actions );
}


VOID CancelPressed()
{
	dlg( End );
	Exit();
}

VOID SetInitialDialogSettings()
{
	NewLayout( SetValue, ProductID, ~~);
	NewLayout( SetValue, ProductName, ~~);
	WantMultiple = MakeNumber( ~<$Con.NewLayout[MultipleLayouts]>~ );

	dlg( ShowControls,<WantMultiple>,PositionsPrompt,PositionsField );

	NewLayout( GetValue,FromPSD,ShowPSDControls);
	dlg( ShowControls,<ShowPSDControls> == 0,WidthStaticText,WidthEditText,WidthUnitsStaticText,HeightStaticText,HeightEditText,HeightUnitsStaticText,AutosizeCheckBox,MultipleBox,KPSSCheckBox,KPLSCheckBox  );
	dlg( ShowControls,<ShowPSDControls> != 0,ImageButton,ClearImageButton,ImageEditText,FileTypeComboBox,FileTypeStaticText,ArtworkPathButton,ArtworkPathEditText );
	Category = ~<$con.NewLayout[Category]>~;

	LayoutDirectory = ~<$Con.NewLayout[LayoutDirectory]>~;
	if (IsNull(~<LayoutDirectory>~))
	{
		LayoutDirectory = ~<$App.ShareDirectory>\Layouts~;
	}

	dlg( SetControlValue,LayoutpathEditText,~<LayoutDirectory>~);
	TextContents = ~Save Layout in <LayoutDirectory>\<Category>~;
	dlg( SetControlTitle,AutoSaveLayoutCheckBox,~<TextContents>~);
	
}

VOID SetInitialUnits()
{

	if ( GenCon( PreviewOptions,GetFrom,PreviewOptions,~[GENCONS]~ ) )
	{
		PreviewOptions( GetValue, PreferredUnits, CurrentUnits);
	}


	if (~<CurrentUnits>~ == ~Inches~)
	{
		dlg( SetControlValue,WidthUnitsStaticText, ~in.~); 
		dlg( SetControlValue,HeightUnitsStaticText, ~in.~); 
	}
	else if (~<CurrentUnits>~ == ~Centimeters~)
	{
		dlg( SetControlValue,WidthUnitsStaticText, ~cm.~); 
		dlg( SetControlValue,HeightUnitsStaticText, ~cm.~); 
	}
	else if (~<CurrentUnits>~ == ~Millimeters~)
	{
		dlg( SetControlValue,WidthUnitsStaticText, ~mm.~); 
		dlg( SetControlValue,HeightUnitsStaticText, ~mm.~); 
	}

	NewLayout( GetValue, ~UnitOfMeasure~, SavedUnits);
	if (~<CurrentUnits>~ == ~Inches~ && ~<SavedUnits>~ != ~Inches~)
	{

		dlg( SetControlValue,WidthEditText, 8); 
		dlg( SetControlValue,HeightEditText, 10); 
	}
	if (~<CurrentUnits>~ == ~Centimeters~ && ~<SavedUnits>~ != ~Centimeters~)
	{
		// A4 size
		dlg( SetControlValue,WidthEditText, 21); 
		dlg( SetControlValue,HeightEditText, 30.5); 
	}
	if (~<CurrentUnits>~ == ~Millimeters~ && ~<SavedUnits>~ != ~Millimeters~)
	{
		// A4 size
		dlg( SetControlValue,WidthEditText, 210); 
		dlg( SetControlValue,HeightEditText, 305); 
	}
	NewLayout( SetValue, ~UnitOfMeasure~, ~<CurrentUnits>~);

}

NUMERIC GetUsersSettings( Category,&Options )
{
	StatusBarText( Translate( ~Loading <Category> Settings for <$App.UserName>~ ) );

	Query = ~Select * From Settings Where UserName = '<$App.UserName>' AND Category = '<Category>' AND Enabled <> 0~;

	if ( !PGenConList( List,Connect,BeginTransaction,Cursor,Static,Lock,Optimistic,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Log( Session,Translate( ~Query Failed: <Query>. <theErr>~) );
	}

	Field = -1;

	while ( Options( Attribute,<++Field>,Name ) )
	{
		List( Filter,~Item = '<Name>'~ );

		if ( List( GetFirst,Setting ) )
		{
			Options( SetValue,~<Name>~,~<$pcon.Setting[SettingsText]>~ );
		}
		else
		{
			List( AddNew,Setting );
			Setting( Set,UserName,~<$App.UserName>~,Category,~<Category>~,Item,~<Name>~,SettingsText,~<$con.Options[<Name>]>~,Enabled,1 );	
			List( Update );	
		}	
	}

	List( CommitTransaction );

	return TRUE;
}

VOID FromWidthAndHeightChanged()
{
	dlg( ShowControls,1,WidthStaticText,WidthEditText,WidthUnitsStaticText,HeightStaticText,HeightEditText,HeightUnitsStaticText,AutosizeCheckBox,MultipleBox,KPSSCheckBox,KPLSCheckBox );
	WantMultiple = MakeNumber( ~<$Con.NewLayout[MultipleLayouts]>~ );
	dlg( ShowControls,<WantMultiple>,PositionsPrompt,PositionsField );
	dlg( ShowControls,0,ImageButton,ClearImageButton,ImageEditText,FileTypeComboBox,FileTypeStaticText,ArtworkPathButton,ArtworkPathEditText );
}

VOID OnFromPSDChanged()
{
	dlg( ShowControls,0,WidthStaticText,WidthEditText,WidthUnitsStaticText,HeightStaticText,HeightEditText,HeightUnitsStaticText,AutosizeCheckBox,MultipleBox,KPSSCheckBox,KPLSCheckBox,PositionsPrompt,PositionsField  );
	dlg( ShowControls,1,ImageButton,ClearImageButton,ImageEditText,FileTypeComboBox,FileTypeStaticText,ArtworkPathButton,ArtworkPathEditText  );
}

NUMERIC OnImageButton()
{
	NewLayout(GetValue,PSDFilePath, PSDFilePath);
	
	PathWithoutFilename = ~<$Str.$PSDFilePath.Path>~;
	
	if (!SimilarStr(~<PathWithoutFilename>~,~~))
	{
		if ( Files( DirectoryExists,~<PathWithoutFilename>~))
		{
			dir = ~<PathWithoutFilename>~;
		}
		else
		{
			dir = ~<$App.ShareDirectory>~;
		}
	}

	aFilter = ~PSD Files (*.psd;*.psd)|*.psd|~;
	if ( FileDialog( DefaultDirectory,~<dir>~,Filter,~<aFilter>~,Title,Translate(~Find the PSD File~),PATH,Path,Open ) )
	{
		retval = dlg( SetControlValue,ImageEditText, ~<Path>~); 
		return (<retval>);
	}

	return FALSE;
}

VOID LayoutPathButtonDactions()
{
	dlg( GetControlValue,LayoutpathEditText,CurrentVal);
	dlg( GetControlValue,ProductIDField,ProductID);
	dlg( GetControlValue,CategoryNameComboBox,Category);
	if (~<CurrentVal>~ != ~~)
	{
		if (!IsNull(~<ProductID>~))
		{
			if (!IsNull(~<Category>~))
			{
				path = ~<CurrentVal>\<Category>\<ProductID>~;
			}
			else
			{
				path = ~<CurrentVal>\Category\<ProductID>~;
			}
		}
		else
		{
			if (!IsNull(~<Category>~))
			{
				path = ~<CurrentVal>\<Category>\Product ID~;
			}
			else
			{
				path = ~<CurrentVal>\Category\Product ID~;
			}
		}
		strippedPath = ~<$Str.$path.RemoveDoubleBackSlashes>~;
		Msg = Translate( ~It is unusual to change the Master Grid Layout Directory.  Do you want to change the master directory where new layouts will be created?~ );
		if ( MessageBox( ~<Msg>~,YESNO ) == NO )
		{
			return;
		}
	}

	Title = Translate( ~Find the Master Layout directory~ );
	if ( FileDialog( TITLE,~<title>~,PATH,Path,DEFAULTFILE,~Any File~,DEFAULTDIRECTORY, ~<CurrentVal>~,Save ) )
	{
		Path = MakePath(type, unc, ~<Path>~);
		GetParentDirectory( Path);
		NewLayout( SetValue, ~LayoutDirectory~, ~<Path>~);
		dlg( SetControlValue,LayoutpathEditText,~<Path>~);

	}
}

VOID LayoutPathDactions()
{
	dlg( GetControlValue,LayoutpathEditText,LayoutDirectory);
	dlg( GetControlValue,ProductIDField,ProductID);
	dlg( GetControlValue,ProductNameField,ProductName);
	dlg( GetControlValue,CategoryNameComboBox,Category);
	dlg( GetControlValue,AutoSaveLayoutCheckBox,checked);
	if (Numeric(~<checked>~))
	{
		dlg( SetValueInCtrlDef, AutoSaveLayoutCheckBox, ~Tooltip~, ~Layout will be saved in <LayoutDirectory>\<Category>\<ProductID>~);
	}
	else
	{
		dlg( SetValueInCtrlDef, AutoSaveLayoutCheckBox, ~Tooltip~, ~DP2 will ask you where to save the layout~);
	}
	dlg( SetControlTitle,AutoSaveLayoutCheckBox,~Save Layout in <LayoutDirectory>\<Category>\<ProductID>~);
	if (~<ProductName>~ == ~<OldProductID>~)
	{
		dlg( SetControlValue,ProductNameField, ~<ProductID>~);
	} 
	OldProductID = ~<ProductID>~;
}

VOID OnChangeAutoSaveLayoutCheckBox()
{
	dlg( GetControlValue,AutoSaveLayoutCheckBox,checked);
	if (Numeric(~<checked>~))
	{
		dlg( GetControlValue,LayoutpathEditText,DefaultLayoutDirectory);
		dlg( GetControlValue,CategoryNameComboBox,Category);
		dlg( GetControlValue,ProductIDField,ProductID);
		dlg( SetValueInCtrlDef, AutoSaveLayoutCheckBox, ~Tooltip~, ~Layout will be saved in <DefaultLayoutDirectory>\<Category>\<ProductID>~);
	}
	else
	{
		dlg( SetValueInCtrlDef, AutoSaveLayoutCheckBox, ~Tooltip~, ~DP2 will ask you where to save the layout~);
	}

}

VOID ArtworkPathButtonDactions()
{
	Title = Translate( ~Find the Artwork directory~ );
	NewLayout( GetValue, ~ArtworkPath~, Path);
	aFilter = ~Jpeg Files (*.jpg;*.jpg)|*.jpg; *.jpg|All Files (*.*)|*.*||~;
	if ( FileDialog( DefaultDirectory, ~<Path>~,Title,~<title>~,PATH,Path,DefaultFile,~Any File~,Save ) )
	{
		Path = MakePath(type, unc, ~<Path>~);
		GetParentDirectory( Path);
		NewLayout( SetValue, ~ArtworkPath~, ~<Path>~);
		dlg( SetControlValue,ArtworkPathEditText,~<Path>~);

	}
}

VOID GetParentDirectory (&x)
{
	if ( !IsNull( String( EndsWith,~\~,~<x>~ ) ) )
	{
		substr( ~<x>~,0,strlen(~<x>~)-1,x );
	}

	x = ~<$Str.$x.Path>~;
}

NUMERIC OnClearImageButton()
{
	return dlg( SetStrings,ImageEditText,~~ );
}

NUMERIC CheckShared( Path )
{
	if ( IsNULL( ~<Path>~ ) )
	{
		return TRUE;
	}

	if ( !Files( IsUNC,~<Path>~ ) && NetworkOperation() )
	{
		Msg = Translate( UIMessages,UnsharedFile,~<Path>~ );

		if ( MessageBox( ~<Msg>~,YESNO ) != YES )
			{ return FALSE; }
	}

	return TRUE;
}