
// The relationship between PreviewOptions and menu definitions are as follows:
// These are the initial default settings to be used.
// At startup, in the startup.txt file, we look up the user name in the database
// and find that user's current settings for these preview options.
// startup.txt copies the database values to the PreviewOptions GenCon.
// Also, when the user selects the menu option, the inverse value is copied
// to the preview options GenCon.  Note that the names of fields are significant.
// The ViewSettings menu definition GC has these field names, prefixed with
// "ViewSettings" (i.e. "ViewSettingsShowBackground").  See BaseStartup::UpdateViewMenuFrom( &PreviewOptions )
// in Startup.txt

Define:		PreviewOptions Using DDPreviewOptions
	Fields: 	ShowBoxes				~T~
	Fields: 	ShowPrompts				~F~
	Fields:		ShowWarningsBox			~T~
	Fields:		HighestResolution		~F~
	Fields:     WarnIfColorMgtMissing   ~T~
	Fields:		PreferredUnits			~Inches~
Hang:  PreviewOptions ~[GenCons]~;

Define:		ImageOptions Using DDImageOptions
	Fields: 	ImageCompare			0
Hang:  ImageOptions ~[GenCons]~;

Define: BoxColors Using DDBoxColors
	Fields: 	ImageNodeBoxesInsideRed		~0~
	Fields: 	ImageNodeBoxesInsideGreen	~255~
	Fields: 	ImageNodeBoxesInsideBlue	~0~
	Fields:		ImageNodeBoxesOutsideRed	~255~
	Fields:		ImageNodeBoxesOutsideGreen	~0~
	Fields:		ImageNodeBoxesOutsideBlue	~0~
	Fields:		TextNodeBoxesInsideRed		~0~
	Fields:		TextNodeBoxesInsideGreen	~0~
	Fields:		TextNodeBoxesInsideBlue		~0~
	Fields:		TextNodeBoxesOutsideRed		~255~
	Fields:		TextNodeBoxesOutsideGreen	~255~
	Fields:		TextNodeBoxesOutsideBlue	~255~
	Fields:		ResizeNodeBoxesOutsideRed	~0~
	Fields:		ResizeNodeBoxesOutsideGreen	~255~
	Fields:		ResizeNodeBoxesOutsideBlue	~0~
	Fields:		ResizeTextNodeBoxesOutsideRed	~255~
	Fields:		ResizeTextNodeBoxesOutsideGreen	~0~
	Fields:		ResizeTextNodeBoxesOutsideBlue	~0~
Hang: BoxColors  ~[GenCons]~;


VOID DefineColor(Color,Value)
{
	GenCon(~<Color>~,New,DDLong);		
	<Color>(SetValue,Long,<Value>);		
	StandardColors(InsertBefore,~<Color>~);
}

VOID DefineStandardTextColors()
{
	GenCon(StandardColors,New,DDLong);
	Global(StandardColors);
	DefineColor(AliceBlue,~0xf0f8ff~);
	DefineColor(AntiqueWhite,~0xfaebd7~);
	DefineColor(Aqua,~0x00ffff~);
	DefineColor(Aquamarine,~0x7fffd4~);
	DefineColor(Azure,~0xf0ffff~);
	DefineColor(Beige,~0xf5f5dc~);
	DefineColor(Bisque,~0xffe4c4~);
	DefineColor(Black,~0x000000~);
	DefineColor(BlanchedAlmond,~0xffebcd~);
	DefineColor(Blue,~0x0000FF~);
	
	DefineColor(BlueViolet,~0x8A2BE2~);
	DefineColor(Brown,~0xA52A2A~);
	DefineColor(BurlyWood,~0xDEB887~);
	DefineColor(CadetBlue,~0x5F9EA0~);

	DefineColor(Chartreuse,~0x7FFF00~);
	DefineColor(Chocolate,~0xD2691E~);
	DefineColor(Coral,~0xFF7F50~);
	DefineColor(CornflowerBlue,~0x6495ED~);
	DefineColor(Cornsilk,~0xFFF8DC~);

	DefineColor(Crimson,~0xDC143C~);
	DefineColor(Cyan,~0x00FFFF~);
	DefineColor(DarkBlue,~0x00008B~);
	DefineColor(DarkCyan,~0x008B8B~);
	DefineColor(DarkGoldenRod,~0xB8860B~);


	DefineColor(DarkGray,~0xA9A9A9~);
	DefineColor(DarkGrey,~0xA9A9A9~);
	DefineColor(DarkGreen,~0x006400~);
	DefineColor(DarkKhaki,~0xBDB76B~);
	DefineColor(DarkMagenta,~0x8B008B~);

	DefineColor(DarkOliveGreen,~0x556B2F~);
	DefineColor(Darkorange,~0xFF8C00~);
	DefineColor(DarkOrchid,~0x9932CC~);
	DefineColor(DarkRed,~0x8B0000~);
	DefineColor(DarkSalmon,~0xE9967A~);

	DefineColor(DarkSeaGreen,~0x8FBC8F~);
	DefineColor(DarkSlateBlue,~0x483D8B~);
	DefineColor(DarkSlateGray,~0x2F4F4F~);
	DefineColor(DarkSlateGrey,~0x2F4F4F~);
	DefineColor(DarkTurquoise,~0x00CED1~);


	DefineColor(DarkViolet,~0x9400D3~);
	DefineColor(DeepPink,~0xFF1493~);
	DefineColor(DeepSkyBlue,~0x00BFFF~);
	DefineColor(DimGray,~0x696969~);
	DefineColor(DimGrey,~0x696969~);


	DefineColor(DodgerBlue,~0x1E90FF~);
	DefineColor(FireBrick,~0xB22222~);
	DefineColor(FloralWhite,~0xfffaf0~);
	DefineColor(ForestGreen,~0x228B22~);
	DefineColor(Fuchsia,~0xFF00FF~);
	
	DefineColor(Gainsboro,~0xDCDCDC~);
	DefineColor(GhostWhite,~0xF8F8FF~);
	DefineColor(Gold,~0xFFD700~);
	DefineColor(GoldenRod,~0xDAA520~);
	DefineColor(Gray,~0x808080~);
	
	DefineColor(Grey,~0x808080~);
	DefineColor(Green,~0x008000~);
	DefineColor(GreenYellow,~0xADFF2F~);
	DefineColor(HoneyDew,~0xF0FFF0~);
	DefineColor(HotPink,~0xFF69B4~);
	
	DefineColor(IndianRed,~0xCD5C5C~);
	DefineColor(Indigo,~0x4B0082~);
	DefineColor(Ivory,~0xFFFFF0~);
	DefineColor(Khaki,~0xF0E68C~);
	DefineColor(Lavender,~0xE6E6FA~);
	DefineColor(LavenderBlush,~0xFFF0F5~);

	DefineColor(LawnGreen,~0x7CFC00~);
	DefineColor(LemonChiffon,~0xFFFACD~);
	DefineColor(LightBlue,~0xADD8E6~);
	DefineColor(LightCoral,~0xF08080~);
	DefineColor(LightCyan,~0xE0FFFF~);
	DefineColor(LightGoldenRodYellow,~0xFAFAD2~);

	DefineColor(LightGray,~0x0D3D3D3~);
	DefineColor(LightGrey,~0x0D3D3D3~);
	DefineColor(LightGreen,~0x90EE90~);
	DefineColor(LightPink,~0xFFB6C1~);
	DefineColor(LightSalmon,~0xFFA07A~);
	DefineColor(LightSeaGreen,~0x20B2AA~);
	
	DefineColor(LightSkyBlue,~0x87CEFA~);
	DefineColor(LightSlateGray,~0x778899~);
	DefineColor(LightSlateGrey,~0x778899~);
	DefineColor(LightSteelBlue,~0xB0C4DE~);
	DefineColor(LightYellow,~0xFFFFE0~);
	
	DefineColor(Lime,~0x00FF00~);
	DefineColor(LimeGreen,~0x32CD32~);
	DefineColor(Linen,~0xFAF0E6~);
	DefineColor(Magenta,~0xFF00FF~);
	DefineColor(Maroon,~0x800000~);
	
	DefineColor(MediumAquaMarine,~0x66CDAA~);
	DefineColor(MediumBlue,~0x0000CD~);
	DefineColor(MediumOrchid,~0xBA55D3~);
	DefineColor(MediumPurple,~0x9370D8~);
	DefineColor(MediumSeaGreen,~0x3CB371~);
	DefineColor(MediumSlateBlue,~0x7B68EE~);
	
	DefineColor(MediumSpringGreen,~0x00FA9A~);
	DefineColor(MediumTurquoise,~0x48D1CC~);
	DefineColor(MediumVioletRed,~0xC71585~);
	DefineColor(MidnightBlue,~0x191970~);
	DefineColor(MintCream,~0xF5FFFA~);
	DefineColor(MistyRose,~0xFFE4E1~);
	DefineColor(Moccasin,~0xFFE4B5~);
	
	DefineColor(NavajoWhite,~0xFFDEAD~);
	DefineColor(Navy,~0x000080~);
	DefineColor(OldLace,~0xFDF5E6~);
	DefineColor(Olive,~0x808000~);
	DefineColor(OliveDrab,~0x6B8E23~);
	DefineColor(Orange,~0xFFA500~);
	
	DefineColor(OrangeRed,~0xFF4500~);
	DefineColor(Orchid,~0xDA70D6~);
	DefineColor(PaleGoldenRod,~0xEEE8AA~);
	DefineColor(PaleGreen,~0x98FB98~);
	DefineColor(PaleTurquoise,~0xAFEEEE~);
	DefineColor(PaleVioletRed,~0xD87093~);
	
	DefineColor(PapayaWhip,~0xFFEFD5~);
	DefineColor(PeachPuff,~0xFFDAB9~);
	DefineColor(Peru,~0xCD853F~);
	DefineColor(Pink,~0xFFC0CB~);
	DefineColor(Plum,~0xDDA0DD~);
	DefineColor(PowderBlue,~0xB0E0E6~);
	
	DefineColor(Purple,~0x800080~);
	DefineColor(Red,~0xFF0000~);
	DefineColor(RosyBrown,~0xBC8F8F~);
	DefineColor(RoyalBlue,~0x4169E1~);
	DefineColor(SaddleBrown,~0x8B4513~);
	DefineColor(Salmon,~0xFA8072~);
	DefineColor(SandyBrown,~0xF4A460~);

	DefineColor(SeaGreen,~0x2E8B57~);
	DefineColor(SeaShell,~0xFFF5EE~);
	DefineColor(Sienna,~0xA0522D~);
	DefineColor(Silver,~0xC0C0C0~);
	DefineColor(SkyBlue,~0x87CEEB~);
	DefineColor(SlateBlue,~0x6A5ACD~);
	
	DefineColor(SlateGray,~0x708090~);
	DefineColor(SlateGrey,~0x708090~);
	DefineColor(Snow,~0xFFFAFA~);
	DefineColor(SpringGreen,~0x00FF7F~);
	DefineColor(SteelBlue,~0x4682B4~);
	DefineColor(Tan,~0xD2B48C~);
	DefineColor(Teal,~0x008080~);
	
	DefineColor(Thistle,~0xD8BFD8~);
	DefineColor(Tomato,~0xFF6347~);
	DefineColor(Turquoise,~0x40E0D0~);
	DefineColor(Violet,~0xEE82EE~);
	DefineColor(Wheat,~0xF5DEB3~);
	DefineColor(White,~0xFFFFFF~);
	
	DefineColor(WhiteSmoke,~0xF5F5F5~);
	DefineColor(Yellow,~0xFFFF00~);
	DefineColor(YellowGreen,~0x9ACD32~);
	
	Hang: StandardColors[GenCons];
}

// Override DefineMyTextColors in ScriptOverrides on the server to add your own colors.  They will appear in alphabetical order
VOID DefineMyTextColors()
{
}
OptionalInclude( ~<$App.ShareDirectory>\Scripts\ScriptOverrides\MyTextColors.txt~ );
DefineStandardTextColors();
DefineMyTextColors();
VOID AddColorsInRange(Start,End)
{
	i = 0;
	success = GenCon( ColorGenCon,GetFrom,StandardColors,~[GenCons]~ );
	while ( ColorGenCon(GetNext,ColorGC))
	{
		ColorGC(GetName,GCName);
		FirstCharOfColorName =  ~<$Str.$GCName.Substr|0|1|>~;
		if ( 
			Asc(~<FirstCharOfColorName>~) >= Asc(~<Start>~)  && 
			Asc(~<FirstCharOfColorName>~) <= Asc(~<End>~) 
			)
		{
			Define:	<GCName><i> using DDMenuItemDef
			Fields: IDText ~ID~
					ActionsText ~[SelectColorByName(<GCName>)]~
					Text	~<GCName>~
		}
		else if (Numeric(Asc(~<FirstCharOfColorName>~)) > Numeric(Asc(~<End>~)))
		{
			return;
		}

	}

}


NUMERIC AddAnimotoStyles()
{
	path = ~<$App.HTMLPages>\Animoto\AnimotoStyles.xml~;
	
	ReturnOnFailure( Files( FileExists,~<path>~ ) );

	xml( parser );

	NumNodes = parser( load,~<path>~,SetSelectionNamespaces, ~xmlns:z='#RowsetSchema'~,SelectNodes,StylesList,~//video_style~ ) ;

	index = -1;
	
	while ( StylesList( GetNodeByIndex,Row,<++CurrentNode> ) )
	{
		Define:	AnimotoStyle<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("<$XMLNode.Row[display_name/Text]>","AnimotoMovieStyle")]~
					Text		~<$XMLNode.Row[display_name/Text]>~
	}
	
	return TRUE;
}


NUMERIC AddAnimotoSongsByGenre()
{
	path = ~<$App.HTMLPages>\Animoto\AnimotoSongs.xml~;
	
	ReturnOnFailure( Files( FileExists,~<path>~ ) );

	xml( parser );

	NumNodes = parser( load,~<path>~,SetSelectionNamespaces, ~xmlns:z='#RowsetSchema'~,SelectNodes,TitleList,~//z:row~ ) ;

	StringList( GenreList,New,NoDuplicateValues,InAlphaOrder );
	
	CurrentNode = -1;
	
	while ( TitleList( GetNodeByIndex,Row,<++CurrentNode> ) )
	{
		GenreList( AddString,~<$XMLNode.Row[@genre/Text]>~ );
	}
	
	Index = 0;
	
	while ( GenreList(GetNextString,Genre) )
	{
		Define:	AnimotoGenre<++Index>	using	DDMenuItemDef
		Fields:	Text		~<Genre>~
				IDText		~ID~
		Contains:	INLISTORDER
		{	
			AddAnimotoSongForGenre( ~<Genre>~,TitleList );
		}		
	}
	
	Define:	AnimotoGenre<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("0","AnimotoSongStart")]~
					Text		~Song Start (seconds into the selected song.  0 is the default.)~
					
	Define:	AnimotoGenre<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("0","AnimotoSongDuration")]~
					Text		~Song Duration (seconds from song start time.  0 is the entire song)~
	
	return TRUE;
}


VOID AddAnimotoSongForGenre( Genre,&TitleList )
{
	CurrentNode = -1;
	
	while ( TitleList( GetNodeByIndex,Row,<++CurrentNode> ) )
	{
		ContinueIf( !SimilarStr(~<Genre>~,~<$XMLNode.Row[@genre/Text]>~) );
		
		Define:	AnimotoSong<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("<$XMLNode.Row[@title/Text]>","AnimotoSongTitle")]~
					Text		~<$XMLNode.Row[@title/Text]>~
	}
}


VOID AddAnimotoResolutions()
{
	index = -1;
	
	Define:	AnimotoResolution<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("720p","AnimotoResolution")]~
					Text		~720p~
					
	Define:	AnimotoResolution<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("480p","AnimotoResolution")]~
					Text		~480p~
}



VOID AddAnimotoRotation()
{
	index = -1;
	
	Define:	AnimotoRotation<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("0","AnimotoRotation")]~
					Text		~0~
					
	Define:	AnimotoRotation<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("90","AnimotoRotation")]~
					Text		~90~
				
	Define:	AnimotoRotation<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("180","AnimotoRotation")]~
					Text		~180~
					
	Define:	AnimotoRotation<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("270","AnimotoRotation")]~
					Text		~270~
}



VOID AddAnimotoVisualTypes()
{
	index = -1;
	
	Define:	AnimotoVisualTypes<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("Image","AnimotoVisualType")]~
					Text		~Image (DEFAULT.  OrderItem is rendered and the rendered image appears in the movie)~
					
	Define:	AnimotoVisualTypes<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("Title","AnimotoVisualType")]~
					Text		~Title (Contains movie captions but the rendered order item will not appear in the movie)~
					
	Define:	AnimotoVisualTypes<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					IsEnabled	F
					ActionsText ~[PasteMenuGenconAttribute("Footage","AnimotoVisualType")]~
					Text		~Footage (mpg file containing movie footage to be contained in the movie)~
					
	Define:	AnimotoVisualTypes<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("MetaData","AnimotoVisualType")]~
					Text		~Meta Data (Contains movie data but this rendered order item will not appear in the movie)~
}



VOID AddAnimotoCredentials()
{
	index = -1;
	
	Define:	AnimotoCredentials<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("UserID","AnimotoUserID")]~
					Text		~Unique UserID for making Animoto Movies~
					
	Define:	AnimotoCredentials<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("LoginID","AnimotoLoginID")]~
					Text		~LoginID for Approving and Downloading Movies~
					
	Define:	AnimotoCredentials<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					IsEnabled	F
					ActionsText ~[PasteMenuGenconAttribute("Password","AnimotoPassword")]~
					Text		~Password for Approving and Downloading Movies~
					
	Define:	AnimotoCredentials<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("CustomerID","AnimotoCustomerID")]~
					Text		~CustomerID for this UserID~
}


VOID AddAnimotoEmailInfo()
{
	index = -1;
	
	Define:	AnimotoEmail<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoEmailAddress")]~
					Text		~Customer Email Address (someone@somewhere.com)~
					
	Define:	AnimotoEmail<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoEmailFrom")]~
					Text		~From Email Address (movies@mylab.com)~
					
	Define:	AnimotoEmail<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoEmailReplyTo")]~
					Text		~Reply To Email Address (support@mylab.com)~
}



VOID AddAnimotoCaptions()
{
	index = -1;
	
	Define:AnimotoCaptions<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("Line 1 of Caption","AnimotoTitleCardLine1")]~
					Text		~First Line of a Caption Title (22 chars or less)~
					
	Define:	AnimotoCaptions<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("Line 2 of Caption","AnimotoTitleCardLine2")]~
					Text		~Second Line of a Caption Title (30 chars or less)~
}


VOID AddAnimotoFootage()
{
	index = -1;
	
	Define:AnimotoFootage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoFootagePath")]~
					Text		~Path of movie footage to include~
					
	Define:AnimotoFootage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoFootageURL")]~
					Text		~URL of movie footage to include~
					
	Define:AnimotoFootage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoVideoStart")]~
					Text		~Seconds into the footage to start.  Default is 0~
					
	Define:AnimotoFootage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoVideoDuration")]~
					Text		~Seconds of the footage to include.  Max is 10 seconds~
					
	Define:AnimotoFootage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoAudioMix")]~
					Text		~Use the sound from the footage~
}



VOID AddAnimotoEffects()
{
	index = -1;
	
	Define:AnimotoEffects<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoCover")]~
					Text		~Generate a cover image from this visual (Image or Footage only)~
					
	Define:	AnimotoEffects<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoSpotLit")]~
					Text		~Give special consideration to this image~
}


VOID AddAnimotoWorkflow()
{
	index = -1;
	
	Define:	AnimotoWorkflow<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoNoPreview")]~
					Text		~No Preview Movie  (0 or 1)~
					
	Define:	AnimotoWorkflow<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoReviewAndApprove")]~
					Text		~Require Review And Approve (0 or 1)~
					
	Define:	AnimotoWorkflow<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoDownloadable")]~
					Text		~Publish Final Movies for Downloading (0 or 1)~
					
	Define:	AnimotoWorkflow<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoWebResDestinationPath")]~
					Text		~WebRes Destination Path to publish movie to.  Overrides publishing for a specific customer.~
					
	Define:	AnimotoWorkflow<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoHiResDestinationPath")]~
					Text		~HiRes Destination Path to publish movie to.  Overrides publishing for a specific customer.~
}


VOID AddAnimotoRImage()
{
	index = -1;
	
	Define:	AnimotoRImage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoDVDOutput")]~
					Text		~Want DVD or CD Output (0 or 1)~
	
	Define:	AnimotoRImage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("","AnimotoRImageOrderID")]~
					Text		~Add the Movie to an Existing RImage Job (RImage Job ID)~
									
	Define:	AnimotoRImage<++index> using DDMenuItemDef
				Fields:		Text		~Create New Media using RImage Template~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoRImageTemplates();
					}
					
	Define:	AnimotoRImage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoRImageQty")]~
					Text		~RImage Qty~
					
	Define:	AnimotoRImage<++index> using DDMenuItemDef
			Fields: IDText		~ID~
					ActionsText ~[PasteMenuGenconAttribute("1","AnimotoReleaseRImageOrder")]~
					Text		~Release RImage Job after adding the movie (0 or 1)~
}


VOID AddAnimotoRImageTemplates()
{
	index = -1;
		
	PGenConList( List,Connect,Query,~Select ID From RImageTemplates Order By ID~ );
	
	while ( List( GetNext,Template ) )
	{
		TemplateID = ~<$pcon.Template[ID]>~;
		
		Define:	AnimotoRImageTemplate<++index> using DDMenuItemDef
				Fields: IDText		~ID~
						ActionsText ~[PasteMenuGenconAttribute("<TemplateID>","AnimotoRImageTemplate")]~
						Text		~<TemplateID>~
	}
}


VOID AddAnimotoSetups()
{
	index = -1;
		
	PGenConList( List,Connect,Query,~Select ID From Animoto Order By ID~ );
	
	while ( List( GetNext,Setup ) )
	{
		SetupID = ~<$pcon.Setup[ID]>~;
		
		Define:	AnimotoSetups<++index> using DDMenuItemDef
				Fields: IDText		~ID~
						ActionsText ~[PasteMenuGenconAttribute("<SetupID>","AnimotoSetup")]~
						Text		~<SetupID>~
	}
}


VOID	AddBookParameters()
{
	Define:	AnimotoSetups<++index> using DDMenuItemDef
				Fields: IDText		~ID~
						ActionsText ~[PasteMenuGenconAttribute("1 or 0","VariableBookPage")]~
						Text		~Variable Book Page (used by Job Population Scripts)~
}


Define:	JobTextEditorMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{			
		Define:	EditCut using DDMenuItemDef
			Fields:		Text		~Cu&t~
						LangSection	MainMenu
						LangItem	EditCut
						IDText		~57635~
		
		Define:	EditCopy using DDMenuItemDef
			Fields:		Text		~&Copy~
						LangSection	MainMenu
						LangItem	EditCopy
						IDText		~57634~
		
		Define:	EditPaste using DDMenuItemDef
			Fields:		Text		~&Paste~
						LangSection	MainMenu
						LangItem	EditPaste
						IDText		~57637~
						
		Define:	Choosestyle using DDMenuItemDef
		Fields:		Text		~Text Style~
		IDText		~ID~
		Contains:	INLISTORDER
		{	
			Define:	ChooseStyleBold using DDMenuItemDef
			Fields:		Text		~Bold~
				IDText		~ID~
				ActionsText ~[SelectTextStyle(Bold)]~

			Define:	ChooseStyleItalic using DDMenuItemDef
			Fields:		Text		~Italic~
				IDText		~ID~
				ActionsText ~[SelectTextStyle(Italic)]~

			Define:	ChooseStyleNormal using DDMenuItemDef
			Fields:		Text		~Normal~
				IDText		~ID~
				ActionsText ~[SelectTextStyle(Normal)]~
		}		
		
		Define:	ChooseColor	using	DDMenuItemDef
		Fields:	Text		~Text Color~
				IDText		~ID~
				ActionsText ~[SelectTextColor]~

					
		Define:	CopyColors	using	DDMenuItemDef
		Fields:	Text		~Text Color Names~
				IDText		~ID~
		Contains:	INLISTORDER
		{			
			Define:	CopyColorA using DDMenuItemDef
			Fields:		Text		~A to C~
				IDText		~ID~
				Contains: INLISTORDER
				{
					AddColorsInRange(A,C);
				}
			Define:	CopyColorD using DDMenuItemDef
			Fields:		Text		~D to F~
				IDText		~ID~
				Contains: INLISTORDER
				{
					AddColorsInRange(D,F);
				}
			Define:	CopyColorG using DDMenuItemDef
			Fields:		Text		~G to L~
				IDText		~ID~
				Contains: INLISTORDER
				{
					AddColorsInRange(G,L);
				}
			Define:	CopyColorM using DDMenuItemDef
			Fields:		Text		~M to P~
				IDText		~ID~
				Contains: INLISTORDER
				{
					AddColorsInRange(M,P);
				}
			Define:	CopyColorQ using DDMenuItemDef
			Fields:		Text		~Q to Z~
				IDText		~ID~
				Contains: INLISTORDER
				{
					AddColorsInRange(Q,Z);
				}
		}
		
		Define:	BookParameters using DDMenuItemDef
		Fields:		Text		~Books~
			IDText		~ID~
			Contains: INLISTORDER
			{
				AddBookParameters();
			}
				
		Define:	Animoto	using	DDMenuItemDef
		Fields:	Text		~Animoto Movie Attributes~
				IDText		~ID~
		Contains:	INLISTORDER
		{
			Define:	AnimotoVisualType using DDMenuItemDef
				Fields:		Text		~Visual Type~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoVisualTypes();
					}
					
			Define:	AnimotoCaptions using DDMenuItemDef
				Fields:		Text		~Captions~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoCaptions();
					}
					
			Define:	AnimotoEffects using DDMenuItemDef
				Fields:		Text		~Visual Effects~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoEffects();
					}
					
			Define:	AnimotoRotations using DDMenuItemDef
				Fields:		Text		~Rotation~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoRotation();
					}
					
					
			Define:	AnimotoFootage using DDMenuItemDef
				Fields:		Text		~Footage~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoFootage();
					}
					
					
			Define:	AnimotoSeparaterLine1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
					
					
			Define:	AddAnimotoSetups using DDMenuItemDef
				Fields:		Text		~Setups~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoSetups();
					}

					
			Define:	AnimotoMovieTitle using DDMenuItemDef
				Fields: IDText		~ID~
					IsEnabled	F
					ActionsText ~[PasteMenuGenconAttribute("Movie Title","AnimotoMovieTitle")]~
					Text		~Movie Title (Max 255 characters)~
					
			Define:	AnimotoProductCode using DDMenuItemDef
					Fields: IDText		~ID~
						IsEnabled	F
						ActionsText ~[PasteMenuGenconAttribute("","AnimotoProductCode")]~
						Text		~Product Code (used in the POF)~
	
			Define:	AnimotoStyles using DDMenuItemDef
				Fields:		Text		~Styles~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoStyles();
					}
					
			Define:	AnimotoSongs using DDMenuItemDef
				Fields:		Text		~Songs~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoSongsByGenre();
					}
					
			Define:	AnimotoSizes using DDMenuItemDef
				Fields:		Text		~Resolutions~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoResolutions();
					}
					
					
			Define:	AnimotoSeparaterLine2 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
					
					
			Define:	AnimotoCrendentials using DDMenuItemDef
				Fields:		Text		~Credentials~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoCredentials();
					}
					
			Define:	AnimotoEmails using DDMenuItemDef
				Fields:		Text		~Email~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoEmailInfo();
					}
					
					
			Define:	AnimotoSeparaterLine3 using DDMenuItemDef
				Fields:	Text		~~
						IDText		~NULL~

			
			Define:	AnimotoWorkflow using DDMenuItemDef
				Fields:		Text		~Workflow~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoWorkflow();
					}
					
							
			Define:	AnimotoRImage using DDMenuItemDef
				Fields:		Text		~RImage~
					IDText		~ID~
					Contains: INLISTORDER
					{
						AddAnimotoRImage();
					}
		}
	}


Hang:	JobTextEditorMenu ~[UI Menus]~ ;


Define: DragDropDialogBoxInfo Using DDDragDropDialogBoxInfo
	Fields:			MainText		~What do you want to do?~
	Fields:			Title			~Share Node Contents~
	Fields:			SwitchImagesText		~Switch Images~
	Fields:			CopyPixelsText			~Copy Pixels~
	Fields:			CopyCropText			~Copy Crop~
	Fields:			SameFileAsText			~Same File As~
	Fields:			SwitchImagesValue		1
	Fields:			CopyPixelsValue			0
	Fields:			CopyCropValue			0
	Fields:			SameFileAsValue			0
	Fields:			SetWindowPos	1
	Fields:			X				250
	Fields:			Y				50
	Fields:			Width			250
	Fields:			Height			200
	Fields:			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "ImageDragOptions.htm" )

Hang: DragDropDialogBoxInfo  ~[GenCons]~;

Define: CountableDialogBoxInfo Using DDCountableDialogBoxInfo
	Fields:			MainText		~What do you want to do?~
	Fields:			Title			~Maintain Countable Nodes~
	Fields:			MakeSelectedCountableText		~Make Selected Nodes Countable~
	Fields:			MakeSelectedCountableTooltip			~Make Selected Nodes Countable.  This may change the node IDs of these nodes for you.~
	Fields:			ResequenceCountableText			~Resequence Countable Nodes~
	Fields:			ResequenceCountableTooltip			~Resequence the countable nodes to 1,2,3,.... etc.   School labs must have nodes in sequential order to ensure correct automated job population.~
	Fields:			ChangeNodeIDText			~Change Node ID of the First Selected Node To:~
	Fields:			ChangeNodeIDTooltip			~For advanced users only.  This changes the node ID of the first selected node to a desired value.  This is useful if you want to use KPIS jobs using fixed node numbers.~
	Fields:			MakeSelectedUncountableText			~Make Selected Nodes Uncountable~
	Fields:			MakeSelectedUncountableTooltip			~Make Selected Nodes Uncountable.  This may change the node IDs of these nodes for you.~
	Fields:			NodeNumberTooltip			~Enter the desired node number.  The node number must be greater than 0 and be unused in other nodes.~
	Fields:			MakeSelectedCountableValue		1
	Fields:			ChangeNodeIDValue			0
	Fields:			ResequenceCountableValue			0
	Fields:			MakeSelectedUncountableValue			0
	Fields:			NodeNumber	1
	Fields:			SetWindowPos	1
	Fields:			X				550
	Fields:			Y				120
	Fields:			Width			330
	Fields:			Height			230
	Fields:			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "CountableNodeOptions.htm" )

Hang: CountableDialogBoxInfo  ~[GenCons]~;


Define: AlignDialogBoxInfo Using DDAlignDialogBoxInfo
	Fields:			MainText		~What do you want to do?~
	Fields:			Title			~Align Nodes~
	Fields:			AlignTopText		~Align Top Edges~
	Fields:			AlignBottomText			~Align Bottom Edges~
	Fields:			AlignLeftText			~Align Left Edges~
	Fields:			AlignRightText			~Align Right Edges~
	Fields:			AlignRightValue		1
	Fields:			AlignLeftValue			0
	Fields:			AlignTopValue			0
	Fields:			AlignBottomValue			0
	Fields:			SetWindowPos	1
	Fields:			X				400
	Fields:			Y				80
	Fields:			Width			280
	Fields:			Height			220
Hang: AlignDialogBoxInfo  ~[GenCons]~;


// Define Translation Tables for keywords
Define: JustificationTranslationLeft Using DDListBoxItemTranslations
	Fields: FieldName				~Justification:~
	Fields: ListBoxItemText			~Left~
	Fields: FieldValue				~L~
Hang: JustificationTranslationLeft  ~[UI TranslationTables]~
Define: JustificationTranslationRight Using DDListBoxItemTranslations
	Fields: FieldName				~Justification:~
	Fields: ListBoxItemText			~Right~
	Fields: FieldValue				~R~
Hang: JustificationTranslationRight  ~[UI TranslationTables]~
Define: JustificationTranslationCenter Using DDListBoxItemTranslations
	Fields: FieldName				~Justification:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~C~
Hang: JustificationTranslationCenter  ~[UI TranslationTables]~
// Define Translation Tables for Justification keyword
Define: AlignmentTranslationTop Using DDListBoxItemTranslations
	Fields: FieldName				~TextAlignment:~
	Fields: ListBoxItemText			~Top~
	Fields: FieldValue				~T~
Hang: AlignmentTranslationTop  ~[UI TranslationTables]~
Define: AlignmentTranslationBottom Using DDListBoxItemTranslations
	Fields: FieldName				~TextAlignment:~
	Fields: ListBoxItemText			~Bottom~
	Fields: FieldValue				~B~
Hang: AlignmentTranslationBottom  ~[UI TranslationTables]~
Define: AlignmentTranslationCenter Using DDListBoxItemTranslations
	Fields: FieldName				~TextAlignment:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~C~
Hang: AlignmentTranslationCenter  ~[UI TranslationTables]~
Define: GroupTranslationNone Using DDListBoxItemTranslations
	Fields: FieldName				~TGroup:~
	Fields: ListBoxItemText			~None~
	Fields: FieldValue				~~
Hang: GroupTranslationNone  ~[UI TranslationTables]~
Define: CropTranslationCrop Using DDListBoxItemTranslations
	Fields: FieldName				~AutoCropMode:~
	Fields: ListBoxItemText			~Crop~
	Fields: FieldValue				~C~
Hang: CropTranslationCrop  ~[UI TranslationTables]~
Define: CropTranslationFit Using DDListBoxItemTranslations
	Fields: FieldName				~AutoCropMode:~
	Fields: ListBoxItemText			~Fit~
	Fields: FieldValue				~F~
Hang: CropTranslationFit  ~[UI TranslationTables]~
Define: CropTranslationPreserve Using DDListBoxItemTranslations
	Fields: FieldName				~AutoCropMode:~
	Fields: ListBoxItemText			~Preserve~
	Fields: FieldValue				~P~
Hang: CropTranslationPreserve  ~[UI TranslationTables]~

Define: CropToolSampleSizePoint Using DDListBoxItemTranslations
	Fields: FieldName				~SampleSize~
	Fields: ListBoxItemText			~Point~
	Fields: FieldValue				~0~
Hang: CropToolSampleSizePoint  ~[UI TranslationTables]~
Define: CropToolSampleSize3 Using DDListBoxItemTranslations
	Fields: FieldName				~SampleSize~
	Fields: ListBoxItemText			~3 x 3 average~
	Fields: FieldValue				~1~
Hang: CropToolSampleSize3  ~[UI TranslationTables]~
Define: CropToolSampleSize5 Using DDListBoxItemTranslations
	Fields: FieldName				~SampleSize~
	Fields: ListBoxItemText			~5 x 5 average~
	Fields: FieldValue				~2~
Hang: CropToolSampleSize5  ~[UI TranslationTables]~

Define: TraceN Using DDListBoxItemTranslations
	Fields: FieldName				~Trace:~
	Fields: ListBoxItemText			~Trace Off~
	Fields: FieldValue				~N~
Hang: TraceN  ~[UI TranslationTables]~
Define: TraceF Using DDListBoxItemTranslations
	Fields: FieldName				~Trace:~
	Fields: ListBoxItemText			~Trace And Delete on Success~
	Fields: FieldValue				~F~
Hang: TraceF  ~[UI TranslationTables]~
Define: TraceY Using DDListBoxItemTranslations
	Fields: FieldName				~Trace:~
	Fields: ListBoxItemText			~Trace On~
	Fields: FieldValue				~Y~
Hang: TraceY  ~[UI TranslationTables]~;


Define: RectTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndRectOperation]~	
				LClickDnActionsText ~[InitRectOperation]~  
//				ShiftKeyDnCursor ~CROSS~	
//				ShiftKeyUpCursor ~CROSS~
				AlternateCursor2 ~CROSS~
				AlternateCursor ~hmove~	
				MouseMoveActionsText ~[RectOperation]~
				DeselectActionsText	~[TerminateRectOperation]~
				ToolbarButtonGenConName ~LayoutToolbarRectTool~
				StatusMessage ~Click and drag to draw a rectangle.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
Hang:  RectTool ~UI Tools~ ;

Define: ImageCropTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndRectOperation]~	
				LClickDnActionsText ~[InitRectOperation]~  
				ShiftKeyDnCursor ~CROSS~	
				ShiftKeyUpCursor ~CROSS~
				AlternateCursor ~hmove~	
				MouseMoveActionsText ~[RectOperation]~
				DeselectActionsText	~[TerminateRectOperation]~
				ToolbarButtonGenConName ~LayoutToolbarImageCropTool~
				MouseWheelActionsText ~[ChromaKeyZoom]~
				StatusMessage ~Shift-Ctrl-Click and drag to draw a rectangle, Ctrl-Click to reduce crop, Shift-Click to enlarge crop~
Hang:  ImageCropTool ~UI Tools~ ;


Define: ImageRedEyeTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndRedEyeRectOperation]~	
				LClickDnActionsText ~[InitRedEyeRectOperation]~  
				ShiftKeyDnCursor ~eye~	
				ShiftKeyUpCursor ~eye~
				MouseMoveActionsText ~[RedEyeRectOperation]~
				ToolbarButtonGenConName ~LayoutToolbarImageRedEyeTool~
				StatusMessage ~Click and drag to draw a rectangle~
Hang:  ImageRedEyeTool ~UI Tools~ ;


Define: WhiteBalanceTool Using DDToolDef
	Fields:		LClickUpActionsText ~[Noop]~	// to force drawtool:handleActions setCapture call  11/2/1
				LClickDnActionsText ~[WhiteBalance]~  
				ShiftKeyDnCursor ~CROSS~	
				ShiftKeyUpCursor ~CROSS~
				AlternateCursor ~hmove~	
				MouseMoveActionsText ~~
				ToolbarButtonGenConName ~LayoutToolbarWhiteBalanceTool~
				StatusMessage ~Shift-Ctrl-Click and drag to draw a rectangle, Ctrl-Click to reduce crop, Shift-Click to enlarge crop~
Hang:  WhiteBalanceTool ~UI Tools~ ;


Define: OvalTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndOvalOperation]~	
				LClickDnActionsText ~[InitOvalOperation]~  
				MouseMoveActionsText ~[OvalOperation]~
//				ShiftKeyDnCursor ~CROSS~	
//				ShiftKeyUpCursor ~CROSS~	
				AlternateCursor ~hmove~	
				AlternateCursor2 ~CROSS~	
				DeselectActionsText	~[TerminateOvalOperation]~
				ToolbarButtonGenConName ~LayoutToolBarDrawOval~
				StatusMessage ~Click and drag to draw an oval.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
Hang:  OvalTool ~UI Tools~ ;

Define: WandTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndSelectByColor]~	
				LClickDnActionsText ~[InitSelectByColor]~  
				MouseMoveActionsText ~[SelectByColor]~
//				ShiftKeyDnCursor ~Cursors\cursor23.cur~	
//				ShiftKeyUpCursor ~Cursors\cursor23.cur~
				ShiftKeyDnCursor ~MagicWand~	
				ShiftKeyUpCursor ~MagicWand~
				ToolbarButtonGenConName ~LayoutToolBarMagicWand~
				StatusMessage ~Click on a point to select by color.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
				DeselectActionsText	~[TerminateSelectByColor]~
	
Hang:  WandTool ~UI Tools~ ;

Define:	RectToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	RectToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce RectToolSetupDialog )

	}
MENU:	RectToolSetupMenu ~[UI Menus]~ ;

Define:	ImageCropToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	ImageCropToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce ImageCropToolSetupDialog )

	}
MENU:	ImageCropToolSetupMenu ~[UI Menus]~ ;

Define:	MagicWandToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	MagicWandToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( WandToolParam OpenOnce MagicWandToolSetupDialog )

	}

MENU:	MagicWandToolSetupMenu ~[UI Menus]~ ;

Define:	PolygonToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	PolygonToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( PolygonToolParam OpenOnce PolygonToolSetupDialog )

	}

MENU:	PolygonToolSetupMenu ~[UI Menus]~ ;

Define:	OvalToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	OvalToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( OvalToolParam OpenOnce OvalToolSetupDialog )

	}

MENU:	OvalToolSetupMenu ~[UI Menus]~ ;

Define:	ResizeToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	ResizeToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( ResizeToolParam OpenOnce ResizeToolSetupDialog )
	}

MENU:	ResizeToolSetupMenu ~[UI Menus]~ ;


Define:	GridToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	GridToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( GridToolParam OpenOnce GridToolSetupDialog )
	}

MENU:	GridToolSetupMenu ~[UI Menus]~ ;



Define: ZoomTool Using DDToolDef
	Fields:		
				LClickDnActionsText ~[Zoom]~  
				LClickUpActionsText ~[NULL]~  // this has to be here!!.  An Action NULL will bypass the default view action
											  // taking this out will cause problems
//				ShiftKeyDnCursor	~Cursors\zoomout.cur~	
//				ShiftKeyUpCursor	~Cursors\zoomin.cur~
//				AlternateCursor		~Cursors\zoom.cur~
				ShiftKeyDnCursor	~zoomout~	
				ShiftKeyUpCursor	~zoomin~
				AlternateCursor		~zoom~
				ToolbarButtonGenConName ~JobToolbarZoom~
				StatusMessage ~Click to zoom in.  Hold the shift key down and click to zoom out~
Hang:  ZoomTool ~UI Tools~ ;

Define: ResizeTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndResize]~	
				LClickDnActionsText ~[Resize]~  
				MouseMoveActionsText ~[ChangeCursor]~
				DeselectActionsText ~[TerminateResizeTool Invalidate]~
				ShiftKeyDnCursor ~Trck4way~
				ShiftKeyUpCursor ~Trck4way~
				ToolbarButtonGenConName ~JobToolbarResize~
				StatusMessage ~Click and drag a node to resize or move the node.~
Hang:  ResizeTool ~UI Tools~ ;


Define: GridTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndMultipleMove]~	
				LClickDnActionsText ~[MultipleMove]~  
				MouseMoveActionsText ~[MoveNodes]~
				DeselectActionsText	~[Invalidate]~
				ShiftKeyDnCursor ~Trck4way~	
				ShiftKeyUpCursor ~Trck4way~
				ToolbarButtonGenConName ~LayoutToolbarMultipleMoveTool~
				StatusMessage ~Move nodes~
Hang:  GridTool ~UI Tools~ ;


Define: CurveTool Using DDToolDef
	Fields:		LClickUpActionsText ~[PathMouseUp]~	// <-- To add another tool, make sure these are valid actions
				LClickDnActionsText ~[PathMouseDown]~  
				MouseMoveActionsText ~[PathMouseMove]~
				DeselectActionsText	~[ClearBezierPath Invalidate]~
				ShiftKeyDnCursor ~Cross~	
				ShiftKeyUpCursor ~Cross~
				//AlternateCursor ~hmove~	 testing changing the cursor when completing circle
				ToolbarButtonGenConName ~LayoutToolbarTextOnPathTool~
				StatusMessage ~Draw a curve~
Hang:  CurveTool ~UI Tools~ ;



Define: CropTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndCrop]~	
				LClickDnActionsText ~[Crop]~  
				MouseMoveActionsText ~[DragImage]~
//				DeselectActionsText	~[TerminateCropOperation]~
//				ShiftKeyDnCursor ~Cursors\hmove.cur~	
//				ShiftKeyUpCursor ~Cursors\hmove.cur~
				ShiftKeyDnCursor ~hmove~	
				ShiftKeyUpCursor ~hmove~
				AlternateCursor ~Preview~	
				AlternateCursor2 ~CantMove~	
				ToolbarButtonGenConName ~JobToolbarCrop~
				StatusMessage ~Click on the image with Ctrl down to enlarge it, or click with Shift down to make it smaller, or click and drag to move it.~
Hang:  CropTool ~UI Tools~ ;


Define: SelectTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndSwitchNodes]~
				LClickDnActionsText ~[SelectNode]~  
				DoubleClickActionsText ~[EditNode]~
				MouseMoveActionsText ~[SwitchNodes]~
				ShiftKeyDnCursor ~ARROW~	
				ShiftKeyUpCursor ~ARROW~
				ToolbarButtonGenConName ~JobToolbarSelect~
//				AlternateCursor ~Cursors\flipcursor.cur~
				AlternateCursor ~flipcursor~
				StatusMessage ~Select a Node to edit node parameters~
Hang:  SelectTool ~UI Tools~ ;


//Note:  to reenable this, initialize the tool in the job window definition's
//Iactions. Also in layout.txt's IActions (PDF 4/19/99)


Define: PolygonTool Using DDToolDef
	Fields:		
				LClickUpActionsText ~[ReleasePolygonPoint]~
				LClickDnActionsText ~[PolygonPoint]~  
				ShiftKeyDnCursor ~CROSS~	
				ShiftKeyUpCursor ~CROSS~
//				AlternateCursor ~Cursors\flipcursor.cur~
				AlternateCursor ~flipcursor~
				ToolbarButtonGenConName ~JobToolbarPolygon~
				StatusMessage ~Click on a point to add a point.  Hold the ctrl key down and click on a point to remove it.~
Hang:  PolygonTool ~UI Tools~ ;


Define:	NodeMenuObj	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define: NodeProperties using DDMenuItemDef
			Fields: Text		~&Properties~
					IDText		~ID~
					ActionsText ~[Dialog(PropertiesDialog SELECTEDNODE)]~
					StatusMessage ~Edit Node Properties~
					StatusMessage ~Delete the selected node~
		Define:	JobNullLineOne using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobLayers	using	DDMenuItemDef
			Fields:	Text		~Layers~
					IDText		~ID~
			Contains: INLISTORDER
			{
				Define: MoveNodeToFront	using	DDMenuItemDef
					Fields: Text		~Move to &Front~
							IDText		~ID~
							ActionsText	~[MoveNodeToFront]~
							StatusMessage ~Move the selected node to the front~
				Define: MoveNodeToBack	using	DDMenuItemDef
					Fields: Text		~Move to Ba&ck~
							IDText		~ID~
							ActionsText	~[MoveNodeToBack]~
							StatusMessage ~Move the selected node to the back~
				Define: MoveNodeOnePositionToFront	using	DDMenuItemDef
					Fields: Text		~Move 1 to Front~
							IDText		~ID~
							ActionsText	~[MoveNodeOnePositionToFront]~
							StatusMessage ~Move the selected node one position to the back~
				Define: MoveNodeOnePositionToBack	using	DDMenuItemDef
					Fields: Text		~Move 1 to Back~
							IDText		~ID~
							ActionsText	~[MoveNodeOnePositionToBack]~
							StatusMessage ~Move the selected node one position to the back~
			}

		Define:	CenterNode	using	DDMenuItemDef
			Fields:	Text		~Center Horizontally~
					IDText		~ID~
					ActionsText  ~[CenterHorizontal]~
					StatusMessage ~Delete the selected node~
		Define:	CenterNodeVertical	using	DDMenuItemDef
			Fields:	Text		~Center Vertically~
					IDText		~ID~
					ActionsText  ~[CenterVertical]~
					StatusMessage ~Delete the selected node~
		Define:	JobAlignNodes using DDMenuItemDef
			Fields:	Text			~Align Nodes~
					IDText			~ID~
					IsChecked	F
					ActionsText  ~[AlignNodes]~
		Define:	RotateNode	using	DDMenuItemDef
			Fields:	Text		~Rotate Selected Nodes~
					IDText		~ID~
					ActionsText ~[Dialog(RotateNodeDialog SELECTEDNODE)]~
					StatusMessage ~Rotate image, text and frames to an arbitrary angle~


		Define:	JobNullLineThree using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	JobNullLineOne using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	NewTextNodeFromPath	using	DDMenuItemDef
			Fields:	Text		~Create Text Node From Curve (Ctrl-Release or Ctrl-Depress Mouse)~
					IDText		~ID~
					ActionsText  ~[NewTextNodeFromPath]~
					StatusMessage ~Create a text node~
					
		Define:	NextCurve	using	DDMenuItemDef
			Fields:	Text		~Display the next curve (Tab)~
					IDText		~ID~
					ActionsText  ~[NextCurve]~
					StatusMessage ~Display the next Curve~

		Define:	PreviousCurve	using	DDMenuItemDef
			Fields:	Text		~Display the previous curve (Shift-Tab)~
					IDText		~ID~
					ActionsText  ~[PreviousCurve]~
					StatusMessage ~Display the previous Curve~
					
		Define:	RemoveLastCurveSegment	using	DDMenuItemDef
			Fields:	Text		~Remove the last curve segment (D or L)~
					IDText		~ID~
					ActionsText  ~[RemoveLastCurveSegment]~
					StatusMessage ~Remove the last curve segment~

		Define:	RemoveCurve	using	DDMenuItemDef
			Fields:	Text		~Delete the curve (X or M)~
					IDText		~ID~
					ActionsText	~[ClearBezierPath Invalidate]~
					StatusMessage ~Delete the curve~
		Define:	JobShowBoxes using DDMenuItemDef
			Fields:	Text		~Show Node B&oxes~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseShowBoxes
									Invalidate
								 ]~ 
					StatusMessage ~Display boxes around all nodes in the composite image~


		Define:	JobShowPrompts using DDMenuItemDef
			Fields:	Text		~Show P&rompts~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseShowPrompts 
								 ]~ 
					StatusMessage ~Display prompts over all nodes in the composite image~

		Define:	JobNullLineTwo using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobNewNodes using DDMenuItemDef
			Fields:	Text			~Create New Nodes~
					IDText			~ID~
					IsChecked	F
					ActionsText	ACTION DOC ( GridLayoutDialog OpenOnce GridLayoutDialog "Init(WindowName);")
		Define:	CreateSimilarNode	using	DDMenuItemDef
			Fields:	Text		~Copy Selected Nodes (F4)~
					IDText		~ID~
					ActionsText  ~[CreateSimilarNodes]~
					StatusMessage ~Copy selected nodes(s) to another place in the layout~
		Define:	NewImageNodeFromSelection	using	DDMenuItemDef
			Fields:	Text		~Create &Image Node From Selection~
					IDText		~ID~
					ActionsText  ~[NewNodeFromSelection]~
					StatusMessage ~Create an image node~
		Define:	NewTextNodeFromSelection	using	DDMenuItemDef
			Fields:	Text		~Create T&ext Node From Selection~
					IDText		~ID~
					ActionsText  ~[NewTextNodeFromSelection]~
					StatusMessage ~Create a text node~


		Define:	DeleteNode	using	DDMenuItemDef
			Fields:	Text		~&Delete Node~
					IDText		~ID~
					ActionsText  ~[DeleteNode]~
		Define:	ConvertImageNodeToTextNode	using	DDMenuItemDef
			Fields:	Text		~Convert image node to text node~
					IDText		~ID~
					ActionsText  ~[ChangeImageNodeToTextNode]~
		Define:	JobNullLineTwoA using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobSelectionTools	using	DDMenuItemDef
			Fields:	Text		~Selection Tools~
					IDText		~ID~
			Contains: INLISTORDER
			{
				Define:	SelectAll	using	DDMenuItemDef
					Fields:	Text		~Select Entire Background~
							IDText		~ID~
							ActionsText  ~[SelectAll]~
							StatusMessage ~Select entire background~

				Define:	SelectNone	using	DDMenuItemDef
					Fields:	Text		~Erase Current Selection~
							IDText		~ID~
							ActionsText  ~[SelectNone]~
							StatusMessage ~Save a mask for debugging purposes~

				Define:	InvertSelection	using	DDMenuItemDef
					Fields:	Text		~Invert Selection~
							IDText		~ID~
							ActionsText  ~[InvertSelection]~
							StatusMessage ~Save a mask for debugging purposes~

				Define:	RestorePreviousSelection	using	DDMenuItemDef
					Fields:	Text		~Restore Previous &Selection~
							IDText		~ID~
							ActionsText  ~[RestorePreviousSelection]~
							StatusMessage ~Restore the previous selection~
			}

		Define:	JobNullLineFour using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	JobSelectAllNodes using DDMenuItemDef
			Fields:	Text			~Select All Nodes (Ctrl-A)~
					IDText			~ID~
					IsChecked	F
					ActionsText  ~[SelectAllNodes]~

		Define:	JobSelectCountable using DDMenuItemDef
			Fields:	Text			~Select Countable Nodes~
					IDText			~ID~
					ActionsText  ~[SelectCountable]~

		Define:	JobMaintainCountable using DDMenuItemDef
			Fields:	Text			~Maintain Countable Nodes~
					IDText			~ID~
					ActionsText  ~[MaintainCountable]~

		Define:	JobShowBestGrid using DDMenuItemDef
			Fields:	Text			~Display Grid~
					IDText			~ID~
					ActionsText  ~[ShowBestGrid]~

		Define:	JobAddKid using DDMenuItemDef
			Fields:	Text			~Add Subject~
					IDText			~ID~
					ActionsText  ~[AddKid]~

		Define:	JobRemoveKid using DDMenuItemDef
			Fields:	Text			~Remove Subject~
					IDText			~ID~
					ActionsText  ~[RemoveKid]~
		Define:	JobNullLineFive using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	AfterEffects	using	DDMenuItemDef
			Fields:	Text		~After E&ffects~
					IDText		~ID~
					ActionsText ~[Dialog(AfterEffectsDialog AfterEffects:)]~
					StatusMessage ~Adjust image after efffects~

		Define:	JobInsertLogo	using	DDMenuItemDef
			Fields:	Text		~Insert &Logo~
					IDText		~ID~
					ActionsText  ~[Dialog(LogoDialog_WithText SELECTEDNODE)]~

		Define:	EditTNode	using	DDMenuItemDef
			Fields:	Text		~Edit Text in Selected Node~
					IDText		~ID~
					ActionsText ~[EditTextNode]~
					StatusMessage ~Edit the text for the selected node~
		Define:	EditINode	using	DDMenuItemDef
			Fields:	Text		~Specify Image File for Selected Node~
					IDText		~ID~
					ActionsText ~[EditImageNode]~
					StatusMessage ~specify the image file for the selected node~
		Define:	JobSaveSetup	using	DDMenuItemDef
			Fields:	Text		~Create a Style from the Selected Node~
					IDText		~ID~
					ActionsText  ~[SaveSetup]~
					StatusMessage ~Create and save a Style from the selected node~

		Define:	JobNullLineSix using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	AuditSpot using DDMenuItemDef
			Fields:	Text		~Audit product for Spot color for Nexpress printers~
					IDText		~ID~
					ActionsText  ~[AuditSpotColor]~
					
		Define:	JobNullLineSeven using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
					
		Define:	JobViewAsText	using	DDMenuItemDef
			Fields:	Text		~View As Text~
					IDText		~ID~
					ActionsText  ~[ViewAsText]~
					StatusMessage ~View as Text~
		if ( GetUserPermissions( Admin ) )
		{

			Define:	TraceImagingChain	using	DDMenuItemDef
				Fields:	Text		~Trace Imaging Chain~
						IDText		~ID~
						ActionsText  ~[TraceImagingChain]~
						StatusMessage ~Trace Imaging Chain to a file~


		}
	}

Hang:	NodeMenuObj ~[UI Menus]~ ;

Define:	AlternateJobMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	JobShowPrompts using DDMenuItemDef
			Fields:	Text		~Show P&rompts~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseCheckMenu(JobShowPrompts) 
									Invalidate
								 ]~ 
					StatusMessage ~Display prompts over all nodes in the composite image~

		Define:	JobShowBoxes using DDMenuItemDef
			Fields:	Text		~Show Node B&oxes~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseCheckMenu(JobShowBoxes) 
									ReverseShowBoxes
									Invalidate
								 ]~ 
		Define:	JobShowPaths using DDMenuItemDef
			Fields:	Text		~Show Curves~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseShowPaths
									Invalidate
								 ]~ 

		Define:	JobShowMasks using DDMenuItemDef
			Fields:	Text			~Show &Masks~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowMasks) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 
		Define:	JobShowText using DDMenuItemDef
			Fields:	Text			~Show &Text~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowText) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 
		Define:	JobShowImages using DDMenuItemDef
			Fields:	Text			~Show Im&ages~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowImages) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 
		Define:	JobShowFrames using DDMenuItemDef
			Fields:	Text			~Show &Frames~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowFrames) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 

		Define:	JobViewAsText	using	DDMenuItemDef
			Fields:	Text		~View As Text~
					IDText		~ID~
					ActionsText  ~[ViewAsText]~
					StatusMessage ~View as Text~


}

Hang:	AlternateJobMenu ~[UI Menus]~ ;


Define:	DropProductMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	InsertProduct1	using	DDMenuItemDef
			Fields:	Text		~Copy Into~
					IDText		~ID~
					ActionsText  ~[InsertProduct(F 0)]~  
					StatusMessage ~Copy and Scale Image and Text Nodes~
		Define:	InsertProduct2	using	DDMenuItemDef
			Fields:	Text		~Copy Into, Rotate Clockwise~
					IDText		~ID~
					ActionsText  ~[InsertProduct(F 90)]~  
					StatusMessage ~Copy, Scale and Rotate by 90 degrees Image and Text Nodes~
		Define:	InsertProduct3	using	DDMenuItemDef
			Fields:	Text		~Copy Into, Rotate 180 degrees~
					IDText		~ID~
					ActionsText  ~[InsertProduct(F 180)]~  
					StatusMessage ~Copy, Scale and Rotate by 180 degrees Image and Text Nodes~
		Define:	InsertProduct4	using	DDMenuItemDef
			Fields:	Text		~Copy Into, Rotate Counter Clockwise~
					IDText		~ID~
					ActionsText  ~[InsertProduct(F 270)]~  
					StatusMessage ~Copy, Scale and Rotate by 270 degrees Image and Text Nodes~
		Define:	ApplyStyle1	using	DDMenuItemDef
			Fields:	Text		~Apply as a Style - Without Image and Text~
					IDText		~ID~
					ActionsText  ~[ApplyStyle(0)]~
					StatusMessage ~Apply as a Style - Without Image and Text~
		Define:	ApplyStyle2	using	DDMenuItemDef
			Fields:	Text		~Apply as a Style - With Image and Text~
					IDText		~ID~
					ActionsText  ~[ApplyStyle(1)]~
					StatusMessage ~Apply as a Style - With Image and Text~
	}

Hang:	DropProductMenu ~[UI Menus]~ ;



Define:	DragMenuObj	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	CreateImgNode	using	DDMenuItemDef
			Fields:	Text		~Create Image Node from Mask~
					IDText		~ID~
					ActionsText  ~[CreateImgNode]~
					StatusMessage ~Create an image node from the mask dragged onto the layout.~
		Define:	JobNullLineOne using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: AddCharTexture	using	DDMenuItemDef
			Fields: Text		~Add Character Texture~
					IDText		~ID~
					ActionsText	~[AddCharTexture]~
					StatusMessage ~Add character texture to node.~
		Define: AddBlockTexture	using	DDMenuItemDef
			Fields:	Text		~Add Block Texture~
					IDText		~ID~
					ActionsText	~[AddBlockTexture]~
					StatusMessage ~Add block texture to node.~
		Define: JobNullLineTwo	using	DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: DropMask		using	DDMenuItemDef
			Fields:	Text		~Drop Mask in Node~
					IDText		~ID~
					ActionsText	~[DropMask]~
					StatusMessage ~Add mask to node.~
		Define: DropBGColorMask		using	DDMenuItemDef
			Fields:	Text		~Drop Background Color Mask in Node~
					IDText		~ID~
					ActionsText	~[DropBGColorMask]~
					StatusMessage ~Add background color mask to node.~
		Define: DropTextBGColorMask	using	DDMenuItemDef
			Fields:	Text		~Drop Text Background Color Mask in Node~
					IDText		~ID~
					ActionsText	~[DropTextBGColorMask]~
					StatusMessage ~Add text background color mask to node.~
		Define: JobNullLineThreeA	using	DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: DropFrame		using	DDMenuItemDef
			Fields:	Text		~Drop Frame in Node~
					IDText		~ID~
					ActionsText	~[DropFrame]~
					StatusMessage ~Add frame to node.~
		Define: DropFrameMask	using	DDMenuItemDef
			Fields:	Text		~Drop Frame Mask in Node~
					IDText		~ID~
					ActionsText	~[DropFrameMask]~
					StatusMessage ~Add frame mask to node.~
		Define: JobNullLineFourA	using	DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: DropChromakeyBackroundFile	using	DDMenuItemDef
			Fields:	Text		~Drop Background file in Node~
					IDText		~ID~
					ActionsText	~[DropChromakeyBackroundFile]~
					StatusMessage ~Add chroma key background file to node.~
					LangSection	UIMessages
					LangItem	DropChromakeyBackroundFile
		Define: DropCommonChromakeyBackroundFile	using	DDMenuItemDef
			Fields:	Text		~Drop Background file in all nodes~
					IDText		~ID~
					ActionsText	~[DropCommonChromakeyBackroundFile]~
					StatusMessage ~Add chroma key background file to all nodes that have a chroma key'd image.~
					LangSection	UIMessages
					LangItem	DropCommonChromakeyBackroundFile
		}

Hang:	DragMenuObj ~[UI Menus]~ ;

	Define:	CopyMenuObj	using	DDMenuDef
		Fields:	Title		$Title
				Position	(-1)
		Contains:	INLISTORDER
		{
if ( !Authorized( KEXDSS ) )
{
			Define: CopyFrom	using	DDMenuItemDef
				Fields: Text		~Copy Pixels~
						IDText		~ID~
						ActionsText	~[CopyFrom]~
						StatusMessage ~Copy pixels~
			Define: SameAs	using	DDMenuItemDef
				Fields:	Text		~Use same file as other node~
						IDText		~ID~
						ActionsText	~[Sameas]~
						StatusMessage ~Use same file as other node.~
			Define: SameFileAndCropAs	using	DDMenuItemDef
				Fields:	Text		~Use same file and crop as other node~
						IDText		~ID~
						ActionsText	~[SameAsCopyCrop]~
						StatusMessage ~Use same file and crop as other node.~
			Define: CopyCrop		using	DDMenuItemDef
				Fields:	Text		~Use the same crop as other node~
						IDText		~ID~
						ActionsText	~[CopyCrop]~
						StatusMessage ~Use the same crop as other node.~
			Define: SameTextAs	using	DDMenuItemDef
				Fields:	Text		~Use same text as other node~
						IDText		~ID~
						ActionsText	~[SameTextas]~
						StatusMessage ~Use same text as other node.~
			Define: SameNodePropertiesAs	using	DDMenuItemDef
				Fields:	Text		~Use same node properties as other node~
						IDText		~ID~
						ActionsText	~[SameNodePropertiesas]~
						StatusMessage ~Use same node properties as other node.~
}
			Define:	SwitchImages	using	DDMenuItemDef
				Fields:	Text		~Swap images~
						IDText		~ID~
						ActionsText  ~[SwitchImages]~
						StatusMessage ~Swap images.~
if ( !Authorized( KEXDSS ) )
{
			Define: SwitchText	using	DDMenuItemDef
				Fields: Text		~Swap Text~
						IDText		~ID~
						ActionsText	~[SwitchText]~
						StatusMessage ~Swap Images and Text~
			Define: SwitchImagesAndText	using	DDMenuItemDef
				Fields: Text		~Swap images and text~
						IDText		~ID~
						ActionsText	~[SwitchImagesAndText]~
						StatusMessage ~Switch Images and Text~
			Define:	ShuffleImages	using	DDMenuItemDef
				Fields:	Text		~Shuffle images~
						IDText		~ID~
						ActionsText  ~[ShuffleImages]~
						StatusMessage ~Shuffle Images.~
			Define: ShuffleText	using	DDMenuItemDef
				Fields: Text		~Shuffle Text~
						IDText		~ID~
						ActionsText	~[ShuffleText]~
						StatusMessage ~Shuffle text~
			Define: ShuffleImagesAndText	using	DDMenuItemDef
				Fields: Text		~Shuffle images and text~
						IDText		~ID~
						ActionsText	~[ShuffleImagesAndText]~
						StatusMessage ~Shuffle Images and Text~
}
		}

	Hang:	CopyMenuObj ~[UI Menus]~ ;
}

Define:	CropSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	CropSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
//					ActionsText ~[Dialog(CropSetupDialog CropToolParameters) ]~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce CropToolSetupDialog )

	}

MENU:	CropSetupMenu ~[UI Menus]~ ;

Define:	WhiteBalanceSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	WhiteBalanceSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce WhiteBalanceToolSetupDialog )

	}

MENU:	WhiteBalanceSetupMenu ~[UI Menus]~ ;

StringList: Name ~NoApplyCorrectionsChoices~ 
	Fields: String ~Apply corrections normally~
	Fields: String ~Don't apply corrections except negative & grayscale~
	Fields: String ~Only apply corrections on this Tab~
Hang:	NoApplyCorrectionsChoices	~[STRINGS]~;

StringList: Name ~SpotColorChoices~ 
	Fields: String ~None~
	Fields: String ~Spot Color~
	Fields: String ~Spot Texture~
Hang:	SpotColorChoices	~[STRINGS]~;

// The order of items in this list has been
// carefully set to prevent possible problems with
// selection.  See UComboBoxCtrl.cpp
StringList: Name ~LogoPositions1~ 
	Fields: String ~Upper Center~
	Fields: String ~Upper Left~
	Fields: String ~Upper Right~
	Fields: String ~Center~
	Fields: String ~Center Left~
	Fields: String ~Center Right~
	Fields: String ~Lower Center~
	Fields: String ~Lower Left~
	Fields: String ~Lower Right~

Hang:	LogoPositions1	~[STRINGS]~;

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle225 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~225~
	Hang: TextBevelLightAngle225  ~[UI TranslationTables]~

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle270 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Top~
	Fields: FieldValue				~270~
	Hang: TextBevelLightAngle270  ~[UI TranslationTables]~

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle315 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~315~
	Hang: TextBevelLightAngle315  ~[UI TranslationTables]~

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle0 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Right~
	Fields: FieldValue				~0~
	Hang: TextBevelLightAngle0  ~[UI TranslationTables]~

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle45 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~45~
	Hang: TextBevelLightAngle45  ~[UI TranslationTables]~

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle90 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Bottom~
	Fields: FieldValue				~90~
	Hang: TextBevelLightAngle90  ~[UI TranslationTables]~

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle135 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~135~
	Hang: TextBevelLightAngle135  ~[UI TranslationTables]~

// Define Translation Tables for TextBevelLightAngle keyword
Define: TextBevelLightAngle180 Using DDListBoxItemTranslations
	Fields: FieldName				~TextBevelLightAngle:~
	Fields: ListBoxItemText			~Left~
	Fields: FieldValue				~180~
	Hang: TextBevelLightAngle180  ~[UI TranslationTables]~


		  //////////////


// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle225 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~225~
	Hang: Logo1TextBevelLightAngle225  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle270 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Top~
	Fields: FieldValue				~270~
	Hang: Logo1TextBevelLightAngle270  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle315 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~315~
	Hang: Logo1TextBevelLightAngle315  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle0 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Right~
	Fields: FieldValue				~0~
	Hang: Logo1TextBevelLightAngle0  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle45 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~45~
	Hang: Logo1TextBevelLightAngle45  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle90 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Bottom~
	Fields: FieldValue				~90~
	Hang: Logo1TextBevelLightAngle90  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle135 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~135~
	Hang: Logo1TextBevelLightAngle135  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle1 keyword
Define: Logo1TextBevelLightAngle180 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle1:~
	Fields: ListBoxItemText			~Left~
	Fields: FieldValue				~180~
	Hang: Logo1TextBevelLightAngle180  ~[UI TranslationTables]~


		  //////////////


// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle225 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~225~
	Hang: Logo2TextBevelLightAngle225  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle270 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Top~
	Fields: FieldValue				~270~
	Hang: Logo2TextBevelLightAngle270  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle315 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~315~
	Hang: Logo2TextBevelLightAngle315  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle0 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Right~
	Fields: FieldValue				~0~
	Hang: Logo2TextBevelLightAngle0  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle45 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~45~
	Hang: Logo2TextBevelLightAngle45  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle90 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Bottom~
	Fields: FieldValue				~90~
	Hang: Logo2TextBevelLightAngle90  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle135 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~135~
	Hang: Logo2TextBevelLightAngle135  ~[UI TranslationTables]~

// Define Translation Tables for LogoTextBevelLightAngle2 keyword
Define: Logo2TextBevelLightAngle180 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoTextBevelLightAngle2:~
	Fields: ListBoxItemText			~Left~
	Fields: FieldValue				~180~
	Hang: Logo2TextBevelLightAngle180  ~[UI TranslationTables]~
////////
//////////
// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle225 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~225~
	Hang: ImageEmbossLightAngle225  ~[UI TranslationTables]~

// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle270 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Top~
	Fields: FieldValue				~270~
	Hang: ImageEmbossLightAngle270  ~[UI TranslationTables]~

// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle315 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~315~
	Hang: ImageEmbossLightAngle315  ~[UI TranslationTables]~

// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle0 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Right~
	Fields: FieldValue				~0~
	Hang: ImageEmbossLightAngle0  ~[UI TranslationTables]~

// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle45 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~45~
	Hang: ImageEmbossLightAngle45  ~[UI TranslationTables]~

// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle90 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Bottom~
	Fields: FieldValue				~90~
	Hang: ImageEmbossLightAngle90  ~[UI TranslationTables]~

// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle135 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~135~
	Hang: ImageEmbossLightAngle135  ~[UI TranslationTables]~

// Define Translation Tables for ImageEmbossLightAngle keyword
Define: ImageEmbossLightAngle180 Using DDListBoxItemTranslations
	Fields: FieldName				~ImageEmbossLightAngle:~
	Fields: ListBoxItemText			~Left~
	Fields: FieldValue				~180~
	Hang: ImageEmbossLightAngle180  ~[UI TranslationTables]~


////////////
//////////////
StringList: Name ~BevelAngles~ 
	Fields: String ~Right~
	Fields: String ~Lower Right~
	Fields: String ~Bottom~
	Fields: String ~Lower Left~
	Fields: String ~Left~
	Fields: String ~Upper Left~
	Fields: String ~Top~
	Fields: String ~Upper Right~
Hang:	BevelAngles	~[STRINGS]~;


StringList: Name ~QRCodeErrorCorrectionChoices~ 
	Fields: String ~L~
	Fields: String ~M~
	Fields: String ~Q~
	Fields: String ~H~
Hang:	QRCodeErrorCorrectionChoices	~[STRINGS]~;

StringList: Name ~QRCodeMarginChoices~ 
	Fields: String ~1~
	Fields: String ~2~
	Fields: String ~3~
	Fields: String ~4~
Hang:	QRCodeMarginChoices	~[STRINGS]~;


StringList: Name ~QRCodeTypeChoices~ 
	Fields: String ~Uri~
	Fields: String ~Text~
	Fields: String ~Email~
Hang:	QRCodeTypeChoices	~[STRINGS]~;



StringList: Name ~LogoPositions2~
	Fields: String ~Upper Center~
	Fields: String ~Upper Left~
	Fields: String ~Upper Right~
	Fields: String ~Center~
	Fields: String ~Center Left~
	Fields: String ~Center Right~
	Fields: String ~Lower Center~
	Fields: String ~Lower Left~
	Fields: String ~Lower Right~
Hang:	LogoPositions2	~[STRINGS]~ ;

// Define Translation Tables for LogoPosition keyword
Define: LogoTranslationUL1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~UL~
	Hang: LogoTranslationUL1  ~[UI TranslationTables]~

Define: LogoTranslationUC1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Upper Center~
	Fields: FieldValue				~UC~
	Hang: LogoTranslationUC1  ~[UI TranslationTables]~

Define: LogoTranslationUR1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~UR~
	Hang: LogoTranslationUR1  ~[UI TranslationTables]~

Define: LogoTranslationLL1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~LL~
	Hang: LogoTranslationLL1  ~[UI TranslationTables]~

Define: LogoTranslationLC1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Lower Center~
	Fields: FieldValue				~LC~
	Hang: LogoTranslationLC1  ~[UI TranslationTables]~

Define: LogoTranslationLR1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~LR~
	Hang: LogoTranslationLR1  ~[UI TranslationTables]~

Define: LogoTranslationCL1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Center Left~
	Fields: FieldValue				~CL~
	Hang: LogoTranslationCL1  ~[UI TranslationTables]~

Define: LogoTranslationCC1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~CC~
	Hang: LogoTranslationCC1  ~[UI TranslationTables]~

Define: LogoTranslationCR1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Center Right~
	Fields: FieldValue				~CR~
	Hang: LogoTranslationCR1  ~[UI TranslationTables]~

Define: LogoTranslationUL2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~UL~
	Hang: LogoTranslationUL2  ~[UI TranslationTables]~

Define: LogoTranslationUC2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Upper Center~
	Fields: FieldValue				~UC~
	Hang: LogoTranslationUC2  ~[UI TranslationTables]~

Define: LogoTranslationUR2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~UR~
	Hang: LogoTranslationUR2  ~[UI TranslationTables]~

Define: LogoTranslationLL2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~LL~
	Hang: LogoTranslationLL2  ~[UI TranslationTables]~

Define: LogoTranslationLC2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Lower Center~
	Fields: FieldValue				~LC~
	Hang: LogoTranslationLC2  ~[UI TranslationTables]~

Define: LogoTranslationLR2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~LR~
	Hang: LogoTranslationLR2  ~[UI TranslationTables]~

Define: LogoTranslationCL2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Center Left~
	Fields: FieldValue				~CL~
	Hang: LogoTranslationCL2  ~[UI TranslationTables]~

Define: LogoTranslationCC2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~CC~
	Hang: LogoTranslationCC2  ~[UI TranslationTables]~

Define: LogoTranslationCR2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Center Right~
	Fields: FieldValue				~CR~
	Hang: LogoTranslationCR2  ~[UI TranslationTables]~
	
StringList: Name ~JustificationChoices~
	Fields:	String	~Left~
	Fields:	String	~Center~
	Fields:	String	~Right~
Hang:	JustificationChoices	~[STRINGS]~ ;


StringList: Name ~StrokeUnitInchesChoices~
	Fields:	String	~Inches~
	Fields:	String	~Percent~
Hang:	StrokeUnitInchesChoices	~[STRINGS]~ ;

StringList: Name ~BevelUnitInchesChoices~
	Fields:	String	~Inches~
	Fields:	String	~Percent~
Hang:	BevelUnitInchesChoices	~[STRINGS]~ ;

StringList: Name ~StrokeUnitCentimetersChoices~
	Fields:	String	~Centimeters~
	Fields:	String	~Percent~
Hang:	StrokeUnitCentimetersChoices	~[STRINGS]~ ;

StringList: Name ~BevelUnitCentimetersChoices~
	Fields:	String	~Centimeters~
	Fields:	String	~Percent~
Hang:	BevelUnitCentimetersChoices	~[STRINGS]~ ;

StringList: Name ~StrokeUnitMillimetersChoices~
	Fields:	String	~Millimeters~
	Fields:	String	~Percent~
Hang:	StrokeUnitMillimetersChoices	~[STRINGS]~ ;

StringList: Name ~BevelUnitMillimetersChoices~
	Fields:	String	~Millimeters~
	Fields:	String	~Percent~
Hang:	BevelUnitMillimetersChoices	~[STRINGS]~ ;

StringList: Name ~TraceChoices~
	Fields:	String	~Trace Off~
	Fields:	String	~Trace And Delete on Success~
	Fields:	String	~Trace On~
Hang:	TraceChoices	~[STRINGS]~ ;

StringList: Name ~AlignmentChoices~
	Fields:	String	~Top~
	Fields:	String	~Center~
	Fields:	String	~Bottom~
Hang:	AlignmentChoices	~[STRINGS]~ ;

StringList: Name ~RotateTextChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~180~
	Fields:	String	~270~
Hang:	RotateTextChoices	~[STRINGS]~ ;


StringList: Name ~RotateFromDiskChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~180~
	Fields:	String	~270~
Hang:	RotateFromDiskChoices	~[STRINGS]~ ;

StringList: Name ~AutoRotateChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~270~
Hang:	AutoRotateChoices	~[STRINGS]~ ;

StringList: Name ~OverrideImageRotationChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~180~
	Fields:	String	~270~
Hang:	OverrideImageRotationChoices	~[STRINGS]~ ;

StringList: Name ~AutoRotateDuringAutoCropChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~270~
Hang:	AutoRotateDuringAutoCropChoices	~[STRINGS]~ ;


StringList: Name ~GroupChoices~
	Fields:	String	~None~
	Fields:	String	~Group1~
	Fields:	String	~Group2~
	Fields:	String	~Group3~
	Fields:	String	~Group4~
	Fields:	String	~Group5~
	Fields:	String	~Group6~
	Fields:	String	~Group7~
	Fields:	String	~Group8~
	Fields:	String	~Group9~
	Fields:	String	~Group10~
	Fields:	String	~Group11~
	Fields:	String	~Group12~
	Fields:	String	~Group13~
	Fields:	String	~Group14~
	Fields:	String	~Group15~
	Fields:	String	~Group16~
	Fields:	String	~Group17~
	Fields:	String	~Group18~
	Fields:	String	~Group19~
	Fields:	String	~Group20~
Hang:	GroupChoices	~[STRINGS]~ ;


StringList: Name ~FontMetricChoices~
	Fields:	String	~Type 1~
	Fields:	String	~Type 2~
	Fields:	String	~Type 3~

Hang:	FontMetricChoices	~[STRINGS]~ ;


StringList: Name ~SampleSizeChoices~
	Fields:	String	~Point~
	Fields:	String	~3 x 3 average~
	Fields:	String	~5 x 5 average~
Hang:	SampleSizeChoices	~[STRINGS]~ ;


StringList: Name ~TitleBarPositionChoices~
	Fields: String ~None~
	Fields: String ~Top Row~
	Fields: String ~Second Row~
	Fields: String ~Middle Row~
	Fields: String ~Second Row from Bottom~
	Fields: String ~Last Row~
Hang:	TitleBarPositionChoices	~[STRINGS]~

StringList: Name ~TitleBarWidthChoices~
	Fields: String ~0~
	Fields: String ~1~
	Fields: String ~2~
	Fields: String ~3~
	Fields: String ~4~
	Fields: String ~6~
	Fields: String ~7~
	Fields: String ~8~
	Fields: String ~9~
	Fields: String ~10~
	Fields: String ~11~
	Fields: String ~12~
	Fields: String ~13~
	Fields: String ~14~
	Fields: String ~15~
	Fields: String ~16~
	Fields: String ~17~
	Fields: String ~18~
	Fields: String ~19~
	Fields: String ~20~
	Fields: String ~Entire Width~
Hang:	TitleBarWidthChoices	~[STRINGS]~


Define: JobSetupNode Using DDFileType;
Hang: JobSetupNode ~[GenCons]~ ;

StringList: Name	~UnitsOfMeasure~
	Fields:	String	~Inches~
	Fields:	String	~Centimeters~
	Fields:	String	~Millimeters~
Hang:	UnitsOfMeasure	~[STRINGS]~ ;

StringList: Name	~ToolUnitsOfMeasure~
	Fields:	String	~Inches~
	Fields:	String	~Centimeters~
	Fields:	String	~Millimeters~
	Fields:	String	~Pixels~
Hang:	ToolUnitsOfMeasure	~[STRINGS]~ ;


Define: CropToolParameters Using DDCropParameters
	fields:	ZoomPercentage ~5~
	fields: UseSelectedNode 0
Hang: CropToolParameters ~[GenCons]~

Define: WhiteBalanceToolParameters Using DDWhiteBalanceParameters
	fields: WhiteBalanceOn 1
	fields: DoNewClickBalance 0
Hang: WhiteBalanceToolParameters ~[GenCons]~;


// Here is how we display toolbars and check its associated
//		menu item in the View Toolbars menu
// 1	CreateToolbar IAction when the view activates
// 2	ToggleToolbar Action for the View Toolbars Jobs menu item
// 3	CheckMenu IAction for the JobToolbar
// 4	UncheckMenu OAction for the JobToolbar

// DP2 Uses a Static Toolbar; that is it comes up at startup and stays there for the life of the app.
// DPVAC uses a more dynamic toolbar in that it only appears when an image is on the screen
// and goes away when an image is not there.  To facilitate this, the DP2.txt code defines a permanent
// symbol, WantStaticToolbars to be true.  If that symbol is defined and true, toolbars behave like
// static toolbars.  If that symbol is not there or defined to be false, toolbars behave dynamically
// which is the desired behavior for DPVAC
if ( DefinedAndNotNull( WantStaticToolbars ) )
{
	if (<WantStaticToolbars>)
	{
		HideMe = ~~;  // defaults to false (DP2 behavior)
	}
	else 
	{
		HideMe = ~T~; // (DPVAC behavior)
	}

}
else
{
	HideMe = ~T~; // (DPVAC behavior)
}

if ( !Authorized(DP1) )
{
Define: JobToolbar using DDToolbarDef
Fields:	ToolBarType Standard
		Position	50 100 0 0
		Text		~Tools~	
		AutoHidden  ~<HideMe>~		
		Rows		8			
		AllowDocking	~T~			
		IsInitiallyDocked ~T~
		Alignment	~Top~
		IActionsText	~[CheckMenu(ViewToolbarJobs)]~
		OActionsText	~[UnCheckMenu(ViewToolbarJobs)]~

		Contains: InListOrder
		{
			Define: JobToolbarSelect using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\sel_node.tif~
					ActionsText ~[ChooseTool(SelectTool)]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView ImageView~
					Tooltip ~Select a Node.  Click on the icon or press A~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F 
					IsChecked F
					StatusMessage ~Select a Node to edit node parameters~

			Define: JobToolbarCrop using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\move.tif~ 
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					ActionsText ~[ChooseTool(CropTool) InitCrop]~
					RClickUpActionsText ~[GetMenu(CropSetupMenu)]~
					Tooltip ~Crop an image inside a node.  Click on the icon or press C~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click on the image with Ctrl down to enlarge it, or click with Shift down to make it smaller, or click and drag to move it.~

			Define: JobToolbarZoom using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\zoom24.tif~
					ActionsText ~[ChooseTool(ZoomTool)]~ 
					HandlerText ~PIEView PIEEditView PIERetouchingView ImageView LayoutAndJobView  PIELayoutAndJobView~
					Tooltip ~Zoom.  Click on the icon or press Z~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click to zoom in.  Hold the shift key down and click to zoom out~

			Define: LayoutToolBarMagicWand using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Wand.tif~
					ActionsText ~[ChooseTool(WandTool)]~ 
					HandlerText ~LayoutAndJobView  PIELayoutAndJobView~
					Tooltip ~Magic Wand - select an area by color.    Click on the icon or press W~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					RClickUpActionsText ~[GetMenu(MagicWandToolSetupMenu)]~
					IsChecked F
					StatusMessage ~Click on the image to select by color.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
					
			Define: LayoutToolbarRectTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\drw_rect.tif~
					ActionsText ~[ChooseTool(RectTool)]~
					Tooltip ~Draw a Rectangle.    Click on the icon or press R~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					RClickUpActionsText ~[GetMenu(RectToolSetupMenu)]~
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click and drag to draw a rectangle.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~

			Define: LayoutToolBarDrawOval using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\drw_oval.tif~
					ActionsText ~[ChooseTool(OvalTool)]~ 
					Tooltip ~Draw an Oval.    Click on the icon or press O~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					RClickUpActionsText ~[GetMenu(OvalToolSetupMenu)]~
					IsChecked F 
					StatusMessage ~Click and drag to draw an oval.    Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts~

			Define: JobToolbarPolygon using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Polygon.tif~
					ActionsText ~[ChooseTool(PolygonTool)]~
					RClickUpActionsText ~[GetMenu(PolygonToolSetupMenu)]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Draw a polygon,    Click on the icon or press P~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Create a polygon~

			Define: JobToolbarResize using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Resize.tif~
					ActionsText ~[ChooseTool(ResizeTool)]~ 
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Resize or Move a Node.    Click on the icon or press S~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					RClickUpActionsText ~[GetMenu(ResizeToolSetupMenu)]~
					IsChecked F
					StatusMessage ~Click on a node near an edge and drag to resize the node.  Click on a node away from an edge and drag to move the node.~


			Define: LayoutToolbarMultipleMoveTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\MultipleMove.tif~
					ActionsText ~[ChooseTool(GridTool)]~
					Tooltip ~Move selected nodes.  Click on the icon or press U~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Move nodes~

			Define: LayoutToolbarTextOnPathTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\TextOnCurve.tif~
					ActionsText ~[ChooseTool(CurveTool) FindBezierPath]~
					Tooltip ~Text on a Curve.    Click on the icon or press F or J~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Text on a curve~


			Define: LayoutToolbarImageCropTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\crop24.tif~
					ActionsText ~[ChooseTool(ImageCropTool)]~
					Tooltip ~Crop an image~
					HandlerText ~PIEView ImageView~
					IDText	ID
					RClickUpActionsText ~[GetMenu(ImageCropToolSetupMenu)]~
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Hold the ctrl key down, click and drag to crop the image~

			Define: LayoutToolbarImageRedEyeTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Eye.tif~
					ActionsText ~[ChooseTool(ImageRedEyeTool)]~
					Tooltip ~Remove red eye from an image~
					HandlerText ~PIEView ImageView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click and drag to remove the red eye from an area of the image~

			Define: LayoutToolbarImageUndoRedEye using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\UndoRedEye.tif~
					ActionsText   ~[UndoRedEye]~
					Tooltip ~Undo the last red eye correction~
					HandlerText ~PIEView ImageView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~~

			Define: LayoutToolbarImageRedoRedEye using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\RedoRedEye.tif~
					ActionsText   ~[RedoRedEye]~
					Tooltip ~Redo the last red eye correction~
					HandlerText ~PIEView ImageView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~~

			Define: LayoutToolbarWhiteBalanceTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\white_balance.tif~  // needs to be checked in
					ActionsText ~[ChooseTool(WhiteBalanceTool)]~
					Tooltip ~Click Balance an Image~
					HandlerText ~PIEView ImageView~
					RClickUpActionsText ~[GetMenu(WhiteBalanceSetupMenu)]~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click to get pixel values for balancing the image~

			Define: JobToolbarSeparator1 using DDToolbarButtonDef
			Fields: IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					IsSeparator T
					SeparatorSizeInPixels 20

			Define: LayoutToolbarGridTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\grid.tif~
					Tooltip ~Open the Grid Tool Properties.  Click on the icon or press Y~
					ActionsText	ACTION DOC ( GridToolParam OpenOnce GridToolSetupDialog )
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Grid Tool~

			Define: JobToolbarEditImageNode using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\ed_image.tif~
					ActionsText ~[Dialog(ImageNodeValuesDialog SELECTEDNODE)]~
					Tooltip ~Open the Image Node Properties.  Click on this icon or press I~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Open a dialog box and edit imaging parameters~

			Define: JobToolbarEditTextNode using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\ed_text.tif~
					ActionsText ~[Dialog(TextNodeValuesDialog SELECTEDNODE)]~
					Tooltip ~Open the Text Node Properties.  Click on this icon or press T~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Open a dialog box and edit text parameters~

			Define: JobToolbarWarning using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\warning.tif~
					ActionsText ~[Dialog(WarningsDialog SELECTEDNODE)]~
					Tooltip ~Open the warnings to check for print errors.  Click on this icon or press E~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Show imaging warnings~

			Define: JobToolbarMajorKeywords using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\majorkeywords.tif~
					ActionsText ~[Dialog(MajorKeywordsDialog ProductInfo:)]~  // will insert a layoutpath node if not there
					Tooltip ~Product Info~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Show product type info~

			Define: JobToolbarLateResolve using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Macro.tif~
					ActionsText ~[Dialog(MacroAssistantDialog SELECTEDNODE)]~
					Tooltip ~Open the Macro Assistant Dialog.  Press on the icon or type H~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Open a dialog box and edit macros~

			Define: JobToolbarPreview using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\preview.tif~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					ActionsText ~[UpdateViewDialogs PreviewAll Invalidate]~
					Tooltip ~Render the entire job or layout to the screen (F5)~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Preview the entire job or layout to the screen~

			Define: JobToolbarSave using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\save24.tif~
					HandlerText ~dummy~
					Tooltip ~Save the current layout~
					IDText	57603  // FROM THE FILE SAVE MENU
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Save the current layout being worked on.~

			Define: JobToolbarSeparator2 using DDToolbarButtonDef
			Fields: IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					IsSeparator T
					SeparatorSizeInPixels 20

			Define: JobToolbarPrintLED using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\prnt_led.tif~
					ActionsText ~[
								Dialog(LEDPrinterDialog OutputToLED:)
								]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open LED Printer Dialog.  Click on the icon or press 1~
					IDText	ID
					IsEnabled T
					IsPressed F 
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Designate the LED Printer as the output device and open a dialog box to edit LED Printer parameters~

			Define: JobToolbarPrintCRT using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\prnt_crt.tif~
					ActionsText ~
							[
							Dialog(CRTPrinterDialog OutputToCRT:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open CRT Printer Dialog.  Click on the icon or press 2~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsChecked F
					IsIndeterminate F
					StatusMessage ~Designate the CRT Printer as the output device and open a dialog box to edit CRT Printer parameters~

			Define: JobToolbarRp30 using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\rp30.tif~
					ActionsText ~
							[
							Dialog(RP30Dialog SaveImage:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open RP30 Dialog.  Click on the icon or press 3~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					StatusMessage ~Designate a RP30 printer as the output device and open a dialog box to edit RP30 parameters~

			Define: JobToolbarPrintLaser using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\prnt_nt.tif~
					ActionsText ~
							[
							Dialog(LaserPrinterDialog OutputToLaserPrinter:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open Windows Printer Dialog.  Click on the icon or press 4~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					StatusMessage ~Designate a Windows Printer as the output device and open a dialog box to edit Windows Printer parameters~

			Define: JobToolbarSaveImage using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\save.tif~
					ActionsText ~
							[
							Dialog(SaveImageDialog SaveImage:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open Save Image Dialog.  Click on the icon or press 5~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					StatusMessage ~Designate a disk file as the output and open a dialog box to edit disk file parameters~

					Define: JobToolbarNexpress using DDToolbarButtonDef
					Fields: ToolBarBitmapFilename ~ToolbarButtons\print_nexpress.tif~
							ActionsText ~
									[
									Dialog(NexpressDialog OutputToNexpress:)
									]~
							HandlerText ~LayoutAndJobView PIELayoutAndJobView~
							Tooltip ~Open Output to NexPress Dialog.  Click on the icon or press 6~
							IDText	ID
							IsEnabled T
							IsPressed F
							IsHidden  F
							IsIndeterminate F
							StatusMessage ~Designate a NexPress as the output device and open a dialog box to edit NexPress device data~
			
		};
Hang:  JobToolbar ~[UI Toolbars]~;
}


Define: RectToolParameters Using DDRectToolParameters
	fields:	Style ~N~
			UnitOfMeasure ~Inches~
			Height 1
			Width 1
			Feathering 0
			 
Hang: RectToolParameters ~[GenCons]~


Define: ImageCropToolParameters Using DDImageCropToolParameters
	fields:	Style ~N~
//			UnitOfMeasure ~Inches~
			Height 1
			Width 1
			ImageCropZoomPercentage 5
			SampleSize 0 
			 
Hang: ImageCropToolParameters ~[GenCons]~

/*
Define: NEWLAYOUT Using DDNewLayout
	Fields:
		MultipleLayouts		0
		Positions			1
		Height				10
		HeightUnitOfMeasure	Inches
		Width				8
		WidthUnitOfMeasure	Inches
		UnitOfMeasure		Inches
		AutoSize			0
		PaperSize			~8x10 Portrait~
		KPSSProduct 0
		KPLSProduct	   0;
Hang: NEWLAYOUT ~[GenCons]~
*/


Define: MagicWandToolParameters Using DDMagicWandToolParameters
	fields:	Feathering	0
			Tolerance	15
Hang: MagicWandToolParameters ~[GenCons]~

Define: PolygonToolParameters Using DDPolygonToolParameters
	fields:	Feathering	0
Hang: PolygonToolParameters ~[GenCons]~

Define: OvalToolParameters Using DDOvalToolParameters
	fields:	Style ~N~
			UnitOfMeasure ~Inches~
			Height 1
			Width 1
			Feathering 3
Hang: OvalToolParameters ~[GenCons]~

Define: ResizeToolParameters Using DDResizeToolParameters
	fields:	Style ~N~
//			UnitOfMeasure ~Inches~
//			Height 1
//			Width 1
//			Feathering 3
Hang: ResizeToolParameters ~[GenCons]~

Define: GridToolParameters Using DDGridToolParameters
	fields:	DisplayGrid 0
			EnableGrid 0
			HorizontalOffset 1.0
			VerticalOffset 1.0
			Subdivisions 4
			GridColorAlpha 0 
			GridColorRed 0 
			GridColorGreen 0 
			GridColorBlue 0 
			LeftMargin 0
			TopMargin 0
			RightMargin 0
			BottomMargin 0
Hang: GridToolParameters ~[GenCons]~


Define: GridLayoutParameters Using DDGridLayout
	fields: ~LeftMargin:~ .25
			~TopMargin:~ .25
			~RightMargin:~, .25
			~BottomMargin:~, .25
			~Rows:~ 5
			~Columns:~ 5
			~TextTop:~ 10
			~TextLeft:~ (-10)
			~TextWidth:~ 120
			~TextHeight:~ 20
			~IsImageNode:~ 1
			~IsTextNode:~ 1
			AlignGridToNodes 0   // whether or not to update the grid tool when Creating New Nodes -> Apply button
			IsCountable 1
			~HorizGap:~ .25
			~VertGap:~ .25
			~HoldAspectRatio:~ 1
			~MaxWidth:~ 1
			~MaxHeight:~ 1
			~BackgroundWidth~  10.0
			~BackgroundHeight~ 8.0
			MaxCountableNodes 9999
			StartSize 10
			FinishSize 12
			PatternPath ~<$App.ShareDirectory>\Patterns\Kodak_Defaults~
			OutputSpec ~<$App.ShareDirectory>\OutputSpecifications\Disk\DIsk2TiffAt150dpi.txt~
			LayoutPath ~<$App.ShareDirectory>\Layouts\GridLayouts\Dummy~
			OpenOnCreate 1
			Units ~Inches~
Hang: GridLayoutParameters ~[GenCons]~


Define: MacroParameters Using DDMacroParameters
	fields:	
			LateResolveMacroCategory ~Character~
			LateResolveMacroName ~~
			LateResolveMacroText ~~
			LateResolveMacroDescription ~~
Hang: MacroParameters ~[GenCons]~


Define: CentimetersAbbreviation Using DDSymbol
	fields:
		Value	~cm.~
Hang: CentimetersAbbreviation ~[GenCons]~

Define: InchesAbbreviation Using DDSymbol
	fields:
		Value	~in.~
Hang: InchesAbbreviation ~[GenCons]~

Define: MillimetersAbbreviation Using DDSymbol
	fields:
		Value	~mm.~
Hang: MillimetersAbbreviation ~[GenCons]~


Define: CentimetersResAbbreviation Using DDSymbol
	fields:
		Value	~pixels per cm.~
Hang: CentimetersResAbbreviation ~[GenCons]~

Define: InchesResAbbreviation Using DDSymbol
	fields:
		Value	~pixels per in.~
Hang: InchesResAbbreviation ~[GenCons]~

Define: MillimetersResAbbreviation Using DDSymbol
	fields:
		Value	~pixels per mm.~
Hang: MillimetersResAbbreviation ~[GenCons]~


Define: LogoTextSizeTolerance Using DDSymbol
	fields:
		Value	~0.05~
Hang: LogoTextSizeTolerance ~[GenCons]~

Define: TestLogos Using DDSymbol
	fields:
		Value	~0~
Hang: TestLogos ~[GenCons]~


//Define: CacheDuplicateTransforms Using DDSymbol
//	fields:
//		Value	~0~
//Hang: CacheDuplicateTransforms ~[GenCons]~

// Turn on/off caching of ICC profiles
Define: CacheCombinedTransforms Using DDSymbol
	fields:
		Value	~1~							// cache combined transforms if CachePreviewing or CachePrinting is 1
Hang: CacheCombinedTransforms ~[GenCons]~

// Cache ICC profiles for layouts and jobs, not across threads
// To cache layouts and jobs set Value to 1 and also Value in CacheCombinedTransforms to 1
Define: CachePreviewing Using DDSymbol
	fields:
		Value	~1~
Hang: CachePreviewing ~[GenCons]~

// Cache ICC profiles when printing and viewing order images
Define: CachePrinting Using DDSymbol
	fields:
		Value	~0~
Hang: CachePrinting ~[GenCons]~

// Define the maximum nodes the Grid layout generator can do
// you must also change the pattern generator
// in PatternEditorDoc3, change the value of TotalAllowed to be the maximum number of nodes allowed;

Define: MaxGridNodes Using DDSymbol
	fields:
		Value ~1500~
Hang: MaxGridNodes ~[GenCons]~

Define: PDCRetouching Using DDSymbol
	fields:
		Value ~0~   // <<--  Change this from 0 to 1 to enable the retouching view
Hang: PDCRetouching ~[GenCons]~

// NodeMenuObj2 is for the menu in DP1
Define:	NodeMenuObj2	using	DDMenuDef
		Fields:	Title		$Title
				Position	(-1)
	Contains:	INLISTORDER
	{

		Define:	CreateSimilarNode	using	DDMenuItemDef
			Fields:	Text		~Copy Selected Nodes (F4)~
					IDText		~ID~
					LangSection	UIMessages
					LangItem	CreateSimilarNodes
					ActionsText  ~[CreateSimilarNodes]~
					StatusMessage ~Copy selected nodes(s) to another place in the layout~
		Define:	NewImageNodeFromSelection	using	DDMenuItemDef
			Fields:	Text		~Create &Image Node From Selection~
					IDText		~ID~
					ActionsText  ~[NewNodeFromSelection]~
					LangSection	UIMessages
					LangItem	NewImageNodeFromSelection
					StatusMessage ~Create an image node~
		Define:	NewTextNodeFromSelection	using	DDMenuItemDef
			Fields:	Text		~Create T&ext Node~
					IDText		~ID~
					ActionsText  ~[NewTextNodeFromSelection]~
					LangSection	UIMessages
					LangItem	NewTextNodeFromSelection
					StatusMessage ~Create a text node~

		Define:	NewTextNodeFromPath	using	DDMenuItemDef
			Fields:	Text		~Create Text Node From Curve~
					IDText		~ID~
					ActionsText  ~[NewTextNodeFromPath]~
					StatusMessage ~Create a text node~
					LangSection	UIMessages
					LangItem	CreateTextNodeFromCurve
					
		Define:	NextCurve	using	DDMenuItemDef
			Fields:	Text		~Display the next curve (Tab)~
					IDText		~ID~
					ActionsText  ~[NextCurve]~
					LangSection	UIMessages
					LangItem	NextCurve

		Define:	PreviousCurve	using	DDMenuItemDef
			Fields:	Text		~Display the previous curve (Shift-Tab)~
					IDText		~ID~
					ActionsText  ~[PreviousCurve]~
					LangSection	UIMessages
					LangItem	PreviousCurve
					
		Define:	RemoveLastCurveSegment	using	DDMenuItemDef
			Fields:	Text		~Remove the last curve segment (D or L)~
					IDText		~ID~
					ActionsText  ~[RemoveLastCurveSegment]~
					LangSection	UIMessages
					LangItem	RemoveLastCurveSegment

		Define:	RemoveCurve	using	DDMenuItemDef
			Fields:	Text		~Delete the curve (X or M)~
					IDText		~ID~
					ActionsText	~[ClearBezierPath Invalidate]~
					LangSection	UIMessages
					LangItem	RemoveCurve

		Define:	DeleteNode	using	DDMenuItemDef
			Fields:	Text		~&Delete~
					IDText		~ID~
					LangSection	UIMessages
					LangItem	DeleteNode
					ActionsText  ~[DeleteNode]~

		Define:	JobNullLineTwoA using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobSelectionTools	using	DDMenuItemDef
			Fields:	Text		~Selection Tools~
					LangSection	UIMessages
					LangItem	SelectionTools
					IDText		~ID~
			Contains: INLISTORDER
			{
				Define:	SelectAll	using	DDMenuItemDef
					Fields:	Text		~Select Entire Background~
							IDText		~ID~
							ActionsText  ~[SelectAll]~
							LangSection	UIMessages
							LangItem	SelectAll
							StatusMessage ~Select entire background~

				Define:	SelectNone	using	DDMenuItemDef
					Fields:	Text		~Erase Current Selection~
							IDText		~ID~
							ActionsText  ~[SelectNone]~
							LangSection	UIMessages
							LangItem	SelectNone
							StatusMessage ~Save a mask for debugging purposes~

			}

		Define:	JobNullLineFour using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	JobSelectAllNodes using DDMenuItemDef
			Fields:	Text			~Select All Nodes (Ctrl-A)~
					IDText			~ID~
					IsChecked	F
					ActionsText  ~[SelectAllNodes]~
					LangSection	UIMessages
					LangItem	SelectAllNodes


		Define:	JobNullLineFive using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	EditTNode	using	DDMenuItemDef
			Fields:	Text		~Edit Text in Selected Node~
					IDText		~ID~
					ActionsText ~[EditTextNode]~
					LangSection	UIMessages
					LangItem	EditTNode
					StatusMessage ~Edit the text for the selected node~
		Define:	JobNullLineSix using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobViewAsText	using	DDMenuItemDef
			Fields:	Text		~View As Text~
					IDText		~ID~
					ActionsText  ~[ViewAsText]~
					StatusMessage ~View as Text~
					LangSection	UIMessages
					LangItem	ViewAsText
		if ( GetUserPermissions( Admin ) )
		{

			Define:	TraceImagingChain	using	DDMenuItemDef
				Fields:	Text		~Trace Imaging Chain~
						IDText		~ID~
						ActionsText  ~[TraceImagingChain]~
						StatusMessage ~Trace Imaging Chain to a file~
						LangSection	UIMessages
						LangItem	TraceImagingChain


		}
	}
Hang:	NodeMenuObj2 ~[UI Menus]~ ;

Define:	DragMenuObj2	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define: DropMask		using	DDMenuItemDef
			Fields:	Text		~Drop Mask in Node~
					IDText		~ID~
					ActionsText	~[DropMask]~
					StatusMessage ~Add mask to node.~
					LangSection	UIMessages
					LangItem	DropMask
if (Authorized(DP2))
{
		Define: DropBGColorMask		using	DDMenuItemDef
			Fields:	Text		~Drop Background Color Mask in Node~
					IDText		~ID~
					ActionsText	~[DropBGColorMask]~
					StatusMessage ~Add background color mask to node.~
					LangSection	UIMessages
					LangItem	DropBGColorMask
		Define: DropTextBGColorMask	using	DDMenuItemDef
			Fields:	Text		~Drop Text Background Color Mask in Node~
					IDText		~ID~
					ActionsText	~[DropTextBGColorMask]~
					StatusMessage ~Add text background color mask to node.~
					LangSection	UIMessages
					LangItem	DropTextBGColorMask
}
		Define: JobNullLineThreeA	using	DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: DropFrame		using	DDMenuItemDef
			Fields:	Text		~Drop Frame in Node~
					IDText		~ID~
					ActionsText	~[DropFrame]~
					StatusMessage ~Add frame to node.~
					LangSection	UIMessages
					LangItem	DropFrame
		Define: DropFrameMask	using	DDMenuItemDef
			Fields:	Text		~Drop Frame Mask in Node~
					IDText		~ID~
					ActionsText	~[DropFrameMask]~
					StatusMessage ~Add frame mask to node.~
					LangSection	UIMessages
					LangItem	DropFrameMask
	}

Hang:	DragMenuObj2 ~[UI Menus]~ ;
	
Define:	CopyMenuObj2	using	DDMenuDef
		Fields:	Title		$Title
				Position	(-1)
	Contains:	INLISTORDER
	{
		Define: CopyFrom	using	DDMenuItemDef
			Fields: Text		~Copy Pixels~
					IDText		~ID~
					ActionsText	~[CopyFrom]~
					StatusMessage ~Copy Pixels~
					LangSection	UIMessages
					LangItem	MCopyFrom
		Define: SameAs	using	DDMenuItemDef
			Fields:	Text		~Use Same File As Other Node~
					IDText		~ID~
					ActionsText	~[Sameas]~
					StatusMessage ~Use same file as other node~
					LangSection	UIMessages
					LangItem	MSameAs
		Define: SameTextAs	using	DDMenuItemDef
			Fields:	Text		~Use Same Text As Other Node~
					IDText		~ID~
					ActionsText	~[SameTextas]~
					StatusMessage ~Use same text as other node.~
					LangSection	UIMessages
					LangItem	MSameTextAs
		Define: SameFileAndCropAs	using	DDMenuItemDef
			Fields:	Text		~Use Same File And Crop As Other Node~
					IDText		~ID~
					ActionsText	~[SameAsCopyCrop]~
					StatusMessage ~Use same file and crop as other node.~
					LangSection	UIMessages
					LangItem	MSameFileAndCropAs
		Define:	SwitchImages	using	DDMenuItemDef
			Fields:	Text		~Swap Images~
					IDText		~ID~
					ActionsText  ~[SwitchImages]~
					StatusMessage ~Swap Images~
					LangSection	UIMessages
					LangItem	MSwitchImages
		Define: SwitchText	using	DDMenuItemDef
			Fields: Text		~Swap Text~
					IDText		~ID~
					ActionsText	~[SwitchText]~
					StatusMessage ~Switch and Text~
					LangSection	UIMessages
					LangItem	MSwitchText
		Define: SwitchImagesAndText	using	DDMenuItemDef
			Fields: Text		~Swap Images and Text~
					IDText		~ID~
					ActionsText	~[SwitchImagesAndText]~
					StatusMessage ~Swap Images and Text~
					LangSection	UIMessages
					LangItem	SwitchImagesAndText
		Define:	ShuffleImages	using	DDMenuItemDef
			Fields:	Text		~Shuffle Images~
					IDText		~ID~
					ActionsText  ~[ShuffleImages]~
					StatusMessage ~Shuffle Images~
					LangSection	UIMessages
					LangItem	MShuffleImages
		Define: ShuffleText	using	DDMenuItemDef
			Fields: Text		~Shuffle Text~
					IDText		~ID~
					ActionsText	~[ShuffleText]~
					StatusMessage ~Shuffle Text~
					LangSection	UIMessages
					LangItem	MShuffleText
		Define: ShuffleImagesAndText	using	DDMenuItemDef
			Fields: Text		~Shuffle Images and Text~
					IDText		~ID~
					ActionsText	~[ShuffleImagesAndText]~
					StatusMessage ~Shuffle Images and Text~
					LangSection	UIMessages
					LangItem	MShuffleImagesAndText
	}
Hang:	CopyMenuObj2 ~[UI Menus]~ ;

