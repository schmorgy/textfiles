ScannerDocHR500 = TRUE;

Include: ~ScannerHR500CommonDoc.txt~;

VOID SetupSizzleControl()
{
	Define:	SizzleControl Using DDHR500ControlDict
		Fields:	xPos				 50.
				yPos				 50.
				ScanWidth			 100.
				ScanLength			 100.
				OpticalZoom			 0
				ScanSize			 0
				NextInfoAdjusted	 0
				NextPunch			 (-9)
				NextXOffset			 0
				NextXPos			 0.
				NextYPos			 0.
				NextScanWidth		 0.
				NextScanLength		 0.
				ScanAreaInPercent	 1
				ScannerSharpenAmount 0
				SharpenDelta		 0
				Rotation			 0
				Focus				 0
				FocusRange			 300
				AutoBalance			 0
				ColorCorrection		 0
				DynamicRange		 0
				Size				 1000
				redOverride			 0
				greenOverride		 0
				blueOverride		 0
				contrastOverride	 0
				brightnessOverride	 0
				DRGBRef				 ~~
				DeleteScanObj		 0
				ScanObj				 0
				ScanObjIndex		 0
				SaveObjIndex		 0
				ImageBuffer			 0
				ImageBufferWidth	 0
				ImageBufferHeight	 0
				ImageBufferDepth	 0
				ImageBufferLayout	 ~~
				DisplayLastImage	 1
				FirstValidPixel		 0
				LastValidPixel		 0
				LockScannerOffsets	 0
				DensityNormalization 0
				UseAnalyzerDRGBValues 1
				DirtyFlag			 0
				AutoSaveToDisk		 1
				ICCProfile			~~
				ICCOutputProfile	~rgbMaster~
				EmbedProfile		 0
				MaxThumbNailSize	 500
				Path				 ~~ 
				FetchTimeout		(1000 * 60)
				FetchCompleteNotification	~ImageFetchComplete();~
				FetchErrorNotification		~FetchErrorNotification();~
				FlushCompleteNotification	~ImageFlushComplete(%ld);~
				FlushErrorNotification		~FlushErrorNotification(%ld);~
				FocusProgressNotification	~FocusProgress(%ld);~
				FocusCompleteNotification	~FocusComplete();~
				FocusErrorNotification		~FocusErrorNotification();~
				FocusWarningNotification	~FocusWarningNotification();~
				FocusCancelNotification		~FocusCancelNotification();~
				PreScanNotification			~~
				ScanCompleteNotification	~~
				ScanErrorNotification		~ScanErrorNotification(%ld);~
				RenderOverScanError			~RenderOverScanError(%ld);~
				RenderOverScanComplete		~RenderOverScanComplete(%ld);~
				FrameDetectErrorNotification ~~
				SpliceDetectedNotification	 ~~
				LoadCompleteNotification	~LoadFilmComplete();~
				UnloadCompleteNotification	~UnloadFilmComplete(%ld,%ld);~
				AutoSkipFDABlankFrame		0
				OverScan					0
				OverScanYPos				50.
				OverScanXPos				50.
				OverScanWidth				100.
				OverScanHeight				100.
				WaitingForOverScan			0
				WaitingForDisplay			0
				AdjustingNextFrame			0
				FDAErrorOnPrevious			0
				FDAErrorOnCurrent			0
				AutoFDAErrorHandlingEnabled	0
				SavedAutoScanState			0
				FileResolution				250
				AdaptiveSharpen				0
				SharpenAmount				0.0
				SharpenFaster				1
				SharpenLimit				150
				SharpenThreshold			90
				SharpenBlurAmount			0
				NoiseReductionAmount		0.0
				ExposureTime				0.
				FrameDetectStartTime		0
				FrameDetectCompleteTime		0
				EdgeCollectStartTime		0
				EdgeCollectCompleteTime		0
				FrameStatus					0
				UseImageOverrides			0
				UseDigitalIce				0
				DigitalIceType				<kDICELevelLow>
				UseSBAPlus					0
				SBALevel					0
				CMM							100
				PreferenceClass				0
				PCWF						700
				IgnoreSFS					0
				SFSFile						~~

				OverscanFilmType			0
				EdgeSensitivity				40
				MinGap						0
				FilmEdge					FALSE
				FilmPosition				0.0
				FilmStatus					0
				SkippingBlankFilm			FALSE
				IgnoreFdaErrors				FALSE
				DisableFrameDetect			FALSE
				LastMoveDirection			0
				ImageSizeInMM				0
				NewStrip					0
				FuzzyPositioningFactor		0
				AlignmentFlag				0
				FilmType					~~
				RescanningFrame				FALSE

				AvgDenNKey					0
				AvgDenRGBKey				0
				HueSatKey					0
				SBAFleshKey					0
				TotalMatching				0

				FilmDriveType				0
				DumpRawIRData				0
				ColorType					0
	;

	Global( SizzleControl );
}


// TBD Order_aDen = 0;
// TBD Order_aRed = 0;
// TBD Order_aGrn = 0;
// TBD Order_aBlu = 0;

Roll_aDen = 0;
Roll_aRed = 0;
Roll_aGrn = 0;
Roll_aBlu = 0;
Roll_cDen = 0;
Roll_cRed = 0;
Roll_cGrn = 0;
Roll_cBlu = 0;

ScannerDocHR500 = TRUE;
UseDbCrop = TRUE;
CropDbOrder = ~~;

NUMERIC LoadScannerRoutines()
{
	dlg( GetInput );

	SimulateTheScanner = DlgData( GetNumeric,Simulating );

	WaitCursor( Begin );

	dlg( SetStatus,0,~Connecting to and initializing scanner~ );

	if ( Defined( Scanner ) )
	{
		Scanner( CleanupLastScan, SizzleControl );
	}
	ForgetGlobal( Scanner );

	if (  !HR500( Scanner,Simulating,<SimulateTheScanner> ) )
	{
		dlg( SetStatus,0,~Error starting the scanning software.~ );
		return Warning( Translate( ~Error starting the scanning software.~ ) );
	}

	if ( !Scanner( Initialize ) )
	{
		dlg( SetStatus,0,~Unable to connect to the scanner~ );
		ErrMsg = Translate( ~Unable to connect to and initialize the scanner.~ );
		return HandleHR500Error( ~<ErrMsg>~ );
	}

	Global( Scanner );

	if ( !Scanner( Version,FirmwareVersion ) )
	{
		ErrMsg = Translate( ~Error getting firmware version information.~ );
		return HandleHR500Error( ~<ErrMsg>~ );
	}

	Log( Session,~HR500 Firmware Version <FirmwareVersion>~ );

	if ( !Scanner( GetSerialNumber,ScannerSerialNumber ) )
	{
		Warning( Translate( ~Could not get serial number of scanner.~ ) );
	}

	Log( Session,~HR500 Serial Number <ScannerSerialNumber>~ );

	UpdateLampOnTime( TRUE,TRUE );

	UpdateLampState( );

	FWNum = Numeric( ~<FirmwareVersion>~ );
	CFWNum = Numeric( ~<CurrentHR500FirmwareVersion>~ );
	if ( !<SimulateTheScanner> && ( <FWNum> < <CFWNum> ) )
	{
		fwFile= String( Replace, ~<CurrentHR500FirmwareVersion>~, ~.~, ~_~ );
		Warning( ~The firmware version reported by the scanner (<FirmwareVersion>) does\nnot match the firmware version expected by this version of\nDP2 (<CurrentHR500FirmwareVersion>).\n\nNOTE:  While this doesn't prevent you from continuing to use\nthe scanner, you should load the latest version of the firmware\nonto the scanner to avoid unexpected results while using the\nscanner.\n\nThe latest firmware is located in <$App.Directory>\HR500\Px<fwFile>.zip.~ );
	}
	
	if ( Scanner( DigitalIceCapable ) )
	{
		dlg( ShowControls,TRUE,DigitalIceCheckbox );
		dlg( EnableControls,TRUE,DigitalIceType,DigitalIceTypeHigh );
		DigitalIceAvailable = TRUE;
		if ( !CheckFilmTypeForDigitalICE( TRUE ) )
		{
			dlg( EnableControls,FALSE,DigitalIceCheckbox );
		}
	}
	else
	{
		dlg( SetCheck,FALSE,DigitalIceCheckbox );
		dlg( Save,DigitalIceCheckbox );
		dlg( ShowControls,FALSE,DigitalIceCheckbox );
		dlg( EnableControls,FALSE,DigitalIceCheckbox,DigitalIceType,DigitalIceTypeHigh );
		DigitalIceAvailable = FALSE;
	}

	if ( !Scanner( Is4x5Capable ) )
	{
		UniversalScanner = FALSE;
		GetFilmDriveVendor();
		if ( ~<FDVendor>~ == ~None~ )
		{
			HR500_NoFilmDriveSelected();
		}
	}
	else
	{
		UniversalScanner = TRUE;

		filmFormat = ~<$con.DlgData[Format]>~;
		if ( !Scanner( SetFilmSize,~<filmFormat>~ ) )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
			{ SetTransportControlsStopped(); }
			ErrMsg = Translate( ~Incompatible film format.~ );
			HandleHR500Error( ~<ErrMsg>~ );
			return FALSE;
		}
	}

	if ( Scanner( EnableFilmtermDataCollection ) )
	{
		Log( Session, Translate( ~Filmterm data collection has been enabled.~ ) );
	}

	WaitCursor( End );

	FilmType = ~<$con.DlgData[FilmType]>~;
	LastFilmType = ~<FilmType>~;

	DlgData( Get,SFSFile,SFSFile );

	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;

	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}

	if ( !Scanner( LoadFilmTermsFromFile,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ ) )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		return FALSE;
	}

	CheckStoredCalibration( TRUE,FALSE,FALSE );

	SetTimeCallsFlag();

	SetTraceCallsFlag();

	return TRUE; 
}


NUMERIC OnFormatChange(reason, statusText, UpdateCrop, UpdateYCorrection, DoCalibration)
{
	// Reason values:
	// 1 = Settings loaded
	// 2 = Film type changed (positive/negative)
	// 3 = Film format changed (35mm, etc)
	// 4 = Scan sized changed
	// 5 = Optical zoom changed
	// 6 = Crop loaded

	dlg( SetStatus,0,~<statusText>~ );

	loadingSettings = FALSE;
	if ( <reason> == 1 ) 
	{
		loadingSettings = TRUE;
	}

	filmTypeChanged = FALSE;
	if ( <reason> == 2 ) 
	{
		filmTypeChanged = TRUE;
	}

	filmFormatChanged = FALSE;
	if ( <reason> == 3 )
	{
		filmFormatChanged = TRUE;
	}

	if ( <filmFormatChanged> || <loadingSettings> )
	{
		IgnorePredefinedFrameWidths = DlgData( GetNumeric, IgnorePredefinedFrameWidths );
	}

	CheckOverScanAdjustment( 0 );

	scanSizeChanged = FALSE;
	if ( <reason> == 4 ) 
	{
		scanSizeChanged = TRUE;
	}

	opticalZoomChanged = FALSE;
	if ( <reason> == 5 ) 
	{
		opticalZoomChanged = TRUE;
	}
	lowVal = dlgData(GetAttrInfo, OpticalZoom, LowValue);
	highVal = dlgData(GetAttrInfo, OpticalZoom, HighValue);

	if ( !CheckZoom() )
	{
		return FALSE;
	}

	OpticalZoom = ~<$Con.DlgData[OpticalZoom]>~;
	if ( <OpticalZoom> == <LastOpticalZoomSetting> )
	{	
		opticalZoomChanged = FALSE;
	}

//	Add scan area settings for Halse Drive
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	GetFilmDriveVendor();

	Filmformat = ~<$Con.DlgData[Format]>~;
	if ( <loadingSettings> || (~<Filmformat>~ != ~<gCurrentFilmFormat>~) )
	{
		if ( <FilmDriveEnabled> && FunctionDefined( ~<FDVendor>_RefreshScanAreaSettings~ ) )
		{
			<FDVendor>_RefreshScanAreaSettings( <reason>,<loadingSettings>,~ScanSetups~ );
		}
	}

	if ( <UpdateCrop> && <reason> != 6 )
	{
		RefreshCropsComboBox(TRUE);
	}

	if ( <UpdateYCorrection> )
	{
		UpdateEditorXYOffsetSetting();
	}

	gCurrentFilmFormat = ~<$con.DlgData[Format]>~;
	if ( Defined(Scanner) && <UniversalScanner> && 
	    ( <filmFormatChanged> || <loadingSettings> ) ) 
	{
		if ( !Scanner( IsScannerBusy ) )
		{
			if ( !Scanner( SetFilmSize,~<FilmFormat>~ ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> )
				{ SetTransportControlsStopped(); }
				ErrMsg = Translate( ~Incompatible film format.~ );
				HandleHR500Error( ~<ErrMsg>~ );
				return FALSE;
			}
		}
	}

	if ( !<filmTypeChanged> && !<loadingSettings> )
	{
		filmTypeChanged = FilmTypeChange();
	}

	CurrentScanSizePos = ~<$Con.DlgData[SpeedQuality]>~;
	NeedToCalibrate = FALSE;
	if ( Defined(Scanner) ) // && !<loadingSettings> )
	{
		SetMagnification( False );
		if ( Scanner(MagChanged) )
		{
			MagNeeded = TRUE;
		}
		else
		{
			MagNeeded = FALSE;
		}
	}
	showMessage = TRUE;

//	if ( <scanSizeChanged> || <opticalZoomChanged> || <filmFormatChanged> )
	if ( !<loadingSettings> ) 
	{
		if ( ( <LastScanSizePos> != <CurrentScanSizePos> ) || 
			 ( <OpticalZoom> != <LastOpticalZoomSetting> ) || 
			   <filmFormatChanged> || <MagNeeded>		 )
		{
			if (!UpdateScanSize(FALSE,TRUE,TRUE))
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;
			}
			if ( Defined(Scanner) )
			{
				if (  !Scanner( IsScannerBusy ) )
				{
					if ( !CheckStoredCalibration( TRUE,<DoCalibration>,IsDriveTensioned( FALSE ) ) )
					{
						NeedToCalibrate = TRUE;
					}
					showMessage = FALSE;
				}
			}
			LastScanSizePos = <CurrentScanSizePos>;
			LastOpticalZoomSetting = <OpticalZoom>;
		}
	}
	if ( <filmTypeChanged> )
	{
		if (!UpdateScanSize(FALSE,FALSE,TRUE))
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE;
		}
		if ( Defined(Scanner) )
		{
			if ( !Scanner( IsScannerBusy ) )
			{
				if ( CheckStoredCalibration( TRUE,<showMessage>,IsDriveTensioned( FALSE ) ) ) //film drive enabled?
				{
					if ( !<MagNeeded> )
					{
						if ( !LoadStoredCalibration( TRUE,FALSE,IsDriveTensioned( FALSE ) ) )
						{
							NeedToCalibrate = TRUE;
						}
					}
				}
				else
				{
					NeedToCalibrate = TRUE;
				}
			}
		}

		DlgData( Get,FilmType,FilmType );
		DlgData( Get,SFSFile,SFSFile );
		if ( ~<SFSFile>~ == ~~ )
		{
			SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
		}
		FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
		result = Scanner( IsColorFilterPositionCorrect,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ );
		if ( <result> == -1 )
		{
			ErrMsg = Translate( ~Could not check color filter position for <FilmTermsFile>.~ );
			HandleHR500Error( ~<ErrMsg>~ );
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE;
		}
		if ( <result> == FALSE )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return Warning( Translate( ~The color filter is not in the correct position for this film type.\nMake sure the filter is in the correct position and then\nselect OK to continue.~ ) );
		}
	}

	if ( Defined( Scanner ) && <NeedToCalibrate> && !<loadingSettings> && <DoCalibration> )
	{
		if ( !Scanner( IsScannerBusy ) )
		{
			if ( !OnHR500CalibrateButton( FALSE,FALSE,TRUE ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				ClearCalibrationHandlers();
				dlg( SetStatus,0,Translate( ~Calibration did not complete.~ ) );
				return FALSE;
			}
		}
	}

	return TRUE;
}



NUMERIC CalibrationOK( DisplayStatus,DisplayMessage,IgnoreCalibrationTimeOut,UpdateLastMag )
{
	FilmType = ~<$con.DlgData[FilmType]>~;
	Result = 0.0;
	retval = FALSE;

	dlg( GetInput );
	DlgData( GetValues,CalibrationTimeout,calTimeout,IgnoreCalTimeout,ignoreTimeout );
	if ( <ignoreTimeout> || <IgnoreCalibrationTimeOut> == 1 )
	{	calTimeout = -1;	}
	
	userCalTimeout = DlgData( GetNumeric,CalibrationTimeout );
	calStatus = 0;

	FilmType = ~<$con.DlgData[FilmType]>~;
	LastFilmType = ~<FilmType>~;

	DlgData( Get,SFSFile,SFSFile );

	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;

	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}

	if ( !Scanner( LoadFilmTermsFromFile,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ ) )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		return FALSE;
	}

	if ( !Scanner( NeedCalibration,<calTimeout>,calStatus,<UpdateLastMag> ) )
	{	
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~You will have to calibrate the scanner.~ ) );
		}
		return FALSE;
	}

	if ( <calStatus> == 1 ) // not needed
	{
		retval = TRUE;
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~Calibration is not needed.~ ) );
		}
	}
	else if ( <calStatus> == 2 || (<calStatus> == 3 && <userCalTimeout> == 0) ) // cal needed
	{
		retval = FALSE;
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~You will have to calibrate the scanner.~ ) );
		}
	}
	else if ( <calStatus> == 3 ) // cal restored
	{
		retval = TRUE;
		if ( <DisplayStatus> || <DisplayMessage> )
		{	
			dlg( SetStatus,0,Translate( ~Stored calibration values have been loaded.~ ) );
		}
	}
	else if ( <calStatus> == 4 || <calStatus> == 5 ) // cal expired
	{
		retval = TRUE;
		if ( <DisplayMessage> || <DisplayStatus> )
			{	dlg( SetStatus,0,Translate( ~Stored calibration values have expired.~ ) );	}

		if ( !<IgnoreCalibrationTimeOut> )
		{
			retval = FALSE;
			//if ( <DisplayMessage> )
			//{
				if ( MessageBox( Translate( ~The stored calibration has expired. Do you want to use the expired calibration data?~ ),YESNO ) == YES )
				{ 
					dlg( SetStatus,0,Translate( ~Expired calibration values are in use.~ ) );
					retval = TRUE;
				}
			//}
		}
	}
	else if ( <calStatus> == 6 || <calStatus> == 7 ) // mismatched filter position
	{
		retval = FALSE;
		if ( <calStatus> == 7 ) // incorrect color filter position
		{
			if ( <DisplayStatus> )
			{
				dlg( SetStatus,0,Translate(~Incorrect color filter position.~ ) );
			}
			if ( <DisplayMessage> )
			{
				Msg = ~The color filter is not in the correct position for this film type.\nMake sure the filter is in the correct position and then\ntry the operation again.~; 
				Warning( Translate( ~<Msg>~ ) );
			}
		}
		if ( CheckStoredCalibration( <DisplayStatus>,FALSE,<IgnoreCalibrationTimeOut> ) )
		{
			if ( LoadStoredCalibration( <DisplayStatus>,FALSE,<IgnoreCalibrationTimeOut> ) )
			{
				if ( <calStatus> == 6 )
				{
					retval = TRUE;
				}
				if ( <DisplayStatus> || <DisplayMessage> )
				{	
					dlg( SetStatus,0,Translate( ~Stored calibration values have been loaded.~ ) );
				}
			}
			else if ( <DisplayMessage> )
			{
				Warning( Translate( ~The stored calibration failed to load or used different FilmTerm DMIN settings.\nPlease calibrate the scanner.~ ) );
			}
		}
	}
	else if ( <calStatus> == 8 ) // cal needed
	{
		retval = FALSE;
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~The scannber was not calibrated with the current FilmTerm DMIN values.You will have to calibrate the scanner.~ ) );
		}
	}
	else
	{	
		retval = FALSE;	
	}

	return <retval>;
}


NUMERIC CheckStoredCalibration( DisplayStatus,DisplayMessage,IgnoreCalibrationTimeOut )
{
	FilmType = ~<$con.DlgData[FilmType]>~;
	Result = 0.0;

	dlg( GetInput );
	DlgData( GetValues,CalibrationTimeout,calTimeout,IgnoreCalTimeout,ignoreTimeout );
	if ( <ignoreTimeout> || <IgnoreCalibrationTimeOut> == 1 )
	{	calTimeout = -1;	}
	
	userCalTimeout = DlgData( GetNumeric,CalibrationTimeout );
	calStatus = 0;

	RealMag = CalculateMagnification( FALSE );

	if ( !Scanner( CheckForStoredCalibration,<RealMag>,<calTimeout>,calStatus ) )
	{	
		return Warning( Translate( ~Unable to check for stored calibration for <RealMag>.~ ) );
	}

	SetMagnification( False );
	if ( Scanner(MagChanged) )
	{
		MagNeeded = TRUE;
	}
	else
	{
		MagNeeded = FALSE;
	}

	if ( <calStatus> == 1 ) // not needed
	{
		retval = TRUE;
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~Stored calibration values exists.~ ) );
		}
	}
	else if ( <calStatus> == 2 || (<calStatus> == 3 && <userCalTimeout> == 0) ) // cal needed
	{
		retval = FALSE;
		if (<DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~You will have to calibrate the scanner.~ ) );
		}
	}
	else if ( <calStatus> == 3 ) // stored cal exists
	{
		retval = TRUE;
		if ( <DisplayMessage> || <DisplayStatus> )
			{	dlg( SetStatus,0,Translate( ~Stored calibration values exist.~ ) );	}
	}
	else if ( <calStatus> == 4 || <calStatus> == 5 ) // cal expired
	{
		retval = TRUE;
		if ( <DisplayMessage> || <DisplayStatus> )
			{	dlg( SetStatus,0,Translate( ~Stored calibration values have expired.~ ) );	}

		if ( !<IgnoreCalibrationTimeOut> )
		{
			retval = FALSE;
			if ( <DisplayMessage> )
			{
				if ( MessageBox( Translate( ~The stored calibration has expired. Do you want to use the expired calibration data?~ ),YESNO ) == YES )
				{ 
					dlg( SetStatus,0,Translate( ~Expired calibration values are in use.~ ) );
					retval = TRUE;
				}
			}
		}
	}
	else
	{	
		retval = FALSE;	
	}
	return <retval>;
}


NUMERIC LoadStoredCalibration( DisplayStatus,DisplayMessage,IgnoreCalibrationTimeOut )
{
	FilmType = ~<$con.DlgData[FilmType]>~;
	Result = 0.0;

	dlg( GetInput );
	DlgData( GetValues,CalibrationTimeout,calTimeout,IgnoreCalTimeout,ignoreTimeout );
	if ( <ignoreTimeout> || <IgnoreCalibrationTimeOut> == 1 )
	{	calTimeout = -1;	}
	
	userCalTimeout = DlgData( GetNumeric,CalibrationTimeout );
	calStatus = 0;

	RealMag = CalculateMagnification( FALSE );

	if ( !Scanner( LoadStoredCalibration,<RealMag>,<calTimeout>,calStatus ) )
	{	
		return Warning( Translate( ~Unable to load stored calibration for <RealMag>.~ ) );
	}

	if ( <calStatus> == 1 ) // not needed
	{
		retval = TRUE;
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~Stored calibration values have been loaded.~ ) );
		}
	}
	else if ( <calStatus> == 2 || (<calStatus> == 3 && <userCalTimeout> == 0) ) // cal needed
	{
		retval = FALSE;
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~You will have to calibrate the scanner.~ ) );
		}
		if ( <DisplayMessage> )
		{
			if ( <IgnoreCalibrationTimeOut> )
			{
				Msg = ~You will have to calibrate before performing this operation.~;
			}
			else
			{
				Msg = ~You will have to calibrate before scanning or focusing.~;
			}
			Warning( Translate( ~<Msg>~ ) );
		}
	}
	else if ( <calStatus> == 3 ) // cal restored
	{
		if ( <DisplayStatus> || <DisplayMessage> )
		{	
			dlg( SetStatus,0,Translate( ~Stored calibration values have been loaded.~ ) );
		}
		retval = TRUE;
	}
	else if ( <calStatus> == 4 || <calStatus> == 5 ) // cal expired
	{
		retval = TRUE;
		if ( <DisplayMessage> || <DisplayStatus> )
			{	dlg( SetStatus,0,Translate( ~Stored calibration values have expired.~ ) );	}

		if ( !<IgnoreCalibrationTimeOut> )
		{
			retval = FALSE;
			if ( <DisplayMessage> )
			{
				Msg = ~The stored calibration has expired. It is recommended that you calibrate before scanning or focusing.~;
				Warning( Translate( ~<Msg>~ ) );
			}
		}
	}
	else
	{	
		retval = FALSE;	
	}
	return <retval>;
}


VOID OnIgnoreCalTimeoutCheckbox()
{
	dlg( GetInput );

	if ( DlgData(GetNumeric,IgnoreCalTimeout) )
	{
		dlg( EnableControls,FALSE,CalTimeoutField );
	}
	else
	{
		dlg( EnableControls,TRUE,CalTimeoutField );
	}
	
}


VOID OnIgnoreSFSCheckbox()
{
	dlg( GetInput );

	if ( DlgData(GetNumeric,IgnoreSFS) )
	{
		dlg( EnableControls,FALSE,SFSFileBrowseButton,SFSFileEditText );
	}
	else
	{
		dlg( EnableControls,TRUE,SFSFileBrowseButton,SFSFileEditText );
	}
}

VOID SetupTheScanner( TestScan,FullScanArea )
{
	MagIndex = MagNames( IndexOf,~<$Con.DlgData[Format]>~ );

	ResIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
	Size	 = atof(Resolutions( ValueOf,$ResIndex ));
	Depth	 = 3;
	Rotation = DlgData( GetNumeric,ScanRotation );

	SizzleControl( SetValues,DEPTH,<Depth>,SIZE,<Size>,Rotation,<Rotation> );

	SizzleControl( SetValues,RedOverride,DlgData(GetNumeric,RedOverride),
							GreenOverride,DlgData(GetNumeric,GreenOverride),
							BlueOverride,DlgData(GetNumeric,BlueOverride),
							BrightnessOverride,DlgData(GetNumeric,BrightnessOverride),
							ContrastOverride,DlgData(GetNumeric,ContrastOverride) );

	SizzleControl( SetValues,saDensity,DlgData(GetNumeric,saDensity),
							saRed,DlgData(GetNumeric,saRed),
							saGreen,DlgData(GetNumeric,saGreen),
							saBlue,DlgData(GetNumeric,saBlue) );

	SizzleControl( SetValues,dDensity,DlgData(GetNumeric,dDensity),
							dRed,DlgData(GetNumeric,dRed),
							dGreen,DlgData(GetNumeric,dGreen),
							dBlue,DlgData(GetNumeric,dBlue) );

	SizzleControl( SetValues,SaveFileType,~<$con.DlgData[SaveFileType]>~,FileExtension,~<$con.DlgData[FileExtension]>~,JPEGQuality,DlgData(GetNumeric,JPEGQuality),
							MaxThumbNailSize,DlgData(GetNumeric,MaxThumbNailSize) );
	if ( <FullScanArea> )
	{
		SizzleControl( SetValues,xPos,50,yPos,50,ScanWidth,100,ScanLength,100 );
	}
	else
	{
		SizzleControl( SetValues,xPos,DlgData(GetNumeric,xPos),yPos,DlgData(GetNumeric,yPos),
							ScanWidth,DlgData(GetNumeric,ScanWidth),ScanLength,DlgData(GetNumeric,ScanLength) );
		if ( FunctionDefined( ~<FDVendor>_GetScanHeightPercent~ ) && SizzleControl( GetNumeric,overscan ) )
		{
			scanLength = <FDVendor>_GetScanHeightPercent() * 100.;
			SizzleControl( SetValues,ScanLength,<scanLength> );
		}
	}
	SizzleControl( SetValues,OverScanXPos,DlgData(GetNumeric,OverScanXPos),OverScanYPos,DlgData(GetNumeric,OverScanYPos),
							OverScanWidth,DlgData(GetNumeric,OverScanWidth),OverScanHeight,DlgData(GetNumeric,OverScanLength) );

	SizzleControl( SetValues,CropX,DlgData(GetNumeric,CropX),CropY,DlgData(GetNumeric,CropY),
							CropWidth,DlgData(GetNumeric,CropWidth),CropLength,DlgData(GetNumeric,CropLength) );

	SizzleControl( SetValues,DumpRawData,DlgData(GetNumeric,DumpRawData),
							 DumpRawIRData,DlgData(GetNumeric,DumpRawIRData) );
	SizzleControl( SetValues,LogActivity,DlgData(GetNumeric,LogActivity) );
	SizzleControl( SetValues,TraceCalls,DlgData(GetNumeric,TraceCalls) );
	SizzleControl( SetValues,TimeCalls,DlgData(GetNumeric,TimeCalls) );
	SizzleControl( SetValues,ScannerProfileEnabled,DlgData(GetNumeric,ScannerProfileEnabled),OutputProfileEnabled,DlgData(GetNumeric,OutputProfileEnabled) );
	SizzleControl( SetValues,EmbedProfile,DlgData(GetNumeric,EmbedProfile));
	SizzleControl( SetValues,ICCProfile,~<$con.DlgData[ICCProfile]>~,ICCOutputProfile,~<$con.DlgData[ICCOutputProfile]>~ );
	SizzleControl( SetValues,TestScan,<TestScan> );

	SizzleControl( SetValues,DisplayLastImage,DlgData( GetNumeric,DisplayLastImage ) );
	SizzleControl( SetValues,LockScannerOffsets,DlgData( GetNumeric,LockScannerOffsets ) );
	SizzleControl( SetValues,DensityNormalization,DlgData( GetNumeric,DensityNormalization ) );
	SizzleControl( SetValues,UseAnalyzerDRGBValues,DlgData( GetNumeric,UseAnalyzerDRGBValues ) );
	SizzleControl( SetValues,AutoSaveToDisk,DlgData( GetNumeric,AutoSaveToDisk ) );
	SizzleControl( SetValues,FocusRange,DlgData(GetNumeric,FocusRange) );

	SizzleControl( SetValues,FileResolution,DlgData( GetNumeric,FileResolution ) );

	SizzleControl( SetValues,SharpenDelta,DlgData( GetNumeric,SharpenDelta ) );

	SizzleControl( SetValues,AdaptiveSharpen,DlgData( GetNumeric,AdaptiveSharpen ) );
	SizzleControl( SetValues,SharpenAmount,DlgData( GetNumeric,SharpenAmount ) );
	SizzleControl( SetValues,SharpenFaster,DlgData( GetNumeric,SharpenFaster ) );
	SizzleControl( SetValues,SharpenLimit,DlgData( GetNumeric,SharpenLimit ) );
	SizzleControl( SetValues,SharpenThreshold,DlgData( GetNumeric,SharpenThreshold ) );
	SizzleControl( SetValues,SharpenBlurAmount,DlgData( GetNumeric,SharpenBlurAmount ) );

	SizzleControl( SetValues,NoiseReductionAmount,DlgData( GetNumeric,NoiseReductionAmount ) );

	DlgData( Get,LutFile,LutFile );	
	SizzleControl( Set,LutFile,~<LutFile>~ );

	SizzleControl( SetValues,UseImageOverrides,<UseImageOverrides> );
	SizzleControl( Set,UseSBAPlus,DlgData( GetNumeric,UseSBAPlus ) );
	SetupAdvancedColorValues();
	SizzleControl( SetValues,UseDigitalIce,DlgData(GetNumeric,DigitalIceCheckbox),
							 DigitalIceType,DlgData(GetNumeric,DigitalIceType) );		
}


NUMERIC LoadSlopeLut(SlopeLutFile)
{
	if ( ~<SlopeLutFile>~ == ~~ )
	{
		ForgetGlobal( ActualSlopeLut );
	}
	else if ( !Defined( ActualSlopeLut ) )
	{
		if ( !Lut( ActualSlopeLut,Rows,601,Cols,4,Load,~<SlopeLutFile>~ ) )
		{
			Msg = Translate( ~Could not load the Slope Lut File: <SlopeLutFile>.\nPlease correct the saved DRGB Reference Data.~ );
			return Warning( ~<Msg>~ );
		}
		Global( ActualSlopeLut );
	}
	else
	{
		if ( !ActualSlopeLut( Load,~<SlopeLutFile>~ ) )
		{
			Msg = Translate( ~Could not load the Slope Lut File: <SlopeLutFile>.\nPlease correct the saved DRGB Reference Data.~ );
			return Warning( ~<Msg>~ );
		}
	}
	
	return TRUE;	
}			



NUMERIC ScanOne( Focusing,TestScan,FocusBeforeScan )
{
	if ( !FindScanner(FALSE) )
	{
		return FALSE;
	}

	SizzleControl( SetValues,Focus,<Focusing> || <FocusBeforeScan> );

	SetupTheScanner( <TestScan>,FALSE );

	DlgData( Get,FilmType,FilmType );
	DlgData( Get,SFSFile,SFSFile );
	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}
	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
	result = Scanner( IsColorFilterPositionCorrect,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ );
	if ( <result> == -1 )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		return FALSE;
	}
	if ( <result> == FALSE )
	{
		return Warning( Translate( ~The color filter is not in the correct position for this film type.\nMake sure the filter is in the correct position and then\nselect OK to continue.~ ) );
	}

	if ( !SetScanWindow() )
	{
		return FALSE;
	}

	dlg( SetString,~10~,Progress,0 );

	ReapplyingScannerOffsets = FALSE;

	Actions = ACTION Doc ( OverScanImage "DoCancelButton();" );
	PerformActions( Actions );

	SizzleControl( Get, PreScanNotification, PreScanNotification );
	if ( DefinedAndNotNull( PreScanNotification ) )
	{
		<PreScanNotification>;
	}

	ScannerDlgDefinition( GetWindowPosition,xPos,yPos );
	xPos = <xPos> + ($DialogWidth / 2.0);
	focusRange = SizzleControl( GetNumeric,FocusRange );
	dlg( GetInput,GetStrings,Frame,Frame );

	DlgData( Get,DRGBRefs,DRGBRefs );
	SizzleControl( Set,DRGBRef,~<DRGBRefs>~ );

	if ( $Focusing )
	{
		Actions = ACTION Doc ( FocusProgressDialog OpenOnce FocusProgressDialog "OpenFocusProgressWindow( ~Focusing...~,<focusRange>,<xPos>,<yPos>,~ScannerHR500~ );" );
		PerformActions( Actions );
		Scanner( FocusAsync, SizzleControl );
		dlg( SetStatus,0,~Focusing~ );
	}
	else if ( <FocusBeforeScan> )
	{
		Actions = ACTION Doc ( FocusProgressDialog OpenOnce FocusProgressDialog "OpenFocusProgressWindow( ~Focusing...~,<focusRange>,<xPos>,<yPos>,~ScannerHR500~ );" );
		PerformActions( Actions );
		SizzleControl( SetValues,SBARedAdjust,0,SBAGreenAdjust,0,SBABlueAdjust,0,SBAFleshAdjust,0,ForceSBA,0 );
		SizzleControl( SetValues,SbaR,0,SbaG,0,SbaB,0,SbaFlesh,0,UsedSBA,0);
		SizzleControl( SetValues,xferDenN,0,xferDenGM,0,xferDenI,0);
		SizzleControl( SetValues,AvgDenR,0,AvgDenG,0,AvgDenB,0,AvgDenN,0);
		SizzleControl( SetValues,unwtDenGM,0,unwtDenI,0,AvgHue,0,AvgSat,0);
		SizzleControl( Set,UsedSBA,0 );

		if (~<Frame>~ == ~<lastFrameScanned>~ )
		{
			SizzleControl( Set,RescanningFrame,TRUE );
		}
		else
		{
			SizzleControl( Set,RescanningFrame,FALSE );
		}
		lastFrameScanned = ~<Frame>~;

		Scanner( FocusAndScanAsync, SizzleControl );
		dlg( SetStatus,0,~Focusing and scanning~ );
	}
	else
	{
		// DPT 07/10/01
		// Reset the SBA values since we are doing another scan.
		SizzleControl( SetValues,SBARedAdjust,0,SBAGreenAdjust,0,SBABlueAdjust,0,SBAFleshAdjust,0,ForceSBA,0 );
		SizzleControl( SetValues,SbaR,0,SbaG,0,SbaB,0,SbaFlesh,0,UsedSBA,0);
		SizzleControl( SetValues,xferDenN,0,xferDenGM,0,xferDenI,0);
		SizzleControl( SetValues,AvgDenR,0,AvgDenG,0,AvgDenB,0,AvgDenN,0);
		SizzleControl( SetValues,unwtDenGM,0,unwtDenI,0,AvgHue,0,AvgSat,0);
		SizzleControl( Set,UsedSBA,0 );

		if (~<Frame>~ == ~<lastFrameScanned>~ )
		{
			SizzleControl( Set,RescanningFrame,TRUE );
		}
		else
		{
			SizzleControl( Set,RescanningFrame,FALSE );
		}
		lastFrameScanned = ~<Frame>~;

		Scanner( ScanAsync, SizzleControl );
		dlg( SetStatus,0,~Scanning~ );
	}

	UpdateFreeDiskSpace();

	return TRUE;
}

NUMERIC DefineFileTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	Helpfile = ~S_OutputHR.htm~;
    Define: Tab<tab> Using DDWinCtrlDef AsSymbol TheFileTab 
        Fields: Text            ~Output~
                TypeName        Tab
                Tooltip         ~Setup Parameters for image files saved to disk~
				HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		TextWidth = 90;

        Define: FileTypeStaticText Using DDWinCtrlDef AsSymbol FileTypeStaticText 
                Fields: TypeName        StaticText
                        Text            ~File Type~
						RightJustified	TRUE
                        Position        <x> , <y>,  <TextWidth> , <StaticTextHeight>

        Define: FileTypeComboBox Using DDWinCtrlDef AsSymbol FileTypeComboBox 
                Fields: TypeName		SComboBox  
                        Position		FileTypeStaticText(GetRight,Position) + $hGap, FileTypeStaticText(Gettop,Position),<ComboBoxWidth> ,<ComboBoxHeight> 
                        IActionsText    ~[GetList(OutputFileTypes) Get]~
						DActionsText	~[Save Exec("OnFileTypeChange(FALSE)")]~
                        OActionsText    ~[Save]~
                        GenConName       THIS
                        GenConField      ~SaveFileType~
                        Tooltip          ~Select a file type~

		Define: JPEGQualityPrompt Using DDWinCtrlDef AsSymbol JPEGQualityPrompt
				Fields:	POSITION		FileTypeComboBox(GetRight,Position) + $hGap + 10,FileTypeComboBox(GetTop,Position),40,$StaticTextHeight
						TEXT			Translate( ~Quality~ )
						TYPENAME		StaticText

		Define: JPEGQualityField Using DDWinCtrlDef AsSymbol JPEGQualityField
				Fields:	DACTIONSTEXT	ACTIONS ( Save Update(JPEGQualitySlider) "Exec(AuditField(JPEGQualityField,0,100,100);)" )
						GENCONFIELD		~JPEGQuality~
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		JPEGQualityPrompt(GetRight,Position) + $hGap,JPEGQualityPrompt(GetTop,Position),30,$StaticTextHeight
						TEXT			~~
						TOOLTIP			~Adjust the quality of the EXIF or JPEG file for the scanned images~
						TYPENAME		MaskedEditText
						Mask			~###~
						PromptChar		~ ~ 
						IsTabStop		T;


		Define: JPEGQualitySlider Using DDWinCtrlDef AsSymbol JPEGQualitySlider
				Fields:	DACTIONSTEXT	ACTIONS ( Save Update(JPEGQualityField) )
						GENCONFIELD		~JPEGQuality~
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		JPEGQualityField(GetRight,Position) + $hGap,JPEGQualityField(GetTop,Position),80 $StaticTextHeight
						TOOLTIP			~Adjust the quality of the EXIF or JPEG file for the scanned images~
						TYPENAME		~SLIDER~ 
						UNITS			1 ;

       Define: ExtensionPrompt Using DDWinCtrlDef AsSymbol ExtensionPrompt 
                Fields: TypeName		StaticText
                        Text			~Extension~
						RightJustified	TRUE
                        Position		$x,FileTypeStaticText(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>
 		
		Define: ExtensionField Using DDWinCtrlDef AsSymbol ExtensionField 
				Fields: TypeName		MaskedEditText  
						//Position		ExtensionPrompt(GetRight,Position) + $hGap,ExtensionPrompt(Gettop,Position),<ComboBoxWidth> ,<ComboBoxHeight> 
						//IActionsText  ~[GetList(OutputFileExtensions) Get]~
						Position		ExtensionPrompt(GetRight,Position) + $hGap,ExtensionPrompt(Gettop,Position),<ComboBoxWidth> ,20 
						IActionsText    ~[Get]~
						OActionsText    ~[Save]~
						GenConName       THIS
						GenConField      ~FileExtension~
						Mask			~%%%%%%~
						PromptChar		~ ~		
						Tooltip			~Extension to concatenate to the file name (ex.  .jpg  .tif)~

        Define: ViewingSizePrompt Using DDWinCtrlDef AsSymbol ViewingSizePrompt 
                Fields: TypeName		StaticText
                        Text			~Thumbnail Size~
						RightJustified	TRUE
                        Position		$x,ExtensionPrompt(GetBottom,Position) + $vGap*5,<TextWidth>,<StaticTextHeight>
 
        Define: ViewingSizeField Using DDWinCtrlDef AsSymbol ViewingSizeField 
                fields: TYPENAME		MaskedEditText
						Mask			~###~
						PromptChar		~ ~ 
                        Position		ViewingSizePrompt(GetRight,Position) + $hGap,ViewingSizePrompt(Gettop,Position),<EditTextWidth>, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~MaxThumbNailSize~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsTabStop		T
                        Tooltip			~Length of longest side (in pixels) of the thumbnail image that is embedded in the scanned image~

        Define: XResolutionStaticText Using DDWinCtrlDef AsSymbol XResolutionStaticText 
                Fields: TypeName		StaticText
                        Text			~Resolution~
						RightJustified	TRUE
                        Position		<x>,ViewingSizePrompt(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>

        Define: XResolutionEditText Using DDWinCtrlDef AsSymbol XResolutionEditText 
                fields: TypeName		MaskedEditText
                        Position		XResolutionStaticText(GetRight,Position) + $hGap,XResolutionStaticText(Gettop,Position),<EditTextWidth>, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~FileResolution~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsTabStop		T
                        Tooltip			~Enter the resolution in pixels per inch that would be used by other applications that export postscript~
						Mask			~#####~
						PromptChar		~ ~ ;
		IF 0
		{
			Define: IconStaticText Using DDWinCtrlDef AsSymbol IconStaticText 
					Fields: TypeName		StaticText
							Text			~Icon~
							Position		<x>,XResolutionStaticText(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>

			Define: SaveWithIconCheckBox Using DDWinCtrlDef AsSymbol SaveWithIconCheckBox 
					Fields: TypeName		CheckBox
							GenConName		THIS
							GenConField		~Icon~
							Text			~~
							Position		IconStaticText(GetRight,Position) + $hGap,IconStaticText(GetTop,Position),100, <StaticTextHeight>
							IActionsText	~[Get]~
							OActionsText	~[Save]~
							Tooltip			~Show an icon of the image in Explorer~
		}

		Define: SharpenDeltaStaticText Using DDWinCtrlDef AsSymbol SharpenDeltaStaticText 
                Fields: TypeName		StaticText
                        Text			~Delta Sharpening~
						RightJustified	TRUE
                        Position		<x>,XResolutionEditText(GetBottom,Position) + $vGap*5,<TextWidth>,<StaticTextHeight>

        Define: SharpenDeltaEditText Using DDWinCtrlDef AsSymbol SharpenDeltaEditText 
                Fields: TypeName		MaskedEditText
                        Position		SharpenDeltaStaticText(GetRight,Position) + $hGap,SharpenDeltaStaticText(Gettop,Position),<EditTextWidth>, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~SharpenDelta~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsTabStop		T
						Mask			~####~
						PromptChar		~ ~ 
						AllowedChars	~-~ 
                        Tooltip			~Specify a delta sharpening amount to be stored for the scanned image in the database~;

       Define: LutFileStaticText Using DDWinCtrlDef AsSymbol LutFileStaticText 
                Fields: TypeName		StaticText
                        Text			~Scanner Lut~
						RightJustified	TRUE
                        Position		<x>,SharpenDeltaStaticText(GetBottom,Position) + $vGap*2,<TextWidth>,<StaticTextHeight>

        Define: LutFileEditText Using DDWinCtrlDef AsSymbol LutFileEditText 
                Fields: TypeName		EditText
                        Position		LutFileStaticText(GetRight,Position) + $hGap,LutFileStaticText(Gettop,Position),250, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~LutFile~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsEnabled		F
						IsTabStop		T
                        Tooltip			~Select a linearization lut to apply to the image~

		Define: LutFileBrowseButton Using DDWinCtrlDef AsSymbol LutFileBrowseButton 
				Fields: TypeName		Button
						Text			Translate(~?~)
						Position		LutFileEditText(GetRight,Position) + $hGap,LutFileEditText(GetTop,Position), <StaticTextHeight>,  <StaticTextHeight>
						IsEnabled		F
						DActionsText	ACTION EXEC ( BrowseForLutFilePath() )
						TOOLTIP			~Find a Lut to apply to the scanned image~

 		Define: EmbedProfileBox Using DDWinCtrlDef AsSymbol EmbedProfileBox 
				Fields: TypeName		CheckBox
						Text			Translate( ~Embed Profile~ )
						Position		LutFileEditText(GetRight,Position),LutFileBrowseButton(GetBottom,Position) + $vGap*2, <StaticTextWidth> +25,  <StaticTextHeight>
						GenConName		THIS
                        GenConField		~EmbedProfile~	
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						IsEnabled		T
						Tooltip         ~Embed profile in image: if the Storage Profile is enabled, embed the Storage Profile, if the Scanner Profile is enabled, embed the Scanner Profile.~;

       Define: ScannerProfileStaticText Using DDWinCtrlDef AsSymbol ScannerProfileStaticText 
                Fields: TypeName        StaticText
                        Text            ~Scanner Profile~
						RightJustified	TRUE
                        Position		<x>,EmbedProfileBox(GetBottom,Position) + $vGap,
										<TextWidth>,<StaticTextHeight>

        Define: ScannerProfileComboBox Using DDWinCtrlDef AsSymbol ScannerProfileComboBox 
                Fields: TypeName		SComboBox  
                        Position		ScannerProfileStaticText(GetRight,Position) + $hGap,ScannerProfileStaticText(Gettop,Position),250 ,<ComboBoxHeight> 
                        IActionsText	ACTION EXEC ( RefreshScannerProfilesComboBox(TRUE) )
						DropDownActionsText ACTION CALL ( RefreshScannerProfilesComboBox(FALSE) )
						DActionsText		~[Save Exec("OnProfileChange(TRUE)")]~
                        OActionsText    ~[Save]~
                        GenConName       THIS
                        GenConField      ~ICCProfile~
                        Tooltip          ~Select the profile that characterizes the scanner~

		Define: ScannerProfileEnabledBox Using DDWinCtrlDef AsSymbol ScannerProfileEnabledBox 
				Fields: TypeName		CheckBox
						Text			Translate( ~Enabled~ )
						Position		ScannerProfileComboBox(GetRight,Position) + $hGap,ScannerProfileComboBox(GetTop,Position), <StaticTextWidth>+10,  <StaticTextHeight>
						GenConName		THIS
                        GenConField		~ScannerProfileEnabled~	
						IActionsText    ACTIONS ( Get )
						DActionsText	ACTION EXEC ( OnChangeProfilesEnabled() )
						OActionsText	ACTIONS ( Save )
						Tooltip         ~Enable or disable the use of the selected scanner profile~

      Define: OutputProfileStaticText Using DDWinCtrlDef AsSymbol OutputProfileStaticText 
                Fields: TypeName        StaticText
                        Text            ~Storage Profile~
						RightJustified	TRUE
                        Position		<x>,ScannerProfileStaticText(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>

        Define: OutputProfileComboBox Using DDWinCtrlDef AsSymbol OutputProfileComboBox 
                Fields: TypeName			SComboBox  
                        Position			OutputProfileStaticText(GetRight,Position) + $hGap,OutputProfileStaticText(Gettop,Position),250 ,<ComboBoxHeight> 
                        IActionsText		ACTION EXEC ( RefreshOuputProfilesComboBox(TRUE) )
                        OActionsText		~[Save]~
                        GenConName			THIS
                        GenConField			~ICCOutputProfile~
						DropDownActionsText ACTION CALL ( RefreshOuputProfilesComboBox(FALSE) )
						DActionsText		~[Save Exec("OnProfileChange(FALSE)")]~
                        Tooltip				~Select the profile that describes the color space to store the image in~
 
 		Define: OutputProfileEnabledBox Using DDWinCtrlDef AsSymbol OutputProfileEnabledBox 
				Fields: TypeName		CheckBox
						Text			Translate( ~Enabled~ )
						Position		OutputProfileComboBox(GetRight,Position) + $hGap,OutputProfileComboBox(GetTop,Position), <StaticTextWidth>+10,  <StaticTextHeight>
						GenConName		THIS
                        GenConField		~OutputProfileEnabled~	
						IActionsText    ACTIONS ( Get )
						DActionsText	ACTION EXEC ( OnChangeProfilesEnabled() )
						OActionsText	ACTIONS ( Save )
						Tooltip         ~Enable or disable the use of the selected storage profile~

    }

    return OutputProfileEnabledBox(GetBottom,Position);
}

NUMERIC DefineFilterTab( tab,&x,&CurrentY,&hGap,&vGap,&TabWidth,&TabHeight )
{
	Helpfile = ~S_FilterHR.htm~;
    Define: Tab<tab> Using DDWinCtrlDef AsSymbol TheFilterTab 
        Fields: Text            ~Filter~
                TypeName        Tab
                Tooltip         ~Setup Parameters for applying filters to images~
				HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		TextWidth = 60;

		Define: SharpenFasterButton Using DDWinCtrlDef AsSymbol SharpenFasterButton
			Fields: TypeName		RadioButton
					POSITION		$x+25, $CurrentY+10, 75, 15
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateSharpenFasterSetting(TRUE))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~SharpenFaster~
					RadioTrueValue	TRUE
					Text			Translate(~Faster~)
					Tooltip			~Sharpen the image using the faster sharpening method~;

		Define: SharpenHigherQualityButton Using DDWinCtrlDef AsSymbol SharpenHigherQualityButton
			Fields: TypeName		RadioButton
					POSITION		SharpenFasterButton(GetRight,Position) + $hGap, $CurrentY+10, 90, 15
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateSharpenFasterSetting(FALSE))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~SharpenFaster~
					RadioTrueValue	FALSE
					Text			Translate(~Higher Quality~)
					Tooltip			~Sharpen the image using the higher quality sharpening method~;

		Define: SharpenAmountPrompt Using DDWinCtrlDef AsSymbol SharpenAmountPrompt
			Fields:	POSITION		$x+5, SharpenFasterButton(GetBottom,Position)+$vGap*2, <TextWidth>, $StaticTextHeight
					TEXT			~Amount~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenAmountField Using DDWinCtrlDef AsSymbol SharpenAmountField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenAmountSlider) "Exec(AuditField(SharpenAmountField,0,2000,0); OnSharpenChange())")
					GENCONFIELD		~SharpenAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenAmountPrompt(GetRight,Position) + $hGap), SharpenFasterButton(GetBottom,Position)+$vGap*2, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Percentage of sharpening to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					PromptChar		~ ~ ;

		Define: SharpenAmountSlider Using DDWinCtrlDef AsSymbol SharpenAmountSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenAmountField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenAmountField(GetRight,Position), SharpenFasterButton(GetBottom,Position)+$vGap*2, 250, $EditTextHeight
					TOOLTIP			~Percentage of sharpening to apply to the image~
					TYPENAME		~SLIDER~ 
					UNITS			1 ;

		Define: SharpenAmountMinusButton Using DDWinCtrlDef AsSymbol SharpenAmountMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenAmount(-1,0,2000))" Update(SharpenAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenAmountSlider(GetRight,Position)+$hGap * 2, SharpenFasterButton(GetBottom,Position)+$vGap*2, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					TEXT			~-~;

		Define: SharpenAmountZeroButton Using DDWinCtrlDef AsSymbol SharpenAmountZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenAmount(0,0,2000))" Update(SharpenAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenAmountMinusButton(GetRight,Position) + $hGap, SharpenFasterButton(GetBottom,Position)+$vGap*2, 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					TEXT			~0~

		Define: SharpenAmountPlusButton Using DDWinCtrlDef AsSymbol SharpenAmountPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenAmount(1,0,2000))" Update(SharpenAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenAmountZeroButton(GetRight,Position)+$hGap, SharpenFasterButton(GetBottom,Position)+$vGap*2, 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					TEXT			~+~;

		Define: AdaptiveSharpenCheckBox Using DDWinCtrlDef AsSymbol AdaptiveSharpenCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~AdaptiveSharpen~
					Text			Translate( ~Adaptive Sharpen~ )
					DActionsText	ACTIONS ( Save "Exec(OnSharpenChange())")
					Position		$x+30,SharpenAmountPlusButton(GetBottom,Position) + $vGap*3,120, 15
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~Use adaptive sharpening~ );

 		Define: SharpenLimitPrompt Using DDWinCtrlDef AsSymbol SharpenLimitPrompt
			Fields:	POSITION		$x+5, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, <TextWidth>, $StaticTextHeight
					TEXT			~Limit~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenLimitField Using DDWinCtrlDef AsSymbol SharpenLimitField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenLimitSlider) "Exec(OnSharpenChange())")
					GENCONFIELD		~SharpenLimit~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenLimitPrompt(GetRight,Position) + $hGap), AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Limit of sharpening to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					IsEnabled		F
					PromptChar		~ ~ ;

		Define: SharpenLimitSlider Using DDWinCtrlDef AsSymbol SharpenLimitSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenLimitField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenLimit~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenLimitField(GetRight,Position) , AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 250, $EditTextHeight
					TOOLTIP			~Limit of sharpening to apply to the image~
					TYPENAME		~SLIDER~ 
					IsEnabled		F
					UNITS			1 ;

		Define: SharpenLimitMinusButton Using DDWinCtrlDef AsSymbol SharpenLimitMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenLimit(-1,10,255))" Update(SharpenLimitSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenLimitSlider(GetRight,Position)+$hGap * 2, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~-~;

		Define: SharpenLimitZeroButton Using DDWinCtrlDef AsSymbol SharpenLimitZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenLimit(0,10,255))" Update(SharpenLimitSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenLimitMinusButton(GetRight,Position) + $hGap, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 15, $EditTextHeight
					TOOLTIP			~Reset to minimum (10)~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~0~

		Define: SharpenLimitPlusButton Using DDWinCtrlDef AsSymbol SharpenLimitPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenLimit(1,10,255))" Update(SharpenLimitSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenLimitZeroButton(GetRight,Position)+$hGap, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~+~;

 		Define: SharpenThresholdPrompt Using DDWinCtrlDef AsSymbol SharpenThresholdPrompt
			Fields:	POSITION		$x+5, SharpenLimitPrompt(GetBottom,Position) + $vGap, <TextWidth>, $StaticTextHeight
					TEXT			~Threshold~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenThresholdField Using DDWinCtrlDef AsSymbol SharpenThresholdField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenThresholdSlider) "Exec(AuditField(SharpenThresholdField,0,100,90); OnSharpenChange())")
					GENCONFIELD		~SharpenThreshold~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenThresholdPrompt(GetRight,Position) + $hGap), SharpenLimitPrompt(GetBottom,Position) + $vGap, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Threshold of sharpening to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					IsEnabled		F
					PromptChar		~ ~ ;

		Define: SharpenThresholdSlider Using DDWinCtrlDef AsSymbol SharpenThresholdSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenThresholdField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenThreshold~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenThresholdField(GetRight,Position) , SharpenLimitPrompt(GetBottom,Position) + $vGap, 250, $EditTextHeight
					TOOLTIP			~Threshold of sharpening to apply to the image~
					TYPENAME		~SLIDER~ 
					IsEnabled		F
					UNITS			1 ;

		Define: SharpenThresholdMinusButton Using DDWinCtrlDef AsSymbol SharpenThresholdMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenThreshold(-1,0,100))" Update(SharpenThresholdSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenThresholdSlider(GetRight,Position)+$hGap * 2, SharpenLimitPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~-~;

		Define: SharpenThresholdZeroButton Using DDWinCtrlDef AsSymbol SharpenThresholdZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenThreshold(0,0,100))" Update(SharpenThresholdSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenThresholdMinusButton(GetRight,Position) + $hGap, SharpenLimitPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~0~

		Define: SharpenThresholdPlusButton Using DDWinCtrlDef AsSymbol SharpenThresholdPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenThreshold(1,0,100))" Update(SharpenThresholdSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenThresholdZeroButton(GetRight,Position)+$hGap, SharpenLimitPrompt(GetBottom,Position) + $vGap 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~+~;

 		Define: SharpenBlurAmountPrompt Using DDWinCtrlDef AsSymbol SharpenBlurAmountPrompt
			Fields:	POSITION		$x+5, SharpenThresholdPrompt(GetBottom,Position) + $vGap, <TextWidth>, $StaticTextHeight
					TEXT			~Blur~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenBlurAmountField Using DDWinCtrlDef AsSymbol SharpenBlurAmountField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenBlurAmountSlider) "Exec(AuditField(SharpenBlurAmountField,0,100,0); OnSharpenChange())")
					GENCONFIELD		~SharpenBlurAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenBlurAmountPrompt(GetRight,Position) + $hGap), SharpenThresholdPrompt(GetBottom,Position) + $vGap, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Percent of blurring to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					IsEnabled		F
					PromptChar		~ ~ ;

		Define: SharpenBlurAmountSlider Using DDWinCtrlDef AsSymbol SharpenBlurAmountSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenBlurAmountField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenBlurAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenBlurAmountField(GetRight,Position) , SharpenThresholdPrompt(GetBottom,Position) + $vGap, 250, $EditTextHeight
					TOOLTIP			~Percent of blurring to apply to the image~
					TYPENAME		~SLIDER~ 
					IsEnabled		F
					UNITS			1 ;

		Define: SharpenBlurAmountMinusButton Using DDWinCtrlDef AsSymbol SharpenBlurAmountMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenBlurAmount(-1,0,100))" Update(SharpenBlurAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenBlurAmountSlider(GetRight,Position)+$hGap * 2, SharpenThresholdPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~-~;

		Define: SharpenBlurAmountZeroButton Using DDWinCtrlDef AsSymbol SharpenBlurAmountZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenBlurAmount(0,0,100))" Update(SharpenBlurAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenBlurAmountMinusButton(GetRight,Position) + $hGap, SharpenThresholdPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~0~

		Define: SharpenBlurAmountPlusButton Using DDWinCtrlDef AsSymbol SharpenBlurAmountPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenBlurAmount(1,0,100))" Update(SharpenBlurAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenBlurAmountZeroButton(GetRight,Position)+$hGap, SharpenThresholdPrompt(GetBottom,Position) + $vGap 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~+~;

		Define: SharpenGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		~Sharpen~
					Position	$x, $CurrentY-5, 430, 150 ;

 		Define: NoiseReductionAmountPrompt Using DDWinCtrlDef AsSymbol NoiseReductionAmountPrompt
			Fields:	POSITION		$x+5, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), <TextWidth>, $StaticTextHeight
					TEXT			~Amount~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: NoiseReductionAmountField Using DDWinCtrlDef AsSymbol NoiseReductionAmountField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(NoiseReductionAmountSlider) "Exec(AuditField(NoiseReductionAmountField,0,100,0);OnNoiseReductionChange())")
					GENCONFIELD		~NoiseReductionAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(NoiseReductionAmountPrompt(GetRight,Position) + $hGap), SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Percentage of noise reduction to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					PromptChar		~ ~ ;

		Define: NoiseReductionAmountSlider Using DDWinCtrlDef AsSymbol NoiseReductionAmountSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(NoiseReductionAmountField) "Exec(OnNoiseReductionChange())" )
					GENCONFIELD		~NoiseReductionAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		NoiseReductionAmountField(GetRight,Position), SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 250, $EditTextHeight
					TOOLTIP			~Percentage of noise reduction to apply to the image~
					TYPENAME		~SLIDER~ 
					UNITS			1 ;

		Define: NoiseReductionAmountMinusButton Using DDWinCtrlDef AsSymbol NoiseReductionAmountMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeNoiseReductionAmount(-1,0,100))" Update(NoiseReductionAmountSlider) "Exec(OnNoiseReductionChange())" )
					POSITION		NoiseReductionAmountSlider(GetRight,Position)+$hGap * 2, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					TEXT			~-~;

		Define: NoiseReductionAmountZeroButton Using DDWinCtrlDef AsSymbol NoiseReductionAmountZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeNoiseReductionAmount(0,0,100))" Update(NoiseReductionAmountSlider) "Exec(OnNoiseReductionChange())" )
					POSITION		NoiseReductionAmountMinusButton(GetRight,Position) + $hGap, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					TEXT			~0~;

		Define: NoiseReductionAmountPlusButton Using DDWinCtrlDef AsSymbol NoiseReductionAmountPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeNoiseReductionAmount(1,0,100))" Update(NoiseReductionAmountSlider) "Exec(OnNoiseReductionChange())" )
					POSITION		NoiseReductionAmountZeroButton(GetRight,Position)+$hGap, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					TEXT			~+~;

		Define: NoiseReductionGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		~Noise Reduction~
					Position	$x, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*4), 430, 45 ;

		Define: ReapplyFiltersButton Using DDWinCtrlDef AsSymbol ReapplyFiltersButton 
			Fields:	TypeName		Button
					Text			~Reapply~
					Position		$x,NoiseReductionAmountPlusButton(GetBottom,Position) + ($vGap*7),<ButtonWidth>+7,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnReapplyButton() ) 
					Tooltip			Translate( ~Reapply the current filter settings to the image~ )
					IsEnabled		F;
   }

    return $CurrentY;
}

VOID OnLockScannerOffsets()
{
	dlg( GetInput );

	if ( dlgData( GetNumeric,LockScannerOffsets ) )
	{
		if ( dlgData( GetNumeric, UseAnalyzerDRGBValues ) )
		{
			LastAutoDRGBAdjustments = dlgData( GetNumeric, AutoDRGBAdjustments );
			LastDensityNormalization = dlgData( GetNumeric, DensityNormalization );
		}

		dlg( SetStrings, AutoDRGBAdjustments, ~0~ );
		dlg( EnableControls,FALSE,AutoDRGBAdjustmentsCheckBox );

		dlg( SetStrings, DensityNormalization, ~0~ );
		dlg( EnableControls,FALSE,DenNormCheckBox );
	}
	else
	{
		if ( dlgData( GetNumeric, UseAnalyzerDRGBValues ) )
		{
			dlg( EnableControls,TRUE,AutoDRGBAdjustmentsCheckBox );
			dlg( SetStrings, AutoDRGBAdjustments, ~<LastAutoDRGBAdjustments>~ );

			dlg( EnableControls,TRUE,DenNormCheckBox );
			dlg( SetStrings, DensityNormalization, ~<LastDensityNormalization>~ );
		}
	}
}


NUMERIC ColorControl( Prompt,Type,x,CurrentY,hGap,MinValue,MaxValue )
{
	Define: <Type>Prompt Using DDWinCtrlDef AsSymbol <Type>Prompt
		Fields:	POSITION		$x $CurrentY 50 $StaticTextHeight
				TEXT			~<Prompt>~
				RightJustified	TRUE
				TYPENAME		StaticText


	Define: <Type>Field Using DDWinCtrlDef AsSymbol <Type>Field
		Fields:	DACTIONSTEXT	ACTIONS ( Save Update(<Type>Slider) "Exec(OnColorChange())")
				GENCONFIELD		~<Type>~
				GENCONNAME		THIS
				IACTIONSTEXT	ACTIONS ( Get )
				OACTIONSTEXT	ACTIONS ( Save )
				POSITION		(<Type>Prompt(GetRight,Position) + $hGap) $CurrentY 30 $EditTextHeight
				TEXT			~~
				TOOLTIP			~Apply <Type> correction to the next scan~
				TYPENAME		MaskedEditText
				Mask			~####~
				AllowedChars	~-~
				PromptChar		~ ~ ;

	Define: <Type>Slider Using DDWinCtrlDef AsSymbol <Type>Slider
		Fields:	DACTIONSTEXT	ACTIONS ( Save   Update(<Type>Field) "Exec(OnColorChange())" )
				GENCONFIELD		~<Type>~
				GENCONNAME		THIS
				IACTIONSTEXT	~[Get]~
				OACTIONSTEXT	~[Save]~
				POSITION		<Type>Field(GetRight,Position) , $CurrentY 130 $EditTextHeight
				TOOLTIP			~Apply <Type> correction to the next scan~
				TYPENAME		~SLIDER~ 
				UNITS			1 ;

	Define: <Type>MinusButton Using DDWinCtrlDef AsSymbol <Type>MinusButton
		Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeColor(<Type>,-1,<MinValue>,<MaxValue>))" Update(<Type>Slider) "Exec(OnColorChange())" )
				POSITION		<Type>Slider(GetRight,Position)+$hGap * 2, $CurrentY, 15, $EditTextHeight
				TOOLTIP			~Decrease by 1~
				TYPENAME		~Button~ 
				TEXT			~-~;

	Define: <Type>ZeroButton Using DDWinCtrlDef AsSymbol <Type>ZeroButton
		Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeColor(<Type>,0,<MinValue>,<MaxValue>))" Update(<Type>Slider) "Exec(OnColorChange())" )
				POSITION		<Type>MinusButton(GetRight,Position) + $hGap, $CurrentY, 15, $EditTextHeight
				TOOLTIP			~Reset to 0~
				TYPENAME		~Button~ 
				TEXT			~0~

	Define: <Type>PlusButton Using DDWinCtrlDef AsSymbol <Type>PlusButton
		Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeColor(<Type>,1,<MinValue>,<MaxValue>))" Update(<Type>Slider) "Exec(OnColorChange())" )
				POSITION		<Type>ZeroButton(GetRight,Position)+$hGap, $CurrentY, 15, $EditTextHeight
				TOOLTIP			~Increase by 1~
				TYPENAME		~Button~ 
				TEXT			~+~;

	CurrentY = $CurrentY + $StaticTextHeight;

	return $CurrentY;
}


VOID ChangeColor( Type,Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,<Type> ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,<Type> );
}


NUMERIC DefineHR500ColorSetupTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	CurrentY = <y>;
	ThisButtonWidth = (<ButtonWidth> * 2.2) + 5;

    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text    ~Color~
            TypeName        Tab
            Tooltip         Translate( ~Setup the color balance of the next scan~ )
			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "S_ColorHR.htm" )

	Contains: InListOrder
	{
		Define: AnaDRGBButton Using DDWinCtrlDef AsSymbol AnaDRGBButton
			Fields: TypeName		RadioButton
					Position		<X>+5,$CurrentY - 5,130,15 
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateColorControls(TRUE))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~UseAnalyzerDRGBValues~
					RadioTrueValue	TRUE
					Text			Translate(~Analyzer DRGB Values~)
					Tooltip			Translate(~Use analyzer DRGB values for determining scanner color offsets~);

		Define: SBAButton Using DDWinCtrlDef AsSymbol SBAButton
			Fields: TypeName		RadioButton
					Position		AnaDRGBButton(GetRight,Position) + 5,$CurrentY - 5,40,15 
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateColorControls(FALSE))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~UseAnalyzerDRGBValues~
					RadioTrueValue	FALSE
					Text			Translate(~SBA~)
					Tooltip			Translate(~Use Scene Balance Algorithm for determining scanner color offsets~);

		Define: SBAPlusCheckBox Using DDWinCtrlDef AsSymbol SBAPlusCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~UseSBAPlus~
					Text			Translate( ~Enhanced SBA~ )
					Position		SBAButton(GetRight,Position) + 5,$CurrentY - 5,100,15
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					DActionsText	ACTION EXEC ( OnSbaPlus() )
					Tooltip			Translate( ~Use Enhanced SBA for images containing flesh tones~ );

		StartX = <X>;	StartY = <CurrentY> + $vGap; 
		CurrentX = <StartX>;	CurrentY = AnaDRGBButton(GetBottom,Position) + $vGap + 5;

		CurrentY = ColorControl( Translate( Density ),dDensity,$CurrentX,$CurrentY,$hGap,0,255 );
		CurrentY = ColorControl( Translate( Red ),dRed,$CurrentX,$CurrentY,$hGap,0,255 );
		CurrentY = ColorControl( Translate( Green ),dGreen,$CurrentX,$CurrentY,$hGap,0,255 );
		CurrentY = ColorControl( Translate( Blue ),dBlue,$CurrentX,$CurrentY,$hGap,0,255 );

		CurrentY += 5;

		Define: OffsetsCheckBox Using DDWinCtrlDef AsSymbol OffsetsCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~LockScannerOffsets~
					Text			Translate( ~Lock Scanner Offsets~ )
					Position		<X>+15,$CurrentY-2,<ButtonWidth>*2+10,15
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					DActionsText	ACTION EXEC ( OnLockScannerOffsets() )
					Tooltip			Translate( ~Lock down and use the scanner offsets for each scan~ );

		Define: DenNormCheckBox Using DDWinCtrlDef AsSymbol DenNormCheckBox
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~DensityNormalization~
					Text			Translate( ~Density Normalization~ )
					Position		<X>+150,$CurrentY-2,<ButtonWidth>*2+10,15
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~Auto adjust density so that RGB changes do not change density.~ );

		CurrentY = OffsetsCheckBox(GetBottom,Position) + $vGap;

		CurrentY = ColorControl( Translate( Brightness ),BrightnessOverride,$CurrentX,$CurrentY,$hGap,-700,700 );
		CurrentY = ColorControl( Translate( Red ),RedOverride,$CurrentX,$CurrentY,$hGap,-700,700 );
		CurrentY = ColorControl( Translate( Green ),GreenOverride,$CurrentX,$CurrentY,$hGap,-700,700 );
		CurrentY = ColorControl( Translate( Blue ),BlueOverride,$CurrentX,$CurrentY,$hGap,-700,700 );
		CurrentY = ColorControl( Translate( Contrast ),ContrastOverride,$CurrentX,$CurrentY,$hGap,-100,100 );

		StartX = <X>;	StartY = <Y> + $vGap; 
		CurrentX = <StartX> + 15;	CurrentY = <StartY> + 10;

	   Define: FilmTypesStatic Using DDWinCtrlDef AsSymbol FilmTypesStatic 
			Fields: TypeName        StaticText 
					Position		300,$CurrentY - 17,<ThisButtonWidth>,15 
					Text			Translate(~Film Type~)

		Define: FilmTypesComboBox Using DDWinCtrlDef AsSymbol FilmTypesComboBox 
			Fields: TypeName        SComboBox  
					Position		FilmTypesStatic(GetLeft,Position),FilmTypesStatic(GetBottom,Position) + 3,<ThisButtonWidth>,<ButtonHeight> * 8
					IActionsText	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(CheckFilmType( TRUE ))" )
					DropDownActionsText	ACTION EXEC ( UpdateFilmTypesList() )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~FilmType~
					Tooltip			Translate(~Select the type of film you are using~ );

	   Define: DigitalIceLevelStatic Using DDWinCtrlDef AsSymbol DigitalIceLevelStatic
			Fields: TypeName		StaticText
					Position		FilmTypesStatic(GetLeft,Position),FilmTypesStatic(GetBottom,Position) + $vGap *15,40,15
					Text			Translate(~D. ICE: ~);

	   Define: DigitalIceType	Using DDWinCtrlDef AsSymbol DigitalIceType
			Fields: TypeName		RadioButton
					Position		DigitalIceLevelStatic(GetRight,Position),DigitalIceLevelStatic(GetTop,Position),60,15
					IsEnabled		F
					IActionsText	~[Get]~
					DActionsText	~[   
										CheckButton(DigitalIceType) 
										UncheckButton(DigitalIceTypeHigh)
										Save
									 ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~DigitalIceType~
					RadioTrueValue	<kDICELevelLow>
					Text			Translate(~Normal~)
					Tooltip			Translate(~Use normal Digital ICE setting (default)~);

	   Define: DigitalIceTypeHigh	Using DDWinCtrlDef AsSymbol DigitalIceTypeHigh
			Fields: TypeName		RadioButton
					Position		DigitalIceType(GetRight,Position),DigitalIceType(GetTop,Position),40,15
					IsEnabled		F
					IActionsText	~[Get]~
					DActionsText	~[ 	
										CheckButton(DigitalIceTypeHigh) 
										UncheckButton(DigitalIceType)
										Save
									]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~DigitalIceType~
					RadioTrueValue	<kDICELevelHigh>
					Text			Translate(~Low DICE~)
					Tooltip			Translate(~Use low Digital ICE~);


	   Define: RefDRGBStatic Using DDWinCtrlDef AsSymbol RefDRGBStatic 
			Fields: TypeName        StaticText 
					Position		DigitalIceLevelStatic(GetLeft,Position),DigitalIceLevelStatic(GetBottom,Position) + $vGap,<ThisButtonWidth>,15
					Text			Translate(~Saved DRGB Refs~)

	   Define: RefDRGBComboBox Using DDWinCtrlDef AsSymbol RefDRGBComboBox 
			Fields: TypeName        SComboBox  
					Position		RefDRGBStatic(GetLeft,Position),RefDRGBStatic(GetBottom,Position) + $vGap,<ThisButtonWidth>,<ButtonHeight> * 8
					IActionsText	ACTIONS ( UpdateList(DRGBRefsList "Select Name From DRGBRefs" Name) GetList(DRGBRefsList) Get )
					DropDownActionsText ACTIONS ( UpdateList(DRGBRefsList "Select Name From DRGBRefs" Name) GetList(DRGBRefsList) Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~DRGBRefs~
					Tooltip			Translate(~Select the DRGB reference for adjusting the scanner from your analyzer numbers~)

		Define: EditRefs_Button Using DDWinCtrlDef AsSymbol EditRefs_Button 
			Fields:	TypeName		Button
					Text			Translate( ~Edit~ )
					Position		RefDRGBComboBox(GetLeft,Position),RefDRGBComboBox(GetTop,Position) + <ButtonHeight> + $vGap * 3,<ThisButtonWidth>,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnEditDRGBRefs() ) 
					Tooltip			Translate( ~Edit the reference values for DRGB Scanner calculations~ );

		Define: DRGB2RGB_Button Using DDWinCtrlDef AsSymbol DRGB2RGB_Button 
			Fields:	TypeName		Button
					Text			~Calculate~
					Position		EditRefs_Button(GetLeft,Position),EditRefs_Button(GetBottom,Position) + $vGap,<ButtonWidth>*2,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnDRGB_2_BRGBC( TRUE ) ) 
					Tooltip			Translate( ~Setup the scanner color adjustments from your DRGB settings~ );

		Define: AutoDRGBAdjustmentsCheckBox Using DDWinCtrlDef AsSymbol AutoDRGBAdjustmentsCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~AutoDRGBAdjustments~
					Text			Translate( ~Auto DRGB Calc~ )
					Position		DRGB2RGB_Button(GetLeft,Position),DRGB2RGB_Button(GetBottom,Position) + $vGap,<ThisButtonWidth>,<ButtonHeight>
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~Automatically setup the color adjustments from DRGB values that are stored in the database on every scan~ );

		Define: ReapplySBAButton Using DDWinCtrlDef AsSymbol ReapplySBAButton 
			Fields:	TypeName		Button
					Text			Translate( ~Apply SBA~ )
					Position		AutoDRGBAdjustmentsCheckBox(GetLeft,Position),AutoDRGBAdjustmentsCheckBox(GetBottom,Position) + $vGap,<ButtonWidth>+9,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnApplySBAButton() ) 
					Tooltip			Translate( ~Apply the current SBA selection to the image~ )
					IsEnabled		F;

		Define: ResetTo0Button Using DDWinCtrlDef AsSymbol ResetTo0Button 
			Fields:	TypeName		Button
					Text			~Reset to 0~
					Position		AutoDRGBAdjustmentsCheckBox(GetLeft,Position),AutoDRGBAdjustmentsCheckBox(GetBottom,Position) + $vGap*15,<ButtonWidth>+9,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnResetTo0Button( TRUE ) ) 
					Tooltip			Translate( ~Reset the current scanner offsets to 0~ );

		Define: ReapplyButton Using DDWinCtrlDef AsSymbol ReapplyButton 
			Fields:	TypeName		Button
					Text			~Reapply~
					Position		ResetTo0Button(GetRight,Position)+3,AutoDRGBAdjustmentsCheckBox(GetBottom,Position) + $vGap*15,<ButtonWidth>+7,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnReapplyButton() ) 
					Tooltip			Translate( ~Reapply the current scanner offsets to the image~ )
					IsEnabled		F;
	}

	return TRUE;
}


NUMERIC DefineHR500AdvancedColorSetupTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	CurrentY = <y>;
	ThisButtonWidth = (<ButtonWidth> * 2.2) + 5;

    Define: Tab<tab> Using DDWinCtrlDef AsSymbol HR500AdvancedColorSetupTab
            Fields: Text    ~Advanced SBA Setup~
            TypeName        Tab
            Tooltip         Translate( ~Access advanced SBA input parameters~ )
			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "S_ColorHRADV.htm" )

	Contains: InListOrder
	{
		TextWidth = 150;

		Define: ColorBrightnessButton Using DDWinCtrlDef AsSymbol ColorBrightnessButton
			Fields: TypeName		RadioButton
					Position		$x+25,$y+10,120,<StaticTextHeight>
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateSBALevel(0))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~SBALevel~
					RadioTrueValue	0
					Text			Translate(~Color and Brightness~)
					Tooltip			Translate(~Use Scene Balance Algorithm to adjust color and brightness (default)~);

		Define: BrightnessOnlyButton Using DDWinCtrlDef AsSymbol BrightnessOnlyButton
			Fields: TypeName		RadioButton
					Position		ColorBrightnessButton(GetLeft,Position), ColorBrightnessButton(GetBottom,Position)+$vGap,120,<StaticTextHeight> 
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateSBALevel(4))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~SBALevel~
					RadioTrueValue	4
					Text			Translate(~Brightness Only~)
					Tooltip			Translate(~Use Scene Balance Algorithm to adjust brightness only~);

		Define: ColorOnlyButton Using DDWinCtrlDef AsSymbol ColorOnlyButton
			Fields: TypeName		RadioButton
					Position		BrightnessOnlyButton(GetLeft,Position), BrightnessOnlyButton(GetBottom,Position)+$vGap,120,<StaticTextHeight> 
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateSBALevel(1))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~SBALevel~
					RadioTrueValue	1
					Text			Translate(~Color Only~)
					Tooltip			Translate(~Use Scene Balance Algorithm to adjust color only~);

		Define: SBALevelGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		Translate(~SBA Mode~)
					Position	$x+5, $y-5,150,ColorOnlyButton(GetBottom,Position) - $y + 10;


        Define: CMMStaticText Using DDWinCtrlDef AsSymbol CMMStaticText 
                Fields: TypeName        StaticText
                        Text            Translate(~Chromatic Matrix Multiplier~)
						RightJustified	TRUE
                        Position        $TabWidth/2,$y+10,<TextWidth>,<StaticTextHeight>

        Define: CMMField Using DDWinCtrlDef AsSymbol CMMField 
                Fields: TypeName		MaskedEditText  
                        Position		CMMStaticText(GetRight,Position) + $hGap, CMMStaticText(Gettop,Position),40,<StaticTextHeight> 
						IActionsText    ~[Get]~
						OActionsText    ~[Save]~
						DActionsText	ACTIONS ( Save "Exec(AuditField(CMMField,0,200,100))" )
						Mask			~###~
                        GenConName      THIS
                        GenConField     ~CMMField~
                        Tooltip         Translate(~Set the Chromatic Matrix Multiplier percentage for SBA (0 to 200, default 100)~)

        Define: PreferenceClassText Using DDWinCtrlDef AsSymbol PreferenceClassText 
                Fields: TypeName        StaticText
                        Text            Translate(~Preference Class~)
						RightJustified	TRUE
                        Position        CMMStaticText(GetLeft,Position), CMMStaticText(GetBottom,Position)+$vGap,<TextWidth>,<StaticTextHeight>

        Define: PreferenceClassField Using DDWinCtrlDef AsSymbol PreferenceClassField 
                Fields: TypeName		MaskedEditText  
                        Position		PreferenceClassText(GetRight,Position)+$hGap, PreferenceClassText(Gettop,Position),40,20 
						IActionsText    ~[Get]~
						OActionsText    ~[Save]~
						DActionsText	ACTIONS ( Save "Exec(AuditField(PreferenceClassField,(-1500),2500,0))" )
						Mask			~#####~
						AllowedChars	~-~
                        GenConName      THIS
                        GenConField     ~PreferenceClass~
                        Tooltip         Translate(~Set the Preference Class for SBA (-1500 to 2500, default 0)~)

        Define: PCWFText Using DDWinCtrlDef AsSymbol PCWFText 
                Fields: TypeName        StaticText
                        Text            Translate(~Preference Class Weighting Factor~)
						RightJustified	TRUE
                        Position        PreferenceClassText(GetLeft,Position)-50, PreferenceClassText(GetBottom,Position)+$vGap,<TextWidth>+50,<StaticTextHeight>

        Define: PCWFField Using DDWinCtrlDef AsSymbol PCWFField 
                Fields: TypeName		MaskedEditText  
                        Position		PCWFText(GetRight,Position) + $hGap, PCWFText(Gettop,Position),40,20 
						IActionsText    ~[Get]~
						OActionsText    ~[Save]~
						DActionsText	ACTIONS ( Save "Exec(AuditField(PCWFField,0,1500,700))" )
						Mask			~####~
                        GenConName      THIS
                        GenConField     ~PCWF~
                        Tooltip         Translate(~Set the Preference Class Weighting Factor for SBA (0 to 1500, default 700)~)

		Define: SBASetupGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		Translate(~SBA Setup Values~)
					Position	$TabWidth/2 - 25, $y-5,230,PCWFText(GetBottom,Position) - $y + 10;

        Define: IgnoreSFSCheckBox Using DDWinCtrlDef AsSymbol IgnoreSFSCheckBox 
                Fields: TypeName        CheckBox
                        Text            Translate(~Ignore Subject Failure Suppression~)
						IsEnabled		T
                        Position        $x+15, ColorOnlyButton(GetBottom,Position)+10,<TextWidth>+40,<StaticTextHeight>
						GenConName		THIS
						GenConField		~IgnoreSFS~
						IActionsText    ACTIONS ( Get )
						DActionsText	ACTIONS ( Save "Exec(OnIgnoreSFSCheckbox())" )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate(~If checked, SBA will process the image without subject failure suppression.~);
	
		Define: SFSFileText Using DDWinCtrlDef AsSymbol SFSFileText 
				Fields: TypeName		StaticText
						Text			Translate(~SFS Boundary Set~)
						RightJustified	TRUE
						Position		IgnoreSFSCheckBox(GetLeft,Position),IgnoreSFSCheckBox(GetBottom,Position)+$vGap*3,90,<StaticTextHeight>;

		Define: SFSFileEditText Using DDWinCtrlDef AsSymbol SFSFileEditText 
				Fields: TypeName		EditText  
						Position		SFSFileText(GetRight,Position)+$hGap,SFSFileText(GetTop,Position)-2,<TextWidth>+120 ,<StaticTextHeight>
                         IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						GenConName		THIS
						GenConField		~SFSFile~
						Tooltip			Translate(~Select the file containing the desired subject failure suppression boundary set~ );

		Define: SFSFileBrowseButton Using DDWinCtrlDef AsSymbol SFSFileBrowseButton 
				Fields: TypeName		Button
						Text			Translate(~?~)
						Position		SFSFileEditText(GetRight,Position) + $hGap,SFSFileEditText(GetTop,Position), 20,  <StaticTextHeight>
						DActionsText	ACTION EXEC ( BrowseForSFSFile() )
						Tooltip			Translate(~Select the file containing the desired subject failure suppression boundary set~ );

		Define: ResetToDefaultsButton Using DDWinCtrlDef AsSymbol ResetToDefaultsButton 
			Fields:	TypeName		Button
					Text			Translate(~Reset to Defaults~)
					Position		SFSFileText(GetLeft,Position),SFSFileText(GetBottom,Position) + $vGap*5,<ButtonWidth>+40,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnResetAdvColorDefaults() ) 
					Tooltip			Translate( ~Reset the Advanced SBA Setup values to their defaults.~ );

		Define: ReapplyAdvancedColorButton Using DDWinCtrlDef AsSymbol ReapplyAdvancedColorButton 
			Fields:	TypeName		Button
					Text			Translate(~Reapply~)
					Position		PCWFField(GetRight,Position) - <ButtonWidth>-7, ResetToDefaultsButton(GetTop,Position),
									<ButtonWidth>+7,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnReapplyAdvColorButton() ) 
					Tooltip			Translate( ~Reapply the current SBA settings to the image~ )
					IsEnabled		F;

		Define: SeeSbaDataButton Using DDWinCtrlDef AsSymbol SeeSbaDataButton 
            Fields: TypeName		Button
                    Text			Translate( ~View SBA Data~ )
                    Position		ResetToDefaultsButton(GetLeft,Position), ResetToDefaultsButton(GetBottom,Position) + $vGap*3, <ButtonWidth>+40,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ShowSbaImageDataWindow() ) 
                    Tooltip         Translate(~See the SBA data for this roll of the selected order~ )
					IsHidden		F
					IsEnabled		T;

		Define: SeeFilmtermDataButton Using DDWinCtrlDef AsSymbol SeeFilmtermDataButton 
            Fields: TypeName		Button
                    Text			Translate( ~View Filmterm Data~ )
                    Position		SeeSbaDataButton(GetLeft,Position), SeeSbaDataButton(GetBottom,Position) + $vGap*3, <ButtonWidth>+40,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ShowFilmtermDataWindow() ) 
                    Tooltip         Translate(~See the Filmterm data for all of the filmterms~ )
					IsHidden		F
					IsEnabled		T;
	}
	
	return TRUE;
}


NUMERIC DefineScannerTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	vertGap = 10;

	Helpfile = ~S_SetupHR.htm~;
    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text            ~Scanner~
                    TypeName        Tab
                    Tooltip         ~Select the scan size, scan area and calibration parameters for the scanner~
					HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		StaticWidth = 70;			ScanAreaWidth = 50;  ControlWidth = ($ScanAreaWidth)*4;

        Define: FilmFormatStaticText Using DDWinCtrlDef AsSymbol FilmFormatStaticText 
            Fields: TypeName		StaticText
                    Text			~Film Format~
					RIGHTJUSTIFIED	TRUE
                    Position		$x, $y, <StaticWidth>,<StaticTextHeight>

        Define: FilmFormatComboBox Using DDWinCtrlDef AsSymbol FilmFormatComboBox 
            Fields: TypeName		SComboBox  
                    Position		FilmFormatStaticText(Getright,Position) + $hGap,FilmFormatStaticText(GetTop,Position),150, <ComboBoxHeight> 
                    IActionsText    ACTIONS ( GetList(FilmSizeChoices) Get )
					DActionsText	ACTIONS ( Save "Exec(OnFormatChange(3, ~Film format changed.~, TRUE, TRUE, TRUE ))" )
				    OActionsText    ACTIONS ( Save )
                    GenConField		~Format~
                    GenConName		THIS
                    Tooltip			Translate( ~Select the film format~ )

		Define: ResolutionText Using DDWinCtrlDef AsSymbol ResolutionText 
			Fields: TypeName		StaticText
					Text			Translate( ~Resolution~ )
					RightJustified	TRUE
					Position		FilmFormatComboBox(GetRight,Position) + $hGap, $y,<StaticTextWidth>,<StaticTextHeight>

        Define: ResolutionComboBox1 Using DDWinCtrlDef AsSymbol ResolutionComboBox1
                Fields: TypeName		SComboBox  
						Position		ResolutionText(GetRight,Position) + $hGap,
										ResolutionText(Gettop,Position),
										<ComboBoxWidth> ,<ComboBoxHeight> 
						IActionsText    ~[GetList(ScanResolutionChoices) Get]~
						DActionsText	ACTIONS ( Save Update(ResolutionComboBox2) "Exec(UpdateScanSize(FALSE,FALSE,TRUE))" )
						OActionsText    ~[Save]~
						GenConName		THIS
						GenConField		~ScanResolution~
						Tooltip			Translate( ~Select the resolution to run the scanner at~ )  
                                
	   Define: ScanSizeStatic Using DDWinCtrlDef AsSymbol ScanSizeStatic
			Fields: POSITION		$x,	FilmFormatStaticText(GetBottom,Position) + $vertGap, <StaticWidth>,<StaticTextHeight>
					TEXT			Translate( ~Scan Size~ )
					RIGHTJUSTIFIED	TRUE
					TYPENAME		StaticText

		Define: ScanSizeSlider Using DDWinCtrlDef AsSymbol ScanSizeSlider
			Fields: LCLICKUPACTIONSTEXT ACTIONS ( Save "Exec(OnFormatChange(4, ~Scan size changed.~, FALSE, FALSE, TRUE))" )
					GENCONFIELD		SpeedQuality
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		ScanSizeStatic(GetRight,Position) + $hGap,ScanSizeStatic(GetTop,Position),$ControlWidth,<StaticTextHeight> 
					TOOLTIP			Translate( ~Adjust Scan Size~ )
					TYPENAME		~SLIDER~ 
					UNITS			1;

		Define: ScanSizeField Using DDWinCtrlDef AsSymbol ScanSizeField
			Fields: POSITION		ScanSizeSlider(GetRight,Position) + $hGap,ScanSizeSlider(GetTop,Position),<EditTextWidth>, <EditTextHeight> 
					GENCONFIELD		ScanSizeField
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					TOOLTIP			Translate( ~Scan Size in MB~ )
					TYPENAME		MaskedEditText
					IsEnabled		F
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: ScanSizeUnitsStatic Using DDWinCtrlDef AsSymbol ScanSizeUnitsStatic
			Fields: POSITION		ScanSizeField(GetRight,Position)+5,
									ScanSizeField(GetTop,Position)+3, 15,<StaticTextHeight>
					TEXT			~Mb~
					RIGHTJUSTIFIED	TRUE
					TYPENAME		StaticText;

		Define: ScanSizeWidthLength Using DDWinCtrlDef AsSymbol ScanSizeWidthLength
			Fields: POSITION		ScanSizeUnitsStatic(GetRight,Position) + $hGap,ScanSizeUnitsStatic(GetTop,Position),<StaticWidth>,<StaticTextHeight> 
					GENCONFIELD		ScanSizeWidthLength
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					TOOLTIP			Translate( ~Scan Size~ )
					TYPENAME		StaticText
					IsTabStop		T ;

	   Define: ZoomPrompt Using DDWinCtrlDef AsSymbol ZoomPrompt
			Fields: POSITION		ScanSizeStatic(GetLeft,Position),
									ScanSizeStatic(GetBottom,Position) + $vertGap, <StaticWidth>,<StaticTextHeight>
					TEXT			Translate( ~Optical Zoom~ )
					RIGHTJUSTIFIED	TRUE
					TYPENAME		StaticText

		Define: ZoomSlider Using DDWinCtrlDef AsSymbol ZoomSlider
			Fields: LCLICKUPACTIONSTEXT	ACTIONS ( Save Update(ZoomField) "Exec(OnFormatChange(5, ~Optical zoom changed.~, FALSE, FALSE, TRUE))" )
					GENCONFIELD		OpticalZoom
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		ZoomPrompt(GetRight,Position) + $hGap,ZoomPrompt(GetTop,Position),$ControlWidth,<StaticTextHeight> 
					TOOLTIP			Translate( ~Adjust Optical Zoom~ )
					TYPENAME		~SLIDER~ 
					UNITS			1;

 		Define: ZoomMinusButton Using DDWinCtrlDef AsSymbol ZoomMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeZoom(-1, TRUE))" Update(ZoomSlider) )
					POSITION		ZoomSlider(GetRight,Position) + $hGap, ZoomSlider(GetTop,Position), 20, 20
					TOOLTIP			Translate( ~Decrease the Optical Zoom by 1~ )
					TYPENAME		~Button~ 
					TEXT			~-~

		Define: ZoomPlusButton Using DDWinCtrlDef AsSymbol ZoomPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeZoom(1, TRUE))" Update(ZoomSlider) )
					POSITION		ZoomMinusButton(GetRight,Position) + $hGap, ZoomMinusButton(GetTop,Position) 20 20
					TOOLTIP			Translate( ~Increase the Optical Zoom by 1~ )
					TYPENAME		~Button~ 
					TEXT			~+~

		Define: ZoomZeroButton Using DDWinCtrlDef AsSymbol ZoomZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeZoom(~0~, FALSE))" Update(ZoomSlider) )
					POSITION		ZoomPlusButton(GetRight,Position) + $hGap, ZoomPlusButton(GetTop,Position) 20 20
					TOOLTIP			Translate( ~Set the zoom to zero~ )
					TYPENAME		~Button~ 
					TEXT			~0~;
 
		Define: SetZoomButton Using DDWinCtrlDef AsSymbol SetZoomButton
			Fields:	DACTIONSTEXT	ACTION EXEC ( SetupSetMagButton();OnSetMagButton() )
					POSITION		ZoomZeroButton(GetRight,Position) + $hGap, ZoomPlusButton(GetTop,Position) 32 20
					TOOLTIP			Translate( ~Setup the scanner to the selected format and zoom~ )
					TYPENAME		~Button~ 
					TEXT			~Set~

		Define: ZoomField Using DDWinCtrlDef AsSymbol ZoomField
			Fields: DACTIONSTEXT	ACTIONS ( Save Update(ZoomSlider)  )
					GENCONFIELD		OpticalZoom
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		SetZoomButton(GetRight,Position)+$hGap*3,SetZoomButton(GetTop,Position)+2,30, <EditTextHeight> 
					TOOLTIP			Translate( ~Optical zoom~ )
					TYPENAME		StaticText // MaskedEditText
					IsTabStop		T
					Mask			~#####~
					AllowedChars	~-~
					PromptChar		~ ~ ;

		Define: PositionPrompt Using DDWinCtrlDef AsSymbol PositionPrompt 
			Fields: TypeName		StaticText
					Text			Translate( ~Scan Area~ )
					RIGHTJUSTIFIED	TRUE
					Position		$x,ZoomPrompt(GetBottom,Position) + $vertGap+2, <StaticWidth>,  <StaticTextHeight> ;

		Define: MiddleXField Using DDWinCtrlDef AsSymbol MiddleXField
			Fields: GENCONFIELD		xPos
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		PositionPrompt(Getright,Position) + $hGap,PositionPrompt(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The X position (in percent) of the middle of the area to scan~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: MiddleYField Using DDWinCtrlDef AsSymbol MiddleYField
			Fields: GENCONFIELD		yPos
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		MiddleXField(Getright,Position) + 1,MiddleXField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The Y position (in percent) of the middle of the area to scan~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: ScanWidthField Using DDWinCtrlDef AsSymbol ScanWidthField
			Fields: GENCONFIELD		ScanWidth
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE,TRUE))" )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		MiddleYField(Getright,Position) + 1,MiddleYField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The width (in percent) of the area to scan~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: ScanHeightField Using DDWinCtrlDef AsSymbol ScanHeightField
			Fields: GENCONFIELD		ScanLength
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE,TRUE))" )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		ScanWidthField(Getright,Position) + 1,ScanWidthField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The height (in percent) of the area to scan~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Global( MiddleXField,MiddleYField,ScanWidthField,ScanHeightField );

		Define: TestScanButton Using DDWinCtrlDef AsSymbol TestScanButton 
			Fields: TypeName		Button
					Text			Translate(~Test Scan~)
					Position		ScanHeightField(GetRight,Position) + $hGap,ScanHeightField(GetTop,Position), 70,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( OnTestScan() )
					TOOLTIP			Translate( ~Performs a scan with no rotation to set the scan area~ )

		Define: AdjustScanAreaButton Using DDWinCtrlDef AsSymbol AdjustScanAreaButton 
			Fields: TypeName		Button
					Text			Translate(~Set~)
					Position		TestScanButton(GetRight,Position) + $hGap,TestScanButton(GetTop,Position), 32,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( OnAdjustScanArea( FALSE ) )
					IsEnabled		F
					TOOLTIP			Translate( ~Set the active scan area from the current crop~ )

		Define: AllScanAreaButton Using DDWinCtrlDef AsSymbol AllScanAreaButton 
			Fields: TypeName		Button
					Text			Translate(~All~)
					Position		AdjustScanAreaButton(GetRight,Position) + $hGap,AdjustScanAreaButton(GetTop,Position), 35,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( OnAllScanArea() )
					TOOLTIP			Translate( ~Set the active scan area to the largest possible size~ )

		Define: OverscanPrompt Using DDWinCtrlDef AsSymbol OverscanPrompt 
			Fields: TypeName		StaticText
					Text			Translate( ~Overscan Area~ )
					RIGHTJUSTIFIED	TRUE
					Position		$x-4,PositionPrompt(GetBottom,Position) + 3, 74,  <StaticTextHeight> ;

		Define: OSMiddleXField Using DDWinCtrlDef AsSymbol OSMiddleXField
			Fields: GENCONFIELD		OverScanXPos
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		OverscanPrompt(Getright,Position) + $hGap,OverscanPrompt(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The X position (in percent) of the middle of the overscan area~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					IsEnabled		F
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: OSMiddleYField Using DDWinCtrlDef AsSymbol OSMiddleYField
			Fields: GENCONFIELD		OverScanYPos
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		OSMiddleXField(Getright,Position) + 1,OSMiddleXField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The Y position (in percent) of the middle of the overscan area~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					IsEnabled		F
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: OverScanWidthField Using DDWinCtrlDef AsSymbol OverScanWidthField
			Fields: GENCONFIELD		OverScanWidth
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE,TRUE))" )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		OSMiddleYField(Getright,Position) + 1,OSMiddleYField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The width (in percent) of the overscan area~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					IsEnabled		F
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: OverScanHeightField Using DDWinCtrlDef AsSymbol OverScanHeightField
			Fields: GENCONFIELD		OverScanLength
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE,TRUE))" )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		OverScanWidthField(Getright,Position) + 1,OverScanWidthField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			Translate( ~The height (in percent) of the overscan area for frame detection~ )
					TYPENAME		MaskedEditText
					IsTabStop		T
					IsEnabled		F
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Global( OSMiddleXField,OSMiddleYField,OverScanWidthField,OverScanHeightField );

		Define: AdjustOverscanAreaButton Using DDWinCtrlDef AsSymbol AdjustOverscanAreaButton 
			Fields: TypeName		Button
					Text			Translate(~Set~)
					Position		TestScanButton(GetRight,Position) + $hGap,OverScanHeightField(GetTop,Position),32,<StaticTextHeight>
					DActionsText	ACTION EXEC ( OnAdjustOverscanArea( FALSE ) )
					IsEnabled		F
					TOOLTIP			Translate( ~Set the active overscan area from the current crop~ )

		Define: AllOverScanAreaButton Using DDWinCtrlDef AsSymbol AllOverScanAreaButton 
			Fields: TypeName		Button
					Text			Translate(~All~)
					Position		AdjustOverscanAreaButton(GetRight,Position) + $hGap,AdjustOverscanAreaButton(GetTop,Position),35,<StaticTextHeight>
					DActionsText	ACTION EXEC ( OnAllOverScanArea() )
					IsEnabled		F
					TOOLTIP			Translate( ~Set the active overscan area to the largest possible size~ );

		yPos = 0;

		// TBD - Remove if no complaints that it is missing from HR500
		//Define: FindScannerButton Using DDWinCtrlDef AsSymbol FindScannerButton 
		//Fields:	TypeName		Button
		//			Text			~Search~
		//			Position		$x+5,PositionPrompt(GetBottom,Position)+($vertGap * 3),70,<ButtonHeight>
		//			DActionsText	ACTIONS  ( "Exec(FindScanner(TRUE))" ) 
		//			Tooltip			~Search for scanners on the SCSI Bus~ ;
		//
		//yPos = FindScannerButton(GetBottom,Position);
		Define: CalTimeoutText Using DDWinCtrlDef AsSymbol CalTimeoutText 
				Fields: TypeName        StaticText
						Text            Translate(~Calibration Timeout~)
						RightJustified	TRUE
						Position        $x,PositionPrompt(GetBottom,Position)+($vertGap * 5),100,<StaticTextHeight>

		Define: CalTimeoutField Using DDWinCtrlDef AsSymbol CalTimeoutField 
				Fields: TypeName		MaskedEditText  
						Position		CalTimeoutText(GetRight,Position) + $hGap, CalTimeoutText(Gettop,Position)+2,25,20 
						IActionsText    ~[Get]~
						OActionsText    ~[Save]~
						Mask			~###~
						GenConName      THIS
						GenConField     ~CalibrationTimeout~
						Tooltip         Translate( ~Set the length of time a stored calibration is valid in hours: 3 is recommended~)

		Define: CalTimeoutUnitsText Using DDWinCtrlDef AsSymbol CalTimeoutUnitsText 
				Fields: TypeName        StaticText
						Text            Translate(~Hours~)
						LeftJustified	TRUE
						Position		CalTimeoutField(GetRight,Position) + $hGap, CalTimeoutText(Gettop,Position),40,20 
	
		Define: CalTimeoutCheckBox Using DDWinCtrlDef AsSymbol CalTimeoutCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~IgnoreCalTimeout~
					Text			Translate( ~Retain Stored Calibrations~ )
					IsEnabled		T
					Position		CalTimeoutText(GetLeft,Position) + $hGap*2, CalTimeoutText(GetBottom,Position) + $vGap + 5,150, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(OnIgnoreCalTimeoutCheckbox())" )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~If checked, the stored calibrations will never expire.~ );
		
		Define: IgnoreFrameWidthsCheckBox Using DDWinCtrlDef AsSymbol IgnoreFrameWidthsCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~IgnorePredefinedFrameWidths~
					Text			Translate( ~Ignore Predefined Frame Widths~ )
					IsEnabled		F
					Position		TestScanButton(GetLeft,Position) - 30,
									TestScanButton(GetBottom,Position) + ($vertGap * 3),175, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(SetIgnoreFrameWidthsFlag())"  )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~If checked, predefined frame widths will be ignored.~ );

		Define: TraceCheckBox Using DDWinCtrlDef AsSymbol TraceCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~TraceCalls~
					Text			Translate( ~Trace Calls~ )
					IsEnabled		T
					Position		TestScanButton(GetLeft,Position) - 30,
									IgnoreFrameWidthsCheckBox(GetBottom,Position),80, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(SetTraceCallsFlag())" )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~If checked, scanning calls will be traced and recorded in the session log.~ );

// Save for future testing purposes
		Define: AutoScanWrapCheckBox Using DDWinCtrlDef AsSymbol AutoScanWrapCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~AutoScanWrap~
					Text			~Auto Scan Wrap~
					IsEnabled		F
					IsHidden		T
					Position		TraceCheckBox(GetRight,Position),
									TraceCheckBox(GetTop,Position),98, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					Tooltip			~If checked, auto scan with unscanned frames will repeat nonstop.~;

		Define: TimingCheckBox Using DDWinCtrlDef AsSymbol TimingCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~TimeCalls~
					Text			Translate( ~Time Calls~ )
					IsEnabled		T
					Position		TestScanButton(GetLeft,Position) - 30,
									TraceCheckBox(GetBottom,Position),95, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(SetTimeCallsFlag())" )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~If checked, scanning calls will be timed and recorded in the session log.~ );

		Define: LogActivityCheckBox Using DDWinCtrlDef AsSymbol LogActivityCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~LogActivity~
					Text			Translate( ~Log Activity~ )
					IsEnabled		T
					Position		TestScanButton(GetLeft,Position) - 30,
									TimingCheckBox(GetBottom,Position),95, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(OnLogActivity())" )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~If checked, activity information is written to the session log~ );

		yPos = LogActivityCheckBox(GetBottom,Position);

	}
    return <yPos>;
}


NUMERIC DefineScanTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	Helpfile = ~S_ScanHR.htm~;
    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text			~Scan~
                    TypeName		Tab
                    Tooltip			~Normal tab for scanning~
					HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: INLISTORDER
    {
		ypos = $y;
        ypos = DefineDestinationControls( x,ypos,hGap,vGap );

		Define: ScanSetupsText Using DDWinCtrlDef AsSymbol ScanSetupsText 
            Fields: TypeName		Button
                    Text			~Use Setup~
					DActionsText	ACTIONS ( Exec(LoadSettings(~~,TRUE,FALSE,FALSE,FALSE,TRUE)) Exec(ResyncScanList()) )
					Tooltip			~Activate the selected scanning setup~
					Position		$x,$ypos + ($vGap*6),<StaticTextWidth>,<StaticTextHeight>

	    Define: ScanSetupsComboBox Using DDWinCtrlDef AsSymbol ScanSetupsComboBox 
			Fields: TypeName        ComboBox  
					Position		ScanSetupsText(GetRight,Position) + $hGap,ScanSetupsText(GetTop,Position),288,<ComboBoxHeight>
					IActionsText	ACTION EXEC ( UpdateScanSetupsList( FALSE ) )
					DropDownActionsText	ACTION EXEC ( UpdateScanSetupsList( FALSE ) )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~ScanSetup~
					Mask			~<$[DATABASE FieldTypes].ScanSetupName[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].ScanSetupName[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].ScanSetupName[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].ScanSetupName[DisallowedChars]>~
					Tooltip			Translate(~Select the setup to use for scanning~ )

		Define: EditSetups_Button Using DDWinCtrlDef AsSymbol EditSetups_Button 
			Fields:	TypeName		Button
					Text			Translate( ~?~ )
					Position		VolumeBrowseButton(GetLeft,Position),ScanSetupsComboBox(GetTop,Position),
									20,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnEditSetups() ) 
					Tooltip			Translate( ~Edit the ScanSetups table~ );

		Define: SaveSetup_Button Using DDWinCtrlDef AsSymbol SaveSetup_Button 
			Fields:	TypeName		Button
					Text			Translate( ~Save~ )
					Position		EditSetups_Button(GetRight,Position) + $hGap,EditSetups_Button(GetTop,Position),
									48,<ButtonHeight>
					DActionsText	ACTIONS ( Save "Exec(OnSaveSetup())" ) 
					Tooltip			Translate( ~Save the current settings in the ScanSetups table~ );

		Define: CropsStaticText Using DDWinCtrlDef AsSymbol CropsStaticText 
            Fields: TypeName		Button
                    Text			Translate(~Use Crop~)
					Tooltip			~Activate the selected crop~
					DActionsText	ACTION EXEC  ( UpdateCrop( TRUE ) )
                    Position		$x,SaveSetup_Button(GetBottom,Position) + $vGap*5,<StaticTextWidth>,<StaticTextHeight>

		Define: CropsComboBox Using DDWinCtrlDef AsSymbol CropsComboBox 
			Fields: TypeName        SComboBox  
					Position		CropsStaticText(GetRight,Position) + $hGap,
									CropsStaticText(GetTop,Position),<ComboBoxWidth>,300
					DropDownActionsText	ACTIONS ( "Exec(RefreshCropsComboBox(FALSE))" )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~CropName~
					Tooltip			Translate(~Select from a list of crops~);

		CropFieldWidth = 45;

		Define: TheCropXField Using DDWinCtrlDef AsSymbol TheCropXField
            Fields: GENCONFIELD		CropX
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropXField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		CropsComboBox(Getright,Position) + $hGap,
                                    CropsComboBox(GetTop,Position),
                                    <CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~X position (in percent) of the middle of the crop~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: TheCropYField Using DDWinCtrlDef AsSymbol TheCropYField
            Fields: GENCONFIELD		CropY
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropYField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		TheCropXField(Getright,Position) + 1,
                                    TheCropXField(GetTop,Position),
                                    <CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~Y position (in percent) of the middle of the crop~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: TheCropWidthField Using DDWinCtrlDef AsSymbol TheCropWidthField
            Fields: GENCONFIELD		CropWidth
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropWidthField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		TheCropYField(Getright,Position) + 1,
                                    TheCropYField(GetTop,Position),
                                    <CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~Width (in percent) of the crop ~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: TheCropLengthField Using DDWinCtrlDef AsSymbol TheCropLengthField
            Fields: GENCONFIELD		CropLength
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropLengthField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		TheCropWidthField(Getright,Position) + 1,TheCropWidthField(GetTop,Position),<CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~Length (in percent) of the crop~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: EditCrops_Button Using DDWinCtrlDef AsSymbol EditCrops_Button 
			Fields:	TypeName		Button
					Text			Translate( ~?~ )
					Position		EditSetups_Button(GetLeft,Position),TheCropLengthField(GetTop,Position),20,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnEditCrops() ) 
					Tooltip			Translate( ~Edit the stored crops~ );

		Define: SaveCrop_Button Using DDWinCtrlDef AsSymbol SaveCrop_Button 
			Fields:	TypeName		Button
					Text			Translate( ~Save As~ )
					Position		EditCrops_Button(GetRight,Position)+$hGap,EditCrops_Button(GetTop,Position),
									48,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnSaveCurrentCrop() ) 
					Tooltip			Translate( ~Save the current crop settings in the Crops table~ );


		Define: ResolutionText Using DDWinCtrlDef AsSymbol ResolutionText 
			Fields: TypeName		StaticText
					Text			~Resolution~
					RightJustified	TRUE
					Position		$x,SaveCrop_Button(GetBottom,Position) + ($vGap*3),<StaticTextWidth>,<StaticTextHeight>

        Define: ResolutionComboBox2 Using DDWinCtrlDef AsSymbol ResolutionComboBox2
                Fields: TypeName		SComboBox  
						Position		ResolutionText(GetRight,Position) + $hGap,
										ResolutionText(Gettop,Position),
										<ComboBoxWidth> ,<ComboBoxHeight> 
						IActionsText    ~[GetList(ScanResolutionChoices) Get]~
						DActionsText	ACTIONS ( Save Update(ResolutionComboBox1) "Exec(UpdateScanSize(FALSE,FALSE,TRUE))" )
						OActionsText    ~[Save]~
						GenConName		THIS
						GenConField		~ScanResolution~
						Tooltip			Translate(~Select the resolution to run the scanner at~)
                                
        Define: RotationStaticText Using DDWinCtrlDef AsSymbol RotationStaticText 
            Fields: TypeName		StaticText
                    Text			~Rotation~
					RightJustified	TRUE
                    Position		$X,ResolutionText(GetBottom,Position) + $vGap,<StaticTextWidth>,<StaticTextHeight>

        Define: RotationComboBox Using DDWinCtrlDef AsSymbol RotationComboBox 
            Fields: TypeName		SComboBox  
                    Position		RotationStaticText(Getright,Position) + $hGap,
									RotationStaticText(GetTop,Position),<ComboBoxWidth>, <ComboBoxHeight> 
                    IActionsText    ~[GetList(SaveImageRotationChoices) Get]~
					DActionsText	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE,TRUE))" )
                    OActionsText    ~[Save]~
                    GenConField		~ScanRotation~
                    GenConName		THIS
                    Tooltip			Translate(~Select an angle of rotation~ );

		Define: ScanFromDataBaseButton Using DDWinCtrlDef AsSymbol ScanFromDataBaseButton
			Fields: TypeName		RadioButton
					Position		ResolutionComboBox2(GetRight,Position) + $hGap * 3,
									ResolutionComboBox2(GetTop,Position), 170, 20
					IActionsText	~[Get]~
					DActionsText	~[  
										CheckButton(ScanFromDataBaseButton) 
										UncheckButton(ScanToDataBaseButton)
										Save
										"Exec(EnableSequentialPunches(FALSE) ; ResyncScanList())"
									 ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~ScanFromDataBase~
					RadioTrueValue	TRUE
					Text			Translate(~Scan unscanned frames~)
					Tooltip			Translate(~Frames needing scanning are selected from the database~);

		Define: FramesToScanButton Using DDWinCtrlDef AsSymbol FramesToScanButton 
			Fields: TypeName		Button
					Text			Translate(~?~)
					Position		ScanFromDataBaseButton(GetRight,Position) + $hGap,ScanFromDataBaseButton(GetTop,Position), 20 20
					DActionsText	ACTION EXEC ( OnFramesToScanButton() )
					TOOLTIP			Translate(~View the frames that need scanning~)

	Define: UpdateScanListButton Using DDWinCtrlDef AsSymbol UpdateScanListButton 
			Fields: TypeName		Button
					Text			Translate(~Reload~)
					Position		FramesToScanButton(GetRight,Position) + $hGap,
									FramesToScanButton(GetTop,Position),
									48, 20
					DActionsText	ACTION EXEC ( ResyncScanList() )
					TOOLTIP			Translate(~Load the list of frames to be scanned for the selected Order~)

		Define: ScanToDataBaseButton Using DDWinCtrlDef AsSymbol ScanToDataBaseButton
			Fields: TypeName		RadioButton
					Position		ScanFromDataBaseButton(GetLeft,Position),
									ScanFromDataBaseButton(GetBottom,Position) + $vGap, 170, 20
					IActionsText	~[Get]~
					DActionsText	~[  
										CheckButton(ScanToDataBaseButton) 
										UncheckButton(ScanFromDataBaseButton)
										Save
										"Exec(EnableSequentialPunches(TRUE))"
									 ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~ScanFromDataBase~
					RadioTrueValue	FALSE
					Text			Translate(~Scan every frame~)
					Tooltip			Translate(~Every frame is scanned and information is saved in the database~);

		Define: AllFramesToScanButton Using DDWinCtrlDef AsSymbol AllFramesToScanButton 
			Fields: TypeName		Button
					Text			Translate(~?~)
					Position		ScanToDataBaseButton(GetRight,Position) + $hGap,ScanToDataBaseButton(GetTop,Position), 20,20
					DActionsText	ACTION EXEC ( OpenFramesButton() )
					TOOLTIP			Translate(~View all frames~);

		ypos = RotationComboBox(GetBottom,Position);
    }

    return $ypos;
}


NUMERIC DefineDestinationControls( &x,&y,&hGap,&vGap )
{
    Width = 45;             FieldWidth = 200;

    Define: VolumeText Using DDWinCtrlDef AsSymbol VolumeText 
            Fields: TypeName		StaticText
                    Text			~Path~
					RightJustified	TRUE
                    Position		$x,$y, <StaticTextWidth>,  <StaticTextHeight> ;

    Define: VolumeComboBox Using DDWinCtrlDef AsSymbol VolumeComboBox 
            Fields: TypeName		MaskedEditText	// SComboBox  
					Position		VolumeText(GetRight,Position) + $hGap,VolumeText(Gettop,Position),<FieldWidth> + 85 ,<StaticTextHeight>
                    IActionsText    ~[Get]~
					DActionsText	ACTIONS ( Save "Exec(UpdateFreeDiskSpace())" )
                    OActionsText    ACTIONS ( Save )
                    GenConName		THIS
                    GenConField		~Volume~
					Mask			~<$[DATABASE FieldTypes].Path[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].Path[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].Path[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].Path[DisallowedChars]>~
                    Tooltip			~Select the path to save the images for this order~ ;

	Define: VolumeBrowseButton Using DDWinCtrlDef AsSymbol VolumeBrowseButton 
            Fields: TypeName		Button
                    Text			Translate(~?~)
                    Position		VolumeComboBox(GetRight,Position) + $hGap,VolumeComboBox(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( BrowseForImagePath() )
					Tooltip			~Find the directory to store the scanned images~ ;

	Global(VolumeBrowseButton);

    Define: CustomerText Using DDWinCtrlDef AsSymbol CustomerText 
            Fields: TypeName		StaticText
                    Text			~Customer ID~
					RightJustified	True
                    Position		$x,VolumeText(GetBottom,Position) + $vGap,<StaticTextWidth>,  <StaticTextHeight> ;
                            
    Define: CustomerField Using DDWinCtrlDef AsSymbol CustomerField       
            Fields: TypeName		MaskedEditText
                    Position		CustomerText(GetRight,Position) + <hGap>, CustomerText(GetTop,Position) $FieldWidth $ButtonHeight               
                    GenConName		THIS
                    GenConField		~CustomerID~
                    IActionsText    ~[Get]~
                    DActionsText    ~[Save]~
                    OActionsText    ~[Save]~
					Mask			~<$[DATABASE FieldTypes].CustomerID[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].CustomerID[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].CustomerID[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].CustomerID[DisallowedChars]>~
                    Tooltip			~This is the Customer ID of the order you selected.  If adding a new order, specify the CustomerID here~ ;

	Define: AddCustomerButton Using DDWinCtrlDef AsSymbol AddCustomerButton 
			Fields: TypeName		Button
					Text			~Add Order~
					Position		CustomerField(GetRight,Position) + <hGap>, CustomerField(GetTop,Position), 80,  <buttonHeight>
					DActionsText    ACTION EXEC  ( AddCustomerAndOrder() ) 
					Tooltip         ~Add an order for the specified customer~

	Define: FindCustomerButton Using DDWinCtrlDef AsSymbol FindCustomerButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		VolumeBrowseButton(GetLeft,Position), AddCustomerButton(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( FindCustomer() ) 
                    Tooltip         ~Find the customers who begin with the selected ID~

    Define: OrderText Using DDWinCtrlDef AsSymbol OrderText 
            Fields: TypeName		StaticText
                    Text			~Order ID~
					RightJustified	True
                    Position		$x,CustomerText(GetBottom,Position) + $vGap, <StaticTextWidth>,  <StaticTextHeight> ;
           
    Define: OrderField Using DDWinCtrlDef AsSymbol OrderField       
            Fields: TypeName		MaskedEditText
                    Position		OrderText(GetRight,Position) + <hGap> OrderText(GetTop,Position) $FieldWidth $ButtonHeight          
                    GenConName		THIS
                    GenConField		~Order~
					IActionsText    ~[Get]~
                    DActionsText    ~[Save]~
                    OActionsText    ~[Save]~
					WantReturnKey	~T~
					ReturnKeyActionsText ACTION EXEC ( HandleOrderIDReturnKey(~~) )
					Mask			~<$[DATABASE FieldTypes].OrderID[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].OrderID[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].OrderID[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].OrderID[DisallowedChars]>~
                    Tooltip			~Enter the Order ID you wish to scan for.  You may enter part of the Order ID and press find.~ ;

	Define: FindOrdersNeedingScanningButton Using DDWinCtrlDef AsSymbol FindOrdersNeedingScanningButton 
            Fields: TypeName		Button
                    Text			~Scan Needed~
                    Position		OrderField(GetRight,Position) + <hGap>, OrderField(GetTop,Position),80,<buttonHeight>
                    DActionsText    ACTION EXEC ( FindOrdersNeedingScanning() ) 
                    Tooltip         ~View orders that need scanning~

	Define: SeeScannedImagesButton Using DDWinCtrlDef AsSymbol SeeScannedImagesButton 
            Fields: TypeName		Button
                    Text			~Images~
                    Position		FindOrdersNeedingScanningButton(GetLeft,Position), FindOrdersNeedingScanningButton(GetBottom,Position) + $vGap, 80,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ShowScannedImagesWindow() ) 
                    Tooltip         ~View the images for this roll of the selected order~

	Define: FindOrderButton Using DDWinCtrlDef AsSymbol FindOrderButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		FindOrdersNeedingScanningButton(GetRight,Position) + <hGap>, FindOrdersNeedingScanningButton(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( FindOrder() ) 
                    Tooltip         ~Find all orders that start with the characters of the Order ID~

	Define: ImportButton Using DDWinCtrlDef AsSymbol ImportButton 
            Fields: TypeName		Button
                    Text			~Import~
                    Position		FindOrderButton(GetRight,Position) + $hGap, FindCustomerButton(GetTop,Position), 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ImportFrameData() ) 
                    Tooltip         ~Import frame data for this order~;

	Define: ExportImagesButton Using DDWinCtrlDef AsSymbol ExportImagesButton 
            Fields: TypeName		Button
                    Text			~Export~
                    Position		ImportButton(GetLeft,Position), ImportButton(GetTop,Position) - $vGap - $buttonHeight, 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ExportImages() ) 
                    Tooltip         ~Export Images for this order~;

	ThisPositionX = ImportButton(GetLeft,Position);
	ThisPositionY = ImportButton(GetBottom,Position)+$vGap;

	Define: SetForOrderButton Using DDWinCtrlDef AsSymbol SetForOrderButton 
            Fields: TypeName		Button
                    Text			~Update~
                    Position		<ThisPositionX>, <ThisPositionY>, 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( DisplayStatusChoices(Order,<ThisPositionX>,<ThisPositionY> ) ) 
                    Tooltip         ~Update the scanning information for the entire order~;

	ThisPositionX = SetForOrderButton(GetLeft,Position);
	ThisPositionY = SetForOrderButton(GetBottom,Position)+$vGap;

	Define: SetForRollButton Using DDWinCtrlDef AsSymbol SetForRollButton 
            Fields: TypeName		Button
                    Text			~Update~
                    Position		<ThisPositionX>, <ThisPositionY>, 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( DisplayStatusChoices(Roll,<ThisPositionX>,<ThisPositionY>) ) 
                    Tooltip         ~Update the scanning information for the entire roll~;

	ThisPositionX = SetForRollButton(GetLeft,Position);
	ThisPositionY = SetForRollButton(GetBottom,Position)+$vGap;

	Define: SetFrameOverrideButton Using DDWinCtrlDef AsSymbol SetFrameOverrideButton 
			Fields: TypeName		Button
					IsEnabled		F
					Text			~Override~
					Position		<ThisPositionX>, <ThisPositionY>, 48,  <buttonHeight>
					DActionsText	ACTIONS  ( "Exec(OnOverrideFrameButton( FALSE ))" ) 
					Tooltip			~Override and set the Frame #~;

    Define: RollText Using DDWinCtrlDef AsSymbol RollText 
            Fields: TypeName		StaticText
                    Text			~Roll~
					RightJustified	True
                    Position		$x,OrderText(GetBottom,Position) + $vGap,<StaticTextWidth>,<StaticTextHeight> ;
  
  
    Define: RollField Using DDWinCtrlDef AsSymbol RollField 
        Fields: TypeName		ComboBox  
                Position        RollText(GetRight,Position) + <hGap>,RollText(GetTop,Position),$FieldWidth,$buttonHeight*4               
                DActionsText    ACTIONS  ( Save "Exec(UpdateFrameField())" ) 
				OActionsText	ACTIONS ( Save )
				DropDownActionsText ACTION CALL ( UpdateRollsCombo(FALSE)  )
                GenConName       THIS
                GenConField		~Roll~
				IsTabStop		T
				Mask			~<$[DATABASE FieldTypes].Roll[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].Roll[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].Roll[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].Roll[DisallowedChars]>~
                Tooltip         ~Enter or select a roll~;
              
if 0 
{            
    Define: RollField Using DDWinCtrlDef AsSymbol RollField         
            Fields: TypeName		MaskedEditText
                    Position        RollText(GetRight,Position) + <hGap>,RollText(GetTop,Position),$FieldWidth,$buttonHeight               
                    GenConName		THIS
                    GenConField		~Roll~
                    IActionsText	~[Get]~
                    DActionsText    ~[Save]~
                    OActionsText    ~[Save]~
					Mask			~<$[DATABASE FieldTypes].Roll[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].Roll[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].Roll[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].Roll[DisallowedChars]>~
                    Tooltip			~Enter Roll Number~ ;
}

	Define: FindRollButton Using DDWinCtrlDef AsSymbol FindRollButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		FindCustomerButton(GetLeft,Position), RollField(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( FindRolls() ) 
                    Tooltip         ~Find the roll information for the specified order~

    Define: FrameText Using DDWinCtrlDef AsSymbol FrameText 
            Fields: TypeName		Button
                    Text			~Frame~
					DActionsText    ACTION EXEC ( OpenImage() ) 
                    Tooltip         ~Open the image of the selected Order, Roll, Frame~
                    Position		$x,RollText(GetBottom,Position) + $vGap, <StaticTextWidth>,  <StaticTextHeight> ;
                            
    Define: FrameField Using DDWinCtrlDef AsSymbol FrameField       
            Fields: TypeName        MaskedEditText
                    Position		FrameText(GetRight,Position) + <hGap> FrameText(GetTop,Position) $FieldWidth $buttonHeight               
                    GenConName		THIS
                    GenConField		~Frame~
                    IActionsText	~[Get]~
					DActionsText	ACTIONS ( Save "Exec(UpdateScanButton())" )
                    OActionsText	~[Save]~
					Mask			~<$[DATABASE FieldTypes].Frame[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].Frame[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].Frame[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].Frame[DisallowedChars]>~
                    Tooltip			~Enter Frame Number (0 is valid) ~ ;

   Define: DisplayLastCheckBox Using DDWinCtrlDef AsSymbol DisplayLastCheckBox 
            Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~DisplayLastImage~
					Text			Translate( ~Display~ )
					Position		FrameField(GetRight,Position) + $hGap,FrameField(GetTop,Position), 80, <StaticTextHeight>
					DActionsText	ACTIONS ( Save )
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~If checked, display each image for cropping as it is scanned~ );

	Define: OpenFramesButton Using DDWinCtrlDef AsSymbol OpenFramesButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		FindCustomerButton(GetLeft,Position), FrameField(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( OpenFramesButton() ) 
                    Tooltip         ~Find the order image information for the specified order, roll~ ;

    return FrameText(GetBottom,Position);
}


NUMERIC DefineScanControls( &x,&y,&hGap,&vGap )
{
    Width = 51; bHeight = 27;	

   Define: FocusButton Using DDWinCtrlDef AsSymbol FocusButton 
            Fields: TypeName		Button
					Text			~Focus~
					Position		<x> + 3 <y> <Width> <bHeight>
					DActionsText	ACTIONS  ( "Exec(OnFocusButton( TRUE,Translate(~Do you want to focus the scanner now?  If so, insert the film and select Yes when ready.~)))" ) 
					Tooltip			~Focus the scanner~

	Define: CalibrateButton Using DDWinCtrlDef AsSymbol CalibrateButton 
			Fields:	TypeName		Button
					Text			~Calibrate~
					Position		FocusButton(GetRight,Position) + (<hGap>/2),FocusButton(GetTop,Position),<width>,<bHeight>
					DActionsText	ACTIONS  ( "Exec(OnHR500CalibrateButton( FALSE,FALSE,TRUE ))" ) 
					Tooltip			~Calibrate the scanner~

    Define: PrevScanButton Using DDWinCtrlDef AsSymbol PrevScanButton 
            Fields: TypeName		Button
					Text			~<< 1~
					Position		FocusButton(GetRight,Position)*2 + 17,FocusButton(GetTop,Position),<Width>*3/4 <bHeight>
					DActionsText    ACTIONS  ( "Exec(OnScanButtonSetup() ; OnScanButton(-1,FALSE))" ) 
					Tooltip         ~Scan the previous frame~

    Define: ScanButton Using DDWinCtrlDef AsSymbol ScanButton 
            Fields: TypeName		Button
                    Text			~Scan~
                    Position		PrevScanButton(GetRight,Position) + <hGap>,PrevScanButton(GetTop,Position),<Width>*3/4  <bHeight>
                    DActionsText    ACTIONS  ( "Exec(OnScanButtonSetup() ; OnScanButton(0,FALSE))" ) 
                    Tooltip			~Scan the current frame~

    Define: NextScanButton Using DDWinCtrlDef AsSymbol NextScanButton 
            Fields: TypeName		Button
                    Text			~1 >>~
                    Position		ScanButton(GetRight,Position) + <hGap>,ScanButton(GetTop,Position),<Width>*3/4 <bHeight>
                    DActionsText	ACTIONS  ( "Exec(OnScanButtonSetup() ; OnScanButton(1,FALSE))" ) 
                    Tooltip			~Scan the next frame~

	Define: SaveImageButton Using DDWinCtrlDef AsSymbol SaveImageButton 
			Fields:	TypeName		Button
					Text			~Save~
					Position		NextScanButton(GetRight,Position) + <hGap>,ScanButton(GetTop,Position),<Width>*3/4, <bHeight>
					DActionsText	ACTION EXEC  ( OnSaveImageButton( FALSE ) ) 
					Tooltip			Translate( ~Save the image~ )
					IsEnabled		F;

	Define: AutoScanCheckBox Using DDWinCtrlDef AsSymbol AutoScanCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GENCONFIELD		AutoScan
					Text			~Auto Scan~
					Position		SaveImageButton(GetRight,Position)+3,SaveImageButton(GetTop,Position)-6,<Width> + 20,<StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(OnAutoScan())")
					OActionsText	ACTIONS ( Save )
					Tooltip			~Automatically scan successive frames~;

	Define: CutNegPromptCheckBox Using DDWinCtrlDef AsSymbol CutNegPromptCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GENCONFIELD		CutNegPrompt
					Text			~Prompt~
					Position		AutoScanCheckBox(GetRight,Position)+2,AutoScanCheckBox(GetTop,Position),<Width> + 15,<StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					Tooltip			~Prompt for next frame when scanning cut negatives~;

	Define: AutoSaveToDiskCheckBox Using DDWinCtrlDef AsSymbol AutoSaveToDiskCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~AutoSaveToDisk~
					Text			Translate( ~Auto Save to Disk~ )
					Position		SaveImageButton(GetRight,Position) + 3,SaveImageButton(GetTop,Position)+10,<Width> + 20,<StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~Automatically save the image to disk on every scan~ );

	Define: DigitalIceCheckbox Using DDWinCtrlDef AsSymbol DigitalIceCheckbox
			Fields: TypeName		CheckBox
					Position		AutoSaveToDiskCheckBox(GetRight,Position)+2,AutoSaveToDiskCheckBox(GetTop,Position),80,<StaticTextHeight>
					GenConName		THIS
					GenConField		~DigitalIceCheckbox~
					Text			Translate( ~Digital ICE~ )
					DActionsText	ACTIONS ( Save )
					DActionsText	ACTIONS ( Save "Exec(OnDigitalIceChange())")
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					IsHidden		T
					IsEnabled		F
					Tooltip			Translate( ~If checked, use Digital Ice to remove defects from image on next scan~ );
 
 	IF 0
	{
		Define: ScanCountField Using DDWinCtrlDef AsSymbol ScanCountField
			Fields: GENCONFIELD		ScanCount
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		AutoScanCheckBox(Getright,Position) + $hGap * 2,AutoScanCheckBox(GetTop,Position),35,<EditTextHeight> 
					TOOLTIP			~A Count of the number of scans~
					TYPENAME		MaskedEditText
					Mask			~#####~
					PromptChar		~ ~ ;

		Define: ScanTimeStaticText Using DDWinCtrlDef AsSymbol ScanTimeStaticText 
			Fields: TypeName		StaticText
					GENCONFIELD		LastScanTime
					GENCONNAME		THIS
					Position		ScanCountField(GetRight,Position) + $hGap,ScanCountField(GetTop,Position),50,<StaticTextHeight>
					TOOLTIP			~Time in seconds of the last scan~ ;
	}

    return NextScanButton(GetBottom,Position)-5;
}

VOID RightClick()
{
	if ( KeyState( RSHIFT ) && KeyState( RCONTROL ) )
	{
		dlg( EnableControls,TRUE,IgnoreFrameWidthsCheckBox );

		IgnoreControlCommands = FALSE;
		EnableScanningControls( TRUE );
		FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
	}
	else if ( KeyState( LSHIFT ) && KeyState( LCONTROL ) )
	{
		if ( DlgData( GetNumeric,AutoScan ) )
		{
			dlg( EnableControls,<CurrentControlsState>,ScanButton );
		}
		dlg( ShowControls,TRUE,AutoScanWrapCheckBox,DumpRawIRDataCheckBox );
		dlg( EnableControls,<CurrentControlsState>,AutoScanWrapCheckBox,DumpRawIRDataCheckBox );
	}
}


VOID DefineDialog()
{
    Left = 5; Top = 5;		hGap = 5; vGap = 2;  x = <Left>; y = <Top>;
    TextHeight = 20;        TextWidth = 110;  ButtonHeight = 20;
    EditTextWidth = 50;
    SliderWidth = 170;
    EditTextWidth = 50;		EditTextHeight = 20;
    ButtonWidth = 60;		ButtonHeight = 20;
    ComboBoxWidth = 100;	ComboBoxHeight = 150;

    TabWidth = $DialogWidth - $hGap * 3;  TabHeight = 260;

	ScreenWidth = App( thisApp,MainWindow,GetClientWidth );
	DialogLeft = ($ScreenWidth * .9) - 90 - $DialogWidth;
	DialogTop = 8;

	if ( <DialogLeft> < 0 )
	{
		DialogLeft = ($ScreenWidth * .9) / 2.0;
	}

    Define: ScannerDlgDefinition Using DDWinDef
            Fields: Position			$DialogLeft $DialogTop $DialogWidth $DialogHeight
                    Title				~HR500~ + ~ Scanning Control~
                    TypeName			~Dialog~
					StatusBar			~3 70 10 20~
					WantsMinimizeBox	TRUE
					RClickDnActionsText	ACTION Exec ( RightClick() )
					HActionsText		ACTION SHOWHELPPAGE ( KPISHelpFile "Scanning.htm" )
					OACTIONSTEXT		ACTION EXEC ( CloseDialog() );

    Contains: InListOrder
    {
        x = $left + $hGap;      y = $top + 33;

        Define: TabWindow Using DDWinCtrlDef
                Fields: Position	<left> <top> <TabWidth>  <TabHeight>
                        TypeName	TabCtrl
                        Text		~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~
        Contains: InListOrder
        {
			tab = 0; 
            DefineScanTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

			DefineHR500ColorSetupTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

			DefineHR500AdvancedColorSetupTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

            DefineFileTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

		    DefineFilterTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

		    DefineTransportSetupTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

            DefineScannerTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

		    DefineMiscTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );
        }

		y += $TabHeight - 27;

		IF 0
		{
			Define: ScanProgressControl Using DDWinCtrlDef AsSymbol ScanProgressControl
				Fields:	GENCONFIELD		Progress
						GENCONNAME		This
						POSITION		$x,$y,<TabWidth> - $hGap*2,8
						TEXT			~Progress~
						TYPENAME		~Progress~ 
						IACTIONSTEXT	ACTIONS ( Get )
						OACTIONSTEXT	ACTIONS ( Save ) ;
		}

		y = DefineScanControls( Left,y,hGap,vGap ) +  10;

		BottomWithoutTransport = <y> + 25 + 3;

        y = DefineTransportControl( Left,y,hGap,vGap,ButtonHeight ) + 8;

		BottomWithTransport = <y> + 20 + 5;

		y = DefineLoadUnloadControl( Left,y,hGap,vGap,ButtonHeight ) + 30;

		BottomWithLoadUnload = <y>;

		Global( BottomWithoutTransport,BottomWithTransport,BottomWithLoadUnload,DialogWidth );
    };

    ScannerDlgDefinition( Set,Position,~<DialogLeft> <DialogTop> <DialogWidth> <BottomWithOutTransport>~ );

    Global( ScannerDlgDefinition );
}


NUMERIC OnFileTypeChange(LoadingSettings)
{
	dlg( GetInput );

	JPEGEnabled = SimilarStr( ~<$con.dlgData[SaveFileType]>~,JPEG ) || SimilarStr( ~<$con.dlgData[SaveFileType]>~,EXIF );
	 
	TIFFEnabled = SimilarStr( ~<$con.dlgData[SaveFileType]>~,TIFF );

	dlg( EnableControls,<JPEGEnabled>,JPEGQualitySlider,JPEGQualityField );

	if ( !<LoadingSettings> )
	{
		TheFileExtension = ~~;

		if ( <TIFFEnabled> ) { TheFileExtension = ~.tif~; }
		if ( <JPEGEnabled> ) { TheFileExtension = ~.jpg~; }

		dlg( SetString,~<TheFileExtension>~,FileExtension );
	}

	return TRUE;
}


NUMERIC Normalize_BRGB()
{
	dlg( GetInput );

	DlgData( GetValues,brightnessOverride,Brightness,redOverride,Red,greenOverride,Green,blueOverride,Blue );

	delta = 0 - <Red>;
	Brightness = <Brightness> + <delta>;
	Red = 0;
	Green = <Green> - <delta>;
	Blue = <Blue> - <delta>;

	DlgData( SetValues,brightnessOverride,~<Brightness>~,redOverride,~0~,greenOverride,~<Green>~,blueOverride,~<Blue>~ );
	dlg( SetStrings,brightnessOverride,~<Brightness>~,redOverride,~0~,greenOverride,~<Green>~,blueOverride,~<Blue>~ );

	//dlg( Update );
	return TRUE;
}


NUMERIC OnDRGB_2_BRGBC( buttonPressed )	// USER PRESSED THE CALC BUTTON OR AUTOCALC AND THE FRAME HASN'T CHANGED
{
	if ( <buttonPressed> )
	{
		dlg( GetInput );
	}

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not access the shared database. <theErr>~ ) );
	}

	// 02/11/02 DPT
	// Added this code (similar to HandleDRGB) to normalize the density
	// if the checkbox is selected.
	a_D = a_R = a_G = a_B = 0;
	t_D = t_R = t_G = t_B = 0;
	DlgData( GetValues,dDensity,a_D,dRed,a_R,dGreen,a_G,dBlue,a_B );
	
	UseAnalyzerDRGBValues = DlgData( GetNumeric,UseAnalyzerDRGBValues );
	if ( <UseAnalyzerDRGBValues> )
	{
		t_D = <t_D> + <a_D>;
		t_R = <t_R> + <a_R>;
		t_G = <t_G> + <a_G>;
		t_B = <t_B> + <a_B>;
	}
	else
	{
		t_D = t_R = t_G = t_B = 0;
	}

	NormalizeDRGB(t_D,t_R,t_G,t_B);
	DlgData( SetValues,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );
	dlg( SetStrings,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );

	doCalc = TRUE;

	if ( !<buttonPressed> )
	{
		LockScannerOffsets = DlgData( GetNumeric,LockScannerOffsets );
		if ( <LockScannerOffsets> )
		{
			doCalc = FALSE;
		}

		if ( !<UseAnalyzerDRGBValues> )
		{
			a_D = a_R = a_G = a_B = 0;
			c_D = c_R = c_G = c_B = 0;
			o_Br = o_R = o_G = o_B = o_C = 0;
			t_D = t_R = t_G = t_B = 0;
			
			doCalc = FALSE;
		}

		AutoDRGBAdjustments = DlgData( GetNumeric,AutoDRGBAdjustments );
		if ( !<AutoDRGBAdjustments> )
		{
			doCalc = FALSE;
		}
	}

	if ( !<doCalc> )
	{
		return TRUE;
	}

	if ( Calc_BRGBC_From_BRGBC( dBase,<doCalc>,TRUE ) )
	{
		return dlg( SetStatus,0,Translate( ~Selected Analyzer DRBG values were used to set the color balance~ ) );
	}

	dlg( SetStatus,0,Translate( ~Could not calculate a scan color balance~ ) );
	return FALSE;
} 


NUMERIC Calc_BRGBC_From_BRGBC( &dBase, DoCalc, DisplayDRBGError )
{
	DlgData( GetValues,dDensity,Density,dRed,Red,dGreen,Green,dBlue,Blue,DRGBRefs,Name );

	Density = Pin( ~<Density>~,0,255 );
	Red = Pin( ~<Red>~,0,255 );
	Green = Pin( ~<Green>~,0,255 );
	Blue = Pin( ~<Blue>~,0,255 );

	dlg( SetStrings,dDensity,~<Density>~,dRed,~<Red>~,dGreen,~<Green>~,dBlue,~<Blue>~ );

	if ( ~<Name>~ == ~~ )
	{
		return dlg( SetStatus,0,Translate( ~No DRGB reference information is available.~ ) );
	}

	Fields = ~rfDensity,rfRed,rfGreen,rfBlue,Brightness,RedOffset,GreenOffset,BlueOffset,ContrastOffset,UseSlope,SlopeLut~;
	Query = ~Select <Fields> From DRGBRefs Where Name = '<Name>'~;

	if ( !dBase( GetValuesFor,~<Query>~,<Fields> ) )
	{
		if ( <DisplayDRBGError> )
		{
			Warning( Translate( ~Could not find <Name> in DRGBRefs.~ ) );
		}
		return FALSE;
	}

	DlgData( SetValues,rDensity,~<rfDensity>~,rRed,~<rfRed>~,rGreen,~<rfGreen>~,rBlue,~<rfBlue>~ );

	DlgData( SetValues,rfBrightness,<Brightness>,rfRed,~<RedOffset>~,rfGreen,~<GreenOffset>~,rfBlue,~<BlueOffset>~,rfContrast,~<ContrastOffset>~ );

	SlopeLutFile = Numeric( ~<UseSlope>~ ) ? ~<SlopeLut>~ : ~~;

	DlgData( Set,SlopeLutFile,~<SlopeLutFile>~ );

	if ( !LoadSlopeLut( ~<SlopeLutFile>~ ) )
	{	return FALSE;	}

	if ( <DoCalc> )
	{
		DRGB_2_BRGBC(DlgData);

		//CurrentBrightness = DlgData(GetNumeric,brightnessOverride);
		//DlgData( SetValues,brightnessOverride,<CurrentBrightness> + 1 );	// TEMPORARY

		DlgData( GetValues,brightnessOverride,Brightness,redOverride,Red,greenOverride,Green,blueOverride,Blue,contrastOverride,Contrast );

		dlg( SetStrings,brightnessOverride,~<Brightness>~,redOverride,~<Red>~,greenOverride,~<Green>~,blueOverride,~<Blue>~,contrastOverride,~<Contrast>~ );
	}

	return TRUE;
}

NUMERIC Reverse_Calc_BRGBC_From_BRGBC( &dBase, DoCalc, DisplayDRBGError )
{
	DlgData( GetValues,brightnessOverride,Brightness,redOverride,Red,greenOverride,Green,blueOverride,Blue,contrastOverride,Contrast,DRGBRefs,Name );

	Brightness = Pin( ~<Brightness>~,-700,700 );
	Red = Pin( ~<Red>~,-700,700 );
	Green = Pin( ~<Green>~,-700,700 );
	Blue = Pin( ~<Blue>~,-700,700 );
	Contrast = Pin( ~<Contrast>~,-100,100 );

	dlg( SetStrings,brightnessOverride,~<Brightness>~,redOverride,~<Red>~,greenOverride,~<Green>~,blueOverride,~<Blue>~,contrastOverride,~<Contrast>~ );

	if ( ~<Name>~ == ~~ )
	{
		return dlg( SetStatus,0,Translate( ~No DRGB reference information is available.~ ) );
	}

	Fields = ~rfDensity,rfRed,rfGreen,rfBlue,Brightness,RedOffset,GreenOffset,BlueOffset,ContrastOffset,UseSlope,SlopeLut~;
	Query = ~Select <Fields> From DRGBRefs Where Name = '<Name>'~;

	if ( !dBase( GetValuesFor,~<Query>~,<Fields> ) )
	{ 
		if ( <DisplayDRBGError> )
		{
			return Warning( Translate( ~Could not find <Name> in Reverse DRGBRefs.~ ) );
		}
	}

	DlgData( SetValues,rDensity,~<rfDensity>~,rRed,~<rfRed>~,rGreen,~<rfGreen>~,rBlue,~<rfBlue>~ );

	DlgData( SetValues,rfBrightness,<Brightness>,rfRed,~<RedOffset>~,rfGreen,~<GreenOffset>~,rfBlue,~<BlueOffset>~,rfContrast,~<ContrastOffset>~ );

	SlopeLutFile = Numeric( ~<UseSlope>~ ) ? ~<SlopeLut>~ : ~~;

	DlgData( Set,SlopeLutFile,~<SlopeLutFile>~ );

	if ( !LoadSlopeLut( ~<SlopeLutFile>~ ) )
	{	return FALSE;	}

	if ( <DoCalc> )
	{
		return Reverse_DRGB_2_BRGBC(DlgData);
	}

	return TRUE;
}

NUMERIC OnResetToSBAButton()
{
	dlg( GetInput );

	SBARedAdjust = SizzleControl( GetNumeric,SBARedAdjust );
	SBAGreenAdjust = SizzleControl( GetNumeric,SBAGreenAdjust );
	SBABlueAdjust = SizzleControl( GetNumeric,SBABlueAdjust );
	SBAFleshAdjust = SizzleControl( GetNumeric,SBAFleshAdjust );

	sbaPlus = DlgData( GetNumeric,UseSBAPlus );

	if ( <SBARedAdjust> == 0 && <SBAGreenAdjust> == 0 && <SBABlueAdjust> == 0 )
	{
		OnResetTo0Button( TRUE );
		UseImageOverrides = FALSE;
		SizzleControl( Set,ForceSBA,TRUE );
	}
	else if ( <SBAFleshAdjust> == 0 && <sbaPlus> )
	{
		OnResetTo0Button( TRUE );
		UseImageOverrides = FALSE;
		SizzleControl( Set,ForceSBA,TRUE );
	}
	else
	{				
		SBABrightnessAdjust = Min(<SBARedAdjust>, <SBAGreenAdjust>, <SBABlueAdjust>);
		SBARedAdjust = <SBARedAdjust> - <SBABrightnessAdjust>;
		SBAGreenAdjust = <SBAGreenAdjust> - <SBABrightnessAdjust>;
		SBABlueAdjust = <SBABlueAdjust> - <SBABrightnessAdjust>;

		if ( <sbaPlus> )
		{
			SBABrightnessAdjust = <SBABrightnessAdjust> + <SBAFleshAdjust>;
		}

		DlgData( SetValues,brightnessOverride,~<SBABrightnessAdjust>~,
			redOverride,~<SBARedAdjust>~,greenOverride,~<SBAGreenAdjust>~,
			blueOverride,~<SBABlueAdjust>~ );
		dlg( SetStrings,brightnessOverride,~<SBABrightnessAdjust>~,
			redOverride,~<SBARedAdjust>~,greenOverride,~<SBAGreenAdjust>~,
			blueOverride,~<SBABlueAdjust>~ );

		SizzleControl( Set,ForceSBA,FALSE );
	}

	return TRUE;
} 

NUMERIC OnResetTo0Button( resetContrast )
{
	if ( <resetContrast> )
	{
		dlg( SetStrings,brightnessOverride,~0~,
			redOverride,~0~,greenOverride,~0~,
			blueOverride,~0~,contrastOverride,~0~ );
	}
	else
	{
		dlg( SetStrings,brightnessOverride,~0~,
			redOverride,~0~,greenOverride,~0~,
			blueOverride,~0~ );
	}

	return TRUE;
} 

NUMERIC OnColorChange()
{
	if ( SizzleControl( GetNumeric,ScanObj ) )
	{
		dlg( EnableControls,TRUE,ReapplyButton );
		if (!DlgData(GetNumeric,UseAnalyzerDRGBValues))
		{
			dlg( EnableControls,TRUE,ReapplySBAButton,ReapplyAdvancedColorButton );
		}
	}
	else
	{
		dlg( EnableControls,FALSE,ReapplyButton,ReapplySBAButton,ReapplyAdvancedColorButton );
	}

	return TRUE;
}

NUMERIC OnSbaPlus()
{
	dlg( GetInput );
	SBAplus = DlgData( GetNumeric,UseSBAPlus );
	SizzleControl( Set,UseSBAPlus,<SBAplus> );

	if ( <SBAplus> )
	{
		dlg(SetCheck, TRUE, ColorBrightnessButton);
		dlg(SetCheck, FALSE, BrightnessOnlyButton);
		dlg(SetCheck, FALSE, ColorOnlyButton);
		dlg(Save, ColorBrightnessButton);
		dlg(Save, BrightnessOnlyButton);
		dlg(Save, ColorOnlyButton);

		dlg( EnableControls,FALSE,ColorBrightnessButton,BrightnessOnlyButton,ColorOnlyButton );
	}
	else
	{
		dlg( EnableControls,TRUE,ColorBrightnessButton,BrightnessOnlyButton,ColorOnlyButton );
	}
	return TRUE;
}

NUMERIC OnSharpenChange()
{
	AdaptiveSharpen = DlgData( GetNumeric,AdaptiveSharpen );
	if ( <AdaptiveSharpen> == TRUE )
	{
		dlg( EnableControls,TRUE,
			SharpenLimitField,SharpenLimitSlider,SharpenLimitMinusButton,SharpenLimitZeroButton,SharpenLimitPlusButton,
			SharpenThresholdField,SharpenThresholdSlider,SharpenThresholdMinusButton,SharpenThresholdZeroButton,SharpenThresholdPlusButton,
			SharpenBlurAmountField,SharpenBlurAmountSlider,SharpenBlurAmountMinusButton,SharpenBlurAmountZeroButton,SharpenBlurAmountPlusButton );
	}
	else
	{
		dlg( EnableControls,FALSE,
			SharpenLimitField,SharpenLimitSlider,SharpenLimitMinusButton,SharpenLimitZeroButton,SharpenLimitPlusButton,
			SharpenThresholdField,SharpenThresholdSlider,SharpenThresholdMinusButton,SharpenThresholdZeroButton,SharpenThresholdPlusButton,
			SharpenBlurAmountField,SharpenBlurAmountSlider,SharpenBlurAmountMinusButton,SharpenBlurAmountZeroButton,SharpenBlurAmountPlusButton );
	}

	if ( SizzleControl( GetNumeric,ScanObj ) )
	{
		dlg( EnableControls,TRUE,ReapplyFiltersButton );
	}
	else
	{
		dlg( EnableControls,FALSE,ReapplyFiltersButton );
	}

	return TRUE;
}

NUMERIC OnNoiseReductionChange()
{
	if ( SizzleControl( GetNumeric,ScanObj ) )
	{
		dlg( EnableControls,TRUE,ReapplyFiltersButton );
	}
	else
	{
		dlg( EnableControls,FALSE,ReapplyFiltersButton );
	}

	return TRUE;
}

VOID ChangeSharpenAmount( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenAmount ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenAmount );
}

VOID ChangeSharpenLimit( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenLimit ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenLimit );
}

VOID ChangeSharpenThreshold( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenThreshold ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenThreshold );
}

VOID ChangeSharpenBlurAmount( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenBlurAmount ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenBlurAmount );
}

VOID ChangeNoiseReductionAmount( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,NoiseReductionAmount ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,NoiseReductionAmount );
}

NUMERIC OnApplySBAButton()
{
	OnResetToSBAButton();
	
	return OnReapplyButton();
}

NUMERIC OnReapplyButton()
{
	if ( !Defined( Scanner ) )
	{
		return FALSE;
	}

	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame );
	DlgData( Set,DisplayLastImage,TRUE );
	dlg( SetCheck,TRUE,DisplayLastCheckBox );
	dlg( Save,DisplayLastCheckBox );
	//dlg( Update );

	Ext = ~<$con.DlgData[FileExtension]>~;

	ImagesPath = CreateImagePath( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<Ext>~ );

	ImagesPath = MakePath( ~<ImagesPath>~ );

	if ( !BroadcastMessageToAllViews( CanReleaseImage,~<ImagesPath>~ ) )
		{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }

	if ( !DlgData( GetNumeric,ScanFromDatabase ) )
	{
		if ( !BroadcastMessageToAllViews( ReleaseImage,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}
	else
	{
		if ( !BroadcastMessageToAllViews( ReleaseThumbnail,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}

	if ( !<SaveButtonDisabled> )
	{
		dlg( EnableControls,TRUE,SaveImageButton );
	}
	else
	{
		DisableControlsWhileSaving = TRUE;
	}

	SetupTheScanner(FALSE,FALSE);

	EnableScanningControls( FALSE );

	ReapplyingScannerOffsets = TRUE;

	dlg( GetStrings,Frame,Frame );
	if (~<Frame>~ == ~<lastFrameScanned>~ )
	{
		SizzleControl( Set,RescanningFrame,TRUE );
	}
	else
	{
		SizzleControl( Set,RescanningFrame,FALSE );
	}
	lastFrameScanned = ~<Frame>~;

	Scanner( ReapplyAsync,SizzleControl );

	return TRUE;
} 

NUMERIC OnSaveImageButton( CleanupScanObject )
{
	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame );

	Ext = ~<$con.DlgData[FileExtension]>~;

	ImagesPath = CreateImagePath( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<Ext>~ );
	ImagesPath = MakePath( ~<ImagesPath>~ );

	if ( !BroadcastMessageToAllViews( CanReleaseImage,~<ImagesPath>~ ) )
		{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }

	if ( !DlgData( GetNumeric,ScanFromDatabase ) )
	{
		if ( !BroadcastMessageToAllViews( ReleaseImage,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}
	else
	{
		if ( !BroadcastMessageToAllViews( ReleaseThumbnail,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}

	if ( !Files( Delete,~<ImagesPath>~ ) )
	{ 
		errorMsg = GetLastErrorMsg();
		return Warning( Translate( ~Could not delete <ImagesPath>.  <errorMsg>~ ) );
	}

	DisableControlsWhileSaving = TRUE;
	dlg( EnableControls,FALSE,SaveImageButton );
	SaveButtonDisabled = TRUE;
	ReadyForSave( <CleanupScanObject> );

	return TRUE;
}


NUMERIC ReadyForSave( CleanupScanObject )
{
	WaitingForOverScan = SizzleControl( GetNumeric,WaitingForOverScan );
	WaitingForDisplay = SizzleControl( GetNumeric,WaitingForDisplay );
	if ( ( !<WaitingForOverScan> ) && ( !<WaitingForDisplay> ) )
	{
		dlg( EnableControls,FALSE,SaveImageButton );
		SaveButtonDisabled = TRUE;
		SaveImage( <CleanupScanObject> );
		Return TRUE;
	}
	Return FALSE;
}		



IF 0
{
	Reference DRGB  64	0	0	0		BRGBC  -1   0   3   4   2

					46	0	0	0		10	0   3	5    2
					83	1	2	0	    -14	2   5	4    2	(-13 1 4 4 2)
					110	8	11  0	    -30	5  10	4    2
					94	10	10	0	    -20	7  10	4    2	(-19 6 9 4 2)
					69	6	5   0       -4	4	6   4    2
					45	3	5   0		12	0	5   4    2
					30	9	5   7		24	0	3	6	 2
}


VOID OnEditDRGBRefs()
{
	Query = STR ( SELECT * From DRGBRefs Order By Name );

	Actions = ACTION Doc ( ~DRGBRefs~ OpenOnce DRGBRefsDoc "Init( ~~,~<Query>~ );" );

	PerformActions( Actions );
}


VOID OnEditCrops()
{
	Query = STR ( SELECT * From Crops Order By Name );

	Actions = ACTION Doc ( ~Crops~ OpenOnce CropsDoc "Init( ~~,~<Query>~ );" );

	PerformActions( Actions );
}


VOID OnSaveCurrentCrop()
{
	Query = STR ( SELECT * From Crops Order By Name );

	dlg( GetInput );

	DlgData( GetValues,CropX,cX,CropY,cY,CropWidth,cW,CropLength,cL );
	DlgData( GetValues,XPOS,sX,YPOS,sY,SCANWIDTH,sW,SCANLENGTH,sL,ScanRotation,ScanRotation );
	DlgData( GetValues,Format,Format,OpticalZoom,OpticalZoom );
	DlgData( GetValues,OverScanXPos,osX,OverScanYPos,osY,OverScanWidth,osW,OverScanLength,osL);

	Actions = ACTION Doc ( ~Crops~ OpenOnce CropsDoc "AddNewCrop( ~~,~<Query>~,<cX>,<cY>,<cW>,<cL>,<sX>,<sY>,<sW>,<sL>,<ScanRotation>,~<Format>~,<OpticalZoom>,<osX>,<osY>,<osW>,<osL> );" );

	PerformActions( Actions );
}


NUMERIC OnSaveSetup()
{
	dlg( GetInput );

	ScanSetupName = ~<$con.DlgData[ScanSetup]>~;

	if ( ~<ScanSetupName>~ == ~~ )
	{
		return Warning( Translate( ~No setup profile name specified in setup field~ ) );
	}

	Key = ~Name = '<$con.DlgData[ScanSetup]>'~;

	Query = ~Select * From ScanSetups Where <Key>~;

	if ( PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		if ( !List( GetFirst,Item ) )
		{
			if ( MessageBox( Translate(~Create a new setup called <$con.DlgData[ScanSetup]>?~),YESNO ) != YES )
			{
				return FALSE;
			}

			List( AddNew,Item );
			Item( Set,Name,~<$con.DlgData[ScanSetup]>~ );
		}
		else
		{
			if ( MessageBox( Translate(~Update the existing setup called <$con.DlgData[ScanSetup]>?~),YESNO ) != YES )
			{
				return FALSE;
			}
		}

		if ( ~<DisplayUnits>~ != ~Inches~ )
		{
			oldXSliderIFactor = DlgData( GetNumeric,XSliderIFactor );
			XSliderIFactor = <DisplayUnits>ToInches( <oldXSliderIFactor> );
			oldFixedNonFdaAdv = DlgData( GetNumeric,FixedNonFDAAdvance );
			FixedNonFDAAdvance = <DisplayUnits>ToInches( <oldFixedNonFdaAdv> );

			DlgData( SetValues,XSliderIFactor,<XSliderIFactor>,FixedNonFDAAdvance,<FixedNonFDAAdvance> );
		}
		
		oldMinGap = DlgData( GetNumeric,MinInterframeGap );
		minGap = <DisplayUnits>ToLines( <oldMinGap> );
		minGap = Round( <minGap> );
		DlgData( SetValues,MinInterframeGap,~<minGap>~ );

		if ( !Item( UpdateFrom,DlgData ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
			return Warning( Translate( ~Could not update ScanSetups record where <Key>. <theErr>~ ) );
		}
		
		if ( ~<DisplayUnits>~ != ~Inches~ )
		{
			DlgData( SetValues,XSliderIFactor,<oldXSliderIFactor>,FixedNonFDAAdvance,<oldFixedNonFdaAdv> );
		}

		DlgData( SetValues,MinInterframeGap,~<oldMinGap>~ );
		
		return List( Update );
	}

	List( GetErrorDescription,0,theErr );
	return Warning( Translate( ~Query Failed: <Query>. <theErr>~ ) );

	// The old way

	Key = ~ScannerType = '<$con.DlgData[ScannerType]>'~;
	Query = ~Select * From ScanSetups Where <Key> Order By Name~;
	
	GenCon( ScanSetupToAdd,IsCopyOf,dlgData );

	ScanSetupToAdd( Set,Name,~<$con.DlgData[ScanSetup]>~ );

	ScanSetupToAdd( Hang,~[GenCons]~,ScanSetupToAdd );

	Actions = ACTION Doc ( ~ScanSetups~ OpenOnce ScanSetupsDoc "AddSetup( ~Scan Setups~,~<Query>~,ScanSetupToAdd );" );

	PerformActions( Actions );

	return TRUE;
}


VOID OnEditSetups()
{
	Key = ~ScannerType = '<$con.DlgData[ScannerType]>'~;
	Query = ~Select * From ScanSetups Where <Key> Order By Name~;

	Actions = ACTION Doc ( ~ScanSetups~ OpenOnce ScanSetupsDoc "Init( ~Scan Setups~,~<Query>~ );" );

	PerformActions( Actions );
}


NUMERIC LoadSettings( SetupName, ForceLoad, CheckIfLoaded, IgnoreFilmDriveEnable, LoadDefaults, DoCalibration )
{
	retval = TRUE;
	if ( !DefinedAndNotNull( SetupName ) )
	{ 
		dlg( GetInput );
		SetupName = ~<$con.dlgData[ScanSetup]>~;
	}

	if ( ( ~<SetupName>~ == ~~ ) || ( !<ForceLoad> && ( ~<SetupName>~ == ~<LastSetupName>~ ) ) )
	{
		if ( !<ForceLoad> )
		{
			dlg( SetStatus,0,Translate( ~No settings changes required~ ) );
			return TRUE;
		}
		else
		{
			dlg( SetStatus,0,Translate( ~No settings were loaded~ ) );
			if ( !<LoadDefaults> )
			{
				return Warning( Translate( ~Please select a Setup first.~ ) );
			}
		}
		if ( !<IgnoreFilmDriveEnable> )
		{
			UpdateFilmDriveSetupsCombo();
			dlg( SetStrings,FilmDriveEnabled,~0~ );
		}
	}
	else
	{
		Key = ~Name = '<SetupName>' AND ScannerType = '<$con.DlgData[ScannerType]>'~;
		Query = ~Select * from ScanSetups Where <Key>~;

		if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate( ~Query Failed: <Query>. <theErr>~ ) );
		}

		if ( !List( GetFirst,Setup ) )
		{
			return Warning( Translate( ~Could not find a setup named <SetupName>~ ) );
		}

		// Disable the current vendor drive settings before changing
		// to a new drive/setup combo

		GetFilmDriveVendor();
		OldFDVendor = ~<FDVendor>~;

		SaveGotoPunchNumber = ~<$con.dlgData[GotoPunchNumber]>~;
		LastFrame = ~~;
		if ( !<IgnoreFilmDriveEnable> )
		{
			dlg( SetStrings,FilmDriveEnabled,~0~ );
			EnableFilmDriveChanged(<CheckIfLoaded>,TRUE,TRUE);
		}

		if ( <IgnoreFilmDriveEnable> )
		{
			SaveScanFromDatabase = ~<$con.dlgData[ScanFromDatabase]>~;
			SaveFilmDriveVendor = ~<$con.dlgData[FilmDriveVendor]>~;
			SaveFilmDriveSetup = ~<$con.dlgData[FilmDriveSetup]>~;
			SaveFilmDriveEnabled = ~<$con.dlgData[FilmDriveEnabled]>~;
			SaveTension = ~<$con.dlgData[Tension]>~;
			SaveAutoScan = ~<$con.dlgData[AutoScan]>~;
			SaveAutoSaveToDisk = ~<$con.dlgData[AutoSaveToDisk]>~;
			SaveIgnoreXAdjustments = ~<$con.dlgData[IgnoreXAdjustments]>~;
			SaveCutNegPrompt = ~<$con.dlgData[CutNegPrompt]>~;
		}

		if ( !Setup( UpdateIn,dlgData ) )
		{
			return Warning( Translate( ~Failed to update the dialog from <SetupName>~ ) );
		}

		// Use previous values, so that drive is not changed/detensioned, etc
		if ( <IgnoreFilmDriveEnable> )
		{
			DlgData( SetValues,
					 AutoScan, <SaveAutoScan>,
					 ScanFromDatabase, <SaveScanFromDatabase>,
					 FilmDriveVendor, ~<SaveFilmDriveVendor>~,
					 FilmDriveSetup, ~<SaveFilmDriveSetup>~,
					 FilmDriveEnabled, <SaveFilmDriveEnabled>,
					 FilmTension, <SaveTension>,
					 AutoScan, <SaveAutoScan>,
					 IgnoreXAdjustments, <SaveIgnoreXAdjustments>,
					 CutNegPrompt, <SaveCutNegPrompt> );
			dlg( SetStrings,
					 AutoScan, <SaveAutoScan>,
					 ScanFromDatabase, <SaveScanFromDatabase>,
					 FilmDriveVendor, ~<SaveFilmDriveVendor>~,
					 FilmDriveSetup, ~<SaveFilmDriveSetup>~,
					 FilmDriveEnabled, <SaveFilmDriveEnabled>,
					 FilmTension, <SaveTension>,
					 AutoScan, <SaveAutoScan>,
					 IgnoreXAdjustments, <SaveIgnoreXAdjustments>,
					 CutNegPrompt, <SaveCutNegPrompt> );
		}
		else
		{
			// work around for legacy film drive vendor name in setup
			if ( ~<$pcon.Setup[FilmDriveVendor]>~ == ~HR500~ )
			{
				dlg( SetStrings,FilmDriveVendor,~Long Roll~ );
			} 
			else if ( ~<$pcon.Setup[FilmDriveVendor]>~ == ~None~ )
			{
				dlg( SetStrings,FilmDriveVendor,~Cut Neg~ );
			}
			dlg( Save,FilmDriveVendor );
		}

		if ( <DisplayUnits> != ~Inches~ )
		{
			XSliderIFactor = NUMERIC( ~<$pcon.Setup[XSliderIFactor]>~ );
			XSliderIFactor = InchesTo<DisplayUnits>( <XSliderIFactor> );

			FixedNonFdaAdv = NUMERIC( ~<$pcon.Setup[FixedNonFDAAdvance]>~ );
			FixedNonFdaAdv = InchesTo<DisplayUnits>( <FixedNonFdaAdv> );

			DlgData( SetValues,XSliderIFactor,~<XSliderIFactor>~,FixedNonFDAAdvance,~<FixedNonFdaAdv>~ );
		}

		minGap = NUMERIC( ~<$pcon.Setup[MinInterframeGap]>~ );
		minGap = LinesTo<DisplayUnits>( <minGap> );
		DlgData( SetValues,MinInterframeGap,~<minGap>~ );

		DlgData(Get,DigitalIceType,DigitalIceType);
		if (~<DigitalIceType>~ != ~<kDICELevelLow>~ && ~<DigitalIceType>~ != ~<kDICELevelHigh>~ )
		{
			DlgData( Set,DigitalIceType,<kDICELevelLow> );
		}
		
		dlg( Update );

		FilmDriveSetup = ~<$con.dlgData[FilmDriveSetup]>~;
		UpdateFilmDriveSetupsCombo();
		dlg( SetStrings,FilmDriveSetup,~<FilmDriveSetup>~ );

		dlg( SetStatus,0,Translate( ~All settings were updated from the setting named: <SetupName>~ ) );

		NewFilmType = ~<$pcon.Setup[FilmType]>~;
		NewFilmType = ~<$Str.$NewFilmType.WithOutExt>~;
		FilmTermsFile = ~~;
		FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<NewFilmType>.flt~;
		if ( !Files( FileExists,~<FilmTermsFile>~ ) )
		{
			Warning( Translate( ~The film type associated with scan setup <SetupName> does not exist.\nChoose a different film type and save the scan setup again.~ ) );
		}
	}

	RefreshControls();

	EnableFilmDriveChanged( <CheckIfLoaded>,FALSE,TRUE );

	punchPadding = ~<$pcon.Setup[FrameToPunchPadding]>~;
	if ( ~<punchPadding>~ == ~~ )
	{
		punchPadding = ~5~;
	}

	dlg( SetStrings,FrameToPunch,~<$pcon.Setup[FrameToPunch]>~,
					FrameToPunchPadding,~<punchPadding>~ );

	GetFilmDriveVendor();
	if ( ~<OldFDVendor>~ == ~<FDVendor>~ )
	{
		dlg( SetStrings,GotoPunchNumber,~<SaveGotoPunchNumber>~ );
	}

	UpdateFdaSetupsCombo();
	
	if ( DlgData( GetNumeric, FilmDriveEnabled ) && ~<FDVendor>~ == ~HR500AFD~ )
	{
		HR500AFD_SetupEdgeDetection();
	}

	retval = OnFormatChange( 1, ~Settings loaded.~, FALSE, FALSE, FALSE, FALSE );

	if ( !Defined( Scanner ) || <DigitalIceAvailable> )
	{
		DigitalIceSetting = atof( ~<$pcon.Setup[DigitalIceCheckbox]>~ );
		dlg( SetCheck,<DigitalIceSetting>,DigitalIceCheckbox );
		dlg( Save,DigitalIceCheckbox );
	}

	FilmTypeToLoad = ~<$pcon.Setup[FilmType]>~;
	FilmTypeToLoad = ~<$Str.$FilmTypeToLoad.WithOutExt>~;
	dlg( SelectString,FilmTypesComboBox,~<FilmTypeToLoad>~ );
	dlg( SelectString,ExposureProfileComboBox,~<$pcon.Setup[DRGBProfileName]>~ );
 	dlg( SelectString,EditorComboBox,~<$pcon.Setup[FilmEditor]>~ );

	dlg( SelectString,FilmFormatComboBox,~<$pcon.Setup[Format]>~ );
	dlg( GetInput );
	DlgData( GetValues,Format,Format );
	if ( ( ~<SetupName>~ != ~~ ) && ( ~<$pcon.Setup[Format]>~ != ~<Format>~ ) )
	{
		Warning( Translate( ~The film format in the scan setup is not available with the currently selected film transport.~ ) );
	}

	RefreshCropsComboBox(TRUE);

	setupICCProfile = ~<$pcon.Setup[ICCProfile]>~;
	setupOutputProfile = ~<$pcon.Setup[ICCOutputProfile]>~;

	if ( ~<setupICCProfile>~ != ~~)
	{
		Query = ~Select * From Profiles Where Name = '<setupICCProfile>'~;

		if ( !PGenConList( profileList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			profileList( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query for profile (<setupICCProfile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		}
		if ( profileList( Empty ) )
		{
			Warning( Translate( ~The Scanner Profile (<setupICCProfile>) in the Scan Setup (<SetupName>)\nis not in the Profiles table.\n\nReverting to the previous Scanner Profile...~ ) ); 
		}
	}
	dlg( SelectString,ScannerProfileComboBox,~<setupICCProfile>~ );

	if ( ~<setupOutputProfile>~ != ~~)
	{
		Query = ~Select * From Profiles Where Name = '<setupOutputProfile>'~;

		if ( !PGenConList( profileList2,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			profileList2( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query for profile (<setupOutputProfile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		}
		if ( profileList2( Empty ) )
		{
			Warning( Translate( ~The Storage Profile (<setupOutputProfile>) in the Scan Setup (<SetupName>)\nis not in the Profiles table.\n\nReverting to the previous Storage Profile...~ ) ); 
		}
	}
	dlg( SelectString,OutputProfileComboBox,~<setupOutputProfile>~ );

	dlg( SetControlValue,~ScanSetupsComboBox~,~<SetupName>~);

	LastSetupName = ~<SetupName>~;

	if ( <ForceLoad> )
	{
		Sleep( 200 );	// let the UI catch up
	}
	
	if ( <retval> )
	{
		retval = OnFormatChange(4, ~Settings loaded.~,FALSE,FALSE,<DoCalibration> );
	}

	return <retval>;
}


NUMERIC OnTensionChange( TensionDriveOnly,RunCalibration,SkipCalibrationCheck )
{
	if ( !Defined( FilmDrive ) )	{ return DriveNotActive(); }

	dlg( GetInput );	
	
	Tension = DlgData( GetNumeric,Tension );

	OnlyTensionTheDrive = FALSE;
	if ( DefinedAndNotNULL( TensionDriveOnly ) )
	{
		OnlyTensionTheDrive = <TensionDriveOnly> ? TRUE : FALSE;
	}

	DoCalibration = TRUE;
	if ( DefinedAndNotNULL( RunCalibration ) )
	{
		DoCalibration = <RunCalibration> ? TRUE : FALSE;
	}

	SkipCalCheck = FALSE;
	if ( DefinedAndNotNULL( SkipCalibrationCheck ) )
	{
		SkipCalCheck = <SkipCalibrationCheck> ? TRUE : FALSE;
	}

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_Tension~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_Tension~ );
	}

	if ( !<OnlyTensionTheDrive> )
	{
		SetCurrentPunchNumber( ~~ );
		SetDialogVendorXOffsetInfo( 0, 0.0 );
		SetDialogVendorYOffsetInfo( 0, 0.0 );
	}

	FilmDriveCmdInProgress( (<Tension> != 0) ? Translate( ~Film Tensioning ~ ) : Translate( ~Film Untensioning ~ ) );

	if ( !<FDVendor>_Tension( <Tension> ) )
	{
		dlg( SetStrings,Tension,~~ );
		SetTransportControlsStopped();
		EnableTransportControls( FALSE );
		dlg( EnableControls,TRUE,LoadRevButton,LoadFwdButton );

		if ( !<TensionAborted> )
		{
			dlg( SetStatus,0,Translate( ~Film drive not tensioned.~ ) );
			return ReportFilmDriveError( ~Tension~ );
		}
	}
	
	result = Scanner( GetCurrentTensionState );
	if ( <result> != <Tension> )
	{
		dlg( SetCheck,<result>,TensionBox );
		dlg( Save,TensionBox );
		if ( !<TensionAborted> )
		{
			dlg( SetStatus,0,Translate( ~Film drive not tensioned.~ ) );
			SetTransportControlsStopped();
			EnableTransportControls( FALSE );
			dlg( EnableControls,TRUE,LoadRevButton,LoadFwdButton );
			return ReportFilmDriveError( ~Tension~ );
		}
	}

	if ( <TensionAborted> )
	{	
		TensionAborted = FALSE;
		SetTransportControlsStopped();
		EnableTransportControls( FALSE );
		dlg( EnableControls,TRUE,LoadRevButton,LoadFwdButton );
		dlg( SetStatus,0,Translate( ~Film drive tension aborted.~ ) );
		return FALSE;
	}
	SetTransportControlsStopped();
	EnableTransportControls( <Tension> != 0 );

	// check for expired calibration when drive is de-tensioned.
	if ( !<Tension> )
	{
		dlg( SetStatus,0,Translate( ~Film drive untensioned.~ ) );
		if ( !<SkipCalCheck> )
		{	
			if ( !CalibrationOk( TRUE,TRUE,FALSE,TRUE ) )
			{
				if ( <DoCalibration> )
				{
					if ( !OnHR500CalibrateButton( FALSE,FALSE,TRUE ) )
					{
						EnableScanningControls( TRUE );
						SetTransportControlsStopped();
						ClearCalibrationHandlers();
						return Warning( Translate( ~Calibration did not complete.~ ) );
					}
				}
			}
		}
	}
	else
	{
		dlg( SetStatus,0,Translate( ~Film drive tensioned.~ ) );
	}

	return TRUE;
}


NUMERIC SetupAdvancedColorValues()
{
	DlgData( Get,SFSFile,SFSFile );	
	DlgData( GetValues,CMMField,CMMField,PreferenceClass,PreferenceClass,
			 PCWF,PCWF,IgnoreSFS,IgnoreSFS,SBALevel,SBALevel );
	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}

	SizzleControl( SetValues,SBALevel,<SBALevel>,CMM,<CMMField>,PreferenceClass,<PreferenceClass>,
				   PCWF,<PCWF>,IgnoreSFS,<IgnoreSFS>,SFSFile,~<SFSFile>~ );
	return TRUE;

}

NUMERIC OnResetAdvColorDefaults()
{
	dlg(SetCheck, TRUE, ColorBrightnessButton);
	dlg(SetCheck, FALSE, BrightnessOnlyButton);
	dlg(SetCheck, FALSE, ColorOnlyButton);
	dlg(Save, ColorBrightnessButton);
	dlg(Save, BrightnessOnlyButton);
	dlg(Save, ColorOnlyButton);

	dlg( SetCheck,FALSE,IgnoreSFSCheckBox );
	dlg( Save,IgnoreSFSCheckBox );

	DlgData( SetValues,PreferenceClass,0,PCWF,700,CMMField,100 );

	dlg( SetStrings,PreferenceClass,0,PCWF,700,CMMField,100 );

	StartingDirectory = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>~;
	DlgData( Set,SFSFile,~<StartingDirectory>\kcdfs.satdef~ );
	
	dlg( SetStrings,SFSFile,~<StartingDirectory>\kcdfs.satdef~ );
	dlg( EnableControls,TRUE,SFSFileBrowseButton,SFSFileEditText );

	return TRUE;
}

NUMERIC OnReapplyAdvColorButton()
{
	OnResetTo0Button( TRUE );
	SizzleControl( Set,ForceSBA,TRUE );
	OnReapplyButton();	

	return TRUE;
}

NUMERIC	UpdateSBALevel( level )
{
	dlg( GetInput );
	UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);

	if ( <UseAnalyzerDRGBValues> )
	{
		return TRUE;
	}

	if ( <level> == 0 )
	{
		dlg(SetCheck, TRUE, ColorBrightnessButton);
		dlg(SetCheck, FALSE, BrightnessOnlyButton);
		dlg(SetCheck, FALSE, ColorOnlyButton);

		dlg(Save, ColorBrightnessButton);
		dlg(Save, BrightnessOnlyButton);
		dlg(Save, ColorOnlyButton);
	}
	else if ( <level> == 1 )
	{
		dlg(SetCheck, FALSE, ColorBrightnessButton);
		dlg(SetCheck, FALSE, BrightnessOnlyButton);
		dlg(SetCheck, TRUE, ColorOnlyButton);

		dlg(Save, ColorBrightnessButton);
		dlg(Save, BrightnessOnlyButton);
		dlg(Save, ColorOnlyButton);
	}
	else if ( <level> == 4 )
	{
		dlg(SetCheck, FALSE, ColorBrightnessButton);
		dlg(SetCheck, TRUE, BrightnessOnlyButton);
		dlg(SetCheck, FALSE, ColorOnlyButton);

		dlg(Save, ColorBrightnessButton);
		dlg(Save, BrightnessOnlyButton);
		dlg(Save, ColorOnlyButton);
	}
	else
	{
		return FALSE;
	}
	
	return TRUE;
}

NUMERIC UpdateColorControls(UseAnalyzerValuesSelected)
{
	dlg( GetInput );
	UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);
	ScanFromDataBase = DlgData( GetNumeric,ScanFromDataBase );

	if ((<UseAnalyzerValuesSelected> && <UseAnalyzerDRGBValues>) ||
	    (!<UseAnalyzerValuesSelected> && !<UseAnalyzerDRGBValues>))
	{
		return TRUE;
	}

	brightnessOverride = DlgData(GetNumeric,brightnessOverride);
	redOverride = DlgData(GetNumeric,redOverride);
	greenOverride = DlgData(GetNumeric,greenOverride);
	blueOverride = DlgData(GetNumeric,blueOverride);
	contrastOverride = DlgData(GetNumeric,contrastOverride);

	if (<brightnessOverride> != 0 || <redOverride> != 0 || <greenOverride> != 0 || <blueOverride> != 0 || <contrastOverride> != 0)
	{
		if ( <UseAnalyzerDRGBValues> && SizzleControl( GetNumeric,ScanObj ) )
		{
			Msg = Translate( ~Your current Scanner Offsets will be reset to 0.\n\nIf you want to run SBA on the current image, please select Apply SBA.\n Continue?~ );
		}
		else
		{		
			Msg = Translate( ~Your current Scanner Offsets will be reset to 0.  Continue?~ );
		}
		if ( MessageBox( ~<Msg>~,YESNO ) == YES )
		{
			DlgData( SetValues,brightnessOverride,~0~,
				redOverride,~0~,greenOverride,~0~,
				blueOverride,~0~,contrastOverride,~0~ );
			dlg( SetStrings,brightnessOverride,~0~,
				redOverride,~0~,greenOverride,~0~,
				blueOverride,~0~,contrastOverride,~0~ );
			//dlg( Update );
		}
		else
		{
			return TRUE;
		}
	}
	else
	{
		if ( <UseAnalyzerDRGBValues> && SizzleControl( GetNumeric,ScanObj ) )
		{
			Warning( Translate( ~If you want to run SBA on the current image, please select Apply SBA.~ ) );
		}
	}

	if (<UseAnalyzerDRGBValues>)
	{
		dlg(SetCheck, FALSE, AnaDRGBButton);
		dlg(SetCheck, TRUE, SBAButton);

		dlg(Save, AnaDRGBButton);
		dlg(Save, SBAButton);

		if ( !dlgData( GetNumeric,LockScannerOffsets ) )
		{
			LastAutoDRGBAdjustments = dlgData( GetNumeric, AutoDRGBAdjustments );
			LastDensityNormalization = dlgData( GetNumeric, DensityNormalization );
		}
		dlg( SetStrings, AutoDRGBAdjustments, ~0~ );

		dlg( SetStrings, DensityNormalization, ~0~ );
		dlg( EnableControls,FALSE,DenNormCheckBox );

		dlg( EnableControls,FALSE,
			dDensityPrompt,dDensityField,dDensitySlider,dDensityMinusButton,dDensityZeroButton,dDensityPlusButton,
			dRedPrompt,dRedField,dRedSlider,dRedMinusButton,dRedZeroButton,dRedPlusButton,
			dGreenPrompt,dGreenField,dGreenSlider,dGreenMinusButton,dGreenZeroButton,dGreenPlusButton,
			dBluePrompt,dBlueField,dBlueSlider,dBlueMinusButton,dBlueZeroButton,dBluePlusButton,
			RefDRGBStatic,RefDRGBComboBox,EditRefs_Button,DRGB2RGB_Button,AutoDRGBAdjustmentsCheckBox);

		dlg( EnableControls,TRUE,SBAPlusCheckBox );
		EnableAdvancedColorControls( TRUE );
		if ( SizzleControl( GetNumeric,ScanObj ) )
		{
			dlg( EnableControls,TRUE,ReapplySBAButton );
		}
		else
		{
			dlg( EnableControls,FALSE,ReapplySBAButton,ReapplyAdvancedColorButton );
		}
	}
	else
	{
		dlg(SetCheck, FALSE, SBAButton);
		dlg(SetCheck, TRUE, AnaDRGBButton);
		dlg(SetCheck, FALSE, SBAPlusCheckBox);

		dlg(Save, SBAPlusCheckBox);
		dlg(Save, AnaDRGBButton);
		dlg(Save, SBAButton);

		dlg( EnableControls,TRUE,
			dDensityPrompt,dDensityField,dDensitySlider,dDensityMinusButton,dDensityZeroButton,dDensityPlusButton,
			dRedPrompt,dRedField,dRedSlider,dRedMinusButton,dRedZeroButton,dRedPlusButton,
			dGreenPrompt,dGreenField,dGreenSlider,dGreenMinusButton,dGreenZeroButton,dGreenPlusButton,
			dBluePrompt,dBlueField,dBlueSlider,dBlueMinusButton,dBlueZeroButton,dBluePlusButton,
			RefDRGBStatic,RefDRGBComboBox,EditRefs_Button,DRGB2RGB_Button );

		if ( !dlgData( GetNumeric,LockScannerOffsets ) )
		{
			dlg( EnableControls,TRUE,AutoDRGBAdjustmentsCheckBox);
			dlg( SetStrings, AutoDRGBAdjustments, ~<LastAutoDRGBAdjustments>~ );

			dlg( EnableControls,TRUE,DenNormCheckBox);
			dlg( SetStrings, DensityNormalization, ~<LastDensityNormalization>~ );
		}

		dlg( EnableControls,FALSE,SBAPlusCheckBox,ReapplySBAButton );
		EnableAdvancedColorControls( FALSE );
	}

	return TRUE;
}


NUMERIC SetColorControls()
{
	UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);
	ScanFromDataBase = DlgData( GetNumeric,ScanFromDataBase );

	brightnessOverride = DlgData(GetNumeric,brightnessOverride);
	redOverride = DlgData(GetNumeric,redOverride);
	greenOverride = DlgData(GetNumeric,greenOverride);
	blueOverride = DlgData(GetNumeric,blueOverride);
	contrastOverride = DlgData(GetNumeric,contrastOverride);

	if (<UseAnalyzerDRGBValues>)
	{
		dlg(SetCheck, FALSE, SBAButton);
		dlg(SetCheck, TRUE, AnaDRGBButton);
		dlg(SetCheck, FALSE, SBAPlusCheckBox);

		dlg(Save, AnaDRGBButton);
		dlg(Save, SBAButton);
		dlg(Save, SBAPlusCheckBox);

		dlg( EnableControls,TRUE,
			dDensityPrompt,dDensityField,dDensitySlider,dDensityMinusButton,dDensityZeroButton,dDensityPlusButton,
			dRedPrompt,dRedField,dRedSlider,dRedMinusButton,dRedZeroButton,dRedPlusButton,
			dGreenPrompt,dGreenField,dGreenSlider,dGreenMinusButton,dGreenZeroButton,dGreenPlusButton,
			dBluePrompt,dBlueField,dBlueSlider,dBlueMinusButton,dBlueZeroButton,dBluePlusButton,
			RefDRGBStatic,RefDRGBComboBox,EditRefs_Button,DRGB2RGB_Button );

		if ( !dlgData( GetNumeric,LockScannerOffsets ) )
		{
			dlg( EnableControls,TRUE,AutoDRGBAdjustmentsCheckBox);
			dlg( EnableControls,TRUE,DenNormCheckBox);
		}

		dlg( EnableControls,FALSE,SBAPlusCheckBox,ReapplySBAButton );
		EnableAdvancedColorControls( FALSE );
	}
	else
	{
		dlg(SetCheck, FALSE, AnaDRGBButton);
		dlg(SetCheck, TRUE, SBAButton);

		dlg(Save, AnaDRGBButton);
		dlg(Save, SBAButton);

		if ( !dlgData( GetNumeric,LockScannerOffsets ) )
		{
			LastAutoDRGBAdjustments = dlgData( GetNumeric, AutoDRGBAdjustments );
			LastDensityNormalization = dlgData( GetNumeric, DensityNormalization );
		}
		dlg( SetStrings, AutoDRGBAdjustments, ~0~ );
		dlg( EnableControls,FALSE,AutoDRGBAdjustmentsCheckBox);

		dlg( SetStrings, DensityNormalization, ~0~ );
		dlg( EnableControls,FALSE,DenNormCheckBox );

		dlg( EnableControls,FALSE,
			dDensityPrompt,dDensityField,dDensitySlider,dDensityMinusButton,dDensityZeroButton,dDensityPlusButton,
			dRedPrompt,dRedField,dRedSlider,dRedMinusButton,dRedZeroButton,dRedPlusButton,
			dGreenPrompt,dGreenField,dGreenSlider,dGreenMinusButton,dGreenZeroButton,dGreenPlusButton,
			dBluePrompt,dBlueField,dBlueSlider,dBlueMinusButton,dBlueZeroButton,dBluePlusButton,
			RefDRGBStatic,RefDRGBComboBox,EditRefs_Button,DRGB2RGB_Button,AutoDRGBAdjustmentsCheckBox);

		dlg( EnableControls,TRUE,SBAPlusCheckBox );
		EnableAdvancedColorControls( TRUE );
		if ( SizzleControl( GetNumeric,ScanObj ) )
		{
			dlg( EnableControls,TRUE,ReapplySBAButton );
		}
		else
		{
			dlg( EnableControls,FALSE,ReapplySBAButton,ReapplyAdvancedColorButton );
		}
	}

	return TRUE;
}


NUMERIC UpdateSharpenFasterSetting(SharpenFasterSelected)
{
	dlg( GetInput );
	SharpenFaster = DlgData(GetNumeric,SharpenFaster);

	if ((<SharpenFasterSelected> && <SharpenFaster>) ||
	    (!<SharpenFasterSelected> && !<SharpenFaster>))
	{
		return TRUE;
	}

	if (<SharpenFaster>)
	{
		dlg(SetCheck, FALSE, SharpenFasterButton);
		dlg(SetCheck, TRUE, SharpenHigherQualityButton);

		dlg(Save, SharpenFasterButton);
		dlg(Save, SharpenHigherQualityButton);
	}
	else
	{
		dlg(SetCheck, FALSE, SharpenHigherQualityButton);
		dlg(SetCheck, TRUE, SharpenFasterButton);

		dlg(Save, SharpenFasterButton);
		dlg(Save, SharpenHigherQualityButton);
	}

	return TRUE;
}


VOID FilmDriveOperationComplete( Punch )
{
	if ( !IsNull( ~<OnFilmDriveOperationComplete>~ ) )
	{
		GetFilmDriveVendor();
		if ( ~<FDVendor>~ != ~HR500~ )
		{	Sleep( 50 );	}

		dlg( SetStrings,Punch,~<Punch>~ );
		SizzleControl( Set,Punch,~<Punch>~ );
		dlg( GetInput );
		ScanFromDataBase = DlgData(GetNumeric,ScanFromDataBase);
		FrameToPunch = DlgData(GetNumeric,FrameToPunch) && (~<FDVendor>~ == ~HR500~)  && (~<gFilmMarkType>~ != ~Notch~ );
		FrameToPunchPadding = DlgData(GetNumeric,FrameToPunchPadding);
		SequentialPunches = DlgData( GetNumeric,SequentialPunches) && (~<FDVendor>~ == ~HR500~);
		AutoScan = DlgData( GetNumeric,AutoScan );

		SizzleControl( Set,ScanFromDataBase,~<ScanFromDataBase>~);
		if ( <FrameToPunch> && !<ScanFromDataBase> )
		{
			NewFrame = Format( ~<Punch>~,~%ld~ );
			if ( <FrameToPunchPadding> )
			{
				NewFrame = Format( ~<Punch>~,~%0<FrameToPunchPadding>ld~ );
			}
			SetCurrentFrameNumber( ~<NewFrame>~ );
			SizzleControl( Set,Frame,~<NewFrame>~ );

			dlg( GetInput,GetStrings,Order,Order,Roll,Roll,
				 AutoDRGBAdjustments,AutoDRGBAdjustments );

			if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<NewFrame>~ )
			{
				if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<NewFrame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
				{
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return;	
				}
			}
			else
			{
				if ( !OnDRGB_2_BRGBC( FALSE ) )
				{	
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return;	
				}
			}
			LastOrderID = ~<Order>~;
			LastRoll = ~<Roll>~;
			LastFrame = ~<NewFrame>~;
		}


		// These will be set
		XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
		YOffset = DlgData( GetNumeric,EYOffsetPositionInUnits );
		YCorrection = DlgData( GetNumeric,EYOffsetIncrementUnit );

		SizzleControl( Set,XOffset,~<XOffset>~ );
		SizzleControl( Set,YOffset,~<YOffset>~ );
		SizzleControl( Set,EYOffsetIncrementUnit,~<YCorrection>~ );

		// Don't try to verify the punch number if we're jogging film
		if ( !<AutoScan> && <SequentialPunches> && !<ScanFromDataBase> && ( ~<JogNextCommand>~ == ~~ ) && ( ~<JogPrevCommand>~ == ~~ )  && (~<gFilmMarkType>~ != ~Notch~ ))
		{
			if ( <ExpectedNextPunch> != <Punch> && Numeric( ~<ExpectedNextPunch>~ ) >= <MinPunchNumber> )
			{
				if ( !HandleNonsequentialPunch( <Punch>,<ExpectedNextPunch> ) )
				{	
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return;	
				}
			}
		}

		prevSetting = ~<OnFilmDriveOperationComplete>~;
		retval = <OnFilmDriveOperationComplete>;

		if ( !<retval> )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
		}

		if ( ~<OnFilmDriveOperationComplete>~ == ~<prevSetting>~  && !<gPositioningForFocus> )
		{
			ClearFilmDriveOperationHandlers();
		}
		if ( !DlgData(GetNumeric,ScanFromDataBase) )
		{
			dlg( SetStrings,EYOffsetPositionInUnits,~0~ );
		}
		if ( DlgData(GetNumeric,AutoScan) && !DlgData(GetNumeric,ScanFromDataBase) && <ScanFrameBeforeAdvance> && Numeric( ~<ExpectedNextPunch>~ ) >= <MinPunchNumber> )
		{
			ScanFrameBeforeAdvance = FALSE;
		}
	}
}


NUMERIC OnScanButton( Position,TestScan )
{
	dlg( GetInput );
	FocusBeforeScan = FALSE;
	DoFrameToPunch = FALSE;
	ClearMagnificationHandlers();
	ClearCalibrationHandlers();
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	FDVendor = ~None~;
	GetFilmDriveVendor();
	EnableScanningControls( FALSE );
	if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsRunning(); }

	if ( !IsMMXSupportAvailable() )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return Warning( Translate( ~Unable to scan. This computer does not have MMX\nsupport which is required for HR500 scanning.~ ) );
	}

	if ( !Defined( Scanner ) )
	{
		if ( !FindScanner( FALSE ) )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE;
		}
	}

	if ( <MagNeeded> )
	{
		OnSetMagnificationComplete = STR ( OnScanButton( ~<Position>~,~<TestScan>~ ); );
		if ( !OnSetMagButton() )
		{
			ClearMagnificationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			Warning( Translate( ~Set magnification failed.~ ) );
			return FALSE;
		}
		return TRUE;
	}

	if ( !CheckLampState() )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	if ( DlgData( GetNumeric,DigitalIceCheckbox ) )
	{
		if ( !CheckFilmTypeForDigitalICE( FALSE ) )
		{	
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE;	
		}
	}

	DirtyFlag = SizzleControl( GetNumeric,DirtyFlag );
	dlg( GetStrings,Frame,Frame );
	if ( <DirtyFlag> && ( <Position> != 0 || ~<Frame>~ != ~<lastFrameScanned>~ ) )
	{
		Msg = Translate( ~Previous scan has not been saved.  Do you want to save the scanned image before continuing?~ );
		result = MessageBox( ~<Msg>~,YESNOCANCEL );
		if ( <result> == YES )
		{
			if ( !<FilmDriveEnabled> || ~<FDVendor>~ != ~Halse~ )
			{
				OnSaveImageButton( TRUE );
			}
			else
			{
				OnSaveImageButton( FALSE );
			}
		}
		else if ( <result> == NO )
		{
			if ( Defined( Scanner ) && (!<FilmDriveEnabled> || ~<FDVendor>~ != ~Halse~ || <Position> != 1) )
			{
				Scanner( CleanupLastScan, SizzleControl );
				dlg( EnableControls,FALSE,ReapplyButton,ReapplySBAButton,ReapplyAdvancedColorButton,ReapplyFiltersButton );
			}
		}
		else
		{
			SaveButtonDisabled = FALSE;
			EnableScanningControls( TRUE );
			if ( <FilmDriveEnabled> )
			{
				SetTransportControlsStopped();
			}
			dlg( EnableControls,TRUE,SaveImageButton );
			return FALSE;
		}
	}

	numSaves = 0.0;
	if ( Defined( Scanner ) && !<TestScan> )
	{
		firstTime = TRUE;
		numSaves = Scanner( GetSavesInProgress );
		while ( <numSaves> > 1.0 )
		{
			if ( <firstTime> )
			{
				dlg( SetStatus,0,~Waiting for save operation to complete.~ );
				firstTime = FALSE;
			}

			Sleep( 250 );
			numSaves = Scanner( GetSavesInProgress );
		}
	}

	numSaves = 0.0;

	if ( !CheckAvailableMem() )
	{
		if ( <numSaves> > 0.0 )
		{
			firstTime = TRUE;
			numSaves = Scanner( GetSavesInProgress );
			while ( <numSaves> > 0.0 )
			{
				if ( <firstTime> )
				{
					dlg( SetStatus,0,Translate( ~Waiting for save operation to complete.~ ) );
					Log( Session,~Waiting for save operation to complete.~ );
					firstTime = FALSE;
				}

				Sleep( 250 );
				numSaves = Scanner( GetSavesInProgress );
			}
		}
	}

	if ( !UpdateLampOnTime( FALSE,FALSE ) )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	if ( !<TestScan> && <LastScanIsTestScan> )
	{
		if ( ImageCorrections( GetCrop,~<LastPath>~,cX1,cY1,cW1,cL1 ) )
		{
			cX2 = DlgData( GetNumeric,CropX );
			cY2 = DlgData( GetNumeric,CropY );
			cW2 = DlgData( GetNumeric,CropWidth );
			cL2 = DlgData( GetNumeric,CropLength );

			if ( <cX1> != <cX2> || <cY1> != <cY2> || <cW1> != <cW2> || <cL1> != <cL2> )
			{
				ImageCorrections( UpdateCrop,~<LastPath>~,50,50,100,100 );
			}
		}
	}

	if ( !VerifyProfiles() )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	DlgData( Get,SFSFile,SFSFile );
	if ( !DlgData( GetNumeric,IgnoreSFS ) && ~<SFSFile>~ != ~~ )
	{
		if ( !VerifySFSFile() )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return Warning( Translate( ~The Subject Failure Suppression Boundary Set File (<SFSFile>) does not exist.\nPlease go to the Advanced SBA Setup tab and select a valid file.~ ) );
		}
	}

	LastPosition = <Position>;
	CurrentPosition = <Position>;

	SizzleControl( SetValues,FilmDriveAction,~~ );

	ClearFilmDriveOperationHandlers();

	if ( <FilmEditorChanged> )
	{
		UpdateEditorXYOffsetSetting();
	}

	Tension = IsDriveTensioned( TRUE );
	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame,
	     Punch,Punch,SaveFileType,SaveFileType,AutoDRGBAdjustments,AutoDRGBAdjustments,
		 CurrentPunchPosition,CurrentPunchPosition,FilmDriveEnabled,FilmDriveEnabled,
		 CurrentXOffset,TXOffsetPositionInUnits,CurrentYOffset,EYOffsetPositionInUnits,
		 AutoScanWrap,AutoScanWrap,DisableFilmDrive,DisableFilmDrive,FrameToPunch,FrameToPunch,
		 TXOffsetIncrementUnit,TXOffsetIncrementUnit,EYOffsetIncrementUnit,EYOffsetIncrementUnit,
		 FrameToPunchPadding,FrameToPunchPadding );

	SequentialPunches = DlgData( GetNumeric,SequentialPunches) && (~<FDVendor>~ == ~HR500~) && (~<gFilmMarkType>~ != ~Notch~ );

	if ( !OrderValid( ~<Order>~ ) )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	DisplayLastImage = DlgData( GetNumeric,DisplayLastImage );
	AutoScan = DlgData( GetNumeric,AutoScan );
	ScanFromDataBase = DlgData( GetNumeric,ScanFromDataBase );
	XPos = DlgData( GetNumeric, XPos );
	YPos = DlgData( GetNumeric, YPos );
	ScanWidth = DlgData( GetNumeric, ScanWidth );
	ScanLength = DlgData( GetNumeric, ScanLength );
	NextPunch = <INVALID_PUNCH>;
	NextXOffset = 0;
	NextXPos = 0;
	NextYPos = 0;
	NextScanWidth = 0;
	NextScanLength = 0;
	SizzleControl( SetValues,NextInfoAdjusted,FALSE,NextPunch,<NextPunch>,
				   NextXOffset,<NextXOffset>,NextXPos,<NextXPos>,NextYPos,<NextYPos>,
				   NextScanWidth,<NextScanWidth>,NextScanLength,<NextScanLength> );

	// User selected NextFrame on strip, which means current frame is aligned
	// Allow focus and scan before Advance and Scan

	if ( Defined( FilmDrive ) && <FilmDriveEnabled> && ~<FDVendor>~ == ~Halse~ && <Position> == 1 && <gScanCount> > 0)
	{
		gFirstFrameAligned = TRUE;
	}

	if ( <AutoScan> && !<ScanFromDataBase> && <ScanFrameBeforeAdvance> )
	{
		ExpectedNextPunch =  atof( ~<CurrentPunchPosition>~ );
		if ( <Position> != 0 )
		{
			Position = 0;
			CurrentPosition = 0;
		}
	}

	if ( <Position> != 0 && !<gAligningFrame> )
	{
		FrameNotInDB = FALSE;
	}
	// Do not display the image if we are repeatedly scanning the current frame
	if ( <DisplayLastImage> && <AutoScan> && <LastPosition> == 0 )
	{
		dlg( SetString,~0~,DisplayLastImage );
	}

	if ( ~<CurrentPunchPosition>~ == ~~ || !IsNumeric( ~<CurrentPunchPosition>~ ) )
	{
		CurrentPunchPosition = -1;
		SetCurrentPunchNumber( ~~ );
	}


	if ( ~<Volume>~ == ~~ || ~<Order>~ == ~~ || ~<Roll>~ == ~~ || ~<Frame>~ == ~~ )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return Warning( Translate( ~You must enter values for Path, Order, Roll, and Frame~ ) );
	}

	if ( <FilmDriveEnabled> )
	{
		if ( !FunctionDefined( ~<FDVendor>_FormatPunchNumber~ ) )
		{
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
			return VendorNotSelected( ~<FDVendor>_FormatPunchNumber~ );
		}
		if ( !FunctionDefined( ~<FDVendor>_ValidPunchRange~ ) )
		{
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
			return VendorNotSelected( ~<FDVendor>_ValidPunchRange~ );
		}
	}

	if ( !<ScanFromDataBase> )
	{
		if ( !CalibrationOk( FALSE,FALSE,<FilmDriveEnabled>,TRUE ) )
		{
			AutoScanAfterCal = TRUE;
			OnCalibrationComplete = STR ( OnScanButton( ~<LastPosition>~,~<TestScan>~ ); );

			// if long roll, get current punch; set Goto Punch to current punch
			dlg( SetStrings,GotoPunchNumber,~<CurrentPunchPosition>~ );
			dlg( Save,GotoPunchNumber );

			IsCalStarted = CompleteCalibrationAfterMag( FALSE,<TestScan>,TRUE,TRUE );
			if ( <IsCalStarted> )
			{
				EnableScanningControls( FALSE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsRunning(); }
				return FALSE;
			}
			else
			{
				AutoScanAfterCal = FALSE;
				ClearCalibrationHandlers();
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return TRUE;
			}
		}
	}

	if ( <FilmDriveEnabled> && <Tension> && ( <CurrentPunchPosition> < 0 ) )
	{
		SetCurrentPunchNumber( ~~ );
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		if ( ~<FDVendor>~ == ~Halse~ )
		{
			Msg = ~Please load the film.~;
		}
		else if ( ~<FDVendor>~ == ~HR500AFD~ )
		{
			Msg = ~Film drive is not positioned at a valid frame.\n\nPlease manually position the film to a frame.~;
		}
		else
		{
			Msg = ~Film drive is not positioned at a valid <gFilmMarkType> location.\n\nPlease manually position the film to a <gFilmMarkType> location.~;
		}
		return Warning( Translate( ~<Msg>~ ) );
	}
	else if ( <FilmDriveEnabled> && !<Tension> && ~<FDVendor>~ == ~Halse~ )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		Msg = ~Please load the film.~;
		return Warning( Translate( ~<Msg>~ ) );
	}

	if ( <TestScan> )
	{
		SizzleControl( SetValues,TestScan,TRUE );
	}

	// Check focus before frame calculation on long roll & strip
	// also for cut neg mode
	FocusEveryFrame = DlgData( GetNumeric,FocusEveryFrame );

	if ( <FocusNeeded> || <FocusEveryFrame> )
	{
		if ( ( Defined( FilmDrive ) && <FilmDriveEnabled> && ( ~<FDVendor>~ == ~HR500~ ) ) ||
		     ( Defined( FilmDrive ) && <FilmDriveEnabled> && ( ~<FDVendor>~ != ~HR500~ ) && (<gAligningFrame> || <gFirstFrameAligned>) ) ||
			 ( !<FilmDriveEnabled> ) )
		{
			FocusBeforeScan = TRUE;
			if ( (~<FDVendor>~ != ~HR500~) && !<gFirstFrameAligned> )
			{
				ScanFrameBeforeAdvance = FALSE;
				if ( <gSkippingBlankFilm> )
				{
					FocusBeforeScan = FALSE;
				}
			}
		}
	}

	// GET THE FRAME NUMBER
	// If we are scanning from the database then ignore loading film drive info
	// from the ScanSetup records
	IgnoreFilmDriveEnable = <ScanFromDataBase>;

	// If no database, get the frame number info from the UI
	if ( !<ScanFromDataBase> )
	{
		if ( !IsNumeric( ~<Frame>~ ) && Defined( FilmDrive ) && <FilmDriveEnabled> && ~<FDVendor>~ != ~HR500~ )
		{
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
			Warning( Translate( ~Unable to scan.  The frame number must be numeric.~ ) );
			return FALSE;
		}

		if ( !<FilmDriveEnabled> )
		{
			CurrentPunchPosition = <FDVendor>_FormatPunchNumber( ~-1~ );
		}
		// Film Drive should be positioned at a valid punch
		if ( <FilmDriveEnabled> ) 
		{
			if (!<FDVendor>_ValidPunchNumber( ~<CurrentPunchPosition>~ ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				if ( ~<FDVendor>~ == ~Halse~ )
				{
					Msg = ~Please load the film.~;
				}
				else if ( ~<FDVendor>~ == ~HR500AFD~ )
				{
					Msg = ~Film drive is not positioned at a valid frame.\n\nPlease manually position the film to a frame.~;
				}
				else
				{
					Msg = ~Film drive is not positioned at a valid <gFilmMarkType> location.\n\nPlease manually position the film to a <gFilmMarkType> location.~;
				}
				return Warning( Translate( ~<Msg>~ ) );
			}
			else if ( <FrameToPunch> && !<DisableFilmDrive> )
			{
				NewFrame = Format( ~<CurrentPunchPosition>~,~%ld~ );
				FrameToPunchPadding = DlgData(GetNumeric,FrameToPunchPadding);
				if ( <FrameToPunchPadding> )
				{
					NewFrame = Format( ~<CurrentPunchPosition>~,~%0<FrameToPunchPadding>ld~ );
				}
				SetCurrentFrameNumber( ~<NewFrame>~ );
				Frame = ~<NewFrame>~;
				DoFrameToPunch = TRUE;
			}
		}
		if ( IsNumeric( ~<Frame>~ ) )
		{
			len = strlen(~<Frame>~);
			if ( <len> > <MAX_NUMERIC_LENGTH> )
			{
				Warning( Translate( ~The maximum numeric value for the frame number has been exceeded.\nPlease update the number manually.~ ) );
			}
			else
			{
				// Give the transport a chance to translate the position into a frame delta for us if it can; otherwise
				// default the delta to the position value.
				Routine = <FDVendor>_TranslateMoveToFrameDelta;
				
				if ( <FilmDriveEnabled> && FunctionDefined( ~<Routine>~ ) )
					{ FrameDelta = <Routine>( ~<Position>~ ); }
				else
				{
					FrameDelta = ( <FilmDriveEnabled> && ( <FilmDirection> == 1 ) ) ? ( <Position> * (-1) ) : <Position>;
 				}
					
				Frame = <Frame> + <FrameDelta>;
				if ( <Frame> < <MinPunchNumber> )
				{
					//if ( <FilmDriveEnabled> )
					//{
					//	ClearAutoFlag( FALSE );
					//}
					Warning( Translate( ~Unable to scan.  The frame number cannot be less than <MinPunchNumber>.~ ) );
					EnableScanningControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					return FALSE;
				}

				Frame = FormattedFrame( Format( ~<Frame>~,~%0<len>ld~ ) );
				CurrentScanFrame = ~<Frame>~;
				dlg( SetString,~<Frame>~,Frame,0 );
				DlgData( SetValues,Frame,~<Frame>~ );
			}
		}

		numSaves = 0.0;
		if ( Defined( Scanner ) && !<TestScan> )
		{
			firstTime = TRUE;
			numSaves = Scanner( GetSavesInProgress );
			while ( <numSaves> >= 1.0 && ~<Frame>~ == ~<lastFrameScanned>~ )
			{
				if ( <firstTime> )
				{
					dlg( SetStatus,0,~Waiting for save operation to complete.~ );
					firstTime = FALSE;
				}

				Sleep( 250 );
				numSaves = Scanner( GetSavesInProgress );
			}
		}

		if ( atof(~<Frame>~) != atof(~<Punch>~)  && FunctionDefined( ~<FDVendor>_ResetFrameNumber~ ) )
		{
			<FDVendor>_ResetFrameNumber( ~<Frame>~ );
		}

		if ( <AutoScan> && <FilmDriveEnabled> && (~<FDVendor>~ == ~HR500~ || ~<FDVendor>~ == ~HR500AFD~))
		{
			NextPunch = ( <LastPosition> < 0 ) ? (-2) : ( <LastPosition> > 0 ) ? -1 : 0;
			NextXOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
		}
		dlg( SetStrings,Punch,~<CurrentPunchPosition>~ );
		SizzleControl( SetValues,NextInfoAdjusted,FALSE,NextPunch,<NextPunch>,
					   NextXOffset,<NextXOffset>,NextXPos,50.,NextYPos,50.,
					   NextScanWidth,100.,NextScanLength,100. );

		// Special case for Cut Negative Scanning (No Database/No Transport)
		if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> )
		{
			if ( <FocusBeforeScan> )
			{
				Msg = Translate( ~The scanner will automatically focus on the next scan.\n\nPlease insert frame <Frame>.\n\nDo you want to focus and scan now?~ );
				if ( MessageBox( ~<Msg> ~,YESNO ) == NO )
				{
					FocusBeforeScan = FALSE;
					EnableScanningControls( TRUE );
					return FALSE;
				}
				FocusBeforeScan = TRUE;
			}
			else if ( DlgData(GetNumeric,CutNegPrompt) )
			{
				Msg = Translate( ~Please insert frame <Frame>~ );

				GenCon( MbInfo,New,DDCustomMessageBox );
				MbInfo( SetValues,Title,Translate(~HR500 Scanning~),Message,~<Msg>~,
							Button1,Translate(~&Focus and Scan~),Button2,Translate(~&Scan~),Button3,Translate(~&Cancel~),
							SetWindowPos,1,X,-1,Y,-1,Width,325,Height,215 ) ;
				result = CustomMessageBox(MbInfo);
				button = MbInfo(GetNumeric, ButtonPressed);
				if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
				{
					dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
					EnableScanningControls( TRUE );
					return Warning( Translate( ~Scanning cancelled.~ ) );
				}
				else if ( <button> == 1 )
				{
					FocusBeforeScan = TRUE;
				}
			}
		}
	
		// Update the scanner dialog
		if ( IsNumeric( ~<Frame>~ ) && ( Numeric( ~<Frame>~ ) < 0 ) )
		{
			Frame = FormattedFrame(~000~);
		}

		Frame = FormattedFrame( ~<Frame>~ );
		dlg( SetStrings,Frame,~<Frame>~,Roll,~<Roll>~ );
		dlg( Save,Frame );
		dlg( Save,Roll );

		// 02/08/02 DPT
		// If frame to punch is set and we are not scanning from the database
		// and we are moving film, a call will be made after the movement of 
		// the film to change the order, roll, and frame.
		// So there is no need to make the call here.
		FrameToPunch = DlgData(GetNumeric,FrameToPunch) && (~<gFilmMarkType>~ != ~Notch~ );

		if ( !<FrameToPunch> || <Position> == 0 )
		{
			if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<Frame>~ )
			{
				// Warns for no DRGB refs (analyzer values)
				if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<Frame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
				{ 
					EnableScanningControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					return FALSE; 
				}
			}
			else
			{
				if ( !OnDRGB_2_BRGBC( FALSE ) )
				{	
					EnableScanningControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					return FALSE;	
				}
			}
			LastOrderID = ~<Order>~;
			LastRoll = ~<Roll>~;
			LastFrame = ~<Frame>~;
		}
	}
	// Else, get the frame number info from the database
	else if ( <ScanFromDataBase> )
	{
		AtEndOfList = FALSE;
		AutoScanMode = DlgData(GetNumeric,AutoScan);
		if ( !GetNextFrameToScanInfo( <Position>,<AutoScanMode>,<AutoScanWrap>,Order,Roll,Frame,Punch,CurrentXOffset,CurrentYOffset,AtEndOfList,NextPunch,NextXOffset,NextXPos,NextYPos,NextScanWidth,NextScanLength ) )
		{
			if ( <Position> < 0 && <AtEndOfList> )
			{
				Message = ( <AutoScanMode> ) ? ~Completed~ : ~ At beginning of~;
				Warning( Translate( ~<Message> Order/Roll/Frame scan~ ) );
				if ( Defined( ScanList ) ) { ScanList( GetFirst,Record ); }
				LastOrderID = ~~;
				LastRoll = ~~;
				LastFrame = ~~;
				
				ExecuteScriptFile( ~<$App.ShareDirectory>\Scripts\ScanOrderComplete1.txt~ );
				ExecuteScriptFile( ~<$App.ShareDirectory>\Scripts\ScanOrderComplete2.txt~ );
	
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return TRUE;
			}
			else if ( <Position> > 0 && <AtEndOfList> )
			{
				Message = ( <AutoScanMode> ) ? ~Completed~ : ~ At end of~;
				Warning( Translate( ~<Message> Order/Roll/Frame scan~ ) );
				if ( Defined( ScanList ) ) { ScanList( GetLast,Record ); }
				LastOrderID = ~~;
				LastRoll = ~~;
				LastFrame = ~~;

				ExecuteScriptFile( ~<$App.ShareDirectory>\Scripts\ScanOrderComplete1.txt~ );
				ExecuteScriptFile( ~<$App.ShareDirectory>\Scripts\ScanOrderComplete2.txt~ );

				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return TRUE;
			}
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return Warning( Translate( ~Unable to obtain Order/Roll/Frame information for next scan~ ) );
		}

		numSaves = 0.0;
		if ( Defined( Scanner ) && !<TestScan> )
		{
			firstTime = TRUE;
			numSaves = Scanner( GetSavesInProgress );
			while ( <numSaves> >= 1.0 && ~<Frame>~ == ~<lastFrameScanned>~ )
			{
				if ( <firstTime> )
				{
					dlg( SetStatus,0,~Waiting for save operation to complete.~ );
					firstTime = FALSE;
				}

				Sleep( 250 );
				numSaves = Scanner( GetSavesInProgress );
			}
		}

		if ( ( ~<NextPunch>~ == ~~ ) || !<AutoScanMode> || !<FilmDriveEnabled> || ~<FDVendor>~ == ~Halse~ )
		{
			NextPunch = <INVALID_PUNCH>;
			NextXOffset = 0;
			NextXPos = 0;
			NextYPos = 0;
			NextScanWidth = 0;
			NextScanLength = 0;
		}
		if ( Numeric( ~<NextPunch>~ ) != <INVALID_PUNCH> )
		{
			TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
			EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
			if ( <ScanFromDataBase> && <NextXOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
			{
				TempXOffset = ( <NextXOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
				NextXOffset = Round( <TempXOffset> );
			}
		}
		SizzleControl( SetValues,NextInfoAdjusted,FALSE,NextPunch,<NextPunch>,
					   NextXOffset,<NextXOffset>,NextXPos,<NextXPos>,NextYPos,<NextYPos>,
					   NextScanWidth,<NextScanWidth>,NextScanLength,<NextScanLength> );

		// Check the punch number format if we have a defined and enabled Film Drive
		if ( Defined( FilmDrive ) && ( <Position> == 0 ) && <FilmDriveEnabled> )
		{
			// Validate database logic
			if ( ~<FDVendor>~ != ~HR500~ )
			{
				punchName = ~Frame~;
			}
			else
			{
				punchName = ~<gFilmMarkType>~;
			}
			if ( FunctionDefined( ~<FDVendor>_ValidPunchRange~ ) )
			{
				if ( !<FDVendor>_ValidPunchRange( ~<Punch>~ ) )
				{
					EnableScanningControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					return Warning( Translate( ~<punchName> number (<Punch>) is out of range for a <FDVendor> film drive~ ) );
				}
			}
		}

		// Update the dialog with offset information
		SetDialogVendorXOffsetInfo( <CurrentXOffset>, <TXOffsetIncrementUnit> );
		SetDialogVendorYOffsetInfo( <CurrentYOffset>, <EYOffsetIncrementUnit> );

		// Always set the Punch number in the UI (with the punch number in the db) even
		// if there is no Film Drive defined or enabled... StartScanAfterCalibration will need this
		// info
		Punch = <FDVendor>_FormatPunchNumber( ~<Punch>~ );
		dlg( SetStrings,Punch,~<Punch>~ );
		dlg( SetStrings,GotoPunchNumber,~<Punch>~ );
		dlg( Save,GotoPunchNumber );

		// Update the scanner dialog
		if ( IsNumeric( ~<Frame>~ ) && ( Numeric( ~<Frame>~ ) < 0 ) )
		{
			Frame = FormattedFrame(~000~);
		}

		Frame = FormattedFrame( ~<Frame>~ );
		dlg( SetStrings,Frame,~<Frame>~,Roll,~<Roll>~ );
		dlg( Save,Frame );
		dlg( Save,Roll );

		dlg( GetInput );

		if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<Frame>~ )
		{
			// Warns for no DRGB refs (analyzer values)
			if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<Frame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
			{ 
				dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				ClearMagnificationHandlers();
				ResetNextFrameAfterError( FALSE );
				return FALSE; 
			}
		}
		else
		{
			if ( !OnDRGB_2_BRGBC( FALSE ) )
			{
				dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				ClearMagnificationHandlers();
				ResetNextFrameAfterError( FALSE );
				return FALSE;
			}

		}

		LastOrderID = ~<Order>~;
		LastRoll = ~<Roll>~;
		LastFrame = ~<Frame>~;

		KeepScanList = TRUE;
		if ( !LoadSetup( <IgnoreFilmDriveEnable>,FALSE ) )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			ClearMagnificationHandlers();
			ResetNextFrameAfterError( FALSE );
			return FALSE;
		}
		if ( <MagNeeded> )
		{
			OnSetMagnificationComplete = STR ( FinishScanAfterMag( <TestScan>,~<LastOrderID>~,~<LastRoll>~,~<Frame>~,<ScanFromDatabase>,<FocusBeforeScan> ); );
			if ( !OnSetMagButton() )
			{
				ClearMagnificationHandlers();
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				Warning( Translate( ~Set magnification failed.~ ) );
				return FALSE;
			}
			return TRUE;
		}

		ClearMagnificationHandlers();
		if ( !CalibrationOk( FALSE,FALSE,<FilmDriveEnabled>,TRUE ) )
		{
			AutoScanAfterCal = TRUE;

			OnCalibrationComplete = STR ( StartScanAfterCalibration( <TestScan>,~<Frame>~ ); );
			IsCalStarted = CompleteCalibrationAfterMag( FALSE,<TestScan>,FALSE,TRUE );
			if ( <IsCalStarted> )
			{
				EnableScanningControls( FALSE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsRunning(); }
				return FALSE;
			}
			else
			{
				AutoScanAfterCal = FALSE;
				ClearCalibrationHandlers();
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				ResetNextFrameAfterError( FALSE );
				return TRUE;
			}
		}
	
		// Always set the Punch number in the UI (with the punch number in the db) even
		// if there is no Film Drive defined or enabled
		Punch = <FDVendor>_FormatPunchNumber( ~<Punch>~ );
		dlg( SetStrings,Punch,~<Punch>~,GotoPunchNumber,~<Punch>~ );

		// Special case for Cut Negative Scanning (Database/No Transport)
		if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> ) 
		{
			FocusBeforeScan = FALSE;
			if ( <FocusNeeded> )
			{
				Msg = Translate( ~The scanner will automatically focus on the next scan.\n\nPlease insert frame <Frame>.\n\nDo you want to focus and scan now?~ );
				if ( MessageBox( ~<Msg> ~,YESNO ) == NO )
				{
					dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
					EnableScanningControls( TRUE );
					ResetNextFrameAfterError( FALSE );
					return Warning( Translate( ~Scanning cancelled.~ ) );
				}
				FocusBeforeScan = TRUE;
			}
			else if ( DlgData(GetNumeric,CutNegPrompt) )
			{
				Msg = Translate( ~Please insert frame <Frame>~ );

				GenCon( MbInfo,New,DDCustomMessageBox );
				MbInfo( SetValues,Title,Translate(~HR500 Scanning~),Message,~<Msg>~,
							Button1,Translate(~&Focus and Scan~),Button2,Translate(~&Scan~),Button3,Translate(~&Cancel~),
							SetWindowPos,1,X,-1,Y,-1,Width,325,Height,215 ) ;
				result = CustomMessageBox(MbInfo);
				button = MbInfo(GetNumeric, ButtonPressed);
				if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
				{
					dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
					EnableScanningControls( TRUE );
					ResetNextFrameAfterError( FALSE );
					return Warning( Translate( ~Scanning cancelled.~ ) );
				}
				else if ( <button> == 1 )
				{
					FocusBeforeScan = TRUE;
				}
			}
		}
	}

	// 02/12/02 DPT
	// This used to be done near the top of this function.  But I found a
	// problem where if we were scanning from the database and at the end
	// of the order, we would throw the scan object away and they wouldn't
	// be able to make any changes to the scanner color offsets and reapply
	// them.
	if ( Defined( Scanner ) && (!<FilmDriveEnabled> || ~<FDVendor>~ != ~Halse~ || <Position> != 1) )
	{
		Scanner( CleanupLastScan, SizzleControl );
		dlg( EnableControls,FALSE,ReapplyButton,ReapplySBAButton,ReapplyAdvancedColorButton,ReapplyFiltersButton );
	}

	// Update the dialog with offset information
	SetDialogVendorXOffsetInfo( <CurrentXOffset>, <TXOffsetIncrementUnit> );
	SetDialogVendorYOffsetInfo( <CurrentYOffset>, <EYOffsetIncrementUnit> );

	EndSettleTime = 0;

	// MAKE SURE SCAN AREA IS CORRECT
	if ( !UpdateScanSize(FALSE,TRUE,TRUE) )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError( FALSE );	}
		return FALSE;
	}

	if ( !DiskSpaceOK() )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError( FALSE );	}
		return FALSE;
	}

	if ( Defined( Scanner ) && (~<FDVendor>~ == ~HR500~ || ~<FDVendor>~ == ~HR500AFD~) )
	{
		ResIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
		Size	 = atof(Resolutions( ValueOf,$ResIndex ));
		SizzleControl( Set,Size,<Size> );
		HR500_UpdateNextFrameInfo();
		gNotchIncrement = <LastPosition>;
	}

	// DO THE FRAME MOVEMENT IF REQUIRED

	PositionForFocusNeeded = FALSE;
	if ( Defined( FilmDrive ) && <FilmDriveEnabled> && <FocusBeforeScan> && ~<FDVendor>~ == ~Halse~ )
	{
		dlg( SetStrings,GotoPunchNumber,~<CurrentPunchPosition>~ );
	    dlg( Save,GotoPunchNumber );
		PositionForFocusNeeded = Halse_PositionForFocusNeeded();
	}
	else
	{
		PreFocusFrameStatus = FALSE;
	}

	if ( <PositionForFocusNeeded> && <Position> != 0 && !<gSkippingBlankFilm> )
	{
		OnFilmDriveOperationComplete = STR ( Halse_PositionForFocus( FALSE ); );
	}
	else
	{
		OnFilmDriveOperationComplete = STR ( ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> ); );
	}

	// If there is no film drive, or if film drive is disabled then clear the handlers
	if ( <AutoScan> && !<ScanFromDataBase> && <SequentialPunches> && (<ExpectedNextPunch> != atof( ~<CurrentPunchPosition>~ ))  && (~<gFilmMarkType>~ != ~Notch~ ) )
	{
		if ( !HandleNonsequentialPunch( atof( ~<CurrentPunchPosition>~ ),<ExpectedNextPunch> ) )
		{	
			OnFilmDriveOperationComplete = STR ( ~FinishScanAfterCalibration( <TestScan>,<FocusBeforeScan> );~ );
			return FALSE;	
		}
	}

	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> )
	{
		ClearFilmDriveOperationHandlers();
	}

	// If no database and previous frame selected
	else if ( !<ScanFromDataBase>  && <Position> < 0 )
	{
		LastFrame = ~~;
		if ( !<DoPunchWaitOverride> )
		{
			if ( <FilmDirection> == 0 )
			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
			}
			else
			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
			}
		}
		if ( !OnPreviousFrameButton( TRUE,<DoPunchWaitOverride> ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnPreviousFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If no database and next frame selected
	else if  ( !<ScanFromDataBase>  && <Position> > 0 )
	{
		LastFrame = ~~;
		if ( !<DoPunchWaitOverride> )
		{
			if ( <FilmDirection> == 0 )
			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
			}
			else
			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
			}
		}
		if ( !OnNextFrameButton( TRUE,<DoPunchWaitOverride>,FALSE,<FocusBeforeScan> ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnNextFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If database, then seek punch
	else if ( <ScanFromDataBase> )
	{
		dlg( GetInput );
		dlg( SetStrings,GotoPunchNumber,~<Punch>~ ); // REM Punch formatted above
		if ( !OnGoToButton( TRUE,<DoPunchWaitOverride> ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnGoToButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}
	// Else just scan the current cut negative or current punch location

	Frame = FormattedFrame( ~<Frame>~ );
	
	// Check to see if the user would like to wait for the film
	// to settle
	if ( <SettleTime> && <EndSettleTime> )
	{
		DeltaSettleTime = ( <EndSettleTime> - Ticks() );
		if ( <DeltaSettleTime> > 0 )
		{
			Sleep( <DeltaSettleTime> );
		}
	}

	// After all frame movement has completed check/setup for wait for next punch
	DoPunchWaitOverride = FALSE;
	AutoScan = DlgData( GetNumeric,AutoScan );

	if ( <AutoScan> && <FilmDriveEnabled> && ~<FDVendor>~ != ~Halse~ )
	{
		if ( <FilmDirection> == 0 )
		{
			NextPunchInc = <LastPosition>;
		}
		else
		{
			NextPunchInc = - <LastPosition>;
		}

		if ( !<DoPunchWaitOverride> )
		{
			ExpectedNextPunch = <ExpectedNextPunch> + <NextPunchInc>;
		}
		else
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + <NextPunchInc>;
		}

		if ( <NextPunch> != <INVALID_PUNCH> )
		{
			DoPunchWaitOverride = TRUE;
		}
	}

	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> || ( !<ScanFromDataBase> && <Position> == 0 ) )
	{
		SizzleControl( Set,Punch,~<CurrentPunchPosition>~ );
		SizzleControl( Set,ScanFromDataBase,~<ScanFromDataBase>~ );
		dlg( GetInput );
		XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
		YOffset = DlgData( GetNumeric,EYOffsetPositionInUnits );
		EYOffsetIncrementUnit = DlgData( GetNumeric,EYOffsetIncrementUnit );

		SizzleControl( Set,XOffset,~<XOffset>~ );
		SizzleControl( Set,YOffset,~<YOffset>~ );
		SizzleControl( Set,EYOffsetIncrementUnit,~<EYOffsetIncrementUnit>~);
		
		retval = FALSE;
		if ( <PositionForFocusNeeded> && !<gSkippingBlankFilm> )
		{
			retval = Halse_PositionForFocus( FALSE );
		}
		else
		{
			retval = ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> );
		}

		if ( <retval> && <AutoScan> && !<ScanFromDataBase> && <ScanFrameBeforeAdvance> )
		{
			ScanFrameBeforeAdvance = FALSE;
		}

		if ( !<retval> )
		{
			KeepScanList = FALSE;
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		}

		return <retval>;
	}
	return TRUE;
}


NUMERIC FinishScanAfterMag( TestScan,LastOrderID,LastRoll,Frame,ScanFromDatabase,FocusBeforeScan )
{
	ClearMagnificationHandlers();
	dlg( GetInput );
	dlg( GetStrings,Order,Order,Roll,Roll,Punch,Punch,AutoDRGBAdjustments,AutoDRGBAdjustments,
		 FilmDriveEnabled,FilmDriveEnabled );

	// Update the scanner dialog
	if ( IsNumeric( ~<Frame>~ ) && ( Numeric( ~<Frame>~ ) < 0 ) )
	{
		Frame = FormattedFrame(~000~);
	}

	Frame = FormattedFrame( ~<Frame>~ );

	if ( !CalibrationOk( FALSE,FALSE,<FilmDriveEnabled>,TRUE ) )
	{
		AutoScanAfterCal = TRUE;
		OnCalibrationComplete = STR ( StartScanAfterCalibration( <TestScan>,~<Frame>~ ); );
		dlg( SetStrings,GotoPunchNumber,~<CurrentPunchPosition>~ );
	    dlg( Save,GotoPunchNumber );
		IsCalStarted = CompleteCalibrationAfterMag( FALSE,<TestScan>,FALSE,TRUE );
		if ( <IsCalStarted> )
		{
			EnableScanningControls( FALSE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsRunning(); }
			return FALSE;
		}
		else
		{
			AutoScanAfterCal = FALSE;
			ClearCalibrationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			if ( DlgData( GetNumeric,ScanFromDatabase ) )
			{	ResetNextFrameAfterError( FALSE );	}
			return TRUE;
		}
	}

	GetFilmDriveVendor();
	// Special case for Cut Negative Scanning (Database/No Transport)
	if ( !Defined( FilmDrive ) && !<FilmDriveEnabled> && DlgData(GetNumeric,CutNegPrompt))
	{
		Msg = Translate( ~The scanner will automatically focus on the next scan.\n\nPlease insert frame <Frame>.\n\nDo you want to focus and scan now?~ );
		if ( MessageBox( ~<Msg> ~,YESNO ) == NO )
		{
			dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
			EnableScanningControls( TRUE );
			FocusBeforeScan = FALSE;
			if ( DlgData( GetNumeric,ScanFromDatabase ) )
			{	ResetNextFrameAfterError( FALSE );	}
			return Warning( Translate( ~Scanning cancelled.~ ) );
		}
		FocusBeforeScan = TRUE;
	}
	else
	{
		FocusBeforeScan = TRUE;
		if ( ~<FDVendor>~ == ~Halse~ )
		{
			ScanFrameBeforeAdvance = FALSE;
			if ( <gSkippingBlankFilm> )
			{
				FocusBeforeScan = FALSE;
			}
		}
	}


	// Always set the Punch number in the UI (with the punch number in the db) even
	// if there is no Film Drive defined or enabled
	if ( FunctionDefined( ~<FDVendor>_FormatPunchNumber~ ) )
	{
		Punch = <FDVendor>_FormatPunchNumber( ~<Punch>~ );
	}
	dlg( SetStrings,Punch,~<Punch>~ );

	return FinishScanAfterCalibration( <TestScan>,<FocusBeforeScan> );
}


NUMERIC StartScanAfterCalibration( TestScan,Frame )
{
	ClearCalibrationHandlers();
	FocusBeforeScan = FALSE;

	dlg( GetInput,GetStrings,Punch,Punch,FilmDriveEnabled,FilmDriveEnabled );

	GetFilmDriveVendor();

	// Always set the Punch number in the UI (with the punch number in the db) even
	// if there is no Film Drive defined or enabled
	if ( FunctionDefined( ~<FDVendor>_FormatPunchNumber~ ) )
	{
		Punch = <FDVendor>_FormatPunchNumber( ~<Punch>~ );
	}
	dlg( SetStrings,Punch,~<Punch>~ );

	if ( ( !Defined( FilmDrive ) || !<FilmDriveEnabled> ) )
	{
		Msg = Translate( ~The scanner will automatically focus on the next scan.\n\nPlease insert frame <Frame>.\n\nDo you want to focus and scan now?~ );
		if ( MessageBox( ~<Msg> ~,YESNO ) == NO )
		{
			dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
			EnableScanningControls( TRUE );
			FocusBeforeScan = FALSE;
			if ( DlgData( GetNumeric,ScanFromDatabase ) )
			{	ResetNextFrameAfterError( FALSE );	}
			return Warning( Translate( ~Scanning cancelled.~ ) );
		}
		FocusBeforeScan = TRUE;
	}
	else if ( ( ~<FDVendor>~ == ~HR500~ ) ||
	        ( ( ~<FDVendor>~ != ~HR500~ ) && (<gAligningFrame> || <gFirstFrameAligned>) ) )
	{
		FocusBeforeScan = TRUE;
		if ( ~<FDVendor>~ != ~HR500~ )
		{
			ScanFrameBeforeAdvance = FALSE;
			if ( <gSkippingBlankFilm> )
			{
				FocusBeforeScan = FALSE;
			}
		}
	}

	return FinishScanAfterCalibration( <TestScan>, <FocusBeforeScan> );
}


NUMERIC FinishScanAfterCalibration( TestScan,FocusBeforeScan )
{
	FinishScanCommand = ~~;
	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame,
	     Punch,Punch,SaveFileType,SaveFileType,AutoDRGBAdjustments,AutoDRGBAdjustments,
		 CurrentPunchPosition,CurrentPunchPosition,FilmDriveEnabled,FilmDriveEnabled,
		 DisableFilmDrive,DisableFilmDrive,FrameToPunch,FrameToPunch,
		 CurrentXOffset,TXOffsetPositionInUnits,CurrentYOffset,EYOffsetPositionInUnits,
		 TXOffsetIncrementUnit,TXOffsetIncrementUnit,EYOffsetIncrementUnit,EYOffsetIncrementUnit );

	GetFilmDriveVendor();
	SequentialPunches = DlgData( GetNumeric,SequentialPunches) && (~<FDVendor>~ == ~HR500~)  && (~<gFilmMarkType>~ != ~Notch~ );

	ScanFromDatabase = DlgData(GetNumeric,ScanFromDataBase);
	AutoScan = DlgData( GetNumeric,AutoScan );
	
	DoFrameToPunch = FALSE;
	if ( !<ScanFromDatabase> && <FilmDriveEnabled> && <FrameToPunch>  && (~<gFilmMarkType>~ != ~Notch~ ) )
	{
		DoFrameToPunch = TRUE;
	}

	Position = <CurrentPosition>;

	// This used to be done near the top of OnScanButton.  But I found a
	// problem where if we were scanning from the database and at the end
	// of the order, we would throw the scan object away and they wouldn't
	// be able to make any changes to the scanner color offsets and reapply
	// them.
	if ( Defined( Scanner ) && (!<FilmDriveEnabled> || ~<FDVendor>~ != ~Halse~ || <Position> < 1) )
	{
		Scanner( CleanupLastScan, SizzleControl );
		dlg( EnableControls,FALSE,ReapplyButton,ReapplySBAButton,ReapplyAdvancedColorButton,ReapplyFiltersButton );
	}

	if ( <ScanFromDatabase> )
	{
		if ( GetOffsetInfoFromDB( ~<Order>~,~<Roll>~,~<Frame>~,CurrentXOffset,CurrentYOffset ) )
		{
			SetDialogVendorXOffsetInfo( <CurrentXOffset>, <TXOffsetIncrementUnit> );
			SetDialogVendorYOffsetInfo( <CurrentYOffset>, <EYOffsetIncrementUnit> );
		}	

	}
	EndSettleTime = 0;

	// MAKE SURE SCAN AREA IS CORRECT
	if ( !UpdateScanSize(FALSE,TRUE,TRUE) )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError( FALSE );	}
		return FALSE;
	}

	if ( !DiskSpaceOK() )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError( FALSE );	}
		return FALSE;
	}

	if ( Defined( Scanner ) && (~<FDVendor>~ == ~HR500~ || ~<FDVendor>~ == ~HR500AFD~) )
	{
		ResIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
		Size	 = atof(Resolutions( ValueOf,$ResIndex ));
		SizzleControl( Set,Size,<Size> );
		HR500_UpdateNextFrameInfo();
	}

	// DO THE FRAME MOVEMENT IF REQUIRED

	SizzleControl( GetValues,NextInfoAdjusted,NextInfoAdjusted,NextPunch,NextPunch,
				   NextXOffset,NextXOffset,NextXPos,NextXPos,NextYPos,NextYPos,
				   NextScanWidth,NextScanWidth,NextScanLength,NextScanLength );

	PositionForFocusNeeded = FALSE;
	if ( Defined( FilmDrive ) && <FilmDriveEnabled> && <FocusBeforeScan> && ~<FDVendor>~ == ~Halse~ )
	{
		dlg( SetStrings,GotoPunchNumber,~<CurrentPunchPosition>~ );
	    dlg( Save,GotoPunchNumber );
		PositionForFocusNeeded = Halse_PositionForFocusNeeded();
	}

	if ( <PositionForFocusNeeded> && <Position> != 0 && !<gSkippingBlankFilm> )
	{
		OnFilmDriveOperationComplete = STR ( Halse_PositionForFocus( FALSE ); );
	}
	else
	{
		OnFilmDriveOperationComplete = STR ( ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> ); );
	}

	// If there is no film drive, or if film drive is disabled then clear the handlers
	if ( <AutoScan> && !<ScanFromDataBase> && <SequentialPunches> && (<ExpectedNextPunch> != atof( ~<CurrentPunchPosition>~ ))  && (~<gFilmMarkType>~ != ~Notch~ ) )
	{
		if ( !HandleNonsequentialPunch( atof( ~<CurrentPunchPosition>~ ),<ExpectedNextPunch> ) )
		{	
			OnFilmDriveOperationComplete = STR ( ~FinishScanAfterCalibration( <TestScan>,<FocusBeforeScan> );~ );
			return FALSE;	
		}
	}

	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> )
	{
		ClearFilmDriveOperationHandlers();
	}

	// If no database and previous frame selected
	else if ( !<ScanFromDataBase>  && <Position> < 0 )
	{
		LastFrame = ~~;
		if ( !<DoPunchWaitOverride> )
		{
			if ( <FilmDirection> == 0 )

			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
			}
			else
			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
			}
			}
		if ( !OnPreviousFrameButton( TRUE,FALSE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnPreviousFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If no database and next frame selected
	else if  ( !<ScanFromDataBase>  && <Position> > 0 )
	{
		LastFrame = ~~;
		if ( !<DoPunchWaitOverride> )
		{
			if ( <FilmDirection> == 0 )
			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
			}
			else
			{
				ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
			}
		}
		if ( !OnNextFrameButton( TRUE,FALSE,FALSE,<FocusBeforeScan> ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnNextFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If database, then seek punch
	else if ( <ScanFromDataBase> )
	{
		dlg( GetInput );
		dlg( SetStrings,GotoPunchNumber,~<Punch>~ ); // REM Punch formatted above
		if ( !OnGoToButton( TRUE,FALSE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnGoToButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}
	// Else just scan the current cut negative or current punch location

	// Update the scanner dialog
	if ( IsNumeric( ~<Frame>~ ) && ( Numeric( ~<Frame>~ ) < 0 ) )
	{
		Frame = FormattedFrame(~000~);
	}

	Frame = FormattedFrame( ~<Frame>~ );
	
	// 02/08/02 DPT
	// If frame to punch is set and we are not scanning from the database,
	// a call will be made after the movement of the film to change the
	// order, roll, and frame.	So there is no need to make the call here.
	FrameToPunch = DlgData(GetNumeric,FrameToPunch)  && (~<gFilmMarkType>~ != ~Notch~ );
	if ( !( <FrameToPunch> && !<ScanFromDataBase> && <Position> == 0 ) )
	{
		if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<Frame>~ )
		{
			// Warns for no DRGB refs (analyzer values)
			if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<Frame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;
			}
		}
		else
		{
			if ( !OnDRGB_2_BRGBC( FALSE ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;
			}
		}
		LastOrderID = ~<Order>~;
		LastRoll = ~<Roll>~;
		LastFrame = ~<Frame>~;
	}

	// Check to see if the user would like to wait for the film
	// to settle
	if ( <SettleTime> && <EndSettleTime> )
	{
		DeltaSettleTime = ( <EndSettleTime> - Ticks() );
		if ( <DeltaSettleTime> > 0 )
		{
			Sleep( <DeltaSettleTime> );
		}
	}

	// After all frame movement has completed check/setup for wait for next punch
	DoPunchWaitOverride = FALSE;

	if ( <AutoScan> && <FilmDriveEnabled> && ~<FDVendor>~ != ~Halse~ )
	{
		if ( <FilmDirection> == 0 )
		{
			NextPunchInc = <LastPosition>;
		}
		else
		{
			NextPunchInc = - <LastPosition>;
		}

		if ( !<DoPunchWaitOverride> )
		{
			ExpectedNextPunch = <ExpectedNextPunch> + <NextPunchInc>;
		}
		else
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + <NextPunchInc>;
		}

		if ( <NextPunch> != <INVALID_PUNCH> )
		{
			DoPunchWaitOverride = TRUE;
		}
	}

	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> || ( !<ScanFromDataBase> && <Position> == 0 ) )
	{
		SizzleControl( Set,Punch,~<CurrentPunchPosition>~ );
		SizzleControl( Set,ScanFromDataBase,~<ScanFromDataBase>~ );
		dlg( GetInput );
		XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
		YOffset = DlgData( GetNumeric,EYOffsetPositionInUnits );
		EYOffsetIncrementUnit = DlgData( GetNumeric,EYOffsetIncrementUnit );

		SizzleControl( Set,XOffset,~<XOffset>~ );
		SizzleControl( Set,YOffset,~<YOffset>~ );
		SizzleControl( Set,EYOffsetIncrementUnit,~<EYOffsetIncrementUnit>~);
		
		retval = FALSE;
		if ( <PositionForFocusNeeded> && !<gSkippingBlankFilm> )
		{
			retval = Halse_PositionForFocus( FALSE );
		}
		else
		{
			retval = ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> );
		}

		if ( <retval> && <AutoScan> && !<ScanFromDataBase> && <ScanFrameBeforeAdvance> )
		{
			ScanFrameBeforeAdvance = FALSE;
		}
		if ( !<retval> )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		}
		return <retval>;
	}
	return TRUE;
}


NUMERIC ScanAnImage( Volume,Order,Roll,CurrentFrame,Ext,TestScan,FocusBeforeScan,DoFrameToPunch )
{
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );

	if ( !FindScanner(FALSE) )	
	{ 
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE; 
	}

	ClearFilmDriveOperationHandlers();

	if ( !DiskSpaceOK() )
	{ 
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE; 
	}

	if ( !ScanSizeOK( 2 ) )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	Frame = ~<CurrentFrame>~;
	// Override parameter with one set to punch number
	if ( <DoFrameToPunch> )
	{
		DlgData( Get,Frame,Frame );
	}

	FilmType = ~<$con.DlgData[FilmType]>~;
	SizzleControl( Set,FilmTermFile,~<FilmType>~ );

	CheckScanWidthLengthMin();

	ImagesPath = CreateImagePath( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<Ext>~ );

	ImagesPath = MakePath( ~<ImagesPath>~ );

	if ( !BroadcastMessageToAllViews( CanReleaseImage,~<ImagesPath>~ ) )
	{ 
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); 
	}

//	Log( Session, ~ScannerHR500Doc: ReleaseThumbnail for <ImagesPath>~ );
	if ( !DlgData( GetNumeric,ScanFromDatabase ) )
	{
		if ( !BroadcastMessageToAllViews( ReleaseImage,~<ImagesPath>~ ) )	
		{	
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); 
		}
	}
	else
	{
		if ( !BroadcastMessageToAllViews( ReleaseThumbnail,~<ImagesPath>~ ) )		
		{	
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); 
		}
	}

	// DPT 03/12/01
	// Don't delete the image form disk if this is a test scan because this could cause an entry in the database
	// for this frame with no image on disk for it.
	if ( !<TestScan> )
	{
		if ( !Files( Delete,~<ImagesPath>~ ) )
		{
			// TBD - Temporary Commented out until I find a better
			// TBD - strategy to delete overlaping ImageCorrection Objects
			// TBD - The below statement somtimes gives an sharing violation
			// TBD - on faster machines
			// TBD return Warning( Translate( ~Could not delete <ImagesPath>.  <$Func.GetLastErrorMsg()>~ ) );
		}
	}

	dlg( EnableControls,FALSE,SaveImageButton );

	SizzleControl( SetValues,PATH,~<ImagesPath>~,ORDER,~<Order>~,ROLL,~<Roll>~,FRAME,~<Frame>~ );
	EnableScanningControls( FALSE );
	//CloseWindowsOfDocument( ~<ImagesPath>~ );
	if ( !ScanOne(FALSE,<TestScan>,<FocusBeforeScan>) )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	return TRUE;
}


NUMERIC HandleDRGB( &dBase,OrderID,Roll,Frame,AutoDRGBAdjustments,DisplayDRBGError )
{
	a_D = a_R = a_G = a_B = 0;
	c_D = c_R = c_G = c_B = 0;
	o_Br = o_R = o_G = o_B = o_C = 0;
	t_D = t_R = t_G = t_B = 0;
	UseOverrides = FALSE;
	CropX = 50.0;
	CropY= 50.0;
	CropWidth = 100.0;
	CropLength = 100.0;
	UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);

	if ( <FrameNotInDB> )
	{
		if ( !<UseAnalyzerDRGBValues> )
		{
			a_D = a_R = a_G = a_B = 0;
			c_D = c_R = c_G = c_B = 0;
			o_Br = o_R = o_G = o_B = o_C = 0;
			t_D = t_R = t_G = t_B = 0;
		}
		else
		{
			DlgData( GetValues,dDensity,a_D,dRed,a_R,dGreen,a_G,dBlue,a_B );

			c_D = c_R = c_G = c_B = 0;
			o_Br = o_R = o_G = o_B = o_C = 0;

			t_D = <Roll_aDen> + <Roll_cDen>;
			t_R = <Roll_aRed> + <Roll_cRed>;
			t_G = <Roll_aGrn> + <Roll_cGrn>;
			t_B = <Roll_aBlu> + <Roll_cBlu>;

			if ( <t_D> != 0 || <t_R> != 0 || <t_G> != 0 || <t_B> != 0 )
			{
				a_D = a_R = a_G = a_B = 0;
			}

			t_D = <t_D> + <a_D>;
			t_R = <t_R> + <a_R>;
			t_G = <t_G> + <a_G>;
			t_B = <t_B> + <a_B>;
		}
		UseOverrides = FALSE;
		UseImageOverrides = FALSE;
	}
	else
	{
		Query = ~Select aDen,aRed,aGrn,aBlu,cDen,cRed,cGrn,cBlu,UseOverrides,brightnessOverride,redOverride,greenOverride,blueOverride,contrastOverride,ScanRotation,CropX,CropY,CropWidth,CropLength From Images Where OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

		a_D = a_R = a_G = a_B = 0;
		c_D = c_R = c_G = c_B = 0;
		o_Br = o_R = o_G = o_B = o_C = 0;
		UseOverrides = FALSE;
		CropX = 50.0;
		CropY= 50.0;
		CropWidth = 100.0;
		CropLength = 100.0;

		t_D = <Roll_aDen> + <Roll_cDen>;
		t_R = <Roll_aRed> + <Roll_cRed>;
		t_G = <Roll_aGrn> + <Roll_cGrn>;
		t_B = <Roll_aBlu> + <Roll_cBlu>;

		if ( dBase( GetValuesFor,~<Query>~,a_D,a_R,a_G,a_B,c_D,c_R,c_G,c_B,UseOverrides,o_Br,o_R,o_G,o_B,o_C,Rotation,CropX,CropY,CropWidth,CropLength ) )
		{
			a_D = Numeric( ~<a_D>~ ); a_R = Numeric( ~<a_R>~ ); a_G = Numeric( ~<a_G>~ ); a_B = Numeric( ~<a_B>~ );
			c_D = Numeric( ~<c_D>~ ); c_R = Numeric( ~<c_R>~ ); c_G = Numeric( ~<c_G>~ ); c_B = Numeric( ~<c_B>~ );
			o_Br = Numeric( ~<o_Br>~ ); o_R = Numeric( ~<o_R>~ ); o_G = Numeric( ~<o_G>~ ); o_B = Numeric( ~<o_B>~ ); o_C = Numeric( ~<o_C>~ );
			UseOverrides = Numeric( ~<UseOverrides>~ ) && !<SBARules>;

			t_D = <t_D> + <a_D> + <c_D>;
			t_R = <t_R> + <a_R> + <c_R>;
			t_G = <t_G> + <a_G> + <c_G>;
			t_B = <t_B> + <a_B> + <c_B>;
		}
		else
		{
			// 02/07/02 DPT
			// Changed this to leave the values in the dialog when the record doesn't exist
			// in the database.  We used to reset the values to 0 in this case.  This caused
			// problems for someone entering the DRGB numbers directly into the scanning
			// dialog.  In SBA mode, we will reset the values to 0.
			if ( !<UseAnalyzerDRGBValues> )
			{
				a_D = a_R = a_G = a_B = 0;
				c_D = c_R = c_G = c_B = 0;
				o_Br = o_R = o_G = o_B = o_C = 0;
				t_D = t_R = t_G = t_B = 0;
			}
			else
			{
				DlgData( GetValues,dDensity,a_D,dRed,a_R,dGreen,a_G,dBlue,a_B );

				c_D = c_R = c_G = c_B = 0;
				o_Br = o_R = o_G = o_B = o_C = 0;

				t_D = <Roll_aDen> + <Roll_cDen>;
				t_R = <Roll_aRed> + <Roll_cRed>;
				t_G = <Roll_aGrn> + <Roll_cGrn>;
				t_B = <Roll_aBlu> + <Roll_cBlu>;

				if ( <t_D> != 0 || <t_R> != 0 || <t_G> != 0 || <t_B> != 0 )
				{
					a_D = a_R = a_G = a_B = 0;
				}

				t_D = <t_D> + <a_D>;
				t_R = <t_R> + <a_R>;
				t_G = <t_G> + <a_G>;
				t_B = <t_B> + <a_B>;
			}

			FrameNotInDB = TRUE;
			UseOverrides = FALSE;
		}
	}

	// THE VALUES FROM A PREVIOUS SCAN OVERRIDE THE ORIGINAL ANALYZER VALUES
	if ( <UseOverrides> )
	{
		UseImageOverrides = TRUE;
		NormalizeDRGB(t_D,t_R,t_G,t_B);
		DlgData( SetValues,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );
		dlg( SetStrings,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );

		LockScannerOffsets = DlgData( GetNumeric, LockScannerOffsets );
		if ( !<LockScannerOffsets> )
		{
			DlgData( SetValues,brightnessOverride,~<o_Br>~,redOverride,~<o_R>~,greenOverride,~<o_G>~,blueOverride,~<o_B>~,contrastOverride,~<o_C>~ );
			dlg( SetStrings,brightnessOverride,~<o_Br>~,redOverride,~<o_R>~,greenOverride,~<o_G>~,blueOverride,~<o_B>~,contrastOverride,~<o_C>~ );
		}
		if ( <UseDbCrop> )
		{
			DlgData( SetValues,CropX,~<CropX>~,CropY,~<CropY>~,CropWidth,~<CropWidth>~,CropLength,~<CropLength>~ );
			dlg( SetStrings,CropX,~<CropX>~,CropY,~<CropY>~,CropWidth,~<CropWidth>~,CropLength,~<CropLength>~);
		}

		DlgData( SetValues,ScanRotation,~<Rotation>~ );
		dlg( SetStrings,ScanRotation,~<Rotation>~ );

		doCalc = TRUE;

		if ( <LockScannerOffsets> )
		{
			doCalc = FALSE;
		}

		if ( !<UseAnalyzerDRGBValues> )
		{
			doCalc = FALSE;
		}

		if ( !<AutoDRGBAdjustments> )
		{
			doCalc = FALSE;
		}
		
		if ( !<doCalc> )
		{
			return TRUE;
		}

		return Reverse_Calc_BRGBC_From_BRGBC(dBase, <doCalc>,<DisplayDRBGError>);
	}
	else if ( ~<a_D>~ != ~~ && Numeric( ~<a_D>~ ) >= 0 )
	{
		UseImageOverrides = FALSE;

		doCalc = TRUE;

		LockScannerOffsets = DlgData( GetNumeric,LockScannerOffsets );
		if ( <LockScannerOffsets> )
		{
			doCalc = FALSE;
		}

		if ( !<UseAnalyzerDRGBValues> )
		{
			doCalc = FALSE;
		}

		if ( !<AutoDRGBAdjustments> )
		{
			doCalc = FALSE;
		}
		
		NormalizeDRGB(t_D,t_R,t_G,t_B);
		DlgData( SetValues,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );
		dlg( SetStrings,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );

		if ( !<doCalc> )
		{
			return TRUE;
		}

		return Calc_BRGBC_From_BRGBC(dBase, <doCalc>,<DisplayDRBGError>);
	}
	else
	{
		UseImageOverrides = FALSE;
		a_D = a_R = a_G = a_B = 0;
		c_D = c_R = c_G = c_B = 0;
		o_Br = o_R = o_G = o_B = o_C = 0;
	}
	return TRUE;
}


NUMERIC DisplayStatusChoices( Type,x,y )
{
	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Scan - the frames need scanning~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Scan,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Scan - the frames do not need scanning~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Scan,0,FALSE); ) );	

	GenCon( NULL1,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Retouch~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Retouch - the images needing retouching~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Retouch,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Retouch  - the images do not need retouching~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Retouch,0,FALSE); ) );	

	GenCon( NULL2,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Inspect - the images need adjustment or cropping~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Inspect,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Inspect - the images do not need adjustment~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Inspect,0,FALSE); ) );	

	GenCon( NULL3,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Use Scanner Color Offsets from database to scan the images~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(UseOverrides,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Use Scanner Color Offsets from database to scan the images~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(UseOverrides,0,FALSE); ) );

	GenCon( NULL5,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Path - forget the path to the image~,
			IDText,		~ID~ );

	ActionsText = ACTION Exec ( Update<Type>Images(Path,~''~,TRUE); );
	
	Choice<Count>( SetValuesFrom,ActionsText,ActionsText );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Set Order S&tatus - Update the status of the order~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( OnSetOrderStatus(); ) );

	if ( ~<Type>~ == ~Order~ )
	{
		GenCon( NULL6,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~~,
				IDText,		~NULL~ );

		GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~&Use Crop settings from database to scan the images~,
				IDText,		~ID~,
				ActionsText, ACTION Exec ( Update<Type>Images(UseCrop,1,FALSE); ) );

		GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
				Text,		~Clear &Use Crop settings from database to scan the images~,
				IDText,		~ID~,
				ActionsText, ACTION Exec ( Update<Type>Images(UseCrop,0,FALSE); ) );
	}

	dlg( DisplayMenu,ListMenu,<x>,<y> );

	return TRUE;
}



NUMERIC UpdateOrderImages( Field,Value,AskFirst )
{
	dlg( GetInput,GetStrings,Order,Order );

	if ( IsNULL(~<Order>~) )
	{
		return Warning( Translate( ~You must enter an Order first~ ) );
	}

	if ( ~<Field>~ == ~UseCrop~ )
	{
		UseDbCrop = <Value>;
		dlg( GetInput,GetStrings,Order,Order );
		CropDbOrder = ~<Order>~;
	}
	else
	{
		Cmd = ~Update Images Set <Field> = <Value> Where OrderID = '<Order>'~;

		if ( DefinedAndNotNull(AskFirst) && <AskFirst> )
		{
			if ( MessageBox( Translate( ~Are you sure you want to update all of the images in the Order? ~ ),YESNO ) == NO )
				{ return TRUE; }
		}

		if ( !Ado( dBase,Connect,Cmd,~<Cmd>~ ) )	
		{ 
			dBase( GetErrorDescription,theErr );
			return Warning( ~Could not <cmd>. <theErr>~ );
		}
	}

	return TRUE;

}


NUMERIC UpdateRollImages( Field,Value,AskFirst )
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	if ( IsNULL(~<Order>~) )
	{
		return Warning( Translate( ~You must enter an Order first~ ) );
	}

	if ( IsNULL(~<Roll>~) )
	{
		return Warning( Translate( ~You must enter a Roll first~ ) );
	}

	if ( DefinedAndNotNull(AskFirst) && <AskFirst> )
	{
		if ( MessageBox( Translate( ~Are you sure you want to update all of the images in the Roll? ~ ),YESNO ) == NO )
			{ return TRUE; }
	}

	Cmd = ~Update Images Set <Field> = <Value> Where OrderID = '<Order>' AND Roll = '<Roll>'~;

	if ( !Ado( dBase,Connect,Cmd,~<Cmd>~ ) )	
	{ 
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not <cmd>. <theErr>~ );
	}

	return TRUE;
}



NUMERIC ImportFrameData()
{
	dlg( GetInput,GetStrings,Order,Order );

	ScannerDlgDefinition( GetWindowPosition,xPos,yPos );

	xPos = <xPos> + 72;

	Actions = ACTION Doc ( ~StartImportingDoc~ OpenOnce StartImportingDoc "Init(~<Order>~,<xPos>,<yPos>);" );
	return PerformActions( Actions );
}


NUMERIC FindOrdersNeedingScanning()
{
	Query = ~Select * From Orders Where Status Like 'Scan%' Order By ShipDate ~;

	Which = Translate( ~Orders that are ready to be scanned~ );

	Actions = ACTION DOC ( ~Orders~ OpenOnce OrdersDoc "Init( ~<Which>~,~<Query>~);" );
	
	return PerformActions( Actions );
}


NUMERIC OrderValid( OrderID )
{
	if ( !Ado( dBase,Connect,GetValuesFor,~Select CustomerID, ScanSetup, FilmType From Orders Where ID = '<OrderID>'~,CustomerID, ScanSetup, FilmType ) )	
	{ 
		dlg( SetStatus,0,Translate( ~Order <OrderID> does not exist~) );
		return FALSE;
	}

	OrderScanSetup = ~<ScanSetup>~;
	OrderFilmType = ~<FilmType>~;

	dlg( SetString,~<CustomerID>~,CustomerID,0 );

	return TRUE;
}


// In long roll autoscan, the film has already been positioned at the next
// frame and the next scan has probably already started.
// The best we can do for now is to reset the scan flag for the missed frame
VOID FlushErrorNotification( AddrOfSaveControl )
{
	dlg( SetStatus,0,Translate( ~An error occurred during save.~ ) );
	dlg( SetStatus,1,~~ );
	GenCon( SaveControl, Is, <AddrOfSaveControl>, TEMPORARY );
	SaveControl( GetValues, Frame, SaveFrame );
	HandleHR500Error( Translate( ~An error occurred saving the image to disk. Please rescan frame <SaveFrame>~ ));
	if ( <CurrentControlsState> == TRUE )
	{
		dlg( EnableControls,TRUE,SaveImageButton );
	}

	DlgData( GetValues, Frame, CurrentFrame);
	if ( ~<CurrentFrame>~ != ~<SaveFrame>~ )
	{
		Scanner( CleanupLastScan,SaveControl );
		ResetScanFlagForFrame( ~<SaveFrame>~ );
	}

	dlg( SetCheck,False,AutoScanCheckBox );
	dlg( GetInput );

	DisableControlsWhileSaving = FALSE;
	SaveButtonDisabled = FALSE;
	ScanButtonDisabled = FALSE;

	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}

VOID ResetScanFlagForFrame( MissedFrame )
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	Cmd = ~Update Images Set Scan = 1 Where OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<MissedFrame>'~;

	if ( !Ado( dBase,Connect,Cmd,~<Cmd>~ ) )	
	{ 
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not <cmd>. <theErr>~ );
	}
}


VOID ImageFlushComplete( AddrOfFlushControl )
{
	HR500ImageFlushComplete( ~<AddrOfFlushControl>~ );
	if ( !DlgData(GetNumeric,AutoSaveToDisk) && <CurrentControlsState> == TRUE )
	{
		dlg( EnableControls,TRUE,SaveImageButton );
		SaveButtonDisabled = FALSE;
	}
	dlg( SetStatus,1,Translate( ~~ ) );
}


VOID HR500ImageFlushComplete( Control )
{
	GenCon( ControlInfo, Is, ~<Control>~, TEMPORARY );

	SavedOrderID = ~<$con.ControlInfo[Order]>~;
	SavedRoll = ~<$con.ControlInfo[Roll]>~;
	SavedFrame = ~<$con.ControlInfo[Frame]>~;
	SavedPath = ~<$con.ControlInfo[Path]>~;
	FDAFailed = ~<$con.ControlInfo[frameStatus]>~;

	//if ( ControlInfo( GetNumeric,ForceSBA ) )
	//{
	//	SBARedAdjust = ControlInfo( GetNumeric,SBARedAdjust );
	//	SBAGreenAdjust = ControlInfo( GetNumeric,SBAGreenAdjust );
	//	SBABlueAdjust = ControlInfo( GetNumeric,SBABlueAdjust );
	//	SBAFleshAdjust = ControlInfo( GetNumeric,SBAFleshAdjust );
	//	SizzleControl( SetValues,SBARedAdjust,<SBARedAdjust>,SBAGreenAdjust,<SBAGreenAdjust>,
	//	 			   SBABlueAdjust,<SBABlueAdjust>,SBAFleshAdjust,<SBAFleshAdjust> );
//
	//	SBABrightnessAdjust = Min(<SBARedAdjust>, <SBAGreenAdjust>, <SBABlueAdjust>);
	//	SBARedAdjust = <SBARedAdjust> - <SBABrightnessAdjust>;
	//	SBAGreenAdjust = <SBAGreenAdjust> - <SBABrightnessAdjust>;
	//	SBABlueAdjust = <SBABlueAdjust> - <SBABrightnessAdjust>;
//
	//	useSBAPlus = ControlInfo( GetNumeric,UseSBAPlus );
	//	if ( ControlInfo( GetNumeric,UseSBAPlus) )
	//	{
	//		SBABrightnessAdjust = <SBABrightnessAdjust> + <SBAFleshAdjust>;
	//	}
	//	
	//	DlgData( SetValues,brightnessOverride,~<SBABrightnessAdjust>~,
	//		redOverride,~<SBARedAdjust>~,greenOverride,~<SBAGreenAdjust>~,
	//		blueOverride,~<SBABlueAdjust>~ );
	//	ControlInfo( Set,ForceSBA,FALSE );
	//	dlg( Update );
	//}

	LightTime = (ControlInfo( GetNumeric,DataAvailableTime ) - ControlInfo( GetNumeric,ScanStartTime )) / 1000;
	FetchTime = (ControlInfo( GetNumeric,FetchCompleteTime ) - ControlInfo( GetNumeric,DataAvailableTime )) / 1000;
	FlushTime = (ControlInfo( GetNumeric,FlushCompleteTime ) - ControlInfo( GetNumeric,FetchCompleteTime )) / 1000;
	TotalTime = (ControlInfo( GetNumeric,FlushCompleteTime ) - ControlInfo( GetNumeric,ScanStartTime )) / 1000;
	EdgeCollectTime = (ControlInfo( GetNumeric,EdgeCollectCompleteTime ) - ControlInfo( GetNumeric,EdgeCollectStartTime )) / 1000;

	Log( Session,~Image <SavedPath> (<$con.ControlInfo[LastScanWidth]>x<$con.ControlInfo[LastScanHeight]>x<$con.ControlInfo[Depth]>)  On Disk. Light=<LightTime> Fetch=<FetchTime> Flush=<FlushTime> Total=<TotalTime> FrameDetect=<EdgeCollectTime> ~ );
	
	if ( !DlgData( GetNumeric,ScanFromDatabase ) )
	{
		Actions = ACTION Doc ( ImagesDoc "AddImageToList( ~<SavedOrderID>~,~<SavedRoll>~,~<SavedFrame>~,~<SavedPath>~,<FDAFailed> );" );
		QueueContentsAfter( Actions,1000 );
	}
	else
	{
		Actions = ACTION Doc ( ImagesDoc "UpdateImageInList( ~<SavedOrderID>~,~<SavedRoll>~,~<SavedFrame>~,~<SavedPath>~,<FDAFailed> );" );
		QueueContentsAfter( Actions,1000 );
	}

	ScanButtonDisabled = FALSE;
	SaveButtonDisabled = FALSE;

	if ( <DisableControlsWhileSaving> )
	{
		DisableControlsWhileSaving = FALSE;
		EnableScanningControls( TRUE );
	}
	else
	{
		EnableScanningControls( <CurrentControlsState> );
	}
	if ( SizzleControl( GetNumeric,WaitingForOverScan ) )
	{
		EnableScanningControls( FALSE );
		SetTransportControlsRunning() ;
	}

}


VOID RenderOverScanComplete( AddrOfFlushControl )
{
	EnableScanningControls(FALSE);
	SetTransportControlsRunning();

	GenCon( OverScanControl, Is, ~<AddrOfFlushControl>~, TEMPORARY );
	
	RenderTime = (OverScanControl( GetNumeric,RenderOverScanCompleteTime ) - OverScanControl( GetNumeric,RenderOverScanStartTime )) / 1000;

//	Log( Session,~OverScan Image Render time = <RenderTime> ~ );

	buffer = OverScanControl( GetNumeric,ImageBuffer );
	width  = OverScanControl( GetNumeric,ImageBufferWidth );
	height = OverScanControl( GetNumeric,ImageBufferHeight );
	if ( RunningVersion( 5.1 ) )
	{
		DlgData( Get,Frame,frameNumber );
	}
	else
	{
		DlgData( Get,CurrentPunchPosition,frameNumber );
	}
	frameNumber = atof( <frameNumber> );

//	if ( ~<FDVendor>~ == ~Halse~ &&
//		 !<RemoveAdjustFrameOnCompletion> )
//	{
		frameNumber = <frameNumber> + 1;
//	}
	if ( SizzleControl( GetNumeric,AdjustingNextFrame ) )
	{
		SizzleControl( SetValues,AdjustingNextFrame,FALSE );
		if ( ~<FDVendor>~ == ~HR500AFD~ )
		{
			frameNumber = <frameNumber> + 1;
			if ( <gHR500AFD_ErrorReason> == <FRAME_LENGTH_LONG> )
			{
				Msg = ~LONG-Error detecting next frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <FRAME_LENGTH_SHORT> )
			{
				Msg = ~SHORT-Error detecting next frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <FRAME_SPLIT> )
			{
				Msg = ~SPLIT-Error detecting next frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <NO_FRAME_EDGE_FOUND> )
			{
				Msg = ~NO EDGE-Error detecting next frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <SPLICE_FOUND> )
			{
				Msg = ~SPLICE-Error detecting next frame (# <frameNumber>)~;
			}
			else
			{
				Msg = ~Error detecting next frame (# <frameNumber>)~;
			}
		}
		else
		{
			Msg = ~Error detecting next frame (# <frameNumber>)~;
		}
	}
	else
	{
		if ( ~<FDVendor>~ == ~HR500AFD~ )
		{
			if ( <gHR500AFD_ErrorReason> == <FRAME_LENGTH_SHORT> )
			{
				Msg = ~SHORT-Positioning current frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <FRAME_SPLIT> )
			{
				Msg = ~SPLIT-Positioning current frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <FRAME_LENGTH_LONG> )
			{
				Msg = ~LONG-Positioning current frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <NO_FRAME_EDGE_FOUND> )
			{
				Msg = ~NO EDGE-Positioning current frame (# <frameNumber>)~;
			}
			else if ( <gHR500AFD_ErrorReason> == <SPLICE_FOUND> )
			{
				Msg = ~SPLICE-Positioning current frame (# <frameNumber>)~;
			}
			else
			{
				Msg = ~Positioning current frame (# <frameNumber>)~;
			}
		}
		else
		{
			Msg = ~Positioning current frame (# <frameNumber>)~;
		}
	}

	if ( ~<FDVendor>~ == ~HR500AFD~ )
	{
		gMaxScannedFrame = <frameNumber> + 1;
	}

	Actions = ACTION Doc ( OverScanImage OpenOnce OverScanImage "OpenAsAnOverscanWindow( <buffer>,<width>,<height>,<frameNumber>,<gMaxScannedFrame>,~<Msg>~,~ScannerHR500~,~<FDVendor>~,<gHR500AFD_FrameLengthError> );" );

	PerformActions( Actions );
}


VOID EnableAdvancedColorControls( value )
{
	dlg( EnableControls,<value>,ColorBrightnessButton,BrightnessOnlyButton,ColorOnlyButton,
								CMMField,PreferenceClassField,PCWFField,
								IgnoreSFSCheckBox,SFSFileEditText,SFSFileBrowseButton,
								ResetToDefaultsButton,ReapplyAdvancedColorButton );

	dlg( EnableControls,<value>,HR500AdvancedColorSetupTab );

}


VOID EnableScanningControls( value )
{
	if ( <IgnoreControlCommands> ) { return; }

	if ( <CurrentControlsState> != <value> )
	{
		dlg( EnableAllControls,<value>,<value> );
		CurrentControlsState = <value>;
	}

	if ( <KeepScanList> && <value> )
	{
		KeepScanList = FALSE;
	}

	GetFilmDriveVendor();
	if (FunctionDefined( ~<FDVendor>_SetupScanningControls~ ))
	{
		<FDVendor>_SetupScanningControls( <value> );
	}

	if ( DlgData( GetNumeric,AutoScan ) )
	{
		dlg( EnableControls,TRUE,AutoScanCheckBox,DisplayLastCheckBox );
		dlg( EnableControls,FALSE,ScanButton );
	}
	else if ( <ScanButtonDisabled> )
	{
		dlg( EnableControls,FALSE,ScanButton );
	}
	else
	{
		dlg( EnableControls,<value>,ScanButton );
	}

	if ( <SaveButtonDisabled> || (DlgData( GetNumeric,AutoSaveToDisk) && !<ReapplyingScannerOffsets>) )
	{
		dlg( EnableControls,FALSE,SaveImageButton );
	}
	else
	{
		dlg( EnableControls,<value>,SaveImageButton );
	}
	
	if ( <DisableControlsWhileSaving> )
	{
		dlg( EnableControls,FALSE,PrevScanButton,NextScanButton );
	}
	else
	{
		dlg( EnableControls,<value>,NextScanButton );
		if (~<FDVendor>~ == ~HR500AFD~ )
		{
			dlg( EnableControls,FALSE,PrevScanButton );
		}
		else
		{
			dlg( EnableControls,<value>,PrevScanButton );
		}
	}

	if ( <AutoScanDeselectPending> && ( <CurrentControlsState> == TRUE ) )
	{
		AutoScanDeselectPending = FALSE;
		if ( ~<FDVendor>~ == ~HR500AFD~ )
		{
			if ( Scanner( IsNextFrameQueued ) )
			{
				dlg( GetStrings,Frame,Frame );
				++Frame;
				SetCurrentFrameNumber( FormatFrameNumber( ~<Frame>~ ) );
			}
		}
	}

	if ( DlgData(GetNumeric,FilmDriveEnabled) || ~<FDVendor>~ == ~None~ )
	{
		dlg( EnableControls,FALSE,VendorSetupComboBox );
	}
	else
	{
		dlg( EnableControls,<value>,VendorSetupComboBox );
	}

	EnableSequentialPunches( <value> );
	dlg( EnableControls,TRUE,SeeScannedImagesButton );

	if ( <DigitalIceAvailable> )
	{
		dlg( EnableControls,<value>,DigitalIceCheckbox );
	}
}


VOID ImageFetchComplete()
{
	SizzleControl( SetValues,WaitingForDisplay,TRUE );
	ScanTime = (SizzleControl( GetNumeric,FetchCompleteTime ) - SizzleControl( GetNumeric,ScanStartTime )) / 1000;

	NextFrameResetOnce = FALSE;

	dlg( GetInput );
	showOverScan = DlgData( GetNumeric,AdjustFramePosition );
	TestScan = SizzleControl( GetNumeric,TestScan );
	displayLastImage = SizzleControl( GetNumeric,DisplayLastImage );
	LogActivity = SizzleControl( GetNumeric,LogActivity );
	FilmDriveEnabled = DlgData(GetNumeric,FilmDriveEnabled);
	if ( <showOverScan> && !<TestScan> && !<gOverScanDisplayed> && !SizzleControl( GetNumeric,WaitingForOverScan) )
	{
		SizzleControl( SetValues,WaitingForOverScan,TRUE );
		HR500RenderOverScan();
	}
	else
	{
		showOverScan = FALSE;
	}

	SizzleControl( SetValues,Focus,0 );

	ThisPath = ~<$con.SizzleControl[Path]>~;

	dlg( GetInput );

// TBD - IF DO PUNCH WAIT OVERRIDE THEN YOU WILL NEED TO KEEP THE DIALOG DISABLED
	LastOrderID = ~<$con.SizzleControl[Order]>~;
	LastRoll = ~<$con.SizzleControl[Roll]>~;
	LastFrame = ~<$con.SizzleControl[Frame]>~;

	if ( (!DlgData(GetNumeric,AutoScan) && !SizzleControl( GetNumeric,WaitingForOverScan) ) || <ReapplyingScannerOffsets> )
	{
		EnableScanningControls(TRUE);
	}

	
	ImageCorrections( Free,~<ThisPath>~ );
	ImageCorrections( Free,~<LastPath>~ );

	HR500OpenScannedImage( ~<LastPath>~,~<ThisPath>~,<TestScan> );

	ImageCorrections( GetAndFreeWhenLastView,~<ThisPath>~ );	// NEED THIS TO RECEIVE CROP UPDATES

	LastPath = ~<ThisPath>~;

	UseAnalyzerDRGBValues = DlgData( GetNumeric,UseAnalyzerDRGBValues );
	LockScannerOffsets = DlgData( GetNumeric, LockScannerOffsets );
	ForceSBA = SizzleControl( GetNumeric,ForceSBA );
	UseImageOverrides = SizzleControl( GetNumeric,UseImageOverrides );
	if ( !<UseAnalyzerDRGBValues> )
	{
		if ( !( (<LockScannerOffsets> || <UseImageOverrides>) && !<ForceSBA> ) )
		{
			SBARedAdjust = SizzleControl( GetNumeric,SBARedAdjust );
			SBAGreenAdjust = SizzleControl( GetNumeric,SBAGreenAdjust );
			SBABlueAdjust = SizzleControl( GetNumeric,SBABlueAdjust );
			useSBAPlus = SizzleControl( GetNumeric,UseSBAPlus );

			SBABrightnessAdjust = Min(<SBARedAdjust>, <SBAGreenAdjust>, <SBABlueAdjust>);
			SBARedAdjust = <SBARedAdjust> - <SBABrightnessAdjust>;
			SBAGreenAdjust = <SBAGreenAdjust> - <SBABrightnessAdjust>;
			SBABlueAdjust = <SBABlueAdjust> - <SBABrightnessAdjust>;
			if ( <useSBAPlus> )
			{
				SBAFleshAdjust = SizzleControl( GetNumeric,SBAFleshAdjust );
				SBABrightnessAdjust = <SBABrightnessAdjust> + <SBAFleshAdjust>;
			}

			if ( !<ReapplyingScannerOffsets> || <ForceSBA> )
			{
				DlgData( SetValues,brightnessOverride,~<SBABrightnessAdjust>~,
					redOverride,~<SBARedAdjust>~,greenOverride,~<SBAGreenAdjust>~,
					blueOverride,~<SBABlueAdjust>~ );

				dlg( SetStrings,brightnessOverride,~<SBABrightnessAdjust>~,redOverride,~<SBARedAdjust>~,
					 greenOverride,~<SBAGreenAdjust>~,blueOverride,~<SBABlueAdjust>~ );

				SizzleControl( Set,ForceSBA,FALSE );
			}
		}

		// 02/12/02 DPT
		// If this is not a test scan when we are doing SBA, set the use image
		// overrides flag to TRUE.  This allows the user to make changes to the
		// scanner color offsets and then hit the scan or reapply buttons to have
		// the changes applied.  Previously, we would always scan and run SBA on
		// the image even when the user made changes to the scanner color offsets
		// and hit scan.
		if ( !<TestScan> )
		{
			UseImageOverrides = TRUE;
		}
		else if ( <FrameNotInDB> )
		{
			UseImageOverrides = FALSE;
		}
	}
	
	if ( <CurrentControlsState> )
	{
		OnColorChange();
	}

	if ( !<TestScan> )
	{
		dlg( SetStrings,Progress,~100~,LastScanTime,~<TotalTime>~,ScanCount,DlgData(GetNumeric,ScanCount) + 1 );

		if (<ReapplyingScannerOffsets>)
		{
			if ( <LogActivity> )
			{
				dlg( SetStatus,0,~Changes Reapplied After <ScanTime> Seconds~ );
			}
			else
			{
				dlg( SetStatus,0,~Changes Reapplied~ );
			}
		}
		else
		{
			if ( <LogActivity> )
			{
				dlg( SetStatus,0,~Image Scanned After <ScanTime> Seconds~ );
			}
			else
			{
				dlg( SetStatus,0,~Image Scan Completed~ );
			}
		}

		AutoSaveToDisk = DlgData( GetNumeric,AutoSaveToDisk );
		if ( <AutoSaveToDisk> && !<ReapplyingScannerOffsets> )
		{
			Dlg( EnableControls, FALSE, ScanButton );
			ScanButtonDisabled = TRUE;

			SizzleControl( SetValues,WaitingForDisplay,FALSE );
			if ( !<FilmDriveEnabled> || ~<FDVendor>~ != ~Halse~ )
			{
				ReadyForSave( (DlgData(GetNumeric,AutoScan)) ? TRUE : FALSE );
			}
			else
			{
				ReadyForSave( FALSE );
			}

		}
		else
		{
			ScanButtonDisabled = FALSE;
			SizzleControl( SetValues, DirtyFlag, TRUE );
		}
	}
	else
	{
		ScanButtonDisabled = FALSE;
	}

	SizzleControl( SetValues,WaitingForDisplay,FALSE );
	DoAnotherScanViaIdleWait = FALSE;

	if ( DlgData(GetNumeric,AutoScan) && !<ReapplyingScannerOffsets> )
	{
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> && <DoPunchWaitOverride> )
		{
			DoAnotherScanViaIdleWait = TRUE;
			Action = STR ( WaitingForFilmAdvanceComplete(); );
			QueueContentsAfter( Action,200 );
		}
		else
		{
			if (!ScanAgain() && !SizzleControl( GetNumeric,WaitingForOverScan) )
			{
				EnableScanningControls(TRUE);
			}
		}
	}
	else
	{
		if ( !DlgData(GetNumeric,AutoSaveToDisk) && !<SaveButtonDisabled> )
		{
			dlg( EnableControls,TRUE,SaveImageButton );
		}

		if ( !<ReapplyingScannerOffsets> )
		{
			// We just deselected autoscan and we are waiting for the next queued frame
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> && <DoPunchWaitOverride> )
			{
				Action = STR ( WaitingForFilmAdvanceComplete(); );
				QueueContentsAfter( Action,200 );
			}
		}
	}

	if ( !DlgData(GetNumeric,AutoScan) && <FilmDriveEnabled> &&
		 !SizzleControl( GetNumeric,WaitingForOverScan) )
	{
		SetTransportControlsStopped();
	}

	if ( <TestScan> )
	{
		LastScanIsTestScan = TRUE;
		dlg( EnableControls,TRUE,AdjustScanAreaButton );
		if ( ~<FDVendor>~ == ~Halse~ || ~<FDVendor>~ == ~HR500AFD~ )
		{	dlg( EnableControls,TRUE,AdjustOverscanAreaButton );	}
	}
	else if ( !<DoAnotherScanViaIdleWait> )
	{
		LastScanIsTestScan = FALSE;
		dlg( EnableControls,FALSE,AdjustScanAreaButton );
		if ( ~<FDVendor>~ == ~Halse~ || ~<FDVendor>~ == ~HR500AFD~ )
		{	dlg( EnableControls,FALSE,AdjustOverscanAreaButton );	}
	}
	else
	{
		LastScanIsTestScan = FALSE;
	}
}


VOID OnAutoScan()
{
	dlg( GetInput );

	if ( DlgData(GetNumeric,AutoScan) )
	{
		dlg( SetCheck,FALSE,DisableFilmDriveCheckBox );
		dlg( Save,DisableFilmDriveCheckBox );
		dlg( EnableControls,FALSE,ScanButton );
		if ( !DlgData( GetNumeric,ScanFromDatabase ) )
		{
			ScanFrameBeforeAdvance = TRUE;
		}
	}
	else
	{
		AutoScanDeselectPending = TRUE;
		dlg( EnableControls,<CurrentControlsState>,ScanButton );
	}

	GetFilmDriveVendor();

	if ( DlgData(GetNumeric,AutoScan) )
	{
		dlg( SetCheck, TRUE, AutoSaveToDiskCheckBox );

		dlg(Save, AutoSaveToDiskCheckBox);		
		dlg( SetCheck, FALSE, AdjustFramePositionBox );
		OnAdjustFramePosition();
		dlg( EnableControls,FALSE,AdjustFramePositionBox );
	}
	else if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) && ~<FDVendor>~ != ~HR500~ )
	{
		dlg( EnableControls,TRUE,AdjustFramePositionBox );
	}

	if ( FunctionDefined( ~<FDVendor>_SetupEdgeDetection~ ) )
	{
		<FDVendor>_SetupEdgeDetection();
	}
}


NUMERIC CheckFilmTypeForDigitalICE( ChangeFilmType )
{
	if ( !<DigitalIceAvailable> )
	{	return TRUE;	}

	dlg( GetInput );

	FilmType = ~<$con.DlgData[FilmType]>~;
	compatible = TRUE;
	
	if ( ~<FilmType>~ == ~Kodachrome~ )
	{
		if ( <ChangeFilmType> && DlgData( GetNumeric,DigitalIceCheckbox ) )
		{
			Warning( Translate( ~Some Kodachrome images suffer a loss of image detail as a result of Digital ICE image processing.~ ) );	
		}
		compatible = TRUE;	
	}
	else
	{
		if ( !Defined( Scanner ) )
		{	return FALSE;	}
		
		SFSFile = ~<$con.DlgData[SFSFile]>~;
		if ( ~<SFSFile>~ == ~~ )
		{
			SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
		}
		FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
		filmClass = 0.0;

		if ( !Scanner( GetFilmClass,filmClass,~<FilmType>~,~<SFSFile>~,~<FilmTermsFile>~ ) )
		{ 	
			return FALSE; 
		}

		if ( <filmClass> == 1.0 )	//BWN
		{	compatible = FALSE;	}
	}

	if ( !<compatible> && !DlgData( GetNumeric,DigitalIceCheckbox ) )
	{
		dlg( EnableControls,FALSE,DigitalIceCheckbox );
		return TRUE;
	}
	else if ( <compatible> )
	{
		dlg( EnableControls,<CurrentControlsState>,DigitalIceCheckbox );
	}
	
	if ( !<compatible> )
	{
		theMsg = Translate( ~You cannot use Digital ICE with the Film Type:\n\t<FilmType> \n\nWould you like to disable Digital ICE?\n\nIf not, you will have to select a different Film Type.~ );
		if ( MessageBox( ~<theMsg>~,YESNO ) == YES )
		{
			dlg( SetStatus,0,Translate( ~Digital ICE disabled.~ ) );
			dlg( SetCheck,0,DigitalIceCheckbox );
			dlg( Save,DigitalIceCheckbox );
			dlg( EnableControls,FALSE,DigitalIceCheckbox );
			SizzleControl( Set,UseDigitalIce,FALSE );
		}
		else
		{
			dlg( SetStatus,0,Translate( ~You will have to change the film type before scanning.~ ) );
			EnableScanningControls( TRUE );
			return FALSE;
		}
	}
	return TRUE;
}

VOID OnDigitalIceChange()
{
	CheckFilmTypeForDigitalICE( TRUE );
	SizzleControl( Set,UseDigitalIce,DlgData(GetNumeric,DigitalIceCheckbox) );		
}


NUMERIC CheckCalibrationAfterMag( DisplayMessage,DisplayStatus )
{
	calStatus = 0;
	ClearMagnificationHandlers();
	dlg( GetInput );
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	DlgData( GetValues,CalibrationTimeout,calTimeout,IgnoreCalTimeout,ignoreTimeout );
	if ( <ignoreTimeout> )
	{	calTimeout = -1;	}

	userCalTimeout = DlgData( GetNumeric,CalibrationTimeout );

	if ( !Scanner( NeedCalibration,<calTimeout>,calStatus,FALSE ) )
	{
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,Translate( ~You will have to calibrate the scanner.~ ) );
		}
		if ( <DisplayMessage> )
		{
			Msg = ~You will have to calibrate before performing this operation.~;
			Warning( Translate( ~<Msg>~ ) );
		}
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	if ( <calStatus> == 1 ) // not needed
	{
		if ( <DisplayStatus> || <DisplayMessage> )
		{
			dlg( SetStatus,0,~Calibration is not needed.~ );
		}
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return TRUE;
	}
	else if ( <calStatus> == 2  || (<calStatus> == 3 && <userCalTimeout> == 0) ) // cal needed
	{
		if ( <DisplayMessage> )
		{
			if ( MessageBox( Translate( ~You will have to recalibrate.  Are you ready to start the calibration now?~ ),YESNO ) != YES )
			{ 
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE; 
			}
		}
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,~You will have to calibrate before scanning or focusing.~ );
			if ( !<DisplayMessage> )
			{	
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;	
			}
		}
	}
	else if ( <calStatus> == 3 ) // cal restored
	{
		if ( <DisplayStatus> || <DisplayMessage> )
		{
			dlg( SetStatus,0,~Stored calibration values have been loaded.~ );
		}
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return TRUE;
	}
	else if ( <calStatus> == 4 || <calStatus> == 5 ) // cal expired
	{
		if ( <DisplayMessage> )
		{
			if ( MessageBox( Translate( ~The stored calibration has expired. Do you want to recalibrate for this scan size and film class?~ ),YESNO ) != YES )
			{ 
				dlg( SetStatus,0,~Expired calibration values are in use.~ );
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return TRUE; 
			}
		}
		if ( <DisplayStatus> )
		{
			dlg( SetStatus,0,~Current calibration values have expired.~ );
			if ( !<DisplayMessage> )
			{	
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;	
			}
		}
	}

	if ( !AskIfFilmDriveDetensioned() )
	{
		Warning( Translate( ~The film drive is not detensioned.\n\nCalibration aborted.~ ) );
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	DlgData( Get,FilmType,FilmType );
	DlgData( Get,SFSFile,SFSFile );
	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}
	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
	result = Scanner( IsColorFilterPositionCorrect,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ );
	if ( <result> == -1 )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}
	if ( <result> == FALSE )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return Warning( Translate( ~The color filter is not in the correct position for this film type.\nMake sure the filter is in the correct position and then\nselect OK to continue.~ ) );
	}

	if ( MessageBox( Translate( ~Remove any film currently loaded and insert the calibration gate.\n\nPlease do not reload the film until calibration is complete.\n\nAre you ready to Calibrate?~),YESNO ) == YES )
	{ 
		EnableScanningControls( FALSE );
		Scanner( CalibrateAsync, SizzleControl );
		SecondsWaiting = 0;
		Action = STR ( StillCalibrating(FALSE); );
		QueueContentsAfter( Action,1000 );

		LastFilmType = ~<$con.DlgData[FilmType]>~;
		return TRUE;
	}
	Warning( Translate( ~The calibration gate not loaded.\n\nCalibration aborted.~ ) );
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	EnableScanningControls( TRUE );
	if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
	return FALSE;
}


NUMERIC UpdateCrop( checkFormatChange )
{
	dlg( GetInput );

	CropName = ~<$con.DlgData[CropName]>~;

	if ( ~<CropName>~ != ~~ )
	{
		return SetCropWhere( ~Name = '<CropName>'~ ,<checkFormatChange> );
	}
	else
	{
		dlg( SetStatus,0,Translate( ~No crop settings were loaded~ ) );
	}

	return TRUE;
}


NUMERIC SetCropWhere( Criteria,checkFormatChange )
{
	retval = TRUE;

	Query = ~Select * from Crops Where <Criteria>~; 

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Could not find Crop Where <Criteria>. <theErr>~ ) );
	}

	if ( !List( GetFirst,Crop ) )
		{ return Warning( Translate( ~Could not find crop Where <Criteria>~ ) ); }

	// NEED TO adjust for yoffset here
	// Expression y = <y> + ( yoffset * <yOffsetPPI> ) / 1000

	dlg( SetString,~<$pcon.Crop[CropX]>~,CropX );
	dlg( SetString,~<$pcon.Crop[CropY]>~,CropY );
	dlg( SetString,~<$pcon.Crop[CropWidth]>~,CropWidth );
	dlg( SetString,~<$pcon.Crop[CropLength]>~,CropLength );

	dlg( SetString,~<$pcon.Crop[Format]>~,Format );
	dlg( SetString,~<$pcon.Crop[OpticalZoom]>~,OpticalZoom );

	dlg( SetString,~<$pcon.Crop[ScanX]>~,XPOS );
	dlg( SetString,~<$pcon.Crop[ScanY]>~,YPOS );
	dlg( SetString,~<$pcon.Crop[ScanWidth]>~,ScanWidth );
	dlg( SetString,~<$pcon.Crop[ScanLength]>~,ScanLength );

	dlg( SetString,~<$pcon.Crop[OverScanX]>~,OverScanXPos );
	dlg( SetString,~<$pcon.Crop[OverScanY]>~,OverScanYPos );
	dlg( SetString,~<$pcon.Crop[OverScanWidth]>~,OverScanWidth );
	dlg( SetString,~<$pcon.Crop[OverScanLength]>~,OverScanLength );

	dlg( SetString,~<$pcon.Crop[Rotation]>~,ScanRotation );

	dlg( Save,CropX );
	dlg( Save,CropY );
	dlg( Save,CropWidth );
	dlg( Save,CropLength );

	dlg( Save,Format );
	dlg( Save,OpticalZoom );

	dlg( Save,XPOS );
	dlg( Save,YPOS );
	dlg( Save,ScanWidth );
	dlg( Save,ScanLength );

	dlg( Save,OverScanXPos );
	dlg( Save,OverScanYPos );
	dlg( Save,OverScanWidth );
	dlg( Save,OverScanLength );

	dlg( Save,ScanRotation );

	statusText = ~Crop, format, zoom and scan area were updated~;
	dlg( SetStatus,0,~<statusText>~ );
	//dlg( Update );

	if ( Defined( Scanner ) && <checkFormatChange> )
	{
		retval = OnFormatChange( 6,~<statusText>~,TRUE,FALSE,TRUE );
	}
	return <retval>;
}


VOID UpdateScanSetupsList(wantSelection)
{
	Query = ~Select Name From ScanSetups Where ScannerType = '<$con.DlgData[ScannerType]>' Order By Name~;

	if ( !PGenConList( ScanSetupsList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ScanSetupsList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the ScanSetups table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ScanSetupsList( MakeStringList,ScanSetups,Name );

	dlg( SetControlFromStringList,ScanSetupsComboBox,ScanSetups,<wantSelection> ? ~Selection~ : ~NoSelection~ );
}


NUMERIC CheckFilmType( DoCalibration )
{
	FilmType = ~<$con.DlgData[FilmType]>~;
	Result = 0.0;
	retval = TRUE;
	if ( (~<FilmType>~ != ~<LastFilmType>~) )
	{
		if ( Defined( Scanner ) )
		{
			CheckFilmTypeForDigitalICE( TRUE );
	
			if ( (~<LastFilmType>~ != ~~) )
			{
				FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
				LastFilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<LastFilmType>.flt~;
				if ( Scanner( CheckForFilmClassChange,~<FilmTermsFile>~,~<LastFilmTermsFile>~,Result ) )
				{
					if ( <Result> == 1.0 )
					{
						retval = OnFormatChange( 2, ~Film type changed from positive to negative.~, FALSE, FALSE, <DoCalibration> );
					}
					else if ( <Result> == 2.0 )
					{
						retval = OnFormatChange( 2, ~Film type changed from negative to positive.~, FALSE, FALSE, <DoCalibration> );
					}
					else
					{
						dlg( SetStatus,0,~~ );
					}
				}
				else
				{
					dlg( SetStatus,0,~~ );
				}
			}
		}
		LastFilmType = ~<FilmType>~;
		//if (!DlgData(GetNumeric,UseAnalyzerDRGBValues))
		//{
		//	FrameNotInDB = TRUE;
		//	UseImageOverrides = FALSE;
		//}
	}
	else
	{
		dlg( SetStatus,0,~~ );
	}

	return <retval>;
}


NUMERIC FilmTypeChange( )
{
	FilmType = ~<$con.DlgData[FilmType]>~;
	Result = 0.0;
	retval = FALSE;
	change = FALSE;
	if ( (~<FilmType>~ != ~<LastFilmType>~) )
	{
		if ( Defined( Scanner ) )
		{
			CheckFilmTypeForDigitalICE( TRUE );
	
			if ( (~<LastFilmType>~ != ~~) )
			{
				FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
				LastFilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<LastFilmType>.flt~;
				retval = Scanner( CheckForFilmClassChange,~<FilmTermsFile>~,~<LastFilmTermsFile>~,Result );
				if ( <retval> )
				{
					if ( <Result> == 1.0 )
					{
						dlg( SetStatus,0,~Film type changed from positive to negative.~, FALSE, FALSE, TRUE );
					}
					else if ( <Result> == 2.0 )
					{
						dlg( SetStatus,0,~Film type changed from negative to positive.~, FALSE, FALSE, TRUE );
					}
				}
				else
				{
					dlg( SetStatus,0,~~ );
				}
			}
		}
		LastFilmType = ~<FilmType>~;

	}
	else
	{
		dlg( SetStatus,0,~~ );
	}

	return <retval>;
}


NUMERIC CloseDialog()
{
	dlg( GetInput );

	StillScanning = FALSE;

	if ( Defined( Scanner ) )
	{
		if ( Scanner( MagChanging ) )
		{
			Warning( Translate( ~Can't quit now ... Scanner is busy changing mag~ ) );
			dlg( SetDlgHandleActionsFlag, TRUE ) ;
			return FALSE;
		}
		if ( Scanner( Calibrating ) )
		{
			Warning( Translate( ~Can't quit now ... Scanner is busy calibrating~ ) );
			dlg( SetDlgHandleActionsFlag, TRUE ) ;
			return FALSE;
		}	
		
		StillScanning = Scanner( Scanning );	

	}

	if ( <StillScanning> )
	{
		Warning( Translate( ~Sorry, can't quit while the scanner is busy~ ) );
		dlg( SetDlgHandleActionsFlag, TRUE ) ;
		return FALSE;
	}

	if ( Defined( Scanner ) )
	{
		DirtyFlag = SizzleControl( GetNumeric,DirtyFlag );
		if ( <DirtyFlag> )
		{
			Msg = Translate( ~Previous scan has not been saved.  Do you want to save the scanned image before closing the dialog?~ );
			result = MessageBox( ~<Msg>~,YESNOCANCEL );
			if ( <result> == YES )
			{
				PerformActions( Action );
				OnSaveImageButton( TRUE );
				return FALSE;
			}
			else if ( <result> == NO )
			{
				if (CheckForSaveInProgress())
				{
					dlg( SetDlgHandleActionsFlag, TRUE ) ;
					return FALSE;
				}
			}
			else
			{
				dlg( SetDlgHandleActionsFlag, TRUE ) ;
				return FALSE;
			}
		}
		else
		{
			if (CheckForSaveInProgress())
			{
				dlg( SetDlgHandleActionsFlag, TRUE ) ;
				return FALSE;
			}
		}

		Scanner( SaveFilmtermData );

		Scanner( CleanupLastScan, SizzleControl );
	}

	Actions = ACTION DOC ( ~FilmtermData~ OpenOnce FilmtermDataDoc "CheckForFilmtermAdjustment(FALSE,FALSE,TRUE,FALSE );" );
	PerformActions( Actions );

	return TRUE;
}

NUMERIC FinishCloseDialog()
{
	if ( Defined( FilmDrive ) )
	{
		if (<gFilmDriveBusy> )
		{
			Warning( Translate( ~Sorry, can't quit while the film drive is moving film~ ) );
			dlg( SetDlgHandleActionsFlag, TRUE ) ;
			return FALSE;
		}
		return CloseFilmDrive( FALSE,TRUE );
	}
	else
	{
		ForgetGlobal( Scanner );

		ImageCorrections( Free,~<LastPath>~ );
		ForgetGlobal( ImageData );
		ForgetGlobal( AfdSetupData );
		ForgetGlobal( ScanErrorInfo );

		Sleep(300);
		dlg( END );
		Exit();
	}
	return FALSE;
}


NUMERIC CheckForSaveInProgress()
{
	if ( Scanner( SaveInProgress ) )
	{
		Msg = Translate( ~A scanned image is currently being saved.  Do you want to cancel the save operation?~ );

		if ( MessageBox( ~<Msg>~,YESNO ) == YES )
		{
			Scanner( CancelSave );
			if ( !DlgData(GetNumeric,AutoSaveToDisk) )
			{
				dlg( EnableControls,TRUE,SaveImageButton );
				SaveButtonDisabled = FALSE;
			}
			dlg( SetStatus,1,Translate( ~~ ) );

			return FALSE;
		}
		else
		{
			return TRUE;
		}
	}
	else
	{
		return FALSE;
	}
}


NUMERIC ReOpen()
{
	dlg( SetWindowOrder,TopMost );	// NEEDS DEBUGGED
	return Warning( Translate( ~The Scanning Control is already active.~ ) );
}



NUMERIC HandleOrderIDReturnKey()
{
	dlg( GetInput,GetStrings,OrderID,Order );

	if ( ~<OrderID>~ == ~~ )
	{
		return FALSE;
	}

	if ( !ADO( dBase,Connect,GetValuesFor,~Select ID From Orders where ID = '<OrderID>'~,OrderID ) )
	{
		if ( MessageBox( Translate(~Order <OrderID> does not exist.  Would you like to add it? ~ ),YESNO ) != YES )
		{
			return FALSE;
		}

		AddOrder();

		if ( MessageBox( Translate(~Order <OrderID> was added.  Would you like to edit it? ~ ),YESNO ) == YES )
		{
			Query = ~Select * From Orders Where ID = '<OrderID>'~;

			Actions = ACTIONS ( Doc( ~Orders~ OpenOnce OrdersDoc "Init( ~<OrderID>~,~<Query>~);" ) );
			PerformActions( Actions );
		}
	}
	return OnChangeOrderRollFrame( ~<ScannerModel>~,~<OrderID>~,~~,~~,TRUE );
}


	// HANDLES MESSAGE FROM OTHER WINDOW TO USE A PARTICULAR ORDER		
NUMERIC OnChangeOrderRollFrame( Model,OrderID,Roll,Frame,newOrder )
{
	externalStart = FALSE;
	if ( DefinedAndNotNull( newOrder ) )
	{
		externalStart = <newOrder>;
	}
	if ( !Defined( ScannerModel ) )
	{
		Init( ~<Model>~ );
		externalStart = TRUE;
	}

	UseDbCrop = TRUE;
	ChangeOrderRollFrame( ~<OrderID>~,~<Roll>~,~<Frame>~,TRUE,FALSE,FALSE,<externalStart> );
	ResyncScanList();

	if ( <externalStart> )
	{
		LoadSetup( FALSE,TRUE );
	}

	return TRUE;
}

// if started from an external window, the formatchange is done as part of LoadSetup
NUMERIC ChangeOrderRollFrame( NewOrderID,NewRoll,NewFrame,UpdateFlag,AutoDRGBAdjustments,WarnDRGBError,externalStart )
{
	startedExternally = FALSE;
	if ( DefinedAndNotNull( externalStart ) )
	{
		startedExternally = <externalStart>;
	}

	if ( ~<LastOrderID>~ != ~<NewOrderID>~ )
	{
		Actions = ACTION Doc ( OrderNotifyDoc OpenOnce OrderNotifyDoc "Init( ~<NewOrderID>~,FALSE );" );
		PerformActions( Actions );
	}
	
	OrderID = ~<NewOrderID>~;
	Roll = ~<NewRoll>~;
	Frame = ~<NewFrame>~;
	
	if ( ~<OrderID>~ != ~<CropDbOrder>~ )
	{
		UseDbCrop = TRUE;
		CropDbOrder = ~~;
	}

	if ( ~<Frame>~ == ~~ )
	{
		Frame = 1;
	}

	dlg( SetStrings,Order,~<OrderID>~,Roll,~<Roll>~,Frame,~<Frame>~ );

	OrderValid( ~<OrderID>~ );

	UpdateRollFrameCombos = FALSE;
	if ( IsNULL( ~<UpdateFlag>~ ) )
	{
		UpdateRollFrameCombos = TRUE;
	}
	else if ( !IsNULL( ~<UpdateFlag>~ ) )
	{
		if ( <UpdateFlag> )
		{
			UpdateRollFrameCombos = TRUE;
		}
	}

	DisplayDRBGError = FALSE;
	if ( !IsNULL( ~<WarnDRGBError>~ ) )
	{
		if ( <WarnDRGBError> )
		{
			DisplayDRBGError = TRUE;
		}
	}

	if ( <UpdateRollFrameCombos> )
	{
		UpdateRollsCombo(TRUE);
		UpdateFrameField();
	}

	// Reget updated values
	dlg( GetInput,GetStrings,OrderID,Order,Roll,Roll,Frame,Frame );

	Roll_aDen  = Roll_aRed  = Roll_aGrn  = Roll_aBlu  = 0;
	Roll_cDen  = Roll_cRed  = Roll_cGrn  = Roll_cBlu  = 0;

	aDen = aRed = aGrn = aBlu = 0;
	cDen = cRed = cGrn = cBlu = 0;
	tDen = tRed = tGrn = tBlu = 0;

	FilmFormat = ~~;

	GetFilmDriveVendor();
	if ( !DlgData( GetNumeric,FilmDriveEnabled ) || <FDVendor> != ~Halse~ )
	{
		// Roll DRGB Info
		Fields = ~ScanSetup,FilmType,FilmFormat,aDen,aRed,aGrn,aBlu,cDen,cRed,cGrn,cBlu~;
		Query = ~Select <Fields> From Rolls Where OrderID = '<OrderID>' And Roll = '<Roll>'~;

		if ( Ado( dBase,Connect,GetValuesFor,~<Query>~,<Fields> ) )
		{ 
			if ( ( ~<FilmType>~ != ~~ ) && ( ~<ImageFilmType>~ == ~~ ) )
			{
				FilmType = ~<$Str.$FilmType.WithOutExt>~;
				dlg( SelectString,FilmTypesComboBox,~<FilmType>~ );
			}
			if ( ~<FilmFormat>~ != ~~ ) { dlg( SelectString,FilmFormatComboBox,~<FilmFormat>~ ); }

			RollScanSetup = ~<ScanSetup>~;
			RollFilmType = ~<FilmType>~;
			RollFilmFormat = ~<FilmFormat>~;

			Roll_aDen = Numeric( ~<aDen>~ );
			Roll_aRed = Numeric( ~<aRed>~ );
			Roll_aGrn = Numeric( ~<aGrn>~ );
			Roll_aBlu = Numeric( ~<aBlu>~ );
			Roll_cDen = Numeric( ~<cDen>~ );
			Roll_cRed = Numeric( ~<cRed>~ );
			Roll_cGrn = Numeric( ~<cGrn>~ );
			Roll_cBlu = Numeric( ~<cBlu>~ );
		}
	}
	else if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not access the shared database. <theErr>~ ) );
	}

	if ( !<Rescanning> )
	{
		if ( !HandleDRGB( dBase,~<OrderID>~,~<Roll>~,~<Frame>~,<AutoDRGBAdjustments>,<DisplayDRBGError> ) )
		{
			UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);
			if ( <UseAnalyzerDRGBValues> && <DisplayDRBGError> )
			{
				Warning( Translate( ~Unable to adjust DRGB values with order/roll change.~ ) );
			}
		}
	}

	if ( ~<FilmFormat>~ != ~~ && ~<FilmFormat>~ != ~<gCurrentFilmFormat>~ && !<startedExternally> )
	{
		if ( !OnFormatChange( 3, ~Film format changed.~, FALSE, FALSE, FALSE ) )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC LoadSetup( IgnoreFilmDriveEnable, DoCalibration )
{
	ScanSetupToLoad = ~~;
	FilmTypeToLoad = ~~;
	FilmFormatToLoad = ~~;
	retval = TRUE;

	if ( ~<ImageScanSetup>~ != ~~ )
	{
		ScanSetupToLoad = ~<ImageScanSetup>~;
	}
	else if ( ~<RollScanSetup>~ != ~~ )
	{
		ScanSetupToLoad = ~<RollScanSetup>~;
	}
	else if ( ~<OrderScanSetup>~ != ~~ )
	{
		ScanSetupToLoad = ~<OrderScanSetup>~;
	}

	if ( ~<ImageFilmType>~ != ~~ )
	{
		FilmTypeToLoad = ~<ImageFilmType>~;
	}
	else if ( ~<RollFilmType>~ != ~~ )
	{
		FilmTypeToLoad = ~<RollFilmType>~;
	}
	else if ( ~<OrderFilmType>~ != ~~ )
	{
		FilmTypeToLoad = ~<OrderFilmType>~;
	}

	if ( ~<RollFilmFormat>~ != ~~ )
	{
		FilmFormatToLoad = ~<RollFilmFormat>~;
	}

	if ( ~<ScanSetupToLoad>~ != ~~ )
	{
		retval = LoadSettings( ~<ScanSetupToLoad>~, FALSE, TRUE, <IgnoreFilmDriveEnable>,FALSE,<DoCalibration> );
	}

	if ( ~<FilmFormatToLoad>~ != ~~ && ~<FilmFormatToLoad>~ != ~<gCurrentFilmFormat>~ )
	{
		dlg( SelectString,FilmFormatComboBox,~<FilmFormatToLoad>~ );
		if ( !OnFormatChange( 3, ~Film format changed.~, FALSE, FALSE, FALSE ) )
		{
			return FALSE;
		}
	}

	if ( ~<FilmTypeToLoad>~ != ~~ )
	{
		FilmTypeToLoad = ~<$Str.$FilmTypeToLoad.WithOutExt>~;
		dlg( SelectString,FilmTypesComboBox,~<FilmTypeToLoad>~ );
		retval = CheckFilmType( <DoCalibration> );
	}

	return <retval>;
}


VOID RefreshCropsComboBox(wantSelection)
{
	CurrentCropName = ~<$con.DlgData[CropName]>~;
	DlgData( SetValues,CropName,~~);

	Query = ~Select Name From Crops Where Format = '<$con.DlgData[Format]>' Order By Name~;

	if ( !PGenConList( CropsList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		CropsList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Crops table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	CropsList( MakeStringList,Crops,Name );

	dlg( SetControlFromStringList,CropsComboBox,Crops,<wantSelection> ? ~Selection~ : ~NoSelection~  );
}


/*
Not implemented 3/8/01
VOID OnDocumentFrameUpdate(Percent, TopOrBottom )
{
	Log( Session, ~The Percent is <Percent>.  TopOrBottom Is <TopOrBottom>~);
}
*/

VOID RefreshControls()
{
	UpdateFilmTypesList();

	UpdateEditorXYOffsetSetting();
		
	SetupScannerParms();

	RefreshExposureProfilesComboBox(TRUE);

	RefreshScannerProfilesComboBox(TRUE);

	RefreshOuputProfilesComboBox(TRUE);

	OnFileTypeChange(TRUE);

	OnChangeProfilesEnabled();

	SetColorControls();
	GetFilmDriveVendor();
	if ( ~<FDVendor>~ == ~Halse~ )
	{
		OnFrameRollNumbering();
	}
	if ( !<DigitalIceAvailable> )
	{	
		dlg( SetCheck,FALSE,DigitalIceCheckbox );
		dlg( Save,DigitalIceCheckbox );
	}
}


// TRANSPORT CONTROL METHODS

VOID HR500_NoFilmDriveSelected()
{
	// Restore the UI
	// Leave the other labels at their last setting

	// Disable any controls that don't apply
	dlg( SetCheck, FALSE, ContinueFrameNumCheckBox );
	dlg( SetCheck, FALSE, AutoIncRollNumbersCheckBox );
	dlg( SetCheck, FALSE, FocusEveryFrameCheckBox );
	dlg( SetCheck, FALSE, FrameToPunchCheckBox );
	dlg( SetCheck, FALSE, SequentialPunchesCheckBox );
	dlg( SetCheck, FALSE, UseAdjustedFramesCheckBox );
	dlg( SetCheck, FALSE, TwinCheckCheckBox );
	dlg( SetCheck, FALSE, AdjustFramePositionBox );
	dlg( SetCheck, FALSE, AutoSkipBlankFrameBox );
	dlg( SetCheck, FALSE, IgnoreFdaErrorsCheckBox );
	dlg( EnableControls,TRUE,ScanFromDataBaseButton );
	dlg( EnableControls,FALSE,EditFilmEditorsButton );
	dlg( EnableControls,FALSE,EditVendorButton );
	dlg( EnableControls,FALSE,EditorStaticText );
	dlg( EnableControls,FALSE,EditorComboBox );
	dlg( EnableControls,FALSE,EnableFilmDriveBox );
	dlg( EnableControls,FALSE,ViewFilmDriveControlsBox );
	dlg( EnableControls,FALSE,VendorSetupComboBox );
	dlg( EnableControls,FALSE,AdjustFramePositionBox );
	dlg( EnableControls,FALSE,AutoSkipBlankFrameBox );
	dlg( EnableControls,FALSE,EdgeSensitivityTextBox );
	dlg( EnableControls,FALSE,MinGapTextBox );
	dlg( EnableControls,FALSE,GetStripSensorStateButton );
	dlg( EnableControls,FALSE,UseAdjustedFramesCheckBox );
	dlg( EnableControls,FALSE,TwinCheckCheckBox );
	dlg( EnableControls,FALSE,SetFrameOverrideButton );
	dlg( EnableControls,FALSE,IgnoreFdaErrorsCheckBox );
	dlg( EnableControls,FALSE,FrameToPunchCheckBox,FrameToPunchPaddingField );
	dlg( EnableControls,FALSE,SequentialPunchesCheckBox );
	dlg( EnableControls,FALSE,FrameToPunchPaddingField );
	dlg( EnableControls,FALSE,VendorYOffsetStaticText );
	dlg( EnableControls,FALSE,VendorYOffsetTextBox );
	dlg( EnableControls,FALSE,VendorYOffsetClearButton );
	dlg( EnableControls,FALSE,VendorXOffsetStaticText );
	dlg( EnableControls,FALSE,VendorXOffsetTextBox );
	dlg( EnableControls,FALSE,VendorXOffsetClearButton );
	dlg( EnableControls,FALSE,VendorXOffsetZeroButton );
	dlg( EnableControls,FALSE,XSliderIFactorStaticText );
	dlg( EnableControls,FALSE,XSliderIFactorField );
	dlg( EnableControls,FALSE,DisableFrameDetectCheckbox );
	dlg( EnableControls,FALSE,GoToPunchNumberTextBox );
	dlg( EnableControls,FALSE,GoTo_Button );
	dlg( EnableControls,FALSE,EdgeSensitivityStaticText );
	dlg( EnableControls,FALSE,MinGapStaticText,MinGapLabel );
	dlg( EnableControls,FALSE,FixedAdvanceStaticText,FixedAdvanceLabel );
	dlg( EnableControls,FALSE,FixedAdvanceTextBox );

/*
	if ( RunningVersion( 5.1) )
	{
		dlg( EnableControls,FALSE,FdaSetupStaticText,FdaSetupComboBox,EditFdaButton );
	}
	else
	{
		dlg( EnableControls,FALSE,OverrideFrameButton,OverrideFrameTextBox);
	}
*/

	dlg( ShowControls,  TRUE,CutNegPromptCheckBox,PrevScanButton );
	dlg( EnableControls,TRUE,CutNegPromptCheckBox,PrevScanButton );

	dlg( EnableControls,FALSE,ContinueFrameNumCheckBox,AutoIncRollNumbersCheckBox,FocusEveryFrameCheckBox );

    SizzleControl( Set, PreScanNotification, ~~ );
    SizzleControl( Set, ScanCompleteNotification, ~~ );

	// Clear the overscan flag
	SizzleControl( SetValues, OverScan, FALSE);
	dlg( SetString,~~,StripSensorState );

	CurrentFormat = ~<$con.DlgData[Format]>~;

	// We are going to replace the following global variables
	ForgetGlobal( MagNames);
	ForgetGlobal( FullFrameWidths);
	ForgetGlobal( FullFrameHeights);
	ForgetGlobal( MinMagnifications);
	ForgetGlobal( MaxMagnifications);

	// Restore all the control strings
	StringList( OriginalFilmSizeChoices,New,InListOrder,AddStrings,~35mm~,~35mm_Slide~,~46mm~,~62mm_4.5x6~,~62mm_6x4.5~,~62mm_6x6~,~62mm_6x7~,~62mm_6x8~,~62mm_6x9~,~70mm~,~70mm_Unperfed~,~4x5~ );
	NewString( MagNames,Set,~Undefined,35mm,35mm_Slide,46mm,62mm_4.5x6,62mm_6x4.5,62mm_6x6,62mm_6x7,62mm_6x8,62mm_6x9,70mm,70mm_Unperfed,4x5~,Delimiters,~,~ );
	NewString( FullFrameWidths, Set, ~0,26,27,45,44,61,61,61,61,61,60,67,95.32~,Delimiters,~,~ );
	NewString( FullFrameHeights, Set, ~0,38,40,66,58,45,58,71,79,85,88,88,121~,Delimiters,~,~ );
	NewString( MinMagnifications,Set,~0,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5~,Delimiters,~,~ );
	NewString( MaxMagnifications,Set,~0,2.0,2.0,1.46,1.58,1.18,1.18,1.18,1.15,1.11,1.1,1.04,0.74~,Delimiters,~,~ );

	if ( Defined( Scanner ) )
	{
		if ( !<UniversalScanner> )
		{
			ForgetGlobal( MagNames);
			ForgetGlobal( FullFrameWidths);
			ForgetGlobal( FullFrameHeights);
			ForgetGlobal( MinMagnifications);
			ForgetGlobal( MaxMagnifications);

			StringList( OriginalFilmSizeChoices,New,InListOrder,AddStrings,~35mm~,~35mm_Slide~,~46mm~,~62mm_4.5x6~,~62mm_6x4.5~,~62mm_6x6~,~62mm_6x7~,~62mm_6x8~,~62mm_6x9~,~70mm~,~70mm_Unperfed~ );
			NewString( MagNames,Set,		~Undefined,35mm,35mm_Slide,46mm,62mm_4.5x6,62mm_6x4.5,62mm_6x6,62mm_6x7,62mm_6x8,62mm_6x9,70mm,70mm_Unperfed~,Delimiters,~,~ );
			NewString( FullFrameWidths, Set, ~0,26,27,45,44,61,61,61,61,61,60,67~,Delimiters,~,~ );
			NewString( FullFrameHeights, Set, ~0,38,40,66,58,45,58,71,79,85,88,88~,Delimiters,~,~ );
			NewString( MinMagnifications,Set,~0,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5~,Delimiters,~,~ );
			NewString( MaxMagnifications,Set,~0,2.0,2.0,1.46,1.58,1.18,1.18,1.18,1.15,1.11,1.1,1.04~,Delimiters,~,~ );

			if ( ~<CurrentFormat>~ == ~4x5~ )
			{
				Warning( Translate( ~The scanner is not configured to support the 4x5 film format.\nPlease select a different film format.~ ) );
			}
		}
	}
	// Reglobalize the control string variables
	Global( MagNames);

	Global( FullFrameWidths);
	Global( FullFrameHeights);
	Global( MinMagnifications);
	Global( MaxMagnifications);

	ChangeEnableSetOverscanArea( FALSE );
	//OnAllScanArea();
	MaxXIncrementsInInches = 30.00000;
	MaxXIncrementsInDisplayUnits = InchesTo<DisplayUnits>( <MaxXIncrementsInInches> );

	// Restore the film format selections - and current selection if possible
	dlg( SetControlFromStringList, ~FilmSizeChoices~, OriginalFilmSizeChoices, Update );
	dlg( SetControlFromStringList, ~FilmFormatComboBox~, OriginalFilmSizeChoices, Update );
	if ( ~<CurrentFormat>~ != ~~ )
	{
		dlg( SelectString,FilmFormatComboBox,~<CurrentFormat>~ );
	}

	dlg( GetInput );
	if ( ~<CurrentFormat>~ != ~<$con.DlgData[Format]>~ )
	{
		OnFormatChange(1, ~Film format changed.~, TRUE, TRUE, FALSE);
	}
	return;
}


VOID FilmDriveSelected()
{
	GetFilmDriveVendor();
	if ( FunctionDefined( ~<FDVendor>_FilmDriveSelected~ ) )
	{
		<FDVendor>_FilmDriveSelected( ~ScanSetups~ );
	}
}

OptionalInclude( ~ScannerDocOverrides.txt~ );
NUMERIC Init( TheModel )
{
	if ( Defined( dlg ) )
	{
		if ( ~<TheModel>~ != ~<ScannerModel>~ )
		{
			return Warning( Translate(~Already scanning with the other scanner~) ) ;
		}

		return TRUE;
	}

	ScannerModel = ~<TheModel>~;

	Global( ScannerModel );

	WaitCursor( Begin );

	Version = 5.0;
	Global( Version );

	DisplayUnits = GetPreferredUnits();
	MaxXIncrementsInDisplayUnits = InchesTo<DisplayUnits>( <MaxXIncrementsInInches> );

	if ( GetSystemSettings( ~Scanning~,~SBARules~,Value,Enabled ))
	{
		SBARules = Numeric( ~<Value>~ );
	}
	else
	{
		SetSystemSettings( ~Scanning~,~SBARules~,FALSE,TRUE );
	}

	if ( DefinedAndNotNull( IgnoreFilmDirectionOnSort ) )
	{
		IgnoreFilmDirection = <IgnoreFilmDirectionOnSort>;
	}

	Tree( Location,~[STRINGS]~,Name,FilmSizeChoices,PluckAndFree );
	StringList:	Name ~FilmSizeChoices~
		Fields: String	~35mm~
		Fields: String	~35mm_Unperfed~
		Fields:	String	~46mm~
		Fields:	String	~46mm_Unperfed~
		Fields: String	~62mm_4.5x6~
		Fields: String	~62mm_6x4.5~
		Fields:	String	~62mm_6x6~
		Fields: String	~62mm_6x7~
		Fields: String	~62mm_6x8~
		Fields: String	~62mm_6x9~
		Fields: String	~Split_70mm~
		Fields:	String	~70mm~
		Fields:	String	~70mm_Unperfed~
		Fields:	String	~4x5~
	Hang:	FilmSizeChoices	~[STRINGS]~ ;

	Tree( Location,~[STRINGS]~,Name,ScanResolutionChoices,PluckAndFree );
	StringList:	Name ~ScanResolutionChoices~
		Fields: String	~LOW~
		Fields: String	~MEDIUM~
		Fields:	String	~HIGH~
	Hang:	ScanResolutionChoices	~[STRINGS]~ ;

	Tree( Location,~[STRINGS]~,Name,FilmDriveVendorList,PluckAndFree );
	StringList: Name FilmDriveVendorList
		Fields: String	~Cut Neg~
		Fields: String	~Long Roll~
//		if ( RunningVersion( 5.1 ) )
//		{
//			Fields: String	~Long Roll Auto Frame~
//		}
		Fields: String	~Strip~	

	Hang:	FilmDriveVendorList	~[STRINGS]~ ;

	if ( !Tree( Name,HR500ScanErrorStrings,Location,~[STRINGS]~,Exists ) )
	{
		Define:	HR500ScanErrorStrings	USING DDSymbol AsSymbol HR500ScanErrorStrings
			Fields:	Value	~These strings are messages used by the HR500 Script.~
				Contains:
				{
					Define: LoadLibFailed	using DDText	Fields: Text ~Loading %1: %2~
				}
		Hang:	HR500ScanErrorStrings	~[STRINGS]~ ;

		StringList:	Name ~OutputFileTypes~
			Fields: String	~TIFF~
			Fields: String	~JPEG~
			Fields: String	~EXIF~
		Hang:	OutputFileTypes	~[STRINGS]~ ;

		StringList:	Name ~OutputFileExtensions~
			Fields: String	~.tif~
			Fields: String	~.jpg~
		Hang:	OutputFileExtensions	~[STRINGS]~ ;

		StringList:	Name ~VolumeChoices~
		Hang:	VolumeChoices	~[STRINGS]~ ;

		StringList: Name DRGBRefsList
			Fields:	String	~Default~
		Hang:	DRGBRefsList	~[STRINGS]~ ;

		StringList: Name EditorVendorList
			Fields:	String	~Bremson~
			Fields:	String	~Hicks~
			Fields:	String	~Lucht~
		Hang:	EditorVendorList	~[STRINGS]~ ;
	}

	if ( !Tree( Name,HR500ScanErrorInfo,Location,~[GENCONS]~,Exists ) )
	{
		Dictionary:	DDHR500ScanErrorInfo
			Fields:	Name APIErrorCode				Type long
			Fields:	Name ScannerErrorCode			Type long
			Fields:	Name Text						Type Text;

		Dictionary: DDHR500ScannerImageData
			Fields:	Name ImageBuffer				Type long
			Fields:	Name ImageWidth					Type long
			Fields:	Name ImageHeight				Type long
			Fields:	Name ImageDepth					Type long
			Fields: Name ImageLayout				Type Text;

		Dictionary: DDHR500AFDSetupData
			Fields:	Name ExpectedLength				Type Double	Precision	6
			Fields:	Name LengthLowerBound			Type Double	Precision	6
			Fields:	Name LengthUpperBound			Type Double	Precision	6
			Fields:	Name MinimumLength				Type Double	Precision	6
			Fields:	Name MinimumGap					Type Double	Precision	6
			Fields: Name StopOnBlanks				Type long
			Fields: Name StopOnSplices				Type long
			Fields: Name StopOnSplitFrame			Type long
			Fields:	Name EdgeDebounce				Type Double	Precision	6;

		Dictionary: DDHR500ScannerDialogData
			Fields:	Name Location					Type long
			Fields: Name GotoPunchNumber			Type Text
			Fields: Name OverrideFrameNumber		Type Text
			Fields: Name CurrentPunchPosition		Type Text
			Fields: Name xPos						Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name yPos						Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name Scanwidth					Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name Scanlength					Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name Depth						Type long LowValue 1	HighValue 3
			Fields: Name ScanAreaInPercent			Type long 

			Fields: Name OverScanXPos				Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name OverScanYPos				Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name OverScanwidth				Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name OverScanlength				Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100

			Fields:	Name ScanRotation				Type long
			Fields:	Name Icon						Type long
			Fields:	Name SaveFileType				Type Text
			Fields:	Name FileExtension				Type Text
			Fields:	Name JPEGQuality				Type long LowValue 0	HighValue 100
			Fields: Name MaxThumbNailSize			Type long
			Fields:	Name FileResolution				Type long
			Fields: Name Baud						Type long
			Fields: Name ScannerType				Type Text
			Fields: Name ScanResolution				Type Text
			Fields: Name SpeedQuality				Type long   LowValue 0	HighValue 15
			Fields: Name OpticalZoom				Type Double	LowValue (-50.0)	HighValue 50.0
			Fields: Name ScanSizeWidthLength		Type Text
			Fields: Name ScanSizeField				Type Text
			Fields: Name Volume						Type Text
			Fields: Name CustomerID					Type Text
			Fields: Name Order						Type Text
			Fields: Name Roll						Type Text
			Fields: Name Frame						Type Text
			Fields: Name FetchCompleteNotification	Type Text
			Fields: Name FlushCompleteNotification	Type Text
			Fields: Name FlushErrorNotification		Type Text
			Fields: Name FocusProgressNotification	Type Text
			Fields: Name FocusCompleteNotification	Type Text
			Fields: Name Simulating					Type long
			Fields:	Name BackupFilesPath			Type Text
			Fields: Name DumpRawData				Type long
			Fields: Name DumpRawIRData				Type long
			Fields: Name FrameToPunch				Type long
			Fields: Name FrameToPunchPadding		Type long	LowValue 0	HighValue 5
			Fields: Name OmitRollInPath				Type long
			Fields: Name SequentialPunches			Type long
			Fields:	Name PathTemplate				Type Text
			Fields: Name UseAdjustedFrames			Type long
			Fields: Name TwinCheck					Type long
			Fields: Name AutoScanWrap				Type long
			Fields: Name TraceCalls					Type long
			Fields: Name TimeCalls					Type long
			Fields: Name FilmType					Type text
			Fields:	Name Punch						Type long

			Fields: Name FrameFormat				Type Text
			Fields: Name RollFormat					Type Text

			Fields: Name Progress					Type long
			Fields: Name DisplayLastImage			Type long

			Fields: Name AutoScan					Type long
			Fields: Name ScanFromDataBase			Type long
			Fields: Name CutNegPrompt				Type long

			Fields: Name LockScannerOffsets			Type long
			Fields: Name DensityNormalization		Type long
			Fields: Name UseAnalyzerDRGBValues		Type long
			Fields: Name AutoSaveToDisk				Type Long
			Fields: Name redOverride				Type  long LowValue (-700)	HighValue 700
			Fields: Name greenOverride				Type  long LowValue (-700)	HighValue 700
			Fields: Name blueOverride				Type  long LowValue (-700)	HighValue 700
			Fields: Name contrastOverride			Type  long LowValue (-100)	HighValue 100
			Fields: Name brightnessOverride			Type  long LowValue (-700)	HighValue 700
			Fields: Name UseSBAPlus					Type long

			Fields: Name saDensity					Type  long
			Fields: Name saRed						Type  long
			Fields: Name saGreen					Type  long
			Fields: Name saBlue						Type  long

			Fields: Name rDensity					Type  long	// reference DRGB
			Fields: Name rRed						Type  long
			Fields: Name rGreen						Type  long
			Fields: Name rBlue						Type  long

			Fields: Name rfBrightness				Type  long	// reference BRGBC
			Fields: Name rfRed						Type  long
			Fields: Name rfGreen					Type  long
			Fields: Name rfBlue						Type  long
			Fields: Name rfContrast					Type  long

			Fields: Name dDensity					Type  long LowValue 0	HighValue 255
			Fields: Name dRed						Type  long LowValue 0	HighValue 255
			Fields: Name dGreen						Type  long LowValue 0	HighValue 255
			Fields: Name dBlue						Type  long LowValue 0	HighValue 255

			Fields: Name SlopeLut					Type  Text
			Fields: Name SlopeLutFile				Type  Text
			Fields: Name CropName					Type  Text

			Fields: Name ScannerProfileEnabled		Type Long
			Fields: Name ICCProfile					Type Text 

			Fields: Name OutputProfileEnabled		Type Long
			Fields: Name ICCOutputProfile			Type Text

			Fields: Name EmbedProfile				Type Long

			Fields: Name AutoDRGBAdjustments		Type Long
			Fields: Name DRGBProfile				Type Text 
			Fields: Name ReverseDRGBProfile			Type Text 
			Fields: Name DRGBProfileName			Type Text
			Fields: Name NULLProfile				Type Text
			Fields: Name DRGBRefs					Type Text

			Fields: Name TraceExposureDetermination Type Long

			Fields: Name CalibrationFile			Type Text
			Fields: Name CalibrationType			Type Text
			Fields: Name LutFile					Type Text
			Fields: Name ScanCount					Type long
			Fields: Name ScanSetup					Type Text
			Fields: Name LastScanTime				Type Double	Precision	6	Scale 2 LowValue 0
			Fields: Name LastScanFile				Type Text

			Fields: Name CropX						Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name CropY						Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name CropWidth					Type Double	Precision	6	Scale 2 LowValue 5	HighValue 100
			Fields: Name CropLength					Type Double	Precision	6	Scale 2 LowValue 5	HighValue 100

			Fields: Name Tension					Type long

			Fields: Name FilmDriveVendor			Type Text
			Fields: Name FilmDriveSetup				Type Text
			Fields: Name FilmDriveEnabled			Type long
			Fields:	Name ViewDriveControls			Type long
			Fields:	Name Hr500FdaSetup				Type Text

			Fields: Name TXOffsetPositionInUnits	Type long LowValue (-<MaxXIncrements>)	HighValue <MaxXIncrements>;
			Fields: Name TXOffsetPositionInInches	Type Text
			Fields: Name TXOffsetIncrementUnit		Type Double	Precision	1	Scale 6	LowValue 0	HighValue 1

			Fields: Name EXOffsetIncrementUnit		Type Double	Precision	1	Scale 6	LowValue 0	HighValue 1

			Fields: Name EYOffsetPositionInUnits	Type long LowValue (-<MaxYIncrements>)	HighValue <MaxYIncrements>;
			Fields: Name EYOffsetPositionInInches	Type Text
			Fields: Name EYOffsetIncrementUnit		Type Double	Precision	1	Scale 6	LowValue 0	HighValue 1

			Fields: Name FilmEditor					Type Text
			Fields: Name Format						Type Text
			Fields: Name FilmSize					Type Text

			Fields: Name XSliderPosition			Type long LowValue (-300)	HighValue 300
			Fields: Name XSliderPositionUI			Type Text
			Fields: Name XSliderIFactor				Type Double	Precision	12	Scale 12	LowValue 0	HighValue 762
			Fields: Name IgnoreXAdjustments			Type long
			Fields: Name IgnoreFdaErrors			Type long
			Fields: Name DisableFrameDetect			Type long

			Fields:	Name DisableFilmDrive			Type long
			Fields: Name AdjustFramePosition		Type long
			Fields: Name AutoSkipBlankFrame			Type long

			Fields: Name LogActivity				Type long

			Fields: Name FocusRange					Type long

			Fields: Name SharpenDelta				Type long

			Fields: Name AdaptiveSharpen			Type long
			Fields: Name SharpenAmount				Type Double Precision	6	Scale 2 LowValue 0	HighValue 2000
			Fields: Name SharpenFaster				Type long
			Fields: Name SharpenLimit				Type long LowValue (10)	HighValue 255
			Fields: Name SharpenThreshold			Type long LowValue (0)	HighValue 100
			Fields: Name SharpenBlurAmount			Type long LowValue (0)	HighValue 100

			Fields: Name NoiseReductionAmount		Type Double Precision	6	Scale 2 LowValue 0	HighValue 100

			Fields: Name LampHours					Type Text
			Fields: Name LampState					Type Text
			Fields: Name StripSensorState			Type Text

			Fields: Name EdgeSensitivity			Type long
			Fields: Name MinInterframeGap			Type Double Precision	12	Scale 12 LowValue 0 High Value 762
			Fields: Name ContinueFrameNumber		Type long
			Fields: Name AutoIncRollNumber			Type long
			Fields: Name FocusEveryFrame			Type long
			Fields: Name FixedNonFDAAdvance			Type Double	Precision	12	Scale 12 LowValue 0 High Value 762
			
			Fields: Name IgnorePredefinedFrameWidths Type long;

			Fields: Name DigitalIceCheckbox			Type long
			Fields: Name DigitalIceType				Type long
			Fields: Name CalibrationTimeout			Type long
			Fields: Name IgnoreCalTimeout			Type long

			Fields: Name SBALevel					Type long	LowValue 0			HighValue 6
			Fields: Name CMMField					Type long	LowValue 0			HighValue 200
			Fields: Name PreferenceClass			Type long	LowValue (-1500)	HighValue 2500
			Fields: Name PCWF						Type long	LowValue 0			HighValue 1500
			Fields: Name IgnoreSFS					Type long
			Fields:	Name SFSFile					Type Text
			Fields: Name ScansToSave				Type long;

		Dictionary:	DDHR500ControlDict
			Fields: Name	xPos				Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	yPos				Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	Scanwidth			Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	Scanlength			Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	OpticalZoom			Type Double	LowValue (-50.0)	HighValue 50.0
			Fields: Name	ScanSize			Type Double LowValue    0.5	HighValue 2.0
			Fields:	Name	NextInfoAdjusted	Type long
			Fields:	Name	NextPunch			Type long
			Fields:	Name	NextXOffset			Type long
			Fields: Name	NextXPos			Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	NextYPos			Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	NextScanwidth		Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	NextScanlength		Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	Depth				Type long   LowValue 1	HighValue 3
			Fields: Name	ScanAreaInPercent	Type Double	Precision	6	Scale 2	

			Fields: Name	CropX				Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	CropY				Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	CropWidth			Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	CropLength			Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100

			Fields: Name	ScannerSharpenAmount Type  long
			Fields: Name	SharpenDelta		Type  long
			Fields: Name	Rotation			Type  long
			Fields: Name	AutoBalance			Type  long
			Fields: Name	Focus				Type  long
			Fields: Name	FocusRange			Type  long
			Fields: Name	ColorCorrection		Type  long	// 1 means use old
			Fields: Name	DynamicRange		Type  long
			Fields: Name	Size				Type  long

			Fields:	Name	Punch				Type long
			Fields: Name	ScanFromDataBase	Type long

			Fields:	Name	SaveFileType		Type  Text
			Fields:	Name	FileExtension		Type  Text
			Fields:	Name	JPEGQuality			Type  long LowValue 0	HighValue 100

			Fields: Name	RenderComplete		 Type  long
			Fields: Name	SaveComplete		 Type  long
			Fields: Name	DatabaseUpdateComplete Type  long
			Fields: Name	DeleteScanObj		 Type  long
			Fields: Name	ScanObj				 Type  long
			Fields: Name	ScanObjIndex		 Type  long
			Fields: Name	SaveObjIndex		 Type  long
			Fields: Name	ImageBuffer			 Type  long
			Fields: Name	ImageBufferWidth	 Type  long
			Fields: Name	ImageBufferHeight	 Type  long
			Fields: Name	ImageBufferDepth	 Type  long
			Fields: Name	ImageBufferLayout	 Type  Text
			Fields: Name	FirstValidPixel		 Type  long
			Fields: Name	LastValidPixel		 Type  long

			Fields: Name	DisplayLastImage	Type   long
			Fields: Name	LockScannerOffsets	Type   long
			Fields: Name	DensityNormalization  Type   long
			Fields: Name	UseAnalyzerDRGBValues Type long
			Fields: Name	DirtyFlag			Type  long
			Fields: Name	AutoSaveToDisk		Type  long
			Fields: Name	redOverride			Type  long
			Fields: Name	greenOverride		Type  long
			Fields: Name	blueOverride		Type  long
			Fields: Name	contrastOverride	Type  long
			Fields: Name	brightnessOverride	Type  long 
			Fields: Name	UseImageOverrides	Type  long
			Fields: Name	UseDigitalIce		Type  long
			Fields: Name	DigitalIceType		Type  long
			Fields: Name	UseSBAPlus			Type  long

			Fields: Name	saDensity			Type  long
			Fields: Name	saRed				Type  long
			Fields: Name	saGreen				Type  long
			Fields: Name	saBlue				Type  long

			Fields: Name	dDensity			Type  long LowValue 0	HighValue 255
			Fields: Name	dRed				Type  long LowValue 0	HighValue 255
			Fields: Name	dGreen				Type  long LowValue 0	HighValue 255
			Fields: Name	dBlue				Type  long LowValue 0	HighValue 255

			Fields: Name	DRGBRef				Type Text

			Fields: Name	SBARedAdjust		Type  long 
			Fields: Name	SBAGreenAdjust		Type  long 
			Fields: Name	SBABlueAdjust		Type  long 
			Fields: Name	SBAFleshAdjust		Type  long
			Fields: Name	SbaR				Type  long 
			Fields: Name	SbaG				Type  long 
			Fields: Name	SbaB				Type  long 
			Fields: Name	SbaFlesh			Type  long
			Fields: Name	ForceSBA			Type  long
			Fields: Name	UsedSBA				Type  long

			Fields: Name	xferDenN			Type  long 
			Fields: Name	xferDenGM			Type  long 
			Fields: Name	xferDenI			Type  long 
			Fields: Name	AvgDenR				Type  long
			Fields: Name	AvgDenG				Type  long
			Fields: Name	AvgDenB				Type  long
			Fields: Name	AvgDenN				Type  long
			Fields: Name	unwtDenGM			Type  long 
			Fields: Name	unwtDenI			Type  long 
			Fields: Name	AvgHue				Type  long
			Fields: Name	AvgSat				Type  long
			Fields: Name	FilmTermFile		Type  Text
			Fields: Name	FilmTermPath		Type  Text

			Fields: Name	Order				Type  Text 
			Fields: Name	Roll				Type  Text 
			Fields: Name	Frame				Type  Text 
			Fields: Name	Path				Type  Text 
			Fields: Name	ICCProfile			Type  Text 
			Fields: Name	ScannerProfileEnabled Type Long
			Fields: Name	ICCOutputProfile	Type  Text
			Fields: Name	OutputProfileEnabled Type Long
			Fields: Name	EmbedProfile		Type Long
			Fields: Name	MaxThumbNailSize	Type  Long
			Fields: Name	FetchTimeout		Type  Long

			Fields: Name	XOffset					Type  Long
			Fields: Name	YOffset					Type  Double Precision 6
			Fields: Name	EYOffsetIncrementUnit	Type  Double Precision 2	Scale 6 LowValue 0	HighValue 1

			Fields: Name	RawImageBuffer		Type  long

			Fields: Name	FetchCompleteNotification	Type Text;
			Fields: Name	FlushCompleteNotification	Type Text;
			Fields: Name	FlushErrorNotification		Type Text;
			Fields: Name	FocusProgressNotification	Type Text;
			Fields: Name	FocusCompleteNotification	Type Text;
			Fields: Name	FocusErrorNotification		Type Text;
			Fields: Name	FocusWarningNotification	Type Text;
			Fields: Name	FocusCancelNotification		Type Text;
			Fields: Name	PreScanNotification			Type Text;
			Fields: Name	ScanCompleteNotification	Type Text;
			Fields: Name	ScanErrorNotification		Type Text;
			Fields: Name	FetchErrorNotification		Type Text;
			Fields: Name	FilmDriveAction				Type Text;
			Fields: Name	RenderOverScanError			Type Text;
			Fields: Name	RenderOverScanComplete		Type Text;
			Fields: Name	FrameDetectErrorNotification Type Text;
			Fields: Name	LoadCompleteNotification	Type Text;
			Fields: Name	UnloadCompleteNotification	Type Text;
			Fields: Name	SpliceDetectedNotification  Type Text;

			Fields: Name	AutoSkipFDABlankFrame		Type long;
			Fields: Name	FrameStatus					Type long;

			Fields: Name	SaveStartTime		Type long;
			Fields: Name	ScanStartTime		Type long;
			Fields: Name	DataAvailableTime	Type long;
			Fields: Name	EdgeCollectStartTime	Type long;
			Fields: Name	EdgeCollectCompleteTime	Type long;
			Fields: Name	FrameDetectStartTime	Type long;
			Fields: Name	FrameDetectCompleteTime	Type long;
			Fields: Name	FetchCompleteTime	Type long;
			Fields: Name	FlushCompleteTime	Type long;
			Fields: Name	RenderOverScanStartTime	Type long;
			Fields: Name	RenderOverScanCompleteTime	Type long;
			Fields: Name	DumpRawData			Type long 
			Fields: Name	DumpRawIRData		Type long 
			Fields: Name	TraceCalls			Type long 
			Fields: Name	TimeCalls			Type long 

			Fields: Name	LastScanX			Type long
			Fields: Name	LastScanY			Type long
			Fields: Name	LastScanWidth		Type long
			Fields: Name	LastScanHeight		Type long
			Fields: Name	LastPixelSumming	Type long
			Fields: Name	LastMagPosition		Type double

			Fields: Name	FullFrameWidth		Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	FullFrameHeight		Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100

			Fields: Name	TestScan			Type long

			Fields: Name	OverScan			Type long
			Fields: Name	OverScanYPos		Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	OverScanHeight		Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	OverScanFrameHeight	Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	OverScanXPos		Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	OverScanWidth		Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	OverScanFrameWidth	Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	WaitingForOverScan	Type long
			Fields: Name	WaitingForDisplay	Type long
			Fields: Name	AdjustingNextFrame	Type long
			Fields: Name	FDAErrorOnPrevious	Type long
			Fields: Name	FDAErrorOnCurrent	Type long
			Fields: Name	AutoFDAErrorHandlingEnabled Type long
			Fields: Name	SavedAutoScanState			Type long
			Fields: Name	ImageSizeInMM				Type long
			Fields: Name	FilmEdge					Type long
			Fields: Name	NewStrip					Type long
			Fields: Name	FuzzyPositioningFactor		Type Double Precision 6
			Fields: Name	AlignmentFlag				Type long
			Fields: Name	UseAdjustedFrames			Type long
			Fields: Name	TwinCheck					Type long
			Fields: Name	FramePosition				Type Double Precision	6 
			Fields: Name	IgnoreFdaErrors				Type long
			Fields: Name	FilmDriveType				Type long

			Fields: Name	OverscanFilmType	Type long
			Fields: Name	EdgeSensitivity		Type long
			Fields: Name	MinGap				Type long
			Fields: Name	FilmPosition		Type Double Precision 6
			Fields: Name	FilmStatus			Type long
			Fields: Name	SkippingBlankFilm	Type long
			Fields: Name	DisableFrameDetect	Type long
			Fields: Name	LastMoveDirection	Type long

			Fields: Name	LogActivity			Type long

			Fields:	Name	FileResolution		Type long

			Fields: Name	AdaptiveSharpen		Type long
			Fields: Name	SharpenAmount		Type  Double	Precision	6	Scale 2 LowValue 0	HighValue 2000
			Fields: Name	SharpenFaster		Type long
			Fields: Name	SharpenLimit		Type long
			Fields: Name	SharpenThreshold	Type long
			Fields: Name	SharpenBlurAmount	Type long
			
			Fields: Name	NoiseReductionAmount Type  Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			
			Fields: Name	ExposureTime		Type Double	Precision	6

			Fields: Name	SBALevel			Type long	LowValue 0			HighValue 6
			Fields: Name	CMM					Type long	LowValue 0			HighValue 200
			Fields: Name	PreferenceClass		Type long	LowValue (-1500)	HighValue 2500
			Fields: Name	PCWF				Type long	LowValue 0			HighValue 1500
			Fields:	Name	IgnoreSFS			Type long
			Fields:	Name	SFSFile				Type Text
			Fields:	Name	FilmType			Type Text
			Fields: Name	RescanningFrame		Type long

			Fields:	Name	StopOnSplices		Type long
			Fields:	Name	ExpectedFrameLength	Type long
			Fields:	Name	StopOnSplitFrames	Type long
			Fields: Name    StopOnBlanks        Type long

			Fields: Name	ScansToSave			Type long LowValue (10) HighValue (9999)

			Fields:	Name	AvgDenNKey			Type long
			Fields:	Name	AvgDenRGBKey		Type long
			Fields:	Name	HueSatKey			Type long
			Fields:	Name	SBAFleshKey			Type long
			Fields: Name	TotalMatching		Type long

			Fields: Name	EdgeDetectStatus	Type long
			Fields: Name	FrameEdgePosition	Type long
			Fields: Name	DetectedFrameLength	Type long
			Fields: Name	PrecedingGapLength	Type long
			Fields: Name	ColorType			Type long
			;
	}

	NewString( ResolutionNames,	Set,~LOW,MEDIUM,HIGH~,Delimiters,~,~ );
	Global( ResolutionNames );
	NewString( Resolutions,		Set,~250,500,1000~,Delimiters,~,~ );
	Global( Resolutions );
	NewString( PixelSumming, Set, ~4,2,1~,Delimiters,~,~ );
	Global( PixelSumming );

	Tree( Location,~[GENCONS]~,Name,ScanErrorInfo,PluckAndFree );
	Define: ScanErrorInfo Using DDHR500ScanErrorInfo 
			Fields: APIErrorCode			0
					ScannerErrorCode		0
					Text					~~
	Hang:	ScanErrorInfo	~[GENCONS]~ ;

	Define: ImageData Using DDHR500ScannerImageData 
			Fields: ImageBuffer					0
					ImageWidth					0
					ImageHeight					0
					ImageDepth					0
					ImageLayout					~~
	;
	Global( ImageData );

	Define: AfdSetupData Using DDHR500AFDSetupData
			Fields:	ExpectedLength				0
					LengthLowerBound			0
					LengthUpperBound			0
					MinimumLength				0
					MinimumGap					0.006
					StopOnBlanks				0
					StopOnSplices				0
					StopOnSplitFrame			0
					EdgeDebounce				0.005
	;
	Global( AfdSetupData );

	Define: DlgData Using DDHR500ScannerDialogData 
			Fields: Location					0
					xPos						50.
					yPos						50.
					ScanWidth					100.
					ScanLength					100.
					OverScanXPos				50.
					OverScanYPos				50.
					OverScanWidth				100.
					OverScanLength				100.
					ScanAreaInPercent			1
					FileResolution				250
					ScanResolution				250
					DisplayLastImage			TRUE
					ScanFromDataBase			TRUE
					JPEGQuality					100
					SaveFileType				~EXIF~
					FileExtension				~.jpg~
					MaxThumbNailSize			500
					Baud						9600
					Format						~35mm~
					LutFile						~~
					ScannerProfileEnabled		1
					EmbedProfile				0
					TraceExposureDetermination  1
					CalibrationFile				~~
					CalibrationType				~All~
					FilmType					~Vericolor III VPS~
					Roll						~1~
					Frame						~001~
					Progress					0
					ScanCount					0
					LastScanTime				0 
					CropName					~~
					CropX						50.
					CropY						50.
					CropWidth					100.
					CropLength					100.
					Volume						~<$App.ShareDirectory>\OrderImages~
					FilmDriveVendor				~Cut Neg~
					SlopeLut					~SlopeLut~
					LockScannerOffsets			FALSE
					DensityNormalization		FALSE
					UseAnalyzerDRGBValues		TRUE
					UseSBAPlus					FALSE
					AutoSaveToDisk				TRUE
					AutoDRGBAdjustments			1
					CustomerID					~Lab~
					Order						~Test~
					FrameFormat					~<$[Symbols].FrameFormat[Value]>~
					RollFormat					~<$[Symbols].RollFormat[Value]>~
					ScannerType					~HR500~
					OpticalZoom					0
					ScanSizeWidthLength			0
					ScanSizeField				0
					Punch						0

					TXOffsetPositionInUnits		0
					TXOffsetPositionInInches	~0.0"~
					TXOffsetIncrementUnit		0.

					EXOffsetIncrementUnit		0.

					EYOffsetPositionInUnits		0
					EYOffsetPositionInInches	~0.0"~
					EYOffsetIncrementUnit		0.
					
					XSliderIFactor				0

					IgnoreXAdjustments			0
					IgnoreFdaErrors				0
					DisableFilmDrive			0
					DumpRawData					0
					DumpRawIRData				0
					FrameToPunch				0
					FrameToPunchPadding			5
					OmitRollInPath				0
					PathTemplate				~~
					UseAdjustedFrames			0
					TwinCheck					0
					AutoScanWrap				0
					TraceCalls					0
					TimeCalls					0
					FocusRange					300
					DRGBProfile					~<$App.Directory>\Scan\Hr500\HR5v5.pf~
					ReverseDRGBProfile			~<$App.Directory>\Scan\Hr500\RevHR500Exp.pf~
					DRGBProfileName				~HR500 Exposure~
					LogActivity					0
					CutNegPrompt				1
					AdaptiveSharpen				FALSE
					SharpenDelta				0
					SharpenAmount				0
					SharpenFaster				1
					SharpenLimit				150
					SharpenThreshold			90
					SharpenBlurAmount			0
					NoiseReductionAmount		0
					EdgeSensitivity				40.
					MinInterframeGap			0.
					IgnorePredefinedFrameWidths	FALSE
					ContinueFrameNumber			0
					AutoIncRollNumber			0
					FocusEveryFrame				0
					FixedNonFDAAdvance			0

					DigitalIceCheckbox			0
					DigitalIceType				<kDICELevelLow>
					CalibrationTimeout			3
					IgnoreCalTimeout			0

					SBALevel					0
					CMMField					100
					PreferenceClass				0
					PCWF						700
					IgnoreSFS					0
					SFSFile						~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~
					BackupFilesPath				~<$App.Directory>\Scan\HR500~

					ScanRotation				0
					SpeedQuality				0

					dDensity					0
					dRed						0
					dGreen						0
					dBlue						0
					rfBrightness				0
					rfRed						0
					rfGreen						0
					rfBlue						0
					rfContrast					0
					rDensity					0
					rRed						0
					rGreen						0
					rBlue						0
					brightnessOverride			0
					redOverride					0
					greenOverride				0
					blueOverride				0
					contrastOverride			0

					ScansToSave					0
	;
	Global( DlgData );

	SpeedQualityLowVal = DlgData(GetAttrInfo, SpeedQuality, LowValue);
	SpeedQualityHighVal = DlgData(GetAttrInfo, SpeedQuality, HighValue);

	StatusBarText( Translate( ~Loading scanning control~ ) );

	DefineDialog();

	GenDlg( dlg,Definition,ScannerDlgDefinition,Data,DlgData,Document,$Doc.This,New,Temporary );
	Global( dlg );

	SetupSizzleControl();

	dlg( GetInput );

	// Forced to Cut Neg/No Film Drive
	<TheModel>_NoFilmDriveSelected();

	UpdateCrop( FALSE );

	LoadSettings(~~, TRUE, FALSE, FALSE,TRUE,TRUE );
	UpdateScanSize( FALSE,FALSE,TRUE );
	SetupScannerParms();

	Action = STR ( UpdateRollsCombo(TRUE); );
	QueueContentsAfter( Action,500 );

	// TBD - remove ????? ResyncScanList();

	//WaitCursor( End );

	StatusBarText( Translate( ~Scanning control is ready~ ) );

	//SizzleControl( Set,DumpRawData,1 );

	//HeapCheck( Statements ); // THIS FOR DEBUGGING ONLY

	return WaitCursor( End );
}

RefreshRoutine = STR ( OnDocumentRefresh(%ld) );

if ( !Semaphore( HR500Sem,Create,1,1,HR500Scanner ) )
{
	Warning( ~You are currently using the HR500~ );
	Exit();
}

if ( !HR500Sem( Lock,5 ) )
{
	Warning( ~You are currently using the HR500~ );
	Exit();
}

//Init( ~HR500~ );

