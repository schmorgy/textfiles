IncludeClass( BaseGrid);

VOID BPC8000CreoGrid::BPC8000CreoGrid()					// CONSTRUCTOR
{
	TableName = ~BookProductsForC8000Creo~;
	DocumentQuery = ~Select * from <TableName> Order By ProductID~;
	Title = ~BPC8000Creo~;
	WindowWidth = WindowHeight = 30;
	HelpFile = ~AdminHelpFile~;
	HelpPage = ~OrderItems.htm~;
}

STR BPC8000CreoGrid::GetKey( &Item )			{ return ~ProductID = '<$con.Item[ProductID]>'~; }  // PRIMARY KEY FOR THE TABLE

VOID BPC8000CreoGrid::OnAddRecord( &NewRow )	{ NewRow( SetValues,Inkname,~~ ); }

NUMERIC BPC8000CreoGrid::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[ProductID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ProductID name cannot be blank.~ ) ); }

	return TRUE;
}

VOID BPC8000CreoGrid::SetQuery(Query)
{
	DocumentQuery = ~<Query>~;
}

VOID BPC8000CreoGrid::SetParams(TheTitle,Query)
{
	DocumentQuery = ~<Query>~;
	Title = ~<TheTitle>~;
	SetTitle(~<TheTitle>~);
}

NUMERIC Init(ThisTitle,Query)
{
	if (Defined(Grid))
	{
		Grid.SetParams(~<ThisTitle>~,~<Query>~);
		Grid.RefreshListView();
		return TRUE;
	}

	Class( BPC8000CreoGrid,Extends,BaseGrid );

	BPC8000CreoGrid( New,Grid );
	Grid.DefineWindow();
	Grid.SetParams(~<ThisTitle>~,~<Query>~);
	Grid.Init();

	return Global( Grid );
}
