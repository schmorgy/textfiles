
VOID RefreshDoc()
{
	RefreshListView();
}


NUMERIC RefreshListView()
{
	KillTimer( 0 );

	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <DocumentQuery>. <theErr>~ );
	}

	SetDocumentData( List(GetObject) );
	
	DataWindow( StatusBar,Text,~Refreshing~ );
	DataWindow( RefreshWindow );
	DataWindow( StatusBar,Text,~~ );

	return TRUE;
}


NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,Changed,Original,ChangedRow,IsNewRow ) )
		{ return Warning( Translate( ~There was no changed row.~ ) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$Con.Changed[Vendor]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Vendor cannot be blank.~ ) ); }

	if ( ~<$Con.Changed[FilmFormat]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  FilmFormat cannot be blank.~ ) ); }

	Key = STR ( Vendor = '<$Con.Original[Vendor]>' AND FilmFormat = '<$Con.Original[FilmFormat]>' );

	Query = ~Select * From Editors Where <Key>~;
	
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	if ( !List( UpdateFrom,Changed,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( ~Could not update Printer Model record where <Key>. <theErr>~ );
	}
	
	DataView( CommitChanges );
	
	return TRUE;
}



NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,SelectedRows ) )		
		{ return Warning( ~There was no row selected to delete~ ); }

	Count = SelectedRows( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There were no rows selected~ ) ); }

	if ( MessageBox( Translate( ~Are you sure you want to delete the <Count> selected rows?~ ),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not connect to the database. <theErr>~ );
	}

	StringList( RowsToDelete,New );

	while ( SelectedRows( GetNext,Item ) )
	{
		Key = STR ( Vendor = '<$con.Item[Vendor]>' AND FilmFormat = '<$con.Item[FilmFormat]>' );
		 
		Cmd = ~Delete From Editors Where <Key>~;

		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			Warning( ~Database update failed: <Cmd>  <theErr>~ );
			break;
		}

		RowsToDelete( AddString,SelectedRows(GetCurrentPosition) );
	}
		
	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}



NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );
	
	RowBeingAdded = DataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( ~You are too low on memory to add any more rows~ ); }

	DataView( SetActiveCell,<RowBeingAdded>,Vendor );

	return TRUE;
}


NUMERIC RightClickInListView()
{
	DataView( DisplayMenu,ListViewMenu );

	return TRUE;
}


NUMERIC OnCloseDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	DataWindow( ForceCloseWindow );

	return TRUE;
}


NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new printer models that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}


FirstTime = TRUE; // Only open a new window the first time


NUMERIC Init( Title,DocumentQuery )
{
	DataWindow( Set,Title,~Editors~ );

	Global( DocumentQuery );

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !Ado( dBase,Connect ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
		}

		if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			Error( Translate( ~Database Query Failed: <DocumentQuery>. <theErr>~ ) );
		}

		SetDocumentData( List(GetObject) );

		if ( !DataWindow( CreateWindow,~Editors~ ) )
		{ 
			Error( Translate( ~Failed to create the window for Editors~ ) ); 
		}

		return TRUE;
	}

	RefreshListView();

	return TRUE;
}


NUMERIC AllOptions()
{
	return DataView( DisplayMenu,ListViewMenu,0,0 );
}


AllowAddsAndDeletes = FALSE;

Define:	ListViewMenu Using DDMenuDef AsSymbol ListViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{
		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )
	
		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

			Define:	DeleteRecord	using	DDMenuItemDef
				Fields:	Text		Translate( ~&Delete~ )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )
	}


Include: ~DefineStdGridButtons~;

ButtonWidth = 55;  ButtonHeight = 20;  hGap = 1; vGap = 2;


if ( !GenCon( EditorsTableDefinition,GetFrom,Editors,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The Editors Table is not properly defined~ ); }



Define: DataWindow Using DDWinDef
	Fields:		Title					~Editors~
				Position				0 70 40 25
				IsPositionPercent		T
				EnableStatusBar			F
				TypeName				SplitterWnd
				SplitterRows			~2 10 90~
				SplitterColumns			1


	Contains:	INLISTORDER
	{
			Define: ControlView Using DDViewDef AsSymbol ControlView
		Fields:			ViewType				FormView
						KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
						HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "Editors.htm" )
			Contains:
			{
				position = DefineStdGridButtons(Editor) + 10;
			}

		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				~ListView~
					GridControlTypes		EditorsTableDefinition(GetReferenceTo,Fields) 
					ChangeRecordActionsText ACTION Exec ( ChangeRecord(); )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord(); )
					RClickUpActionsText		ACTION Exec ( RightClickInListView(); )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "Editors.htm" )
					CloseActionsText		ACTION Call ( OnCloseDataView() ) ;
	}
	
