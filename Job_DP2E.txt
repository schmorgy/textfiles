
// The relationship between PreviewOptions and menu definitions are as follows:
// These are the initial default settings to be used.
// At startup, in the startup.txt file, we look up the user name in the database
// and find that user's current settings for these preview options.
// startup.txt copies the database values to the PreviewOptions GenCon.
// Also, when the user selects the menu option, the inverse value is copied
// to the preview options GenCon.  Note that the names of fields are significant.
// The ViewSettings menu definition GC has these field names, prefixed with
// "ViewSettings" (i.e. "ViewSettingsShowBackground").  See UpdateViewMenuFrom( &PreviewOptions )
// in Startup.txt

Define:		PreviewOptions Using DDPreviewOptions
	Fields: 	ShowBoxes				~F~
	Fields: 	ShowPrompts				~F~
	Fields:		ShowWarningsBox			~T~
	Fields:		HighestResolution		~F~
	Fields:     WarnIfColorMgtMissing   ~T~
	Fields:		PreferredUnits			~Inches~
Hang:  PreviewOptions ~[GenCons]~;

Define:		ImageOptions Using DDImageOptions
	Fields: 	ImageCompare			0
Hang:  ImageOptions ~[GenCons]~;

Define: BoxColors Using DDBoxColors
	Fields: 	ImageNodeBoxesInsideRed		~0~
	Fields: 	ImageNodeBoxesInsideGreen	~255~
	Fields: 	ImageNodeBoxesInsideBlue	~0~
	Fields:		ImageNodeBoxesOutsideRed	~255~
	Fields:		ImageNodeBoxesOutsideGreen	~0~
	Fields:		ImageNodeBoxesOutsideBlue	~0~
	Fields:		TextNodeBoxesInsideRed		~0~
	Fields:		TextNodeBoxesInsideGreen	~0~
	Fields:		TextNodeBoxesInsideBlue		~0~
	Fields:		TextNodeBoxesOutsideRed		~255~
	Fields:		TextNodeBoxesOutsideGreen	~255~
	Fields:		TextNodeBoxesOutsideBlue	~255~
	Fields:		ResizeNodeBoxesOutsideRed	~0~
	Fields:		ResizeNodeBoxesOutsideGreen	~255~
	Fields:		ResizeNodeBoxesOutsideBlue	~0~
	Fields:		ResizeTextNodeBoxesOutsideRed	~255~
	Fields:		ResizeTextNodeBoxesOutsideGreen	~0~
	Fields:		ResizeTextNodeBoxesOutsideBlue	~0~
Hang: BoxColors  ~[GenCons]~;

Define: DragDropDialogBoxInfo Using DDDragDropDialogBoxInfo
	Fields:			MainText		~What do you want to do?~
	Fields:			Title			~Share Node Contents~
	Fields:			SwitchImagesText		~Switch Images~
	Fields:			CopyPixelsText			~Copy Pixels~
	Fields:			CopyCropText			~Copy Crop~
	Fields:			SameFileAsText			~Same File As~
	Fields:			SwitchImagesValue		1
	Fields:			CopyPixelsValue			0
	Fields:			CopyCropValue			0
	Fields:			SameFileAsValue			0
	Fields:			SetWindowPos	1
	Fields:			X				250
	Fields:			Y				50
	Fields:			Width			250
	Fields:			Height			200
	Fields:			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "ImageDragOptions.htm" )

Hang: DragDropDialogBoxInfo  ~[GenCons]~;

Define: CountableDialogBoxInfo Using DDCountableDialogBoxInfo
	Fields:			MainText		~What do you want to do?~
	Fields:			Title			~Maintain Countable Nodes~
	Fields:			MakeSelectedCountableText		~Make Selected Nodes Countable~
	Fields:			MakeSelectedCountableTooltip			~Make Selected Nodes Countable.  This may change the node IDs of these nodes for you.~
	Fields:			ResequenceCountableText			~Resequence Countable Nodes~
	Fields:			ResequenceCountableTooltip			~Resequence the countable nodes to 1,2,3,.... etc.   School labs must have nodes in sequential order to ensure correct automated job population.~
	Fields:			ChangeNodeIDText			~Change Node ID of the First Selected Node To:~
	Fields:			ChangeNodeIDTooltip			~For advanced users only.  This changes the node ID of the first selected node to a desired value.  This is useful if you want to use KPIS jobs using fixed node numbers.~
	Fields:			MakeSelectedUncountableText			~Make Selected Nodes Uncountable~
	Fields:			MakeSelectedUncountableTooltip			~Make Selected Nodes Uncountable.  This may change the node IDs of these nodes for you.~
	Fields:			NodeNumberTooltip			~Enter the desired node number.  The node number must be greater than 0 and be unused in other nodes.~
	Fields:			MakeSelectedCountableValue		1
	Fields:			ChangeNodeIDValue			0
	Fields:			ResequenceCountableValue			0
	Fields:			MakeSelectedUncountableValue			0
	Fields:			NodeNumber	1
	Fields:			SetWindowPos	1
	Fields:			X				550
	Fields:			Y				120
	Fields:			Width			330
	Fields:			Height			230
	Fields:			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "CountableNodeOptions.htm" )

Hang: CountableDialogBoxInfo  ~[GenCons]~;


Define: AlignDialogBoxInfo Using DDAlignDialogBoxInfo
	Fields:			MainText		~What do you want to do?~
	Fields:			Title			~Align Nodes~
	Fields:			AlignTopText		~Align Top Edges~
	Fields:			AlignBottomText			~Align Bottom Edges~
	Fields:			AlignLeftText			~Align Left Edges~
	Fields:			AlignRightText			~Align Right Edges~
	Fields:			AlignRightValue		1
	Fields:			AlignLeftValue			0
	Fields:			AlignTopValue			0
	Fields:			AlignBottomValue			0
	Fields:			SetWindowPos	1
	Fields:			X				400
	Fields:			Y				80
	Fields:			Width			280
	Fields:			Height			220
Hang: AlignDialogBoxInfo  ~[GenCons]~;


// Define Translation Tables for keywords
Define: JustificationTranslationLeft Using DDListBoxItemTranslations
	Fields: FieldName				~Justification:~
	Fields: ListBoxItemText			~Left~
	Fields: FieldValue				~L~
Hang: JustificationTranslationLeft  ~[UI TranslationTables]~
Define: JustificationTranslationRight Using DDListBoxItemTranslations
	Fields: FieldName				~Justification:~
	Fields: ListBoxItemText			~Right~
	Fields: FieldValue				~R~
Hang: JustificationTranslationRight  ~[UI TranslationTables]~
Define: JustificationTranslationCenter Using DDListBoxItemTranslations
	Fields: FieldName				~Justification:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~C~
Hang: JustificationTranslationCenter  ~[UI TranslationTables]~
// Define Translation Tables for Justification keyword
Define: AlignmentTranslationTop Using DDListBoxItemTranslations
	Fields: FieldName				~TextAlignment:~
	Fields: ListBoxItemText			~Top~
	Fields: FieldValue				~T~
Hang: AlignmentTranslationTop  ~[UI TranslationTables]~
Define: AlignmentTranslationBottom Using DDListBoxItemTranslations
	Fields: FieldName				~TextAlignment:~
	Fields: ListBoxItemText			~Bottom~
	Fields: FieldValue				~B~
Hang: AlignmentTranslationBottom  ~[UI TranslationTables]~
Define: AlignmentTranslationCenter Using DDListBoxItemTranslations
	Fields: FieldName				~TextAlignment:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~C~
Hang: AlignmentTranslationCenter  ~[UI TranslationTables]~
Define: GroupTranslationNone Using DDListBoxItemTranslations
	Fields: FieldName				~TGroup:~
	Fields: ListBoxItemText			~None~
	Fields: FieldValue				~~
Hang: GroupTranslationNone  ~[UI TranslationTables]~
Define: CropTranslationCrop Using DDListBoxItemTranslations
	Fields: FieldName				~AutoCropMode:~
	Fields: ListBoxItemText			~Crop~
	Fields: FieldValue				~C~
Hang: CropTranslationCrop  ~[UI TranslationTables]~
Define: CropTranslationFit Using DDListBoxItemTranslations
	Fields: FieldName				~AutoCropMode:~
	Fields: ListBoxItemText			~Fit~
	Fields: FieldValue				~F~
Hang: CropTranslationFit  ~[UI TranslationTables]~
Define: CropTranslationPreserve Using DDListBoxItemTranslations
	Fields: FieldName				~AutoCropMode:~
	Fields: ListBoxItemText			~Preserve~
	Fields: FieldValue				~P~
Hang: CropTranslationPreserve  ~[UI TranslationTables]~

Define: CropToolSampleSizePoint Using DDListBoxItemTranslations
	Fields: FieldName				~SampleSize~
	Fields: ListBoxItemText			~Point~
	Fields: FieldValue				~0~
Hang: CropToolSampleSizePoint  ~[UI TranslationTables]~
Define: CropToolSampleSize3 Using DDListBoxItemTranslations
	Fields: FieldName				~SampleSize~
	Fields: ListBoxItemText			~3 x 3 average~
	Fields: FieldValue				~1~
Hang: CropToolSampleSize3  ~[UI TranslationTables]~
Define: CropToolSampleSize5 Using DDListBoxItemTranslations
	Fields: FieldName				~SampleSize~
	Fields: ListBoxItemText			~5 x 5 average~
	Fields: FieldValue				~2~
Hang: CropToolSampleSize5  ~[UI TranslationTables]~

Define: TraceN Using DDListBoxItemTranslations
	Fields: FieldName				~Trace:~
	Fields: ListBoxItemText			~Trace Off~
	Fields: FieldValue				~N~
Hang: TraceN  ~[UI TranslationTables]~
Define: TraceF Using DDListBoxItemTranslations
	Fields: FieldName				~Trace:~
	Fields: ListBoxItemText			~Trace And Delete on Success~
	Fields: FieldValue				~F~
Hang: TraceF  ~[UI TranslationTables]~
Define: TraceY Using DDListBoxItemTranslations
	Fields: FieldName				~Trace:~
	Fields: ListBoxItemText			~Trace On~
	Fields: FieldValue				~Y~
Hang: TraceY  ~[UI TranslationTables]~;


Define: RectTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndRectOperation]~	
				LClickDnActionsText ~[InitRectOperation]~  
//				ShiftKeyDnCursor ~CROSS~	
//				ShiftKeyUpCursor ~CROSS~
				AlternateCursor2 ~CROSS~
				AlternateCursor ~hmove~	
				MouseMoveActionsText ~[RectOperation]~
				DeselectActionsText	~[TerminateRectOperation]~
				ToolbarButtonGenConName ~LayoutToolbarRectTool~
				StatusMessage ~Click and drag to draw a rectangle.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
Hang:  RectTool ~UI Tools~ ;

Define: ImageCropTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndRectOperation]~	
				LClickDnActionsText ~[InitRectOperation]~  
				ShiftKeyDnCursor ~CROSS~	
				ShiftKeyUpCursor ~CROSS~
				AlternateCursor ~hmove~	
				MouseMoveActionsText ~[RectOperation]~
				DeselectActionsText	~[TerminateRectOperation]~
				ToolbarButtonGenConName ~LayoutToolbarImageCropTool~
				StatusMessage ~Shift-Ctrl-Click and drag to draw a rectangle, Ctrl-Click to reduce crop, Shift-Click to enlarge crop~
Hang:  ImageCropTool ~UI Tools~ ;


Define: WhiteBalanceTool Using DDToolDef
	Fields:		LClickUpActionsText ~[Noop]~	// to force drawtool:handleActions setCapture call  11/2/1
				LClickDnActionsText ~[WhiteBalance]~  
				ShiftKeyDnCursor ~CROSS~	
				ShiftKeyUpCursor ~CROSS~
				AlternateCursor ~hmove~	
				MouseMoveActionsText ~~
				ToolbarButtonGenConName ~LayoutToolbarWhiteBalanceTool~
				StatusMessage ~Shift-Ctrl-Click and drag to draw a rectangle, Ctrl-Click to reduce crop, Shift-Click to enlarge crop~
Hang:  WhiteBalanceTool ~UI Tools~ ;


Define: OvalTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndOvalOperation]~	
				LClickDnActionsText ~[InitOvalOperation]~  
				MouseMoveActionsText ~[OvalOperation]~
//				ShiftKeyDnCursor ~CROSS~	
//				ShiftKeyUpCursor ~CROSS~	
				AlternateCursor ~hmove~	
				AlternateCursor2 ~CROSS~	
				DeselectActionsText	~[TerminateOvalOperation]~
				ToolbarButtonGenConName ~LayoutToolBarDrawOval~
				StatusMessage ~Click and drag to draw an oval.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
Hang:  OvalTool ~UI Tools~ ;

Define: WandTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndSelectByColor]~	
				LClickDnActionsText ~[InitSelectByColor]~  
				MouseMoveActionsText ~[SelectByColor]~
//				ShiftKeyDnCursor ~Cursors\cursor23.cur~	
//				ShiftKeyUpCursor ~Cursors\cursor23.cur~
				ShiftKeyDnCursor ~MagicWand~	
				ShiftKeyUpCursor ~MagicWand~
				ToolbarButtonGenConName ~LayoutToolBarMagicWand~
				StatusMessage ~Click on a point to select by color.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
				DeselectActionsText	~[TerminateSelectByColor]~
	
Hang:  WandTool ~UI Tools~ ;

Define:	RectToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	RectToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce RectToolSetupDialog )

	}
MENU:	RectToolSetupMenu ~[UI Menus]~ ;

Define:	ImageCropToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	ImageCropToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce ImageCropToolSetupDialog )

	}
MENU:	ImageCropToolSetupMenu ~[UI Menus]~ ;

Define:	MagicWandToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	MagicWandToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( WandToolParam OpenOnce MagicWandToolSetupDialog )

	}

MENU:	MagicWandToolSetupMenu ~[UI Menus]~ ;

Define:	PolygonToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	PolygonToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( PolygonToolParam OpenOnce PolygonToolSetupDialog )

	}

MENU:	PolygonToolSetupMenu ~[UI Menus]~ ;

Define:	OvalToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	OvalToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( OvalToolParam OpenOnce OvalToolSetupDialog )

	}

MENU:	OvalToolSetupMenu ~[UI Menus]~ ;

Define:	ResizeToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	ResizeToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( ResizeToolParam OpenOnce ResizeToolSetupDialog )
	}

MENU:	ResizeToolSetupMenu ~[UI Menus]~ ;


Define:	GridToolSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	GridToolSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( GridToolParam OpenOnce GridToolSetupDialog )
	}

MENU:	GridToolSetupMenu ~[UI Menus]~ ;



Define: ZoomTool Using DDToolDef
	Fields:		
				LClickDnActionsText ~[Zoom]~  
				LClickUpActionsText ~[NULL]~  // this has to be here!!.  An Action NULL will bypass the default view action
											  // taking this out will cause problems
//				ShiftKeyDnCursor	~Cursors\zoomout.cur~	
//				ShiftKeyUpCursor	~Cursors\zoomin.cur~
//				AlternateCursor		~Cursors\zoom.cur~
				ShiftKeyDnCursor	~zoomout~	
				ShiftKeyUpCursor	~zoomin~
				AlternateCursor		~zoom~
				ToolbarButtonGenConName ~JobToolbarZoom~
				StatusMessage ~Click to zoom in.  Hold the shift key down and click to zoom out~
Hang:  ZoomTool ~UI Tools~ ;

Define: ResizeTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndResize]~	
				LClickDnActionsText ~[Resize]~  
				MouseMoveActionsText ~[ChangeCursor]~
				DeselectActionsText ~[TerminateResizeTool Invalidate]~
				ShiftKeyDnCursor ~Trck4way~
				ShiftKeyUpCursor ~Trck4way~
				ToolbarButtonGenConName ~JobToolbarResize~
				StatusMessage ~Click and drag a node to resize or move the node.~
Hang:  ResizeTool ~UI Tools~ ;


Define: GridTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndMultipleMove]~	
				LClickDnActionsText ~[MultipleMove]~  
				MouseMoveActionsText ~[MoveNodes]~
				DeselectActionsText	~[Invalidate]~
				ShiftKeyDnCursor ~Trck4way~	
				ShiftKeyUpCursor ~Trck4way~
				ToolbarButtonGenConName ~LayoutToolbarMultipleMoveTool~
				StatusMessage ~Move nodes~
Hang:  GridTool ~UI Tools~ ;


Define: CropTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndCrop]~	
				LClickDnActionsText ~[Crop]~  
				MouseMoveActionsText ~[DragImage]~
				DeselectActionsText	~[TerminateCropOperation]~
//				ShiftKeyDnCursor ~Cursors\hmove.cur~	
//				ShiftKeyUpCursor ~Cursors\hmove.cur~
				ShiftKeyDnCursor ~hmove~	
				ShiftKeyUpCursor ~hmove~
				AlternateCursor ~Preview~	
				AlternateCursor2 ~CantMove~	
				ToolbarButtonGenConName ~JobToolbarCrop~
				StatusMessage ~Click on the image with Ctrl down to enlarge it, or click with Shift down to make it smaller, or click and drag to move it.~
Hang:  CropTool ~UI Tools~ ;


Define: SelectTool Using DDToolDef
	Fields:		LClickUpActionsText ~[EndSwitchNodes]~
				LClickDnActionsText ~[SelectNode]~  
				DoubleClickActionsText ~[EditNode]~
				MouseMoveActionsText ~[SwitchNodes]~
				ShiftKeyDnCursor ~ARROW~	
				ShiftKeyUpCursor ~ARROW~
				ToolbarButtonGenConName ~JobToolbarSelect~
//				AlternateCursor ~Cursors\flipcursor.cur~
				AlternateCursor ~flipcursor~
				StatusMessage ~Select a Node to edit node parameters~
Hang:  SelectTool ~UI Tools~ ;


//Note:  to reenable this, initialize the tool in the job window definition's
//Iactions. Also in layout.txt's IActions (PDF 4/19/99)


Define: PolygonTool Using DDToolDef
	Fields:		
				LClickUpActionsText ~[ReleasePolygonPoint]~
				LClickDnActionsText ~[PolygonPoint]~  
				ShiftKeyDnCursor ~CROSS~	
				ShiftKeyUpCursor ~CROSS~
//				AlternateCursor ~Cursors\flipcursor.cur~
				AlternateCursor ~flipcursor~
				ToolbarButtonGenConName ~JobToolbarPolygon~
				StatusMessage ~Click on a point to add a point.  Hold the ctrl key down and click on a point to remove it.~
Hang:  PolygonTool ~UI Tools~ ;


Define:	NodeMenuObj	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define: NodeProperties using DDMenuItemDef
			Fields: Text		~&Properties~
					IDText		~ID~
					ActionsText ~[Dialog(PropertiesDialog SELECTEDNODE)]~
					StatusMessage ~Edit Node Properties~
					StatusMessage ~Delete the selected node~
		Define:	JobNullLineOne using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobLayers	using	DDMenuItemDef
			Fields:	Text		~Layers~
					IDText		~ID~
			Contains: INLISTORDER
			{
				Define: MoveNodeToFront	using	DDMenuItemDef
					Fields: Text		~Move to &Front~
							IDText		~ID~
							ActionsText	~[MoveNodeToFront]~
							StatusMessage ~Move the selected node to the front~
				Define: MoveNodeToBack	using	DDMenuItemDef
					Fields: Text		~Move to Ba&ck~
							IDText		~ID~
							ActionsText	~[MoveNodeToBack]~
							StatusMessage ~Move the selected node to the back~
				Define: MoveNodeOnePositionToFront	using	DDMenuItemDef
					Fields: Text		~Move 1 to Front~
							IDText		~ID~
							ActionsText	~[MoveNodeOnePositionToFront]~
							StatusMessage ~Move the selected node one position to the back~
				Define: MoveNodeOnePositionToBack	using	DDMenuItemDef
					Fields: Text		~Move 1 to Back~
							IDText		~ID~
							ActionsText	~[MoveNodeOnePositionToBack]~
							StatusMessage ~Move the selected node one position to the back~
			}

		Define:	CenterNode	using	DDMenuItemDef
			Fields:	Text		~Center Horizontally~
					IDText		~ID~
					ActionsText  ~[CenterHorizontal]~
					StatusMessage ~Delete the selected node~
		Define:	JobAlignNodes using DDMenuItemDef
			Fields:	Text			~Align Nodes~
					IDText			~ID~
					IsChecked	F
					ActionsText  ~[AlignNodes]~
		Define:	RotateNode	using	DDMenuItemDef
			Fields:	Text		~Rotate Selected Node~
					IDText		~ID~
					ActionsText ~[Dialog(RotateNodeDialog SELECTEDNODE)]~
					StatusMessage ~Rotate image, text and frames to an arbitrary angle~


		Define:	JobNullLineThree using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	JobNullLineOne using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobShowBoxes using DDMenuItemDef
			Fields:	Text		~Show Node B&oxes~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseShowBoxes
									Invalidate
								 ]~ 
					StatusMessage ~Display boxes around all nodes in the composite image~


		Define:	JobShowPrompts using DDMenuItemDef
			Fields:	Text		~Show P&rompts~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseShowPrompts 
								 ]~ 
					StatusMessage ~Display prompts over all nodes in the composite image~

		Define:	JobNullLineTwo using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobNewNodes using DDMenuItemDef
			Fields:	Text			~Create New Nodes~
					IDText			~ID~
					IsChecked	F
					ActionsText	ACTION DOC ( GridLayoutDialog OpenOnce GridLayoutDialog "Init(WindowName);")
		Define:	CreateSimilarNode	using	DDMenuItemDef
			Fields:	Text		~Copy Selected Nodes (F4)~
					IDText		~ID~
					ActionsText  ~[CreateSimilarNodes]~
					StatusMessage ~Copy selected nodes(s) to another place in the layout~
		Define:	NewImageNodeFromSelection	using	DDMenuItemDef
			Fields:	Text		~Create &Image Node From Selection~
					IDText		~ID~
					ActionsText  ~[NewNodeFromSelection]~
					StatusMessage ~Create an image node~
		Define:	NewTextNodeFromSelection	using	DDMenuItemDef
			Fields:	Text		~Create T&ext Node From Selection~
					IDText		~ID~
					ActionsText  ~[NewTextNodeFromSelection]~
					StatusMessage ~Create a text node~
		Define:	DeleteNode	using	DDMenuItemDef
			Fields:	Text		~&Delete~
					IDText		~ID~
					ActionsText  ~[DeleteNode]~
		Define:	JobNullLineTwoA using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobSelectionTools	using	DDMenuItemDef
			Fields:	Text		~Selection Tools~
					IDText		~ID~
			Contains: INLISTORDER
			{
				Define:	SelectAll	using	DDMenuItemDef
					Fields:	Text		~Select Entire Background~
							IDText		~ID~
							ActionsText  ~[SelectAll]~
							StatusMessage ~Select entire background~

				Define:	SelectNone	using	DDMenuItemDef
					Fields:	Text		~Erase Current Selection~
							IDText		~ID~
							ActionsText  ~[SelectNone]~
							StatusMessage ~Save a mask for debugging purposes~

				Define:	InvertSelection	using	DDMenuItemDef
					Fields:	Text		~Invert Selection~
							IDText		~ID~
							ActionsText  ~[InvertSelection]~
							StatusMessage ~Save a mask for debugging purposes~

				Define:	RestorePreviousSelection	using	DDMenuItemDef
					Fields:	Text		~Restore Previous &Selection~
							IDText		~ID~
							ActionsText  ~[RestorePreviousSelection]~
							StatusMessage ~Restore the previous selection~
			}

		Define:	JobNullLineFour using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	JobSelectAllNodes using DDMenuItemDef
			Fields:	Text			~Select All Nodes (Ctrl-A)~
					IDText			~ID~
					IsChecked	F
					ActionsText  ~[SelectAllNodes]~

		Define:	JobSelectCountable using DDMenuItemDef
			Fields:	Text			~Select Countable Nodes~
					IDText			~ID~
					ActionsText  ~[SelectCountable]~

		Define:	JobMaintainCountable using DDMenuItemDef
			Fields:	Text			~Maintain Countable Nodes~
					IDText			~ID~
					ActionsText  ~[MaintainCountable]~

		Define:	JobShowBestGrid using DDMenuItemDef
			Fields:	Text			~Display Grid~
					IDText			~ID~
					ActionsText  ~[ShowBestGrid]~

		Define:	JobAddKid using DDMenuItemDef
			Fields:	Text			~Add Subject~
					IDText			~ID~
					ActionsText  ~[AddKid]~

		Define:	JobRemoveKid using DDMenuItemDef
			Fields:	Text			~Remove Subject~
					IDText			~ID~
					ActionsText  ~[RemoveKid]~
		Define:	JobNullLineFive using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	AfterEffects	using	DDMenuItemDef
			Fields:	Text		~After E&ffects~
					IDText		~ID~
					ActionsText ~[Dialog(AfterEffectsDialog AfterEffects:)]~
					StatusMessage ~Adjust image after efffects~

		Define:	JobInsertLogo	using	DDMenuItemDef
			Fields:	Text		~Insert &Logo~
					IDText		~ID~
					ActionsText  ~[Dialog(LogoDialog_WithText SELECTEDNODE)]~

		Define:	EditTNode	using	DDMenuItemDef
			Fields:	Text		~Edit Text in Selected Node~
					IDText		~ID~
					ActionsText ~[EditTextNode]~
					StatusMessage ~Edit the text for the selected node~
		Define:	EditINode	using	DDMenuItemDef
			Fields:	Text		~Specify Image File for Selected Node~
					IDText		~ID~
					ActionsText ~[EditImageNode]~
					StatusMessage ~specify the image file for the selected node~
		Define:	JobSaveSetup	using	DDMenuItemDef
			Fields:	Text		~Create a Style from the Selected Node~
					IDText		~ID~
					ActionsText  ~[SaveSetup]~
					StatusMessage ~Create and save a Style from the selected node~
		Define:	JobNullLineSix using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define:	JobViewAsText	using	DDMenuItemDef
			Fields:	Text		~View As Text~
					IDText		~ID~
					ActionsText  ~[ViewAsText]~
					StatusMessage ~View as Text~
		if ( GetUserPermissions( Admin ) )
		{

			Define:	TraceImagingChain	using	DDMenuItemDef
				Fields:	Text		~Trace Imaging Chain~
						IDText		~ID~
						ActionsText  ~[TraceImagingChain]~
						StatusMessage ~Trace Imaging Chain to a file~


		}
	}

Hang:	NodeMenuObj ~[UI Menus]~ ;

Define:	AlternateJobMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	JobShowPrompts using DDMenuItemDef
			Fields:	Text		~Show P&rompts~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseCheckMenu(JobShowPrompts) 
									Invalidate
								 ]~ 
					StatusMessage ~Display prompts over all nodes in the composite image~

		Define:	JobShowBoxes using DDMenuItemDef
			Fields:	Text		~Show Node B&oxes~
					IDText		~ID~
					IsChecked	F
					ActionsText  ~[	
									ReverseCheckMenu(JobShowBoxes) 
									ReverseShowBoxes
									Invalidate
								 ]~ 
		Define:	JobShowMasks using DDMenuItemDef
			Fields:	Text			~Show &Masks~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowMasks) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 
		Define:	JobShowText using DDMenuItemDef
			Fields:	Text			~Show &Text~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowText) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 
		Define:	JobShowImages using DDMenuItemDef
			Fields:	Text			~Show Im&ages~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowImages) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 
		Define:	JobShowFrames using DDMenuItemDef
			Fields:	Text			~Show &Frames~
					IDText			~ID~
					IsChecked	T
					ActionsText  ~[	
									ReverseCheckMenu(JobShowFrames) 
									ResetRenderChainStatus 
									Invalidate
								 ]~ 

if ( RunningVersion(9.0) )
{
		Define:	JobPreviewTypeQuick	using	DDMenuItemDef
			Fields:	Text		~Quick Preview~
					IDText		~ID~
					ActionsText  ~[QuickPreview]~
					StatusMessage ~Quick Preview~
					IsShown		~0~
}

		Define:	JobViewAsText	using	DDMenuItemDef
			Fields:	Text		~View As Text~
					IDText		~ID~
					ActionsText  ~[ViewAsText]~
					StatusMessage ~View as Text~


}

Hang:	AlternateJobMenu ~[UI Menus]~ ;


Define:	DropProductMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	InsertProduct1	using	DDMenuItemDef
			Fields:	Text		~Copy Into~
					IDText		~ID~
					ActionsText  ~[InsertProduct(0)]~  // edit this line to F or C for different auto crop mode
					StatusMessage ~Copy and Scale Image and Text Nodes~
		Define:	ApplyStyle1	using	DDMenuItemDef
			Fields:	Text		~Apply as a Style - Without Image and Text~
					IDText		~ID~
					ActionsText  ~[ApplyStyle(0)]~
					StatusMessage ~Apply as a Style - Without Image and Text~
		Define:	ApplyStyle2	using	DDMenuItemDef
			Fields:	Text		~Apply as a Style - With Image and Text~
					IDText		~ID~
					ActionsText  ~[ApplyStyle(1)]~
					StatusMessage ~Apply as a Style - With Image and Text~
	}

Hang:	DropProductMenu ~[UI Menus]~ ;



Define:	DragMenuObj	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	CreateImgNode	using	DDMenuItemDef
			Fields:	Text		~Create Image Node from Mask~
					IDText		~ID~
					ActionsText  ~[CreateImgNode]~
					StatusMessage ~Create an image node from the mask dragged onto the layout.~
		Define:	JobNullLineOne using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: AddCharTexture	using	DDMenuItemDef
			Fields: Text		~Add Character Texture~
					IDText		~ID~
					ActionsText	~[AddCharTexture]~
					StatusMessage ~Add character texture to node.~
		Define: AddBlockTexture	using	DDMenuItemDef
			Fields:	Text		~Add Block Texture~
					IDText		~ID~
					ActionsText	~[AddBlockTexture]~
					StatusMessage ~Add block texture to node.~
		Define: JobNullLineTwo	using	DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: DropMask		using	DDMenuItemDef
			Fields:	Text		~Drop Mask in Node~
					IDText		~ID~
					ActionsText	~[DropMask]~
					StatusMessage ~Add mask to node.~
		Define: DropBGColorMask		using	DDMenuItemDef
			Fields:	Text		~Drop Background Color Mask in Node~
					IDText		~ID~
					ActionsText	~[DropBGColorMask]~
					StatusMessage ~Add background color mask to node.~
		Define: DropTextBGColorMask	using	DDMenuItemDef
			Fields:	Text		~Drop Text Background Color Mask in Node~
					IDText		~ID~
					ActionsText	~[DropTextBGColorMask]~
					StatusMessage ~Add text background color mask to node.~
		Define: JobNullLineThreeA	using	DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		Define: DropFrame		using	DDMenuItemDef
			Fields:	Text		~Drop Frame in Node~
					IDText		~ID~
					ActionsText	~[DropFrame]~
					StatusMessage ~Add frame to node.~
		Define: DropFrameMask	using	DDMenuItemDef
			Fields:	Text		~Drop Frame Mask in Node~
					IDText		~ID~
					ActionsText	~[DropFrameMask]~
					StatusMessage ~Add frame mask to node.~
	}

Hang:	DragMenuObj ~[UI Menus]~ ;


Define:	CopyMenuObj	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define: CopyFrom	using	DDMenuItemDef
			Fields: Text		~Copy Pixels~
					IDText		~ID~
					ActionsText	~[CopyFrom]~
					StatusMessage ~Copy Pixels~
		Define: SameAs	using	DDMenuItemDef
			Fields:	Text		~Use Same File As Other Node~
					IDText		~ID~
					ActionsText	~[Sameas]~
					StatusMessage ~Use same file as other node.~
		Define: SameFileAndCropAs	using	DDMenuItemDef
			Fields:	Text		~Use Same File And Crop As Other Node~
					IDText		~ID~
					ActionsText	~[SameAsCopyCrop]~
					StatusMessage ~Use same file and crop as other node.~
		Define: CopyCrop		using	DDMenuItemDef
			Fields:	Text		~Copy Crop~
					IDText		~ID~
					ActionsText	~[CopyCrop]~
					StatusMessage ~Use the same crop as other node.~
		Define:	SwitchImages	using	DDMenuItemDef
			Fields:	Text		~Swap Images~
					IDText		~ID~
					ActionsText  ~[SwitchImages]~
					StatusMessage ~Create an image node from the mask dragged onto the layout.~
		Define: SwitchText	using	DDMenuItemDef
			Fields: Text		~Swap Text~
					IDText		~ID~
					ActionsText	~[SwitchText]~
					StatusMessage ~Switch Images and Text~
		Define: SwitchImagesAndText	using	DDMenuItemDef
			Fields: Text		~Swap Images and Text~
					IDText		~ID~
					ActionsText	~[SwitchImagesAndText]~
					StatusMessage ~Switch Images and Text~
		Define:	ShuffleImages	using	DDMenuItemDef
			Fields:	Text		~Shuffle Images~
					IDText		~ID~
					ActionsText  ~[ShuffleImages]~
					StatusMessage ~Create an image node from the mask dragged onto the layout.~
		Define: ShuffleText	using	DDMenuItemDef
			Fields: Text		~Shuffle Text~
					IDText		~ID~
					ActionsText	~[ShuffleText]~
					StatusMessage ~Switch Images and Text~
		Define: ShuffleImagesAndText	using	DDMenuItemDef
			Fields: Text		~Shuffle Images and Text~
					IDText		~ID~
					ActionsText	~[ShuffleImagesAndText]~
					StatusMessage ~Switch Images and Text~
	}

Hang:	CopyMenuObj ~[UI Menus]~ ;

Define:	CropSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	CropSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
//					ActionsText ~[Dialog(CropSetupDialog CropToolParameters) ]~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce CropToolSetupDialog )

	}

MENU:	CropSetupMenu ~[UI Menus]~ ;

Define:	WhiteBalanceSetupMenu	using	DDMenuDef
	Fields:	Title		$Title
			Position	(-1)
	Contains:	INLISTORDER
	{
		Define:	WhiteBalanceSetup	using	DDMenuItemDef
			Fields:	Text		~Properties~
					IDText		~ID~
					ActionsText	ACTION DOC ( LayoutNew OpenOnce WhiteBalanceToolSetupDialog )

	}

MENU:	WhiteBalanceSetupMenu ~[UI Menus]~ ;



// The order of items in this list has been
// carefully set to prevent possible problems with
// selection.  See UComboBoxCtrl.cpp
StringList: Name ~LogoPositions1~ 
	Fields: String ~Upper Center~
	Fields: String ~Upper Left~
	Fields: String ~Upper Right~
	Fields: String ~Center~
	Fields: String ~Center Left~
	Fields: String ~Center Right~
	Fields: String ~Lower Center~
	Fields: String ~Lower Left~
	Fields: String ~Lower Right~

Hang:	LogoPositions1	~[STRINGS]~;

StringList: Name ~LogoPositions2~
	Fields: String ~Upper Center~
	Fields: String ~Upper Left~
	Fields: String ~Upper Right~
	Fields: String ~Center~
	Fields: String ~Center Left~
	Fields: String ~Center Right~
	Fields: String ~Lower Center~
	Fields: String ~Lower Left~
	Fields: String ~Lower Right~
Hang:	LogoPositions2	~[STRINGS]~ ;

// Define Translation Tables for LogoPosition keyword
Define: LogoTranslationUL1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~UL~
	Hang: LogoTranslationUL1  ~[UI TranslationTables]~

Define: LogoTranslationUC1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Upper Center~
	Fields: FieldValue				~UC~
	Hang: LogoTranslationUC1  ~[UI TranslationTables]~

Define: LogoTranslationUR1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~UR~
	Hang: LogoTranslationUR1  ~[UI TranslationTables]~

Define: LogoTranslationLL1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~LL~
	Hang: LogoTranslationLL1  ~[UI TranslationTables]~

Define: LogoTranslationLC1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Lower Center~
	Fields: FieldValue				~LC~
	Hang: LogoTranslationLC1  ~[UI TranslationTables]~

Define: LogoTranslationLR1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~LR~
	Hang: LogoTranslationLR1  ~[UI TranslationTables]~

Define: LogoTranslationCL1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Center Left~
	Fields: FieldValue				~CL~
	Hang: LogoTranslationCL1  ~[UI TranslationTables]~

Define: LogoTranslationCC1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~CC~
	Hang: LogoTranslationCC1  ~[UI TranslationTables]~

Define: LogoTranslationCR1 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition1:~
	Fields: ListBoxItemText			~Center Right~
	Fields: FieldValue				~CR~
	Hang: LogoTranslationCR1  ~[UI TranslationTables]~

Define: LogoTranslationUL2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Upper Left~
	Fields: FieldValue				~UL~
	Hang: LogoTranslationUL2  ~[UI TranslationTables]~

Define: LogoTranslationUC2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Upper Center~
	Fields: FieldValue				~UC~
	Hang: LogoTranslationUC2  ~[UI TranslationTables]~

Define: LogoTranslationUR2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Upper Right~
	Fields: FieldValue				~UR~
	Hang: LogoTranslationUR2  ~[UI TranslationTables]~

Define: LogoTranslationLL2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Lower Left~
	Fields: FieldValue				~LL~
	Hang: LogoTranslationLL2  ~[UI TranslationTables]~

Define: LogoTranslationLC2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Lower Center~
	Fields: FieldValue				~LC~
	Hang: LogoTranslationLC2  ~[UI TranslationTables]~

Define: LogoTranslationLR2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Lower Right~
	Fields: FieldValue				~LR~
	Hang: LogoTranslationLR2  ~[UI TranslationTables]~

Define: LogoTranslationCL2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Center Left~
	Fields: FieldValue				~CL~
	Hang: LogoTranslationCL2  ~[UI TranslationTables]~

Define: LogoTranslationCC2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Center~
	Fields: FieldValue				~CC~
	Hang: LogoTranslationCC2  ~[UI TranslationTables]~

Define: LogoTranslationCR2 Using DDListBoxItemTranslations
	Fields: FieldName				~LogoPosition2:~
	Fields: ListBoxItemText			~Center Right~
	Fields: FieldValue				~CR~
	Hang: LogoTranslationCR2  ~[UI TranslationTables]~
	
StringList: Name ~JustificationChoices~
	Fields:	String	~Left~
	Fields:	String	~Center~
	Fields:	String	~Right~
Hang:	JustificationChoices	~[STRINGS]~ ;


StringList: Name ~StrokeUnitInchesChoices~
	Fields:	String	~Inches~
	Fields:	String	~Percent~
Hang:	StrokeUnitInchesChoices	~[STRINGS]~ ;

StringList: Name ~BevelUnitInchesChoices~
	Fields:	String	~Inches~
	Fields:	String	~Percent~
Hang:	BevelUnitInchesChoices	~[STRINGS]~ ;

StringList: Name ~StrokeUnitCentimetersChoices~
	Fields:	String	~Centimeters~
	Fields:	String	~Percent~
Hang:	StrokeUnitCentimetersChoices	~[STRINGS]~ ;

StringList: Name ~BevelUnitCentimetersChoices~
	Fields:	String	~Centimeters~
	Fields:	String	~Percent~
Hang:	BevelUnitCentimetersChoices	~[STRINGS]~ ;

StringList: Name ~StrokeUnitMillimetersChoices~
	Fields:	String	~Millimeters~
	Fields:	String	~Percent~
Hang:	StrokeUnitMillimetersChoices	~[STRINGS]~ ;

StringList: Name ~BevelUnitMillimetersChoices~
	Fields:	String	~Millimeters~
	Fields:	String	~Percent~
Hang:	BevelUnitMillimetersChoices	~[STRINGS]~ ;

StringList: Name ~TraceChoices~
	Fields:	String	~Trace Off~
	Fields:	String	~Trace And Delete on Success~
	Fields:	String	~Trace On~
Hang:	TraceChoices	~[STRINGS]~ ;

StringList: Name ~AlignmentChoices~
	Fields:	String	~Top~
	Fields:	String	~Center~
	Fields:	String	~Bottom~
Hang:	AlignmentChoices	~[STRINGS]~ ;

StringList: Name ~RotateTextChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~180~
	Fields:	String	~270~
Hang:	RotateTextChoices	~[STRINGS]~ ;


StringList: Name ~RotateFromDiskChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~180~
	Fields:	String	~270~
Hang:	RotateFromDiskChoices	~[STRINGS]~ ;

StringList: Name ~AutoRotateChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~270~
Hang:	AutoRotateChoices	~[STRINGS]~ ;

StringList: Name ~OverrideImageRotationChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~180~
	Fields:	String	~270~
Hang:	OverrideImageRotationChoices	~[STRINGS]~ ;

StringList: Name ~AutoRotateDuringAutoCropChoices~
	Fields:	String	~0~
	Fields:	String	~90~
	Fields:	String	~270~
Hang:	AutoRotateDuringAutoCropChoices	~[STRINGS]~ ;


StringList: Name ~GroupChoices~
	Fields:	String	~None~
	Fields:	String	~Group1~
	Fields:	String	~Group2~
	Fields:	String	~Group3~
	Fields:	String	~Group4~
	Fields:	String	~Group5~
	Fields:	String	~Group6~
	Fields:	String	~Group7~
	Fields:	String	~Group8~
	Fields:	String	~Group9~
	Fields:	String	~Group10~
	Fields:	String	~Group11~
	Fields:	String	~Group12~
	Fields:	String	~Group13~
	Fields:	String	~Group14~
	Fields:	String	~Group15~
	Fields:	String	~Group16~
	Fields:	String	~Group17~
	Fields:	String	~Group18~
	Fields:	String	~Group19~
	Fields:	String	~Group20~
Hang:	GroupChoices	~[STRINGS]~ ;

StringList: Name ~SampleSizeChoices~
	Fields:	String	~Point~
	Fields:	String	~3 x 3 average~
	Fields:	String	~5 x 5 average~
Hang:	SampleSizeChoices	~[STRINGS]~ ;


StringList: Name ~TitleBarPositionChoices~
	Fields: String ~None~
	Fields: String ~Top Row~
	Fields: String ~Second Row~
	Fields: String ~Middle Row~
	Fields: String ~Second Row from Bottom~
	Fields: String ~Last Row~
Hang:	TitleBarPositionChoices	~[STRINGS]~

StringList: Name ~TitleBarWidthChoices~
	Fields: String ~0~
	Fields: String ~1~
	Fields: String ~2~
	Fields: String ~3~
	Fields: String ~4~
	Fields: String ~6~
	Fields: String ~7~
	Fields: String ~8~
	Fields: String ~9~
	Fields: String ~10~
	Fields: String ~11~
	Fields: String ~12~
	Fields: String ~13~
	Fields: String ~14~
	Fields: String ~15~
	Fields: String ~16~
	Fields: String ~17~
	Fields: String ~18~
	Fields: String ~19~
	Fields: String ~20~
	Fields: String ~Entire Width~
Hang:	TitleBarWidthChoices	~[STRINGS]~


Define: JobSetupNode Using DDFileType;
Hang: JobSetupNode ~[GenCons]~ ;

StringList: Name	~UnitsOfMeasure~
	Fields:	String	~Inches~
	Fields:	String	~Centimeters~
	Fields:	String	~Millimeters~
Hang:	UnitsOfMeasure	~[STRINGS]~ ;

StringList: Name	~ToolUnitsOfMeasure~
	Fields:	String	~Inches~
	Fields:	String	~Centimeters~
	Fields:	String	~Millimeters~
	Fields:	String	~Pixels~
Hang:	ToolUnitsOfMeasure	~[STRINGS]~ ;


Define: CropToolParameters Using DDCropParameters
	fields:	ZoomPercentage ~5~
	fields: UseSelectedNode 0
Hang: CropToolParameters ~[GenCons]~

Define: WhiteBalanceToolParameters Using DDWhiteBalanceParameters
	fields: WhiteBalanceOn 1
	fields: DoNewClickBalance 0
Hang: WhiteBalanceToolParameters ~[GenCons]~;


// Here is how we display toolbars and check its associated
//		menu item in the View Toolbars menu
// 1	CreateToolbar IAction when the view activates
// 2	ToggleToolbar Action for the View Toolbars Jobs menu item
// 3	CheckMenu IAction for the JobToolbar
// 4	UncheckMenu OAction for the JobToolbar

// DP2 Uses a Static Toolbar; that is it comes up at startup and stays there for the life of the app.
// DPVAC uses a more dynamic toolbar in that it only appears when an image is on the screen
// and goes away when an image is not there.  To facilitate this, the DP2.txt code defines a permanent
// symbol, WantStaticToolbars to be true.  If that symbol is defined and true, toolbars behave like
// static toolbars.  If that symbol is not there or defined to be false, toolbars behave dynamically
// which is the desired behavior for DPVAC
if ( DefinedAndNotNull( WantStaticToolbars ) )
{
	if (<WantStaticToolbars>)
	{
		HideMe = ~~;  // defaults to false (DP2 behavior)
	}
	else 
	{
		HideMe = ~T~; // (DPVAC behavior)
	}

}
else
{
	HideMe = ~T~; // (DPVAC behavior)
}

Define: JobToolbar using DDToolbarDef
Fields:	ToolBarType Standard
		Position	50 100 0 0
		Text		~Tools~	
		AutoHidden  ~<HideMe>~		
		Rows		8			
		AllowDocking	~T~			
		IsInitiallyDocked ~T~
		Alignment	~Top~
		IActionsText	~[CheckMenu(ViewToolbarJobs)]~
		OActionsText	~[UnCheckMenu(ViewToolbarJobs)]~

		Contains: InListOrder
		{
			Define: JobToolbarSelect using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\sel_node.tif~
					ActionsText ~[ChooseTool(SelectTool)]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView ImageView~
					Tooltip ~Select a Node~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F 
					IsChecked F
					StatusMessage ~Select a Node to edit node parameters~

			Define: JobToolbarCrop using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\move.tif~ 
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					ActionsText ~[ChooseTool(CropTool) InitCrop]~
					RClickUpActionsText ~[GetMenu(CropSetupMenu)]~
					Tooltip ~Crop an image inside a node~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click on the image with Ctrl down to enlarge it, or click with Shift down to make it smaller, or click and drag to move it.~

			Define: JobToolbarZoom using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\zoom24.tif~
					ActionsText ~[ChooseTool(ZoomTool)]~ 
					HandlerText ~PIEView PIEEditView PIERetouchingView ImageView LayoutAndJobView  PIELayoutAndJobView~
					Tooltip ~Zoom~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click to zoom in.  Hold the shift key down and click to zoom out~

			Define: LayoutToolBarMagicWand using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Wand.tif~
					ActionsText ~[ChooseTool(WandTool)]~ 
					HandlerText ~LayoutAndJobView  PIELayoutAndJobView~
					Tooltip ~Magic Wand - select an area by color~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					RClickUpActionsText ~[GetMenu(MagicWandToolSetupMenu)]~
					IsChecked F
					StatusMessage ~Click on the image to select by color.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~
					
			Define: LayoutToolbarRectTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\drw_rect.tif~
					ActionsText ~[ChooseTool(RectTool)]~
					Tooltip ~Draw a Rectangle~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					RClickUpActionsText ~[GetMenu(RectToolSetupMenu)]~
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click and drag to draw a rectangle.  Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts.~

			Define: LayoutToolBarDrawOval using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\drw_oval.tif~
					ActionsText ~[ChooseTool(OvalTool)]~ 
					Tooltip ~Draw an Oval~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					RClickUpActionsText ~[GetMenu(OvalToolSetupMenu)]~
					IsChecked F 
					StatusMessage ~Click and drag to draw an oval.    Ctrl adds to the current selection, Shift key intersects, Ctrl and Shift subtracts~

			Define: JobToolbarPolygon using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Polygon.tif~
					ActionsText ~[ChooseTool(PolygonTool)]~
					RClickUpActionsText ~[GetMenu(PolygonToolSetupMenu)]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Draw a polygon~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Create a polygon~

			Define: JobToolbarResize using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Resize.tif~
					ActionsText ~[ChooseTool(ResizeTool)]~ 
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Resize or Move a Node~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					RClickUpActionsText ~[GetMenu(ResizeToolSetupMenu)]~
					IsChecked F
					StatusMessage ~Click on a node near an edge and drag to resize the node.  Click on a node away from an edge and drag to move the node.~


			Define: LayoutToolbarMultipleMoveTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\MultipleMove.tif~
					ActionsText ~[ChooseTool(GridTool)]~
					Tooltip ~Move selected nodes~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Move nodes~

			Define: LayoutToolbarImageCropTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\crop24.tif~
					ActionsText ~[ChooseTool(ImageCropTool)]~
					Tooltip ~Crop an image~
					HandlerText ~PIEView ImageView~
					IDText	ID
					RClickUpActionsText ~[GetMenu(ImageCropToolSetupMenu)]~
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Hold the ctrl key down, click and drag to crop the image~

			Define: LayoutToolbarWhiteBalanceTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\white_balance.tif~  // needs to be checked in
					ActionsText ~[ChooseTool(WhiteBalanceTool)]~
					Tooltip ~White Balance an Image~
					HandlerText ~PIEView ImageView~
					RClickUpActionsText ~[GetMenu(WhiteBalanceSetupMenu)]~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Click to white balance the image~

			Define: JobToolbarSeparator1 using DDToolbarButtonDef
			Fields: IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					IsSeparator T
					SeparatorSizeInPixels 20

			Define: LayoutToolbarGridTool using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\grid.tif~
					Tooltip ~Draw a Grid~
					ActionsText	ACTION DOC ( GridToolParam OpenOnce GridToolSetupDialog )
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Grid Tool~

			Define: JobToolbarEditImageNode using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\ed_image.tif~
					ActionsText ~[Dialog(ImageNodeValuesDialog SELECTEDNODE)]~
					Tooltip ~Image Node Properties~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Open a dialog box and edit imaging parameters~

			Define: JobToolbarEditTextNode using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\ed_text.tif~
					ActionsText ~[Dialog(TextNodeValuesDialog SELECTEDNODE)]~
					Tooltip ~Text Node Properties~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Open a dialog box and edit text parameters~

			Define: JobToolbarWarning using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\warning.tif~
					ActionsText ~[Dialog(WarningsDialog SELECTEDNODE)]~
					Tooltip ~Show Warnings~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Show imaging warnings~

			Define: JobToolbarMajorKeywords using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\majorkeywords.tif~
					ActionsText ~[Dialog(MajorKeywordsDialog LayoutPath:)]~  // will insert a layoutpath node if not there
					Tooltip ~Miscellaneous settings~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Show miscellaneous settings~

			Define: JobToolbarLateResolve using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\Macro.tif~
					ActionsText ~[Dialog(MacroAssistantDialog SELECTEDNODE)]~
					Tooltip ~Macros~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Open a dialog box and edit macros~

			Define: JobToolbarPreview using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\preview.tif~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					ActionsText ~[UpdateViewDialogs PreviewAll Invalidate]~
					Tooltip ~Render the entire job or layout to the screen~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Preview the entire job or layout to the screen~

			Define: JobToolbarSave using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\save24.tif~
					HandlerText ~dummy~
					Tooltip ~Save the current layout~
					IDText	57603  // FROM THE FILE SAVE MENU
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Save the current layout being worked on.~

			Define: JobToolbarSeparator2 using DDToolbarButtonDef
			Fields: IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					IsSeparator T
					SeparatorSizeInPixels 20

			Define: JobToolbarPrintLED using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\prnt_led.tif~
					ActionsText ~[
								Dialog(LEDPrinterDialog OutputToLED:)
								]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open LED Printer Dialog~
					IDText	ID
					IsEnabled T
					IsPressed F 
					IsHidden  F
					IsIndeterminate F
					IsChecked F
					StatusMessage ~Designate the LED Printer as the output device and open a dialog box to edit LED Printer parameters~

			Define: JobToolbarPrintCRT using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\prnt_crt.tif~
					ActionsText ~
							[
							Dialog(CRTPrinterDialog OutputToCRT:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open CRT Printer Dialog~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsChecked F
					IsIndeterminate F
					StatusMessage ~Designate the CRT Printer as the output device and open a dialog box to edit CRT Printer parameters~

			Define: JobToolbarRp30 using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\rp30.tif~
					ActionsText ~
							[
							Dialog(RP30Dialog SaveImage:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open RP30 Dialog~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					StatusMessage ~Designate a RP30 printer as the output device and open a dialog box to edit RP30 parameters~

			Define: JobToolbarPrintLaser using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\prnt_nt.tif~
					ActionsText ~
							[
							Dialog(LaserPrinterDialog OutputToLaserPrinter:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open Windows Printer Dialog~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					StatusMessage ~Designate a Windows Printer as the output device and open a dialog box to edit Windows Printer parameters~

			Define: JobToolbarSaveImage using DDToolbarButtonDef
			Fields: ToolBarBitmapFilename ~ToolbarButtons\save.tif~
					ActionsText ~
							[
							Dialog(SaveImageDialog SaveImage:)
							]~
					HandlerText ~LayoutAndJobView PIELayoutAndJobView~
					Tooltip ~Open Save Image Dialog~
					IDText	ID
					IsEnabled T
					IsPressed F
					IsHidden  F
					IsIndeterminate F
					StatusMessage ~Designate a disk file as the output and open a dialog box to edit disk file parameters~

		};
Hang:  JobToolbar ~[UI Toolbars]~;


Define: RectToolParameters Using DDRectToolParameters
	fields:	Style ~N~
			UnitOfMeasure ~Inches~
			Height 1
			Width 1
			Feathering 0
			 
Hang: RectToolParameters ~[GenCons]~


Define: ImageCropToolParameters Using DDImageCropToolParameters
	fields:	Style ~N~
//			UnitOfMeasure ~Inches~
			Height 1
			Width 1
			ImageCropZoomPercentage 5
			SampleSize 0 
			 
Hang: ImageCropToolParameters ~[GenCons]~

/*
Define: NEWLAYOUT Using DDNewLayout
	Fields:
		MultipleLayouts		0
		Positions			1
		Height				10
		HeightUnitOfMeasure	Inches
		Width				8
		WidthUnitOfMeasure	Inches
		UnitOfMeasure		Inches
		AutoSize			0
		PaperSize			~8x10 Portrait~
		KPSSProduct 0
		KPLSProduct	   0;
Hang: NEWLAYOUT ~[GenCons]~
*/


Define: MagicWandToolParameters Using DDMagicWandToolParameters
	fields:	Feathering	0
			Tolerance	15
Hang: MagicWandToolParameters ~[GenCons]~

Define: PolygonToolParameters Using DDPolygonToolParameters
	fields:	Feathering	0
Hang: PolygonToolParameters ~[GenCons]~

Define: OvalToolParameters Using DDOvalToolParameters
	fields:	Style ~N~
			UnitOfMeasure ~Inches~
			Height 1
			Width 1
			Feathering 3
Hang: OvalToolParameters ~[GenCons]~

Define: ResizeToolParameters Using DDResizeToolParameters
	fields:	Style ~N~
//			UnitOfMeasure ~Inches~
//			Height 1
//			Width 1
//			Feathering 3
Hang: ResizeToolParameters ~[GenCons]~

Define: GridToolParameters Using DDGridToolParameters
	fields:	DisplayGrid 0
			EnableGrid 0
			HorizontalOffset 1.0
			VerticalOffset 1.0
			Subdivisions 4
			GridColorAlpha 0 
			GridColorRed 0 
			GridColorGreen 0 
			GridColorBlue 0 
			LeftMargin 0
			TopMargin 0
			RightMargin 0
			BottomMargin 0
Hang: GridToolParameters ~[GenCons]~


Define: GridLayoutParameters Using DDGridLayout
	fields: ~LeftMargin:~ .25
			~TopMargin:~ .25
			~RightMargin:~, .25
			~BottomMargin:~, .25
			~Rows:~ 5
			~Columns:~ 5
			~TextTop:~ 10
			~TextLeft:~ (-10)
			~TextWidth:~ 120
			~TextHeight:~ 20
			~IsImageNode:~ 1
			~IsTextNode:~ 1
			AlignGridToNodes 0   // whether or not to update the grid tool when Creating New Nodes -> Apply button
			IsCountable 1
			~HorizGap:~ .25
			~VertGap:~ .25
			~HoldAspectRatio:~ 1
			~MaxWidth:~ 1
			~MaxHeight:~ 1
			~BackgroundWidth~  10.0
			~BackgroundHeight~ 8.0
			MaxCountableNodes 9999
			StartSize 10
			FinishSize 12
			PatternPath ~<$App.ShareDirectory>\Patterns\Kodak_Defaults~
			OutputSpec ~<$App.ShareDirectory>\OutputSpecifications\Disk\DIsk2TiffAt150dpi.txt~
			LayoutPath ~<$App.ShareDirectory>\Layouts\GridLayouts\Dummy~
			OpenOnCreate 1
			Units ~Inches~
Hang: GridLayoutParameters ~[GenCons]~


Define: MacroParameters Using DDMacroParameters
	fields:	
			LateResolveMacroCategory ~Character~
			LateResolveMacroName ~~
			LateResolveMacroText ~~
			LateResolveMacroDescription ~~
Hang: MacroParameters ~[GenCons]~


Define: CentimetersAbbreviation Using DDSymbol
	fields:
		Value	~cm.~
Hang: CentimetersAbbreviation ~[GenCons]~

Define: InchesAbbreviation Using DDSymbol
	fields:
		Value	~in.~
Hang: InchesAbbreviation ~[GenCons]~

Define: MillimetersAbbreviation Using DDSymbol
	fields:
		Value	~mm.~
Hang: MillimetersAbbreviation ~[GenCons]~


Define: CentimetersResAbbreviation Using DDSymbol
	fields:
		Value	~pixels per cm.~
Hang: CentimetersResAbbreviation ~[GenCons]~

Define: InchesResAbbreviation Using DDSymbol
	fields:
		Value	~pixels per in.~
Hang: InchesResAbbreviation ~[GenCons]~

Define: MillimetersResAbbreviation Using DDSymbol
	fields:
		Value	~pixels per mm.~
Hang: MillimetersResAbbreviation ~[GenCons]~


Define: LogoTextSizeTolerance Using DDSymbol
	fields:
		Value	~0.05~
Hang: LogoTextSizeTolerance ~[GenCons]~

Define: TestLogos Using DDSymbol
	fields:
		Value	~0~
Hang: TestLogos ~[GenCons]~


//Define: CacheDuplicateTransforms Using DDSymbol
//	fields:
//		Value	~0~
//Hang: CacheDuplicateTransforms ~[GenCons]~

// Turn on/off caching of ICC profiles
Define: CacheCombinedTransforms Using DDSymbol
	fields:
		Value	~1~							// cache combined transforms if CachePreviewing or CachePrinting is 1
Hang: CacheCombinedTransforms ~[GenCons]~

// Cache ICC profiles for layouts and jobs, not across threads
// To cache layouts and jobs set Value to 1 and also Value in CacheCombinedTransforms to 1
Define: CachePreviewing Using DDSymbol
	fields:
		Value	~1~
Hang: CachePreviewing ~[GenCons]~

// Cache ICC profiles when printing and viewing order images
Define: CachePrinting Using DDSymbol
	fields:
		Value	~0~
Hang: CachePrinting ~[GenCons]~

// Define the maximum nodes the Grid layout generator can do
// you must also change the pattern generator
// in PatternEditorDoc3, change the value of TotalAllowed to be the maximum number of nodes allowed;

Define: MaxGridNodes Using DDSymbol
	fields:
		Value ~1200~
Hang: MaxGridNodes ~[GenCons]~

Define: PDCRetouching Using DDSymbol
	fields:
		Value ~0~   // <<--  Change this from 0 to 1 to enable the retouching view
Hang: PDCRetouching ~[GenCons]~

