Include: ~FormattingRoutines~;

IncludeClass( BaseGrid );

VOID	ViewProfiles::ViewProfiles()						// CONSTRUCTOR
{
	TableName = ~ViewProfiles~;
	DocumentQuery = ~Select * from <TableName> Order By OrderID,Roll,Frame,ServicesID~;
	Title = ~View Profiles~;
	WindowTop = 25;
	WindowWidth = 90;
	WindowHeight = 25;
	HelpPage = ~ViewProfiles.htm~;
	SplitterRows = ~2 7 93~;
}

STR		ViewProfiles::GetKey( &Item )					// PRIMARY KEY FOR THE TABLE
{
	return ~ComputerName = '<$con.Item[ComputerName]>' AND UserName = '<$con.Item[UserName]>'~;
}

NUMERIC ViewProfiles::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[ComputerName]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ComputerName cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[UserName]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  UserName cannot be blank.~ ) ); }

	return TRUE;
}

NUMERIC ViewProfiles::OnAddRecord( &NewRow )
{
	NewRow( Set,ComputerName,~<$App.ComputerName>~ );

	return NewRow( Set,UserName,~<$App.UserName>~ );
}

NUMERIC Init( Which,Query )
{
	if ( Defined( Grid ) )
	{
		Grid.ReOpen();
		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.RefreshListView();
	}
	else
	{
		Class( ViewProfiles,Extends,BaseGrid );

		ViewProfiles( New,Grid );

		Grid.Set( DocumentQuery,~<Query>~ );
		Grid.DefineWindow();
		Grid.Init();
		Global( Grid );
	}

	Grid.SetTitle( ~View Profiles~ );

	return TRUE;
}

