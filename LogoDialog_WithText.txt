// This version does not contain enhanced text features for text placement and text background color
// This file will be discontinued in DP2 version 6.0
LeftMargin = 28;
StaticTextWidth = 70;
CheckBoxWidth = 70;
EditTextWidth = 70; 
SmallEditTextWidth = 40; 
MediumEditTextWidth = 120; 
SliderWidth = 170;
VerticalGap = 10;
HelpButtonXOffset = 15;	HelpButtonYOffset = 35;
HelpButtonWidth = 30;	HelpButtonLength = 20;
CropButtonWidth = 70;
RadioButtonHeight = 20;
RadioButtonWidth = 60;
GroupBoxHeightOffset = 18;
GroupBoxWidthOffset = 10;
EditTextHeight = 20;
RightHalf = $LeftMargin+400;
DialogHeight = 610;
DialogWidth = 810;
TabHeight = <DialogHeight> - 90;
TabWidth = <DialogWidth> - 20;
MediumRadioButtonWidth = 60;

Query = ~Select TextureName from Textures Order By Sequence~;

// ypos = current y value within the tab
// Prefix unique 2 character prefix for each tab.  Cannot be more than 2 characters
// SpotColorKeyword for example ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword)
// SpotTextureKeyword for example ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword)
// TranslucenceKeyword for example ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
// TextureNameKeyword for example SpotColorImageTexture: name of keyword that contains the nae of the texture.
VOID DefineSpotColorControls(&ypos,xpos,Prefix,Title,SpotColorKeyword,SpotTextureKeyword,TranslucenceKeyword,TextureNameKeyword)
{
	Define: <Prefix>SpotColorComboBox Using DDwinCtrlDef AsSymbol <Prefix>SpotColorComboBox
	Fields: TypeName		SComboBox
			Position		$xpos ,  <ypos>+5, $MediumRadioButtonWidth+ 30, 100
//			IActionsText ACTIONS ( 				
//							GetList(SpotColorChoices)
//							ExecFile(ImageNodeDlgRoutines.txt)
//							Exec(SetComboBox(<Prefix>SpotColorComboBox,~<SpotColorKeyword>~, ~<SpotTextureKeyword>~,<Prefix>TextureComboBox,<Prefix>SpotColorTranslucenceEditText,<Prefix>SpotColorTranslucenceSlider);)
//							) 
			DActionsText ACTIONS ( 
							ExecFile(ImageNodeDlgRoutines.txt)
							Exec(OnSpotColorComboBoxPressed(LogoDialog_WithText,<Prefix>SpotColorComboBox,~<SpotColorKeyword>~, ~<SpotTextureKeyword>~,<Prefix>TextureComboBox,<Prefix>SpotColorTranslucenceEditText,<Prefix>SpotColorTranslucenceSlider);)
							) 
			Text			~Texture~
			Keyword1		~<SpotColorKeyword>~			// used for engine processing of this control
			Keyword2		~<SpotTextureKeyword>~			// used for engine processing of this control
			Tooltip			~Select the type of spot color~;

	Define: <Prefix>SpotColorTranslucenceStatic Using DDWinCtrlDef AsSymbol <Prefix>SpotColorTranslucenceStatic
	fields:	TypeName StaticText
			Text ~Spot color opacity:~
			Position <Prefix>SpotColorComboBox(GetRight,Position) + 15 <Prefix>SpotColorComboBox(GetTop,Position) 90  20

	Define: <Prefix>SpotColorTranslucenceEditText Using DDWinCtrlDef AsSymbol <Prefix>SpotColorTranslucenceEditText
	fields:	TypeName MaskedEditText
			GenConName THIS
			GenConField ~<TranslucenceKeyword>~
			Position <Prefix>SpotColorTranslucenceStatic(GetRight,Position) + 15, <Prefix>SpotColorComboBox(GetTop,Position) , 40 , 20
			Mask		 ~###~ 
			AllowedChars ~-~
			PromptChar	 ~ ~		
			InsertOn	~T~	
			ControlToUpdate <Prefix>SpotColorTranslucenceSlider
			EnableIfFieldTrue ~<SpotColorKeyword>~
			Tooltip ~0 = greatest amount of spot color, 100 = no spot color~;


	Define: <Prefix>SpotColorTranslucenceSlider Using DDWinCtrlDef AsSymbol <Prefix>SpotColorTranslucenceSlider
	fields:	TypeName Slider
			GenConName THIS
			GenConField ~<TranslucenceKeyword>~
			Position <Prefix>SpotColorTranslucenceEditText(GetRight,Position) + 5, <Prefix>SpotColorComboBox(GetTop,Position) , 100 , 20
			ControlToUpdate <Prefix>SpotColorTranslucenceEditText
			EnableIfFieldTrue ~<SpotColorKeyword>~
			Tooltip ~0 = greatest amount of spot color, 100 = no spot color~;

	ypos = <ypos> + 30;
	Define: <Prefix>TextureStaticText Using DDWinCtrlDef AsSymbol <Prefix>TextureStaticText
	fields:	TypeName StaticText
			Position $xpos <ypos>  $StaticTextWidth + 20  20
			Text ~Spot Texture:~;


	Define: <Prefix>TextureComboBox Using DDWinCtrlDef AsSymbol <Prefix>TextureComboBox
	fields:	TypeName SComboBox
			GenConName THIS
			Position <Prefix>TextureStaticText(GetRight,Position)+ 5,  <ypos> , 200 , 100
			IactionsText	~[GetList(TextureChoices) Get]~
			DactionsText ACTIONS ( 
								ExecFile(ImageNodeDlgRoutines.txt)
								Exec(SaveComboBox(LogoDialog_WithText,<Prefix>TextureComboBox,~<TextureNameKeyword>~,SpotColorTranslucenceSlider,SpotColorTranslucenceEditText);)
								) 								
			Tooltip ~Select a texture.  This is for Nexpress prints using dimensional ink~;

	Define: ZZ<Prefix>SpotColorGroupBox Using DDWinCtrlDef
	fields:	TypeName GroupBox
			Text ~<Title>~
			Position <xpos> - 5, <Prefix>SpotColorComboBox(GetTop,Position) - 17, 370, <Prefix>TextureStaticText(GetBottom,Position) - <Prefix>SpotColorComboBox(GetTop,Position) + 24  ;

}



// enable of text logos with borders - LogoDialog.cpp, URenderList.cpp must be changed also
VOID DefineLogoTab( CN )
{

	Define: LogoTab<CN> Using DDWinCtrlDef
	fields: Text ~Logo <CN>~
			TypeName Tab

	Contains: InListOrder
	{
		ypos =  50;
		Define: LogoPositionStaticText<CN> Using DDWinCtrlDef AsSymbol LogoPositionStaticText<CN>
		fields:	TypeName StaticText
				Position 220 <ypos> $StaticTextWidth-30  20
				Text ~Position:~;

		Define: LogoPositionComboBox<CN> Using DDWinCtrlDef AsSymbol LogoPositionComboBox<CN>
		fields: TypeName SComboBox  
				Position LogoPositionStaticText<CN>(GetRight,Position)+5 , <ypos> ,90 ,150 
				GenConField ~LogoPosition<CN>:~
				Tooltip ~Select the position of the logo~;

		Define: LogoStaticOffsetX<CN> Using DDWinCtrlDef AsSymbol LogoStaticOffsetX<CN>
		fields:	TypeName StaticText
				Text ~X offset:~
				Position LogoPositionComboBox<CN>(GetRight,Position)+5  <ypos> + 3 40  20

		Define: LogoEditOffsetX<CN> Using DDWinCtrlDef AsSymbol LogoEditOffsetX<CN>
		fields:	TypeName MaskedEditText
				GenConField ~LogoShiftX<CN>:~
				Position LogoStaticOffsetX<CN>(GetRight,Position)+5  <ypos> 50  20
				InsertOn	~T~	
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~
				InsertOn	~T~	
				Tooltip ~Specify horizontal offset for logo.  This is the offset from the position selected.~;

		Define: XUnitsStaticText<CN> Using DDWinCtrlDef AsSymbol XUnitsStaticText<CN>
		fields:	TypeName StaticText
				Text ~in.~
				Position LogoEditOffsetX<CN>(GetRight,Position) + 3 <ypos>+3  13  20 ;

		Define: LogoStaticOffsetY<CN> Using DDWinCtrlDef AsSymbol LogoStaticOffsetY<CN>
		fields:	TypeName StaticText
				Text ~Y offset:~
				Position XUnitsStaticText<CN>(GetRight,Position)+5  <ypos>+3  40  20

		Define: LogoEditOffsetY<CN> Using DDWinCtrlDef AsSymbol LogoEditOffsetY<CN>
		fields:	TypeName MaskedEditText
				GenConField ~LogoShiftY<CN>:~
				Position LogoStaticOffsetY<CN>(GetRight,Position)+5  <ypos>  50  20
				InsertOn	~T~	
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~
				InsertOn	~T~	
				Tooltip ~Specify vertical offset for logo.  This is the offset from the position selected.~;

		Define: YUnitsStaticText<CN> Using DDWinCtrlDef AsSymbol YUnitsStaticText<CN>
		fields:	TypeName StaticText
				Text ~in.~
				Position LogoEditOffsetY<CN>(GetRight,Position) + 3 <ypos>+3  13  20 ;
				
		ypos = <ypos> + 40;

		Define: LogoMaskButton<CN> Using DDWinCtrlDef AsSymbol LogoMaskButton<CN>
		fields:	TypeName Button
				Text ~Logo Mask File...~
				GenConField ~LogoMask<CN>:~
				Position $RightHalf,  <ypos> ,  110,  20
				Tooltip ~Select a logo file~

		Define: ClearLogoMaskButton<CN> Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Logo Mask File~
				Position LogoMaskButton<CN>(GetRight,Position) + 10, <ypos> , 130 , 20
				GenConField ~LogoMask<CN>:~
				Tooltip ~Clear the logo field~;

		ypos = <ypos> + 30;
		Define: LogoMaskEditText<CN> Using DDWinCtrlDef AsSymbol LogoMaskEditText<CN>
		fields:	TypeName MaskedEditText
				GenConField ~LogoMask<CN>:~
				Position LogoMaskButton<CN>(GetLeft,Position), <ypos> , 350 , <EditTextHeight>
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				Tooltip ~Edit logo path~;
									
		ypos = <ypos> + 24;
		Define: LogoImageButton<CN> Using DDWinCtrlDef AsSymbol LogoImageButton<CN>
		fields:	TypeName Button
				Text ~Logo Image File...~
				GenConField ~LogoImage<CN>:~
				Position $RightHalf,  <ypos> ,  110,  20
				GenConField ~LogoImage<CN>:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[FileOpen UpdateControl(LogoImageEditText<CN>) Update(LogoColorButton<CN>) Update(LogoColorOverrideEditText<CN>) ]~
				OActionsText ~[NULL]~ 
				Tooltip ~Select a logo image file~

		Define: ClearLogoImageButton<CN> Using DDWinCtrlDef
				fields:	TypeName Button
				Text ~Remove Logo Image~
				Position LogoImageButton<CN>(GetRight,Position) + 10, <ypos> , 110 , 20
				GenConField ~LogoImage<CN>:~
				IActionsText ~[GetIfImageNode]~
				DactionsText ACTIONS ( 
									ExecFile(ClearField.txt)
									Exec(ClearField(LogoDialog_WithText , ~LogoImage<CN>:~);)
									Update(LogoImageEditText<CN>)
									Update(LogoImageButton<CN>)
									Update(LogoColorButton<CN>) 
									Update(LogoColorOverrideEditText<CN>)
				)							
				OActionsText ~[NULL]~
				Tooltip ~Clear the logo image file~;

		ypos = <ypos> + 24;
		Define: LogoImageEditText<CN> Using DDWinCtrlDef AsSymbol LogoImageEditText<CN>
		fields:	TypeName MaskedEditText
				GenConField ~LogoImage<CN>:~
				Position LogoImageButton<CN>(GetLeft,Position), <ypos> , 350 , <EditTextHeight>
				InsertOn	~T~	
				Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
				GenConField ~LogoImage<CN>:~
				IActionsText ~[GetIfImageNode]~
				DActionsText ~[
								SaveIfImageNode
								Update(LogoColorButton<CN>) 
								Update(LogoColorOverrideEditText<CN>)			
							 ]~
				OActionsText ~[SaveIfImageNode]~  
				Tooltip ~Edit logo image file path~;

		ypos = <ypos> + 24;
		Define: LogoColorButton<CN> Using DDWinCtrlDef AsSymbol LogoColorButton<CN>
		fields:	TypeName Button
				Text ~Logo Color...~
				Position LogoMaskButton<CN>(GetLeft,Position)  <ypos> 80  20
				GenConField ~LogoColorOverride<CN>:~
				Tooltip ~Select a logo color~;

		Define: LogoColorOverrideEditText<CN> Using DDWinCtrlDef AsSymbol LogoColorOverrideEditText<CN>
		fields:	TypeName MaskedEditText
				GenConField ~LogoColorOverride<CN>:~
				Position LogoColorButton<CN>(GetRight,Position)+5 <ypos>  265  <EditTextHeight>
				MASK	RepeatStr(1024,~*~)
				Tooltip ~Insert RGB values or a macro.  This overrides the color selected with the button to the left.~;


		ypos = <ypos> + 20 ;  
		Define: LogoOnNodeRadioButton<CN> Using DDWinCtrlDef AsSymbol LogoOnNodeRadioButton<CN>
		fields:	TypeName RadioButton
				Text ~Logo is offset from node~
				Position LogoColorButton<CN>(GetLeft,Position)  <ypos> 150 30
				IsTabStop 1
				GenConField ~LogoOnNodeImage<CN>:~
				RadioTrueValue 0
				IActionsText ~[GETIfImageNode]~
				DActionsText ~[SAVEIfImageNode UnCheckButton(LogoOnImageRadioButton<CN>) CheckButton(LogoOnNodeRadioButton<CN>)]~
				OActionsText ~[SAVEIfImageNode]~
				Tooltip ~Position the logo relative to the node~;

		Define: LogoOnImageRadioButton<CN> Using DDWinCtrlDef AsSymbol LogoOnImageRadioButton<CN>
		fields:	TypeName RadioButton
				Position LogoOnNodeRadioButton<CN>(GetRight,Position) + 10  <ypos> 150 30
				IsTabStop 1
				RadioTrueValue 1
				Text ~Logo is offset from image~
				GenConField ~LogoOnNodeImage<CN>:~
				IActionsText ~[GETIfImageNode]~
				DActionsText ~[SAVEIfImageNode CheckButton(LogoOnImageRadioButton<CN>) UncheckButton(LogoOnNodeRadioButton<CN>)]~
				OActionsText ~[SAVEIfImageNode]~
				Tooltip ~Position the logo relative to the image in the node.  Applies to auto crop modes fit and preserve.~;

		Define: ZZLogoMaskGroupBox<CN> Using DDWinCtrlDef 
		fields:	TypeName GroupBox
				Text ~Logos Made from Files~
				Tooltip ~Text~
				Position LogoMaskButton<CN>(GetLeft,Position) - 6, LogoMaskButton<CN>(GetTop,Position) - 15, <DialogWidth> - LogoMaskButton<CN>(GetLeft,Position) - 16, LogoOnImageRadioButton<CN>(GetBottom, Position) + 3 - (LogoMaskButton<CN>(GetTop,Position) - 15);

//		spot color on logos made from files
		ypos = <ypos> + 51;
		Title = ~Spot Color on Logos Made from Files~;
		Prefix = M<CN>;	// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
		DefineSpotColorControls(ypos,LogoMaskButton<CN>(GetLeft,Position), ~<Prefix>~,~<Title>~,~LogoISpotColorMask<CN>:~, ~LogoISpotTextureMask<CN>:~, ~LogoISpotColorTransluc<CN>:~,~SpotColorLogoTexture<CN>:~);

		// on logo text
		Title = ~Spot Color on Text~;
		ypos = <ypos> + 40;
		Prefix = T<CN>;	// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
		DefineSpotColorControls(ypos,LogoMaskButton<CN>(GetLeft,Position),~<Prefix>~,~<Title>~,~LogoTSpotColorText<CN>:~, ~LogoTSpotTextureText<CN>:~, ~LogoTSpotColorTransluc<CN>:~,~SpotColorLogoTextTexture<CN>:~);

		// on logo text shadows
		ypos = <ypos> + 39;
		Title = ~Spot Color on Text Shadows~;
		Prefix = S<CN>;	// use different 2 character prefix for each tab.  Cannot be more than 2 characters
						// ISpotColorImage: - name of keyword to turn spot color on (actually a bit value within ISpotColor: keyword
						// ISpotTextureImage - name of keyword to turn spot texture on (actually a bit value within ISpotColor: keyword
						// ISpotColorTranslucence - name of keyword that shows value of translucence ( = 100 - opacity) 
						// SpotColorImageTexture: name of keyword that contains the nae of the texture.
		DefineSpotColorControls(ypos,LogoMaskButton<CN>(GetLeft,Position),~<Prefix>~,~<Title>~,~LogoTSpotColorShadow<CN>:~, ~LogoTSpotTextureShadow<CN>:~, ~LogoTSpotColorShadowTransluc<CN>:~,~SpotColorLogoTextShadTexture<CN>:~);
		ypos = <ypos> + 39;
			
		//	spot color on logo text stroke
		Title = ~Spot Color on Text Stroke~;
		Prefix = R<CN>;	// use different 2 character prefix for each tab.  Cannot be more than 2 characters
		DefineSpotColorControls(ypos,LogoMaskButton<CN>(GetLeft,Position), ~<Prefix>~,~<Title>~,~LogoTSpotColorStroke<CN>:~, ~LogoTSpotTextureStroke<CN>:~, ~LogoTSpotColorStrokeTransluc<CN>:~,~SpotColorLogoTextStroTexture<CN>:~);
		
////////////////////////////////////////////////////////////////////////////////

		ypos = LogoMaskButton<CN>(GetTop,Position);
		Define: UseEnhancedLogosRadioButton<CN> Using DDWinCtrlDef AsSymbol UseEnhancedLogosRadioButton<CN>
		fields:	TypeName RadioButton
				Text ~Use borders and extended features(Recommended)~
				Position $LeftMargin <ypos> 265 20
				IsTabStop 1
				GenConField ~EnhancedTextLogos<CN>:~
				RadioTrueValue 1
				Tooltip ~Use a specific point size and spacing to the edge of a node or print.~;

		Define: UseCompatibleLogosRadioButton<CN> Using DDWinCtrlDef AsSymbol UseCompatibleLogosRadioButton<CN>
		fields:	TypeName RadioButton
				Position UseEnhancedLogosRadioButton<CN>(GetRight,Position) + 10 <ypos> 75 20
				IsTabStop 1
				RadioTrueValue 0
				Text ~No borders~
				GenConField ~EnhancedTextLogos<CN>:~
				Tooltip ~Use the largest point size that fits inside 1/9 of an image node or print.~;


		ypos = <ypos> + 30;


		Define: LogoTextColorButton<CN> Using DDWinCtrlDef AsSymbol LogoTextColorButton<CN>
		fields:	TypeName Button
				Text ~Text Color...~
				Position $LeftMargin  <ypos> 80  20
				GenConField ~LogoTextColorOverride<CN>:~
				Tooltip ~Select a logo color~;

		Define: MaxFontSizeStaticText<CN> Using DDWinCtrlDef AsSymbol MaxFontSizeStaticText<CN>
		fields:	TypeName StaticText
				Text ~Font size (points):~
				Position LogoTextColorButton<CN>(GetRight,Position)+20 <ypos> $StaticTextWidth+15,20;

		Define: MaxFontSizeEditText<CN> Using DDWinCtrlDef AsSymbol MaxFontSizeEditText<CN>
		fields:	TypeName MaskedEditText
				Position MaxFontSizeStaticText<CN>(GetRight,Position) + 5, <ypos> , $EditTextWidth-30, 20
				Mask		 ~############~ 
				AllowedChars ~.~
				PromptChar	 ~ ~		
				GenConField ~LogoMaxFontSize<CN>:~
				InsertOn	~T~	
				Tooltip ~Set font size in points~;

		Define: MinFontSizeStaticText<CN> Using DDWinCtrlDef AsSymbol MinFontSizeStaticText<CN>
		fields:	TypeName StaticText
				Text ~Min font size:~
				Position MaxFontSizeEditText<CN>(GetRight,Position) + 10, <ypos> $StaticTextWidth-5 20;

		Define: MinFontSizeEditText<CN> Using DDWinCtrlDef AsSymbol MinFontSizeEditText<CN>
		fields:	TypeName MaskedEditText
				Position MinFontSizeStaticText<CN>(GetRight,Position)+10, <ypos> , $EditTextWidth-30, 20
				Mask		 ~############~  
				AllowedChars ~.~
				GenConField ~LogoMinFontSize<CN>:~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set minimum font size in points~;

		Define: LeadingStaticText<CN> Using DDWinCtrlDef AsSymbol LeadingStaticText<CN>
		fields:	TypeName StaticText
				Text ~Leading:~
				Position MinFontSizeStaticText<CN>(GetLeft,Position), <ypos> $StaticTextWidth-5 20;

		Define: LeadingEditText<CN> Using DDWinCtrlDef AsSymbol LeadingEditText<CN>
		fields:	TypeName MaskedEditText
				Position LeadingStaticText<CN>(GetRight,Position)+4, <ypos> , $EditTextWidth-30, 20
				Mask		 ~############~  
				AllowedChars ~-.~
				GenConField ~LogoTextLeading<CN>:~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set vertical line spacing.  0 = single spaced, 1 = double spaced 2  = triple spaced~;

		ypos = <ypos> + 30;
		Define: LogoTextColorOverrideStatic<CN> Using DDWinCtrlDef AsSymbol LogoTextColorOverrideStatic<CN>
		fields:	TypeName StaticText
				Text ~Macro for Text Color:~
				Position $LeftMargin  <ypos> - 3 0 0

		Define: LogoTextColorOverrideEditText<CN> Using DDWinCtrlDef AsSymbol LogoTextColorOverrideEditText<CN>
		fields:	TypeName MaskedEditText
				GenConField ~LogoTextColorOverride<CN>:~
				Position $LeftMargin <ypos>  355  <EditTextHeight> 
				MASK	RepeatStr(1024,~*~)
				Tooltip ~Insert RGB values or a macro.~;
		ypos = <ypos> + 30;



		Define: HorizontalBorderStaticText<CN> Using DDWinCtrlDef AsSymbol HorizontalBorderStaticText<CN>
		fields:	TypeName StaticText
				Text ~Horizontal Border:~
				Position $LeftMargin, <ypos> $StaticTextWidth-5 30;

		Define: HorizontalBorderEditText<CN> Using DDWinCtrlDef AsSymbol HorizontalBorderEditText<CN>
		fields:	TypeName MaskedEditText
				Position HorizontalBorderStaticText<CN>(GetRight,Position)+8, <ypos> , $EditTextWidth-30, 20
				Mask		 ~############~  
				AllowedChars ~.~
				GenConField ~LogoTextHorizontalBorder<CN>:~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set horizontal border around the text logo~;

		Define: HorizBorderUnitsStaticText<CN> Using DDWinCtrlDef AsSymbol HorizBorderUnitsStaticText<CN>
		fields:	TypeName StaticText
				Text ~in.~
				Position HorizontalBorderEditText<CN>(GetRight,Position) + 3 <ypos>+3  16  20 ;

		Define: VerticalBorderStaticText<CN> Using DDWinCtrlDef AsSymbol VerticalBorderStaticText<CN>
		fields:	TypeName StaticText
				Text ~Vertical Border:~
				Position HorizBorderUnitsStaticText<CN>(GetRight,Position)+20 <ypos> $StaticTextWidth-5,30;

		Define: VerticalBorderEditText<CN> Using DDWinCtrlDef AsSymbol VerticalBorderEditText<CN>
		fields:	TypeName MaskedEditText
				Position VerticalBorderStaticText<CN>(GetRight,Position) + 10, <ypos> , $EditTextWidth-30, 20
				Mask		 ~############~ 
				AllowedChars ~.~
				PromptChar	 ~ ~		
				GenConField ~LogoTextVerticalBorder<CN>:~
				InsertOn	~T~	
				Tooltip ~Set vertical border around the text logo~;

		Define: VerticalBorderUnitsStaticText<CN> Using DDWinCtrlDef AsSymbol VerticalBorderUnitsStaticText<CN>
		fields:	TypeName StaticText
				Text ~in.~
				Position VerticalBorderEditText<CN>(GetRight,Position) + 3 <ypos>+3  16  20 ;

		ypos =  <ypos>+30;

		Define: TextArbRotationStaticText<CN> Using DDWinCtrlDef AsSymbol ArbRotationStaticText<CN>
		fields:	TypeName StaticText
				Text ~Angle:~
				Position $LeftMargin, <ypos> $StaticTextWidth-5 30;


		Define: TextArbRotationEditText<CN> Using DDWinCtrlDef AsSymbol ArbRotationEditText<CN>
		fields:	TypeName MaskedEditText
				Position ArbRotationStaticText<CN>(GetRight,Position)+8, <ypos> , $EditTextWidth-30, 20
				Mask		 ~############~  
				AllowedChars ~-.~
				GenConField ~LogoTextArbRotation<CN>:~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set rotation -360 to 360 degrees.  A positive angle results in a clockwise rotation.  A negative angle results in a counter clockwise rotation.~;

		ypos =  LogoTextColorOverrideStatic<CN>(GetTop,Position);

		Define: JustificationStaticText<CN> Using DDWinCtrlDef AsSymbol JustificationStaticText<CN>
		fields:	TypeName StaticText
				Text ~Text Justification:~
				Position $LeftMargin  ,LogoTextColorOverrideStatic<CN>(GetTop,Position) ,$StaticTextWidth+30  30;

		Define: JustificationRadioButtonLeft<CN> Using DDWinCtrlDef AsSymbol JustificationRadioButtonLeft<CN>
		fields: TypeName RadioButton  
				Position JustificationStaticText<CN>(GetRight,Position) , <ypos> ,$RadioButtonWidth+10 ,24 
				GenConField ~LogoJustification<CN>:~
				RadioTrueValue ~L~
 				IsTabStop 1
				Text ~Left~
				Tooltip ~Left justify the text~;

		Define: JustificationRadioButtonCenter<CN> Using DDWinCtrlDef AsSymbol JustificationRadioButtonCenter<CN>
		fields: TypeName RadioButton  
				Position JustificationRadioButtonLeft<CN>(GetRight,Position) , <ypos> ,$RadioButtonWidth+10 ,24 
				RadioTrueValue ~C~
 				GenConField ~LogoJustification<CN>:~
				IsTabStop 1
				Text ~Center~
				Tooltip ~Center the text horizontally~;

		Define: JustificationRadioButtonRight<CN> Using DDWinCtrlDef AsSymbol JustificationRadioButtonRight<CN>
		fields: TypeName RadioButton  
				Position JustificationRadioButtonCenter<CN>(GetRight,Position) , <ypos> ,$RadioButtonWidth+10 ,24 
				GenConField ~LogoJustification<CN>:~
				RadioTrueValue ~R~
 				IsTabStop 1
				Text ~Right~
				Tooltip ~Right justify the text~;

		Define: JustificationRadioButtonFit<CN> Using DDWinCtrlDef AsSymbol JustificationRadioButtonFit<CN>
		fields: TypeName RadioButton  
				Position JustificationRadioButtonRight<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth-20 ,24 
				GenConField ~LogoJustification<CN>:~
				RadioTrueValue ~F~
 				IsTabStop 1
				Text ~Fit~
				Tooltip ~Right and left justify text~;

		ypos = <ypos> + 30; 
		Define: AlignmentStaticText<CN> Using DDWinCtrlDef AsSymbol AlignmentStaticText<CN>
		fields:	TypeName StaticText
				Text ~Text Alignment:~
				Position $LeftMargin ,<ypos>, $StaticTextWidth+20 , 20;

		Define: AlignmentRadioButtonTop<CN> Using DDWinCtrlDef AsSymbol AlignmentRadioButtonTop<CN>
		fields: TypeName RadioButton  
				Position AlignmentStaticText<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth ,24 
				RadioTrueValue ~T~
 				GenConField ~LogoTextAlignment<CN>:~
				IsTabStop 1
				Text ~Top~
				Tooltip ~Place first line at the top of the text node~;

		Define: AlignmentRadioButtonCenter<CN> Using DDWinCtrlDef AsSymbol AlignmentRadioButtonCenter<CN>
		fields: TypeName RadioButton  
				Position AlignmentRadioButtonTop<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth ,24 
				IsTabStop 1
				RadioTrueValue ~C~
 				GenConField ~LogoTextAlignment<CN>:~
				Text ~Center~
				Tooltip ~Center the text vertically in the text node~;

		Define: AlignmentRadioButtonBottom<CN> Using DDWinCtrlDef AsSymbol AlignmentRadioButtonBottom<CN>
		fields: TypeName RadioButton  
				Position AlignmentRadioButtonCenter<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth ,24 
				GenConField ~LogoTextAlignment<CN>:~
				RadioTrueValue ~B~
				Text ~Bottom~
 				IsTabStop 1
				Tooltip ~Place the last line at the bottom of the text node~;

		ypos = <ypos> + 30; 
		Define: RotateTextStaticText<CN> Using DDWinCtrlDef AsSymbol RotateTextStaticText<CN>
		fields:	TypeName StaticText
				Text ~Rotate Text:~
				Position $LeftMargin ,<ypos>, $StaticTextWidth+20 , 20;

		Define: RotateTextRadioButton0_<CN> Using DDWinCtrlDef AsSymbol RotateTextRadioButton0_<CN>
		fields: TypeName RadioButton  
				Position RotateTextStaticText<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth ,24 
				GenConField ~LogoRotateText<CN>:~
				RadioTrueValue ~0~
 				Text ~0~
				IsTabStop 1
				Tooltip ~Don't rotate text~;

		Define: RotateTextRadioButton90_<CN> Using DDWinCtrlDef AsSymbol RotateTextRadioButton90_<CN>
		fields: TypeName RadioButton  
				Position RotateTextRadioButton0_<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth ,24 
				GenConField ~LogoRotateText<CN>:~
				RadioTrueValue ~90~
 				IsTabStop 1
				Text ~90~
				Tooltip ~Rotate the text 90 degrees clockwise before placing it into the text node~;

		Define: RotateTextRadioButton180_<CN> Using DDWinCtrlDef AsSymbol RotateTextRadioButton180_<CN>
		fields: TypeName RadioButton  
				Position RotateTextRadioButton90_<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth ,24 
				GenConField ~LogoRotateText<CN>:~
				RadioTrueValue ~180~
				IsTabStop 1
				Text ~180~
				Tooltip ~Rotate the text 180 degrees before placing it into the text node~;

		Define: RotateTextRadioButton270_<CN> Using DDWinCtrlDef AsSymbol RotateTextRadioButton270_<CN>
		fields: TypeName RadioButton  
				Position RotateTextRadioButton180_<CN>(GetRight,Position)+10 , <ypos> ,$RadioButtonWidth-15 ,24
				GenConField ~LogoRotateText<CN>:~
				RadioTrueValue ~270~
				IsTabStop 1
				Text ~270~
				Tooltip ~Rotate the text 90 degrees counterclockwise before placing it into the text node~;

		ypos = <ypos> + 60 ; 
		Define:	FontScriptStaticText<CN> Using DDWinCtrlDef AsSymbol FontScriptStaticText<CN>
		fields:	TypeName StaticText
				Text ~Character Set:~
				Position $LeftMargin  <ypos> 100 20
				GenConName THIS

		Define:	FontScriptComboBox<CN> Using DDWinCtrlDef AsSymbol FontScriptComboBox<CN>
		fields: TypeName SComboBox  
				Position 150 <ypos> 200 150 
				UseSystemFont T
				GenConField ~LogoScriptSystem<CN>:~
				Tooltip ~Select a character set~; 

		ypos = <ypos> - 30 ; 
		Define:	FontStaticText<CN> Using DDWinCtrlDef AsSymbol FontStaticText<CN>
		fields:	TypeName StaticText
				Text ~Font:~
				Position $LeftMargin <ypos> 90 20

		Define:	FontComboBox<CN> Using DDWinCtrlDef AsSymbol FontComboBox<CN>
		fields: TypeName SComboBox  
				Position 150 <ypos> 200 150 
				InsertValueIntoList ~T~
				UseSystemFont T
				GenConField ~LogoFont<CN>:~
				Tooltip ~Select a font~;

		ypos = <ypos> + 60 ; 
		Define: LogoTranslucentTextStaticText<CN> Using DDWinCtrlDef AsSymbol LogoTranslucentTextStaticText<CN> 
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> 95  20
				Text ~Text Translucence:~;

		Define: LogoTranslucentTextEditText<CN> Using DDWinCtrlDef AsSymbol LogoTranslucentTextEditText<CN>
		fields:	TypeName MaskedEditText
				Position LogoTranslucentTextStaticText<CN>(GetRight,Position)  <ypos> 40  20
				InsertOn	~T~	
				GenConField ~LogoTranslucentText<CN>:~
				Mask		 ~####~
				DisallowedChars ~-~
				Tooltip ~Specify the strength of text blended with the background.  A value of 0 makes the text opaque.  A value of 50 blends the text and background equally.  A value of 100 erases the text completely~;
				
		ypos = <ypos> + 30 ; 
		Define: BoldCheckBox<CN> Using DDWinCtrlDef AsSymbol BoldCheckBox<CN>
		fields:	TypeName CheckBox
				Text ~Bold~
				Position $LeftMargin <ypos> $CheckBoxWidth 15
				IsTabStop 1
				GenConField ~LogoBold<CN>:~
				Tooltip ~Use bold text~;

		Define: ItalicCheckBox<CN> Using DDWinCtrlDef AsSymbol ItalicCheckBox<CN>
		fields:	TypeName CheckBox
				Text ~Italic~
				Position BoldCheckBox<CN>(GetRight,Position) + 20,  <ypos> $CheckBoxWidth 15
				IsTabStop 1
				GenConField ~LogoItalic<CN>:~
				Tooltip ~Use italic text~;

		Define: AntialiasCheckBox<CN> Using DDWinCtrlDef AsSymbol AntialiasCheckBox<CN>
		fields:	TypeName CheckBox
				Text ~Antialiased:~
				GenConField ~LogoTextAntialias<CN>:~
				Position ItalicCheckBox<CN>(GetRight,Position) + 20 <ypos> $CheckBoxWidth 15
				IsTabStop 1
				Tooltip ~blur the text edges; antialiasing should be turned off for bar code fonts~;
				
		Define: WordWrapCheckBox<CN> Using DDWinCtrlDef AsSymbol WordWrapCheckBox<CN>
		fields:	TypeName CheckBox
				Text ~Word Wrap~
				GenConField ~LogoWordWrap<CN>:~
				Position AntialiasCheckBox<CN>(GetRight,Position) + 20,	<ypos> , $CheckBoxWidth+4 , 15
				IsTabStop 1
				Tooltip ~Turn word wrap on or off~;
				

		ypos = <ypos> + 30;	
		Define: ShadowEnableCheckBox<CN> Using DDWinCtrlDef AsSymbol ShadowEnableCheckBox<CN>
		fields:	TypeName CheckBox
				GenConField ~LogoShadowEnable<CN>:~
				Text ~Shadows~
				Position $LeftMargin <ypos> $CheckBoxWidth 30
				IsTabStop 1
				Tooltip ~Enable shadows~;

		Define: ShadowColorButton<CN> Using DDWinCtrlDef AsSymbol ShadowColorButton<CN>
		fields:	TypeName Button
				Text ~Shadow Color...~
				Position ShadowEnableCheckBox<CN>(GetRight,Position)+ 10, <ypos>, 90, 20
				GenConField ~LogoShadowColor<CN>:~
				Tooltip ~Select Shadow Color~;
				
		Define: ShadowOffsetXStaticText<CN> Using DDWinCtrlDef AsSymbol ShadowOffsetXStaticText<CN>
		fields:	TypeName StaticText
				Text ~Horiz Offset:~
				Position ShadowColorButton<CN>(GetRight,Position) +10 <ypos> $StaticTextWidth/2  30;
				
		Define: ShadowOffsetXEditText<CN> Using DDWinCtrlDef AsSymbol ShadowOffsetXEditText<CN>
		fields:	TypeName MaskedEditText
				Position ShadowOffsetXStaticText<CN>(GetRight,Position)+10 <ypos>  $EditTextWidth/2  20
				GenConName THIS
				GenConField ~LogoShadowOffsetX<CN>:~
				Mask		 ~######~
				AllowedChars ~-.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set horizontal shadow offset in points.    Enter a negative number to place the shadow to the left of the text, and a positive number to place the shadow to the right of the text.~;

		Define: ShadowOffsetYStaticText<CN> Using DDWinCtrlDef AsSymbol ShadowOffsetYStaticText<CN>
		fields:	TypeName StaticText
				Text ~Vert Offset:~
				Position ShadowOffsetXEditText<CN>(GetRight,Position) +10 <ypos> $StaticTextWidth/2  30;
				
		Define: ShadowOffsetYEditText<CN> Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				Position ShadowOffsetYStaticText<CN>(GetRight,Position) +10 <ypos>  $EditTextWidth/2  20
				GenConField ~LogoShadowOffsetY<CN>:~
				Mask		 ~######~
				AllowedChars ~-.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set vertical shadow offset in points.  Enter a negative number to place the shadow above the text, and a positive number to place the shadow below the text.~;

		ypos = <ypos> + 30;
		Define: ShadowBlurStaticText<CN> Using DDWinCtrlDef AsSymbol ShadowBlurStaticText<CN>
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> 30  20
				Text ~Blur:~;
				
		Define: ShadowBlurEditText<CN> Using DDWinCtrlDef AsSymbol ShadowBlurEditText<CN>
		fields:	TypeName MaskedEditText
				Position ShadowBlurStaticText<CN>(GetRight,Position) +10  <ypos>  35  20
				GenConField ~LogoShadowBlur<CN>:~
				Mask		 ~###~
				AllowedChars ~~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set shadow blur amount from 0 to 100~;

		Define: ShadowStrengthStaticText<CN> Using DDWinCtrlDef AsSymbol ShadowStrengthStaticText<CN>
		fields:	TypeName StaticText
				Text ~Strength:~
				Position ShadowBlurEditText<CN>(GetRight,Position) + 10 <ypos> 40  20;
				
		Define: ShadowStrengthEditText<CN> Using DDWinCtrlDef AsSymbol ShadowStrengthEditText<CN>
		fields:	TypeName MaskedEditText
				Position ShadowStrengthStaticText<CN>(GetRight,Position) + 10 <ypos>  35  20
				GenConField ~LogoShadowStrength<CN>:~
				Mask		 ~###~
				AllowedChars ~~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Set shadow strength amount from 0 to 100.~;

		ypos = <ypos> + 30 ; 
		


		ypos = <ypos> + 30 ;  
		Define: LogoUserTextStaticText<CN> Using DDWinCtrlDef AsSymbol LogoUserTextStaticText<CN>
		fields:	TypeName StaticText
				Position $LeftMargin <ypos> $StaticTextWidth -20  20
				Text ~Text:~;

		Define: LogoTextField<CN> Using DDWinCtrlDef AsSymbol LogoTextField<CN>
		fields:	TypeName MLEditText
				Position LogoUserTextStaticText<CN>(GetRight,Position)+1  <ypos> 300  60
				InsertOn	~T~	
				GenConField ~LogoText<CN>:~
				Tooltip ~text~;

		Define: ZZLogo2GroupBox<CN> Using DDWinCtrlDef
		fields:	TypeName GroupBox
				Text ~Logos Made From Text~
				Tooltip ~Logos Made from Text~
				Position $LeftMargin - 6, UseEnhancedLogosRadioButton<CN>(GetTop,Position) - 15, <DialogWidth> - $RightHalf - 16, LogoTextField<CN>(GetBottom, Position) + 15 - (UseEnhancedLogosRadioButton<CN>(GetTop,Position) - 8);

	}
}
VOID DefineLogoTabMore( CN )
{
	Define: LogoTabMore<CN> Using DDWinCtrlDef
	fields: Text ~Logo <CN> Stroke and Bevel Text~
			TypeName Tab

	Contains: InListOrder
	{
			ypos = 72;
			Define: ApplyTextBevel<CN> Using DDWinCtrlDef AsSymbol ApplyTextBevel<CN>
			fields:	TypeName CheckBox
					GenConName THIS
					GenConField ~LogoTextBevel<CN>:~
					Text ~Bevel Text~
					IsTabStop 1
					Position $LeftMargin <ypos> 120 15
					Tooltip ~If checked, will Bevel the text.  If unchecked, no Bevel will be applied.~;

			ypos = <ypos> + 30;

			Define: BevelSizeStaticText<CN> Using DDWinCtrlDef AsSymbol BevelSizeStaticText<CN>
			fields:	TypeName StaticText
					Text ~Size (pixels):~
					Position $LeftMargin <ypos> 100  20

			Define: BevelSizeEditText<CN> Using DDWinCtrlDef AsSymbol BevelSizeEditText<CN>
			fields:	TypeName MaskedEditText
					Position BevelSizeStaticText<CN>(GetRight,Position)+10 <ypos>  50  20
					GenConField ~LogoTextBevelSize<CN>:~
					Mask		 ~###~
					AllowedChars ~~
					InsertOn	~T~	
					IActionsText ~[GetIfImageNode]~
					DActionsText ~[SaveIfImageNode UpdateControl(TextBevelSizeSlider<CN>)]~
					OActionsText ~[SaveIfImageNode]~
					Tooltip ~The size is expressed as a percentage of the font size that is used.  Values between 2 and 8 are good starting points~;

			Define: TextBevelSizeSlider<CN> Using DDWinCtrlDef
			fields:	TypeName Slider
					GenConName THIS
					GenConField ~LogoTextBevelSize<CN>:~
					Position BevelSizeEditText<CN>(GetRight,Position)+10  <ypos> 180 20
					IActionsText ~[GetIfImageNode]~
					DActionsText ~[SaveIfImageNode UpdateControl(BevelSizeEditText<CN>)]~
					OActionsText ~[SaveIfImageNode]~
					Tooltip ~The size is expressed as a percentage of the font size that is used.  Values between 2 and 8 are good starting points~;

			ypos = <ypos> + 30;
			Define: BevelLightAngleStaticText<CN> Using DDWinCtrlDef AsSymbol BevelLightAngleStaticText<CN>
			fields:	TypeName StaticText
					Text ~Light Source:~
					Position $LeftMargin <ypos> 100  20

			Define: BevelLightAngleComboBox<CN> Using DDWinCtrlDef AsSymbol BevelLightAngleComboBox<CN>
			fields:	TypeName SComboBox
					GenConField ~LogoTextBevelLightAngle<CN>:~
					Position BevelSizeEditText<CN>(GetLeft,Position) <ypos> 90  210
					Tooltip ~Specify the direction where the light is coming from~;

			ypos = <ypos> + 30;

			Define: BevelStrengthStaticText<CN> Using DDWinCtrlDef AsSymbol BevelStrengthStaticText<CN>
			fields:	TypeName StaticText
					Text ~Strength:~
					Position $LeftMargin <ypos> 100  20

			Define: TextBevelStrengthEditText<CN> Using DDWinCtrlDef AsSymbol TextBevelStrengthEditText<CN>
			fields:	TypeName MaskedEditText
					GenConField ~LogoTextBevelStrength<CN>:~
					Position BevelSizeEditText<CN>(GetLeft,Position)  <ypos>  50 20
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Sets the strength of the bevel as a percentage(0-100)~;

			Define: TextBevelStrengthSlider<CN> Using DDWinCtrlDef
			fields:	TypeName Slider
					GenConName THIS
					GenConField ~LogoTextBevelStrength<CN>:~
					Position TextBevelStrengthEditText<CN>(GetRight,Position)+10  <ypos> 180 20
					Tooltip ~Sets the strength of the bevel as a percentage (0-100) ~;

			ypos = <ypos> + 30;
			Define: BevelSoftnessStaticText<CN> Using DDWinCtrlDef AsSymbol BevelSoftnessStaticText<CN>
			fields:	TypeName StaticText
					Text ~Softness:~
					Position $LeftMargin <ypos> 100  20

			Define: TextBevelSoftnessEditText<CN> Using DDWinCtrlDef AsSymbol TextBevelSoftnessEditText<CN>
			fields:	TypeName MaskedEditText
					GenConField ~LogoTextBevelSoftness<CN>:~
					Position BevelSizeEditText<CN>(GetLeft,Position)  <ypos>  50 20
					Mask		 ~##~
					AllowedChars ~~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Set the softness of the bevel (0-10)~;

			Define: TextBevelSoftnessSlider<CN> Using DDWinCtrlDef AsSymbol TextBevelSoftnessSlider<CN>
			fields:	TypeName Slider
					GenConName THIS
					GenConField ~LogoTextBevelSoftness<CN>:~
					Position   TextBevelSoftnessEditText<CN>(GetRight,Position) + 10 <ypos> 180 20
					Tooltip ~Set the softness of the bevel (0-10)~;

			Define: BevelGroupBox Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Bevel Text~
					Position $LeftMargin-10, ApplyTextBevel<CN>(GetTop,Position) - 30,   381, TextBevelSoftnessSlider<CN>(GetBottom,Position) -ApplyTextBevel<CN>(GetTop,Position) + 60 ;
					
					ypos = <ypos> + 90;

			Define: StrokeTextColorButton<CN> Using DDWinCtrlDef AsSymbol StrokeTextColorButton<CN>
			fields:	TypeName Button
					Text ~Stroke Color...~
					Position $LeftMargin  <ypos> 200  20
					GenConField ~LogoStrokeTextColor<CN>:~
					Tooltip ~Choose a stroke color~;

			Define: ApplyTextStroke<CN> Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConName THIS
					GenConField ~LogoStrokeTextColor<CN>:~
					Text ~Apply~
					IsTabStop 1
					Position StrokeTextColorButton<CN>(GetRight,Position) + 10 <ypos> 120 15
					Tooltip ~If checked, will insert the stroke color around the edges if the text.  If unchecked, no stroke will be applied.~;

			ypos = <ypos> + 30;
			Define: StrokeTextColorStaticText<CN> Using DDWinCtrlDef  AsSymbol StrokeTextColorStaticText<CN>
			fields:	TypeName StaticText
					GenConName THIS
					Text ~Stroke Color:~
					Position $LeftMargin  <ypos> 110 30

			Define: StrokeTextColorEditText<CN> Using DDWinCtrlDef AsSymbol StrokeTextColorEditText<CN>
			fields:	TypeName MaskedEditText
					GenConField ~LogoStrokeTextColor<CN>:~
					MASK	RepeatStr(1024,~*~)
					Position StrokeTextColorStaticText<CN>(GetRight,Position) + 5 , <ypos> , 245 , 20
					Tooltip ~Insert RGB values or a macro.~;

			ypos = <ypos> + 30;
			Define: StrokeTextOpacityStaticText<CN> Using DDWinCtrlDef  AsSymbol StrokeTextOpacityStaticText<CN>
			fields:	TypeName StaticText
					GenConName THIS
					Text ~Opacity of stroke:~
					Position $LeftMargin  <ypos> 100 50
					DActionsText ~[NULL]~
					OActionsText ~[NULL]~;
					
			Define: StrokeTextOpacityEditText<CN> Using DDWinCtrlDef AsSymbol StrokeTextOpacityEditText<CN>
			fields:	TypeName MaskedEditText
					GenConField ~LogoStrokeTextOpacity<CN>:~
					Position StrokeTextOpacityStaticText<CN>(GetRight,Position) + 10  <ypos>  50 20
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Set the opacity of the stroke.  A value of 0 makes the stroke invisible.~;

			Define: StrokeTextOpacitySlider<CN> Using DDWinCtrlDef AsSymbol StrokeTextOpacitySlider<CN>
			fields:	TypeName Slider
					GenConName THIS
					GenConField ~LogoStrokeTextOpacity<CN>:~
					Position StrokeTextOpacityEditText<CN>(GetRight,Position) + 10  <ypos> 180 20
					Tooltip ~Set the opacity of the stroke color.  A value of 0 makes the stroke invisible. ~;

			ypos = <ypos> + 30;
			Define: StrokeTextWidthStaticText<CN> Using DDWinCtrlDef  AsSymbol StrokeTextWidthStaticText<CN>
			fields:	TypeName StaticText
					GenConName THIS
					Text ~Width of stroke (pixels):~
					Position $LeftMargin  <ypos> 100 50
					DActionsText ~[NULL]~
					OActionsText ~[NULL]~;
					
			Define: StrokeTextWidthEditText<CN> Using DDWinCtrlDef AsSymbol StrokTextWidthEditText<CN>
			fields:	TypeName MaskedEditText
					GenConField ~LogoStrokeTextWidth<CN>:~
					Position StrokeTextWidthStaticText<CN>(GetRight,Position) + 10  <ypos>  50 20
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					InsertOn	~T~	
					Tooltip ~Set the width of the stroke in pixels.~;

			Define: StrokeTextWidthSlider<CN> Using DDWinCtrlDef AsSymbol StrokeTextWidthSlider<CN>
			fields:	TypeName Slider
					GenConName THIS
					GenConField ~LogoStrokeTextWidth<CN>:~
					Position StrokTextWidthEditText<CN>(GetRight,Position) + 10  <ypos> 180 20
					Tooltip ~Set the width of the stroke in pixels.~;

			ypos = <ypos> + 30 ;
			Define: StrokeTextAntialiasCheckBox<CN> Using DDWinCtrlDef AsSymbol StrokeTextAntialiasCheckBox<CN>
			fields:	TypeName CheckBox
					GenConField ~LogoStrokeTextAntialias<CN>:~
					Text ~Antialiased:~
					Position $LeftMargin <ypos> 120 15
					IsTabStop 1
					Tooltip ~Antialias the stroke~;


			ypos = <ypos> + 50 ;
			Define: StrokeGroupBox<CN> Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Stroke Text~
					Position $LeftMargin-10, StrokeTextColorButton<CN>(GetTop,Position) - 20,   381, <ypos> - StrokeTextColorButton<CN>(GetTop,Position) + 30 ;
	}
}




// Note:  DActions fields in dialogs should be set up to save
// values each time the user moves a slider, edits a text field, etc.
// The reason is that UGenDlg is set up to copy data from its source GenCon
// to the control each time a view is activated.  If we activate a UGenDlg
// to move a slider, then click in the view, we copy the data from its GenCon
// to its control.  If we hadn't saved the new slider value as it changed, it
// can be wiped out.

Define: LogoDialog_WithText Using DDWinDef  // If the name is changed, you also must update UGenDlgBar::GetWindowPosition
fields: Position 410 20 <DialogWidth> <DialogHeight>
		Title ~Insert Logo~
		TypeName ~Logos~
		Purpose ~Logos~
		AutoPosition 1
		IActionsText ~[NULL]~
		OActionsText ~[PerformOActions]~
		HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "Logos_Image.htm" )

Contains:
{

	Define: OKButton Using DDWinCtrlDef AsSymbol OKButton
	fields:	TypeName Button
			Text ~Close~
			Position <DialogWidth> - 210,  <DialogHeight> - 40 ,80, 20
			Tooltip ~Close window~;

	Define: PreviewButton Using DDWinCtrlDef AsSymbol PreviewButton
	fields:	TypeName Button
			Text ~Preview~
			Position OKButton(GetRight,Position) + 10,  <DialogHeight> - 40 ,80, 20
			Tooltip ~Preview Changes~;

	Define: LogoOptions Using DDWinCtrlDef  AsSymbol LogoOptions
	fields:	Position 10 10 <TabWidth> ,  <TabHeight>
			TypeName TabCtrl
			Text ~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~

	Contains:  INLISTORDER
	{		
		DefineLogoTab(1);
		DefineLogoTabMore(1);
		DefineLogoTab(2);
		DefineLogoTabMore(2);
	}

	ypos = LogoOptions(GetBottom,Position) + 10; 
	Define: AutoRotateStaticText Using DDWinCtrlDef AsSymbol  AutoRotateStaticText
	fields:	TypeName StaticText
			Text ~Logo Rotation:~
			Tooltip ~Rotate the logo for landscape orientations; Don't rotate for portrait orientations~
			Position $LeftMargin+100 ,<ypos> $StaticTextWidth , 20;

	Define: LogoRotateRadioButton0 Using DDWinCtrlDef AsSymbol LogoRotateRadioButton0
	fields: TypeName RadioButton  
			Position AutoRotateStaticText(GetRight,Position) + 10 , <ypos> ,$RadioButtonWidth ,<RadioButtonHeight> 
			GenConField ~LogoRotation:~
			RadioTrueValue ~0~
 			Text ~None~
			Tooltip ~Never rotate the logo~;

	Define: LogoRotateRadioButton90 Using DDWinCtrlDef AsSymbol LogoRotateRadioButton90
	fields: TypeName RadioButton  
			Position LogoRotateRadioButton0(GetRight,Position) +10, <ypos> ,$RadioButtonWidth ,<RadioButtonHeight> 
			GenConField ~LogoRotation:~
			RadioTrueValue ~90~
 			Text ~90~
			Tooltip ~Rotate the logo 90 degrees about the center of the logo before positioning~;

	Define: LogoRotateRadioButton180 Using DDWinCtrlDef AsSymbol LogoRotateRadioButton180
	fields: TypeName RadioButton  
			Position LogoRotateRadioButton90(GetRight,Position) +10, <ypos> ,$RadioButtonWidth ,<RadioButtonHeight> 
			GenConField ~LogoRotation:~
			RadioTrueValue ~180~
 			Text ~180~
			Tooltip ~Rotate the logo 180 degrees  about the center of the logo before positioning~;

	Define: LogoRotateRadioButton270 Using DDWinCtrlDef AsSymbol LogoRotateRadioButton270
	fields: TypeName RadioButton  
			Position LogoRotateRadioButton180(GetRight,Position) +10, <ypos> ,$RadioButtonWidth ,<RadioButtonHeight> 
			GenConField ~LogoRotation:~
			RadioTrueValue ~270~
			Text ~270~
			Tooltip ~Rotate the logo 90 degrees counter clockwise  about the center of the logo before positioning~;

	Define: LogoScaleStaticText Using DDWinCtrlDef AsSymbol LogoScaleStaticText
	fields:	TypeName StaticText
			Text ~Scale:~
			Position LogoRotateRadioButton270(GetRight,Position) + 10 <ypos> $StaticTextWidth-40  20

	Define: LogoScaleEditText Using DDWinCtrlDef AsSymbol LogoScaleEditText
	fields:	TypeName MaskedEditText
			Position LogoScaleStaticText(GetRight,Position)+10 ,<ypos> ,$SmallEditTextWidth+20 , 20
			GenConField ~LogoScale:~
			Mask		 ~#############~
			AllowedChars ~.~
			PromptChar	 ~ ~
			InsertOn	~T~	
			Tooltip ~Specify a scale factor for both logos as a percentage.  For example: for 8 x 10 prints, use 100.  For 5 x 7 prints use 90.  For 4 x 6 prints use 80.  For wallets use 50.~;

	Define: LogoAutoRotateCheckBox Using DDWinCtrlDef AsSymbol LogoAutoRotateCheckBox
	fields:	TypeName CheckBox
			GenConField ~LogoAutoRotate:~
			Text ~Auto Rotate with Image~
			Position LogoScaleEditText(GetRight,Position) + 10 <ypos> 140 15
			IsTabStop 1
			Tooltip ~Auto rotate the logo with the image in this node~;

	ypos = <ypos> + 30;
	Define: LogoHelpButton Using DDWinCtrlDef
	fields:	TypeName		Button
			Text			~Help~
			Position		$LeftMargin,  <ypos> ,$HelpButtonWidth $HelpButtonLength
}

Hang: LogoDialog_WithText ~[UI Dialogs]~ ;
