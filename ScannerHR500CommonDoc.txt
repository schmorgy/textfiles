Include: ~FormattingRoutines~;
Include: ~HalseTransport.txt~;
Include: ~Hr500Transport.txt~;
Include: ~Hr500AFDTransport.txt~;
Include: ~ErrorHandlers.txt~;
Include: ~UnitsConversion.txt~;
OptionalInclude( ~Hr500ScanFlags.txt~ );


DialogWidth = 460;      DialogHeight = 550;
StaticTextWidth = 60;   StaticTextHeight = 20;
EditTextWidth = 50;     EditTextHeight = 20;
ButtonWidth = 60;       ButtonHeight = 20;
ComboBoxWidth = 100;    ComboBoxHeight = 20;

MajorVersion = ~~;
MinorVersion = ~~;
LibraryLoaded = FALSE;

MAX_NUMERIC_LENGTH = 15;
INVALID_PUNCH = -9;

UseImageOverrides = FALSE;
DisableControlsWhileSaving = FALSE;
ContinueRunning = TRUE;
SimulateFilmDrive = FALSE;
MaxPunchNumber = 0;
MinPunchNumber = 0;
SettleTime = 0;
FilmEditorChanged = FALSE;
ForwardRewindFlag = FALSE;
MaxHR500ScanSize = 134217726;
ReapplyingScannerOffsets = FALSE;
CurrentHR500FirmwareVersion = ~05.201~;
LastSetupName = ~~;
ImageScanSetup = ~~;
ImageFilmType = ~~;
RollScanSetup = ~~;
RollFilmType = ~~;
OrderScanSetup = ~~;
OrderFilmType = ~~;
RollFilmFormat = ~~;
AutoScanAfterCal = FALSE;
LastFilmDriveSetupName = ~~;
LastFilmDriveVendorName = ~~;
FilmDirection = 0; // 0 - Forward,  1 - Reverse
FDVendor = ~~;
DigitalIceAvailable = FALSE;

MaxXIncrementsInInches = 30.00000;
MaxXIncrementsInDisplayUnits = 30.00000;
MaxXIncrements = 30000;
MaxYIncrements = 2000;

MinHR500Mag = 0.5;
MaxHR500Mag = 2.0;
SpeedQualityLowVal = 0;
SpeedQualityHighVal = 0;
LastScanIsTestScan = FALSE;
LastScanSizePos = 0;
LastOpticalZoomSetting = 0;
DoPunchWaitOverride = FALSE;
LastUpdateTime = 0;
CurrentControlsState = -1;
AutoScanDeselectPending = FALSE;
FocusNeeded = FALSE;
CurrentLampState = -1;
RemoveAdjustFrameOnCompletion = FALSE;
LastAutoDRGBAdjustments = TRUE;
ScanButtonDisabled = FALSE;
SaveButtonDisabled = FALSE;
LastDensityNormalization = FALSE;
IgnorePredefinedFrameWidths = FALSE;
MaxFullFrameWidth = 0;
CurrentScanFrame = ~0~;
LastFilmType = ~~;
LastCalMag = 0.0;
ExpectedNextPunch = <INVALID_PUNCH>;
FrameNotInDB = FALSE;
gStoppingFilmDrive = FALSE;
lastFrameScanned = ~~;

NextFrameResetOnce = FALSE;

FirstAutoScanPunch = ~~;
FirstAutoScanXOffset = ~~;
FirstAutoScanRoll = ~~;
Rescanning = FALSE;

TensionAborted = FALSE;

JogInDirection = 0;
JogNextCommand = ~~;
JogPrevCommand = ~~;

IgnoreControlCommands = FALSE;
FrameInserted = FALSE;
FinishScanCommand = ~~;

IgnoreFilmDirection = FALSE;

OnFilmDriveOperationComplete = ~~;

DisplayUnits = ~Inches~;

gHR500AFD_FrameLengthError = FALSE;
gHR500AFD_ErrorReason = 0;

kDICELevelLow  = 5;	// Normal
kDICELevelHigh = 6; // PWR Film
SBARules       = FALSE;	// default behavior before 7.0

NUMERIC DefineTransportSetupTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	StaticWidth = 70;

	if ( <ScannerDocHR500> )
	{
		Helpfile = ~S_TransportHR.htm~;
	}
	else
	{
		Helpfile = ~ITS_Transport.htm~;
	}
    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text            ~Transport~
            TypeName        Tab
            Tooltip         ~Setup parameters pertaining to the film transport~
			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {

		Define: VendorStaticText Using DDWinCtrlDef AsSymbol VendorStaticText 
            Fields: TypeName		StaticText
                    Text			Translate( ~Film Drive~ )
					RightJustified	TRUE
                    Position		$x,$y, <StaticWidth>,  <StaticTextHeight>

		Define: VendorComboBox Using DDWinCtrlDef AsSymbol VendorComboBox 
            Fields: TypeName		SComboBox  
                    Position		VendorStaticText(GetRight,Position) + $hGap,VendorStaticText(Gettop,Position),
									<ComboBoxWidth> + 40,<ComboBoxHeight> 
                    IActionsText	~[GetList(FilmDriveVendorList) Get]~
					DActionsText	~[Save Exec(UpdateFilmDriveSetupsCombo())]~
                    OActionsText	~[Save]~
                    GenConName		THIS
                    GenConField		~FilmDriveVendor~
                    Tooltip			Translate( ~Select the film transport type~ )

		Define: VendorSetupStaticText Using DDWinCtrlDef AsSymbol VendorSetupStaticText 
            Fields: TypeName		StaticText
                    Text			Translate( ~Setup~ )
					RightJustified	TRUE
                    Position		$x,VendorStaticText(GetBottom,Position) + $vGap, <StaticWidth>,  <StaticTextHeight> ;

		Define: VendorSetupComboBox Using DDWinCtrlDef AsSymbol VendorSetupComboBox 
            Fields: TypeName			SComboBox  
                    Position			VendorSetupStaticText(GetRight,Position) + $hGap,VendorSetupStaticText(GetTop,Position),
										<ComboBoxWidth> + 40,<ComboBoxHeight> 
					DActionsText		~[Save]~
                    OActionsText		~[Save]~
                    GenConName			THIS
                    GenConField			~FilmDriveSetup~
                    Tooltip				Translate( ~Select a particular setup to use~ )
					DropDownActionsText ~[Call(UpdateFilmDriveSetupsCombo()) Get]~

		Define: EditVendorButton Using DDWinCtrlDef AsSymbol EditVendorButton 
			Fields: TypeName		Button
					Text			Translate( ~?~ )
					Position		VendorSetupComboBox(GetRight,Position) + $hGap,
									VendorSetupComboBox(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( EditFilmDriveSetup() )
					Tooltip			~Edit the transport setup parameters for the film drives~ 

		Define: EnableFilmDriveBox Using DDWinCtrlDef AsSymbol EnableFilmDriveBox 
			Fields: TypeName		CheckBox
					Text			Translate( ~Enabled~ )
					Position		EditVendorButton(GetRight,Position) + ($hGap * 3),
									VendorComboBox(GetTop,Position) + $vGap, <StaticTextWidth>,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( EnableFilmDriveChanged( FALSE,TRUE,FALSE ) )
					GenConName		THIS
                    GenConField		~FilmDriveEnabled~	
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					IsEnabled		T
					Tooltip         Translate( ~Enable or Disable use of the film drive~ )

		Define: ViewFilmDriveControlsBox Using DDWinCtrlDef AsSymbol ViewFilmDriveControlsBox 
			Fields: TypeName		CheckBox
					Text			Translate( ~View Transport Controls~ )
					Position		EnableFilmDriveBox(GetLeft,Position),
									EnableFilmDriveBox(GetBottom,Position), 170,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( ShowFilmDriveControls() )
					GenConName		THIS
                    GenConField		~ViewDriveControls~	
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					IsEnabled		T
					Tooltip         Translate( ~View the controls used to actuate the film drive~ )

		Define: VendorYOffsetStaticText Using DDWinCtrlDef AsSymbol VendorYOffsetStaticText
			Fields: TypeName		StaticText
					Text			Translate( ~Y Offset~ )
					IsEnabled		F
					RightJustified	TRUE
					Position		$x,ViewFilmDriveControlsBox(GetBottom,Position) + ($vGap * 5),
									40, <StaticTextHeight> ;

		Define: VendorYOffsetTextBox Using DDWinCtrlDef AsSymbol VendorYOffsetTextBox       
			Fields: TypeName		StaticText
					Position		VendorYOffsetStaticText(GetRight,Position) + $hGap,
									VendorYOffsetStaticText(GetTop,Position),45,<StaticTextHeight>
					IsEnabled		F
					GenConName		THIS
					GenConField		~EYOffsetPositionInInches~
					Tooltip			Translate( ~Current Y Offset position of the film drive~ );

		Define: VendorYOffsetClearButton Using DDWinCtrlDef AsSymbol VendorYOffsetClearButton
			Fields:	TypeName		Button
					IsEnabled		F
					Text			Translate( ~Clear Y Offset~ )
					Position		VendorYOffsetTextBox(GetRight,Position) + ($hGap * 4),
									VendorYOffsetTextBox(GetTop,Position), 80, $EditTextHeight
					DActionsText	ACTIONS ( "Exec(SetDialogVendorYOffsetInfo(0,0.0))" )
					Tooltip			Translate( ~Clear the Y Offset position~ ) ;

		Define: VendorXOffsetStaticText Using DDWinCtrlDef AsSymbol VendorXOffsetStaticText
			Fields: TypeName		StaticText
					Text			Translate( ~X Offset~ )
					IsEnabled		F
					RightJustified	TRUE
					Position		$x,VendorYOffsetStaticText(GetBottom,Position) + ($vGap * 4),
									40, <StaticTextHeight> ;

		Define: VendorXOffsetTextBox Using DDWinCtrlDef AsSymbol VendorXOffsetTextBox       
			Fields: TypeName		StaticText
					Position		VendorXOffsetStaticText(GetRight,Position) + $hGap,
									VendorXOffsetStaticText(GetTop,Position),45,<StaticTextHeight>
					IsEnabled		F
					GenConName		THIS
					GenConField		~TXOffsetPositionInInches~
					Tooltip			Translate( ~Current X Offset position of the film drive~ ) ;

		Define: VendorXOffsetZeroButton Using DDWinCtrlDef AsSymbol VendorXOffsetZeroButton
			Fields:	TypeName		Button
					IsEnabled		F
					Text			Translate( ~Reset X Offset~ )
					Position		VendorXOffsetTextBox(GetRight,Position) + ($hGap * 4),
									VendorXOffsetTextBox(GetTop,Position), 80, $EditTextHeight
					DActionsText	ACTIONS ( "Exec(ResetVendorXOffset())" )
					Tooltip			Translate( ~Reset the X Offset position of the film drive to 0~ ) ;

		Define: VendorXOffsetClearButton Using DDWinCtrlDef AsSymbol VendorXOffsetClearButton
			Fields:	TypeName		Button
					IsEnabled		F
					Text			Translate( ~Clear X Offset~ )
					Position		VendorXOffsetZeroButton(GetRight,Position) + $hGap,
									VendorXOffsetZeroButton(GetTop,Position), 80, $EditTextHeight
					DActionsText	ACTIONS ( "Exec(SetDialogVendorXOffsetInfo(0,0.0))" )
					Tooltip			Translate( ~Clear the X Offset position without adjusting the film drive~ );

 		Define: XSliderIFactorStaticText Using DDWinCtrlDef AsSymbol XSliderIFactorStaticText
			Fields:	POSITION		$x, VendorXOffsetZeroButton(GetBottom,Position) + ($vGap * 4),
									120, <StaticTextHeight>
					TEXT			Translate( ~X Offset (in <DisplayUnits>)~ )
					IsEnabled		F
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: XSliderIFactorField Using DDWinCtrlDef AsSymbol XSliderIFactorField
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(AuditField(XSliderIFactorField,0,<MaxXIncrementsInDisplayUnits>,0))" )
					GENCONFIELD		~XSliderIFactor~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		XSliderIFactorStaticText(GetRight,Position) + $hGap,
									XSliderIFactorStaticText(GetTop,Position),
									70, $EditTextHeight
					TEXT			~~
					TOOLTIP			Translate( ~Number of <DisplayUnits> (greater than 0 and less than or equal to <MaxXIncrementsInDisplayUnits>) to move X Slider offset~ )
					TYPENAME		MaskedEditText
					AllowedChars	~.~
					Mask			~############~
					IsEnabled		F
					PromptChar		~ ~ ;

	    Define: GoTo_Button Using DDWinCtrlDef AsSymbol GoTo_Button 
            Fields: TypeName		Button
					IsEnabled		F
                    Text			Translate( ~Go to Punch~ )
                    Position		$x,VendorXOffsetStaticText(GetBottom,Position) + ($vGap * 18)
									72  <buttonHeight>
					DActionsText	ACTIONS  ( "Exec(OnGotoButton( FALSE,FALSE ))" ) 
					Tooltip			Translate( ~Go To Punch #~ )

		Define: GotoPunchNumberTextBox Using DDWinCtrlDef AsSymbol GotoPunchNumberTextBox       
			Fields: TYPENAME		MaskedEditText
					Mask			~#####~
					PromptChar		~ ~ 
					IsEnabled		F
                    Position		GoTo_Button(GetRight,Position) + <hGap>,
									GoTo_Button(GetTop,Position), 45, <buttonHeight>
                    GenConName		THIS
                    GenConField		~GotoPunchNumber~
                    IActionsText	~[Get]~
                    OActionsText	~[Save]~
                    Tooltip			Translate( ~Enter Punch Number To Go To~ );

/*    if ( RunningVersion( 5.1 ) )
	{
		Define: FdaSetupStaticText Using DDWinCtrlDef AsSymbol FdaSetupStaticText 
            Fields: TypeName		StaticText
					IsEnabled		F
                    Text			Translate( ~Frame Detection Setup~ )
					RightJustified	TRUE
                    Position		GoTo_Button(GetLeft,Position),GoTo_Button(GetBottom,Position) + 10, 110, <StaticTextHeight> ;

		Define: FdaSetupComboBox Using DDWinCtrlDef AsSymbol FdaSetupComboBox 
            Fields: TypeName		SComboBox  
                    Position		FdaSetupStaticText(GetRight,Position) + $hGap,FdaSetupStaticText(GetTop,Position),
									<ComboBoxWidth>,<ComboBoxHeight> 
					DActionsText	~[Save]~
                    OActionsText	~[Save]~
                    GenConName		THIS
                    GenConField		~Hr500FdaSetup~
					IsEnabled		F
                    Tooltip			Translate( ~Select a particular setup to use~ )
					DropDownActionsText ~[Call(UpdateFdaSetupsCombo()) Get]~

		Define: EditFdaButton Using DDWinCtrlDef AsSymbol EditFdaButton 
			Fields: TypeName		Button
					Text			Translate( ~?~ )
					Position		FdaSetupComboBox(GetRight,Position) + $hGap,
									FdaSetupComboBox(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( EditFdaSetup() )
					IsEnabled		F
					Tooltip			Translate( ~Edit the frame detection setup parameters for the film drive~ )
	
	}
	else
	{
		Define: OverrideFrameButton Using DDWinCtrlDef AsSymbol OverrideFrameButton 
            Fields: TypeName		Button
					IsEnabled		F
                    Text			Translate( ~Override Frame Number~ )
                    Position		$x, GoTo_Button(GetBottom,Position) + 10
									150  <buttonHeight>
					DActionsText	ACTIONS  ( "Exec(OnOverrideFrameButton( TRUE ))" ) 
					Tooltip			Translate( ~Override and set the Frame #~ )

		Define: OverrideFrameTextBox Using DDWinCtrlDef AsSymbol OverrideFrameTextBox       
			Fields: TYPENAME		MaskedEditText
					Mask			~#####~
					PromptChar		~ ~ 
					IsEnabled		F
                    Position		OverrideFrameButton(GetRight,Position) + <hGap>,
									OverrideFrameButton(GetTop,Position), 45, <buttonHeight>
                    GenConName		THIS
                    GenConField		~OverrideFrameNumber~
                    IActionsText	~[Get]~
                    OActionsText	~[Save]~
                    Tooltip			Translate( ~Enter the number to set the current frame to.~ );
	}
*/
		Define:	AdjustFramePositionBox using DDWinCtrlDef AsSymbol AdjustFramePositionBox	
				Fields: TypeName		CheckBox
						IsEnabled		F
						Text			Translate( ~Adjust Frame Position~ )
						Position		$x,
										GoTo_Button(GetBottom,Position) + 15 + <StaticTextHeight> + (<vGap> * 2),
										150, <buttonHeight>
						IActionsText	ACTIONS ( Get ) 
						DActionsText	ACTIONS ( "Exec(OnAdjustFramePosition())" ) 
						OActionsText	ACTIONS ( Save )
						GenConName		THIS
						GenConField		AdjustFramePosition
						Tooltip			Translate( ~Adjust Frame Position within the overscan image~ );

		Define: EditorStaticText Using DDWinCtrlDef AsSymbol EditorStaticText 
            Fields: TypeName		StaticText
                    Text			Translate( ~Editor~ )
					RightJustified	TRUE
					Position		ViewFilmDriveControlsBox(GetLeft,Position) - 8,
									ViewFilmDriveControlsBox(GetBottom,Position) + ($vGap * 4),
									35,<StaticTextHeight>

		Define: EditorComboBox Using DDWinCtrlDef AsSymbol EditorComboBox 
            Fields: TypeName		SComboBox  
					Position		EditorStaticText(GetRight,Position) + ($hGap * 2),
									EditorStaticText(GetTop,Position),
									<ComboBoxWidth>,<ComboBoxHeight>
                    IActionsText	~[GetList(EditorVendorList) Get]~
					DActionsText	~[Save Exec(UpdateEditorXYOffsetSetting())]~
                    OActionsText	~[Save]~
                    GenConName		THIS
                    GenConField		~FilmEditor~ 
                    Tooltip			Translate( ~Select the film editor used to edit the current roll of film~ )


		Define: EditFilmEditorsButton Using DDWinCtrlDef AsSymbol EditFilmEditorsButton 
			Fields: TypeName		Button
					Text			Translate( ~?~ )
					Position		EditorComboBox(GetRight,Position) + $hGap,
									EditorComboBox(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	~[Exec(EditFilmEditors())]~
					Tooltip			Translate( ~Edit the film editor setup~ )

		Define: FixedAdvanceStaticText Using DDWinCtrlDef AsSymbol FixedAdvanceStaticText
			Fields: TypeName		StaticText
					Text			Translate( ~Fixed Film Advance~ )
					IsEnabled		F
					RightJustified	TRUE
					Position		EditFilmEditorsButton(GetRight,Position) - 200 - $hGap,
									VendorXOffsetZeroButton(GetBottom,Position) + ($vGap * 3), 120, <StaticTextHeight> ;

		Define: FixedAdvanceTextBox Using DDWinCtrlDef AsSymbol FixedAdvanceTextBox       
			Fields: TYPENAME		MaskedEditText
					Mask			~############~
					PromptChar		~ ~ 
					AllowedChars	~.~
					IsEnabled		F
                    Position		FixedAdvanceStaticText(GetRight,Position) + <hGap>,
									FixedAdvanceStaticText(GetTop,Position), 70, <buttonHeight>
                    GenConName		THIS
                    GenConField		~FixedNonFDAAdvance~
                    IActionsText	~[Get]~
                    OActionsText	~[Save]~
					DActionsText	ACTIONS ( Save "Exec(AuditField(FixedAdvanceTextBox,0,<MaxXIncrementsInDisplayUnits>,0))" )
					Tooltip			Translate( ~Enter the distance (greater than 0 and less than or equal to <MaxXIncrementsInDisplayUnits> <DisplayUnits>) to advance film when frame detection is disabled.~ ); 

		Define: FixedAdvanceLabel Using DDWinCtrlDef AsSymbol FixedAdvanceLabel
			Fields: TypeName		StaticText
					Text			~~
					IsEnabled		F
					LeftJustified	TRUE
					Position		FixedAdvanceTextBox(GetRight,Position) + $hGap,
									FixedAdvanceTextBox(GetTop,Position), 20, <StaticTextHeight> ;

		Define: MinGapStaticText Using DDWinCtrlDef AsSymbol MinGapStaticText
			Fields: TypeName		StaticText
					Text			Translate( ~Minimum Interframe Gap~ )
					IsEnabled		F
					RightJustified	TRUE
					Position		EditFilmEditorsButton(GetRight,Position) - 200 - $hGap,
									FixedAdvanceStaticText(GetBottom,Position) + $vGap, 120, <StaticTextHeight> ;

		Define: MinGapTextBox Using DDWinCtrlDef AsSymbol MinGapTextBox       
			Fields: TYPENAME		MaskedEditText
					Mask			~############~
					AllowedChars	~.~
					PromptChar		~ ~ 
					IsEnabled		F
                    Position		MinGapStaticText(GetRight,Position) + <hGap>,
									MinGapStaticText(GetTop,Position), 70, <buttonHeight>
                    GenConName		THIS
                    GenConField		~MinInterframeGap~
                    IActionsText	~[Get]~
                    OActionsText	~[Save]~
                    Tooltip			Translate( ~Enter the minimum interframe gap (default value is 40 lines).~ );

		Define: MinGapLabel Using DDWinCtrlDef AsSymbol MinGapLabel
			Fields: TypeName		StaticText
					Text			~~
					IsEnabled		F
					LeftJustified	TRUE
					Position		MinGapTextBox(GetRight,Position) + $hGap,
									MinGapTextBox(GetTop,Position), 18, <StaticTextHeight> ;

		Define: EdgeSensitivityStaticText Using DDWinCtrlDef AsSymbol EdgeSensitivityStaticText
			Fields: TypeName		StaticText
					Text			Translate( ~Edge Sensitivity~ )
					IsEnabled		F
					RightJustified	TRUE
					Position		EditFilmEditorsButton(GetRight,Position) - 170 - $hGap,
									MinGapStaticText(GetBottom,Position) + <vGap>, 90, <StaticTextHeight> ;

		Define: EdgeSensitivityTextBox Using DDWinCtrlDef AsSymbol EdgeSensitivityTextBox       
			Fields: TYPENAME		MaskedEditText
					Mask			~###~
					PromptChar		~ ~ 
					IsEnabled		F
                    Position		EdgeSensitivityStaticText(GetRight,Position) + <hGap>,
									EdgeSensitivityStaticText(GetTop,Position), 70, <buttonHeight>
                    GenConName		THIS
                    GenConField		~EdgeSensitivity~
                    IActionsText	~[Get]~
                    OActionsText	~[Save]~
                    Tooltip			Translate( ~Enter the edge sensitivity value (neg film: 1 to 199 / pos film: 41 to 999 / high speed neg film at high res 80 to 100).~ );

		Define:	AutoSkipBlankFrameBox using DDWinCtrlDef AsSymbol AutoSkipBlankFrameBox	
				Fields: TypeName		CheckBox
						IsEnabled		F
						Text			Translate( ~Auto Skip Blank Frames~ )
						Position		EdgeSensitivityStaticText(GetLeft,Position) + 20,
										EdgeSensitivityStaticText(GetBottom,Position) + <vGap>,
										150, <buttonHeight>
						IActionsText	ACTIONS ( Get ) 
						DActionsText	ACTIONS ( "Exec(OnAutoSkipBlankFrame())" ) 
						OActionsText	ACTIONS ( Save )
						GenConName		THIS
						GenConField		AutoSkipBlankFrame
						Tooltip			Translate( ~Automatically skip over blank frames on strip~ );

		Define: IgnoreFdaErrorsCheckBox Using DDWinCtrlDef AsSymbol IgnoreFdaErrorsCheckBox 
				Fields: TypeName		CheckBox
						IsEnabled		F
						GenConName		THIS
						GenConField		~IgnoreFdaErrors~
						Text			Translate( ~Ignore Frame Detect Errors~ )
						Position		AutoSkipBlankFrameBox(GetLeft,Position),
										AutoSkipBlankFrameBox(GetBottom,Position) + <vGap>,
										150,<buttonHeight>
						IActionsText	ACTIONS ( Get )
						DActionsText	ACTIONS ( "Exec(OnIgnoreFdaErrors())" )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~Do not stop on frame detect error. Advance a frame + gap length, continue scanning and saving all images.~ );

		IF 0
		{
			Define: TestSlavedOperationButton Using DDWinCtrlDef AsSymbol TestSlavedOperationButton 
				Fields: TypeName		Button
						Text			Translate( ~Slaved Test~ )
						Position		$x,VendorSetupComboBox(GetBottom,Position) + $vGap, 70,  <StaticTextHeight>
						DActionsText	ACTION EXEC ( TestSlavedOperation() )
		}

	}

	return EnableFilmDriveBox(GetBottom,Position);
}



NUMERIC DefineTransportControl( &x,&y,&hGap,&vGap )
{
    Width = 51;	ShowFilmTransportControls = F;

    Define: TensionBox Using DDWinCtrlDef AsSymbol TensionBox 
            Fields: TypeName                CheckBox
                    IsEnabled				F
                    IsHidden				T
					Text                    Translate(~Tension~)
                    Position                <x> + 2, <y>, 65, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnTensionChange(FALSE,TRUE))" ) 
                    IActionsText			ACTIONS ( Get ) 
                    OActionsText			ACTIONS ( Save )
                    GenConName				THIS
                    GenConField				~Tension~
                    Tooltip                 Translate(~Tension or Untension the Film~)

    Define: FastRewindButton Using DDWinCtrlDef AsSymbol FastRewindButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~<<<<~
                    Position                TensionBox(GetRight,Position) + (<hGap> * 4),
                                            TensionBox(GetTop,Position),
                                            <Width>*3/4,  <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnRewindButton())" ) 
                    Tooltip                 Translate(~Fast Rewind~)
                    
    Define: PrevFrameButton Using DDWinCtrlDef AsSymbol PrevFrameButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~-1~
                    Position                FastRewindButton(GetRight,Position) + <hGap>,
                                            FastRewindButton(GetTop,Position),
                                            <Width>*3/4,  <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnPreviousFrameButton( FALSE,FALSE ))" ) 
                    Tooltip                 Translate(~Go To Previous Frame~)

    Define: StopButton Using DDWinCtrlDef AsSymbol StopButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~Stop~
                    Position                PrevFrameButton(GetRight,Position) + <hGap>,
                                            PrevFrameButton(GetTop,Position),
                                            <Width>*3/4, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnStopButton())" ) 
                    Tooltip                 Translate(~Stop transport~)
                    
    Define: NextFrameButton Using DDWinCtrlDef AsSymbol NextFrameButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~+1~
                    Position                StopButton(GetRight,Position) + <hGap>,
                                            StopButton(GetTop,Position),
                                            <Width>*3/4, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnNextFrameButton( FALSE,FALSE,FALSE,FALSE ))" ) 
                    Tooltip                 Translate(~Next Frame~)

    Define: FastForwardButton Using DDWinCtrlDef AsSymbol FastForwardButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~>>>>~
                    Position                NextFrameButton(GetRight,Position) + <hGap>,
                                            NextFrameButton(GetTop,Position),
                                            <Width>*3/4, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnFastForwardButton())" ) 
                    Tooltip                 Translate(~Fast Forward~)

	Define: IgnoreXAdjustmentsCheckBox Using DDWinCtrlDef AsSymbol IgnoreXAdjustmentsCheckBox 
			Fields: TypeName				CheckBox
					IsEnabled				F
					IsHidden				T
					GenConName				THIS
					GENCONFIELD				IgnoreXAdjustments
					Text					~Ignore X~
					Position				FastForwardButton(GetRight,Position)+3,FastForwardButton(GetTop,Position) - 4,
											<Width> + 15,<StaticTextHeight>
					IActionsText			ACTIONS ( Get )
					DActionsText			ACTIONS ( Save )
					OActionsText			ACTIONS ( Save )
					Tooltip					Translate(~Adjust the x position of the film drive without updating the current x offset information~)

	Define: DisableFilmDriveCheckBox Using DDWinCtrlDef AsSymbol DisableFilmDriveCheckBox 
			Fields: TypeName				CheckBox
					IsEnabled				F
					IsHidden				T
					GenConName				THIS
					GENCONFIELD				DisableFilmDrive
					Text					Translate(~Disable~)
					Position				IgnoreXAdjustmentsCheckBox(GetRight,Position)+7,
											IgnoreXAdjustmentsCheckBox(GetTop,Position),
											<Width> + 20,<StaticTextHeight>
					IActionsText			ACTIONS ( Get )
					DActionsText			ACTIONS ( Save "Exec(OnDisableFilmDrive())" )
					OActionsText			ACTIONS ( Save )
					Tooltip					Translate(~Disable film movement during scanning~)

	Define: DisableFrameDetectCheckbox Using DDWinCtrlDef AsSymbol DisableFrameDetectCheckbox 
			Fields: TypeName				CheckBox
					IsEnabled				F
					IsHidden				T
					GenConName				THIS
					GENCONFIELD				DisableFrameDetect
					Text					Translate(~Disable Frame Detection~)
					Position				FastForwardButton(GetRight,Position) + ($hGap),
											FastForwardButton(GetTop,Position),
											<Width> + 90,<StaticTextHeight>
					IActionsText			ACTIONS ( Get )
					DActionsText			ACTIONS ( Save "Exec(OnDisableFrameDetection())" ) 
					OActionsText			ACTIONS ( Save )
					Tooltip					Translate(~Disable frame detection while scanning~)


	Define: XPositionSlider Using DDWinCtrlDef AsSymbol XPositionSlider
			Fields:	TypeName				Slider
                    IsEnabled				F
                    IsHidden				T
					Position				FastRewindButton(GetLeft,Position) - 4,
											FastRewindButton(GetBottom,Position) + $vGap,220,$StaticTextHeight
					DActionsText			ACTIONS ( Save "Exec(UpdateTempSliderPosition())" )
					IActionsTEXT			ACTIONS ( Get )
					OActionsTEXT			ACTIONS ( Save )
					GenConName				THIS
					GenConField				~XSliderPosition~
					Units					1
					ToolTip					Translate(~Adjust the x position of the film drive~)
					LCLICKUPACTIONSTEXT		ACTIONS ( "Exec( XPositionSliderChanged( FALSE, 0 ) ; UpdateTempSliderPosition() )" );

	Define: TempSliderPosition Using DDWinCtrlDef AsSymbol TempSliderPosition
			Fields: TypeName				StaticText
					Position				XPositionSlider(GetLeft,Position) - 83,
											XPositionSlider(GetTop,Position),45,<buttonHeight>
					GenConField				~XSliderPositionUI~
					Tooltip					~~ ;

		Define: XPositionSliderMinusButton Using DDWinCtrlDef AsSymbol XPositionSliderMinusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(-1,FALSE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSlider(GetLeft,Position)-18,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					Translate(~Adjust the x position of the film drive 1 step to the left~)
					TYPENAME				~Button~ 
					TEXT					~-~;

		Define: XPositionSliderIMinusButton Using DDWinCtrlDef AsSymbol XPositionSliderIMinusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(-1,TRUE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSliderMinusButton(GetLeft,Position)-17,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					Translate(~Adjust the x position of the film drive in <DisplayUnits> to the left~)
					TYPENAME				~Button~ 
					TEXT					~<~;

		Define: XPositionSliderPlusButton Using DDWinCtrlDef AsSymbol XPositionSliderPlusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(1,FALSE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSlider(GetRight,Position)+4,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					Translate(~Adjust the x position of the film drive 1 step to the right~)
					TYPENAME				~Button~ 
					TEXT					~+~;

		Define: XPositionSliderIPlusButton Using DDWinCtrlDef AsSymbol XPositionSliderIPlusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(1,TRUE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSliderPlusButton(GetRight,Position)+2,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					Translate(~Adjust the x position of the film drive in <DisplayUnits> to the right~)
					TYPENAME				~Button~ 
					TEXT					~>~;

    Define: CurrentPunchNumberText Using DDWinCtrlDef AsSymbol CurrentPunchNumberText
            Fields: TypeName				StaticText
                    Text					Translate(~Punch~)
                    Position				XPositionSliderIPlusButton(GetRight,Position) + (<hGap> * 3) + 5,
											XPositionSliderIPlusButton(GetTop,Position),
											35,  <StaticTextHeight> ;

    Define: CurrentPunchNumberTextBox Using DDWinCtrlDef AsSymbol CurrentPunchNumberTextBox
            Fields: TypeName				StaticText
                    Position				CurrentPunchNumberText(GetRight,Position) + 5,
											CurrentPunchNumberText(GetTop,Position),45,<buttonHeight>
                    GenConName				THIS
                    GenConField				~CurrentPunchPosition~
                    Tooltip					Translate(~Current Punch Number~ );

	IF 0
	{
		WidthOfRow = XPositionSlider(GetRight,Position) - TensionBox(GetLeft,Position);
		HeightOfRow = XPositionSlider(GetBottom,Position) - TensionBox(GetLeft,Position);

		Define: TransportGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		Translate(~Transport~)
					Position	TensionBox(GetLeft,Position) - 6,TensionBox(GetTop,Position)-12,<WidthOfRow> + 12,<HeightOfRow> + 20 ;
	}

    return XPositionSlider(GetBottom,Position);
}

NUMERIC DefineLoadUnloadControl( &x,&y,&hGap,&vGap )
{
    Width = 60;	ShowLoadUnloadControls = F;

    Define: LoadRevButton Using DDWinCtrlDef AsSymbol LoadRevButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    Translate(~<<  Load~)
                    Position                <x> + 35,<y>,
											<Width>,<buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnLoadRevButton())" ) 
                    Tooltip                 Translate(~Advance past the leader and find the first punch in the reverse direction (right to left)~)
                    
    Define: LoadFwdButton Using DDWinCtrlDef AsSymbol LoadFwdButton  
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    Translate(~Load  >>~)
                    Position                LoadRevButton(GetRight,Position) + <hGap>,
                                            LoadRevButton(GetTop,Position),
                                            <Width>,  <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnLoadFwdButton())" ) 
                    Tooltip                 Translate(~Advance past the leader and find the first punch in the forward direction (left to right)~)

    Define: UnloadRevButton Using DDWinCtrlDef AsSymbol UnloadRevButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    Translate(~<< Unload~)
                    Position                $DialogWidth - LoadFwdButton(GetRight,Position) - <x> - 35,
                                            LoadFwdButton(GetTop,Position),
                                            <Width>, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnUnloadRevButton( ~Unload film reverse~ ))" ) 
                    Tooltip                 Translate(~Unload the film in the reverse direction (right to left)~)

    Define: UnloadFwdButton Using DDWinCtrlDef AsSymbol UnloadFwdButton
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    Translate(~Unload >>~)
                    Position                UnloadRevButton(GetRight,Position) + <hGap>,
                                            UnloadRevButton(GetTop,Position),
                                            <Width>, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnUnloadFwdButton(~Unload film forward~))" ) 
                    Tooltip                 Translate(~Unload the film in the forward direction (left to right)~)

	IF 0
	{
		WidthOfRow = UnLoadFwdButton(GetRight,Position) - LoadRevButton(GetLeft,Position);
		HeightOfRow = LoadFwdButton(GetBottom,Position) - LoadFwdButton(GetTop,Position);

		Define: LoadControlsGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		~Load~
					Position	LoadRevButton(GetLeft,Position) - 6,LoadRevButton(GetTop,Position)-12,<WidthOfRow> + 12,<HeightOfRow> + 20 ;
	}

    return UnloadFwdButton(GetBottom,Position);
}

NUMERIC DefineMiscTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	vertGap = 10;

	if ( <ScannerDocHR500> )
	{
		Helpfile = ~S_MiscHR.htm~;
	}
	else
	{
		Helpfile = ~ITS_Misc.htm~;
	}

    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text            ~Misc~
                    TypeName        Tab
                    Tooltip         Translate( ~Miscellaneous parameters pertaining to the scanning~ )
					HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		StaticWidth = 70;			ScanAreaWidth = 50;  ControlWidth = ($ScanAreaWidth)*4;

			Define: ResetLampTimerButton Using DDWinCtrlDef AsSymbol ResetLampTimerButton 
				Fields:	TypeName		Button
						Text			Translate( ~Reset Lamp Timer~ )
						Position		$x+5,$y-3,93,<ButtonHeight>
						DActionsText	ACTIONS  ( "Exec(ResetLampTimer())" ) 
						Tooltip			Translate( ~Resets the lamp hours to 0~ ); 

			Define: CurrentLampTimeField Using DDWinCtrlDef AsSymbol CurrentLampTimeField
				Fields: TypeName		StaticText
						Text			~~
						Position		ResetLampTimerButton(GetRight,Position)+$hGap,ResetLampTimerButton(GetTop,Position)+5,150,<StaticTextHeight>
						GenConField		LampHours

			Define: LampToggleButton Using DDWinCtrlDef AsSymbol LampToggleButton 
				Fields:	TypeName		Button
						Text			Translate( ~Toggle Lamp~ )
						Position		CurrentLampTimeField(GetRight,Position) +$hGap,ResetLampTimerButton(GetTop,Position),75,<ButtonHeight>
						DActionsText	ACTIONS  ( "Exec(ToggleLamp())" ) 
						Tooltip			Translate( ~Turns the lamp on/off~ )

			Define: CurrentLampStatusField Using DDWinCtrlDef AsSymbol CurrentLampStatusField
				Fields: TypeName		StaticText
						Text			~~
						Position		LampToggleButton(GetRight,Position)+$hGap,LampToggleButton(GetTop,Position)+5,100,<StaticTextHeight>
						GenConField		LampState

			IF 0
			{
			Define: GetMagCalDataButton Using DDWinCtrlDef AsSymbol GetMagCalDataButton 
				Fields:	TypeName		Button
						Text			~Get Mag Cal Data~
						Position		$x+5,$y+200,90,<ButtonHeight>
						DActionsText	ACTIONS  ( "Exec(GetMagCalData())" ) 
						Tooltip			~Get the scanner calibration data for a range of mags~ ;
			}

			Define: CriticalBackupButton Using DDWinCtrlDef AsSymbol CriticalBackupButton 
				Fields: TypeName		Button
						Text			Translate(~Backup Critical Scanner Files~)
						Position		ResetLampTimerButton(GetLeft,Position),ResetLampTimerButton(GetBottom,Position)+$vGap*2,150,<StaticTextHeight>
						DActionsText	ACTIONS  ( "Exec(OnBackupCriticalFilesButton())" ) 
						Tooltip			Translate( ~Backup the critical scanner files to the specified directory.~ );

			Define: CriticalBackupEditText Using DDWinCtrlDef AsSymbol CriticalBackupEditText 
				Fields: TypeName		EditText  
						Position		CriticalBackupButton(GetRight,Position)+$hGap,CriticalBackupButton(GetTop,Position),240,<EditTextHeight>
						 IActionsText	~[Get]~
						OActionsText    ~[Save]~
						GenConName		THIS
						GenConField		~BackupFilesPath~
						Tooltip			Translate( ~Set the path where the critical scanner files will be backed up.~ );

			Define: CriticalBackupBrowseButton Using DDWinCtrlDef AsSymbol CriticalBackupBrowseButton 
				Fields: TypeName		Button
						Text			Translate(~?~)
						Position		CriticalBackupEditText(GetRight,Position) + $hGap,CriticalBackupButton(GetTop,Position),20,<StaticTextHeight>
						DActionsText	ACTION EXEC ( BrowseForBackupFilesPath() )
						Tooltip			Translate( ~Select the location where the critical scanner files will be backed up.~ );

			Define: DumpRawDataCheckBox Using DDWinCtrlDef AsSymbol DumpRawDataCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~DumpRawData~
						Text			Translate( ~Write Raw Image~ )
						IsEnabled		T
						Position		$x+5,CriticalBackupButton(GetBottom,Position)+$vGap*2, $ButtonWidth + 45,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, the raw image file will be written to disk.~ );

// Save for future testing purposes
			Define: DumpRawIRDataCheckBox Using DDWinCtrlDef AsSymbol DumpRawIRDataCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~DumpRawIRData~
						Text			Translate( ~Write Raw IR Image~ )
						IsEnabled		F
						IsHidden		T
						Position		DumpRawDataCheckBox(GetRight,Position) + $hGap * 20,DumpRawDataCheckBox(GetTop,Position), $ButtonWidth + 60,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, the raw IR image file will be written to disk.~ );

			Define: FrameToPunchCheckBox Using DDWinCtrlDef AsSymbol FrameToPunchCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~FrameToPunch~
						Text			Translate( ~Set frame numbers to punch numbers~ )
						IsEnabled		F
						Position		$x+5,DumpRawDataCheckBox(GetBottom,Position)+$vGap, $ButtonWidth + 145,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						DActionsText    ACTIONS ( Save )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, frame numbers will be set to punch numbers during scanning~ );

			Define: FrameToPunchPaddingField Using DDWinCtrlDef AsSymbol FrameToPunchPaddingField
				Fields: GENCONFIELD		FrameToPunchPadding
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						DACTIONSTEXT	ACTIONS ( Save )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		FrameToPunchCheckBox(GetRight,Position),FrameToPunchCheckBox(GetTop,Position),20, <EditTextHeight> 
						TOOLTIP			Translate( ~The number of digits in the frame number, padded with 0's (between 0 to 5)~ )
						TYPENAME		MaskedEditText
						IsTabStop		T
						Mask			~#~
						DisallowedChars	~6789~
						PromptChar		~ ~ ;

			Define: SequentialPunchesCheckBox Using DDWinCtrlDef AsSymbol SequentialPunchesCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~SequentialPunches~
						Text			Translate( ~Sequential punch numbers expected~ )
						IsEnabled		F
						Position		FrameToPunchPaddingField(GetRight,Position)+$hGap*2,FrameToPunchCheckBox(GetTop,Position),$ButtonWidth + 120,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, report an error if the punch numbers are out of sequence~ );

			Define: OmitRollInPathCheckBox Using DDWinCtrlDef AsSymbol OmitRollInPathCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~OmitRollInPath~
						Text			Translate( ~Omit roll number in image path~ )
						IsEnabled		T
						Position		$x+5,FrameToPunchCheckBox(GetBottom,Position)+$vGap, $ButtonWidth + 145,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						DActionsText    ACTIONS ( Save )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, omit using the roll number in the image path name~ );

	        Define: PathTemplateText Using DDWinCtrlDef AsSymbol PathTemplateText 
		        Fields: TypeName		StaticText
			            Text			Translate( ~Image Path Template~ )
					    Position		OmitRollInPathCheckBox(GetLeft,Position),OmitRollInPathCheckBox(Getbottom,Position)+$vGap+1,140,15

			Define: PathTemplateField Using DDWinCtrlDef AsSymbol PathTemplateField
				Fields: GENCONFIELD		PathTemplate
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						DACTIONSTEXT	ACTIONS ( Save )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		OmitRollInPathCheckBox(GetLeft,Position),PathTemplateText(Getbottom,Position),$TabWidth-$hgap*4,<EditTextHeight> 
						TOOLTIP			Translate( ~Describe the path to use for the saved image file. Leave blank to use Volume\Order\Roll\Frame~ )
						TYPENAME		EditText
						IsTabStop		T
						PromptChar		~ ~ ;

			Define: GetStripSensorStateButton Using DDWinCtrlDef AsSymbol GetStripSensorStateButton 
				Fields:	TypeName		Button
						Text			Translate( ~Film Sensor~ )
						IsEnabled		F
						Position		$x+5,PathTemplateField(GetBottom,Position)+$vertGap,93,<ButtonHeight>
						DActionsText	ACTIONS  ( "Exec(GetStripSensorState())" ) 
						Tooltip			Translate( ~Get state of strip drive film sensor.~ );

			Define: StripSensorStateField Using DDWinCtrlDef AsSymbol StripSensorStateField
				Fields: TypeName		StaticText
						Text			~~
						IsEnabled		T
						Position		GetStripSensorStateButton(GetRight,Position)+$hGap,GetStripSensorStateButton(GetTop,Position)+5,100,<StaticTextHeight>
						GenConField		StripSensorState;

			Define: UseAdjustedFramesCheckBox Using DDWinCtrlDef AsSymbol UseAdjustedFramesCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~UseAdjustedFrames~
						Text			Translate( ~Use adjusted frame locations on advance~ )
						IsEnabled		F
						Position		$x+5,GetStripSensorStateButton(GetBottom,Position)+$vGap, $ButtonWidth + 160,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, advance film strip will use adjusted frame positions if available~ ); 

			Define: TwinCheckCheckBox Using DDWinCtrlDef AsSymbol TwinCheckCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~TwinCheck~
						Text			Translate( ~Ignore Twin Check~ )
						IsEnabled		F
						Position		$x+5,UseAdjustedFramesCheckBox(GetBottom,Position)+$vGap, $ButtonWidth + 160,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, frame detection will ignore an area consistent with a twin check at the beginning of the strip.~ );

			Define: ContinueFrameNumCheckBox Using DDWinCtrlDef AsSymbol ContinueFrameNumCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~ContinueFrameNumber~
						Text			Translate( ~Continue frame numbering~ )
						IsEnabled		F
						Position		UseAdjustedFramesCheckBox(GetRight,Position)+$hGap*2,GetStripSensorStateButton(GetTop,Position) - 2,$ButtonWidth + 120,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						DActionsText	ACTIONS ( Save "Exec(OnFrameRollNumbering())")
						Tooltip			Translate( ~If checked, the frame numbers will continue incrementing across strips~ );

			Define: AutoIncRollNumbersCheckBox Using DDWinCtrlDef AsSymbol AutoIncRollNumbersCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~AutoIncRollNumber~
						Text			Translate( ~Auto Increment Roll number~ )
						IsEnabled		F
						Position		ContinueFrameNumCheckBox(GetLeft,Position),ContinueFrameNumCheckBox(GetBottom,Position),$ButtonWidth + 120,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						DActionsText	ACTIONS ( Save "Exec(OnFrameRollNumbering())")
						Tooltip			Translate( ~If checked, the roll number will automatically increment when a strip is loaded.~ );

			Define: FocusEveryFrameCheckBox Using DDWinCtrlDef AsSymbol FocusEveryFrameCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~FocusEveryFrame~
						Text			Translate( ~Focus Every Frame~ )
						IsEnabled		F
						Position		AutoIncRollNumbersCheckBox(GetLeft,Position),AutoIncRollNumbersCheckBox(GetBottom,Position),$ButtonWidth + 120,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						DActionsText    ACTIONS ( Save )
						OActionsText	ACTIONS ( Save )
						Tooltip			Translate( ~If checked, focus will automatically be performed prior to each scan.~ );

			yPos = TwinCheckCheckBox(GetBottom,Position);
	}
    return <yPos>;
}


NUMERIC HandleHR500Error( ErrMsg )
{
	Message = ~~;
	DiagMsg1 = ~~;
	DiagMsg2 = ~~;

	DiagAction = ~~;

	if (GenCon( ScanErrorInfo,GetGenCon,ScanErrorInfo,PERMANENT ))
	{
		ScanErrorInfo( GetValues, APIErrorCode, APIErrorCode, ScannerErrorCode, ScannerErrorCode, Text, ErrorMsg );

		// First check for a scanner error, then an API error.

		if ( GenCon( DiagMsg1,GetFrom,~<ScannerErrorCode>~,~[STRINGS HR500ScanErrorMessages]~ ) )
		{
			DiagMsg1( GetValues, Text, TextMsg );
			Temp = Translate( ~\n\n~ );
			Message = ~<ErrMsg>~ + ~<Temp>~ + ~<TextMsg>~;
		}
		else if ( GenCon( DiagMsg2,GetFrom,~<APIErrorCode>~,~[STRINGS HR500APIErrorMessages]~ ) )
		{
			DiagMsg2( GetValues, Text, TextMsg );
			Temp = Translate( ~\n\n~ );
			Message = ~<ErrMsg>~ + ~<Temp>~ + ~<TextMsg>~;
		}
		else if ( DefinedAndNotNull( ErrMsg ) && DefinedAndNotNull( ErrorMsg ) ) 
		{
			Temp = Translate( ~\n\nDetailed error information:\n\n~ );
			Message = ~<ErrMsg>~ + ~<Temp>~ + ~<ErrorMsg>~;
		}
		else if ( DefinedAndNotNull( ErrMsg ) && !DefinedAndNotNull( ErrorMsg ) ) 
		{
			Message = ~<ErrMsg>~;
		}
		else if ( !DefinedAndNotNull( ErrMsg ) && DefinedAndNotNull( ErrorMsg ) ) 
		{
			Message = ~<ErrorMsg>~;
		}
		else
		{
			Message = Translate( ~\n\nUnable to get detailed error information:\n\n~ );
		}
	}
	else
	{
		Temp = Translate( ~\n\nUnable to get detailed error information:\n\n~ );
		Message = ~<ErrMsg>~ + ~<Temp>~;
	}
	Warning( ~<Message>~ );

	ScanErrorInfo( SetValues, APIErrorCode, 0, ScannerErrorCode, 0, Text, ~~ );
	
	if ( GenCon( DiagAction,GetFrom,~<ScannerErrorCode>~,~[STRINGS HR500ScanErrorHandlers]~ ) )
	{
		DiagAction( GetValues,Text,RecoveryAction );
		if ( !IsNull( RecoveryAction ) && ~<RecoveryAction>~ != ~~ )
		{
			<RecoveryAction>;
		}
	}

	return FALSE;
}

UniversalScanner = FALSE;

VOID SetTraceCallsFlag()
{
	if ( !Defined( Scanner ) )
	{
		return;
	}

	TraceCalls = ~<$Con.DlgData[TraceCalls]>~;
	Scanner( SetTraceCallsFlag,~<TraceCalls>~ );

	if ( !Defined( FilmDrive ) )
	{
		return;
	}

	GetFilmDriveVendor();
	if ( FunctionDefined( ~<FDVendor>_SetTraceCallsFlag~ ))
	{
		<FDVendor>_SetTraceCallsFlag( ~<TraceCalls>~ );
	}
}


VOID SetTimeCallsFlag()
{
	if ( !Defined( Scanner ) )
	{
		return;
	}

	TimeCalls = ~<$Con.DlgData[TimeCalls]>~;
	Scanner( SetTimeCallsFlag,~<TimeCalls>~ );

	if ( !Defined( FilmDrive ) )
	{
		return;
	}

	GetFilmDriveVendor();
	if ( FunctionDefined( ~<FDVendor>_SetTimeCallsFlag~ ))
	{
		<FDVendor>_SetTimeCallsFlag( ~<TimeCalls>~ );
	}
}


VOID SetIgnoreFrameWidthsFlag()
{
	IgnorePredefinedFrameWidths = ~<$Con.DlgData[IgnorePredefinedFrameWidths]>~;
}


ScannersFound = 0;

NUMERIC FindScanner( Search )
{
	if ( !Defined( Scanner ) || <Search> )
	{
		ScannersFound = 0;

		if ( !LoadScannerRoutines() )
		{
			return FALSE;
		}
	}

	if ( (<Search> == 0) && ($ScannersFound > 0) )
		{ return TRUE; }

	dlg( SetStatus,0,~Searching for scanners~ );

	ScannersFound = 0;

	if ( !Scanner( Find,ScannerCount ) )
	{
		Msg = Translate( ~No scanners found. Check power, cabling and ensure that there are not two devices at the same SCSI ID.~ );
		dlg( SetStatus,0,~No scanners found~ );
		return Warning( Translate( ~<Msg>~ ) );
	}

	ScannersFound = <ScannerCount>;

	if ( <ScannerCount> == 1 )
	{
		dlg( SetStatus,0,~Found 1 Scanner. ~ );
	}
	else
	{
		dlg( SetStatus,0,~Found <ScannerCount> Scanners. ~ );
	}
	
	return TRUE;
}


VOID SelectATab( num )
{
	if ( Defined( dlg ) )
	{
		dlg( SelectTab,TabWindow,~<num>~ );
	}
}


NUMERIC GetMagCalData()
{
	if ( !FindScanner(FALSE) )
	{
		return FALSE;
	}

	DlgData( Get,FilmType,FilmType );
	DlgData( Get,SFSFile,SFSFile );
	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}
	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
	result = Scanner( IsColorFilterPositionCorrect,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ );
	if ( <result> == -1 )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		return FALSE;
	}
	if ( <result> == FALSE )
	{
		Warning( Translate( ~The color filter is not in the correct position for this film type.\nMake sure the filter is in the correct position and then\nselect OK to continue.~ ) );
	}

	startMag = 0.55;
	endMag = 2.0;
	incr = 0.05;
	dlg( SetStatus,0,~<startMag> to <endMag>, increment <incr>.~ );

	Scanner( GetMagCalData, <startMag>, <endMag>, <incr> );

	return TRUE;
}

NUMERIC RestartScanner()
{
	ForgetGlobal( Scanner );
	return FindScanner(TRUE);
}


NUMERIC DiskSpaceOK()
{
	ScanWidth = GetScanWidth( FALSE, FALSE, TRUE );
	ScanLength = GetScanLength( <ScanWidth>, FALSE, FALSE );

	// Make sure there is enough space for 2X the size of the current scan. 
	scanSize = RoundToDigit((<ScanWidth> * <ScanLength> * 3.0 * 2.0) / (1024.0 * 1024.0), 1);

	dlg( GetStrings,Volume,Volume );

	Directory( Create,~<Volume>~ );

	diskSpace = GetDiskFreeMb(~<Volume>~);

	if ( <scanSize> <= <diskSpace> )
	{
		return TRUE;
	}
	if ( !Files( DirectoryExists, ~<Volume>~ ) )
	{
		return Warning( Translate( ~The requested scan path/volume does not exist.~ ) );
	}
	return Warning( Translate( ~You are running out of disk space on the specified volume.\n\nCreate some free disk space or specify a different volume to\nscan to and then try the operation again.~ ) );
}


VOID CheckScanWidthLengthMin( )
{
	adjustWL = FALSE;
	scanWidthMin = scanLengthMin = 2.0;
	Msg = ~~;

	overscanWidth = atof(~<$con.DlgData[OverScanWidth]>~);
	overscanLength = atof(~<$con.DlgData[OverScanLength]>~);

	if ( ( <overscanWidth> < <scanWidthMin> ) && ( <overscanLength> < <scanLengthMin> ) )
	{
		Msg = Translate( ~The Overscan area width and length are below the minimum\nallowed width and length. The Overscan area will automatically\nbe set to the minimum width and length.~ );
		adjustWL = TRUE;
	}
	else if ( <overscanWidth> < <scanWidthMin> )
	{
		Msg = Translate( ~The Overscan area width is below the minimum allowed width.\nThe Overscan area will automatically be set to the minimum width.~ );
		adjustWL = TRUE;
	}
	else if ( <overscanLength> < <scanLengthMin> )
	{
		Msg = Translate( ~The Overscan area height is below the minimum allowed height.\nThe Overscan area will automatically be set to the minimum height.~ );
		adjustWL = TRUE;
	}

	if ( <adjustWL> )
	{
		MessageBox( ~<Msg>~, OK );
		AdjustOverscanWL( <scanWidthMin>,<scanLengthMin> );
	}

	dlg( GetInput );
	overscanWidth = atof(~<$con.DlgData[OverScanWidth]>~);
	overscanLength = atof(~<$con.DlgData[OverScanLength]>~);

	scanWidth = atof(~<$con.DlgData[ScanWidth]>~);
	scanLength = atof(~<$con.DlgData[ScanLength]>~);

	scanWidthMin = (<scanWidthMin> * 100. / <overscanWidth>);
	scanLengthMin = (<scanLengthMin> * 100. / <overscanLength>);

	if ( ( <scanWidth> < <scanWidthMin> ) && ( <scanLength> < <scanLengthMin> ) )
	{
		Msg = Translate( ~The scan area width and length are below the minimum\nallowed width and length. The scan area will automatically\nbe set to the minimum width and length.~ );
		adjustWL = TRUE;
	}
	else if ( <scanWidth> < <scanWidthMin> )
	{
		Msg = Translate( ~The scan area width is below the minimum allowed width.\nThe scan area will automatically be set to the minimum width.~ );
		adjustWL = TRUE;
	}
	else if ( <scanLength> < <scanLengthMin> )
	{
		Msg = Translate( ~The scan area height is below the minimum allowed height.\nThe scan area will automatically be set to the minimum height.~ );
		adjustWL = TRUE;
	}

	if ( <adjustWL> )
	{
		MessageBox( ~<Msg>~, OK );
		AdjustScanWL( <scanWidthMin>,<scanLengthMin> );
	}

	dlg( GetInput );
}


NUMERIC ScanSizeOK( DisplayMessage )
{
	ScanWidth = GetScanWidth( TRUE, TRUE, TRUE );	 // FORCE THIS TO RETURN FULL SCAN WIDTH FOR NEXT CALCULATIONS
	ScanLength = GetScanLength(  <ScanWidth>, FALSE, TRUE ); // FORCE THIS TO RETURN FULL SCAN WIDTH FOR NEXT CALCULATIONS

	PixelSummingIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
	PixelSummingFactor = atof(PixelSumming( ValueOf,$PixelSummingIndex ));

	bytesPerPixel = 2;
	numColors = 3;
	pixelsPerLine = (<ScanWidth> * <bytesPerPixel> * <numColors>) / <PixelSummingFactor>;
	lines = <ScanLength> / <PixelSummingFactor>;

	currentImageSize = <pixelsPerLine> * <lines>;
	scanSize = (<currentImageSize> + ((16 / <PixelSummingFactor>) * <pixelsPerLine>)) / 2;
	if (<scanSize> <= <MaxHR500ScanSize>)
	{
		return TRUE;
	}
	else
	{
		maxSize = <MaxHR500ScanSize> - (((16 / <PixelSummingFactor>) * <pixelsPerLine>) / 2);
		maxSize = RoundToDigit(<maxSize> / (1024.0 * 1024.0), 3);
		if ( <DisplayMessage> == 2 )
		{
			Warning( Translate( ~The scan size specified exceeds the HR500 scan size limit of <maxSize> Mb.\n\nCalibration may reduce the size to within the limit. Otherwise, you will need choose a smaller scan size or select a lower resolution.~ ) );
		}
		else if ( <DisplayMessage> == 1 )
		{
			dlg( PopupMsg, Translate( ~The scan size specified exceeds the HR500 scan size limit of <maxSize> Mb. Calibration may reduce the size to within the limit. Otherwise, you will need choose a smaller scan size or select a lower resolution.~ ) );
		}
		return FALSE;
	}
}


NUMERIC GetScanWidth( GetWithoutPixelSumming, CountOverScan, SkipCalCheck )
{
	Mag = ~<$Con.DlgData[Format]>~;

	Index = MagNames( IndexOf,~<Mag>~ );
	PixelSummingIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
	PixelSummingFactor = atof(PixelSumming( ValueOf,$PixelSummingIndex ));

	RealMag = CalculateMagnification( TRUE );

	if ( <GetWithoutPixelSumming> )
	{
		PixelSummingFactor = 1.0;
	}

	FrameWidth = 0;
	if ( <IgnorePredefinedFrameWidths> )
	{
		FrameWidth = <MaxFullFrameWidth>;
	}

	if ( <FrameWidth> == 0 )
	{
		FrameWidth = atof(FullFrameWidths(ValueOf,$Index));
	}

	PixelSize = 0.012;
	SizzleControl( Set,FullFrameWidth,<FrameWidth> );
	overScan = SizzleControl( GetNumeric,OverScan );
	if ( !<overScan> )
	{
		ScanWidth = (<RealMag> * <FrameWidth> / <PixelSize>);
	}
	else 
	{
		OverScanWidth = atof(~<$con.DlgData[OverScanWidth]>~);

		overscanAdjustment = <OverScanWidth> / 100.0;
		OverScanFrameWidth = <FrameWidth> * <overscanAdjustment>;

		SizzleControl( Set,OverScanWidth,<OverScanWidth> );
		SizzleControl( Set,OverScanFrameWidth,<OverScanFrameWidth> );

		if ( <CountOverScan> )
		{
			ScanWidth = (<RealMag> * <OverScanFrameWidth> / <PixelSize>);
		}
		else
		{
			ScanWidth = (<RealMag> * <OverScanFrameWidth> / <PixelSize>);
		}
		//Log( Session, ~FrameWidth = <FrameWidth>,OverscanFrameWidth = <OverScanFrameWidth>,overscanAdjustment =<OverscanAdjustment>, CountOverScan = <CountOverScan>~ );
		//Log( Session, ~ScanWidth = <ScanWidth>,OverscanWidth = <OverScanWidth>~ );
	}
	ScanWidth = Round(<ScanWidth>);

	LastValidPixel = SizzleControl(GetNumeric,LastValidPixel);
	FirstValidPixel = SizzleControl(GetNumeric,FirstValidPixel);
	MaxPixels = <LastValidPixel> - <FirstValidPixel>;

	if ( Defined( Scanner ) && (<MaxPixels> > 0) && !<MagNeeded> )
	{
		if ( !<SkipCalCheck> )
		{
			if ( CalibrationOK( FALSE,FALSE,TRUE,FALSE ) )
			{
				if ( <MaxPixels> < <ScanWidth> )
				{	
					ScanWidth = <MaxPixels>;
				}
			}
		}
		else
		{
			if ( <MaxPixels> < <ScanWidth> )
			{	
				ScanWidth = <MaxPixels>;
			}
		}
	}

	ScanWidth = <ScanWidth> * (atof(~<$con.DlgData[ScanWidth]>~)/ 100.0);
	if ( (<FirstValidPixel> % <PixelSummingFactor>) == 0 )
	{
		ScanWidth = <ScanWidth> / <PixelSummingFactor>;
	}
	else
	{
		PixelOffset = floor((<FirstValidPixel> / <PixelSummingFactor>) + 1);
		PixelOffset = <PixelOffset> * <PixelSummingFactor>;

		ScanWidth = floor( <ScanWidth> / <PixelSummingFactor> );
		ScanWidth = <ScanWidth> * <PixelSummingFactor>;

		if ( (<PixelOffset>  + <ScanWidth>) > <LastValidPixel> )
		{
			ScanWidth = (<ScanWidth> - <PixelSummingFactor>) / <PixelSummingFactor>;
		}
		else
		{
			ScanWidth = <ScanWidth> / <PixelSummingFactor>;
		}
	}

	ScanWidth = ( floor(<ScanWidth>/ 2.0) ) * 2.0;
	return <ScanWidth>;
}


NUMERIC GetScanLength( ScanWidth, GetWithoutPixelSumming, CountOverScan )
{
	Mag = ~<$Con.DlgData[Format]>~;

	Index = MagNames( IndexOf,~<Mag>~ );
	RealMag = CalculateMagnification( TRUE );

	PixelSummingIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
	PixelSummingFactor = atof(PixelSumming( ValueOf,$PixelSummingIndex ));
	if ( <GetWithoutPixelSumming> )
	{
		PixelSummingFactor = 1.0;
	}

	overScan = SizzleControl( GetNumeric,OverScan );

	PixelSize = 0.012;
	FrameHeight = atof(FullFrameHeights(ValueOf,$Index));
	SizzleControl( Set,FullFrameHeight,<FrameHeight> );
	
	if ( !<overScan> )
	{
		ScanLength = (<RealMag> * <FrameHeight> / <PixelSize>) * (atof(~<$con.DlgData[ScanLength]>~)/ 100.0);
	}
	else 
	{
		OverScanHeight = atof(~<$con.DlgData[OverScanLength]>~);
		overscanAdjustment = <OverScanHeight> / 100.0;
		
		OrigOverScanFrameHeight = atof(OverScanFrameHeights(ValueOf,$Index));
		OverScanFrameHeight = <OrigOverScanFrameHeight> * <overscanAdjustment>;
		SizzleControl( Set,OverScanHeight,<OverScanHeight> );
		SizzleControl( Set,OverScanFrameHeight,<OverScanFrameHeight> );

		if ( <CountOverScan> )
		{
			ScanLength = (<RealMag> * <OverScanFrameHeight> / <PixelSize>);
		}
		else
		{
			ScanLength = (<RealMag> * <OverScanFrameHeight> / <PixelSize>) * (atof(~<$con.DlgData[ScanLength]>~)/ 100.0);
		}
	}


	ScanLength = Round(<ScanLength>);
	ScanLength = <ScanLength> / <PixelSummingFactor>;

	ScanLength = floor( (<ScanLength> * 2.0) / 2.0);
	
	if ( <overScan> && ~<FDVendor>~ == ~HR500AFD~ )
	{
		ScanLength = AdjustOverscanLength( <ScanWidth>, <ScanLength>, <PixelSummingFactor>, <RealMag>, <OrigOverScanFrameHeight> );
	}
	return <ScanLength>;
}


NUMERIC AdjustOverscanLength( ScanWidth, ScanLength, PixelSummingFactor, RealMag, OverScanFrameHeight )
{
	PixelSize = 0.012;
	bytesPerPixel = 2;
	numColors = 3;
	pixelsPerLine = (<ScanWidth> * <bytesPerPixel> * <numColors>) / <PixelSummingFactor>;
	lines = <ScanLength> / <PixelSummingFactor>;

	currentImageSize = <pixelsPerLine> * <lines>;
	scanSize = (<currentImageSize> + ((16 / <PixelSummingFactor>) * <pixelsPerLine>)) / 2;
	if (<scanSize> <= <MaxHR500ScanSize>)
	{
		return <ScanLength>;
	}

	maxLines = <MaxHR500ScanSize> / <pixelsPerLine> - (((16 / <PixelSummingFactor>) * <pixelsPerLine>) / 2);
	if ( <lines> <= <maxLines> )
	{	
		return <ScanLength>;
	}

	ScanLength = <maxLines> * <PixelSummingFactor>;

	newOverScanFrameHeight = ScanLength * <PixelSize> / <RealMag>;

	adjustment = newOverScanFrameHeight / <OrigOverScanFrameHeight> * 100.;

	dlg( SetStrings,OverScanLength,<adjustment> );
	dlg( Save,OverScanLength );

	return <ScanLength>;
}


VOID OnChangeProfilesEnabled()
{
	dlg( GetInput );

	if ( !dlgData( GetNumeric,ScannerProfileEnabled ) )
	{
		dlg( EnableControls,FALSE,OutputProfileEnabledBox,EmbedProfileBox );
		dlg( SetStrings,OutputProfileEnabled,0,EmbedProfile,0 );
	}
	else	// scanner profile enabled
	{
		dlg( EnableControls,TRUE,OutputProfileEnabledBox,EmbedProfileBox );

		if ( dlgData( GetNumeric,OutputProfileEnabled ) )
		{
			dlg( EnableControls,TRUE,ScannerProfileEnabledBox );
			dlg( SetString,1,ScannerProfileEnabled );
		}
	}

}

VOID OnProfileChange( IsScannerProfile )
{
	profile = ~~;

	if ( <IsScannerProfile> )
	{
		profile = ~<$con.DlgData[ICCProfile]>~;
	}
	else
	{
		profile = ~<$con.DlgData[ICCOutputProfile]>~;
	}

	Query = ~Select Path From Profiles Where Name = '<profile>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query for profile (<profile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	if ( List( GetFirst,ProfileRecord ) )
	{
		profilePath = ~<$pcon.ProfileRecord[Path]>~;

		if ( !Files( FileExists,~<profilePath>~ ) ) 
		{
			Warning( Translate( ~The profile (<profile>) does not exist in the path specified in the Profiles database table.\nVerify the profile information in the Profiles table and try the operation again.~ ) );
		}
	}

	return;
}



VOID UpdateTempSliderPosition( overrideValue )
{
	if ( DefinedAndNotNULL( overrideValue ) )
	{
		CurrentXSliderPosition = <overrideValue>;
	}
	else
	{
		CurrentXSliderPosition = NUMERIC(~<$Con.DlgData[XSliderPosition]>~);
	}
	DlgData( Get,TXOffsetIncrementUnit,TXOffsetIncrementUnit );
	if ( <CurrentXSliderPosition> )
	{
		CurrentXSliderPosition = <CurrentXSliderPosition> * <TXOffsetIncrementUnit>;
		CurrentXSliderPositionUI = InchesTo<DisplayUnits>( <CurrentXSliderPosition> );
		CurrentXSliderPositionUI = ntoa( <CurrentXSliderPositionUI>,~%.03f~ );
		//CurrentXSliderPositionUI = ~<CurrentXSliderPositionUI>"~;
	}
	else
	{
		CurrentXSliderPositionUI = ~~;
	}
	dlg( SetStrings,XSliderPositionUI, ~<CurrentXSliderPositionUI>~ );
}


VOID IncSliderPosition( value, AdjustByInches )
{
	dlg( GetInput );
	//dlg( Update );	// Update dialog in case out of range number reset to min or max value

	if ( <AdjustByInches> )
	{
		inches = <DisplayUnits>ToInches( NUMERIC(~<$Con.DlgData[XSliderIFactor]>~) );
		TXOffsetIncrementUnit = NUMERIC( ~<$Con.DlgData[TXOffsetIncrementUnit]>~ );

		if ( ( <inches> <= 0 ) || ( <inches> > <MaxXIncrementsInInches> ) )
		{
			Warning( Translate( ~X Offset (in <DisplayUnits>) must be greater than 0 and less than or equal to <MaxXIncrementsInDisplayUnits> <DisplayUnits>~ ) );
			return;
		}

		if ( <TXOffsetIncrementUnit> <= 0 )
		{
			Warning( Translate( ~Measurement of units for the film transport X Offset is unknown~ ) );
			return;
		}
		
		totalSteps = <inches>/<TXOffsetIncrementUnit>;

		// Value indicates direction if adjust by inches
		if ( <value> < 0 )
		{
			totalSteps = <totalSteps> * (-1);
		}
		UpdateTempSliderPosition( <totalSteps> );
		XPositionSliderChanged( TRUE, <totalSteps> );
		UpdateTempSliderPosition();
	}
	else
	{
		GetFilmDriveVendor();
		if ( ~<FDVendor>~ == ~Halse~ )
		{ 
			value = <value> * 10.0;
			if ( ~<gCurrentTransportType>~ == ~<DRIVE_120>~ )
			{
				delta = <value> * 2.0;
			}
		}
		dlg( SetStrings,XSliderPosition, <value> );
		UpdateTempSliderPosition();
		XPositionSliderChanged( FALSE, <value> );
		UpdateTempSliderPosition();
	}
}


NUMERIC CheckIfNetworkAccessable( &ImagePath )
{
	ImagePath = MakePath( Type,UNC,~<ImagePath>~ );

	if ( !Files( IsUNC,~<ImagePath>~ ) && NetworkOperation() )
	{
		Msg = Translate( UIMessages,UnsharedFile,~<ImagePath>~ );

		if ( MessageBox( ~<Msg>~,YESNO ) != YES )
			{ return FALSE; }
	}

	return TRUE;
}


VOID ChangeZoom( amount, adjust )
{
	if ( <adjust> )
	{
		sum = dlgData( GetNumeric,OpticalZoom ) + <amount>;
	}
	else
	{
		sum = <amount>;
	}

	lowVal = dlgData(GetAttrInfo, OpticalZoom, LowValue);
	highVal = dlgData(GetAttrInfo, OpticalZoom, HighValue);

	sum = Pin( <sum>, <lowVal>, <highVal> );

	dlg( SetStrings,OpticalZoom,~<sum>~ );

	OnFormatChange( 5, ~Optical zoom changed.~, FALSE, FALSE, TRUE );
}


NUMERIC CheckZoom( )
{
	ZoomValue = 0;
	AdjustOnFirstQuestion = FALSE;

	Mag = ~<$Con.DlgData[Format]>~;
	ZoomValue = dlgData( GetNumeric,OpticalZoom );
	ScanSize = ~<$Con.DlgData[SpeedQuality]>~;

	if ( ~<Mag>~ == ~4x5~ )
	{	maxCarriageMovement = 123.0;	}
	else
	{	maxCarriageMovement = 90.0;	}

	Index = MagNames( IndexOf,~<Mag>~ );
	MinMagnification = atof(MinMagnifications(ValueOf,$Index));
	MaxMagnification = atof(MaxMagnifications(ValueOf,$Index));
	Mag = (((<MaxMagnification> - <MinMagnification>) / (<SpeedQualityHighVal> - <SpeedQualityLowVal>)) * <ScanSize>) + <MinMagnification>;
	DesiredMag = $Mag * ((100 + <ZoomValue>) / 100);

	pixelSize = 0.012;
	scanLength = 0;
	
	if ( <DesiredMag> < <MinHR500Mag> )
	{
		Msg = Translate( ~Unable to use the specified optical zoom because the scanner magnification\nsetting would be out of range for the current scan size. Do you want the\noptical zoom recalculated for the current scan size?~ );
		if ( MessageBox( ~<Msg>~,YESNO ) == YES )
		{
			AdjustOnFirstQuestion = TRUE;
			ZoomValue = round(((<MinHR500Mag> * 100.0) / <Mag>) - 100.0);
			dlg( SetStrings,OpticalZoom,~<ZoomValue>~ );
		}
		else
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
			{ SetTransportControlsStopped(); }

			return FALSE;
		}
	}
	else if ( <DesiredMag> > <MaxHR500Mag> )
	{
		Msg = Translate( ~Unable to use the specified optical zoom because the scanner magnification\nsetting would be out of range for the current scan size. Do you want the\noptical zoom recalculated for the current scan size?~ );
		if ( MessageBox( ~<Msg>~,YESNO ) == YES )
		{
			AdjustOnFirstQuestion = TRUE;
			ZoomValue = round(((<MaxHR500Mag> * 100.0) / <Mag>) - 100.0);
			dlg( SetStrings,OpticalZoom,~<ZoomValue>~ );
		}
		else
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
			{ SetTransportControlsStopped(); }

			return FALSE;
		}
	}
	if ( !CheckScanLength( <maxCarriageMovement>,<pixelSize>,<DesiredMag>,scanLength ) )
	{
		response = NO;
		if ( !<AdjustOnFirstQuestion> )
		{
			Msg = Translate( ~Unable to use the specified optical zoom because the \nscan carriage movement would exceed the distance limit. Do you want the\noptical zoom recalculated for the current scan size?~ );
			response = MessageBox( ~<Msg>~,YESNO );
		}
		if ( <response> == YES || <AdjustOnFirstQuestion> )
		{
			ZoomValue = round(((<scanLength> * <pixelSize> * 100.0 / <maxCarriageMovement>) / <Mag>) - 100.0);
			dlg( SetStrings,OpticalZoom,~<ZoomValue>~ );
		}
		else
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
			{ SetTransportControlsStopped(); }

			return FALSE;
		}
	}
	CheckOverScanAdjustment( <ZoomValue> );

	return TRUE;
}


NUMERIC CheckScanLength( maxCarriageMovement,pixelSize,DesiredMag,&scanLength )
{
	DlgData( GetValues,Format,Format );

	scanWidth = GetScanWidth( FALSE, FALSE, TRUE );
	scanLength = GetScanLength(  <scanWidth>,FALSE, TRUE ); // FORCE THIS TO RETURN FULL SCAN LENGTH FOR NEXT CALCULATIONS
	
	distance = floor( <scanLength> * <pixelSize> / <DesiredMag> );

	return (<distance> <= <maxCarriageMovement>);
}


VOID ClearMagnificationHandlers()
{
	OnSetMagnificationComplete = ~~;
}

VOID ClearCalibrationHandlers()
{
	OnCalibrationComplete = ~~;
}

OnSetMagnificationComplete = ~~;
OnCalibrationComplete = ~~;
ClearCalibrationHandlers();
ClearMagnificationHandlers();
MagNeeded = FALSE;
gCurrentFilmFormat = ~~;


NUMERIC UpdateScanSize( userEnteredScanSize, displayMessage, SkipCalCheck )
{
	AdjustOverscanWL( 0,0 );
	AdjustScanWL( 0,0 );

	if ( !<userEnteredScanSize> )
	{
		ScanWidth = GetScanWidth( FALSE, FALSE, <SkipCalCheck> );
		ScanLength = GetScanLength( <ScanWidth>, FALSE, FALSE );

		Rotation = DlgData( GetNumeric,ScanRotation );
		if (<Rotation> == 90 || <Rotation> == 270)
		{
			temp = <ScanWidth>;
			ScanWidth = <ScanLength>;
			ScanLength = <temp>;
		}

		scanSize = RoundToDigit((<ScanWidth> * <ScanLength> * 3.0) / (1024.0 * 1024.0), 2);

		dlg( SetString,~(<ScanWidth>~ + ~ x ~ + ~<ScanLength>)~,ScanSizeWidthLength );
		dlg( SetString,~<scanSize>~,ScanSizeField );
	}

	dlg( GetStrings,Volume,Volume );
	diskSpace = GetDiskFreeMb(~<Volume>~);
	diskSpace = RoundToDigit(<diskSpace> / 1024.0, 2);
	dlg( SetStatus,2,~<diskSpace>~ + ~ Gb~ );

	return ScanSizeOK( <displayMessage> );
}

VOID AdjustScanWL( scanWidthMin,scanLengthMin )
{
	dlg( GetControlValue,~MiddleXField~,scanX );
	dlg( GetControlValue,~MiddleYField~,scanY );
	dlg( GetControlValue,~ScanWidthField~,scanW );
	dlg( GetControlValue,~ScanHeightField~,scanL );

	if ( ~<scanX>~ == ~~ )
	{
		scanX = 0;
	}
	if ( ~<scanY>~ == ~~ )
	{
		scanY = 0;
	}
	if ( ~<scanW>~ == ~~ )
	{
		scanW = 0;
	}
	if ( ~<scanL>~ == ~~ )
	{
		scanL = 0;
	}

	// Pin the values into valid range before adjusting
	// scan area to fit
	dlg( GetInput );

	newScanX = Pin( <scanX>,2,98 );
	newScanY = Pin( <scanY>,2,98 );
	newScanW = RoundToDigit( Pin( <scanW>,<scanWidthMin>,100 ), 3 );
	newScanL = RoundToDigit( Pin( <scanL>,<scanLengthMin>,100 ), 3 );

	tmpMinScanX = <newScanW> / 2;
	tmpMaxScanX = 100 - <tmpMinScanX>;

	tmpMinScanY = <newScanL> / 2;
	tmpMaxScanY = 100 - <tmpMinScanY>;
	
	// Pin the values into valid range
	newScanX = RoundToDigit( Pin( <newScanX>,<tmpMinScanX>,<tmpMaxScanX> ), 3 );
	newScanY = RoundToDigit( Pin( <newScanY>,<tmpMinScanY>,<tmpMaxScanY> ), 3 );

	if ( ( <scanX> != <newScanX> ) || ( <scanY> != <newScanY> ) || ( <scanW> != <newScanW> ) || ( <scanL> != <newScanL> ) )
	{
		dlg( SetStrings,XPos,~<newScanX>~,YPos,~<newScanY>~,ScanWidth,~<newScanW>~,ScanLength,~<newScanL>~ );
	}

}


VOID AdjustOverscanWL( scanWidthMin,scanLengthMin )
{
	dlg( GetControlValue,~OSMiddleXField~,scanX );
	dlg( GetControlValue,~OSMiddleYField~,scanY );
	dlg( GetControlValue,~OverScanWidthField~,scanW );
	dlg( GetControlValue,~OverScanHeightField~,scanL );

	if ( ~<scanX>~ == ~~ )
	{
		scanX = 0;
	}
	if ( ~<scanY>~ == ~~ )
	{
		scanY = 0;
	}
	if ( ~<scanW>~ == ~~ )
	{
		scanW = 0;
	}
	if ( ~<scanL>~ == ~~ )
	{
		scanL = 0;
	}

	// Pin the values into valid range before adjusting
	// scan area to fit
	newScanX = Pin( <scanX>,2,98 );
	newScanY = Pin( <scanY>,2,98 );
	newScanW = RoundToDigit( Pin( <scanW>,<scanWidthMin>,100 ), 3 );
	newScanL = RoundToDigit( Pin( <scanL>,<scanLengthMin>,100 ), 3 );

	tmpMinScanX = <newScanW> / 2;
	tmpMaxScanX = 100 - <tmpMinScanX>;

	tmpMinScanY = <newScanL> / 2;
	tmpMaxScanY = 100 - <tmpMinScanY>;
	
	// Pin the values into valid range
	newScanX = RoundToDigit( Pin( <newScanX>,<tmpMinScanX>,<tmpMaxScanX> ), 3 );
	newScanY = RoundToDigit( Pin( <newScanY>,<tmpMinScanY>,<tmpMaxScanY> ), 3 );

	if ( ( <scanX> != <newScanX> ) || ( <scanY> != <newScanY> ) || ( <scanW> != <newScanW> ) || ( <scanL> != <newScanL> ) )
	{
		DlgData( SetValues,OverScanXPos,<newScanX>,OverScanYPos,<newScanY>,OverScanWidth,<newScanW>,OverScanLength,<newScanL> );
		dlg( SetStrings,OverScanXPos,~<newScanX>~,OverScanYPos,~<newScanY>~,OverScanWidth,~<newScanW>~,OverScanLength,~<newScanL>~ );
		SizzleControl( Set,OverScanYPos,<newScanY>);
		SizzleControl( Set,OverScanHeight,<newScanL>);
		SizzleControl( Set,OverScanXPos,<newScanX>);
		SizzleControl( Set,OverScanWidth,<newScanW>);
	}
}


VOID UpdateFreeDiskSpace()
{
	dlg( GetStrings,Volume,Volume );
	diskSpace = GetDiskFreeMb(~<Volume>~);
	diskSpace = RoundToDigit(<diskSpace> / 1024.0, 2);
	dlg( SetStatus,2,~<diskSpace>~ + ~ Gb~ );
}


VOID UpdateScanButton()
{
	Frame = ~<$con.DlgData[Frame]>~;
	if ( ~<Frame>~ != ~<CurrentScanFrame>~ )
	{
		ScanButtonDisabled = FALSE;
		FrameNotInDB = <PreFocusFrameStatus>;
		if ( DlgData( GetNumeric,AutoScan ) )
		{
			dlg( EnableControls,FALSE,ScanButton );
		}
		else
		{
			dlg( EnableControls,<CurrentControlsState>,ScanButton );
		}
	}
}

NUMERIC OnBackupCriticalFilesButton()
{
	dlg( GetInput,GetStrings,BackupFilesPath,BackupFilesPath );

	if ( ~<BackupFilesPath>~ == ~~ )
	{
		return Warning( Translate( ~You must select the directory where the critical scanner files will be backed up~ ) );
	}

	if ( !Defined( Scanner ) )
	{
		if ( !FindScanner( FALSE ) )
		{
			return FALSE;
		}
	}

	dlg( SetStatus,0,Translate( ~Backing up files to <BackupFilesPath>~ ) );
	Directory( Create,~<BackupFilesPath>/Current~ );
	Directory( Create,~<BackupFilesPath>/Factory~ );
	if ( Scanner( BackupCriticalFiles,~<BackupFilesPath>~ ) )
	{
		dlg( SetStatus,0,Translate( ~Backup complete~ ) );
		return TRUE;
	}
	else
	{
		dlg( SetStatus,0,Translate( ~Backup failed~ ) );
		return Warning( Translate( ~The backup was not successful.~ ) );
	}
}


VOID BrowseForLutFilePath()
{
	dlg( GetInput );
	StartingDirectory = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\Luts~;
	Directory( Create,~<StartingDirectory>~ );

	Title = ~Find the lut to apply to scanned images~;

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,Path,LutPath,Open) )
	{
		dlg( SetString,~<LutPath>~,LutFile,0 );
	}
}


VOID BrowseForSFSFile()
{
	dlg( GetInput );
	StartingDirectory = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\~;
	Directory( Create,~<StartingDirectory>~ );
	FileFilter = ~SFS Files|*.satdef|All Files|*.*||~;

	Title = ~Find the SFS Boundary Set to apply to scanned image~;

	if ( FileDialog( Title,~<Title>~,DefaultExt,~SATDEF~,Filter,~<FileFilter>~,DefaultDirectory,~<StartingDirectory>~,Path,SFSPath,Open) )
	{
		dlg( SetString,~<SFSPath>~,SFSFile,0 );
	}

}


VOID BrowseForBackupFilesPath()
{
	dlg( GetInput,GetStrings,BackupFilesPath,BackupFilesPath );
	StartingDirectory = ~<BackupFilesPath>~;

	Title = ~Find the directory to backup the critical scanner files~;

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,DefaultFile,Translate(~In this directory~),Path,Path,Save) )
	{
		TheDirectory = ~<$Str.$Path.Path>~;

		if ( CheckIfNetworkAccessable( TheDirectory ) )
		{
			dlg( SetString,~<TheDirectory>~,BackupFilesPath,0 );
			dlg( GetInput,GetStrings,BackupFilesPath,BackupFilesPath );
			if ( ~<TheDirectory>~ != ~<BackupFilesPath>~ )
			{
				Warning( Translate(~The path name that you have selected contains invalid characters.\n\nThese invalid characters have been removed before placing the path name in the dialog.~) );
			}
		}
	}
}


VOID BrowseForImagePath()
{
	dlg( GetInput,GetStrings,Volume,Volume );
	StartingDirectory = ~<Volume>~;
	
	Title = ~Find the directory to save the scanned images~;

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,DefaultFile,Translate(~In this directory~),Path,Path,Save) )
	{
		TheDirectory = ~<$Str.$Path.Path>~;

		if ( CheckIfNetworkAccessable( TheDirectory ) )
		{
			dlg( SetString,~<TheDirectory>~ ,Volume,0 );
			dlg( GetInput,GetStrings,Volume,Volume );
			if ( ~<TheDirectory>~ != ~<Volume>~ )
			{
				Warning( Translate(~The path name that you have selected contains invalid characters.\n\nThese invalid characters have been removed before placing the path name in the dialog.~) );
			}

		}
	}
}


NUMERIC GetFilmDriveVendor()
{
	DlgData( GetValues,FilmDriveVendor,FDVendorTemp );
	FDVendor = ~<FDVendorTemp>~;

	if ( ~<FDVendor>~ == Translate( ~Long Roll~ ) )
	{
		FDVendor = ~HR500~;
	}
	else if ( ~<FDVendor>~ == Translate( ~Strip~ ) )
	{
		FDVendor = ~Halse~;
	}
	else if ( ~<FDVendor>~ == Translate( ~Cut Neg~ ) )
	{
		FDVendor = ~None~;
	}
	else if ( ~<FDVendor>~ == Translate( ~Long Roll Auto Frame~ ) && RunningVersion( 5.1 ) )
	{
		FDVendor = ~HR500AFD~;
	}
	else
	{
		return Warning( Translate(~<FDVendor> is not supported in this version~) );
	}
	return TRUE;

}

NUMERIC EditFilmDriveSetup()
{
	ScannerSerialNumber = 0;

	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~None~ || ~<FDVendor>~ == ~~ )
	{
		return FALSE;
	}
	
	if ( Defined( Scanner ) )
	{
		if ( !Scanner( GetSerialNumber,ScannerSerialNumber ) )
		{
			Warning( Translate( ~Could not get serial number of scanner.~ ) );
		}
	}
	else if ( FindScanner(FALSE) )
	{
		if ( !Scanner( GetSerialNumber,ScannerSerialNumber ) )
		{
			Warning( Translate( ~Could not get serial number of scanner.~ ) );
		}
	}

	Query = STR ( SELECT * From <FDVendor>FilmDrive Order By Name );

	Action = ACTION DOC ( ~<FDVendor>FilmDriveSetups~ OpenOnce <FDVendor>FDDoc "Init( ~<FDVendor> FilmDrive Setups~,~<Query>~,~<ScannerSerialNumber>~ );" );

	return PerformActions( Action );
}


VOID UpdateFilmDriveSetupsCombo()
{
	// Get the current selection translated to a vendor
	dlg( GetInput );
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ != ~~ && ~<FDVendor>~ != ~None~ )
	{
		// Call the FilmDriveSelected method of the currently selected film drive
		FilmDriveSelected();

		Query = ~Select * from <FDVendor>FilmDrive Order By Name~;

		if ( PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			if ( List( GetFirst,EditorRecord ) )
			{
				List( MakeStringList,FilmDriveSetupList,Name );
				dlg( SetControlFromStringList,VendorSetupComboBox,FilmDriveSetupList,Selection );
				dlg( GetInput );
				return;
			}
		}
	}
	else
	{
		HR500_NoFilmDriveSelected();
		dlg( SetStrings,ViewDriveControls,~0~ );
		ShowFilmDriveControls();

		ClearScanList();
		ResyncScanList();
		ClearScanList();
	}
	StringList( EmptyList, New );
	dlg( SetControlFromStringList,VendorSetupComboBox,EmptyList );
	DlgData( SetValues,	FilmDriveSetup, ~~ );
	dlg( SetStrings,FilmDriveSetup,~~ );
	dlg( GetInput );
	return;
}

NUMERIC EditFdaSetup()
{
	if ( RunningVersion( 5.1 ) )
	{
		ScannerSerialNumber = 0;

		GetFilmDriveVendor();

		Query = STR ( SELECT * From HR500AFDSetup Order By Name );

		Action = ACTION DOC ( Hr500FdaSetupsDoc OpenOnce Hr500FdaSetupsDoc "Init( ~HR500 Frame Detect Setups~,~<Query>~ );" );

		return PerformActions( Action );
	}
	return TRUE;
}


VOID UpdateFdaSetupsCombo()
{
	if ( RunningVersion( 5.1 ) )
	{
		// Get the current selection translated to a vendor
		CurrentSetup = ~<$con.DlgData[Hr500FdaSetup]>~;

		GetFilmDriveVendor();

		Query = ~Select * from HR500AFDSetup Order By Name~;

		if ( PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			if ( List( GetFirst,EditorRecord ) )
			{
				List( MakeStringList,FdaSetupList,Name );
				dlg( SetControlFromStringList,FdaSetupComboBox,FdaSetupList,Selection );
				if ( ~<CurrentSetup>~ != ~~ )
				{
					dlg( SelectString,FdaSetupComboBox,~<CurrentSetup>~ );
				}
				dlg( GetInput );
				return;
			}
		}

		StringList( EmptyList, New );
		dlg( SetControlFromStringList,FdaSetupComboBox,EmptyList );

		dlg( GetInput );
	}
}

NUMERIC EditFilmEditors()
{
	FilmEditorChanged = TRUE;

	DlgData( GetValues,FilmEditor,FilmEditor );

	Query = STR ( SELECT * From Editors Order By Vendor );

	Action = ACTION DOC ( ~FilmEditors~ OpenOnce EditorsDoc "Init( ~Vendor Editors~,~<Query>~ );" );

	return PerformActions( Action );
}

VOID UpdateEditorXYOffsetSetting()
{
	DlgData( GetValues,FilmEditor,FilmEditor );
	DlgData( GetValues,Format,Format );

	DlgData( SetValues, EXOffsetIncrementUnit, ~0~ );
	DlgData( SetValues, EYOffsetIncrementUnit, ~0~ );
	if ( ~<FilmEditor>~ != ~~  && ~<Format>~ != ~~ )
	{
		Query = ~Select * from Editors Where Vendor = '<FilmEditor>' AND FilmFormat = '<Format>' Order By Vendor,FilmFormat~;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query the Editors table.\n\n<Query>\n\n<theErr>~ ) ); 
			return;
		}

		if ( List( GetFirst,EditorRecord ) )
		{
			EXOffsetIncrementUnit = EditorRecord( GetNumeric,XOffsetIncrementUnit );
			EYOffsetIncrementUnit = EditorRecord( GetNumeric,YOffsetIncrementUnit );
			DlgData( SetValues, EXOffsetIncrementUnit, ~<EXOffsetIncrementUnit>~, EYOffsetIncrementUnit, ~<EYOffsetIncrementUnit>~ );
		}
	}
	FilmEditorChanged = FALSE;
}


NUMERIC ResetVendorXOffset()
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	retval = TRUE;

	GetFilmDriveVendor();

	Delta = DlgData( GetNumeric,TXOffsetPositionInUnits );

	Delta = <Delta> * (-1);

	if ( !FunctionDefined( ~<FDVendor>_MoveDeltaX~ ) )
	{
		retval = FALSE;
		VendorNotSelected( ~<FDVendor>_MoveDeltaX~ );
	}

	FilmDriveCmdInProgress( ~Resetting X Offset to 0...~ );

	SetTransportControlsRunning();

	if ( !<FDVendor>_MoveDeltaX( <Delta>, FALSE ) )
	{
		retval = FALSE;
		ReportFilmDriveError( ~MoveDeltaX~ );
	}

	SetDialogVendorXOffsetInfo( 0, 0.0 );
	SetTransportControlsStopped();

	FilmDriveCmdInProgress( ~~ );

	//dlg( Update );

	return <retval>;
}


VOID SetDialogVendorXOffsetInfo( TotalXOffsetUnits, TXOffsetIncrementUnit )
{
	NewTotalXOffsetUnits = 0;
	NewTotalXOffsetInches = 0.0;
	if ( <TotalXOffsetUnits> && <TXOffsetIncrementUnit> )
	{
		NewTotalXOffsetUnits = <TotalXOffsetUnits>;
		NewTotalXOffsetInches = <TotalXOffsetUnits> * <TXOffsetIncrementUnit>;
	}
	NewTotalXOffsetUI = InchesTo<DisplayUnits>( <NewTotalXOffsetInches> );
	NewTotalXOffsetUI = ntoa( <NewTotalXOffsetUI>,~%.03f~ );
	dlg( SetStrings,TXOffsetPositionInUnits,~<NewTotalXOffsetUnits>~,TXOffsetPositionInInches,~<NewTotalXOffsetUI>~ );
	dlg( Save,TXOffsetPositionInUnits );
	dlg( Save,TXOffsetPositionInInches );

}


VOID SetDialogVendorYOffsetInfo( TotalYOffsetUnits, EYOffsetIncrementUnit )
{
	NewTotalYOffsetUnits = <TotalYOffsetUnits>;
	NewTotalYOffsetInches = 0.0;
	if ( <TotalYOffsetUnits> && <EYOffsetIncrementUnit> )
	{
		NewTotalYOffsetUnits = <TotalYOffsetUnits>;
		NewTotalYOffsetInches = <TotalYOffsetUnits> * <EYOffsetIncrementUnit>;
	}
	NewTotalYOffsetUI = InchesTo<DisplayUnits>( <NewTotalYOffsetInches> );
	NewTotalYOffsetUI = ntoa( <NewTotalYOffsetUI>,~%.03f~ );
	dlg( SetStrings,EYOffsetPositionInUnits,~<NewTotalYOffsetUnits>~,EYOffsetPositionInInches,~<NewTotalYOffsetUI>~ );
	dlg( Save,EYOffsetPositionInUnits );
	dlg( Save,EYOffsetPositionInInches );
}


NUMERIC SaveImage( CleanupScanObject )
{
	if ( Defined( Scanner ) )
	{
		SetupTheScanner(FALSE,FALSE);

		GenCon( SaveControl,IsCopyOf,SizzleControl,PERMANENT );

		if ( <CleanupScanObject> )
		{
			GetFilmDriveVendor();
			if (DlgData( GetNumeric,FilmDriveEnabled ) && ~<FDVendor>~ == ~HALSE~ )
			{
				SaveControl( SetValues, DeleteScanObj, FALSE );
			}
			else
			{
				SaveControl( SetValues, DeleteScanObj, <CleanupScanObject> );
				SizzleControl( SetValues, ScanObj, 0, ScanIndex, 0 );
			}
		}

		SizzleControl( SetValues, DirtyFlag, FALSE );
		dlg( SetStatus,1,Translate( ~Saving~ ) );

		if ( <DisableControlsWhileSaving> )
		{
			EnableScanningControls( FALSE );
		}

		Scanner( SaveAsync,SaveControl );
	}

	return TRUE;
} 


VOID ClearAutoFlag( SaveState )
{
	dlg( GetInput );
	
	if ( <SaveState> )
	{
		currentState = DlgData( GetNumeric, AutoScan );
		if ( <currentState> || SizzleControl( GetNumeric,SavedAutoScanState ) )
			{	SizzleControl( Set, SavedAutoScanState, TRUE ); }
	}
	else
		{	SizzleControl( Set,SavedAutoScanState,FALSE );	 }


	dlg( SetCheck, 0, AutoScanCheckBox);
	DlgData( SetValues, AutoScan, FALSE );
	dlg( Save,AutoScan );
	OnAutoScan();
}

VOID RestoreAutoScanFlag()
{
	dlg( GetInput );
	
	if ( SizzleControl( GetNumeric,SavedAutoScanState ) )
	{
		dlg( SetCheck, TRUE, AutoScanCheckBox);
		DlgData( SetValues, AutoScan, TRUE );
		dlg( Save,AutoScan );
		OnAutoScan();
		SizzleControl( Set, SavedAutoScanState, FALSE );
	}

}

NUMERIC CloseFilmDrive( UpdateStatus,ClosingDialog )
{
	if ( Defined( FilmDrive ) )
	{
		GetFilmDriveVendor();
		if ( FunctionDefined( ~<FDVendor>_Tension~ ) )
		{
			<FDVendor>_Tension( FALSE );
		}

		if ( ~<FDVendor>~ == ~HR500~ )
		{
			Scanner( RemoveFilmDrive );
		}

		if ( FunctionDefined( ~<FDVendor>_ForgetGlobals~ ) )
		{
			return <FDVendor>_ForgetGlobals( <UpdateStatus>,<ClosingDialog> );
		}
		else
		{
			ForgetGlobal( FilmDrive );
			return CloseFilmDriveComplete( <UpdateStatus>,<ClosingDialog> );
		}
	}

	return TRUE;
}

NUMERIC CloseFilmDriveComplete( UpdateStatus,ClosingDialog )
{
	if ( Defined( Port ) )
	{
		ForgetGlobal( Port );
	}
	
	SizzleControl( SetValues, OverScan, FALSE);
	SimulateFilmDrive = FALSE;
	FilmDirection = 0;
	MaxPunchNumber = 0;
	MinPunchNumber = 0;

	MaxXIncrements = 30000;

	SettleTime = 0;
	DlgData( SetValues,TXOffsetIncrementUnit,0.0 );

	dlg( SetStrings,ViewDriveControls,~0~ );

	if ( <UpdateStatus> )
	{
		FilmDriveCmdInProgress( Translate( ~Film drive disabled.~ ) );
	}

	dlg( SetStrings,ViewDriveControls,~0~ );
	dlg( SetStrings,Tension,~~,GotoPunchNumber,~~,CurrentPunchPosition,~????~ );
	dlg( EnableControls, 0, TensionBox );

	GetFilmDriveVendor();
	if ( ~<FDVendor>~ == ~None~ )
	{
		if ( FunctionDefined( ~NoFilmDriveSelected~ ) )
			{ HR500_NoFilmDriveSelected(); }
	}
	else
	{
		dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );
	}

	EnableTransportControls( 0 );
	// Make sure drive and setup are always accessible

	if ( <ClosingDialog> )
	{
		ForgetGlobal( Scanner );

		ImageCorrections( Free,~<LastPath>~ );
		ForgetGlobal( ImageData );
		ForgetGlobal( AfdSetupData );
		ForgetGlobal( ScanErrorInfo );

		Sleep(300);
		dlg( END );
		Exit();
		return FALSE;
	}

	ShowFilmDriveControls();

	return TRUE;
}


VOID ShowFilmDriveControls()
{
	dlg( GetInput,GetStrings,ViewDriveControls,ViewDriveControls );

	GetFilmDriveVendor();
	if (<ViewDriveControls>)
	{
		dlg( ShowControls,TRUE,TensionBox,FastRewindButton,
			StopButton,NextFrameButton,FastForwardButton,XPositionSlider,
			XPositionSliderIMinusButton,XPositionSliderMinusButton,
			XPositionSliderPlusButton,XPositionSliderIPlusButton);
		if ( ~<FDVendor>~ == ~Halse~ )
		{
			dlg( ShowControls,FALSE,TensionBox,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox,
									UnloadRevButton,UnloadFwdButton,LoadRevButton,LoadFwdButton );
			dlg( ShowControls,TRUE,DisableFrameDetectCheckbox,PrevFrameButton );
		} 
		else if ( ~<FDVendor>~ == ~HR500~ )
		{
			dlg( ShowControls,TRUE, UnloadRevButton,UnloadFwdButton,LoadRevButton,LoadFwdButton,PrevFrameButton,
									IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox );
			dlg( ShowControls,FALSE,DisableFrameDetectCheckbox );
		}
		else if ( ~<FDVendor>~ == ~HR500AFD~ )
		{
			dlg( ShowControls,TRUE, UnloadRevButton,UnloadFwdButton,LoadFwdButton,
									DisableFrameDetectCheckbox );
			dlg( ShowControls,FALSE,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox,PrevFrameButton );
		}
	}
	else
	{
		dlg( ShowControls,FALSE,TensionBox,FastRewindButton,PrevFrameButton,
			StopButton,NextFrameButton,FastForwardButton,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox,XPositionSlider,
			XPositionSliderIMinusButton,XPositionSliderMinusButton,
			XPositionSliderPlusButton,XPositionSliderIPlusButton,DisableFrameDetectCheckbox,
			UnloadRevButton,UnloadFwdButton,LoadRevButton,LoadFwdButton);
	}

	if ( ~<FDVendor>~ == ~HR500~ || ~<FDVendor>~ == ~HR500AFD~ )
	{
		dlg( SetWindowSize,$DialogWidth ,<ViewDriveControls> ? $BottomWithLoadUnload : $BottomWithoutTransport );
	}
	else
	{
		dlg( SetWindowSize,$DialogWidth ,<ViewDriveControls> ? $BottomWithTransport : $BottomWithoutTransport );
	}
}


NUMERIC BuildJogFilmCommand( CurrentDirection, CurrentPunch )
{
	TmpXOffset = ~0~;
	TmpYOffset = ~0~;
	TmpScanMode = 0;
	TmpDoPunchWaitOverride = 0;
	TmpFrameToPunch = 0;
	TmpUseAdjustedFramePosition = 0;
	TmpIgnoreFdaErrors = 0;
	TmpBypassFDA = 0;
	TmpAutoSkipBlankFDA = 0;

	NextRoutine = ~<FDVendor>_NextFrame~;
	PrevRoutine = ~<FDVendor>_PrevFrame~;

	if ( !FunctionDefined( ~<NextRoutine>~ ) || !FunctionDefined( ~<PrevRoutine>~ ) )
	{
		ClearJogFilmCommand();
		return FALSE;
	}

	JogInDirection = <CurrentDirection>;
	JogNextCommand = STR ( ~<NextRoutine>(<TmpXOffset>,<TmpYOffset>,<TmpScanMode>,<TmpDoPunchWaitOverride>,<TmpFrameToPunch>,<TmpUseAdjustedFramePosition>,<TmpIgnoreFdaErrors>,<TmpBypassFDA>,<TmpAutoSkipBlankFDA>) ~ );
	JogPrevCommand = STR ( ~<PrevRoutine>(<TmpXOffset>,<TmpYOffset>,<TmpScanMode>,<TmpDoPunchWaitOverride>,<TmpFrameToPunch>) ~ );

	return TRUE;
}


VOID ClearJogFilmCommand()
{
	JogInDirection = 0;
	JogNextCommand = ~~;
	JogPrevCommand = ~~;
}


Thread( JogThread ); // Thread( JogThread, Debug) for debugging as single thread


NUMERIC StartJogFilmCommand( CurrentPunch )
{
	// setup the scanner to goto next frame
	if ( ~<OnSetMagnificationComplete>~ == STR ( StartJogFilmCommand(<CurrentPunch>); ) )
	{
		ClearMagnificationHandlers();
	}

	if ( <MagNeeded> )
	{
		OnSetMagnificationComplete = STR ( StartJogFilmCommand(<CurrentPunch>); );
		if ( !OnSetMagButton() )
		{
			ClearMagnificationHandlers();
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
			Warning( Translate( ~Set magnification failed.~ ) );
			return FALSE;
		}
		return TRUE;
	}

	SetupTheScanner( FALSE,TRUE );

	if ( !SetScanWindow() ) 
	{ 
		UserFrameErrorMessage( ~Jog Film Failed... ~, TRUE, TRUE );
		FilmDriveOperationError( ~Jog Film~,FALSE );
		return FALSE; 
	}
	
	JogThread( New,RunJogFilmCommand,~<CurrentPunch>~ );
	return TRUE;
}


VOID RunJogFilmCommand( CurrentPunch )
{
	Action = STR ( JogFilmComplete(FALSE); );

	// Build Jog Film Command
	if ( !BuildJogFilmCommand( <CurrentPosition>, ~<CurrentPunch>~ ) )
	{
		mesg = Translate( ~Unable to create jog film command sequence.~ );
		Warning( Translate( ~<mesg>~ ) );
		QueueContentsToMainThread( Action,1000 );
		return;
	}

	// Verify Jog Film Command sequence was built
	if ( ( ~<JogNextCommand>~ == ~~ ) || ( ~<JogPrevCommand>~ == ~~ ) )
	{
		mesg = Translate( ~Jog film commands are missing.~ );
		Warning( Translate( ~<mesg>~ ) );
		QueueContentsToMainThread( Action,1000 );
		return;
	}

	if ( <JogInDirection> < 0 )
	{
		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		// Need to jog a little more for HR500 in case
		// of change in magnification
		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}
	}
	else
	{
		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		// Need to jog a little more for HR500 in case
		// of change in magnification
		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}
	}

	Action = STR ( JogFilmComplete(TRUE); );

	QueueContentsToMainThread( Action,1000 );

	return;
}


VOID EnableFilmDriveChanged( CheckIfLoaded,UpdateStatus,SkipCalCheck )
{
	dlg( GetInput );
	GetFilmDriveVendor();
    DlgData( Get,FilmDriveSetup,FilmDriveSetup );

	if ( <CheckIfLoaded> &&
		 ~<LastFilmDriveVendorName>~ != ~~ && ~<LastFilmDriveVendorName>~ == ~<FDVendor>~ &&
		 ~<LastFilmDriveSetupName>~ != ~~ && ~<LastFilmDriveSetupName>~ == ~<FilmDriveSetup>~ )
	{
		return;
	}

	LastFilmDriveVendorName = ~<FDVendor>~;
	LastFilmDriveSetupName = ~<FilmDriveSetup>~;

	if ( Defined( FilmDrive ) )
	{
		dlg( SetStrings, IgnoreXAdjustments, ~0~ );
		if ( ~<FDVendor>~ != ~Halse~ && DlgData( GetNumeric,Tension ) )
		{
			dlg( SetStrings,Tension,~~,GotoPunchNumber,~~,CurrentPunchPosition,~????~ );
			OnTensionChange(FALSE,FALSE,TRUE);
		}

		dlg( EnableControls, 0, TensionBox );
		dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );

		CloseFilmDrive( <UpdateStatus>,FALSE );
		return;
	}

	if ( ~<FDVendor>~ == ~~ || ~<FDVendor>~ == ~None~ )
	{
		dlg( SetStrings,FilmDriveEnabled,~0~ );
	}

	// Always resync Order/Roll/Frame/Punch
	ClearScanList();
	ResyncScanList();
	ClearScanList();

	if ( DlgData( GetNumeric,FilmDriveEnabled ) )
	{
	    DlgData( Get,FilmDriveSetup,FilmDriveSetup );

		if ( ~<FilmDriveSetup>~ == ~~ )
		{
			dlg( SetStrings,FilmDriveEnabled,~0~ );
			Warning( Translate( ~You must select a film drive setup first~ ) );
			return;
		}

		GetFilmDriveVendor();

		if ( !FunctionDefined( ~<FDVendor>_OpenFilmDrive~ ) )
		{
			dlg( SetStrings,FilmDriveEnabled,~0~ );
			VendorNotSelected( ~<FDVendor>_OpenFilmDrive~ );
			return;
		}

		if ( !Defined( Scanner ) )
		{
			if ( !FindScanner(FALSE) ) 
			{
				return;
			}
		}

		dlg( SetStrings,Tension,~~,GotoPunchNumber,~~,CurrentPunchPosition,~????~ );
		dlg( EnableControls, 0, TensionBox );
		dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );
		EnableTransportControls( 0 );

		if ( <FDVendor>_OpenFilmDrive( <UpdateStatus>,<SkipCalCheck> ) )
		{
			FilmDriveSelected();

			if ( <UpdateStatus> )
			{
				FilmDriveCmdInProgress( Translate( ~Film drive enabled.~ ) );
			}

			// Resort incase of reverse order i.e. Bremson in reverse mode
			ResyncScanList();
			ClearScanList();

			dlg( EnableControls,1,TensionBox );
			dlg( EnableControls,0,VendorComboBox,VendorSetupComboBox );
			dlg( SetStrings,ViewDriveControls,~1~ );
		}
		else
		{
			if ( <UpdateStatus> )
			{
				FilmDriveCmdInProgress( Translate( ~Film drive disabled.~ ) );
			}

			dlg( SetStrings,FilmDriveEnabled,~0~ );
			dlg( SetStrings,ViewDriveControls,~0~ );
			dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );
			if ( Defined( FilmDrive ) ) { ForgetGlobal( FilmDrive ); }
		}
	}

	// Else make sure drive and setup are always accessible

	ShowFilmDriveControls();
}


NUMERIC IsDriveTensioned( UpdateStatus )
{
	if ( !Defined( FilmDrive ) )	{ return FALSE;	}
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~None~ )
	{	return TRUE;	}

	if ( FunctionDefined( ~<FDVendor>_IsFilmDriveTensioned~ ) )
	{
		return <FDVendor>_IsFilmDriveTensioned( <UpdateStatus> );
	}
	else
	{
		dlg( GetInput );	
		Tension = DlgData( GetNumeric,Tension );
		if ( <Tension> )
		{
			return TRUE;
		}
	}
	return FALSE;
}


NUMERIC OnRewindButton()
{
	gStoppingFilmDrive = FALSE;
	if ( !Defined( FilmDrive ) )	{ return DriveNotActive(); }

	GetFilmDriveVendor();
	// Give the transport a chance to override this behavior
	if ( FunctionDefined( ~<FDVendor>_HandleRewind~ ) )
	{
		LastFrame = ~~;
		FrameNotInDB = FALSE;
		UseImageOverrides = FALSE;
		return <FDVendor>_HandleRewind();
	}

	if ( !IsDriveTensioned( TRUE ) )		{ return DriveNotTensioned(); }

	if ( !FunctionDefined( ~<FDVendor>_Rewind~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_Rewind~ );
	}

	return OnUnloadRevButton( ~Rewind~ );
}


NUMERIC OnFastForwardButton()
{
	gStoppingFilmDrive = FALSE;
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( FALSE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();

	// Give the transport a chance to override this behavior
	if ( FunctionDefined( ~<FDVendor>_HandleFastForward~ ) )
	{
		return <FDVendor>_HandleFastForward();
	}
	else
	{
		if ( !FunctionDefined( ~<FDVendor>_FastForward~ ) )
		{
			return VendorNotSelected( ~<FDVendor>_FastForward~ );
		}
	}

	return OnUnloadFwdButton( ~Fastforward~ );
}


Thread( TheThread ); // Thread( TheThread, Debug);  //for debugging as single thread
//Thread( New,TheThread ); // To debug a thread...
//TheThread.DebugThread(); // these lines are
//TheThread.New();		 // needed




NUMERIC OnUnloadRevButton( Msg )
{
	gStoppingFilmDrive = FALSE;
	if ( !Defined( FilmDrive ) )	{ return DriveNotActive(); }

	GetFilmDriveVendor();

	if ( !IsDriveTensioned( TRUE ) )		{ return DriveNotTensioned(); }

	FilmDriveCmdInProgress( Translate( ~<Msg>... ~ ) );

	Routine = <FDVendor>_UnloadFilmRev;
	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	gNotchNumber = 0;
	SetCurrentPunchNumber( ~~ );
	EnableScanningControls( FALSE );
	LastFrame = ~~;
	FrameNotInDB = FALSE;
	UseImageOverrides = FALSE;
	SetTransportControlsRunning();

	TheThread( New,<Routine>,~<Msg>~ );

	return TRUE;
}


NUMERIC OnUnloadFwdButton( Msg )
{
	gStoppingFilmDrive = FALSE;
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( FALSE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();

	Routine = <FDVendor>_UnloadFilmFwd;
	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	FilmDriveCmdInProgress( Translate( ~<Msg> ... ~ ) );

	gNotchNumber = 0;
	SetCurrentPunchNumber( ~~ );
	EnableScanningControls( FALSE );
	SetTransportControlsRunning();
	LastFrame = ~~;
	FrameNotInDB = FALSE;
	UseImageOverrides = FALSE;

	TheThread( New,<Routine>,~<Msg>~ );

	return TRUE;
}


NUMERIC OnNextFrameButton( ScanMode,PunchWaitOverride,BypassFda,FocusBeforeScan )
{
	isFocusNeeded = FALSE;
	if ( DefinedAndNotNull( FocusBeforeScan ) )
	{
		isFocusNeeded = <FocusBeforeScan>;
	}
	
	gStoppingFilmDrive = FALSE;
	if ( ~<OnSetMagnificationComplete>~ == STR ( OnNextFrameButton(<ScanMode>,<PunchWaitOverride>,<BypassFda>,<FocusBeforeScan>); ) )
	{
		ClearMagnificationHandlers();
	}

	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();
	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	YOffset = 0;
	FrameToPunch = ( <ScanMode> && DlgData( GetNumeric,FrameToPunch ) && !DlgData( GetNumeric,ScanFromDatabase ) ) && (~<gFilmMarkType>~ != ~Notch~ );

	Routine = <FDVendor>_NextFrame;
	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	UseAdjustedFramePosition = ( ~<FDVendor>~ == ~Halse~ && DlgData( GetNumeric,UseAdjustedFrames ) );
	IgnoreFdaErrors = ( ~<FDVendor>~ != ~HR500~ && DlgData( GetNumeric,IgnoreFdaErrors ) );
	AutoSkipFDABlank = ( ~<FDVendor>~ == ~Halse~ && SizzleControl( GetNumeric,AutoSkipFDABlankFrame ) );
	DisableFDA = ( ~<FDVendor>~ != ~HR500~ && ( DlgData( GetNumeric,DisableFrameDetect ) || <BypassFda> ) );

	// Adjust the X Offset if Editor Information Available for XOffset
	TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
	EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
	if ( <ScanMode> && DlgData( GetNumeric,ScanFromDatabase ) && <XOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
	{
		TempXOffset = ( <XOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
		XOffset = Round( <TempXOffset> );
	}
	else
	{
		ScanFrameBeforeAdvance = TRUE;
	}

	if ( !<gAligningFrame> )
	{
		FilmDriveCmdInProgress( ~Seeking Next Frame...~ );
	}
	else
	{
		FilmDriveCmdInProgress( ~Aligning Frame...~ );
	}

	if ( !<ScanMode> )
	{
		FrameNotInDB = FALSE;
		UseImageOverrides = FALSE;
	}

	EnableScanningControls( FALSE );

	SetTransportControlsRunning();

	if ( !DlgData( GetNumeric,AutoScan ) )
	{
		if ( FunctionDefined( ~<FDVendor>_SetupEdgeDetection~ ) )
		{
			<FDVendor>_SetupEdgeDetection();
		}
	}

	if ( ~<FDVendor>~ != ~Halse~ )
	{
		// setup the scanner to goto next frame
		if ( <MagNeeded> )
		{
			OnSetMagnificationComplete = STR ( OnNextFrameButton(<ScanMode>,<PunchWaitOverride>,<BypassFda>,<FocusBeforeScan>); );
			if ( !OnSetMagButton() )
			{
				ClearMagnificationHandlers();
				EnableScanningControls( TRUE );
				SetTransportControlsStopped();
				UserFrameErrorMessage( ~Unable to set magnification... ~, TRUE, TRUE );
				return FALSE;
			}
			return TRUE;
		}

		if ( <ContinueRunning> && !<PunchWaitOverride> )
		{
			SetupTheScanner( FALSE,TRUE );
		}

		if ( <ContinueRunning> && !<PunchWaitOverride> )
		{
			if ( !SetScanWindow() ) 
			{ 
				UserFrameErrorMessage( ~Move to next frame failed... ~, TRUE, TRUE );
				if ( <ScanMode> ) { FilmDriveOperationError( ~move to next frame~,FALSE ); }
				return FALSE; 
			}
		}
	}

	SizzleControl( Set,FrameStatus,0 );
	SizzleControl( Set,AutoFDAErrorHandlingEnabled,TRUE );

	if ( ~<FDVendor>~ == ~HR500AFD~ )
	{
		TheThread( New,<Routine>,<XOffset>,<YOffset>,<ScanMode>,<PunchWaitOverride>,<FrameToPunch>,<UseAdjustedFramePosition>,<IgnoreFdaErrors>,<DisableFda>,<AutoSkipFDABlank>,<isFocusNeeded> );
	}
	else
	{
		TheThread( New,<Routine>,<XOffset>,<YOffset>,<ScanMode>,<PunchWaitOverride>,<FrameToPunch>,<UseAdjustedFramePosition>,<IgnoreFdaErrors>,<DisableFda>,<AutoSkipFDABlank> );
	}

	return TRUE;
}


NUMERIC OnPreviousFrameButton( ScanMode,PunchWaitOverride )
{
	gStoppingFilmDrive = FALSE;
	if ( ~<OnSetMagnificationComplete>~ == STR ( OnPreviousFrameButton(<ScanMode>,<PunchWaitOverride>); ) )
	{
		ClearMagnificationHandlers();
	}
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();
	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	YOffset = 0;
	FrameToPunch = ( <ScanMode> && DlgData( GetNumeric,FrameToPunch ) && !DlgData( GetNumeric,ScanFromDatabase )  && (~<gFilmMarkType>~ != ~Notch~ ));

	Routine = <FDVendor>_PrevFrame;

	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	// Adjust the X Offset if Editor Information Available for XOffset
	TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
	EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
	if ( <ScanMode> && DlgData( GetNumeric,ScanFromDatabase ) && <XOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
	{
		TempXOffset = ( <XOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
		XOffset = Round( <TempXOffset> );
	}
	else
	{
		ScanFrameBeforeAdvance = TRUE;
	}

	if ( !<ScanMode> )
	{
		FrameNotInDB = FALSE;
		UseImageOverrides = FALSE;
	}

	FilmDriveCmdInProgress( ~Seeking Previous Frame...~ );

	EnableScanningControls( FALSE );
	SetTransportControlsRunning();

	if ( ~<FDVendor>~ != ~Halse~ )
	{
		// setup the scanner to goto next frame
		if ( <MagNeeded> )
		{
			OnSetMagnificationComplete = STR ( OnPreviousFrameButton(<ScanMode>,<PunchWaitOverride>); );
			if ( !OnSetMagButton() )
			{
				ClearMagnificationHandlers();
				EnableScanningControls( TRUE );
				SetTransportControlsStopped();
				UserFrameErrorMessage( ~Unable to set magnification... ~, TRUE, TRUE );
				return FALSE;
			}
			return TRUE;
		}

		if ( <ContinueRunning> && !<PunchWaitOverride> )
		{
			SetupTheScanner( FALSE,TRUE );
		}

		if ( <ContinueRunning> && !<PunchWaitOverride> )
		{
			if ( !SetScanWindow() ) 
			{ 
				UserFrameErrorMessage( ~Move to previous frame failed... ~, TRUE, TRUE );
				if ( <ScanMode> ) { FilmDriveOperationError( ~move to previous frame~,FALSE ); }
				return FALSE; 
			}
		}
	}
	else
	{
		SizzleControl( Set,FrameStatus,0 );
		SizzleControl( Set,AutoFDAErrorHandlingEnabled,FALSE );
	}

	TheThread( New,<Routine>,<XOffset>,<YOffset>,<ScanMode>,<PunchWaitOverride>,<FrameToPunch> );

	return TRUE;
}



NUMERIC OnLoadFwdButton()
{
	gStoppingFilmDrive = FALSE;
	if ( ~<OnSetMagnificationComplete>~ == STR ( OnLoadFwdButton(); ) )
	{
		ClearMagnificationHandlers();
	}
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }

	if ( <MagNeeded> )
	{
		OnSetMagnificationComplete = STR ( OnLoadFwdButton(); );
		if ( !OnSetMagButton() )
		{
			ClearMagnificationHandlers();
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
			UserFrameErrorMessage( ~Unable to set magnification... ~, TRUE, TRUE );
			return FALSE;
		}
		return TRUE;
	}

	GetFilmDriveVendor();

	if ( !AskToLoadFilmAndTensionDrive( ~~, FALSE ) )
	{
		return FALSE;
	}

	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );

	Routine = <FDVendor>_LoadFilmFwd;
	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	if ( ~<FDVendor>~ != ~HR500~ )
	{
		PunchName = ~Frame~;
	}
	else
	{
		PunchName = ~<gFilmMarkType>~;
	}

	FilmDriveCmdInProgress( ~Seeking first <PunchName> in forward direction...~ );

	EnableScanningControls( FALSE );

	SetTransportControlsRunning();

	if ( ~<FDVendor>~ != ~Halse~ )
	{
		// setup the scanner to goto next frame
		if ( <ContinueRunning> )
		{
			SetupTheScanner( FALSE,TRUE);
		}

		if ( <ContinueRunning> )
		{
			if ( !SetScanWindow() ) 
			{ 
				UserFrameErrorMessage( ~Film Load Failed... ~, TRUE, TRUE );
				return FALSE; 
			}
		}
	}

	TheThread( New,<Routine>,<XOffset> );

	return TRUE;
}


NUMERIC OnLoadRevButton()
{
	gStoppingFilmDrive = FALSE;
	if ( ~<OnSetMagnificationComplete>~ == STR ( OnLoadRevButton(); ) )
	{
		ClearMagnificationHandlers();
	}
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	GetFilmDriveVendor();

	if ( <MagNeeded> )
	{
		OnSetMagnificationComplete = STR ( OnLoadRevButton(); );
		if ( !OnSetMagButton() )
		{
			ClearMagnificationHandlers();
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
			UserFrameErrorMessage( ~Unable to set magnification... ~, TRUE, TRUE );
			return FALSE;
		}
		return TRUE;
	}

	if ( !AskToLoadFilmAndTensionDrive( ~~, FALSE ) )
	{
		return FALSE;
	}


	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );

	Routine = <FDVendor>_LoadFilmRev;

	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	if ( ~<FDVendor>~ != ~HR500~ )
	{
		PunchName = ~Frame~;
	}
	else
	{
		PunchName = ~<gFilmMarkType>~;
	}

	FilmDriveCmdInProgress( ~Seeking first <PunchName> in reverse direction...~ );

	EnableScanningControls( FALSE );

	SetTransportControlsRunning();

	if ( ~<FDVendor>~ != ~Halse~ )
	{
		// setup the scanner to goto next frame
		if ( <ContinueRunning> )
		{
			SetupTheScanner( FALSE,TRUE );
		}

		if ( <ContinueRunning> )
		{
			if ( !SetScanWindow() ) 
			{ 
				UserFrameErrorMessage( ~Film Load Failed... ~, TRUE, TRUE );
				return FALSE; 
			}
		}
	}

	TheThread( New,<Routine>,<XOffset> );

	return TRUE;
}

NUMERIC OnFrameRollNumbering()
{
	dlg( GetInput );
	GetFilmDriveVendor();
	if ( ~<FDVendor>~ == ~HR500AFD~ )
	{
		return TRUE;
	}

	if ( ~<FDVendor>~ != ~Halse~ )
	{
		return FALSE;
	}

	DlgData( Get,AutoIncRollNumber,autoInc );
	DlgData( Get,ContinueFrameNumber,ContinueFrame );

	if ( <autoInc> && <ContinueFrame> )
	{
		return Warning( Translate( ~You cannot select both "Continue frame numbering" and "Auto Increment Roll number".~ ) );
	}

	if ( <autoInc> )
	{
		dlg( EnableControls,FALSE,ContinueFrameNumCheckBox );
	}
	else
	{
		dlg( EnableControls,TRUE,ContinueFrameNumCheckBox );
	}

	if ( <ContinueFrame> )
	{
		dlg( EnableControls,FALSE,AutoIncRollNumbersCheckBox );
	}
	else
	{
		dlg( EnableControls,TRUE,AutoIncRollNumbersCheckBox );
	}
	
	return TRUE;
}

NUMERIC OnGoToButton( ScanMode,PunchWaitOverride )
{
	gStoppingFilmDrive = FALSE;
	if ( ~<OnSetMagnificationComplete>~ == STR ( OnGoToButton(<ScanMode>,<PunchWaitOverride>); ) )
	{
		ClearMagnificationHandlers();
	}
	FinishScanCommand = ~~;

	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

    dlg( GetInput );
    DlgData( Get,GotoPunchNumber,GotoPunch );
    DlgData( Get,CurrentPunchPosition,CurrentPunch );
	ScanFromDatabase = DlgData( GetNumeric,ScanFromDatabase );

	GetFilmDriveVendor();
	if ( ~<FDVendor>~ != ~HR500~ )
	{
		PunchName = ~Frame~;
		UnknownPunchMsg = ~Film drive cannot determine the current frame number.\n\nPlease make sure the film is loaded and set the frame number using Override Frame Number.~;
	}
	else
	{
		PunchName = ~<gFilmMarkType>~;
		UnknownPunchMsg = ~Film drive is not positioned at a valid <PunchName> location.\n\nPlease manually position the film to a <PunchName> location.~;
	}

	if ( ~<GotoPunch>~ == ~~ )			{ return Warning( Translate( ~You must enter a <PunchName> number~ ) ); }
	if ( ~<CurrentPunch>~ == ~????~ )	{ return Warning( Translate( ~<UnknownPunchMsg>~ ) ); }

	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	YOffset = 0;
	FrameToPunch = ( <ScanMode> && DlgData( GetNumeric,FrameToPunch ) && !<ScanFromDatabase>  && (~<gFilmMarkType>~ != ~Notch~ ));

	Routine = <FDVendor>_SeekPunch;

	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	if ( <ScanMode> && ( <FirstPunchNumber> < <MinPunchNumber> || <LastPunchNumber> == 0 ) )
	{
		return Warning( Translate( ~Unable to obtain first and last film <PunchName> number~ ) );
	}

	// Adjust the X Offset if Editor Information Available for XOffset
	TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
	EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
	if ( <ScanMode> && DlgData( GetNumeric,ScanFromDatabase ) && <XOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
	{
		TempXOffset = ( <XOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
		XOffset = Round( <TempXOffset> );
	}
	FilmDriveCmdInProgress( ~Seeking <PunchName> <GotoPunch>...~ );

	EnableScanningControls( FALSE );

	SetTransportControlsRunning();

	SFirstFilmPunch = ~0~;
	SLastFilmPunch  = ~0~;
	LastFrame = ~~;

	if ( <ScanMode> )
	{
		SFirstFilmPunch = <FDVendor>_FormatPunchNumber( <FirstPunchNumber> );
		SLastFilmPunch = <FDVendor>_FormatPunchNumber( <LastPunchNumber> );
	}
	else
	{
		ScanFrameBeforeAdvance = TRUE;
	}

	if ( !<ScanFromDatabase> )
	{
		UseImageOverrides = FALSE;
	}
	FrameNotInDB = <PreFocusFrameStatus>;

	SGotoPunch = <FDVendor>_FormatPunchNumber( <GotoPunch> );

	if ( ~<FDVendor>~ != ~Halse~ )
	{
		// setup the scanner to goto next frame
		if ( <MagNeeded> )
		{
			OnSetMagnificationComplete = STR ( OnGoToButton(<ScanMode>,<PunchWaitOverride>); );
			if ( !OnSetMagButton() )
			{
				ClearMagnificationHandlers();
				EnableScanningControls( TRUE );
				SetTransportControlsStopped();
				UserFrameErrorMessage( ~Unable to set magnification... ~, TRUE, TRUE );
				return FALSE;
			}
			return TRUE;
		}

		if ( ~<gFilmMarkType>~ == ~Notch~ || ~<gFilmMarkType>~ == ~None~ )
		{
		    //DlgData( Get,Frame,CurrentPunch );
			CurrentPunch = <gNotchNumber>;
		}

		if ( <ContinueRunning> && !<PunchWaitOverride> )
		{
			SetupTheScanner( FALSE,TRUE );
		}

		if ( <ContinueRunning> && !<PunchWaitOverride> )
		{
			if ( !SetScanWindow() ) 
			{ 
				UserFrameErrorMessage( ~seek <PunchName> [<SeekPunch>]... ~, TRUE, TRUE );
				if ( <ScanMode> ) { FilmDriveOperationError( ~seek <PunchName> [<SeekPunch>]~ ); }
					return FALSE; 
			}
		}
	}
	else 
	{
		SizzleControl( Set,FrameStatus,0 );
		if ( !<gPositioningForFocus> )
		{
			SizzleControl( Set,AutoFDAErrorHandlingEnabled,FALSE );
		}
	}
	gPositioningForFocus = FALSE;

	TheThread( New,<Routine>,~<CurrentPunch>~,~<SGotoPunch>~,~<XOffset>~,~<YOffset>~,~<SFirstFilmPunch>~,~<SLastFilmPunch>~,~<ScanMode>~,~<PunchWaitOverride>~,~<FrameToPunch>~ );

	return TRUE;
}

NUMERIC GotoFrameAndScan( FrameNumber )
{
	gStoppingFilmDrive = FALSE;
	FinishScanCommand = ~~;

	if ( FunctionDefined( ~<FDVendor>_GetFirstFrameNumber~ ) )
	{
		firstFrame = <FDVendor>_GetFirstFrameNumber();
		if ( (<FrameNumber> < <firstFrame>) || (<FrameNumber> > <gMaxScannedFrame>) )
		{
			msg = ~You must select a frame between <firstFrame> and <gMaxScannedFrame>~;
			return Warning( Translate( ~<msg>~ ) );
		}
	}
	Halse_UpdateFrameNumber( ~<FrameNumber>~ );
	dlg( SetStrings,GotoPunchNumber,~<FrameNumber>~ );
    dlg( Save,GotoPunchNumber );

	if ( <PreFocusFrameStatus> )
	{
		UseImageOverrides = FALSE;
	}

	FirstPunchNumber = <MinPunchNumber>;
	LastPunchNumber = <gMaxScannedFrame>;

	OnScanButtonSetup(); 
	OnFilmDriveOperationComplete = STR ( OnScanButton(0,FALSE ); );

	return OnGotoButton( TRUE,FALSE );
}

VOID OnAutoSkipBlankFrame()
{
	dlg( GetInput );
	autoSkip = DlgData( GetNumeric,AutoSkipBlankFrame );
	SizzleControl( Set,AutoSkipFDABlankFrame,<autoSkip> );
}

VOID OnDisableFrameDetection()
{
	dlg( GetInput );
	if ( DlgData( GetNumeric,DisableFrameDetect ) )
	{
		dlg( EnableControls,FALSE,FastForwardButton );

		dlg( SetCheck, FALSE, IgnoreFdaErrorsCheckBox );
		dlg( EnableControls,FALSE,IgnoreFdaErrorsCheckBox );

		dlg( SetCheck, FALSE, AutoSkipBlankFrameBox );
		OnAutoSkipBlankFrame();

		dlg( EnableControls,FALSE,AutoSkipBlankFrameBox );
	}
	else
	{
		dlg( EnableControls,<CurrentControlsState>,FastForwardButton );
		dlg( EnableControls,<CurrentControlsState>,IgnoreFdaErrorsCheckBox );
		if ( ~<FDVendor>~ == ~Halse~ )
		{
			dlg( EnableControls,<CurrentControlsState>,AutoSkipBlankFrameBox );
		}
	}

}


VOID OnIgnoreFdaErrors()
{
	dlg( GetInput );
	if ( DlgData( GetNumeric, IgnoreFdaErrors ) )
	{
		dlg( SetCheck, FALSE, AdjustFramePositionBox );
		dlg( SetCheck, FALSE, AutoSkipBlankFrameBox );
		DlgData( Set, AdjustFramePosition, FALSE );
		DlgData( Set, AutoSkipBlankFrame, FALSE );
		dlg( EnableControls,FALSE,AutoSkipBlankFrameBox );
		dlg( EnableControls,FALSE,AdjustFramePositionBox );
	}
	else
	{
		if ( ~<FDVendor>~ == ~Halse~ )
		{
			dlg( EnableControls,TRUE,AutoSkipBlankFrameBox );
		}
		dlg( EnableControls,TRUE,AdjustFramePositionBox );
	}
	
	OnAutoSkipBlankFrame();
	OnAdjustFramePosition();

}

NUMERIC OnOverrideFrameButton( FromTransportControls )
{
	gFrameOverridden = TRUE;

	if ( !Defined( FilmDrive ) ) 	 { return DriveNotActive(); }

	dlg( GetInput );
	
	if ( RunningVersion( 5.1 ) || !<FromTransportControls> )
		{	dlg( GetStrings,FrameNumber,Frame); }
	else
		{	DlgData( Get,OverrideFrameNumber,FrameNumber );	}

	if ( ~<FrameNumber>~ == ~~ )	{ return Warning( Translate( ~You must enter a frame number~ ) ); }

	GetFilmDriveVendor();

	if ( FunctionDefined( ~<FDVendor>_OverrideFrame~ ) )
	{
		<FDVendor>_OverrideFrame( <FromTransportControls> );
	}

	return TRUE;
}

NUMERIC OnStopButton()
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_Stop~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_Stop~ );
	}

	// Disable auto scan if scanning
	StillScanning = FALSE;
	AutoScan = ~<$con.dlgData[AutoScan]>~;
	if ( Defined( Scanner ) )
	{
		StillScanning = Scanner( IsScannerBusy );	
	}

	StopMsg = ~Stop~;
	if ( <StillScanning> )
	{
		StopMsg = ~Stopping after current scan~;
	}

	if ( !<ForwardRewindFlag> && ( <StillScanning> || ( <CurrentControlsState> == FALSE ) ) && ( <AutoScan> || <AutoScanDeselectPending> ) )
	{
		dlg( SetCheck,FALSE,AutoScanCheckBox );
		dlg( Save,AutoScanCheckBox );		
		if ( ( <StillScanning> || ( <CurrentControlsState> == FALSE ) ) && !<AutoScanDeselectPending> )
		{
			AutoScanDeselectPending = TRUE;
			return FilmDriveCmdInProgress( ~<StopMsg>~ );
		}
		else if ( !<StillScanning> &&  <CurrentControlsState> == FALSE  && <AutoScanDeselectPending> )
		{
			msg = ~There still seems to be some scanning or film movement activity.\n\nWould you like to continue to wait for that activity to complete?~;
			if ( MessageBox( Translate( ~<msg>~ ),YESNO ) == YES )
			{
				return FilmDriveCmdInProgress( ~<StopMsg>~ );
			}

			gStoppingFilmDrive = TRUE;
		}
	}

//	ClearFilmDriveOperationHandlers();
	if (  !<FDVendor>_Stop() )
	{
		// Allow the UI to enable the controls to allow user
		// to decide how to recover
		if ( !<StillScanning> )
		{
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
		}
		return ReportFilmDriveError( ~<StopMsg>~ );
	}

	if ( FunctionDefined( ~<FDVendor>_SetupEdgeDetection~ ) )
	{
		<FDVendor>_SetupEdgeDetection();
	}

	return FilmDriveCmdInProgress( ~<StopMsg>~ );
}

VOID OnDisableFilmDrive()
{
	dlg( GetInput );
	DisableFilmDrive = DlgData( GetNumeric,DisableFilmDrive );
	if ( <DisableFilmDrive> )
	{
		dlg( SetCheck,FALSE,AutoScanCheckBox );
		dlg( Save,AutoScanCheckBox );		
	}
}

NUMERIC XPositionSliderChanged( OverrideSlider, increments )
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) 
	{ 
		dlg( SetStrings,XSliderPosition,~0~ );
		return DriveNotTensioned(); 
	}

	Delta = DlgData( GetNumeric,XSliderPosition );
	Ignore = DlgData( GetNumeric,IgnoreXAdjustments );

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_MoveDeltaX~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_MoveDeltaX~ );
	}

	if ( <OverrideSlider> )
	{
		Delta = <increments>;
	}

	if ( !<FDVendor>_MoveDeltaX( <Delta>, <Ignore> ) )
	{
		dlg( SetStrings,XSliderPosition,~0~ );
		return ReportFilmDriveError( ~MoveDeltaX~ );
	}

	DlgData( Set,XSliderPosition,0 );
	dlg( SetStrings,XSliderPosition,~0~ );

	return TRUE;
}


LastXPosition = 0;

NUMERIC XPositionSliderCalibration()
{
	Delta = DlgData( GetNumeric,XPosition );
	Ignore = DlgData( GetNumeric,IgnoreXAdjustments );

	Delta = <NewXPosition> - <LastXPosition>;

	LastXPosition = <NewXPosition>;

	if ( !Defined( FilmDrive ) )	{ return DriveNotActive(); }

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_MoveDeltaX~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_MoveDeltaX~ );
	}

	<FDVendor>_MoveDeltaX( <Delta>, <Ignore> );

	return TRUE;
}


LastFilmDriveMessage = ~~;

NUMERIC FilmDriveCmdInProgress( Msg )
{
	LastFilmDriveMessage = ~<Msg>~;

	return dlg( SetStatus,0,Translate( ~<Msg>~ ) );
}


NUMERIC DriveNotActive()
{
	return Warning( Translate( ~You have not activated the Film Drive~ ) );
}

NUMERIC DriveNotTensioned()
{
	GetFilmDriveVendor();
	if ( ~<FDVendor>~ == ~Halse~ )
	{
		msg = ~The film is not loaded ~;
	}
	else
	{
		msg = ~You have not tensioned the film drive~;
	}

	return Warning( Translate( ~<msg>~ ) );
}


NUMERIC VendorNotSelected( FilmDriveFunction )
{
	if ( ~<FilmDriveFunction>~ == ~~ )
	{
		return Warning( Translate( ~A valid transport vendor has not been selected~ ) );
	}
	else
	{
		return Warning( Translate( ~Vendor transport functionality (<FilmDriveFunction>) is not defined~ ) );
	}
}


NUMERIC ReportFilmDriveError( operation )
{
	return Warning( Translate( ~The film drive reported an error on <operation>~ ) );
}


ImageIndex = 0;

ImagesPath = ~<$App.Directory>\ScannedImages~;

NUMERIC DoFocus( )
{
	CheckScanWidthLengthMin();

 	dlg( GetInput);
	EnableScanningControls( FALSE );
	if ( !ScanOne(TRUE,TRUE,FALSE) )
	{
		EnableScanningControls( TRUE );
		return FALSE;
	}

	SecondsWaiting = 0;
	Action = STR ( StillFocusing(); );
	QueueContentsAfter( Action,1000 );
	return TRUE;
}


NUMERIC OnFocusButton( NotAfterCal,Msg )
{
	if ( ~<OnSetMagnificationComplete>~ == STR ( OnFocusButton( ~<NotAfterCal>~,~<Msg>~ ); ) )
	{
		ClearMagnificationHandlers();
	}
	ClearCalibrationHandlers();

	if ( ~<OnFilmDriveOperationComplete>~ == STR ( OnFocusButton( ~<NotAfterCal>~,~~ ); ) )
	{
		ClearFilmDriveOperationHandlers();
	}

	dlg( GetInput );

	if ( !FindScanner( FALSE ) )
	{
		return FALSE;
	}

	if ( !CheckLampState() )
	{
		return FALSE;
	}

	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );

	if ( Defined( FilmDrive ) && <FilmDriveEnabled> && ( ~<FDVendor>~ == ~Halse~ ))
	{
		Msg = ~~;
	}

	if ( <MagNeeded> )
	{
		OnSetMagnificationComplete = STR ( OnFocusButton( ~<NotAfterCal>~,~<Msg>~ ); );
		if ( !OnSetMagButton() )
		{
			ClearMagnificationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			Warning( Translate( ~Set magnification failed.~ ) );
			return FALSE;
		}
		return TRUE;
	}

	if ( CalibrationOK( FALSE,<NotAfterCal>,FALSE,TRUE ) )
	{
		if ( !IsNULL( Msg ) )
		{
			if ( ~<Msg>~ != ~~ )
			{
				if ( MessageBox( ~<Msg>~,YESNO ) == NO )
				{
					dlg( SetStatus,0,Translate( ~Focus cancelled.~ ) );
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					Warning( Translate( ~Focus cancelled.~ ) );
					return FALSE;
				}
			}
		}

		if ( Defined( FilmDrive ) && <FilmDriveEnabled> )
		{
			if ( ~<FDVendor>~ == ~Halse~ ) 
			{
				if ( !IsDriveTensioned( TRUE ) )
				{
					theMsg = Translate( ~The film must be loaded and the first frame aligned before performing a focus.~ );
					MessageBox( ~<theMsg>~,OK );
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return FALSE;
				}
				else if ( !<gFirstFrameAligned> ) 
				{
					theMsg = Translate( ~The first frame must be aligned before performing a focus.~ );
					MessageBox( ~<theMsg>~,OK );
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return FALSE;
				}
				
				PositionForFocusNeeded = FALSE;
				if ( <FocusNeeded> )
				{
					PositionForFocusNeeded = Halse_PositionForFocusNeeded();
					if ( <PositionForFocusNeeded> )
					{
						Halse_PositionForFocus( TRUE );
						return TRUE;
					}
				}
			}
			else
			{
				if ( ~<FDVendor>~ == ~HR500AFD~ && !<gFirstFrameAligned> )
				{
					theMsg = Translate( ~The first frame must be aligned before performing a focus.~ );
					MessageBox( ~<theMsg>~,OK );
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return FALSE;
				}

				PositionForFocusNeeded = FALSE;
				if ( !IsDriveTensioned( FALSE ) )
				{
					OnFilmDriveOperationComplete = STR ( OnFocusButton( ~<NotAfterCal>~,~~ ); );
					if ( !OnLoadFwdButton() )
					{
						dlg( SetStatus,0,Translate( ~Focus cancelled.~ ) );
						ClearFilmDriveOperationHandlers();
						EnableScanningControls( TRUE );
						SetTransportControlsStopped();
						Warning( Translate( ~Focus cancelled.~ ) );
						return FALSE;
					}
					return TRUE;
				}
				else
				{
					DlgData( GetValues,CurrentPunchPosition,CurrentPunchPosition );
					if ( ~<CurrentPunchPosition>~ == ~~ || !IsNumeric( ~<CurrentPunchPosition>~ ) )
					{
						OnFilmDriveOperationComplete = STR ( OnFocusButton( ~<NotAfterCal>~,~~ ); );
						if ( !OnLoadFwdButton() )
						{
							ClearFilmDriveOperationHandlers();
							EnableScanningControls( TRUE );
							SetTransportControlsStopped();
							Warning( Translate( ~Focus cancelled.~ ) );
							return FALSE; // REM OnLoadFwdButton will display error message
						}
						return TRUE;
					}
				}
			}
		}
		else if ( !<NotAfterCal> )
		{
			if ( IsNULL( Msg ) || ~<Msg>~ == ~~ )
			{
				Msg = Translate(~Do you want to focus the scanner now?  If so, insert the film and select Yes when ready.~);
				if ( !AskToLoadFilm( ~<Msg>~ ) )
				{
					dlg( SetStatus,0,Translate( ~Focus cancelled.~ ) );
					ClearCalibrationHandlers();
					EnableScanningControls( TRUE );
					Warning( Translate( ~Focus cancelled.~ ) );
					return FALSE;
				}
			}
		}
		ClearCalibrationHandlers();
		return DoFocus();
	}
	else
	{
		AutoScanAfterCal = TRUE;
		OnCalibrationComplete = STR ( OnFocusButton( FALSE,~~ ); );
		if ( !OnHR500CalibrateButton( FALSE,FALSE,TRUE ) )
		{
			AutoScanAfterCal = FALSE;
			ClearCalibrationHandlers();
		}
	}
	return FALSE;
}


VOID StillFocusing()		// KEEP THE USER UPDATED WHILE THE FOCUS IS IN PROCESS
{
	if ( Defined( dlg ) )
	{
		if (  Scanner( Focusing ) )
		{
			msg = ~Still Focusing (<++SecondsWaiting> Secs)~;
			//dlg( SetStatus,0,~<msg>~ );

			progressAmount = (<SecondsWaiting> / 40) * 100;
			dlg( SetString,~<progressAmount>~,Progress,0 );

			Actions = ACTION Doc ( FocusProgressDialog "UpdateStatusText( ~<msg>~ );" );
			PerformActions( Actions );
			Action = STR ( StillFocusing(); );
			QueueContentsAfter( Action,1000 );
		}
		else
		{
			Actions = ACTION Doc ( FocusProgressDialog "DoCancelButton();" );
			PerformActions( Actions );
		}
	}
}

VOID CancelFocus()
{
	dlg( SetStatus,0,~Cancelling Focus...~ );
	Scanner( CancelFocus );
}

ScanListQuery = ~~;
LastScanListQuery = ~~;
LastOrderID = ~~;
LastRoll = ~~;
LastFrame = ~~;
KeepScanList = FALSE;


VOID ClearScanList()
{
	if ( <KeepScanList> ) 
	{
		return;
	}
	ScanListQuery = ~~;
	LastScanListQuery = ~~;
	LastOrderID = ~~;
	LastRoll = ~~;
	LastFrame = ~~;
}


NUMERIC ResyncScanList()
{
	if ( <KeepScanList> ) 
	{
		return TRUE;
	}
	dlg( GetInput );

	ScanFrameBeforeAdvance = TRUE;

	if ( DlgData(GetNumeric,ScanFromDataBase) )
	{
		FrameNotInDB = FALSE;
		ClearScanList();
		if ( GetScanList() )
		{
			if ( Defined( ScanList ) )
			{
				Count = ScanList( NumEntries );
				dlg( SetStatus,0,~<Count> Frames loaded~ );
			}
		}
	}
	return TRUE;	// Add this later
}


NUMERIC GetScanListQuery()
{
	OrderID = ~<$con.dlgData[Order]>~;
	Roll = ~<$con.dlgData[Roll]>~;
	FilmDriveEnabled = ~<$con.dlgData[FilmDriveEnabled]>~;
	AutoScan = ~<$con.dlgData[AutoScan]>~;
	AutoScanWrap = ~<$con.dlgData[AutoScanWrap]>~;

	GetFilmDriveVendor();

	SortDirection = ( <FilmDriveEnabled> && <FilmDirection> == 1 && !<IgnoreFilmDirection> ) ? ~DESC~ : ~~;

	SortOrder = ~OrderID,Roll,Frame <SortDirection>~;

	if ( <FilmDriveEnabled> && ( ~<FDVendor>~ != ~Halse~ ) )
	{
		SortOrder = ~Punch <SortDirection>~;
	}

 	ScanListQuery = ~Select * From Images Where OrderID = '<OrderID>' AND Roll = '<Roll>' AND (Scan = 1) Order By <SortOrder>~;

	// This indicates test mode, select all records
	if ( <AutoScan> && <AutoScanWrap> )
	{
	 	ScanListQuery = ~Select * From Images Where OrderID = '<OrderID>' AND Roll = '<Roll>' Order By <SortOrder>~;
	}

	if ( !ADO( db,Connect,GetValuesFor,~Select BatchID from Orders Where ID = '<OrderID>'~,BatchID ) )
	{
		return TRUE;
	}

	if ( IsNULL(~<BatchID>~) )
	{
		return TRUE;
	}

	// THE FOLLOWING HANDLES MULTIPLE ROLLS IN A BATCH

	Fields = ~Orders.BatchID,Orders.BatchSeq,Rolls.BatchSeq,Images.*~;

	TheSort = ~Orders.BatchSeq <SortDirection>,Rolls.BatchSeq <SortDirection>,Images.Roll <SortDirection>,Images.Frame <SortDirection>~;

	if ( <FilmDriveEnabled> && ( ~<FDVendor>~ != ~Halse~ ) )
	{
		TheSort = ~Images.Punch <SortDirection>~;
	}

	Critieria = ~Orders.BatchID = '<BatchID>'~;

	TheJoin = ~Orders.ID = Images.OrderID AND Rolls.OrderID = Images.OrderID AND Rolls.Roll = Images.Roll~;

	Tables = ~Orders,Rolls,Images~;

	ScanListQuery = ~Select <Fields> From <Tables> Where <Critieria> AND <TheJoin> AND (Scan = 1) Order By <TheSort>~;

	return TRUE;
}


NUMERIC ViewScanList()
{
	GetScanListQuery();

	Actions = ACTION DOC ( ~ScanList~ Open ImagesDataDoc "Init( ~ScanList~,FALSE,~<ScanListQuery>~,0 );" );
	return PerformActions( Actions );
}


FirstPunchNumber = ~0~;
LastPunchNumber = ~0~;
ScanFrameBeforeAdvance = TRUE;

NUMERIC GetScanList()
{
	if ( !Defined( ScanList ) || ~<ScanListQuery>~ == ~~ || ~<ScanListQuery>~ != ~<LastScanListQuery>~ )
	{
		if ( ~<ScanListQuery>~ == ~~ )
		{
			GetScanListQuery();
		}

		FirstPunchNumber = ~0~;
		LastPunchNumber = ~0~;
		ScanFrameBeforeAdvance = TRUE;

		ForgetGlobal( ScanList );

		if ( !PGenConList( ScanList,Connect,CursorLocation,Client,Cursor,Static,Lock,BatchOptimistic,QUERY,~<ScanListQuery>~ ) )	
			{ return Warning( Translate( ~Failed to query the Images table~ ) ); }

		ScanList( SetConnection,~~ );	// DISCONNECT FROM THE DATABASE
		Global( ScanList );

		LastScanListQuery = ~<ScanListQuery>~;

		if ( ScanList( NumEntries ) == 0 )
		{
			ForgetGlobal( ScanList );
			return FALSE;
		}

		// TBD - Override DB range check
		LastPunchNumber = <MaxPunchNumber>;
		FirstPunchNumber = <MinPunchNumber>;
		ScanList( GetFirst,Record );

		CurrentScanFrame = ~<$pcon.Record[Frame]>~;
		dlg( SetStrings,Order,~<$pcon.Record[OrderID]>~,Roll,~<$pcon.Record[Roll]>~,Frame,~<$pcon.Record[Frame]>~ );
	}

	return TRUE;
}



NUMERIC FindFrameData(Order,Roll,Frame)
{
	if ( !GetScanList() )
	{
		return FALSE;
	}

	ScanList( GetFirst,Item );

	if ( !ScanList( Find,~OrderID = '<Order>'~,0,1,~Current~ ) )
	{
		return Warning( Translate( ~Could not find Order '<Order>'~ ) );
	}

	if ( !ScanList( Find,~Roll = '<Roll>'~,0,1,~Current~) )
	{
		return Warning( Translate( ~Could not find Order '<Order>'  Roll '<Roll>'~ ) );
	}

	if ( !ScanList( Find,~Frame = '<Frame>'~,0,1,~Current~ ) )
	{
		return Warning( Translate( ~Could not find Order '<Order>'  Roll '<Roll>'  Frame '<Frame>'~ ) );
	}

	return TRUE;
}


NUMERIC GetPunchNumber(Order,Roll,Frame)
{
	if ( !FindFrameData(~<Order>~,~<Roll>~,~<Frame>~ ) )
	{
		return FALSE;
	}

	ScanList( GetRecord,Record );

	return Record( GetNumeric,Punch );
}


// WaitingForIdleFilmDrive means that we are moving the film on the Scan (QueueNextFrame)
// in AutoScan mode.
// If an error occurs, the previous frame (current scan) was ok and scanned correctly. 
// However,the film is not positioned correctly for the next scan.

NUMERIC ResetNextFrameAfterError( WaitingForIdleFilmDrive )
{
	if ( !Defined( ScanList ) || IsNull( ScanList ) )
	{
		return TRUE;
	}

	if ( <NextFrameResetOnce> )
	{
		return TRUE;
	}
	
	NextFrameResetOnce = TRUE;

	// Get the previous frame
	// If look ahead failed, we've gone beyond the list in that direction.
	Direction = <LastPosition>;

	NextFrameReverseCmd = (<Direction> < 0) ? ~GetNext~ : ~GetPrev~;
	NextFrameForwardCmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;

	if ( !<WaitingForIdleFilmDrive> )
	{
		if ( !ScanList( <NextFrameReverseCmd>,Image ) )
		{
			if ( <Direction> < 0 )
			{
				ScanList( GetLast,Image );
			}
			else if ( <Direction> > 0 )
			{
				ScanList( GetFirst,Image );
			}
		}
	}
	else

	{
		if ( !ScanList( <NextFrameForwardCmd>,Image ) )
		{
			if ( <Direction> < 0 )
			{
				ScanList( GetFirst,Image );
			}
			else if ( <Direction> > 0 )
			{
				ScanList( GetLast,Image );
			}
		}
	}

	if ( DlgData( GetNumeric,AutoScan ) )
	{
		ScanFrameBeforeAdvance = TRUE;
	}

	return TRUE;
}


NUMERIC GetNextFrameToScanInfo( Direction,AutoScanMode,AutoScanWrap,&Order,&Roll,&Frame, &Punch, &XOffset, &YOffset, &AtEndOfList, &NextPunch, &NextXOffset, &NextXPos, &NextYPos, &NextScanWidth, &NextScanLength )
{
	if ( ~<LastOrderID>~ != ~<Order>~  || ~<LastRoll>~ != ~<Roll>~ )
	{
		ResyncScanList();
	}
	if ( !GetScanList() )
	{
		return FALSE;
	}

	SaveFirstAutoScanPunch = FALSE;

	Cmd = ~GetRecord~;
	NextFrameCmd = ~GetRecord~;
	NextFrameReverseCmd = ~GetRecord~;

	if ( <ScanFrameBeforeAdvance> && <Direction> != 0 )
	{
		SaveFirstAutoScanPunch = TRUE;

		ScanFrameBeforeAdvance = FALSE;
		NextFrameCmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;
		NextFrameReverseCmd = (<Direction> < 0) ? ~GetNext~ : ~GetPrev~;
	}
	else if ( <Direction> == 0 )
	{
		FindFrameData(~<Order>~,~<Roll>~,~<Frame>~);
		ScanFrameBeforeAdvance = FALSE;
	}
	else
	{
		Cmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;
		NextFrameCmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;
		NextFrameReverseCmd = (<Direction> < 0) ? ~GetNext~ : ~GetPrev~;
	}

	AtEndOfList = FALSE;

	if ( !ScanList( <Cmd>,Image ) )
	{
		if ( <AutoScanMode> && <AutoScanWrap> )
		{
			DoPunchWaitOverride = FALSE;
			AtEndOfList = TRUE;
		}
		else
		{
			AtEndOfList = TRUE;
			return FALSE;
		}
	}

	if ( <AutoScanMode> && <AutoScanWrap> && <AtEndOfList> )
	{
		if ( <Direction> > 0 )
		{
			if ( !ScanList( GetFirst, Image ) )
			{
				return FALSE;
			}
		}
		else if ( <Direction> < 0 )
		{
			if ( !ScanList( GetLast, Image ) )
			{
				return FALSE;
			}
		}
		AtEndOfList = FALSE;
	}
	Order = ~<$pcon.Image[OrderID]>~;
	Roll  = ~<$pcon.Image[Roll]>~;
	Frame = ~<$pcon.Image[Frame]>~;
	Punch = ~<$pcon.Image[Punch]>~;
	XOffset = ~<$pcon.Image[XOffset]>~;
	YOffset = ~<$pcon.Image[YOffset]>~;
	ImageScanSetup = ~<$pcon.Image[ScanSetup]>~;
	ImageFilmType = ~<$pcon.Image[FilmType]>~;

	NextPunch = <INVALID_PUNCH>;
	NextXOffset = 0;
	NextXPos = 0;
	NextYPos = 0;
	NextScanWidth = 0;
	NextScanLength = 0;

	if ( <SaveFirstAutoScanPunch> )
	{
		FirstAutoScanPunch   = ~<Punch>~;
		FirstAutoScanXOffset = ~<XOffset>~;
		FirstAutoScanRoll	 = ~<Roll>~;
		SaveFirstAutoScanPunch = FALSE;
	}

	// Get the next frame (look ahead)
	if ( ScanList( <NextFrameCmd>,Image ) )
	{
		NextRoll = ~<$pcon.Image[Roll]>~;
		
		if ( ~<NextRoll>~ == ~<Roll>~ )
		{
			NextPunch = ~<$pcon.Image[Punch]>~;
			NextXOffset = ~<$pcon.Image[XOffset]>~;
			NextXPos = 50.;
			NextYPos = 50.;
			NextScanWidth = 100.;
			NextScanLength = 100.;
		}
	}
	else if ( <AutoScanMode> && <AutoScanWrap> )
	{
		if ( ~<FirstAutoScanRoll>~ == ~<Roll>~ )
		{
			NextPunch = ~<FirstAutoScanPunch>~;
			NextXOffset = ~<FirstAutoScanXOffset>~;
			NextXPos = 50.;
			NextYPos = 50.;
			NextScanWidth = 100.;
			NextScanLength = 100.;
		}
	}

// TBD 
// If the above command fails then we are at the beginning
//	  Return to original record
	if ( !ScanList( <NextFrameReverseCmd>,Image ) )
	{
		AtEndOfList = TRUE;
		return FALSE;
	}

	return ~<Order>~ != ~~ && ~<Roll>~ != ~~ && ~<Frame>~ != ~~;
}


NUMERIC GetOffsetInfoFromDB( Order,Roll,Frame,&XOffset,&YOffset )
{
	FindFrameData(~<Order>~,~<Roll>~,~<Frame>~);
	if ( !ScanList( GetRecord,Image ) )
	{
		return FALSE;
	}
	XOffset = ~<$pcon.Image[XOffset]>~;
	YOffset = ~<$pcon.Image[YOffset]>~;

	return TRUE;
}

VOID FilmDriveOperationError( Message, RecoverFrame )
{
	FrameRecovery = FALSE;
	if ( DefinedAndNotNULL( RecoverFrame ) )
	{
		FrameRecovery = <RecoverFrame> ? TRUE : FALSE;
	}

	if ( IsNULL( ~<Message>~ ) )
	{
		Warning( Translate( ~Unable to seek frame~ ) );
	}
	else
	{
		Warning( Translate( ~Unable to <Message>~ ) );
	}
	if ( <FrameRecovery> && DlgData(GetNumeric,ScanFromDataBase) )
	{
		ResetNextFrameAfterError( FALSE );
	}
	ClearFilmDriveOperationHandlers();
}


VOID FilmDriveOperationStopped()
{
	Warning( Translate( ~Stop issued to film drive by user~ ) );
	ClearFilmDriveOperationHandlers();
}

VOID ClearFilmDriveOperationHandlers()
{
	OnFilmDriveOperationComplete = ~~;
}

VOID LoadFilmComplete()
{
	if ( ~<gFilmMarkType>~ == ~Notch~ || ~<gFilmMarkType>~ == ~None~ )
	{
		gNotchNumber = 1;
		CurrentPunchNumber = <gNotchNumber>;
	}
	else
	{
		CurrentPunchNumber = Scanner( GetCurrentPunchNumber );
	}
	CurrentPunchNumber = HR500_FormatPunchNumber( <CurrentPunchNumber> );
	SetCurrentPunchNumber( ~<CurrentPunchNumber>~,FALSE );
	FilmDriveCmdInProgress( ~Film Load Complete~ );
	dlg( EnableControls,FALSE,LoadRevButton,LoadFwdButton );
	if ( !IsNull( ~<OnFilmDriveOperationComplete>~ ) && ~<OnFilmDriveOperationComplete>~ != ~~ )
	{
		dlg( EnableControls,FALSE,StopButton );
		<OnFilmDriveOperationComplete>;
	}
	else
	{
		EnableScanningControls( TRUE );
		SetTransportControlsStopped();
	}
}

VOID UnloadFilmComplete( tensionState,unloadingFilm )
{
	SetCurrentPunchNumber( ~~ );
	gNotchNumber = 0;

	if ( !<tensionState> )
	{
		FilmDriveCmdInProgress( ~Film unloaded~ );
		dlg( SetCheck,FALSE,TensionBox );
		dlg( Save,TensionBox );
		SetDialogVendorXOffsetInfo( 0, 0.0 );
		SetDialogVendorYOffsetInfo( 0, 0.0 );
		dlg( EnableControls,TRUE,LoadFwdButton );
		if ( ~<FDVendor>~ == ~HR500~ )
		{
			dlg( EnableControls,TRUE,LoadRevButton );
		}
		if ( !<unloadingFilm> )
		{
			UserFrameErrorMessage( ~Film movement failure~,FALSE,TRUE );
		}
		dlg( EnableControls,FALSE,UnloadRevButton,UnloadFwdButton );
		if ( !CalibrationOk( TRUE,TRUE,FALSE,TRUE ) )
		{
			if ( !OnHR500CalibrateButton( FALSE,FALSE,TRUE ) )
			{
				EnableScanningControls( TRUE );
				SetTransportControlsStopped();
				ClearCalibrationHandlers();
				Warning( Translate( ~Calibration did not complete.~ ) );
			}
			return;
		}
	}
	else
	{
		dlg( EnableControls,TRUE,UnloadRevButton,UnloadFwdButton );
		if ( <unloadingFilm> )
		{
			UserFrameErrorMessage( ~Film Unload Aborted~, FALSE, FALSE );
		}
		else
		{
			UserFrameErrorMessage( ~Stop~, FALSE, FALSE );
		}
	}

	EnableScanningControls( TRUE );
	SetTransportControlsStopped();
}


LastPosition = 0;
CurrentPosition = 0;
ClearFilmDriveOperationHandlers();

NUMERIC ScanAgain()
{
	return OnScanButton( <LastPosition>,FALSE );
}

NUMERIC FilmDriveAtFrame( WhichFrame,XOffset )
{
	dlg( SetStatus,0,~Film Drive at <WhichFrame>:<XOffset>~ );
	return TRUE;
}

VOID OnScanButtonSetup()
{
	DoPunchWaitOverride = FALSE;
}


NUMERIC VerifySFSFile()
{
	DlgData( Get,SFSFile,SFSFile );	
	if ( !Files( FileExists,~<SFSFile>~ ) ) 
	{
		return FALSE;
	}
	return TRUE;
}


NUMERIC VerifyProfiles( )
{
	if ( dlgData( GetNumeric,ScannerProfileEnabled ) && dlgData( GetNumeric,OutputProfileEnabled ) )
	{
		profile = ~<$con.DlgData[ICCProfile]>~;

		Query = ~Select Path From Profiles Where Name = '<profile>'~;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr );
			return Warning( Translate( ~Failed to query for profile (<profile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		}

		if ( List( GetFirst,ProfileRecord ) )
		{
			profilePath = ~<$pcon.ProfileRecord[Path]>~;

			if ( !Files( FileExists,~<profilePath>~ ) ) 
			{
				return Warning( Translate( ~The scanner profile (<profile>) does not exist in the path specified in the Profiles database table.\nVerify the profile information in the Profiles table and try the operation again.~ ) );
			}
		}

		profile = ~<$con.DlgData[ICCOutputProfile]>~;

		Query = ~Select Path From Profiles Where Name = '<profile>'~;

		List( GetConnection, Connection );
		if ( !PGenConList( List2,Connection,Connection,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List2( GetErrorDescription,0,theErr );
			return Warning( Translate( ~Failed to query for profile (<profile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		}

		if ( List2( GetFirst,ProfileRecord ) )
		{
			profilePath = ~<$pcon.ProfileRecord[Path]>~;

			if ( !Files( FileExists,~<profilePath>~ ) ) 
			{
				return Warning( Translate( ~The storage profile (<profile>) does not exist in the path specified in the Profiles database table.\nVerify the profile information in the Profiles table and try the operation again.~ ) );
			}
		}
	}

	return TRUE;
}


STR CreateImagePath( Volume,Order,Roll,Frame,Ext )
{
	ImagesPath = ~<Volume>\<Order>\<Roll>\<Frame><Ext>~;

	if ( IsNULL( ~<$con.DlgData[PathTemplate]>~ ) )
	{
		if ( DlgData(GetNumeric,OmitRollInPath) )
		{
			ImagesPath = ~<Volume>\<Order>\<Frame><Ext>~;
			ClearPathIfDuplicated( ~<Order>~,~<Roll>~,~<Frame>~,~<ImagesPath>~ );
		}

		return ~<ImagesPath>~;
	}

	if ( Defined( ScanList ) ) 
	{
		ScanList( GetRecord,ImageRec );
	}

	Padding = DlgData(GetNumeric,FrameToPunchPadding);
    DlgData( Get,CurrentPunchPosition,Punch );
    DlgData( Get,CustomerID,CustomerID );
	CustomerIDNoSpace = ~<CustomerID>~;
	StripWhiteSpace( CustomerIDNoSpace );

	// get images description fields based on system setting??
	DescriptionWithSpace = ~~;
	DescriptionNoSpace   = ~~;
	if ( DefinedAndNotNull( ExtractDescriptionField ) )
	{
		descQuery = ~Select Description from Images WHERE OrderID='<Order>' AND Roll='<Roll>' AND Frame='<Frame>'~;
		if ( Ado( dBase,Connect,GetValuesFor,~<descQuery>~,DescriptionWithSpace ) )  
		{
			DescriptionNoSpace   = ~<DescriptionWithSpace>~;
			StripWhiteSpace( DescriptionNoSpace );
		}
	}

	// ~<Volume>\Images\<Order>\<$Str.$Punch.%0<Padding>ld><Ext>~

	ImagesPath = ~<$con.DlgData[PathTemplate]>~;

	ClearPathIfDuplicated( ~<Order>~,~<Roll>~,~<Frame>~,~<ImagesPath>~ );

	return ~<ImagesPath>~;
}


NUMERIC ClearPathIfDuplicated( Order,Roll,Frame,ImagePath )
{
	Query = ~Select OrderID,Roll,Frame from Images Where Path = '<ImagePath>'~;

	if ( Ado( dBase,Connect,GetValuesFor,~<Query>~,Order2,Roll2,Frame2 ) )  
	{
		// If yes, and it exists on the same order/roll/frame, then we continue
		if ( SimilarStr(~<Order>~,~<Order2>~) && SimilarStr(~<Roll>~,~<Roll2>~) && SimilarStr(~<Frame>~,~<Frame2>~) )
		{
			return TRUE;	// THE PATH ALREADY EXISTS ON THE CORRECT ORDER,ROLL,FRAME
		}
		else	// THE PATH EXISTS ON ANOTHER ORDER,ROLL,FRAME SO NULL IT OUT.  CAN'T HAVE SAME IMAGE IN TWO RECORDS!
		{
			NullCmd = ~Update Images Set FileType=NULL, Reprocess=0, Reconverting = 0, Width=0, Length=0, PreviewWidth=0, PreviewLength=0, Path = NULL, ImageSource = NULL Where OrderID = '<Order2>' AND Roll = '<Roll2>' AND Frame = '<Frame2>'~;

			if ( !dBase( CMD,~<NullCmd>~ ) )	// CHANGE ITS PATH TO NULL CAUSE WE CAN'T HAVE THE SAME IMAGE ON TWO DIFFERENT RECORDS
			{
				dBase( GetErrorDescription,theErr );
				Invoke( ShowWarning,Translate( ~Database update failed. <NullCmd>. <theErr>~ ) );
				return FALSE;
			}

			// If it existed in the Images table, then it might have been in the RawImages table as well.
			RawImagesCmd = ~Delete From RawImages Where OrderID = '<Order2>' AND Roll = '<Roll2>' AND Frame = '<Frame2>'~;
			dBase( CMD,~<RawImagesCmd>~ );

			Log( Session,Translate(~HR500 Scan Image: Path for OrderID = '<Order2>' AND Roll = '<Roll2>' AND Frame = '<Frame2>' changed from <ImagePath> to NULL~) );
			return FALSE;
		}
	}
	return FALSE;
}


NUMERIC SetScanWindow()
{
	DlgData( Get,FilmType,FilmType );
	DlgData( Get,SFSFile,SFSFile );

	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}

	FilmTermsFile = ~~;
	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;

	if ( !Scanner( LoadFilmTermsFromFile,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ ) )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		return FALSE;
	}
	SizzleControl( Set,FilmType,~<FilmType>~ );

	Mag = ~<$Con.DlgData[Format]>~;
	ScanSize = ~<$Con.DlgData[SpeedQuality]>~;
	Index = MagNames( IndexOf,~<Mag>~ );
	MinMagnification = atof(MinMagnifications(ValueOf,$Index));
	MaxMagnification = atof(MaxMagnifications(ValueOf,$Index));
	ScanSize = (((<MaxMagnification> - <MinMagnification>) / (<SpeedQualityHighVal> - <SpeedQualityLowVal>)) * <ScanSize>) + <MinMagnification>;
	ScanSize = RoundToDigit( Pin( $ScanSize,<MinMagnification>,<MaxMagnification> ),2 );
	OpticalZoom = ~<$Con.DlgData[OpticalZoom]>~;
	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	SizzleControl( SetValues,ScanSize,<ScanSize>,OpticalZoom,<OpticalZoom>,XOffset,<XOffset> );

	if ( !Scanner( SetWindow,SizzleControl ) )
	{
		//SizzleControl( SetValues,XPos,<origXPos>,YPos,<origYPos>,ScanWidth,<origScanWidth>,ScanLength,<origScanLength> );
		ErrMsg = Translate( ~Could not setup the scanner as requested.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		return FALSE;
	}

	return TRUE;
}


// if using Digital ICE, allow for the IR scan and the temporary buffer for the LUT
NUMERIC CheckAvailableMem()
{
	freeMemory = GetAvailableVMM();

	scanWidth  = GetScanWidth( FALSE, TRUE, TRUE );
	scanLength = GetScanLength( <scanWidth>, FALSE, TRUE );

	renderSize = <scanWidth> * <scanLength> * 3.0;
	scanSize   = <renderSize> * 2.0;

	if ( DlgData( GetNumeric,DigitalIceCheckbox ) )
	{
		scanSize += <scanWidth> * <scanLength> * 2.0;
	}

	if ( <scanSize> < <freeMemory> )
	{
		return TRUE;
	}
	else
	{
		return FALSE;
	}
}

VOID SelectControl(FieldName)
{
	dlg( PopupMsg );
	dlg( SetControlFocus,<FieldName> );
	dlg( EditText,<FieldName>,SetSel,999,999,TRUE );
}


VOID AuditField( FieldName,LowValue,HighValue,DefaultValue )
{
	dlg( GetControlValue,~<FieldName>~,Value );

	if ( ~<Value>~ == ~-~ )
	{
		if ( <LowValue> < 0 )
		{
			return;
		}
		else
		{
			 msg = ~Value must be greater than or equal to <LowValue>~;
			 dlg( PopupMsg,Translate( ~<msg>~ ) );
			 Action = STR ( SelectControl(~<FieldName>~) );
			 QueueContentsAfter( Action,1000 );
			 dlg( SetControlValue,~<FieldName>~,~<LowValue>~ );
			 return;
		}

	}

	if ( IsNumeric(~<Value>~) || ( ~<Value>~ == ~~ ) )
	{
//		if ( ~<Value>~ == ~~ )
//		{
//			Value = 0;
//			dlg( SetControlValue,~<FieldName>~,~<Value>~ );
//		}
		if ( Numeric(~<Value>~) < <LowValue> )
		{
			 msg = ~Value must be greater than or equal to <LowValue>~;
			 dlg( PopupMsg,Translate( ~<msg>~ ) );
			 Action = STR ( SelectControl(~<FieldName>~) );
			 QueueContentsAfter( Action,1000 );
			 dlg( SetControlValue,~<FieldName>~,~<LowValue>~ );
		}
		else if ( Numeric(~<Value>~) > <HighValue> )
		{
			 msg = ~Value must be less than or equal to <HighValue>~;
			 dlg( PopupMsg,Translate( ~<msg>~ ) );
			 Action = STR ( SelectControl(~<FieldName>~) );
			 QueueContentsAfter( Action,1000 );
			 dlg( SetControlValue,~<FieldName>~,~<HighValue>~ );
		}
	}
	else
	{
		 msg = ~You have entered an invalid value. Please enter a value between <LowValue> and <HighValue>~;
		 dlg( PopupMsg,Translate( ~<msg>~ ) );
		 Action = STR ( SelectControl(~<FieldName>~) );
		 QueueContentsAfter( Action,2000 );
		 dlg( SetControlValue,~<FieldName>~,~<DefaultValue>~ );
		 return;
	}
}


NUMERIC OpenImage()
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll,Frame,Frame );

	if ( ~<Order>~ == ~~ )		{ return Warning( Translate( ~Order ID cannot be NULL~ ) ); }
	if ( ~<Roll>~ == ~~ )		{ return Warning( Translate( ~Roll cannot be NULL~ ) ); }
	if ( ~<Frame>~ == ~~ )		{ return Warning( Translate( ~Frame cannot be NULL~ ) ); }

	Key = ~OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

	if ( !Ado( dBase,Connect,GetValuesFor,~Select Path From Images Where <Key>~,Path ) )
	{
		return Warning( Translate( ~Could not find path for <Order>,<Roll>,<Frame> in the database~ ) );
	}

	if ( !DefinedAndNotNull( Path ) )
	{
		return Warning( Translate( ~Unable to get path specified for <Order>,<Roll>,<Frame> in the database~ ) );
	}

	if ( ~<Path>~ == ~~ )
	{
		return Warning( Translate( ~No path specified for <Order>,<Roll>,<Frame> in the database~ ) );
	}

	if ( !Open( Image,~<Path>~ ) )
	{
		return Warning( Translate( ~Could not open <Path>~ ) );
	}

	return TRUE;
}



NUMERIC OpenFramesButton()
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	if ( ~<Order>~ == ~~ )		
	{ 
		return Warning( Translate( ~Order ID cannot be NULL~ ) );
	}

	if ( ~<Roll>~ == ~~ )		
	{ 
		return Warning( Translate( ~Roll cannot be NULL~ ) );
	}

	Key = ~OrderID = '<Order>' AND Roll = '<Roll>'~;

	Query = ~Select * From Images Where <Key> Order By OrderID,Roll,Frame~;

	Actions = ACTION Doc ( ImagesDoc Open ImagesDataDoc "FrameDataForOrderRoll( ~<Order>~,0,~<Query>~,0,~<Order>~,~<Roll>~ );" );

	return PerformActions( Actions );
}


NUMERIC OpenEditorsTable()
{
	Query = ~Select * From Editors Order By Vendor,FilmFormat~;

	Actions = ACTION Doc ( EditorsDoc Open EditorsDoc "Init( ~FilmFormats~,~<Query>~ );" );

	return PerformActions( Actions );
}


NUMERIC OnFramesToScanButton()
{
	dlg( GetInput );
	return ViewScanList();
}


NUMERIC OnFramesToScanButton()
{
	dlg( GetInput );
	return ViewScanList();
}


NUMERIC AddCustomer()
{
	dlg( GetInput,GetStrings,CustomerID,CustomerID );

	if ( ~<CustomerID>~ == ~~ )		{ return TRUE; }

	Query = ~Select ID From Customers Where ID = '<CustomerID>'~;

	if ( !Ado( dBase,Connect,GetValuesFor,~<Query>~,CustomerID ) )
	{
		Cmd = ~Insert Into Customers( ID ) Values( '<CustomerID>' )~;

		if ( !dbase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( ~Could not add customer <CustomerID>.  Database update failed <Cmd>. <theErr>~ ) );
		}
	}

	return TRUE;
}


NUMERIC AddOrder()
{
	dlg( GetInput,GetStrings,Order,Order,CustomerID,CustomerID );

	if ( ~<Order>~ == ~~ )		{ return Warning( Translate( ~Order ID cannot be NULL~ ) ); }

	Query = ~Select ID From Orders Where ID = '<Order>'~;

	if ( !Ado( dBase,Connect,GetValuesFor,~<Query>~,ID ) )
	{
		Today = ~<$Date.DataBaseDate.SharedDateQuoted>~;
		Fields = ~ID,CustomerID,Status,OrderDate,ShipDate,Priority,Owner,RunCount,Type~;
		Values = ~'<Order>','<CustomerID>','Scan',<Today>,<Today>,50,'<$App.UserName>',0,'Original'~;
		Cmd = ~Insert Into Orders( <Fields> ) Values( <Values>  )~;

		if ( !dbase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( ~Database update failed <Cmd>. <theErr>~ ) );
		}

		return dlg( SetStatus,0,Translate( ~Order <Order> for Customer <CustomerID> has been added.~) );

	}

	return dlg( SetStatus,0,Translate( ~Order <Order> for Customer <CustomerID> already exists.~) );
}


NUMERIC AddCustomerAndOrder()
{
	if ( !AddCustomer() )	{ return FALSE; }
	
	if ( !AddOrder() )		{ return FALSE; }

	return dlg( SetStatus,0,Translate( ~Customer and Order now exist~) );
}


NUMERIC ExportImages()
{
	dlg( GetInput,GetStrings,Order,Order );

	Actions = ACTION Doc ( ~ExportImagesDoc~ OpenOnce ExportImagesDoc "Init(~<Order>~);" );
	return PerformActions( Actions );
}


NUMERIC FindOrder()
{
	dlg( GetInput,GetStrings,Order,Order );

	if ( ~<Order>~ == ~~ )	
	{ 
		action = ACTION DOC ( AllOrders Open SearchDoc "Search(Orders);"  );
		return PerformActions( action );
	}

	Query = ~Select * From Orders Where ID Like '<Order>%' Order By ShipDate~;

	Actions = ACTION DOC ( ~Orders~ OpenOnce OrdersDoc "Init( ~<Order>~,~<Query>~);" );
	
	return PerformActions( Actions );
}


NUMERIC OnSetOrderStatus()
{
	ScannerDlgDefinition( GetWindowPosition,Left,Top);
	//Left -= 250;	

	dlg( GetInput,GetStrings,Order,Order );

	if ( ~<Order>~ == ~~ )	
	{ 
		return Warning( ~You must select an Order~ );
	}

	Actions = ACTIONS ( Doc( ~SetOrderStatusDoc~ Open SetOrderStatusDoc "Init( ~<Order>~,~<Left>~,~<Top>~ );" ) );
	return PerformActions( Actions );
}


NUMERIC FindCustomer()
{
	dlg( GetInput,GetStrings,CustomerID,CustomerID );

	if ( ~<CustomerID>~ == ~~ )	
	{ 
		action = ACTION DOC ( AllCustomers Open SearchDoc "Search(Customers);"  );
		return PerformActions( action );
	}

	Query = ~Select * From Customers Where ID Like '<CustomerID>%'~;

	Actions = ACTION DOC ( ~Customers~ OpenOnce CustomersDoc "Init( ~<CustomerID>~,~<Query>~);" );
	
	return PerformActions( Actions );
}


NUMERIC FindRolls()
{
	dlg( GetInput,GetStrings,Order,Order );

	if ( ~<Order>~ == ~~ )	
	{ 
		action = ACTION DOC ( AllOrders Open SearchDoc "Search(Orders);"  );
		return PerformActions( action );
	}

	Query = ~Select * From Rolls Where OrderID Like '<Order>%' Order By Roll~;

	Actions = ACTION DOC ( ~Rolls~ OpenOnce RollsDoc "Init( ~<Order>~,~<Query>~);" );
	
	return PerformActions( Actions );
}


VOID FocusErrorNotification()
{
	ErrMsg = Translate( ~The scanner returned an error while focusing.~ );

	dlg( SetStatus,0,Translate( ~Focus failed.~ ) );
	Actions = ACTION Doc ( FocusProgressDialog "DoCancelButton();" );
	PerformActions( Actions );
	Sleep( 100 );
	App( ThisApp,MessagePump,100 );
	HandleHR500Error( ~<ErrMsg>~ );

	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}


VOID FocusWarningNotification()
{
	ErrMsg = Translate( ~Focus completed with warnings.~ );
	FocusNeeded = FALSE;

	dlg( SetStatus,0,Translate( ~Focus completed with warnings.~ ) );
	HandleHR500Error( ~<ErrMsg>~ );

	Actions = ACTION Doc ( FocusProgressDialog "DoCancelButton();" );
	PerformActions( Actions );
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		if ( !IsNull( ~<FinishScanCommand>~ ) && ~<FDVendor>~ == ~Halse~ )
		{
			OnGotoButton( FALSE,FALSE );
			return;
		}
		SetTransportControlsStopped();
	}
	EnableScanningControls(TRUE);
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}


VOID FocusCancelNotification()
{
	ErrMsg = Translate( ~Focus cancelled.~ );
	FocusNeeded = FALSE;

	dlg( SetStatus,0,Translate( ~<ErrMsg>~ ) );
	HandleHR500Error( ~<ErrMsg>~ );
	Actions = ACTION Doc ( FocusProgressDialog "DoCancelButton();" );
	PerformActions( Actions );

	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		if ( !IsNull( ~<FinishScanCommand>~ ) && ~<FDVendor>~ == ~Halse~ )
		{
			OnGotoButton( FALSE,FALSE );
			return;
		}
		SetTransportControlsStopped();
	}
	EnableScanningControls(TRUE);
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}

/////////////////////////
//
//  If the scan error was due to a failed memory allocation,
//   wait until all the saves are complete and try again if
//   sufficient memory is available.
//  Otherwise, treat as a normal error.
/////////////////////////
VOID ScanErrorNotification( memoryAllocation )
{
	ErrMsg = Translate( ~The scanner returned an error on the scan command.~ );

	dlg( SetStatus,0,Translate( ~Scanning failed.~ ) );

	Actions = ACTION Doc ( FocusProgressDialog "DoCancelButton();" );
	PerformActions( Actions );

	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}

	HandleHR500Error( ~<ErrMsg>~ );
	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
}


VOID FetchErrorNotification()
{
	ErrMsg = Translate( ~The scanner returned an error on the fetch command.~ );

	dlg( SetStatus,0,Translate( ~Fetch image failed.~ ) );
	HandleHR500Error( ~<ErrMsg>~ );

	ScanButtonDisabled = FALSE;
	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}


LastPath = ~~;		
LastImageDocument = 0;


VOID WaitingForFilmAdvanceComplete()
{		
	// 0 => FILMADV_BUSY
	// 1 => FILMADV_IDLE
	// 2 => FILMADV_ERROR
	FDStatus = Scanner( GetFilmDriveStatus );
	if ( <FDStatus> == 0 || Scanner( IsFilmDriveBusy ) )
	{
		FilmDriveCmdInProgress( ~Still waiting for idle film drive~ );
		Action = STR ( WaitingForFilmAdvanceComplete(); );
		QueueContentsAfter( Action,300 );
	}
	else
	{
		if ( <FDStatus> == 2 || <gStoppingFilmDrive> )
		{
			IdleFilmAdvanceComplete( FALSE );
		}
		else if ( <FDStatus> == 1 )
		{
			IdleFilmAdvanceComplete( TRUE );
		}
	}
}


VOID IdleFilmAdvanceComplete( Status, DoAnotherScan )
{
	if ( <Status> )
	{
		gStoppingFilmDrive = FALSE;
		if ( ~<gFilmMarkType>~ == ~Notch~ || ~<gFilmMarkType>~ == ~None~)
		{
			gNotchNumber = <gNotchNumber> + <gNotchIncrement>;
			CurrentPunchNumber = <gNotchNumber>;
			gNotchIncrement = 0;
		}
		else
		{
			CurrentPunchNumber = Scanner( GetCurrentPunchNumber );
		}
		CurrentPunchNumber = HR500_FormatPunchNumber( <CurrentPunchNumber> );
		SetCurrentPunchNumber( ~<CurrentPunchNumber>~ );
		FilmDriveCmdInProgress( ~Frame Movement Complete~ );
		if ( DlgData( GetNumeric,AutoScan ) )
		{
			if ( SizzleControl(GetNumeric,NextPunch) == <INVALID_PUNCH> )
			{
				SetTransportControlsStopped();
			}
			ScanAgain();
		}
		else
		{
			SetTransportControlsStopped();
			EnableScanningControls( TRUE );
		}
	}
	else
	{
		SetCurrentPunchNumber( ~~ );
		NextPunch = SizzleControl(GetNumeric,NextPunch);

		if ( <gStoppingFilmDrive> )
		{
			FilmDriveCmdInProgress( ~Frame Movement Stopped~ );
			mesg = Translate( ~Film drive operation aborted.~ );
			gStoppingFilmDrive = FALSE;
		}
		else
		{
			FilmDriveCmdInProgress( ~Frame Movement Failed~ );
			if ( <NextPunch> == -1 )
			{
				FailedFor = ~the next punch~;
			}
			else if ( <NextPunch> == -2 )
			{
				FailedFor = ~the previous punch~;
			}
			else
			{
				FailedFor = ~punch <NextPunch>~;
			}
			mesg = Translate( ~Waiting for <FailedFor> failed. Scanning aborted.~ );
		}
		
		HandleHR500Error( ~<mesg>~ );
		SetTransportControlsStopped();
		EnableScanningControls( TRUE );
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{
			ResetNextFrameAfterError( TRUE );
		}
	}
}


VOID HR500OpenScannedImage( LastPath,Path,TestScan )
{
	ImageData( SetValues,ImageBuffer,0 );
	ImageData( SetValues,ImageWidth,0 );
	ImageData( SetValues,ImageHeight,0 );
	ImageData( SetValues,ImageDepth,0 );
	ImageData( SetValues,ImageLayout,~~ );

	if ( ( DlgData( GetNumeric,DisplayLastImage ) || <TestScan> ) && ( SizzleControl( GetNumeric,ImageBuffer ) != 0 ) )
	{
		ImageData( SetValues,ImageBuffer,SizzleControl( GetNumeric,ImageBuffer ) );
		ImageData( SetValues,ImageWidth,SizzleControl( GetNumeric,ImageBufferWidth ) );
		ImageData( SetValues,ImageHeight,SizzleControl( GetNumeric,ImageBufferHeight ) );
		ImageData( SetValues,ImageDepth,SizzleControl( GetNumeric,ImageBufferDepth ) );
		SizzleControl( GetValue,ImageBufferLayout,Layout );
		ImageData( SetValues,ImageLayout,~<Layout>~ );

		Document( Doc );
		if ( Doc( FindByPath,~<LastPath>~ ) )
		{
			LastImageDocument = Doc( ReplaceImage,~<Path>~,NULL,ImageData );
		}
		else
		{
			LastImageDocument = Open( Image,~<Path>~,NULL,ImageData );
		}
	}
}


VOID RenderOverScanError( AddrOfOverScanControl )
{
	SizzleControl( SetValues,WaitingForOverScan,FALSE );
	GenCon( ControlInfo, Is, <AddrOfControl>, TEMPORARY );
	HandleHR500Error( Translate( ~An error occurred rendering the overscan image.~ ));

	if ( <RemoveAdjustFrameOnCompletion> )
	{
		dlg( GetInput );
		DlgData( SetValues, AdjustFramePosition, FALSE );
		dlg( SetCheck, FALSE, AdjustFramePositionBox );
		dlg( Save,AdjustFramePositionBox );
		OnAdjustFramePosition();
	}

	EnableScanningControls(TRUE);
	SetTransportControlsStopped();
}


VOID HR500RenderOverScan()
{
	EnableScanningControls(FALSE);
	SetTransportControlsRunning();

	if ( Defined( Scanner ) )
	{
		GenCon( OverScanControl,IsCopyOf,SizzleControl,PERMANENT );
		Scanner( RenderOverScanAsync, OverScanControl );
	}
}


VOID DisplayOverScanComplete()
{
	EnableScanningControls(FALSE);
	SetTransportControlsRunning();

	dlg( GetInput );

	AutoSaveToDisk = DlgData( GetNumeric,AutoSaveToDisk );
	if ( <AutoSaveToDisk> && SizzleControl( GetNumeric,WaitingForOverScan ) )
	{
		SizzleControl( SetValues,WaitingForOverScan,FALSE );
		DirtyFlag = SizzleControl( GetNumeric,DirtyFlag );

		if (~<FDVendor>~ == ~Halse~ && !<RemoveAdjustFrameOnCompletion> && !<DirtyFlag>)
		{
			ReadyForSave( DlgData(GetNumeric,AutoScan) ? TRUE : FALSE );
		}
		else
		{
			ScanButtonDisabled = FALSE;
		}
	}
	SizzleControl( SetValues,WaitingForOverScan,FALSE );

	EnableScanningControls(TRUE);
	SetTransportControlsStopped();
}


VOID OnDismissOverScanWindow( FrameAdjusted )
{
	if ( !<FrameAdjusted> )
	{
		dlg( GetInput );
		showOverScan = DlgData( GetNumeric,AdjustFramePosition );
		WaitingForOverScan = SizzleControl( GetNumeric,WaitingForOverScan );

		if ( <RemoveAdjustFrameOnCompletion> )
		{
			dlg( GetInput );
			DlgData( SetValues, AdjustFramePosition, FALSE );
			dlg( SetCheck, FALSE, AdjustFramePositionBox );
			dlg( Save,AdjustFramePositionBox );
			OnAdjustFramePosition();
		}

//		if ( !Scanner( Scanning ) )
//		{
//			EnableScanningControls(TRUE);
//			SetTransportControlsStopped();
//		}
	}
}

VOID OnAdjustFramePosition()
{
	dlg( GetInput );
	showOverScan = DlgData( GetNumeric,AdjustFramePosition );
	WaitingForOverScan = SizzleControl( GetNumeric,WaitingForOverScan );

	if ( !<showOverScan> && <WaitingForOverScan> )
	{
		RemoveAdjustFrameOnCompletion = TRUE;
	}
	else if ( !<showOverScan> )
	{
		Actions = ACTION Doc ( OverScanImage "DoCancelButton();" );
		PerformActions( Actions );
		RemoveAdjustFrameOnCompletion = FALSE;
		if ( ~<FDVendor>~ == ~HR500AFD~ )
		{
			SizzleControl( Set, OverScan, FALSE);
		}
	}
	else
	{
		RemoveAdjustFrameOnCompletion = FALSE;
		SizzleControl( Set, OverScan, TRUE);
	}

	if ( <showOverScan> && DlgData( GetNumeric,AutoScan ) )
	{
		ClearAutoFlag( FALSE );
	}
}


NUMERIC AdjustFrameLocation( Percent,Edge,Frame )
{
	GetFilmDriveVendor();

	if ( <RemoveAdjustFrameOnCompletion> )
	{
		dlg( GetInput );
		DlgData( SetValues, AdjustFramePosition, FALSE );
		dlg( SetCheck, FALSE, AdjustFramePositionBox );
		dlg( Save,AdjustFramePositionBox );
		OnAdjustFramePosition();
	}

	if ( FunctionDefined( ~<FDVendor>_AdjustFrameLocation~ ))
	{
		<FDVendor>_AdjustFrameLocation( ~<Percent>~,~<Edge>~,~<Frame>~ );
	}

	return TRUE;
}


NUMERIC ScanNextPrevFromOverScan( Position )
{
	OnScanButtonSetup();
	result = OnScanButton( <Position>,FALSE );
		
	return <result>;
}


VOID EnableSequentialPunches( enableFlag )
{
	if ( <enableFlag> && ~<FDVendor>~ == ~HR500~ && !dlgData(GetNumeric,ScanFromDatabase) && ~<gFilmMarkType>~ != ~Notch~ )
	{
		dlg( EnableControls,TRUE,SequentialPunchesCheckBox );
		dlg( EnableControls,TRUE,FrameToPunchCheckBox,FrameToPunchPaddingField );
	}
	else
	{
		if ( dlgData(GetNumeric,ScanFromDatabase) )
		{
			dlg( SetCheck,FALSE,FrameToPunchCheckBox );
			dlg( Save,FrameToPunchCheckBox );
			dlg( SetCheck,FALSE,SequentialPunchesCheckBox );
			dlg( Save,SequentialPunchesCheckBox );
		}
		dlg( EnableControls,FALSE,SequentialPunchesCheckBox );
		dlg( EnableControls,FALSE,FrameToPunchCheckBox,FrameToPunchPaddingField );
	}
}

VOID FocusComplete()
{
	Actions = ACTION Doc ( FocusProgressDialog "DoCancelButton();" );
	PerformActions( Actions );
	FocusNeeded = FALSE;
	if ( !Scanner( Scanning ) )
	{
		dlg( SetStatus,0,~Focus Complete~ );
		if ( !IsNull( ~<FinishScanCommand>~ ) )
		{
			<FinishScanCommand> ;
			return;
		}
		EnableScanningControls(TRUE);
		if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
		{
			SetTransportControlsStopped();
		}
	}
}


VOID FocusProgress( MsgInfo )
{
	if ( !IsNULL( ~<MsgInfo>~ ) )
	{
		if ( GenCon( tempMsgInfo,Is,~<MsgInfo>~,Temporary ) )
		{
			tempMsgInfo( GetValues, Text, TextMsg );
			//dlg( SetStatus,0,~<TextMsg>~ );
			Actions = ACTION Doc ( FocusProgressDialog "UpdateRangeText( ~<TextMsg>~ );" );
			PerformActions( Actions );

			Sleep(2500);
		}
	}
}


VOID SetupScannerParms()
{
	dlg( GetInput );

	dlgData( SetValues,NULLProfile,~<$App.Directory>\Scan\HR500\NULL.pf~,
		DRGBProfile,~<$App.Directory>\Scan\HR500\HR5v5.pf~,
		ReverseDRGBProfile,~<$App.Directory>\Scan\HR500\RevHR500Exp.pf~,
		SlopeLutFile,~<$App.Directory>\Scan\HR500\SlopeLut.txt~ );

}


VOID  ShowScannedImagesWindow()
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	if ( ~<Order>~ == ~~ )
	{ 
		Warning( Translate( ~You must select an order~ ) );
		return;
	}

	if ( ~<Roll>~ == ~~ )
	{ 
		Warning( Translate( ~You must select a roll~ ) );
		return;
	}

	Query = STR ( SELECT * From Images WHERE OrderID = '<Order>' And Roll = '<Roll>' Order By OrderID,Roll,Frame );

	Actions = ACTION Doc ( ImagesDoc OpenOnce ImagesDoc "Init( ~<Order>~,1,~<Query>~,0 );" );

	PerformActions( Actions );
}	


NUMERIC  ShowSbaImageDataWindow()
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	if ( ~<Order>~ == ~~ )
	{ 
		Warning( Translate( ~You must select an order~ ) );
		return FALSE;
	}

	// THE FOLLOWING HANDLES MULTIPLE ROLLS IN A BATCH

	Actions = ACTION DOC ( ~SBAImages~ OpenOnce SBAImagesDoc "Init( ~<Order>~,~<Roll>~,~~ );" );
	
	return PerformActions( Actions );

	return TRUE;
}


NUMERIC  ShowFilmtermDataWindow()
{
	dlg( GetInput,GetStrings,FilmType );

	Query = ~Select * From FilmtermData~;

	Actions = ACTION DOC ( ~FilmtermData~ OpenOnce FilmtermDataDoc "Init(~~,~<Query>~);" );
	
	return PerformActions( Actions );

	return TRUE;
}


NUMERIC CalculateMagnification( SkipZoom )
{
	Mag = ~<$Con.DlgData[Format]>~;
	OpticalZoom = ~<$Con.DlgData[OpticalZoom]>~;
	ScanSize = ~<$Con.DlgData[SpeedQuality]>~;

	Index = MagNames( IndexOf,~<Mag>~ );
	MinMagnification = atof(MinMagnifications(ValueOf,$Index));
	MaxMagnification = atof(MaxMagnifications(ValueOf,$Index));
	RealMag = (((<MaxMagnification> - <MinMagnification>) / (<SpeedQualityHighVal> - <SpeedQualityLowVal>)) * <ScanSize>) + <MinMagnification>;
	if ( !<SkipZoom> )
	{
		RealMag = $RealMag * ((100 + <OpticalZoom>) / 100);
	}
	RealMag = RoundToDigit( Pin( $RealMag,<MinHR500Mag>,<MaxHR500Mag> ),2 );

	return <RealMag>;
}

NUMERIC SetMagnification( MoveIt )
{
	if ( Defined( Scanner ) )
	{
		if ( Scanner( MagChanging ) )
		{	return FALSE;	}
	}

	if ( FindScanner(FALSE) )
	{
		DlgData( Get,FilmType,FilmType );
		DlgData( Get,SFSFile,SFSFile );

		FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;

		if ( ~<SFSFile>~ == ~~ )
		{
			SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
		}

		if ( !Scanner( LoadFilmTermsFromFile,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ ) )
		{
			ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
			HandleHR500Error( ~<ErrMsg>~ );
			return FALSE;
		}

		RealMag = CalculateMagnification( FALSE );
	
		Scanner( SetMagnification,$RealMag,$MoveIt,SizzleControl );

		return TRUE;
	}

	return FALSE;
}


NUMERIC AskIfFilmDriveDetensioned( msg )
{
	dlg( GetInput );
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~Halse~ || ~<FDVendor>~ == ~None~)
	{
		return TRUE;
	}

	theMsg = Translate( ~The film drive must be detensioned and the film unloaded before calibration.\n\nWould you like to detension the film drive now?~ );
	if ( Defined( msg ) )
	{
		if ( ~<msg>~ != ~~ )
		{
			theMsg = ~<msg>~;
		}
	}

	DriveDetensioned = FALSE;
	DoneAsking = FALSE;

	while ( !<DoneAsking> )
	{
		if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) && IsDriveTensioned( TRUE ) )
		{
			DriveDetensioned = FALSE;
			DoneAsking = FALSE;
		}
		else
		{
			DriveDetensioned = TRUE;
			DoneAsking = TRUE;
		}

		if ( !<DriveDetensioned> )
		{
			if ( MessageBox( ~<theMsg>~,YESNO ) == YES )
			{
				dlg( SetStrings,Tension,~~ );
				if ( !OnTensionChange( TRUE,FALSE,TRUE ) )
				{
					DoneAsking = TRUE;
				}
				else
				{
					continue; // Check to see if the film drive is detensioned, ask again if not
				}
			}
			else
			{
				DoneAsking = TRUE;
			}
		}
	}
	return <DriveDetensioned>;
}


NUMERIC AskToLoadFilmAndTensionDrive( msg, checkForJogSetup )
{
	dlg( GetInput );
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~Halse~ || ~<FDVendor>~ == ~None~ )
	{
		return TRUE;
	}

	theMsg = ~The film must be loaded into the film transport and the film transport tensioned.\n\nIs the film loaded?~;
	if ( Defined( msg ) )
	{
		if ( ~<msg>~ != ~~ )
		{
			theMsg = ~<msg>~;
		}
	}

	JogSetupCommand = ~~;
	if ( Defined( checkForJogSetup ) )
	{
		if ( <checkForJogSetup> )
		{
			if ( FunctionDefined( ~<FDVendor>_JogFilmSetup~ ) )
			{
				JogSetupCommand = STR ( <FDVendor>_JogFilmSetup() );
			}
		}
	}


	DriveTensioned = FALSE;
	DoneAsking = FALSE;

	while ( !<DoneAsking> )
	{
		if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) && IsDriveTensioned( TRUE ) )
		{
			DriveTensioned = TRUE;
			DoneAsking = TRUE;
		}
		else
		{
			DriveTensioned = FALSE;
			DoneAsking = FALSE;
		}

		if ( !<DriveTensioned> )
		{
			if ( DefinedAndNotNULL( JogSetupCommand ) )
			{
				// Error from this should be caught in following tension command
				results = <JogSetupCommand> ;
				if ( !<results> ) { return FALSE; }
			}
			dlg( SetStrings,Tension,~1~ );
			if ( !OnTensionChange( TRUE,FALSE,TRUE ) )
			{
				DoneAsking = TRUE;
			}
			else
			{
				continue; // Check to see if the film drive is detensioned, ask again if not
			}
		}
	}
	return <DriveTensioned>;
}


NUMERIC AskToLoadFilm( msg )
{
	dlg( GetInput );
	GetFilmDriveVendor();

	theMsg = Translate( ~The film must be loaded into the scanner.\n\nIs the film loaded?~ );
	if ( Defined( msg ) )
	{
		if ( ~<msg>~ != ~~ )
		{
			theMsg = Translate( ~The film must be loaded into the scanner.\n\n<msg>~ );
		}
	}

	if ( MessageBox( ~<theMsg>~,YESNO ) == YES )
	{
		return TRUE;
	}
	return FALSE;
}


VOID SetupSetMagButton()
{
	OnSetMagnificationComplete = STR ( CheckCalibrationAfterMag(TRUE,TRUE); );
}

NUMERIC OnSetMagButton()
{
	if ( !CheckZoom() )	{ return FALSE; }

	if ( !FindScanner(FALSE) )	{ return FALSE; }
	
	dlg( GetInput );

	CheckOverScanAdjustment( 0 );

	SetupScannerParms();

	if ( Scanner( MagChanging ) )
	{	return TRUE;	}

	EnableScanningControls( FALSE );
	EnableLoadControls( FALSE );
	SetMagnification( TRUE );
	SecondsWaiting = 0;
	Action = STR ( StillHr500MagMoving(); );
	QueueContentsAfter( Action,1000 );
	return TRUE;
}


VOID StillHr500MagMoving()
{
	if ( !Defined( Scanner ) )
	{
		if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) ) { SetTransportControlsStopped(); }
		EnableScanningControls( TRUE );
		return;
	}

	if ( Scanner( MagChanging ) )
	{
		EnableScanningControls( FALSE );
		EnableLoadControls( FALSE );
		dlg( SetStatus,0,~Setting magnification (<++SecondsWaiting> Secs)~ );
		PercentComplete = (<SecondsWaiting> / 130) * 100;
		dlg( SetString,~<SecondsWaiting>~,Progress );
		Action = STR ( StillHr500MagMoving(); );
		QueueContentsAfter( Action,1000 );
		return;
	}
	MagNeeded = FALSE;
	FocusNeeded = TRUE;
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	
	if ( !Scanner( GetCalibrationStatus,SizzleControl ) )
	{
		errMsg = Translate( ~Get Calibration Status failed.~ );
		HandleHR500Error( ~<errMsg>~ );
		EnableScanningControls( TRUE );
		EnableLoadControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }

		if ( !Defined( FilmDrive ) && <FilmDriveEnabled> )
		{ 
			dlg( SetStrings,FilmDriveEnabled,~0~ );
		}
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError( FALSE );	}

		return;
	}

	if ( !Scanner( SetMagSuccessful ) )
	{
		errMsg = Translate( ~Set magnification failed.~ );
		HandleHR500Error( ~<errMsg>~ );
		EnableScanningControls( TRUE );
		EnableLoadControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }

		if ( !Defined( FilmDrive ) && <FilmDriveEnabled> )
		{ 
			dlg( SetStrings,FilmDriveEnabled,~0~ );
		}
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError( FALSE );	}
	}
	else if ( !IsNull( ~<OnSetMagnificationComplete>~ ) && ~<OnSetMagnificationComplete>~ != ~~ )
	{
		UpdateScanSize(FALSE,FALSE,TRUE);

		retval = <OnSetMagnificationComplete>;
		if ( !<retval> )
		{
			ClearMagnificationHandlers();
			EnableScanningControls( TRUE );
			EnableLoadControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		}
		return;
	}
	EnableScanningControls( TRUE );
	EnableLoadControls( TRUE );
	if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
}

NUMERIC OnHR500CalibrateButton( updateFrame,TestScan,ClearPunchNumber )	// COMES HERE WHEN THE CALIBRATE BUTTON IS PUSHED
{
	if ( !Defined( Scanner ) )
	{
		if ( !FindScanner( FALSE ) )
		{
			return FALSE;
		}
	}

	if ( !CheckLampState() )
	{
		return FALSE;
	}

	ScanButtonDisabled = FALSE;

	Msg = ~The scanner needs to be calibrated.~;
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );

	if ( Defined( FilmDrive ) && <FilmDriveEnabled> && IsDriveTensioned(FALSE) &&  ~<FDVendor>~ != ~Halse~  )
	{
		Msg = Translate( ~<Msg>\n\nThe film drive must be detensioned and the film unloaded before calibration.\n\nWould you like to detension the film drive now?~ );

		if ( !AskIfFilmDriveDetensioned( ~<msg>~ ) )
		{
			ClearCalibrationHandlers();
			Warning( Translate( ~The film drive is not detensioned.\n\nCalibration aborted.~ ) );
			EnableScanningControls( TRUE );
			EnableLoadControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE;
		}
		Msg = ~Remove any film currently loaded and insert the calibration gate.\n~;
	}
	else
	{
		Msg = ~<Msg>\n\nTo calibrate now, remove any film currently loaded and insert the calibration gate.\n~;
	}

	Msg = Translate( ~<Msg>Please do not reload the film until calibration is complete.\n\nAre you ready to Calibrate?~ );
	if ( MessageBox( ~<Msg>~,YESNO ) == YES )
	{ 
		if ( SetMagnification( False ) )
		{
			if ( Scanner(MagChanged) || Scanner( MagChanging ) )
			{
				OnSetMagnificationComplete = STR ( CompleteCalibrationAfterMag( <updateFrame>,<TestScan>,<ClearPunchNumber>,FALSE ); );
				if ( !OnSetMagButton() )
				{
					ClearMagnificationHandlers();
					EnableScanningControls( TRUE );
					EnableLoadControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					Warning( Translate( ~Set magnification failed.~ ) );
					return FALSE;
				}
			}
			else
			{
				CompleteCalibrationAfterMag(<updateFrame>,<TestScan>,<ClearPunchNumber>,FALSE);
			}

			return TRUE;
		}
	}
	else
	{
		ClearCalibrationHandlers();
		EnableScanningControls( TRUE );
		EnableLoadControls( TRUE );
	}
	return FALSE;
}

NUMERIC CompleteCalibrationAfterMag( updateFrame,TestScan,ClearPunchNumber,AskBeforeCal )
{
	ClearMagnificationHandlers();
	dlg( GetInput );
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	GetFilmDriveVendor();
	
	if ( ~<FDVendor>~ != ~Halse~ && <FilmDriveEnabled> && DefinedAndNotNULL( ClearPunchNumber ) )
	{
		if ( <ClearPunchNumber> )
		{
			if ( <FilmDriveEnabled> && !DlgData( GetNumeric,ScanFromDataBase ) )
			{
				SetCurrentPunchNumber( ~~ );
			}
		}
	}

	if ( <updateFrame> )
	{
		UpdateFrameField();
	}

	if ( <AskBeforeCal> )
	{
		Msg = ~The scanner needs to be calibrated.~;

		if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled) && IsDriveTensioned(FALSE)  && ~<FDVendor>~ != ~Halse~ )
		{
			Msg = Translate( ~<Msg>\n\nThe film drive must be detensioned and the film unloaded before calibration.\n\nWould you like to detension the film drive now?~ );

			if ( !AskIfFilmDriveDetensioned( ~<msg>~ ) )
			{
				ClearCalibrationHandlers();
				Warning( Translate( ~The film drive is not detensioned.\n\nCalibration aborted.~ ) );
				EnableScanningControls( TRUE );
				EnableLoadControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;
			}
			Msg = ~Remove any film currently loaded and insert the calibration gate.\n~;
		}
		else
		{
			Msg = ~<Msg>\n\nTo calibrate now, remove any film currently loaded and insert the calibration gate.\n~;
		}

		Msg = Translate( ~<Msg>Please do not reload the film until calibration is complete.\n\nAre you ready to Calibrate?~ );
		if ( MessageBox( ~<Msg>~,YESNO ) == NO )
		{ 
			ClearCalibrationHandlers();
			EnableScanningControls( TRUE );
			EnableLoadControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE;
		}
	}

	if ( !FindScanner(FALSE) )	{ return FALSE; }

	if ( !UpdateLampOnTime( FALSE,FALSE ) )
	{
		ClearCalibrationHandlers();
		EnableScanningControls( TRUE );
		EnableLoadControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	DlgData( Get,FilmType,FilmType );
	DlgData( Get,SFSFile,SFSFile );
	if ( ~<SFSFile>~ == ~~ )
	{
		SFSFile = ~<$App.ShareDirectory>\Scan\HR500\kcdfs.satdef~;
	}
	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
	result = Scanner( IsColorFilterPositionCorrect,~<FilmTermsFile>~,~<FilmType>~,~<SFSFile>~ );
	if ( <result> == -1 )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		HandleHR500Error( ~<ErrMsg>~ );
		EnableScanningControls( TRUE );
		EnableLoadControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}
	if ( <result> == FALSE )
	{
		EnableScanningControls( TRUE );
		EnableLoadControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return Warning( Translate( ~The color filter is not in the correct position for this film type.\nMake sure the filter is in the correct position and then\nselect OK to continue.~ ) );
	}

	EnableScanningControls( FALSE );
	EnableLoadControls( FALSE );
	Scanner( CalibrateAsync, SizzleControl );
	SecondsWaiting = 0;
	Action = STR ( StillCalibrating(<TestScan>); );
	QueueContentsAfter( Action,1000 );

	LastFilmType = ~<$con.DlgData[FilmType]>~;
	return TRUE;
}


VOID StillCalibrating( TestScan )		// KEEP THE USER UPDATED WHILE THE CALIBRATION IS IN PROCESS
{
	if ( Defined( dlg ) )
	{
		if (  Scanner( MagChanging ) || Scanner( Calibrating ) )
		{
			EnableScanningControls( FALSE );
			EnableLoadControls( FALSE );

			dlg( SetStatus,0,~Still Calibrating (<++SecondsWaiting> Secs)~ );
			dlg( SetString,~<SecondsWaiting>~,Progress );

			PercentComplete = (<SecondsWaiting> / 130) * 100;
			dlg( SetString,~<SecondsWaiting>~,Progress );

			Action = STR ( StillCalibrating( <TestScan> ); );
			QueueContentsAfter( Action,1000 );
		}
		else
		{
			if ( !Scanner( GetCalibrationStatus,SizzleControl ) )
			{
				AutoScanAfterCal = FALSE;
				ClearCalibrationHandlers();
				dlg( SetStatus,0,~Calibration failed~ );

				ErrMsg = Translate( ~Get Calibration Status failed.~ );
				HandleHR500Error( ~<ErrMsg>~ );

				UpdateScanSize(FALSE,FALSE,FALSE);
				EnableScanningControls(TRUE);
				EnableLoadControls(TRUE);
				if ( DlgData( GetNumeric,ScanFromDatabase ) )
				{	ResetNextFrameAfterError( FALSE );	}
				
				return;
			}

			dlg( SetString,~100~,Progress,0 );
			dlg( SetStatus,0,~Calibration Complete (<SecondsWaiting> Secs)~ );

			FocusNeeded = TRUE;  // Always note focus needed when calibration is attempted

			if (Scanner( CalibrationSuccessful ))
			{
				AdjustFullFrameWidth();
				ResetTimer = FALSE;
				if ( CheckExposureTime( ResetTimer ) )
				{
					EnableScanningControls(TRUE);
					EnableLoadControls( TRUE );
					if ( <ResetTimer> )
					{
						ResetLampTimer();
					}
					if ( !CompleteCalibrationAfterMag( FALSE,<TestScan>,FALSE,TRUE ) )
					{
						if ( DlgData( GetNumeric,ScanFromDatabase ) )
						{	ResetNextFrameAfterError( FALSE );	}
					}
					return;
				}

				dlg( GetInput );

				GetFilmDriveVendor();
				FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
				if ( <AutoScanAfterCal> )
				{
					GetFilmDriveVendor();
					AutoScanAfterCal = FALSE;
					FrameInserted = FALSE;
					Tensioned = IsDriveTensioned( FALSE );

					if ( Defined( FilmDrive ) && <FilmDriveEnabled> && !<Tensioned> && ~<FDVendor>~ == ~HR500~ )
					{
						if ( !AskToLoadFilmAndTensionDrive(~~, TRUE) )
						{
							ClearCalibrationHandlers();
							dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
							EnableScanningControls( TRUE );
							EnableLoadControls( TRUE );
							if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
							Warning( Translate( ~Scanning cancelled.~ ) );
							if ( DlgData( GetNumeric,ScanFromDatabase ) )
							{	ResetNextFrameAfterError( FALSE );	}
							return;
						}
					}
					else if ( Defined( FilmDrive ) && <FilmDriveEnabled> && ( ~<FDVendor>~ == ~Halse~ ) )
					{
						if ( !AskToLoadFilm( ~~ ) )
						{
							dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
							ClearCalibrationHandlers();
							EnableScanningControls( TRUE );
							SetTransportControlsStopped();
							Warning( Translate( ~Scanning cancelled.~ ) );
							if ( DlgData( GetNumeric,ScanFromDatabase ) )
							{	ResetNextFrameAfterError( FALSE );	}
							return;
						}
					}
					Tensioned = IsDriveTensioned( FALSE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> && <Tensioned> && ~<FDVendor>~ != ~Halse~ )
					{
						if (~<gFilmMarkType>~ != ~Notch~ )
						{
							DlgData( Get,GotoPunchNumber,GotoPunch );

							EnableScanningControls( FALSE );
							SetTransportControlsRunning();
							IgnoreControlCommands = TRUE;
							dlg( SetStatus,0,Translate( ~Jogging film to nearest punch...~ ) );
							if ( !StartJogFilmCommand( ~<GotoPunch>~ ) )
							{
								EnableScanningControls( TRUE );
								EnableLoadCotnrols( TRUE );
								SetTransportControlsStopped();
								Msg = ~Jog film command failed.\nPlease manually position file to the next punch.~;
								Warning( Translate( ~<Msg>~ ) );
								return;
							}
						}
						else
						{
							EnableScanningControls( TRUE );
							EnableLoadControls( TRUE );
							SetTransportControlsStopped();
							IgnoreControlCommands = FALSE;
							Msg = ~Please manually position the film to the correct frame.~;
							Warning( Translate( ~<Msg>~ ) );
						}
						return;
					}
					retval = <OnCalibrationComplete>;
					if ( !<retval> )
					{
						EnableScanningControls( TRUE );
						EnableLoadControls( TRUE );
						if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
						return;
					}
				}
				else
				{
					EnableScanningControls(TRUE);
					EnableLoadControls( TRUE );
					if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> )
					{
						if ( !OnFocusButton( FALSE,Translate(~It is recommended that you do a focus after changing\nthe magnification or calibrating the scanner.\n\nDo you want to focus the scanner now?  If so, insert the film and select Yes when ready.~)) )
						{
							ClearCalibrationHandlers();
							EnableScanningControls(TRUE);
							EnableLoadControls( TRUE );
							//Warning( Translate( ~Focus did not complete.~ ) );
							return;
						}
					}
				}
			}
			else
			{
				AutoScanAfterCal = FALSE;
				ClearCalibrationHandlers();
				dlg( SetStatus,0,~Calibration failed~ );

				ErrMsg = Translate( ~Scanner calibration failed.~ );
				HandleHR500Error( ~<ErrMsg>~ );

				UpdateScanSize(FALSE,FALSE,FALSE);
				EnableScanningControls(TRUE);
				EnableLoadControls(TRUE);
				if ( DlgData( GetNumeric,ScanFromDatabase ) )
				{	ResetNextFrameAfterError( FALSE );	}
			}
		}
	}
}


VOID AdjustFullFrameWidth()
{
	Mag = ~<$Con.DlgData[Format]>~;

	Index = MagNames( IndexOf,~<Mag>~ );
 	RealMag = CalculateMagnification( TRUE );

	LastCalMag = <RealMag>;

	PixelSize = 0.012;
	LastValidPixel = SizzleControl(GetNumeric,LastValidPixel);
	FirstValidPixel = SizzleControl(GetNumeric,FirstValidPixel);
	MaxPixels = <LastValidPixel> - <FirstValidPixel>;

	MaxFullFrameWidth = ( <MaxPixels> * <PixelSize> ) / <RealMag>;
	DefaultFullFrameWidth = atof(FullFrameWidths(ValueOf,$Index));

	if ( DlgData( GetNumeric, IgnorePredefinedFrameWidths ) )
	{
		IgnorePredefinedFrameWidths = TRUE;
	}
	else
	{
		if ( <MaxFullFrameWidth> < <DefaultFullFrameWidth> )
		{
			IgnorePredefinedFrameWidths = TRUE;
			Warning( Translate(~The maximum scan width was reduced due to width limits determined\nduring calibration.\n\nIf you haven't calibrated with the largest gate, you can do so to\nincrease the maximum scan size.~) );
		}
		else
		{
			IgnorePredefinedFrameWidths = FALSE;
		}
	}
}


VOID JogFilmComplete( CommandStatus )
{
	IgnoreControlCommands = FALSE;
	ClearJogFilmCommand();
	if ( !<CommandStatus> )
	{
		dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
		EnableScanningControls( TRUE );
		SetTransportControlsStopped();
		Warning( Translate( ~Unable to jog film to nearest punch.  Scanning cancelled.~ ) );
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError( FALSE );	}
		return;
	}

	retval = <OnCalibrationComplete>;
	if ( !<retval> )
	{
		EnableScanningControls( TRUE );
		SetTransportControlsStopped();
		return;
	}
	return;
}


NUMERIC CheckExposureTime( &ResetTimer )
{
	RealMag = CalculateMagnification( FALSE );

	CalExposureTime = SizzleControl( GetNumeric, ExposureTime );
	MaxExposureTime = ( 0.0024 * ( 1.0 + <RealMag> ) * ( 1.0 + <RealMag> ) ) / 4.0;
	if ( <CalExposureTime> >= <MaxExposureTime> )
	{
		Msg = Translate(~Calibration has determined that the current exposure time for this scanner exceeds\nthe expected exposure time.\n\nThis usually indicates that the lamp in the scanner needs to be replaced or that the\nfilm was loaded in the scanner during calibration.\n~);
		Warning( Translate( ~<Msg>~ ) );
		Msg = Translate(~Replace the lamp and then select the Reset and Recalibrate button to reset the lamp timer and recalibrate.\n\nOtherwise, remove the film and insert the calibration gate; then select the Recalibrate Only\nbutton or select the Cancel button to continue.~);
		ResetTimer = FALSE;
		GenCon( MbInfo,New,DDCustomMessageBox );
		MbInfo( SetValues,Title,Translate(~HR500 Recalibrate~),Message,~<Msg>~,
					Button1,Translate(~&Reset and Recalibrate~),Button2,Translate(~Recalibrate &Only~),Button3,Translate(~&Cancel~),
					SetWindowPos,1,X,-1,Y,-1,Width,475,Height,215 ) ;
		result = CustomMessageBox(MbInfo);
		button = MbInfo(GetNumeric, ButtonPressed);
		if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
		{
			return FALSE;
		}
		else if ( <button> == 1 )
		{
			ResetTimer = TRUE;
		}
		return TRUE;
	}
	return FALSE;
}


VOID ResetLampTimer()
{
	if ( FindScanner(FALSE) )
	{
		if ( Scanner( ResetLampTimer ) )
		{
			dlg( SetString,Translate(~0 hours on this lamp~),LampHours );
			dlg( SetStatus,0,Translate(~Lamp timer reset.~) );
		}
		else
		{
			dlg( SetStatus,0,Translate(~Lamp timer reset failed.~) );
		}
	}
}


VOID ToggleLamp()
{
	if ( !Defined( Scanner ) )
	{
		if ( !FindScanner( FALSE ) )
		{
			return;
		}
	}

	if ( <CurrentLampState> )
	{
		Msg = Translate( ~When the lamp is turned off, all stored calibrations will be lost.\n\nDo you want to turn the lamp off?~ );
		result = MessageBox( ~<Msg>~,YESNOCANCEL );
		if ( <result> != YES )
		{
			return;
		}
	}
	else
	{
		Warning( Translate( ~To ensure color consistency, please wait 15 minutes before calibrating and scanning.~ ) );
	}

	NewLampState = !<CurrentLampState>;

	if ( Scanner( ToggleLamp, <NewLampState> ) )
	{
		CurrentLampState = <NewLampState>;
		if ( <CurrentLampState> == TRUE)
		{
			dlg( SetString,Translate(~Lamp is currently on~),LampState );
			dlg( SetStatus,0,Translate(~Lamp is on~) );
		}
		else
		{
			dlg( SetString,Translate(~Lamp is currently off~),LampState );
			dlg( SetStatus,0,Translate(~Lamp is off~) );
		}
	}
	else
	{
		if ( <CurrentLampState> == TRUE)
		{
			dlg( SetString,Translate(~Lamp is currently on~),LampState );
		}
		else
		{
			dlg( SetString,Translate(~Lamp is currently off~),LampState );
		}

		dlg( SetStatus,0,Translate(~Lamp toggle failed.~) );
	}
}


NUMERIC UpdateLampOnTime( forceUpdate, logIt )
{
	update = <forceUpdate>;

	if ( Defined( Scanner ) )
	{
		currentTime = Ticks();
		minutesSinceLastUpdate = ( ( <currentTime> - <LastUpdateTime> ) / 1000 ) / 60;
		if ( <minutesSinceLastUpdate> >= 10 )
		{
			update = TRUE;
		}

		if ( <update> )
		{
			LastUpdateTime = <currentTime>;

			if ( Scanner( GetUsageInfo,LampOnTime,ScanCount ) )
			{
				RoundedLampOnTime = ntoa( <LampOnTime>,~%.01f~ );
				if ( <RoundedLampOnTime> == 1)
				{
					LampOnTimeString = Translate(~1 hour on this lamp~);
				}
				else
				{
					LampOnTimeString = ~<RoundedLampOnTime>~ + Translate(~ hours on this lamp~);
				}
				dlg( SetString,~<LampOnTimeString>~,LampHours );

				if ( <logIt> )
				{
					Log( Session,~HR500 Scanner Usage Info:  Lamp Hours = <LampOnTime>, Scan Count = <ScanCount>~ );
				}
			}
			else
			{
				ErrMsg = Translate( ~Could not get lamp usage time from scanner.~ );
				HandleHR500Error( ~<ErrMsg>~ );
				return FALSE;
			}
		}
	}
	return TRUE;
}


VOID UpdateLampState( )
{
	if ( Defined( Scanner ) )
	{
		if ( Scanner( GetLampState,TheLampState ) )
		{
			CurrentLampState = <TheLampState>;
			if ( <CurrentLampState> == TRUE)
			{
				dlg( SetString,Translate(~Lamp is currently on~),LampState );
			}
			else
			{
				dlg( SetString,Translate(~Lamp is currently off~),LampState );
			}
		}
	}
}


NUMERIC CheckLampState()
{
	UpdateLampState( );

	if ( !<CurrentLampState> )
	{
		Msg = ~The scanner lamp is either turned off or burned out.\nPlease turn the lamp on or replace the bulb before performing this operation.~;
		Warning( Translate( ~<Msg>~ ) );
		return FALSE;
	}
	return TRUE;
}

VOID OnTestScan()
{
	overScan = SizzleControl( GetNumeric,OverScan );
	if ( !<overScan> )
	{
		dlg( SetStrings,XPOS,50,YPOS,50,ScanWidth,100,ScanLength,100 );
	}
	dlg( SetCheck,FALSE,AutoScanCheckBox );
	dlg( Save,AutoScanCheckBox );		
	
	OnScanButton( 0,TRUE );
}


NUMERIC OnAdjustScanArea( calledFromRefresh )
{
	if ( <calledFromRefresh> )
	{
		if ( ImageCorrections( GetCrop,~<LastPath>~,cX,cY,cW,cL ) )
		{
			if ( !<LastScanIsTestScan> )
			{
				return Warning( Translate( ~The scan area can only be set on a test scan.~ ) );
			}

			ScanX = ntoa( Pin( <cX>,2,98 ),~%f~ );
			ScanY = ntoa( Pin( <cY>,2,98 ),~%f~ );
			ScanW = ntoa( Pin( <cW>,0,100 ),~%f~ );
			ScanL = ntoa( Pin( <cL>,0,100 ),~%f~ );

			DlgData( SetValues,XPOS,<ScanX>,YPOS,<ScanY>,ScanWidth,<ScanW>,ScanLength,<ScanL> );
			dlg( SetStrings,XPOS,<ScanX>,YPOS,<ScanY>,ScanWidth,<ScanW>,ScanLength,<ScanL> );
		}
	}
	else
	{
		dlg( GetInput );

		DlgData( GetValues,CropX,cX,CropY,cY,CropWidth,cW,CropLength,cL );
		ScanX = ntoa( Pin( <cX>,2,98 ),~%f~ );
		ScanY = ntoa( Pin( <cY>,2,98 ),~%f~ );
		ScanW = ntoa( Pin( <cW>,0,100 ),~%f~ );
		ScanL = ntoa( Pin( <cL>,0,100 ),~%f~ );

		DlgData( SetValues,XPOS,<ScanX>,YPOS,<ScanY>,ScanWidth,<ScanW>,ScanLength,<ScanL> );
		DlgData( SetValues,CropX,50,CropY,50,CropWidth,100,CropLength,100 );
		
		dlg( SetStrings,XPOS,<ScanX>,YPOS,<ScanY>,ScanWidth,<ScanW>,ScanLength,<ScanL> );
		dlg( SetStrings,CropX,50,CropY,50,CropWidth,100,CropLength,100 );
	}

	return UpdateScanSize(FALSE,FALSE,TRUE);
}


VOID OnAllScanArea()
{
	DlgData( SetValues,XPOS,50,YPOS,50,ScanWidth,100,ScanLength,100 );
	dlg( SetStrings,XPOS,50,YPOS,50,ScanWidth,100,ScanLength,100 );

	UpdateScanSize(FALSE,FALSE,FALSE);
}



VOID OnAllOverScanArea()
{
	DlgData( SetValues,OverScanXPOS,50,OverScanYPOS,50,OverScanWidth,100,OverScanLength,100 );
	dlg( SetStrings,OverScanXPOS,50,OverScanYPOS,50,OverScanWidth,100,OverScanLength,100 );
	SizzleControl( SetValues,OverScanXPos,50,OverScanYPos,50,OverScanWidth,100,OverScanHeight,100 );

	UpdateScanSize(FALSE,FALSE,FALSE);
}



NUMERIC OnAdjustOverscanArea( calledFromRefresh )
{
	ScanX = 0.;
	ScanY = 0.;
	ScanW = 0.;
	ScanL = 0.;

	if ( <calledFromRefresh> )
	{
		if ( ImageCorrections( GetCrop,~<LastPath>~,cX,cY,cW,cL ) )
		{
			if ( !<LastScanIsTestScan> )
			{
				return Warning( Translate( ~The Overscan area can only be set on a test scan.~ ) );
			}

			ScanX = ntoa( Pin( <cX>,2,98 ),~%f~ );
			ScanY = ntoa( Pin( <cY>,2,98 ),~%f~ );
			ScanW = ntoa( Pin( <cW>,0,100 ),~%f~ );
			ScanL = ntoa( Pin( <cL>,0,100 ),~%f~ );

			DlgData( SetValues,OverScanXPos,<ScanX>,OverScanYPos,<ScanY>,OverScanWidth,<ScanW>,OverScanLength,<ScanL> );
			dlg( SetStrings,OverScanXPos,<ScanX>,OverScanYPos,<ScanY>,OverScanWidth,<ScanW>,OverScanLength,<ScanL> );
		}
	}
	else
	{
		dlg( GetInput );

		DlgData( GetValues,CropX,cX,CropY,cY,CropWidth,cW,CropLength,cL );
		ScanX = ntoa( Pin( <cX>,2,98 ),~%f~ );
		ScanY = ntoa( Pin( <cY>,2,98 ),~%f~ );
		ScanW = ntoa( Pin( <cW>,0,100 ),~%f~ );
		ScanL = ntoa( Pin( <cL>,0,100 ),~%f~ );

		DlgData( SetValues,OverScanXPos,<ScanX>,OverScanYPos,<ScanY>,OverScanWidth,<ScanW>,OverScanLength,<ScanL> );
		dlg( SetStrings,OverScanXPos,<ScanX>,OverScanYPos,<ScanY>,OverScanWidth,<ScanW>,OverScanLength,<ScanL> );

		DlgData( SetValues,CropX,50,CropY,50,CropWidth,100,CropLength,100 );
		dlg( SetStrings,CropX,50,CropY,50,CropWidth,100,CropLength,100 );
	}

	SizzleControl( Set,OverScanYPos,<ScanY>);
	SizzleControl( Set,OverScanHeight,<ScanL>);
	SizzleControl( Set,OverScanXPos,<ScanX>);
	SizzleControl( Set,OverScanWidth,<ScanW>);

	return UpdateScanSize(FALSE,FALSE,TRUE);
}

VOID ChangeEnableSetOverscanArea( value )
{
	if ( <gSetOverScanEnabled> == <value> )
	{
		return;
	}
	if ( <value> == FALSE )
	{
		OnAllOverscanArea();
	}

	dlg( EnableControls,<value>,OSMiddleXField,OSMiddleYField,OverScanWidthField,OverScanHeightField,
								AllOverScanAreaButton );
	gSetOverScanEnabled = <value>;
}


VOID CheckOverScanAdjustment( OpticalZoom )
{
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~Halse~ || ~<FDVendor>~ == ~HR500AFD~ )
	{
		ChangeEnableSetOverscanArea( TRUE );
	}
	else
	{
		ChangeEnableSetOverscanArea( FALSE );
	}
}


VOID OnLogActivity()
{
	dlg( GetInput );
	DlgData( GetValues,LogActivity,LogActivity );
	GetFilmDriveVendor();

	if ( FunctionDefined( <FDVendor>_SetLogSession ) )
	{
		<FDVendor>_SetLogSession( <LogActivity> );
	}
}


VOID RecursiveDirectoryDelete( path,search,&count )
{
	count = 0;

	MoreFiles = findfile( aDirectoryEntry,Find,~<path>\<search>~ );

	while ( $Morefiles )
	{
		Morefiles = aDirectoryEntry( Next );

		aDirectoryEntry( Get,Path,aPath );
			
		if ( aDirectoryEntry( Dots ) )
			continue;
			
		if ( aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		{	
			RecursiveDirectoryDelete( ~<aPath>~,~<search>~,count );
			
			Directory( Remove,~<aPath>~ );
			continue;
		}

		if ( !Files( Delete,~<aPath>~ ) )
		{
			GetLastError( ErrorString,msg );
			MessageBox( ~<msg>~ );
			return;
		}
		++count;
	}
}


NUMERIC UpdateFilmTypesList()
{
	StringList( List,New,NoDuplicateValues,InAlphaOrder );

	dlg( GetInput );

	WhichScanner = ~<$con.DlgData[ScannerType]>~;

	if ( ~<WhichScanner>~ == ~~ ) 
	{ 
		return Warning( Translate( ~No scanner has been selected~ ) );
	}

	MoreFiles = findfile( aDirectoryEntry,Find,~<$App.ShareDirectory>\Scan\<WhichScanner>\FilmTerms\*.flt~ );

	while ( $Morefiles )
	{
		Morefiles = aDirectoryEntry( Next );
				
		if ( !aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		{
			aDirectoryEntry( Get,Path,aPath );
			List( AddString,~<$Str.$aPath.FileName.WithoutExt>~ );
		}
	}

	dlg( SetControlFromStringList,FilmTypesComboBox,List,Selection );
	dlg( SelectString,FilmTypesComboBox,~<$con.DlgData[FilmType]>~ );

	return TRUE;
}


NUMERIC UpdateRollsCombo(selectFirst)
{
	dlg( GetInput,GetStrings,OrderID,Order );

	ImagesQuery = ~Select Distinct Roll From Images Where OrderID = '<OrderID>'~;
	RollsQuery = ~Select Distinct Roll From Rolls Where OrderID = '<OrderID>'~;

	Query = ~<ImagesQuery> Union <RollsQuery> Order By Roll~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Failed to query the Rolls table.\n\n<Query>\n\n<theErr>~ ) ); 
	}

	List( MakeStringList,RollsList,Roll );
	
	if (<selectFirst>)
	{
		return dlg( SetControlFromStringList,RollField,RollsList,Selection );
	}
	else
	{
		return dlg( SetControlFromStringList,RollField,RollsList,NoSelection );
	}
}

NUMERIC UpdateFrameField()
{
	dlg( GetInput,GetStrings,Roll,Roll,Order,Order );

	if ( ~<Roll>~ != ~~ )
	{
		ScanFromDataBase = ~<$con.dlgData[ScanFromDataBase]>~;
		FilmDriveEnabled = ~<$con.dlgData[FilmDriveEnabled]>~;

		GetFilmDriveVendor();

		SortDirection = ( <FilmDriveEnabled> && <FilmDirection> == 1 && !<IgnoreFilmDirection> ) ? ~DESC~ : ~~;
		SortOrder = ~OrderID,Roll,Frame <SortDirection>~;

		if ( <FilmDriveEnabled> && <ScanFromDataBase> && ( ~<FDVendor>~ != ~Halse~ ) )
		{
			SortOrder = ~Punch <SortDirection>~;
		}

		Query = ~Select Frame, ScanSetup, FilmType From Images Where OrderID = '<Order>' AND Roll = '<Roll>' AND (Scan = 1) Order By <SortOrder>~;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query the Images table.\n\n<Query>\n\n<theErr>~ ) ); 
			return;
		}

		if ( List( GetFirst,FrameRecord ) )
		{
			CurrentScanFrame = ~<$pcon.FrameRecord[Frame]>~;
			dlg( SetStrings,Frame,~<$pcon.FrameRecord[Frame]>~ );
			ImageScanSetup = ~<$pcon.FrameRecord[ScanSetup]>~;
			ImageFilmType = ~<$pcon.FrameRecord[FilmType]>~;
		}
	}
	
	return TRUE;
}


VOID GetProfiles( Type,Control )
{
	Query = ~Select * From Profiles Where Type = '<Type>' And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.  <theErr>~ ) ); 
		return;
	}

	ForgetGlobal( <Type>Profiles );

	ProfilesList( MakeStringList,<Type>Profiles,Name );

	<Type>Profiles( AddString,~None~ );

	Global( <Type>Profiles );
}


VOID RefreshScannerProfilesComboBox(wantSelection)
{
	Query = ~Select * From Profiles Where Type = 'Input' And Path  IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ProfilesList( MakeStringList,ScannerProfiles,Name );

	dlg( SetControlFromStringList,ScannerProfileComboBox,ScannerProfiles,<wantSelection> ? ~Selection~ : ~NoSelection~ );

	dlg( SelectString,ScannerProfileComboBox,~<$con.dlgData[ICCProfile]>~ );
}


NUMERIC NewExposureProfile()
{
	dlg( GetInput );

	ProfileName = ~<$con.dlgData[DRGBProfileName]>~;

	if ( IsNULL( ~<ProfileName>~ ) )		{ return dlgData( SetValues,DRGBProfile,~~ ); }

	if ( !ADO( dBase,Connect,GetValuesFor,~Select Path From Profiles Where Name = '<ProfileName>'~,Path ) )
	{ 
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Failed to find the profile <ProfileName>.\n\n<Query>\n\n<theErr>~ ) ); 
	}
	
	return dlgData( SetValues,DRGBProfile,~<Path>~ );
}


VOID RefreshExposureProfilesComboBox(wantSelection)
{
	Query = ~Select * From Profiles Where Type = 'Exposure' And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ProfilesList( MakeStringList,ExposureProfiles,Name );

	if (<wantSelection>)
	{
		dlg( SetControlFromStringList,ExposureProfileComboBox,ExposureProfiles,~Selection~);
	}
	else
	{
		dlg( SetControlFromStringList,ExposureProfileComboBox,ExposureProfiles,~NoSelection~);
	}
}


VOID RefreshOuputProfilesComboBox(wantSelection)
{
	Query = ~Select * From Profiles Where (Type = 'Output') Or (Type Like 'W%') And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ProfilesList( MakeStringList,OutputProfiles,Name );

	dlg( SetControlFromStringList,OutputProfileComboBox,OutputProfiles,<wantSelection> ? ~Selection~ : ~NoSelection~ );
}



VOID OnDocumentRefresh( settingScanArea )
{
	if ( <settingScanArea> )
	{
		OnAdjustScanArea( <settingScanArea> );
	}
	else
	{
		if ( ImageCorrections( GetCrop,~<LastPath>~,cX,cY,cW,cL ) )
		{
			DlgData( SetValues,CropX,<cX>,CropY,<cY>,CropWidth,<cW>,CropLength,<cL> );
			dlg( SetStrings,CropX,<cX>,CropY,<cY>,CropWidth,<cW>,CropLength,<cL> );
		}
	}
}

// TRANSPORT CONTROL METHODS

VOID EnableTransportControls( EnableFlag )
{
	dlg( EnableControls,<EnableFlag>,FastForwardButton,FastRewindButton,StopButton,
		 NextFrameButton,
		 CurrentPunchNumberTextBox,XPositionSlider,IgnoreXAdjustmentsCheckBox,
		 DisableFilmDriveCheckBox,VendorXOffsetZeroButton,
		 XPositionSliderIMinusButton,XPositionSliderMinusButton);

	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~Halse~ )
	{
		dlg( EnableControls,<EnableFlag>,EdgeSensitivityTextBox,
										 MinGapTextBox,AutoSkipBlankFrameBox,FixedAdvanceTextBox,
										 IgnoreFdaErrorsCheckBox,PrevFrameButton,
	  								     GoTo_Button,GotoPunchNumberTextBox,
										 XPositionSliderPlusButton,XPositionSliderIPlusButton );

		if ( RunningVersion( 5.0 ) && !RunningVersion( 5.1 ) )
		{
			dlg( EnableControls,<EnableFlag>,OverrideFrameButton,OverrideFrameTextBox );
		}

		dlg( EnableControls,FALSE,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox );
		//dlg( EnableControls,TRUE,DisableFrameDetectCheckbox );

		if ( DlgData(GetNumeric,AutoScan) || DlgData( GetNumeric, IgnoreFdaErrors) )
		{
			dlg( SetCheck, FALSE, AdjustFramePositionBox );
			OnAdjustFramePosition();
			dlg( EnableControls,FALSE,AdjustFramePositionBox );
		}
		else
		{
			dlg( EnableControls,<EnableFlag>,AdjustFramePositionBox );
		}
		if ( DlgData( GetNumeric,IgnoreFdaErrors) || DlgData( GetNumeric,DisableFrameDetect) )
		{
			dlg( SetCheck, FALSE, AutoSkipBlankFrameBox );
			OnAutoSkipBlankFrame();
			dlg( EnableControls,FALSE,AutoSkipBlankFrameBox );
		}
		else
		{
			dlg( EnableControls,<EnableFlag>,AutoSkipBlankFrameBox );
		}
		if ( DlgData( GetNumeric,DisableFrameDetect ) )
		{
			dlg( EnableControls,FALSE,IgnoreFdaErrorsCheckBox );
			dlg( EnableControls,FALSE,FastForwardButton );
		}
	}
	else if ( ~<FDVendor>~ == ~HR500~ )
	{
		dlg( EnableControls,<EnableFlag>,GoTo_Button,GotoPunchNumberTextBox,
										 XPositionSliderPlusButton,XPositionSliderIPlusButton );

		if ( !DlgData( GetNumeric,Tension ) )
		{
			dlg( EnableControls,FALSE,UnloadRevButton,UnloadFwdButton );
		}
		else
		{
			dlg( EnableControls,<EnableFlag>,UnloadRevButton,UnloadFwdButton,PrevFrameButton );
		}

		dlg( GetStrings,CurrentPunchPosition,CurrentPunchPosition );
		if ( ~<CurrentPunchPosition>~ != ~~ && IsNumeric( ~<CurrentPunchPosition>~ ) )
		{
			dlg( EnableControls,FALSE,LoadRevButton,LoadFwdButton );
		}
		else
		{
			dlg( EnableControls,<EnableFlag>,LoadRevButton,LoadFwdButton );
		}
	}
	else if ( ~<FDVendor>~ == ~HR500AFD~ )
	{
		if ( !DlgData( GetNumeric,Tension ) )
		{
			dlg( EnableControls,FALSE,UnloadRevButton,UnloadFwdButton );
		}
		else
		{
			dlg( EnableControls,<EnableFlag>,UnloadRevButton,UnloadFwdButton );
		}

		dlg( EnableControls,FALSE,FixedAdvanceTextBox,IgnoreFdaErrorsCheckBox );
		dlg( EnableControls,FALSE,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox,PrevFrameButton,
								  GoTo_Button,GotoPunchNumberTextBox,MinGapTextBox,AutoSkipBlankFrameBox,
								  XPositionSliderIMinusButton,XPositionSliderMinusButton );

		if ( DlgData(GetNumeric,AutoScan) || DlgData( GetNumeric, IgnoreFdaErrors) )
		{
			dlg( SetCheck, FALSE, AdjustFramePositionBox );
			OnAdjustFramePosition();
			dlg( EnableControls,FALSE,AdjustFramePositionBox );
		}
		else
		{
			dlg( EnableControls,<EnableFlag>,AdjustFramePositionBox );
		}

		if ( DlgData( GetNumeric,DisableFrameDetect ) )
		{
			dlg( EnableControls,FALSE,IgnoreFdaErrorsCheckBox );
			dlg( EnableControls,FALSE,FastForwardButton );
		}
		dlg( GetStrings,CurrentPunchPosition,CurrentPunchPosition );
		if ( ~<CurrentPunchPosition>~ != ~~ && IsNumeric( ~<CurrentPunchPosition>~ ) )
		{
			dlg( EnableControls,FALSE,LoadFwdButton );
		}
		else
		{
			dlg( EnableControls,<EnableFlag>,LoadFwdButton );
		}
	}
}


VOID SetTransportControlsRunning()
{
	if ( <IgnoreControlCommands> ) { return; }

	ContinueRunning = TRUE;
	gFilmDriveBusy = TRUE;
	EnableTransportControls( FALSE );

	GetFilmDriveVendor();
	dlg( EnableControls,TRUE,StopButton ); 
}


VOID SetTransportControlsStopped()
{
	gFilmDriveBusy = FALSE;

	if ( <IgnoreControlCommands> )
	 { return; }

	ContinueRunning = FALSE;

	EnableTransportControls( TRUE );
}


VOID EnableLoadControls ( EnableFlag )
{
	dlg( GetInput );
	GetFilmdriveVendor();

	if ( <FDVendor> != ~HR500AFD~ )
	{
		return;
	}

	dlg( EnableControls,<EnableFlag>,TensionBox );
	dlg( EnableControls,<EnableFlag>,LoadFwdButton );

}


VOID SetCurrentPunchNumber( NewCurrentPunchNumber, SetFrameNumber )
{
	if ( ~<NewCurrentPunchNumber>~ == ~~ || ~<NewCurrentPunchNumber>~ == ~-1~ )
	{
		dlg( SetStrings,CurrentPunchPosition,~????~ );
	}
	else
	{
		dlg( SetStrings,CurrentPunchPosition,~<NewCurrentPunchNumber>~ );
		if ( DefinedAndNotNull( SetFrameNumber ) )
		{
			if ( <SetFrameNumber> )
			{
				NewFrame = FormatFrameNumber( ~<NewCurrentPunchNumber>~ );
				FrameToPunch = DlgData( GetNumeric,FrameToPunch );
				if ( <FrameToPunch> )
				{
					FrameToPunchPadding = DlgData(GetNumeric,FrameToPunchPadding);
					if ( <FrameToPunchPadding> )
					{
						NewFrame = Format( ~<NewCurrentPunchNumber>~,~%0<FrameToPunchPadding>ld~ );
					}
				}
				SetCurrentFrameNumber( ~<NewFrame>~ );
			}
		}
	}
	dlg( Save,CurrentPunchPosition );
}

NUMERIC GetFrameFormatLength( )
{
	dlg( GetInput,GetStrings,Frame,Frame );
	return strlen( ~<Frame>~ );
}

STR FormatFrameNumber( PunchNumber )
{
	len = GetFrameFormatLength();
	frame = FormattedFrame( Format( ~<PunchNumber>~,~%0<len>ld~ ) );
	return ~<frame>~;
}


NUMERIC GetRollFormatLength( )
{
	dlg( GetInput,GetStrings,Roll,Roll );
	return strlen( ~<Roll>~ );
}


STR FormatRollNumber( RollNumber )
{
	len = GetRollFormatLength();
	newroll = FormattedRoll( Format( ~<RollNumber>~,~%0<len>ld~ ) );
	return ~<newroll>~;
}


VOID GetStripSensorState()
{
	GetFilmDriveVendor();

	if ( FunctionDefined( ~<FDVendor>_GetStripSensorState~ ) )
	{	
		sensorState = <FDVendor>_GetStripSensorState();
		<FDVendor>_UpdateSensorState( <sensorState> );
	}
}	

VOID SetCurrentFrameNumber( NewCurrentFrameNumber )
{
	CurrentScanFrame = ~<NewCurrentFrameNumber>~;
	dlg( SetStrings,Frame,~<NewCurrentFrameNumber>~ );
	dlg( Save,Frame );
}


VOID SetFormattedFrameNumber( NewCurrentFrameNumber )
{
	DlgData( Get,Frame,Frame );
	len = strlen(~<Frame>~);
	if ( <len> > <MAX_NUMERIC_LENGTH> )
	{
		Warning( Translate( ~The maximum numeric value for the frame number has been exceeded.\nPlease update the number manually.~ ) );
	}
	else
	{
		NewFrameNumber = FormattedFrame( Format( ~<NewCurrentFrameNumber>~,~%0<len>ld~ ) );
		CurrentScanFrame = ~<NewFrameNumber>~;
		dlg( SetStrings,Frame,~<NewFrameNumber>~ );
	}
}


NUMERIC UserFrameErrorMessage( Msg, SaveCurrentPunch, CheckScannerErrors, EnableControls )
{
	enableDialog = TRUE;
	if ( DefinedAndNotNULL( EnableControls ) )
	{
		enableDialog = <EnableControls>;
	}

	if ( !<SaveCurrentPunch> )
	{
		SetCurrentPunchNumber( ~~ );
	}
	if ( ~<FDVendor>~ == ~HR500~ && <CheckScannerErrors> )
	{
		HandleHR500Error( Translate( ~<Msg>~ ));
	}
	else
	{
		FilmDriveCmdInProgress( ~<Msg>~ );
	}

	if ( <enableDialog> )
	{
		EnableScanningControls( TRUE );
		SetTransportControlsStopped();
	}
	return FALSE;
}


VOID CheckForTensionError( ScannerErrorCode )
{
	dlg( SetCheck,FALSE,TensionBox );
	dlg( Save,TensionBox );
	OnTensionChange( FALSE,FALSE,FALSE );		
}


VOID HandleHomeMotorsError( ScannerErrorCode )
{
	if ( !Defined( Scanner ) )
	{
		return;
	}

	StripGateMounted = Scanner( Is120StripGateMounted );

	while ( <UniversalScanner> && <StripGateMounted> )
	{
		Warning( ~In order to continue scanner operation,\nplease replace the 120 Strip Gate with a cut negative gate\nand then select OK.~ );
		StripGateMounted = Scanner( Is120StripGateMounted );
	}
	if ( !Scanner( HomeMotors ) )
	{
		ErrMsg = Translate( ~Scan carriaged failed to move to home position.~ );
		HandleHR500Error( ~<ErrMsg>~ );
	}
}


VOID ResetHR500AFDFlag()
{
	gHR500AFD_FrameLengthError = FALSE;
}


VOID LogMessage( Message )
{
	Invoke( _LogMessage, ~<Message>~ );
}

VOID _LogMessage( Message )
{
	if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) )
	{
		LogActivityFlag = DlgData( GetNumeric,LogActivity );
		if ( <LogActivityFlag> )
		{
			Log( Session, ~<Message>~ );
		}
	}
}

// NONE FILM DRIVE UTILITIES

// For use with default film drive vendor as NONE

// NONE FILM DRIVE COMMANDS (MISCELLANEOUS - HIGH LEVEL)
	
STR None_FormatPunchNumber( PunchNumber )
{
	return Format( Numeric( ~<PunchNumber>~ ), ~%05d~ );
}


SecondsWaiting = 0;
