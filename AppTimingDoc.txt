
VOID ReOpen()
{
}

VOID DefineDialog()
{
	hGap = 5; vGap = 5;
	PromptHeight = 20;		PromptWidth = 110;		ValueWidth = 650;
	ButtonWidth = 90;		ButtonHeight = 20;	
	LeftX = $hGap;			CurrentY = $vGap;		CurrentRight = 0;

	Define: TheDialog Using DDWinDef
		Fields:	POSITION				100, 100, 600,600
				TITLE					~Application Timing~
				TYPENAME				Dialog 
				WANTSMINIMIZEBOX		TRUE
				OACTIONSTEXT			ACTION EXEC ( CloseDialog() )
				HACTIONSTEXT			ACTION SHOWHELPPAGE ( AdminHelpFile "Diagnostic.htm" ) 

		Contains: INLISTORDER
		{
			Define: ConnectionPrompt Using DDWinCtrlDef AsSymbol ConnectionPrompt
				Fields:	TypeName		StaticText
						Text			~Database Connections~
						//RightJustified	TRUE
						Position		$hGap $vGap, $PromptWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( ResetInstrumentation() )

			Define: ConnectionFields Using DDWinCtrlDef AsSymbol ConnectionFields
				Fields:	TypeName		StaticText
						Text			~~
						GENCONNAME		This
						GenConField		ConnectionMsg
						Position		ConnectionPrompt(GetRight,Position) + $hGap, 
										ConnectionPrompt(GetTop,Position), $ValueWidth,$ButtonHeight

				Define: CommandsPrompt Using DDWinCtrlDef AsSymbol CommandsPrompt
				Fields:	TypeName		StaticText
						Text			~Database Commands~
						//RightJustified	TRUE
						Position		$hGap ConnectionPrompt(GetBottom,Position) + $vGap, 
										$PromptWidth $ButtonHeight

			Define: CommandsFields Using DDWinCtrlDef AsSymbol CommandsFields
				Fields:	TypeName		StaticText
						Text			~~
						GENCONNAME		This
						GenConField		CommandsMsg
						Position		CommandsPrompt(GetRight,Position) + $hGap, 
										CommandsPrompt(GetTop,Position), $ValueWidth,$ButtonHeight

			Define: RecordsetPrompt Using DDWinCtrlDef AsSymbol RecordsetPrompt
				Fields:	TypeName		StaticText
						Text			~Database Recordsets~
						//RightJustified	TRUE
						Position		$hGap CommandsPrompt(GetBottom,Position) + $vGap, 
										$PromptWidth $ButtonHeight

			Define: RecordsetFields Using DDWinCtrlDef AsSymbol RecordsetFields
				Fields:	TypeName		StaticText
						Text			~~
						GENCONNAME		This
						GenConField		RecordsetMsg
						Position		RecordsetPrompt(GetRight,Position) + $hGap, 
										RecordsetPrompt(GetTop,Position), $ValueWidth,$ButtonHeight ;

			Define: MemoryFields Using DDWinCtrlDef AsSymbol MemoryFields
				Fields:	TypeName		StaticText
						Text			~~
						GENCONNAME		This
						GenConField		MemoryMsg
						Position		$hGap, RecordsetPrompt(GetBottom,Position) + $vGap, $ValueWidth,$ButtonHeight*2 ;

			CurrentRight = RecordsetFields(GetRight,Position) + $hGap;

			Define: UpdatePrompt Using DDWinCtrlDef AsSymbol UpdatePrompt
				Fields:	TypeName		Button
						Text			~Update~
						Position		($CurrentRight / 2) - ($ButtonWidth + $hGap) * 2
										MemoryFields(GetBottom,Position) + $vGap, $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( CheckConnections() )	
						
			Define: ResetPrompt Using DDWinCtrlDef AsSymbol ResetPrompt
				Fields:	TypeName		Button
						Text			~Reset~
						Position		UpdatePrompt(GetRight,Position) + $hGap*2,
										UpdatePrompt(GetTop,Position), $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( ResetInstrumentation() )		
	
			Define: HeapCheckButton Using DDWinCtrlDef AsSymbol HeapCheckButton
				Fields:	TypeName		Button
						Text			~Heap Check~
						Position		ResetPrompt(GetRight,Position) + $hGap*4,
										ResetPrompt(GetTop,Position), $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( PerformHeapCheck() )		

			Define: HeapDumpButton Using DDWinCtrlDef AsSymbol HeapDumpButton
				Fields:	TypeName		Button
						Text			~Heap Dump~
						Position		HeapCheckButton(GetRight,Position) + $hGap,
										HeapCheckButton(GetTop,Position), $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( PerformHeapDump() )		
				
			Define: UHeapDumpButton Using DDWinCtrlDef AsSymbol UHeapDumpButton
				Fields:	TypeName		Button
						Text			~DP2 Heap Dump~
						Position		HeapDumpButton(GetRight,Position) + $hGap,
										HeapDumpButton(GetTop,Position), $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( PerformUHeapDump() )		
			
			Define: DocDumpButton Using DDWinCtrlDef AsSymbol DocDumpButton
				Fields:	TypeName		Button
						Text			~Doc Dump~
						Position		HeapCheckButton(GetLeft,Position),
										HeapCheckButton(Getbottom,Position) + $vGap, $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( Debug(DumpDocList)  )	;	

			Define: StackDumpButton Using DDWinCtrlDef AsSymbol StackDumpButton
				Fields:	TypeName		Button
						Text			~Stack Dump~
						Position		DocDumpButton(GetRight,Position) + $hGap,
										DocDumpButton(GetTop,Position), $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( PerformStackDump()  )	;	

			Define: ThreadListButton Using DDWinCtrlDef AsSymbol ThreadListButton
				Fields:	TypeName		Button
						Text			~Spy~
						Position		StackDumpButton(GetRight,Position) + $hGap,
										StackDumpButton(GetTop,Position), $ButtonWidth $ButtonHeight
						DACTIONSTEXT	ACTION EXEC ( OnThreadList()  )	;	

			CurrentRight = ThreadListButton(GetRight,Position) + $hGap;

			Define: DatabaseTraceCheckBox Using DDWinCtrlDef AsSymbol DatabaseTraceCheckBox 
                Fields: TypeName		CheckBox
                        GenConName		THIS
                        GenConField		~DatabaseTrace~
                        Text			~Database Tracing~
                        Position		$hGap,ResetPrompt(GetTop,Position),120, <ButtonHeight>
                        IActionsText	~[Get]~
						DActionsText	ACTIONS ( Save "Exec(DatabaseTrace();)" )	
                        OActionsText	~[Save]~
                        Tooltip			~Enable or disable tracing of database activity~
		
			Define: DatabaseTraceLevel Using DDWinCtrlDef AsSymbol DatabaseTraceLevel 
                Fields: TypeName		MaskedEditText
						Mask			~#~
                        GenConName		THIS
                        GenConField		~DatabaseTraceLevel~
                        Text			~Trace Level~
                        Position		DatabaseTraceCheckBox(GetRight,Position)+$hGap,DatabaseTraceCheckBox(GetTop,Position),15, <ButtonHeight>
                        IActionsText	~[Get]~
						DActionsText	~[Save]~	
                        OActionsText	~[Save]~
     
			if ( Debug(IsDebugVersion) )
			{
				Define: RuntimeCheckBox Using DDWinCtrlDef AsSymbol RuntimeCheckBox 
					Fields: TypeName		CheckBox
							GenConName		THIS
							GenConField		~RuntimeHeapCheck~
							Text			~Runtime HeapChecking~
							Position		$hGap,DatabaseTraceCheckBox(GetBottom,Position),150, <ButtonHeight>
							IActionsText	~[Get]~
							DActionsText	ACTIONS ( Save "Exec(RuntimeHeapChecking();)" )	
							OActionsText	~[Save]~
							Tooltip			~Enable or disable checking of the runtime heap on every allocation and free of memory~

			}


			Define: StackTraceTimePrompt Using DDWinCtrlDef AsSymbol StackTraceTimePrompt
				Fields:	TypeName		StaticText
						Text			~Stack Trace Interval~
						Position		$hGap,ThreadListButton(GetBottom,Position)+$vGap, 120,$ButtonHeight

			Define: StackTraceTime Using DDWinCtrlDef AsSymbol StackTraceTime 
                Fields: TYPENAME		MaskedEditText
						Mask			~######~
						PromptChar		~ ~ 
                        GenConName		THIS
                        GenConField		~StackTrace~
                        Text			~Thread Tracing~
                        Position		StackTraceTimePrompt(GetRight,Position) + $hGap,StackTraceTimePrompt(GetTop,Position),50, <ButtonHeight>
                        IActionsText	~[Get]~
						DActionsText	ACTIONS ( Save "Exec(StackTrace();)" )
                        OActionsText	~[Save]~
                        Tooltip			~Enable or disable tracing of thread activity.  1000 ms (1 sec) is the min.~
			
			Define: MsMsg Using DDWinCtrlDef AsSymbol MsMsg
				Fields:	TypeName		StaticText
						Text			~ms~
						Position		StackTraceTime(GetRight,Position) + $hGap,StackTraceTime(GetTop,Position)+2, 20,$ButtonHeight
		
			Define: StatusMsg Using DDWinCtrlDef AsSymbol StatusMsg
				Fields:	TypeName		StaticText
						Text			~~
						GenConName		THIS
                        GenConField		~StatusMsg~
						Position		MsMsg(GetRight,Position) + $hGap * 3,StackTraceTime(GetTop,Position)+2, 400,$ButtonHeight
												
		}

	CurrentY = StackTraceTime(GetBottom,Position) + $vGap + 30;
	CurrentRight += $hGap;

	TheDialog( Set,Position,~100 100 <CurrentRight> <CurrentY>~ );

	GenDlg( dlg,Definition,TheDialog,Data,DlgData,Document,$Doc.This,New,Temporary );

	Global( dlg,TheDialog );
}


VOID CloseDialog()
{
	KillTimer( 0 );
	dlg( End );
	Exit();
}


VOID DatabaseTrace()
{
	dlg( GetInput );

	TraceOn = dlgData( GetNumeric,DatabaseTrace );
	Level = dlgData( GetNumeric,DatabaseTraceLevel );

	Log( Database,<TraceOn> ? <Level> : 0 );
}

VOID RuntimeHeapChecking()
{
	dlg( GetInput );
	Debug( RuntimeHeapChecking,dlgData( GetNumeric,RuntimeHeapCheck ) );
}



VOID StackTrace()
{
	action = STR ( DelayedStackTrace() );
	QueueContentsAfter( action,3000 );
}


VOID DelayedStackTrace()
{
	dlg( GetInput );

	duration = dlgData( GetNumeric,StackTrace );

	if ( <duration> > 0 )
	{
		Debug( PeriodicThreadStackDump,<duration> );
	}
}


VOID ResetInstrumentation()
{
	Debug( ResetDBInstrumentation );
	CheckConnections();
}


VOID PerformUHeapDump()
{
	WaitCursor( Begin );

	HeapCheck( UHeapDump );

	WaitCursor( End );

	DumpFile = ~<$App.Directory>\DP2HeapDump.txt~;

	if ( MessageBox( ~DP2 heap written to <DumpFile>. \n\nWould you like to see it?~,YESNO ) == YES )
	{
			action = ACTION DOC ( UtilityRoutines Open UtilityRoutines "SpawnProgram( ~~,~<DumpFile>~ ); Exit();" );
			PerformActions( action );
	}
}


VOID PerformStackDump()
{
	WaitCursor( Begin );

	Debug( ThreadStackDump );

	WaitCursor( End );

	DumpFile = ~<$App.Directory>\DP2StackDump.txt~;

	if ( MessageBox( ~DP2 Stack written to <DumpFile>. \n\nWould you like to see it?~,YESNO ) == YES )
	{
		action = ACTION DOC ( UtilityRoutines Open UtilityRoutines "SpawnProgram( ~~,~<DumpFile>~ ); Exit();" );
		PerformActions( action );
	}
}

VOID OnThreadList()
{
	action = ACTION DOC ( ThreadListDoc Open ThreadListDoc );
	PerformActions( action );
	return;

	// WHAT WE USED TO DO
	Debug( ThreadList,TheList );
	MessageBox( ~<TheList>~ );
}


VOID PerformHeapDump()
{
	WaitCursor( Begin );

	HeapCheck( HeapDump );

	WaitCursor( End );

	DumpFile = ~<$App.Directory>\DP2MainHeapDump.txt~;

	if ( MessageBox( ~Main heap written to <DumpFile>. \n\nWould you like to see it?~,YESNO ) == YES )
	{
			action = ACTION DOC ( UtilityRoutines Open UtilityRoutines "SpawnProgram( ~~,~<DumpFile>~ ); Exit();" );
			PerformActions( action );
	}
}


VOID PerformHeapCheck()
{
	MainHeapStatus = HeapCheck( Now ) ? ~OK~ : ~Corrupted~;

	dlg( SetString,~<$Date.Time>  Heaps are <MainHeapStatus>.~,StatusMsg,0 );

	UMallocCount = Debug( UMallocCount );
	UobjectCount = Debug( UObjectCount );
	MemoryUsuage = Debug( MemoryUsuage );
	PageBytes	 = Debug( PageBytes );
	Corrections	 = ImageCorrections( Count );
	DocCount	 = Debug( DocumentCount );
	MaxBlock	 = GetLargestFreeBlockSize();
	TotalFree	 = GetTotalFreeMemory();

	Frag = <MaxBlock> / <TotalFree> * 100;

	aMsg = ~Mem=<MemoryUsuage>, PageBytes=<PageBytes>, MaxBlock=<MaxBlock> is <Frag>% of <TotalFree>, UObjs=<UobjectCount>, UMallocs=<UMallocCount>, ImageCorr=<Corrections>, Docs=<DocCount>~;

	dlg( SetString,~<aMsg>~,MemoryMsg,0 );

	Log( Session,~<$Date.Time>  Heaps are <MainHeapStatus>.  <aMsg>~ );
}



Timer0_Action = STR ( CheckConnections() );

VOID CheckConnections()
{
	KillTimer( 0 );

	InUse = Debug( ConnectionInfo,NumOpen );
	MaxOpen = Debug( MaxOpenConnections );
	TotalOpen = Debug( GetNumConnections );

	count = Debug( ConnectionCount );
	CTime = Debug( ConnectionTime );	
	Current = Debug( CurrentConnections );
	avg = <CTime> / <count> ? <count> : 1 ;

	dlg( SetString,~Current=<Current>,  Total=<count>, TotalOpen=<TotalOpen>, MaxOpen=<MaxOpen>, Time=<CTime>, Time/Connection = <avg>~,ConnectionMsg,0 );

	count = Debug( NumDBCmds );
	CTime = Debug( DBCmdsTime );	
	Current = Debug( CurrentDBcmds );
	avg = <CTime> / <count> ? <count> : 1 ;

	dlg( SetString,~Current=<Current>,  Total=<count>, Time=<CTime>, Time/Command = <avg>~,CommandsMsg,0 );
	
	count = Debug( NumRecordSets );
	CTime = Debug( RecordSetTime );	
	Current = Debug( CurrentRecordSets );
	avg = <CTime> / <count> ? <count> : 1 ;

	dlg( SetString,~Current=<Current>,  Total=<count>, Time=<CTime>, Time/Recordset = <avg>~,RecordsetMsg,0 );

	PerformHeapCheck();
	
	SetTimer( 0,5000 );
}

if ( !DictionaryExists(DDAppTimingData) )
{
	Dictionary: DDAppTimingData
		Fields: Name ConnectionMsg		Type Text
		Fields: Name CommandsMsg		Type Text
		Fields: Name RecordsetMsg		Type Text
		Fields: Name MemoryMsg			Type Text
		Fields: Name DatabaseTrace		Type long
		Fields: Name DatabaseTraceLevel	Type long
		Fields: Name StackTrace			Type long
		Fields: Name StatusMsg			Type Text
		Fields: Name RuntimeHeapCheck	Type Long
}

Define: DlgData Using DDAppTimingData
	Fields: ConnectionMsg ~~ 
	Fields: CommandsMsg ~~ 
	Fields: RecordsetMsg ~~ 
	Fields: DatabaseTraceLevel 1
	Fields: DatabaseTrace (Log(GetDatabaseLogging) > 0)
	Fields: StackTrace Debug( GetPeriodicThreadStackDump );


DefineDialog();

CheckConnections();

Debug( SetDontDebugThis,TRUE );
		



