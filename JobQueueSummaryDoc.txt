// JobQueueSummaryDoc.txt
// Revision: 9


TableName = ~JobQueueSummary~;


//----------------------------------
// Constants
//----------------------------------
kAssignMode		= 0;
kUnassignMode 	= 1;

//----------------------------------
// Globals
//----------------------------------
gCurrentAsignmentMode = <kAssignMode>;




NUMERIC DefineDialog( AssignentMode )
{
//Debug(1);
	if ( !DataView( GetSelectedRows, ToView ) )		
		{ return Warning( Translate(~There was no row selected to modify~) ); }
		
	if ( ToView( NumEntries) > 1)
	{
		if (<AssignentMode> == <kAssignMode>)
			{ return Warning( Translate(~You may only assign a printer to one queue at a time.~) ); }
		else
			{ return Warning( Translate(~You may only unassign a printer from one queue at a time.~) ); }
	}
	
	gCurrentAsignmentMode = <AssignentMode>;
	
	// Define the dialog data items
	if ( !DictionaryExists(DDJobQueuePrinterAssignment) )
	{
		Dictionary: DDJobQueuePrinterAssignment
			Fields: Name Printers			Type Text
	}

	// Create and instance of the data definition
	if (!DefinedAndNotNull(~<DlgData>~))
	{
		Define: DlgData Using DDJobQueuePrinterAssignment
	}

	// Define values used to create the dialog
	Dlog_X = 100; Dlog_Y = 0;
	Dlog_Width = 500; Dlog_Height = 110;


	// Now, create and instance of a dialog that contains all the UI element
	// linked to their appropriate fields in the generic container object
	// that we will be linked with.
	
	if (!DefinedAndNotNull(~<JobQueuePrinterAssignmentDialog>~))
	{
		Define: JobQueuePrinterAssignmentDialog Using DDWinDef
	        Fields: 	
				TypeName		~Dialog~
				Position		$Dlog_X $Dlog_Y $Dlog_Width $Dlog_Height
	        	Title			~Priter Assignment~
	        	WantsMinimizeBox TRUE
	            OACTIONSTEXT	ACTION EXEC ( CloseDialog() )
			 
	    	Contains: InListOrder
	    	{ 
				Define: PrintersPrompt Using DDWinCtrlDef AsSymbol PrintersPrompt 
	   		 		Fields: 
						TypeName		StaticText
						RightJustified	TRUE
	            		Text			Translate( ~Printer:~ )
	            		Position		10 13 
										60 20;
		
			   	Define: PrintersPopup Using DDWinCtrlDef AsSymbol PrintersPopup         
					Fields:		
						TypeName		SComboBox
	            		Position		(PrintersPrompt(GetRight,Position) + 10) 10 
										400 120         
						GenConName		THIS
						GenConField		~Printers~
						IActionsText	ACTIONS ( Get  )
						OActionsText    ACTIONS ( Save )
						//DActionsText	~[Save Exec("OnApplyToPopup()")]~
	    	

				Define: OKButton Using DDWinCtrlDef AsSymbol OKButton 
		        	Fields: 
						TypeName		Button
	            		Text			Translate( ~OK~ )
	            		Position		$Dlog_Width - 120 $Dlog_Height - 60
										100 20
	            		DActionsText	ACTION EXEC  ( OnButton(~OK~) ) 
	    	

				Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton 
		        	Fields: 
						TypeName		Button
	            		Text			Translate( ~Cancel~ )
	            		Position		OKButton(GetLeft,Position) - 110 $Dlog_Height - 60
										100 20
	            		DActionsText	ACTION EXEC  ( OnButton(~Cancel~) ) 
		    };
	}


    // Set the dialog title as appropriate
	if (<gCurrentAsignmentMode> == <kAssignMode>)
		{ JobQueuePrinterAssignmentDialog( Set,Title,Translate(~Assign Printer~) ); }
	else
		{ JobQueuePrinterAssignmentDialog( Set,Title,Translate(~Unassign Printer~) ); }

	// Create a dialog using the dialog data instantiaition and the 
	GenDlg( dlg,Definition,JobQueuePrinterAssignmentDialog,Data,DlgData,Document,$Doc.This,New,Temporary );

    Global( dlg,JobQueuePrinterAssignmentDialog,DlgData );
    
	DlgData(SetValue,Printers,~~);

    // Set the dialog title as appropriate
	if (<gCurrentAsignmentMode> == <kAssignMode>)
		{ Document( Doc,This,SetTitle,Translate(~Assign Printer~) ); }
	else
		{ Document( Doc,This,SetTitle,Translate(~Unassign Printer~) ); }

    // PrintersPopup combo box
	
	// Grab the name of the selected printer queue
	ToView( GetNext, Record );
	QueueName = ~<$con.Record[QueueName]>~;
	
	// Get the printer model from the queue
	Query = ~Select PrinterModel From QueueDefinition Where QueueName = '<QueueName>'~;
	if ( !gDP2DB( GetValuesFor, ~<Query>~, PrinterModel ))
	{
		gDP2DB( GetErrorDescription, theErr );
		return Warning( Translate(~Query Failed <Query>. <theErr>~) );
	}

	// If we are in assign mode then select the printers with the same printer model
	// as the queue otherwise select printer already assigned to this queue.
	if (<gCurrentAsignmentMode> == <kAssignMode>)
		{ Query = ~Select PrinterName From Printers Where PrinterModel = '<PrinterModel>'~; }
	else
		{ Query = ~Select PrinterName From Printers Where QueueName = '<QueueName>'~; }
 	
	if ( !PGenConList( PrinterList,Connection,gDP2DB,Cursor,Forward,Query,~<Query>~ ) )
	{
		PrinterList( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}
	PrinterList( MakeStringList,Printers,PrinterName );
	
	dlg( SetControlFromStringList, ~PrintersPopup~, Printers, Update );
	
	return TRUE;
}




VOID CloseDialog()
{
//Debug(1);
	dlg( END );
//	Exit();
	
}



NUMERIC UpdatePrinterList( QueueName)
{
	// Get the printers assigned to this queue
	Printers = ~~;
	Query = ~Select PrinterName From Printers Where QueueName = '<QueueName>'~;
	if ( !PGenConList( PrinterList,Connection,gDP2DB,Cursor,Forward,Query,~<Query>~ ) )
	{
		PrinterList( GetErrorDescription, 0, theErr );
		return Warning( Translate(~Query Failed <Query>. <theErr>~) );
	}
	
	while ( PrinterList( GetNext, PrinterRecord ) )
	{
		PrinterName = ~<$pcon.PrinterRecord[PrinterName]>~;
		if (~<Printers>~ == ~~)
			{ Printers = ~<PrinterName>~; }
		else
			{ Printers = ~<Printers>, <PrinterName>~; }
	}
	
	Key = ~QueueName = '<QueueName>'~;
	Fields = ~Printers = '<Printers>'~;
	Cmd = ~Update JobQueueSummary Set <Fields> Where <Key>~;
	if (!gDP2DBLocal( Cmd, ~<Cmd>~))
	{
		gDP2DBLocal( GetErrorDescription, theErr );
		return Warning( Translate(~Cmd Failed: <Cmd>. <theErr>~) );
	}
	
	return TRUE;
}


NUMERIC OnButton( theButton)
{
//Debug(1);
	if (~<theButton>~ == ~OK~)
	{
		if ( !DataView( GetSelectedRows, ToView ) )		
			{ return Warning( Translate(~There was no row selected to modify~) ); }
			
		if ( ToView( NumEntries) > 1)
			{ return Warning( Translate(~You may only assign a printer to one queue at a time.~) ); }

		// Grab the name of the selected printer queue
		ToView( GetNext, Record );
		QueueName = ~<$con.Record[QueueName]>~;
		
		// Get the name of the printer to assign to it
		dlg( GetInput );
		PrinterName = ~<$con.DlgData[Printers]>~;

		if (~<PrinterName>~ == ~~)
		{	CloseDialog();
			return TRUE;	}

		// Get the name of the queue to whom this printer is already assigned
		Query = ~Select QueueName From Printers Where PrinterName = '<PrinterName>'~;
		if ( !gDP2DB( GetValuesFor, ~<Query>~, PrevQueueName ))
		{
			gDP2DB( GetErrorDescription, theErr );
			return Warning( Translate(~Query Failed <Query>. <theErr>~) );
		}
		
		// Assign the printer
		Key = ~PrinterName = '<PrinterName>'~;
		if (<gCurrentAsignmentMode> == <kAssignMode>)
			{ Fields = ~QueueName = '<QueueName>'~; }
		else
			{ Fields = ~QueueName = ''~; }
		Cmd = ~Update Printers Set <Fields> Where <Key>~;
		if (!gDP2DB( Cmd, ~<Cmd>~))
		{
			gDP2DB( GetErrorDescription, theErr );
			return Warning( Translate(~Cmd Failed: <Cmd>. <theErr>~) );
		}
		
		
		// Update the job queue summary table
		
		if ( !IsNULL( PrevQueueName))
		{
			if (~<PrevQueueName>~ != ~~)
				{ UpdatePrinterList( ~<PrevQueueName>~); }
		}
		
		UpdatePrinterList( ~<QueueName>~);
		
		// Refresh the window
		RefreshListView(TRUE);
		
		// Update the printers window if they have that open
		if ( Document( Doc,FindByName,~PrintersDoc~ ) )
		{
			Action = ACTION Doc ( PrintersDoc "RefreshListView();");
			PerformActions( Action);
		}
	}
	
	CloseDialog();

	return TRUE;
}











NUMERIC RefreshListView()
{
	if ( !DataWindow(GetWindowAddress) )
		{ return FALSE; }

	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(~Would you like to save your pending changes?~),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	DataWindow( StatusBar,Text,Translate(~Querying~) );

	DropTables( gDP2DBLocal, TransientJobQueueSummary );
	if ( !CreateTables( gDP2DBLocal, TransientJobQueueSummary ))
	{ Error( Translate(~Failed to create the job queue summary table~) ); }
	
	PopulateJobQueueSummaryTable( gDP2DB, gDP2DBLocal);

	if ( !PGenConList( List,Connection,gDP2DBLocal,Cursor,Forward,Query,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(~Query Failed: <DocumentQuery>. <theErr>~) );
	}

	Count = List( NumEntries );

	IF 0
	{
		if ( <Count> > 300 )
		{
			if ( MessageBox( Translate(~Your query:\n\n   <DocumentQuery>\n\nwill retrieve <Count> records\n\nAre you sure you want to continue?~),YESNO ) != YES )
			{
				if ( <FirstTime> ) { Exit(); }
				return TRUE;
			}
		}
	}

	SetDocumentData( List(GetObject) );

	DataWindow( StatusBar,Text,~Refreshing~ );
	DataWindow( RefreshWindow );

	return DataWindow( StatusBar,Text,~~ );
}


STR GetKey( &Item )
{
	return ~QueueName = '<$con.Item[QueueName]>'~;
}


NUMERIC ChangeField()
{
}


NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,ChangedSetting,OrigSetting,ChangedRow,IsNewRow ) )
		{ return Warning( ~There was no changed row.~ ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	Key = GetKey( OrigSetting );
	
	Query = ~Select * From <TableName> Where <Key>~;

	if ( !PGenConList( List,ConnectLocal,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(~Query Failed: <Query>. <theErr>~) );
	}

	if ( !List( UpdateFrom,ChangedSetting,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( Translate(~Could not update <TableName> record where <Key>. <theErr>~) );
	}

	DataView( CommitChanges );
	
	return TRUE;
}


NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,ToDelete ) )		
		{ return Warning( Translate(~There was no row selected to delete~) ); }

	if ( MessageBox( Translate(~Are you sure you want to delete the selected items?~),YESNO ) != YES )
		{ return FALSE; }

	StringList( RowsToDelete,New );

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	while ( ToDelete( GetNext,Setting ) )
	{
		Key = GetKey( Setting );

		if ( !dBase( CMD,~Delete From <TableName> Where <Key>~ ) )
		{
			dBase( GetErrorDescription,theErr,RollBackTransaction );
			Warning( Translate(~Could not delete where <Key>. <theErr>~) );
			break;
		}

		RowsToDelete( AddString,ToDelete(GetCurrentPosition) );
	}

	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}


NUMERIC AddRecord()
{
	Document( Doc,This );
	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	NewRow( Set,TableName,~<WhichTable>~ );
	
	RowBeingAdded = DataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate(~You are too low on memory to add any more rows~) ); }

	DataView( SetActiveCell,<RowBeingAdded>,OrderID );

	return TRUE;
}


NUMERIC RightClickInListView()
{
	if ( !GenCon( ActiveView,GetActiveView ) )
		{ return Warning( Translate(~There was no active view~) ); }

	ActiveView( DisplayMenu,ListViewMenu );

	return TRUE;
}


NUMERIC NotImplementedYet( what )
{
	MessageBox( Translate(~<what> is not implemented yet!~) );
	return TRUE;
}


FirstTime = TRUE;

NUMERIC Init( )
{
	if ( !<FirstTime> )
	{
		return FALSE;
	}

	WaitCursor( Begin );

	FirstTime = FALSE;

	DocumentQuery = ~Select * From <TableName>~;
	Global(DocumentQuery);

	if ( !PGenConList( List,Connection,gDP2DBLocal,Cursor,Dynamic,Query,~<DocumentQuery>~ ) )
	{ 
		WaitCursor( End );
		Error( ~Failed to query the <TableName> table~ );
	}

	SetDocumentData( List(GetObject) );

	if ( !DataWindow( CreateWindow,~<TableName>~ ) )
	{ 
		WaitCursor( End );
		Error( Translate(~Failed to create the window~) );
	}

	WaitCursor( End );

	return TRUE;
}


NUMERIC OnCloseDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(~Would you like to save your pending changes?~),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	// Delete the temporary table
	DropTables( gDP2DBLocal, TransientJobQueueSummary );
	
	DataWindow( ForceCloseWindow );
	
	return TRUE;
}


NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( Translate(~Are you sure you want to cancel all changes including new records that have not been saved?~), YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}

NUMERIC AllOptions()
{
	return DataView( DisplayMenu,ListViewMenu,0,0 );
}




NUMERIC PopulateJobQueueSummaryTable( &DP2DB, &DP2DBLocal)
{
//Debug(1);
	// Get the list of print queue's
	Query = ~Select * From QueueDefinition~;
	if ( !PGenConList( PrintQueueList,Connection,DP2DB,Cursor,Forward,Query,~<Query>~ ) )
	{
		PrintQueueList( GetErrorDescription, 0, theErr );
		return Warning( Translate(~Query Failed <Query>. <theErr>~) );
	}
	
	while ( PrintQueueList( GetNext, PrintQueueRecord ) )
	{
		QueueName = ~<$pcon.PrintQueueRecord[QueueName]>~;
		
		// Get the number of batches in this JobQueue
		Query = ~Select Distinct BatchID From JobQueue Where QueueName = '<QueueName>'~;
		if ( !PGenConList( BatchList,Connection,DP2DB,Cursor,Forward,Query,~<Query>~ ) )
		{
			BatchList( GetErrorDescription, 0, theErr );
			return Warning( Translate(~Query Failed <Query>. <theErr>~) );
		}

		NumOfBatches = BatchList( NumEntries);
		
		// Get the number of items
		Query = ~Select SUM(OrderItemQty) From JobQueue Where QueueName = '<QueueName>'~;
		if ( !DP2DB( GetValuesFor, ~<Query>~, NumOfItems ))
		{
			DP2DB( GetErrorDescription, theErr );
			return Warning( Translate(~Query Failed <Query>. <theErr>~) );
		}
		if (~<NumOfItems>~ == ~~)
			{ NumOfItems = 0; }
		
		// Calculate the approximate feet to print
		AvgProductLength = ~<$pcon.PrintQueueRecord[AvgProductLength]>~;
		if (~<AvgProductLength>~ == ~~)
			{ AvgProductLength = 0; }
		ApproxNumOfFeet = ($AvgProductLength * $NumOfItems) / 12;
		ApproxNumOfFeet = Round(<ApproxNumOfFeet>);
		
		// Calculate the estimated time to print
		AvgPrintSpeed = ~<$pcon.PrintQueueRecord[AvgPrintSpeed]>~;
		if (~<AvgPrintSpeed>~ == ~~)
			{ AvgPrintSpeed = 0; }
			
		if ($AvgPrintSpeed != 0)
			//{ ApproxTimeToPrint = (($AvgProductLength * $NumOfItems) / $AvgPrintSpeed) / 60; }
			{ ApproxTimeToPrint = ($NumOfItems * $AvgPrintSpeed) / 60; }
		else
			{ ApproxTimeToPrint = 0; }

		if ($ApproxTimeToPrint > 0)
			{ ApproxTimeToPrint = Round($ApproxTimeToPrint + 0.5); }
			
		Hours = (($ApproxTimeToPrint - ($ApproxTimeToPrint % 60)) / 60);
		Minutes = ($ApproxTimeToPrint % 60);
		if ($Hours > 0)
			{ ApproxTimeToPrint = ~<Hours> Hrs. <Minutes> Min.~; }
		else
			{ ApproxTimeToPrint = ~<Minutes> Min.~; }
		
		
		// Get the printers assigned to this queue
		Printers = ~~;
		Query = ~Select PrinterName From Printers Where QueueName = '<QueueName>'~;
		if ( !PGenConList( PrinterList,Connection,DP2DB,Cursor,Forward,Query,~<Query>~ ) )
		{
			PrinterList( GetErrorDescription, 0, theErr );
			return Warning( Translate(~Query Failed <Query>. <theErr>~) );
		}
		
		while ( PrinterList( GetNext, PrinterRecord ) )
		{
			PrinterName = ~<$pcon.PrinterRecord[PrinterName]>~;
			if (~<Printers>~ == ~~)
				{ Printers = ~<PrinterName>~; }
			else
				{ Printers = ~<Printers>, <PrinterName>~; }
		}
		
		
		Fields = ~QueueName,NumOfBatches,NumOfItems,ApproxNumOfFeet,ApproxTimeToPrint,Printers~;

		Values = ~'<QueueName>',<NumOfBatches>,<NumOfItems>,<ApproxNumOfFeet>,'<ApproxTimeToPrint>','<Printers>'~;

		Cmd = ~Insert Into JobQueueSummary(<Fields>) Values(<Values>)~;
		
		if (!DP2DBLocal( Cmd, ~<Cmd>~))
		{
			DP2DBLocal( GetErrorDescription, theErr );
			return Warning( Translate(~Cmd Failed <Cmd>. <theErr>~) );
		}
	}
	
	return TRUE;
}



NUMERIC DoViewJobQueueDetails()
{
	if ( !DataView( GetSelectedRows, ToView ) )		
		{ return Warning( Translate(~There was no row selected to view~) ); }

	while ( ToView( GetNext, Record ) )
	{
		QueueName = ~<$con.Record[QueueName]>~;
		
		Action = ACTION DOC ( JobQueueDetails Open JobQueueDetailsDoc "Init( ~<QueueName>~);" );
		PerformActions( Action );
	}


	return TRUE;
}




NUMERIC DoAssignPrinter()
{
	if ( !DataView( GetSelectedRows, SelectedRows ) )		
		{ return Warning( Translate(~There was no row selected.~) ); }

	DefineDialog( ~<kAssignMode>~);

	return TRUE;
}




NUMERIC DoUnassignPrinter()
{
	if ( !DataView( GetSelectedRows, SelectedRows ) )		
		{ return Warning( Translate(~There was no row selected.~) ); }

	DefineDialog( ~<kUnassignMode>~);

	return TRUE;
}





//=========================================================
// Ensure that the JobQueueSummary table is created


NUMERIC ExecSQL( &dBase,theSQL )
{
	if ( !dBase( CMD,~<theSQL>~ ) )
	{
		Log( Session,~<theSQL>~ );

		dBase( GetErrorDescription,theErr );
		//if ( Defined( dlg ) ) { dlg( END ); }
		return Warning( Translate(~Error: <theErr>\n\nFrom: [<theSQL>]~) );
	}

	return TRUE;
}


NUMERIC CreateTables( &dBase,TableDefinitions )
{
	if ( !GenCon( TableDefinitions,GetFrom,~<TableDefinitions>~,~[Database]~ ) )
	{ 
		//if ( Defined( dlg ) ) { dlg( END ); }
		//OnCloseDataView();
		return Warning( Translate(~There are no tables defined for the database.~) );
	}

	while ( TableDefinitions( GetNext,TableDefinition ) )
	{
		if ( !CreateTable( dBase,TableDefinition ) )
		{
			return FALSE;
		}
	}

	return TRUE;
}



NUMERIC CreateTable( &dBase,&TableDefinition )
{
	TableDefinition( CreateTableDefinition,Definition,dBase );
	TableDefinition( Get,TableName,Tablename );

	if ( !ExecSQL( dBase,~CREATE TABLE <Tablename> (<Definition>)~ ) )
	{
				return FALSE;
	}

	if ( GenCon( TableIndexes,Is,TableDefinition(GetNumeric,Indexes) ) )
	{
		while ( TableIndexes( GetNext,IndexDefinition ) )
		{	
			if ( !ExecSQL( dBase,~<$Con.IndexDefinition[Text]>~ ) )
			{
				return FALSE;
			}	
		}
	}

	return TRUE;
}


VOID DropTables( &dBase,TableDefinitions )
{
//Debug(1);
	if ( !GenCon( TableDefinitions,GetFrom,~<TableDefinitions>~,~[Database]~ ) )
	{ 
		//if ( Defined( dlg ) ) { dlg( END ); }
		//OnCloseDataView();
		Error( Translate(~There are no tables defined for the database~) ); 
	}

	while ( TableDefinitions( GetPrev,TableDefinition ) )
	{
		DropTable( dBase,TableDefinition );
	}
}


VOID DropTable( &dBase,&TableDefinition )
{
	TableDefinition( CreateTableDefinition,Definition,dBase );
	TableDefinition( Get,TableName,Tablename );

	if ( !dBase( IgnoreErrors,CMD,~DROP TABLE <TableName>~ ) )
	{
		dBase( GetErrorDescription,theErr,GetErrorNumber, err );

		if ( <err> != -2147217865 )
		{
			debug( 1 );
			Log( Session,Translate(~Could not drop the TABLE <TableName> [<theErr>]~) );
		}
	}

	dBase( ReportErrors );
}



VOID DefineJobQueueSummaryTable()
{
//Debug(1);
	if ( !GenCon( TableDefinitions,GetFrom,~TransientJobQueueSummary~,~[Database]~ ) )
	{		
		// Define the job qeueu summary table
		WhichTable = JobQueueSummary;
		
		Define:			<WhichTable>Fields Using DDLong
			Contains:	InListOrder
			{
				Define:	QueueName			CopyOf QueueName		~[Database FieldTypes]~	Fields: Constraints	~NOT NULL~	 ReadOnly ~T~
				Define:	NumOfBatches		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~# Batches~ ReadOnly ~T~
				Define:	NumOfItems			CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~# Items~ ReadOnly ~T~
				Define:	ApproxNumOfFeet		CopyOf Generic5Digit	~[Database FieldTypes]~	Fields: DisplayName ~Aprox. # Feet~ ReadOnly ~T~
				Define:	ApproxTimeToPrint	CopyOf Generic20Char	~[Database FieldTypes]~	Fields: DisplayName ~Aprox. Time To Print~ ReadOnly ~T~
				Define:	Printers			CopyOf Generic255Char 	~[Database FieldTypes]~ Fields: DisplayName ~Printers~ ReadOnly ~T~
			}

		Define:		<WhichTable>TableConstraints Using DDLong
			Contains:	InListOrder
			{
				Define: <WhichTable>PrimaryKey Using DDText
					Fields:	Text			~Constraint <WhichTable>PrimaryKey PRIMARY KEY(QueueName)~
			}

		Define:			<WhichTable>		Using DDDatabaseTableDef
			Fields:		TableName			<WhichTable>
						TableConstraints	<WhichTable>TableConstraints(GetObjectReference)
						Fields				<WhichTable>Fields(GetObjectReference)

		Hang: <WhichTable> ~[DATABASE TransientJobQueueSummary]~ InListOrder;
	}
}



if ( !Ado( gDP2DBLocal,ConnectLocal ) )
{
	gDP2DBLocal( GetErrorDescription,theErr );
	return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
}

if ( !Ado( gDP2DB,Connect ) )
{
	gDP2DB( GetErrorDescription,theErr );
	return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
}

DefineJobQueueSummaryTable();
DropTables( gDP2DBLocal, TransientJobQueueSummary );
if ( !CreateTables( gDP2DBLocal, TransientJobQueueSummary ))
	{ Error( Translate(~Failed to create the job queue summary table~) ); }
	
PopulateJobQueueSummaryTable( gDP2DB, gDP2DBLocal);


//=========================================================



if ( !GenCon( TableDefinition,GetFrom,<TableName>,~[DATABASE TransientJobQueueSummary]~ ) )
	{ Error( Translate(~The <TableName> Table is not properly defined~) ); }
	

Define:	ListViewMenu Using DDMenuDef AsSymbol ListViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{
		Define:	AssignPrinter	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Assign Printer~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DoAssignPrinter(); )

		Define:	UnssignPrinter	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Unassign Printer~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DoUnassignPrinter(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )
	}


//Include: ~DefineStdGridButtons~;

ButtonWidth = 55;  ButtonHeight = 20;  hGap = 1; vGap = 2;

Define: DataWindow Using DDWinDef
	Fields:	Title					Translate(~Job Queue Summary~)
			Position				0 0 50 20
			IsPositionPercent		T
			//TypeName				SplitterWnd
			//SplitterRows			~2 14 90~
			//SplitterColumns			1


	Contains:	INLISTORDER
	{
if (0)
{
		Define: ControlView Using DDViewDef AsSymbol ControlView
			Fields:	ViewType				FormView
					KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "JobQueueSummaryData.htm" )
			Contains:
			{
				position = DefineStdGridButtons(SubjectInfoColumns) + 10;
			}
}

		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				~ListView~
					GridControlTypes		TableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
//					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					DoubleClickActionsText	ACTION EXEC ( DoViewJobQueueDetails() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "JobQueueSummaryData.htm" )
					RefreshActionsText		ACTION Exec ( RefreshListView() )
					CloseActionsText		ACTION Call ( OnCloseDataView() ) ;
	}
	




// Init();