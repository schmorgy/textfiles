Include: ~KparsUtilities.txt~;

IncludeClass( BaseDialog );

VOID KparsConfig::KparsConfig()					// CONSTRUCTOR
{
	//HelpPage = ~KarsDefaultConfig.htm~;
	Dictionary = ~DDRetouchDefaultConfig~;
	Title = Translate( ~Auto-Retouching Default Configuration Settings~ );
	HelpPage = ~KarsDefaultConfig.htm~;
}


VOID KparsConfig::DefineDictionary()
{
	if ( !Tree( Name,BatchCompleteTypes,Location,~[STRINGS]~,Exists ) )
	{
		StringList:	Name ~BatchCompleteTypes~
			Fields: String	~REVIEW~
			Fields: String	~NO_REVIEW~
		Hang:	BatchCompleteTypes	~[STRINGS]~ ;
	}

	Dictionary: ~DDRetouchDefaultConfig~ 
		Fields: Name BatchComplete		type text
		Fields: Name DataPath			type text
		Fields: Name OverwriteOriginal	type long
		Fields:	Name OriginalPrefix		type text
		Fields:	Name OriginalSuffix		type text
		Fields:	Name OriginalPath		type text
		Fields: Name AutoMergeOnAccept	type long
		Fields: Name IgnoreProfiles		type long
		Fields: Name ApplyColorCorrections type long
		Fields: Name LowCreditWarning	type long
		Fields: Name EmbedProfiles		type long
		Fields: Name AutoBatch			type long
		Fields: Name SingleFace			type long
		;
}


VOID KparsConfig::DefineMessages()
{
	BaseDialog::DefineMessages();

	Translations( AddText,DataPathLabel,~Temporary Retouch Data Path~ );	
	Translations( AddText,DataPathToolTip,~The directory where intermediate retouching data will be temporarily stored.~ );	
	Translations( AddText,DataPathBrowseToolTip,~Select the directory where intermediate retouching data will be temporarily stored.~ );	
	Translations( AddText,BatchCompleteLabel,~Batch Complete Processing~ );	
	Translations( AddText,BatchCompleteToolTip,~The next retouch action after batch completes.~ );	
	Translations( AddText,AutoMergeLabel,~Auto Merge On Accept~ );	
	Translations( AddText,AutoMergeToolTip,~If checked, the Merge Queue will automatically start when an image is accepted in Review or Interactive mode.~ );	
	Translations( AddText,WarningLabel,~Low Credit Warning~ );	
	Translations( AddText,WarningToolTip,~The user will be warned when the number of remaining retouch credits is less than this value.~ );	
	Translations( AddText,OverwriteLabel,~Overwrite Original Image~ );	
	Translations( AddText,OverwriteToolTip,~If checked, the original image will be overwritten by the retouched image.~ );	
	Translations( AddText,PrefixLabel,~Prefix for Original~ );	
	Translations( AddText,PrefixToolTip,~The prefix to be added to the original image name in its original folder.~ );	
	Translations( AddText,SuffixLabel,~Suffix for Original~ );	
	Translations( AddText,SuffixToolTip,~The suffix to be added to the original image name in its original folder.~ );	
	Translations( AddText,OriginalPathLabel,~New Path for Original~ );	
	Translations( AddText,OriginalPathToolTip,~The root folder where original image will be moved prior to saving the retouched image. The image will be stored under the root folder as Order\Roll\Frame.~ );	
	Translations( AddText,OriginalBrowseToolTip,~Select the directory where original image will be moved prior to saving the retouched image. The image will be stored under the root folder as Order\Roll\Frame.~ );	
	Translations( AddText,ApplyCorrectionsLabel,~Apply color corrections for Auto-Retouching~ );	
	Translations( AddText,ApplyCorrectionsToolTip,~If checked, color corrections (DRGB, gamma, contrast, and saturation) will be applied to the image before retouching.~ );	
	Translations( AddText,ProfilesLabel,~Disable Color Management for Auto-Retouching~ );	
	Translations( AddText,ProfilesToolTip,~If checked, Color Management will be disabled for Auto-Retouching Only. If unchecked, the profiles will be applied and the image saved in Working Space on merge.~ );	
	Translations( AddText,ResetLabel,~Reset to System Defaults~ );	
	Translations( AddText,ResetToolTip,~Reset the settings to the system default values.~ );	
	Translations( AddText,OriginalGroupLabel,~Original Image Settings~ );	
	Translations( AddText,CancelLabel,~Exit~ );	
	Translations( AddText,CancelToolTip,~Close the dialog without saving the settings.~ );	
	Translations( AddText,GoLabel,~Save~ );	
	Translations( AddText,GoToolTip,~Save these configuration settings in the System Settings~ );	
	Translations( AddText,BrowseOriginalTitle,~Find the directory in which to save the original image~ );	
	Translations( AddText,BrowseDataPathTitle,~Find the directory in which to store temporary retouch data~ );	
	Translations( AddText,EmbedProfilesLabel,~Embed Profile~ );	
	Translations( AddText,EmbedProfilesToolTip,~Embed the working space profile in the image when the image is merged and flattened.~ );	
	Translations( AddText,AutoBatchLabel,~Automatically choose batch settings (Auto Batch)~ );	
	Translations( AddText,AutoBatchToolTip,~If checked, the batch settings will be determined based on the initial image analysis. The batch setup types must be defined for this feature.~ );	
	Translations( AddText,SingleFaceLabel,~Single Face for Auto Batch~ );	
	Translations( AddText,SingleFaceToolTip,~If checked, the Auto Batch analysis and settings will be applied to only one face in the image.~ );	
}



VOID KparsConfig::InitDialogData()
{
	StartingDirectory = ~<$App.ShareDirectory>\KparsData~;
	StartingDirectory = MakePath( Type, UNC, ~<StartingDirectory>~);
	if ( GetSystemSettings( ~AutoRetouching~,~EnhancementDataFolder~,DefaultPath,Enabled ) )
	{
		if ( !IsNULL( ~<DefaultPath>~ ) )
		{
			StartingDirectory = ~<DefaultPath>~;
		}
	}

	DefaultBatchComplete = ~REVIEW~;
	GetSystemSettings( ~AutoRetouching~,~BatchCompleteProcessing~,DefaultComplete,Enabled );
	if ( !IsNULL( ~<DefaultComplete>~ ) && <Enabled> )
	{
		DefaultBatchComplete = ~<DefaultComplete>~;
	}

	DefaultAutoMerge = TRUE;
	GetSystemSettings( ~AutoRetouching~,~AutoMergeOnAccept~,DefaultMerge,Enabled );
	if ( !IsNULL( ~<DefaultMerge>~ ) && <Enabled> )
	{
		DefaultAutoMerge = ~<DefaultMerge>~;
	}

	DefaultDisableProfile = FALSE;
	GetSystemSettings( ~AutoRetouching~,~IgnoreColorProfiles~,DefaultProfile,Enabled );
	if ( !IsNULL( ~<DefaultProfile>~ ) && <Enabled> )
	{
		DefaultDisableProfile = ~<DefaultProfile>~;
	}

	temp = ~~;
	If (GetSystemSettings( ~AutoRetouching~,~IgnoreProfiles~,temp,Enabled ))
	{
		cmd = ~Delete from SystemSettings Where Category='AutoRetouching' AND Item='IgnoreProfiles'~;
		 
		if ( !ADO( dBase, Connect, Cmd, ~<cmd>~ ) )
		{
			dBase( GetErrorDescription, theErr );
			Warning( ~Could not delete IgnoreProfiles from SystemSettings: <theErr>~ );
		}
	}

	DefaultOverwrite = FALSE;
	GetSystemSettings( ~AutoRetouching~,~OverwriteOriginal~,OverWrite,Enabled );
	if ( !IsNULL( ~<OverWrite>~ ))
	{
		DefaultOverwrite = <OverWrite>;
	}
	GetSystemSettings( ~AutoRetouching~,~OriginalPrefix~,DefaultPrefix,Enabled );
	GetSystemSettings( ~AutoRetouching~,~OriginalSuffix~,DefaultSuffix,Enabled );
	GetSystemSettings( ~AutoRetouching~,~OriginalPath~,DefaultPath,Enabled );
	GetSystemSettings( ~AutoRetouching~,~ApplyColorCorrections~,DefaultCorrections,Enabled );
	GetSystemSettings( ~AutoRetouching~,~LowCreditWarning~,LowCreditWarning,Enabled );

	DefaultEmbedProfile = FALSE;
	GetSystemSettings( ~AutoRetouching~,~EmbedProfiles~,DefaultEmbed,Enabled );
	if ( !IsNULL( ~<DefaultEmbed>~ ) && <Enabled> )
	{
		DefaultEmbedProfile = ~<DefaultEmbed>~;
	}

	DefaultAutoBatch = FALSE;
	GetSystemSettings( ~AutoRetouching~,~AutoBatch~,AutoBatch,Enabled );
	if ( !IsNULL( ~<AutoBatch>~ ))
	{
		DefaultAutoBatch = <AutoBatch>;
	}

	DefaultSingleFace = FALSE;
	GetSystemSettings( ~AutoRetouching~,~SingleFace~,SingleFace,Enabled );
	if ( !IsNULL( ~<SingleFace>~ ))
	{
		DefaultSingleFace = <SingleFace>;
	}

	DlgData( SetValues,BatchComplete,~<DefaultBatchComplete>~,
						DataPath,~<StartingDirectory>~,OverwriteOriginal,~<DefaultOverwrite>~,
						OriginalPrefix,~<DefaultPrefix>~,OriginalSuffix,~<DefaultSuffix>~,
						OriginalPath,~<DefaultPath>~,AutoMergeOnAccept,<DefaultAutoMerge>,
						ApplyColorCorrections,<DefaultCorrections>,
						IgnoreProfiles,~<DefaultDisableProfile>~,
						LowCreditWarning,<LowCreditWarning>,
						EmbedProfiles,~<DefaultEmbedProfile>~,
						AutoBatch,~<DefaultAutoBatch>~,
						SingleFace,~<DefaultSingleFace>~ );
	Private( DlgData );
}


NUMERIC KparsConfig::DefineControls()
{
    TextHeight = 20;        TextWidth = 100;  
	StaticTextWidth = 150;	StaticTextHeight = 18;
    EditTextWidth = 60;		EditTextHeight = 20;
    ComboBoxWidth = 120;	ComboBoxHeight = 160;

	Define: DataPathText Using DDWinCtrlDef AsSymbol DataPathText 
		Fields: TypeName			StaticText
				Text				Translate( Translations,DataPathLabel )
				LeftJustified		TRUE
				Position			<hgap> <vGap> $StaticTextWidth,<StaticTextHeight>;

	Define: DataPathEditText Using DDWinCtrlDef AsSymbol DataPathEditText 
		Fields: TypeName			EditText  
				Position			DataPathText(GetLeft,Position)+ 30,DataPathText(GetBottom,Position),<TextWidth>+140 ,<TextHeight>
                 IActionsText		~[Get]~
                OActionsText		~[Save]~
				GenConName			THIS
				GenConField			~DataPath~
				Tooltip				Translate( Translations,DataPathToolTip )

	Define: DataPathBrowseButton Using DDWinCtrlDef AsSymbol DataPathBrowseButton 
		Fields: TypeName			Button
				Text				Translate(~?~)
				Position			DataPathEditText(GetRight,Position) + $hGap,DataPathEditText(GetTop,Position), 20,<ButtonHeight>
				DActionsText		ACTION EXEC ( <THIS>.BrowseForDataPath() )
				Tooltip				Translate( Translations,DataPathBrowseToolTip );

	Define: BatchCompleteLabel Using DDWinCtrlDef AsSymbol BatchCompleteLabel Private
		Fields:	TYPENAME			StaticText
				POSITION			<hgap> DataPathEditText(GetBottom,Position) + <vGap> * 2 $StaticTextWidth $StaticTextHeight
				TEXT				Translate( Translations,BatchCompleteLabel )
				LEFTJUSTIFIED		TRUE;
				
	Define: BatchCompleteCombo Using DDWinCtrlDef AsSymbol BatchCompleteCombo Private
		Fields:	TYPENAME			ComboBox
				POSITION			BatchCompleteLabel(GetRight,Position)+<hgap> BatchCompleteLabel(GetTop,Position) <ComboBoxWidth> <ComboBoxHeight>
                IActionsText		~[GetList(BatchCompleteTypes) Get]~
				DActionsText		~[Save]~	
				OActionsText		~[Save]~
				GENCONNAME			THIS
				GENCONFIELD			~BatchComplete~
				TOOLTIP				Translate( Translations,BatchCompleteToolTip );
				
   Define: AutoBatchCheckBox Using DDWinCtrlDef AsSymbol AutoBatchCheckBox 
        Fields: TypeName	       CheckBox
                Text			    Translate( Translations,AutoBatchLabel )
				IsEnabled			T
                Position	        <hgap> BatchCompleteLabel(GetBottom,Position) + <vGap> * 2,<StaticTextWidth> * 2,<StaticTextHeight>
				GenConName			THIS
				GenConField			~AutoBatch~
				IActionsText	    ACTIONS ( Get )
				DActionsText		ACTIONS ( Save )
				OActionsText		ACTIONS ( Save )
				Tooltip				Translate( Translations,AutoBatchToolTip );
	
  Define: SingleFaceCheckBox Using DDWinCtrlDef AsSymbol SingleFaceCheckBox 
        Fields: TypeName	       CheckBox
                Text			    Translate( Translations,SingleFaceLabel )
				IsEnabled			T
                Position	        <hgap> AutoBatchCheckBox(GetBottom,Position) + <vGap> * 2,<StaticTextWidth> * 2,<StaticTextHeight>
				GenConName			THIS
				GenConField			~SingleFace~
				IActionsText	    ACTIONS ( Get )
				DActionsText		ACTIONS ( Save )
				OActionsText		ACTIONS ( Save )
				Tooltip				Translate( Translations,SingleFaceToolTip );

  Define: AutoMergeCheckBox Using DDWinCtrlDef AsSymbol AutoMergeCheckBox 
        Fields: TypeName	       CheckBox
                Text			    Translate( Translations,AutoMergeLabel )
				IsEnabled			T
                Position	        <hgap> SingleFaceCheckBox(GetBottom,Position) + <vGap> * 2,<StaticTextWidth> * 2,<StaticTextHeight>
				GenConName			THIS
				GenConField			~AutoMergeOnAccept~
				IActionsText	    ACTIONS ( Get )
				DActionsText		ACTIONS ( Save )
				OActionsText		ACTIONS ( Save )
				Tooltip				Translate( Translations,AutoMergeToolTip );

	Define: WarningPrompt Using DDWinCtrlDef AsSymbol WarningPrompt
			Fields:	POSITION		<hGap>,AutoMergeCheckBox(GetBottom,Position) + <hGap>,<StaticTextWidth>,<StaticTextHeight>
					TEXT			Translate( Translations,WarningLabel )
					TYPENAME		StaticText

	Define: WarningField Using DDWinCtrlDef AsSymbol WarningField
			Fields:	GENCONFIELD		~LowCreditWarning~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		WarningPrompt(GetRight,Position) + $hGap,WarningPrompt(GetTop,Position),<EditTextWidth>,$EditTextHeight
					TEXT			~~
					TOOLTIP			Translate( Translations,WarningToolTip )
					TYPENAME		MaskedEditText
					Mask			~#####~
					PromptChar		~ ~ 
					IsTabStop		T;

   Define: OverwriteCheckBox Using DDWinCtrlDef AsSymbol OverwriteCheckBox 
        Fields: TypeName	       CheckBox
                Text			    Translate( Translations,OverwriteLabel )
				IsEnabled			T
                Position	        $hGap+10, WarningPrompt(GetBottom,Position)+30,<StaticTextWidth>,<StaticTextHeight>
				GenConName			THIS
				GenConField			~OverwriteOriginal~
				IActionsText	    ACTIONS ( Get )
				DActionsText		ACTIONS ( Save )
				OActionsText		ACTIONS ( Save )
				Tooltip				Translate( Translations,OverwriteToolTip );
	

	Define: PrefixText Using DDWinCtrlDef AsSymbol PrefixText 
		Fields: TypeName			StaticText
				Text				Translate( Translations,PrefixLabel )
				LeftJustified		TRUE
				Position			OverwriteCheckBox(GetLeft,Position),OverwriteCheckBox(GetBottom,Position)+$vGap*2,$TextWidth,<StaticTextHeight>;

	Define: PrefixEditText Using DDWinCtrlDef AsSymbol PrefixEditText 
		Fields: TypeName			EditText  
				Position			PrefixText(GetRight,Position)+$hGap,PrefixText(GetTop,Position)-2,<StaticTextWidth> ,<TextHeight>
                 IActionsText		~[Get]~
                OActionsText		~[Save]~
				GenConName			THIS
				GenConField			~OriginalPrefix~
				Mask				RepeatStr(10,~%~)
				Tooltip				Translate( Translations,PrefixToolTip );

	Define: SuffixText Using DDWinCtrlDef AsSymbol SuffixText 
		Fields: TypeName			StaticText
				Text				Translate( Translations,SuffixLabel )
				LeftJustified		TRUE
				Position			PrefixText(GetLeft,Position),PrefixText(GetBottom,Position)+$vGap*2,$TextWidth,<StaticTextHeight>;

	Define: SuffixEditText Using DDWinCtrlDef AsSymbol SuffixEditText 
		Fields: TypeName			EditText  
				Position			SuffixText(GetRight,Position)+$hGap,SuffixText(GetTop,Position)-2,<StaticTextWidth> ,<TextHeight>
                 IActionsText		~[Get]~
                OActionsText		~[Save]~
				GenConName			THIS
				GenConField			~OriginalSuffix~
				Mask				RepeatStr(10,~%~)
				Tooltip				Translate( Translations,SuffixToolTip );

	Define: OriginalPathText Using DDWinCtrlDef AsSymbol OriginalPathText 
		Fields: TypeName			StaticText
				Text				Translate( Translations,OriginalPathLabel )
				LeftJustified		TRUE
				Position			SuffixText(GetLeft,Position),SuffixText(GetBottom,Position)+$vGap*2,$TextWidth,<StaticTextHeight>;

	Define: OriginalPathEditText Using DDWinCtrlDef AsSymbol OriginalPathEditText 
		Fields: TypeName			EditText  
				Position			OriginalPathText(GetRight,Position)+$hGap,OriginalPathText(GetTop,Position)-2,<StaticTextWidth> ,<TextHeight>
                 IActionsText		~[Get]~
                OActionsText		~[Save]~
				GenConName			THIS
				GenConField			~OriginalPath~
				Tooltip				Translate( Translations,OriginalPathToolTip );

	Define: OrigPathBrowseButton Using DDWinCtrlDef AsSymbol OrigPathBrowseButton 
		Fields: TypeName			Button
				Text				Translate(~?~)
				Position			OriginalPathEditText(GetRight,Position) + $hGap,OriginalPathEditText(GetTop,Position), 20,  <ButtonHeight>
				DActionsText		ACTION EXEC ( <THIS>.BrowseForOrigPath() )
				Tooltip				Translate( Translations,OriginalBrowseToolTip );

	DialogWidth = aDialog(GetMaxRight,Position) + $hGap * 2;
	y = WarningPrompt(GetBottom,Position);

	Define: OriginalImageGroupBox Using DDWinCtrlDef
		Fields: TypeName			GroupBox
				Text				Translate( Translations,OriginalGroupLabel )
				Position			$hGap, $y + $vGap,$DialogWidth - $hGap,OrigPathBrowseButton(GetBottom,Position) - $y + 10;

	y = OrigPathBrowseButton(GetBottom,Position);

   Define: ApplyCorrectionsCheckBox Using DDWinCtrlDef AsSymbol ApplyCorrectionsCheckBox 
        Fields: TypeName	       CheckBox
                Text			    Translate( Translations,ApplyCorrectionsLabel )
				IsEnabled			T
                Position	        <hgap> + 10, <y>+30, <StaticTextWidth> * 2, <StaticTextHeight>
				GenConName			THIS
				GenConField			~ApplyColorCorrections~
				IActionsText	    ACTIONS ( Get )
				DActionsText		ACTIONS ( Save )
				OActionsText		ACTIONS ( Save )
				Tooltip				Translate( Translations,ApplyCorrectionsToolTip );
	
   Define: EmbedProfilesCheckBox Using DDWinCtrlDef AsSymbol EmbedProfilesCheckBox 
        Fields: TypeName	       CheckBox
                Text			    Translate( Translations,EmbedProfilesLabel )
				IsEnabled			T
                Position	        <hgap> + 10, ApplyCorrectionsCheckBox(GetBottom,Position) + <vGap> * 2,<StaticTextWidth> * 2,<StaticTextHeight>
				GenConName			THIS
				GenConField			~EmbedProfiles~
				IActionsText	    ACTIONS ( Get )
				DActionsText		ACTIONS ( Save )
				OActionsText		ACTIONS ( Save )
				Tooltip				Translate( Translations,EmbedProfilesToolTip );
	
   Define: UseProfilesCheckBox Using DDWinCtrlDef AsSymbol UseProfilesCheckBox 
        Fields: TypeName	       CheckBox
                Text			    Translate( Translations,ProfilesLabel )
				IsEnabled			T
                Position	        <hgap> + 10, EmbedProfilesCheckBox(GetBottom,Position) + <vGap>,<StaticTextWidth> * 2,<StaticTextHeight>
				GenConName			THIS
				GenConField			~IgnoreProfiles~
				IActionsText	    ACTIONS ( Get )
				DActionsText		ACTIONS ( Save )
				OActionsText		ACTIONS ( Save )
				Tooltip				Translate( Translations,ProfilesToolTip );
	
	y = UseProfilesCheckBox(GetBottom,Position)+30;

	Define: ResetDefaultsButton Using DDWinCtrlDef AsSymbol ResetDefaultsButton
		Fields:	GENCONNAME			THIS
				DACTIONSTEXT		ACTION EXEC ( <THIS>.OnResetDefaultsButton() )
				POSITION			($DialogWidth/2) - ($ButtonWidth),<y>, $ButtonWidth*2, $ButtonHeight
				TEXT				Translate( Translations,ResetLabel )
				TOOLTIP				Translate( Translations,ResetToolTip )
				TYPENAME			BUTTON
				ISTABSTOP			TRUE;

	Define: GoButton Using DDWinCtrlDef AsSymbol GoButton
		Fields:	GENCONNAME			THIS
				DACTIONSTEXT		ACTION EXEC ( <THIS>.OnApplyButton() )
				POSITION			($DialogWidth/2) - ($ButtonWidth + 2),ResetDefaultsButton(GetBottom,Position) + $vGap*2, $ButtonWidth+4, $ButtonHeight
				TEXT				Translate( Translations,GoLabel )
				TOOLTIP				Translate( Translations,GoToolTip )
				TYPENAME			BUTTON
				ISTABSTOP			TRUE;

	Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
		Fields:	GENCONNAME			THIS
				DACTIONSTEXT		ACTION EXEC ( <THIS>.DoCancelButton(); )
				POSITION			GoButton(GetRight,Position) + $hGap,GoButton(GetTop,Position),
										$ButtonWidth+1, $ButtonHeight
				TEXT				Translate( Translations,CancelLabel )
				TOOLTIP				Translate( Translations,CancelToolTip )
				TYPENAME			BUTTON
				ISTABSTOP			TRUE;

	DialogHeight = GoButton( GetBottom, Position);
	return TRUE;
}


/* ***************************************************************** */
/*   Batch Setup methods                                            */


VOID KparsConfig::BrowseForDataPath()
{
	StartingDirectory = ~<$App.ShareDirectory>\KparsData~;
	StartingDirectory = MakePath( Type, UNC, ~<StartingDirectory>~);
	if ( GetSystemSettings( ~AutoRetouching~,~EnhancementDataFolder~,DefaultPath,Enabled ) )
	{
		if ( !IsNULL( ~<DefaultPath>~ ) )
		{
			StartingDirectory = ~<DefaultPath>~;
		}
	}

	dlg( GetInput,GetStrings,DataPath,DataPath );
	if ( ~<DataPath>~ != ~~)
	{
		StartingDirectory = ~<DataPath>~;
	}

	Title = Translate( Translations,BrowseDataPathTitle ); 

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,DefaultFile,Translate(~In this directory~),Path,Path,Save) )
	{
		TheDirectory = ~<$Str.$Path.Path>~;

		dlg( SetString,~<TheDirectory>~,DataPath,0 );
		dlg( GetInput,GetStrings,DataPath,DataPath );
		if ( ~<TheDirectory>~ != ~<DataPath>~ )
		{
			Warning( Translate(~The path name that you have selected contains invalid characters.\n\nThese invalid characters have been removed before placing the path name in the dialog.~) );
		}
	}
}

/* ***************************************************************** */
/*   Original Image methods                                            */

VOID KparsConfig::BrowseForOrigPath()
{
	StartingDirectory = ~<$App.Directory>\KparsData~;
	GetSystemSettings( ~AutoRetouching~,~OriginalPath~,DefaultPath,Enabled );
	if ( IsNULL( ~<DefaultPath>~ ) )
	{
		StartingDirectory = ~<DefaultPath>~;
	}

	dlg( GetInput,GetStrings,OriginalPath,OriginalPath );
	if ( ~<OriginalPath>~ != ~~)
	{
		StartingDirectory = ~<OriginalPath>~;
	}

	Title = Translate( Translations,BrowseOriginalTitle );

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,DefaultFile,Translate(~In this directory~),Path,Path,Save) )
	{
		TheDirectory = ~<$Str.$Path.Path>~;

		dlg( SetString,~<TheDirectory>~,OriginalPath,0 );
		dlg( GetInput,GetStrings,OriginalPath,OriginalPath );
		if ( ~<TheDirectory>~ != ~<OriginalPath>~ )
		{
			Warning( Translate(~The path name that you have selected contains invalid characters.\n\nThese invalid characters have been removed before placing the path name in the dialog.~) );
		}
	}
}


/* ***************************************************************** */
/*   Action Button methods                                            */

NUMERIC KparsConfig::OnResetDefaultsButton()
{
	Path = ~<$App.ShareDirectory>\KparsData~;
	StartingDirectory = MakePath( Type, UNC, ~<Path>~);
	DefaultAutoMerge = TRUE;
	DefaultBatchComplete = ~REVIEW~;
	DefaultOverwrite = FALSE;
	DefaultPrefix = ~~;
	DefaultSuffix = ~_original~;
	DefaultPath = ~~;
	DefaultCorrections = TRUE;
	DefaultIgnoreProfile = FALSE;
	LowCreditWarning = 100;
	EmbedProfiles = FALSE;
	AutoBatch = FALSE;
	SingleFace = FALSE;

	DlgData( SetValues,BatchComplete,~<DefaultBatchComplete>~,
						DataPath,~<StartingDirectory>~,OverwriteOriginal,~<DefaultOverwrite>~,
						OriginalPrefix,~<DefaultPrefix>~,OriginalSuffix,~<DefaultSuffix>~,
						OriginalPath,~<DefaultPath>~,AutoMergeOnAccept,<DefaultAutoMerge>,
						ApplyColorCorrections,<DefaultCorrections>,
						IgnoreProfiles,<DefaultIgnoreProfile>,
						 LowCreditWarning,<LowCreditWarning>,
						EmbedProfiles,<EmbedProfiles>,
						AutoBatch,<AutoBatch>,
						SingleFace,<SingleFace> );

	dlg( Update );

	return TRUE;
}

NUMERIC KparsConfig::OnApplyButton()
{
	dlg( GetInput );
	DlgData( GetValues,BatchComplete,BatchComplete,
						DataPath,DataPath,OverwriteOriginal,OverwriteOriginal,
						OriginalPrefix,OriginalPrefix,OriginalSuffix,OriginalSuffix,
						OriginalPath,OriginalPath,AutoMergeOnAccept,AutoMergeOnAccept,
						ApplyColorCorrections,ApplyColorCorrections,
						IgnoreProfiles,IgnoreProfiles,
						LowCreditWarning,LowCreditWarning,
						EmbedProfiles,EmbedProfiles,
						AutoBatch,AutoBatch,
						SingleFace,SingleFace );


	if ( strlen( ~<OriginalPrefix>~ ) > 10 )
	{
		msg = ~The Original Prefix must be 10 characters or less.~;
		return Warning( Translate( ~<msg>~ ) );
	}

	if ( strlen( ~<OriginalSuffix>~ ) > 10 )
	{
		msg = ~The Original Suffix must be 10 characters or less.~;
		return Warning( Translate( ~<msg>~ ) );
	}

	if ( <AutoBatch> )
	{
		if ( !CheckAutoBatch() )
		{
			txtMsg = ~Auto Batch is selected, but all of the setting types have not been defined.\n Select Yes to assign each of the settings to a batch setup (DarkSkinHighBlemish, DarkSkinLowBlemish, LightSkinHighBlemish, LightSkinLowBlemish) and select a Default Setting.\n Select NO to turn off AutoBatch.~;
			if ( MessageBox( Translate( ~<txtMsg>~ ),YESNO ) == YES )
			{
				Action = ACTION DOC ( RetouchBatchSetupsDoc OpenOnce RetouchBatchSetupsDoc "Init();" );
				return PerformActions( Action );
			}
			else
			{
				AutoBatch = 0;
				DlgData( SetValues,AutoBatch,0 );
			}
		}
	}

	SetSystemSettings( ~AutoRetouching~,~EnhancementDataFolder~,~<DataPath>~,TRUE );
	SetSystemSettings( ~AutoRetouching~,~BatchCompleteProcessing~,~<BatchComplete>~,TRUE );
	SetSystemSettings( ~AutoRetouching~,~AutoMergeOnAccept~,<AutoMergeOnAccept>,TRUE );
	SetSystemSettings( ~AutoRetouching~,~OverwriteOriginal~,<OverwriteOriginal>,TRUE );
	SetSystemSettings( ~AutoRetouching~,~OriginalPrefix~,~<OriginalPrefix>~,TRUE );
	SetSystemSettings( ~AutoRetouching~,~OriginalSuffix~,~<OriginalSuffix>~,TRUE );
	SetSystemSettings( ~AutoRetouching~,~OriginalPath~,~<OriginalPath>~,TRUE );
	SetSystemSettings( ~AutoRetouching~,~ApplyColorCorrections~,<ApplyColorCorrections>,TRUE );
	SetSystemSettings( ~AutoRetouching~,~IgnoreColorProfiles~,<IgnoreProfiles>,TRUE );
	SetSystemSettings( ~AutoRetouching~,~LowCreditWarning~,<LowCreditWarning>,TRUE );
	SetSystemSettings( ~AutoRetouching~,~EmbedProfiles~,<EmbedProfiles>,TRUE );
	SetSystemSettings( ~AutoRetouching~,~AutoBatch~,<AutoBatch>,TRUE );
	SetSystemSettings( ~AutoRetouching~,~SingleFace~,<SingleFace>,TRUE );
	
	DoCancelButton();

	return TRUE;
}


NUMERIC KparsConfig::DoCancelButton()
{
	return BaseDialog::DoCancelButton();
}


/* ********************************************************** */

VOID Init()
{
	if ( !Defined( KarsDefaults ) )
	{
		Class( KparsConfig,Extends,BaseDialog);
		KparsConfig( New,KarsDefaults );

		KarsDefaults.DefineDictionary();
		KarsDefaults.DefineDialog();

		Global( KarsDefaults );
		return;
	}

	KarsDefaults.ReOpen();
}

