//	CPieSettings1.cpp


ExecC() ;

unsigned char	*NULL ;
int				 FALSE = 0 ;
int				 TRUE  = ! FALSE ;

//	THE GLOBALS
UGenCon		*gDataGC ;	//	THE DATA HOLDER FOR THE DIALOG
UGenCon		*gDlgDef ;	//	THE DIALOG DEFINITION
char		*gDlg ;		//	THE ACTUAL DIALOG

int			 gClosed = FALSE ;		//	HAS THE DIALOG BEEN CLOSED ?

int main()
{
	Debug(0) ;
}


SetDialogData( UGenCon *LocalGC, char *Dlg, UGenCon *DlgDef)
{
	Debug(0) ;
	gDataGC = LocalGC ;
	gDlg = Dlg ;
	gDlgDef = DlgDef ;
}


void Close()
{
	Debug(0) ;

	if( gClosed ) { return ; }

	CloseDialog( gDlg ) ;
	gClosed = TRUE ;

	if( gDataGC )	{ delete gDataGC ; }
	gDataGC = NULL ;
}

void term()
{
	Debug(0) ;
	Close() ;
}


void Cancel()
{
	Close() ;
}


int DoIt()
{
	Debug(0) ;

	long	lVal ;
	long	FlushLog ;
	TCHAR	*TPtr ;
	
	UGenCon	*PIEGC = GetTreeObject(_T("PIEDefaultsGC"), _T("[GENCONS]")) ;

	lVal = gDataGC->GetLongValue(_T("UsePIE")) ;
	PIEGC->SetLongValue(_T("UsePIE"), lVal ) ;

	lVal = gDataGC->GetLongValue(_T("UseIntelJpeg")) ;
	PIEGC->SetLongValue(_T("UseIntelJpeg"), lVal ) ;

	FlushLog = gDataGC->GetLongValue(_T("FlushLog")) ;
	PIEGC->SetLongValue(_T("FlushLog"), FlushLog ) ;
	
	lVal = gDataGC->GetLongValue(_T("LogPIE")) ;
	if( FlushLog )	{ lVal = -lVal ; }
	PIEGC->SetLongValue(_T("LogPie"), lVal ) ;
	
	lVal = gDataGC->GetLongValue(_T("LogPIEText")) ;
	if( FlushLog )	{ lVal = -lVal ; }
	PIEGC->SetLongValue(_T("LogPieText"), lVal ) ;

	UGenCon	*VMMGC = GetTreeObject(_T("VMMDefaultsGC"), _T("[GENCONS]")) ;

	lVal = gDataGC->GetLongValue(_T("BlockSize")) ;
	VMMGC->SetLongValue(_T("BlockSize"), lVal ) ;
	
	lVal = gDataGC->GetLongValue(_T("VMMSpace")) ;
	VMMGC->SetLongValue(_T("VMMSpace"), lVal ) ;
	
	lVal = gDataGC->GetLongValue(_T("ExtraHeapSize")) ;
	VMMGC->SetLongValue(_T("ExtraHeapSize"), lVal ) ;

	lVal = gDataGC->GetLongValue(_T("nonVMMSpace")) ;
	VMMGC->SetLongValue(_T("nonVMMSpace"), lVal ) ;
	
	lVal = gDataGC->GetLongValue(_T("MaxMemSize")) ;
	VMMGC->SetLongValue(_T("MaxMemSize"), lVal ) ;

	lVal = gDataGC->GetLongValue(_T("PercentFree")) ;
	VMMGC->SetLongValue(_T("PercentFree"), lVal ) ;
	
	lVal = gDataGC->GetLongValue(_T("LogVMM")) ;
	if( FlushLog )	{ lVal = -lVal ; }
	VMMGC->SetLongValue(_T("LogVMM"), lVal ) ;
	
	lVal = gDataGC->GetLongValue(_T("VirtualMultiplier")) ;
	VMMGC->SetLongValue(_T("VirtualMultiplier"), lVal ) ;
	
	lVal = gDataGC->GetLongValue(_T("WantsStatusDlg")) ;
	VMMGC->SetLongValue(_T("WantsStatusDlg"), lVal ) ;

	TPtr = gDataGC->GetStringValue(_T("SwapFile")) ;
	VMMGC->SetAttrValue(_T("SwapFile"), TPtr ) ;

	UGenCon	*ImgGC = GetTreeObject(_T("ImgMemDefaultsGC"), _T("[GENCONS]")) ;

	lVal = gDataGC->GetLongValue(_T("LogImageMem")) ;
	if( FlushLog )	{ lVal = -lVal ; }
	ImgGC->SetLongValue(_T("LogImageMem"), lVal ) ;


	Debug(0) ;
//	Close() ;
}

void LogVMM()
{
	VMM *theVMM = GetTheVMM() ;
	theVMM->PrintAllAllocatedVMBlocks() ;
}

void ResetVMM()
{
	VMM	*theVMM = GetTheVMM() ;
	if( theVMM )
	{
		delete theVMM ;
	}
}

	//			sprintf( StatusText, _T("B%09ld_%07ld_%04ld"), Batch, Order, Item ) ;
	//			gDataGC->SetAttrValue(_T("StatusText"), StatusText ) ;
	//			DisplayControlValues( gDlg ) ;
	//			Sleep(10) ;

void DebugMe()
{
	Debug(1) ;
}

void ShowSessionLog()  
{  
	TCHAR	ProgramPath[1024] ;  
	GetSystemDirectory( ProgramPath, 1024 ) ;  
	strcat( ProgramPath, _T("\\Notepad.exe")) ;  
  
	long	 Debugging = gDataGC->GetLongValue(_T("Debugging")) ;

	TCHAR	*ExeDirectory = GetExeDirectory() ;  
	TCHAR	 FilePath[1024] ;  
	strcpy( FilePath, ExeDirectory ) ;
	if( Debugging )
	{
		strcat( FilePath, _T("\\SessionLogs\\DP2D")) ;  
	}
	else
	{
		strcat( FilePath, _T("\\SessionLogs\\DP2")) ;  
	}

	GetCurrentLogFileName( FilePath ) ;

	//	Launch the Interface Application  
	LaunchProgram( ProgramPath, FilePath ) ;  
  
}  
  
int LaunchProgram( TCHAR *AppPath, TCHAR *parm )  
{  
	TCHAR	*verb = _T("open") ;  
	TCHAR	*file = AppPath ;  
//	TCHAR	*parm = _T("C:\\Temp\\KPDM_Config.cfg") ;  
	TCHAR	 AppDir[2048] ;  
  
	GetAppDirectory( AppPath, AppDir ) ;  
  
	TCHAR	*defaultDirectory = AppDir ;  
	TCHAR	*cmd = _T("SW_SHOW") ;  
//	TCHAR	*cmd = _T("MAXIMIZE") ;  
//	TCHAR	*cmd = _T("MINIMIZE") ;  
  
	long Result = ShellExecute(verb, file, parm, defaultDirectory, cmd ) ;  
}  
  
int	GetAppDirectory( TCHAR *FullPath, TCHAR *Directory )  
{  
	strcpy( Directory, FullPath ) ;  
	long	loop ;  
	long	length = strlen( FullPath ) ;  
  
	while( length > 0 )  
	{  
		if( Directory[length] == '\\' )  
		{  
			Directory[length] = 0 ;  
			length = 0 ;  
		}  
		length-- ;  
	}  
}  

TCHAR	*GetCurrentLogFileName(TCHAR *FilePath)
{
	TCHAR	FileTemplate[2048] ;
	sprintf( FileTemplate, _T("%s\\*.txt"), FilePath ) ;

	UList	*theFileList = GetFileList( FileTemplate ) ;
	if( theFileList )
	{
		UStringList	*SortCriteria = new UStringList ;
		if( SortCriteria )
		{
			SortCriteria->SetName(_T("PieSettings: SortCriteria")) ;
			SortCriteria->AddString(_T("WrittenHigh"), FALSE ) ;
			SortCriteria->AddString(_T("WrittenLow"), FALSE ) ;

			theFileList->SortBy( SortCriteria ) ;
			
			delete SortCriteria ;
		}

		UListIterator	*anIter = new UListIterator( theFileList ) ;
		UGenCon			*aFile  = (UGenCon *) anIter->GetLast() ;
		delete anIter ;
		if( aFile )
		{
			TCHAR	*theFileName = aFile->GetStringValue(_T("FileName")) ;
			strcpy( FileTemplate, FilePath ) ;
			sprintf( FilePath, _T("%s\\%s"), FileTemplate, theFileName ) ;
		}

		delete theFileList ;
	}
	return( FilePath ) ;
}


UList *GetFileList(TCHAR *Path)
{
	long	*FileHandle ;
	char	 FileData[2048] ;
	TCHAR	 FileName[2048] ;
	TCHAR	 FileDate[1024] ;
	int		 Result ;
	long	 FileAttr ;
	long	 longHandle ;
	UGenCon	*FileDataGC ;

	UList	*theList = new UList ;

	strcpy( FileName, Path ) ;
	FileHandle = FindFirstFile( FileName, FileData ) ;
	longHandle = FileHandle ;
	if( longHandle != 0xFFFFFFFF )
	{
		FileDataGC = new UGenCon ( GetDataDictionary(_T("DDFindFileData")) ) ;
		Result = FindFileConvToGC( FileData, FileDataGC ) ;
		FindFileConvTime( FileDataGC, _T("ACCESSED"), FileDate ) ;

		theList->InsertBack(FileDataGC) ;

		FileAttr = FileDataGC->GetLongValue(_T("FileAttributes")) ;
		while( Result )
		{
			Result = FindNextFile( FileHandle, FileData ) ;
			if( Result )
			{
				FileDataGC = new UGenCon ( GetDataDictionary(_T("DDFindFileData")) ) ;
				FindFileConvToGC( FileData, FileDataGC ) ;
				theList->InsertBack(FileDataGC) ;
			}
		}

		Result = FindClose( FileHandle ) ;
	}
	return( theList ) ;
}
