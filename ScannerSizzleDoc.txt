Include: ~FormattingRoutines~;
Include: ~BremsonTransport.txt~;
Include: ~HicksTransport.txt~;
Include: ~UnitsConversion.txt~;

VOID SetupSizzleControl()
{
	Define:	SizzleControl Using DDSizzleControlDict
		Fields:	xPos				 50.
				yPos				 50.
				ScanWidth			 100.
				ScanLength			 100.
				OpticalZoom			 0
				ScanSize			 0
				NextInfoAdjusted	 0
				NextPunch			 0
				NextXOffset			 0
				NextXPos			 0.
				NextYPos			 0.
				NextScanWidth		 0.
				NextScanLength		 0.
				ScanAreaInPercent	 1
				PreviewScan			 0
				GrayScan			 0
				BitsPerPixel		 8
				ScannerSharpenAmount 0
				SharpenDelta		 0
				Rotation			 0
				Focus				 0
				AutoBalance			 0
				ColorCorrection		 0
				ApertureWidth		 ~<ApWidth>~
				ApertureHeight		 ~<ApLeng>~
				DynamicRange		 0
				Size				 1000
				redOverride			 0
				greenOverride		 0
				blueOverride		 0
				contrastOverride	 0
				brightnessOverride	 0
				DRGBRef				 ~~
				ImageBuffer			 0
				ImageBufferWidth	 0
				ImageBufferHeight	 0
				ImageBufferDepth	 0
				ImageBufferLayout	 ~~
				DisplayLastImage	 1
				LockScannerOffsets	 0
				DensityNormalization 0
				UseAnalyzerDRGBValues 1
				ICCProfile			~~
				ICCOutputProfile	~rgbMaster~
				EmbedProfile		 0
				MaxThumbNailSize	 500
				Path				 ~~ 
				FetchTimeout		(1000 * 60)
				FetchCompleteNotification	~ImageFetchComplete(%ld);~
				FetchErrorNotification		~FetchErrorNotification();~
				PreviewCompleteNotification	~PreviewComplete();~
				PreviewErrorNotification	~PreviewErrorNotification();~
				FlushCompleteNotification	~ImageFlushComplete(%ld);~
				FlushErrorNotification		~FlushErrorNotification(%ld);~
				FocusCompleteNotification	~FocusComplete();~
				FocusErrorNotification		~FocusErrorNotification();~
				PreScanNotification			~~
				ScanCompleteNotification	~~
				ScanErrorNotification		~ScanErrorNotification();~
				FileResolution				250
				AdaptiveSharpen				0
				SharpenAmount				0.0
				SharpenFaster				1
				SharpenLimit				150
				SharpenThreshold			90
				SharpenBlurAmount			0
				NoiseReductionAmount		0.0
				UseImageOverrides			0
				LutFile						~~
	;

	Global( SizzleControl );
}


DialogWidth = 460;      DialogHeight = 550;
StaticTextWidth = 60;   StaticTextHeight = 20;
EditTextWidth = 50;     EditTextHeight = 20;
ButtonWidth = 60;       ButtonHeight = 20;
ComboBoxWidth = 100;    ComboBoxHeight = 20;

MajorVersion = ~~;
MinorVersion = ~~;
LibraryLoaded = FALSE;

MAX_NUMERIC_LENGTH = 15;

UseImageOverrides = FALSE;
ContinueRunning = TRUE;
SimulateFilmDrive = FALSE;
MaxPunchNumber = 0;
MinPunchNumber = 0;
SettleTime = 0;
FilmEditorChanged = FALSE;
ForwardRewindFlag = FALSE;
ReapplyingScannerOffsets = FALSE;
LastSetupName = ~~;
ImageScanSetup = ~~;
ImageFilmType = ~~;
RollScanSetup = ~~;
RollFilmType = ~~;
OrderScanSetup = ~~;
OrderFilmType = ~~;
AutoScanAfterCal = FALSE;
LastFilmDriveSetupName = ~~;
LastFilmDriveVendorName = ~~;
FilmDirection = 0; // 0 - Forward,  1 - Reverse
FDVendor = ~~;
gFilmDriveBusy = FALSE;

MaxXIncrementsInInches = 30.00000;
MaxXIncrementsInDisplayUnits = 30.00000;
MaxXIncrements = 30000;
MaxYIncrements = 2000;

LastScanIsTestScan = FALSE;
LastOpticalZoomSetting = 0;
LastUpdateTime = 0;
LastFilmFormat = ~~;
CurrentControlsState = -1;
AutoScanDeselectPending = FALSE;
FocusNeeded = FALSE;
LastAutoDRGBAdjustments = TRUE;
LastDensityNormalization = FALSE;
MaxFullFrameWidth = 0;
CurrentScanFrame = ~0~;
LastFilmType = ~~;

// TBD Order_aDen = 0;
// TBD Order_aRed = 0;
// TBD Order_aGrn = 0;
// TBD Order_aBlu = 0;

Roll_aDen = 0;
Roll_aRed = 0;
Roll_aGrn = 0;
Roll_aBlu = 0;
Roll_cDen = 0;
Roll_cRed = 0;
Roll_cGrn = 0;
Roll_cBlu = 0;

FirstAutoScanPunch = ~~;
Rescanning = FALSE;

TensionAborted = FALSE;

JogInDirection = 0;
JogNextCommand = ~~;
JogPrevCommand = ~~;

IgnoreControlCommands = FALSE;
FrameInserted = FALSE;
FinishScanCommand = ~~;
ExpectedNextPunch = 0;

DisplayUnits = ~Inches~;

NUMERIC LoadScannerRoutines()
{
	dlg( GetInput );

	SimulateTheScanner = DlgData( GetNumeric,Simulating );

	LibraryLoaded = FALSE;

	dlg( GetInput );

	SimulateTheScanner = DlgData( GetNumeric,Simulating );

	path = ~<$App.Directory>\3570phpi.dll~;

	ForgetGlobal( Scanner );

	if (  !<ScannerModel>( Scanner,Simulating,<SimulateTheScanner> ) )
	{
		err = GetLastErrorMsg();
		return Warning( Translate( ~Error starting the scanning software.  <err>~ ) );
	}

	if (  !Scanner( LoadLib,~<path>~ ) )
	{
		LibraryLoaded = FALSE;
		err = GetLastErrorMsg();
		return Warning( Translate( ~Error loading <path>.  This may be caused by not having your SCSI Driver (ASPI) loaded.  <err>~ ) );
	}

	LibraryLoaded = TRUE;
	
	if ( !Scanner( Create,Version,MajorVersion,MinorVersion ) )
	{
		err = GetLastErrorMsg();
		return Warning( Translate( ~Error initializing the scanning software..  <err>~ ) );
	}

	Global( Scanner );

	Log( Session,~3570 Firmware Version <MajorVersion>.<MinorVersion>~ );

	SetTraceCallsFlag();

	return TRUE; 
}


VOID OnSimulateCheckBox()
{
	ForgetGlobal( Scanner );
	LoadScannerRoutines();
}


VOID SetTraceCallsFlag()
{
	if ( !Defined( Scanner ) )
	{
		return;
	}

	TraceCalls = ~<$Con.DlgData[TraceCalls]>~;
	Scanner( SetTraceCallsFlag,~<TraceCalls>~ );
}


VOID SetTimeCallsFlag()
{
	if ( !Defined( Scanner ) )
	{
		return;
	}
}


ScannersFound = 0;

NUMERIC FindScanner( Search )
{
	if ( !Defined( Scanner ) || <Search> )
	{
		ScannersFound = 0;

		if ( !LoadScannerRoutines() )
		{
			return FALSE;
		}
	}

	if ( (<Search> == 0) && ($ScannersFound > 0) )
		{ return TRUE; }

	dlg( SetStatus,0,~Searching for scanners~ );

	ScannersFound = 0;

	if ( !Scanner( Find,ScannerCount ) )
	{
		Msg = Translate( ~No scanners found. Check power, cabling and ensure that there are not two devices at the same SCSI ID.~ );
		dlg( SetStatus,0,~No scanners found~ );
		return Warning( Translate( ~<Msg>~ ) );
	}

	ScannersFound = <ScannerCount>;

	Scanner( Select,0 );
	Bus = Scanner( Bus,0 );
	Unit = Scanner( Unit,0 );

	Scanner( Abort );

	if ( <ScannerCount> == 1 )
	{
		dlg( SetStatus,0,~Found 1 Scanner.  Using Scanner at Bus <Bus>, ID <Unit> ~ );
	}
	else
	{
		dlg( SetStatus,0,~Found <ScannerCount> Scanners.  Using Scanner at Bus <Bus>, ID <Unit> ~ );
	}
	
	return TRUE;
}


VOID SelectATab( num )
{
	if ( Defined( dlg ) )
	{
		dlg( SelectTab,TabWindow,~<num>~ );
	}
}


NUMERIC GetMagCalData()
{
	if ( !FindScanner(FALSE) )
	{
		return FALSE;
	}

	DlgData( Get,FilmType,FilmType );
	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>.flt~;
	result = Scanner( IsColorFilterPositionCorrect,~<FilmTermsFile>~ );
	if ( <result> == -1 )
	{
		ErrMsg = Translate( ~Could not find or load <FilmTermsFile>.~ );
		return FALSE;
	}
	if ( <result> == FALSE )
	{
		Warning( Translate( ~The color filter is not in the correct position for this film type.\nMake sure the filter is in the correct position and then\nselect OK to continue.~ ) );
	}

	startMag = 0.55;
	endMag = 2.0;
	incr = 0.05;
	dlg( SetStatus,0,~<startMag> to <endMag>, increment <incr>.~ );

	Scanner( GetMagCalData, <startMag>, <endMag>, <incr> );

	return TRUE;
}

NUMERIC RestartScanner()
{
	ForgetGlobal( Scanner );
	return FindScanner(TRUE);
}



NUMERIC SetCalibrationPath( MustExist,DisplayMessage )
{
	SetupScannerParms();

	CalibrationFile = ~<$con.DlgData[Format]>$<$Con.DlgData[OpticalZoom]>~;

	if ( ~<CalibrationFile>~ != ~~ )
	{
		if ( !Directory( Create,~<CalibrationDirectory>~ ) )
		{
			return Warning( Translate( ~Could not create directory <CalibrationDirectory>~ ) );
		}

		Scanner( SetCalDataPath,~<CalibrationDirectory>~ );
		Scanner( SetCalDataName,~<CalibrationFile>~ );

		if ( <MustExist> )
		{
			if ( !Files( FileExists,~<CalibrationDirectory>\<CalibrationFile>~ ) ) 
			{
				if ( <DisplayMessage> )
				{
					Warning( Translate( ~Calibration for <CalibrationFile> does not exist.  You will have to calibrate.~ ) );
				}
				return FALSE;
			}
		}
	}
	else
	{ 
		return Warning( Translate( ~There is no calibration file specifed~ ) );
	}

	return TRUE;
}


NUMERIC OnReloadButton( DisplayMessage )
{
	if (!ReloadSizzle( <DisplayMessage> ))
	{
		return FALSE;
	}

	return TRUE;
}


NUMERIC ReloadSizzle( DisplayMessage )
{
	if ( !SetCalibrationPath(TRUE,<DisplayMessage>) )
	{
		return FALSE;
	}

	TheCalFile = ~<$con.DlgData[Format]>$<$Con.DlgData[OpticalZoom]>~;

	dlg( SetStatus,0,~Loading Previous Calibration: <TheCalFile>~ );

	Scanner( ReLoadComplete );

	dlg( SetStatus,0,~Previous Calibration <TheCalFile> was loaded~ );

	return TRUE;
}


NUMERIC DiskSpaceOK()
{
	ScanWidth = GetScanWidth();
	ScanLength = GetScanLength();

	// Make sure there is enough space for 2X the size of the current scan. 
	scanSize = RoundToDigit((<ScanWidth> * <ScanLength> * 3.0 * 2.0) / (1024.0 * 1024.0), 1);

	dlg( GetStrings,Volume,Volume );

	Directory( Create,~<Volume>~ );

	diskSpace = GetDiskFreeMb(~<Volume>~);

	if ( <scanSize> <= <diskSpace> )
	{
		return TRUE;
	}
	if ( !Files( DirectoryExists, ~<Volume>~ ) )
	{
		return Warning( Translate( ~The requested scan path/volume does not exist.~ ) );
	}
	return Warning( Translate( ~You are running out of disk space on the specified volume.\n\nCreate some free disk space or specify a different volume to\nscan to and then try the operation again.~ ) );
}


VOID CheckScanWidthLengthMin( )
{
	adjustWL = FALSE;
	scanWidthMin = scanLengthMin = 2.0;
	Msg = ~~;

	scanWidth = atof(~<$con.DlgData[ScanWidth]>~);
	scanLength = atof(~<$con.DlgData[ScanLength]>~);

	if ( ( <scanWidth> < <scanWidthMin> ) && ( <scanLength> < <scanLengthMin> ) )
	{
		Msg = Translate( ~The scan area width and length are below the minimum\nallowed width and length. The scan area will automatically\nbe set to the minimum width and length.~ );
		adjustWL = TRUE;
	}
	else if ( <scanWidth> < <scanWidthMin> )
	{
		Msg = Translate( ~The scan area width is below the minimum allowed width.\nThe scan area will automatically be set to the minimum width.~ );
		adjustWL = TRUE;
	}
	else if ( <scanLength> < <scanLengthMin> )
	{
		Msg = Translate( ~The scan area height is below the minimum allowed height.\nThe scan area will automatically be set to the minimum height.~ );
		adjustWL = TRUE;
	}

	if ( <adjustWL> )
	{
		MessageBox( ~<Msg>~, OK );
		AdjustScanWL( <scanWidthMin>,<scanLengthMin> );
	}
}


NUMERIC GetScanWidth()
{
	ResIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
	ScanWidth = atof(MaxWidths( ValueOf,$ResIndex ));

	ScanWidth = (<ScanWidth>) * (atof(~<$con.DlgData[ScanWidth]>~) / 100.0);

	ScanWidth = floor(<ScanWidth>);
	return <ScanWidth>;
}


NUMERIC GetScanLength()
{
	ResIndex = ResolutionNames( IndexOf,~<$Con.DlgData[ScanResolution]>~ );
	ScanLength = atof(MaxLengths( ValueOf,$ResIndex ));

	ScanLength = (<ScanLength>) * (atof(~<$con.DlgData[ScanLength]>~) / 100.0);

	ScanLength = floor(<ScanLength>);
	return <ScanLength>;
}


NUMERIC CalibrationOK( DisplayMessage )
{
	DesiredMag = ~<$Con.DlgData[Format]>~;

	SetMagnification( FALSE );

	if ( !Scanner( NeedCalibration ) )
	{
		return TRUE;
	}

	RestartScanner();

	if ( !DlgData( GetNumeric,Simulating ) )	// SO WE DON'T NEED CALIBRATIONS
	{
		if ( !OnReloadButton( <DisplayMessage> ) )
			{ return FALSE; }
	}

	SetMagnification( FALSE );

	if ( Scanner( NeedCalibration ) )
	{
		return FALSE;
	}

	return TRUE; 
}



VOID OnIgnoreCalTimeoutCheckbox()
{
	dlg( GetInput );

	if ( DlgData(GetNumeric,IgnoreCalTimeout) )
	{
		dlg( EnableControls,FALSE,CalTimeoutField );
	}
	else
	{
		dlg( EnableControls,TRUE,CalTimeoutField );
	}
	
}

VOID SetupTheScanner( IsPreview,TestScan,FullScanArea )
{
	MagIndex = MagNames( IndexOf,~<$Con.DlgData[Format]>~ );
	ApertureWidth	= atof(ApertureWid(ValueOf,$MagIndex));
	ApertureHeight	= atof(ApertureLen(ValueOf,$MagIndex));
	DPI = atof(Magnifications(ValueOf,$MagIndex));
	SizzleControl( SetValues,APERTUREWIDTH, <ApertureWidth>,
				   APERTUREHEIGHT,<ApertureHeight>,DPI,<DPI> );

	ResIndex = ResolutionNames( IndexOf,<IsPreview> ? ~LOW~ : ~<$Con.DlgData[ScanResolution]>~ );
	Size	 = atof(Resolutions( ValueOf,$ResIndex ));
	Depth	 = 3;
	Rotation = DlgData( GetNumeric,ScanRotation );

	SizzleControl( SetValues,DEPTH,<Depth>,SIZE,<Size>,Rotation,<Rotation> );

	SizzleControl( SetValues,RedOverride,DlgData(GetNumeric,RedOverride),
							GreenOverride,DlgData(GetNumeric,GreenOverride),
							BlueOverride,DlgData(GetNumeric,BlueOverride),
							BrightnessOverride,DlgData(GetNumeric,BrightnessOverride),
							ContrastOverride,DlgData(GetNumeric,ContrastOverride) );

	SizzleControl( SetValues,saDensity,DlgData(GetNumeric,saDensity),
							saRed,DlgData(GetNumeric,saRed),
							saGreen,DlgData(GetNumeric,saGreen),
							saBlue,DlgData(GetNumeric,saBlue) );

	SizzleControl( SetValues,dDensity,DlgData(GetNumeric,dDensity),
							dRed,DlgData(GetNumeric,dRed),
							dGreen,DlgData(GetNumeric,dGreen),
							dBlue,DlgData(GetNumeric,dBlue) );

	SizzleControl( SetValues,SaveFileType,~<$con.DlgData[SaveFileType]>~,FileExtension,~<$con.DlgData[FileExtension]>~,JPEGQuality,DlgData(GetNumeric,JPEGQuality),
							MaxThumbNailSize,DlgData(GetNumeric,MaxThumbNailSize) );
	if ( <FullScanArea> )
	{
		SizzleControl( SetValues,xPos,50,yPos,50,ScanWidth,100,ScanLength,100 );
	}
	else
	{
		SizzleControl( SetValues,xPos,DlgData(GetNumeric,xPos),yPos,DlgData(GetNumeric,yPos),
							ScanWidth,DlgData(GetNumeric,ScanWidth),ScanLength,DlgData(GetNumeric,ScanLength) );
	}

	SizzleControl( SetValues,CropX,DlgData(GetNumeric,CropX),CropY,DlgData(GetNumeric,CropY),
							CropWidth,DlgData(GetNumeric,CropWidth),CropLength,DlgData(GetNumeric,CropLength) );

	SizzleControl( SetValues,DumpRawData,DlgData(GetNumeric,DumpRawData) );
	SizzleControl( SetValues,LogActivity,DlgData(GetNumeric,LogActivity) );
	SizzleControl( SetValues,TraceCalls,DlgData(GetNumeric,TraceCalls) );
	SizzleControl( SetValues,TimeCalls,DlgData(GetNumeric,TimeCalls) );
	SizzleControl( SetValues,ScannerProfileEnabled,DlgData(GetNumeric,ScannerProfileEnabled),OutputProfileEnabled,DlgData(GetNumeric,OutputProfileEnabled) );
	SizzleControl( SetValues,ICCProfile,~<$con.DlgData[ICCProfile]>~,ICCOutputProfile,~<$con.DlgData[ICCOutputProfile]>~ );
	SizzleControl( SetValues,EmbedProfile,DlgData(GetNumeric,EmbedProfile));
	SizzleControl( SetValues,TestScan,<TestScan> );

	SizzleControl( SetValues,DisplayLastImage,DlgData( GetNumeric,DisplayLastImage ) );
	SizzleControl( SetValues,LockScannerOffsets,DlgData( GetNumeric,LockScannerOffsets ) );
	SizzleControl( SetValues,DensityNormalization,DlgData( GetNumeric,DensityNormalization ) );
	SizzleControl( SetValues,UseAnalyzerDRGBValues,DlgData( GetNumeric,UseAnalyzerDRGBValues ) );

	SizzleControl( SetValues,FileResolution,DlgData( GetNumeric,FileResolution ) );

	SizzleControl( SetValues,SharpenDelta,DlgData( GetNumeric,SharpenDelta ) );

	SizzleControl( SetValues,AdaptiveSharpen,DlgData( GetNumeric,AdaptiveSharpen ) );
	SizzleControl( SetValues,SharpenAmount,DlgData( GetNumeric,SharpenAmount ) );
	SizzleControl( SetValues,SharpenFaster,DlgData( GetNumeric,SharpenFaster ) );
	SizzleControl( SetValues,SharpenLimit,DlgData( GetNumeric,SharpenLimit ) );
	SizzleControl( SetValues,SharpenThreshold,DlgData( GetNumeric,SharpenThreshold ) );
	SizzleControl( SetValues,SharpenBlurAmount,DlgData( GetNumeric,SharpenBlurAmount ) );

	SizzleControl( SetValues,NoiseReductionAmount,DlgData( GetNumeric,NoiseReductionAmount ) );

	DlgData( Get,LutFile,LutFile );	
	SizzleControl( Set,LutFile,~<LutFile>~ );

	SizzleControl( SetValues,UseImageOverrides,<UseImageOverrides> );
}


NUMERIC LoadSlopeLut(SlopeLutFile)
{
	if ( ~<SlopeLutFile>~ == ~~ )
	{
		ForgetGlobal( ActualSlopeLut );
	}
	else if ( !Defined( ActualSlopeLut ) )
	{
		if ( !Lut( ActualSlopeLut,Rows,601,Cols,4,Load,~<SlopeLutFile>~ ) )
		{
			Msg = Translate( ~Could not load the Slope Lut File: <SlopeLutFile>.\nPlease correct the saved DRGB Reference Data.~ );
			return Warning( ~<Msg>~ );
		}
		Global( ActualSlopeLut );
	}
	else
	{
		if ( !ActualSlopeLut( Load,~<SlopeLutFile>~ ) )
		{
			Msg = Translate( ~Could not load the Slope Lut File: <SlopeLutFile>.\nPlease correct the saved DRGB Reference Data.~ );
			return Warning( ~<Msg>~ );
		}
	}
	
	return TRUE;	
}			



NUMERIC ScanOne( Focusing,Preview,TestScan,FocusBeforeScan )
{
	FinishScanCommand = ~~;
	if ( !FindScanner(FALSE) )	{ return FALSE; }

	SizzleControl( SetValues,Focus,<Focusing> || <FocusBeforeScan> );

	SetupTheScanner(<Preview>,<TestScan>,FALSE);

	if ( !SetScanWindow() )
	{
		return FALSE;
	}

	dlg( SetString,~10~,Progress,0 );

	ReapplyingScannerOffsets = FALSE;


	SizzleControl( Get, PreScanNotification, PreScanNotification );
	if ( DefinedAndNotNull( PreScanNotification ) )
	{
		<PreScanNotification>;
	}

	DlgData( Get,DRGBRefs,DRGBRefs );
	SizzleControl( Set,DRGBRef,~<DRGBRefs>~ );

	if ( $Focusing )
	{
		Scanner( FocusAsync, SizzleControl );
		dlg( SetStatus,0,~Focusing~ );
		FocusNeeded = FALSE;
	}
	else if ( <Preview> )
	{
		Scanner( PreviewScanAsync, SizzleControl );
		dlg( SetStatus,0,~Scanning~ );
	}
	else if ( <FocusBeforeScan> )
	{
		FocusBeforeScan = FALSE;
		FocusNeeded = FALSE;
		FinishScanCommand = STR ( ScanOne( FALSE,FALSE,<TestScan>,FALSE ) );
		Scanner( FocusAsync, SizzleControl );
		dlg( SetStatus,0,~Focusing~ );
		return TRUE;
	}
	else
	{
		Scanner( ScanAsync, SizzleControl );
		dlg( SetStatus,0,~Scanning~ );
	}

	UpdateFreeDiskSpace();

	return TRUE;
}


NUMERIC DefineFileTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	Helpfile = ~S_Output.htm~;
    Define: Tab<tab> Using DDWinCtrlDef AsSymbol TheFileTab 
        Fields: Text            ~Output~
                TypeName        Tab
                Tooltip         ~Setup Parameters for image files saved to disk~
				HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		TextWidth = 90;

        Define: FileTypeStaticText Using DDWinCtrlDef AsSymbol FileTypeStaticText 
                Fields: TypeName        StaticText
                        Text            ~File Type~
						RightJustified	TRUE
                        Position        <x> , <y>,  <TextWidth> , <StaticTextHeight>

        Define: FileTypeComboBox Using DDWinCtrlDef AsSymbol FileTypeComboBox 
                Fields: TypeName		SComboBox  
                        Position		FileTypeStaticText(GetRight,Position) + $hGap, FileTypeStaticText(Gettop,Position),<ComboBoxWidth> ,<ComboBoxHeight> 
                        IActionsText    ~[GetList(OutputFileTypes) Get]~
						DActionsText	~[Save Exec("OnFileTypeChange(FALSE)")]~
                        OActionsText    ~[Save]~
                        GenConName       THIS
                        GenConField      ~SaveFileType~
                        Tooltip          ~Select a file type~

		Define: JPEGQualityPrompt Using DDWinCtrlDef AsSymbol JPEGQualityPrompt
				Fields:	POSITION		FileTypeComboBox(GetRight,Position) + $hGap + 10,FileTypeComboBox(GetTop,Position),40,$StaticTextHeight
						TEXT			Translate( ~Quality~ )
						TYPENAME		StaticText

		Define: JPEGQualityField Using DDWinCtrlDef AsSymbol JPEGQualityField
				Fields:	DACTIONSTEXT	ACTIONS ( Save Update(JPEGQualitySlider) )
						GENCONFIELD		~JPEGQuality~
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		JPEGQualityPrompt(GetRight,Position) + $hGap,JPEGQualityPrompt(GetTop,Position),30,$StaticTextHeight
						TEXT			~~
						TOOLTIP			~Adjust the quality of the EXIF or JPEG file for the scanned images~
						TYPENAME		MaskedEditText
						Mask			~###~
						PromptChar		~ ~ 
						IsTabStop		T;


		Define: JPEGQualitySlider Using DDWinCtrlDef AsSymbol JPEGQualitySlider
				Fields:	DACTIONSTEXT	ACTIONS ( Save Update(JPEGQualityField) )
						GENCONFIELD		~JPEGQuality~
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		JPEGQualityField(GetRight,Position) + $hGap,JPEGQualityField(GetTop,Position),80 $StaticTextHeight
						TOOLTIP			~Adjust the quality of the EXIF or JPEG file for the scanned images~
						TYPENAME		~SLIDER~ 
						UNITS			1 ;

       Define: ExtensionPrompt Using DDWinCtrlDef AsSymbol ExtensionPrompt 
                Fields: TypeName		StaticText
                        Text			~Extension~
						RightJustified	TRUE
                        Position		$x,FileTypeStaticText(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>
 		
		Define: ExtensionField Using DDWinCtrlDef AsSymbol ExtensionField 
				Fields: TypeName		MaskedEditText  
						//Position		ExtensionPrompt(GetRight,Position) + $hGap,ExtensionPrompt(Gettop,Position),<ComboBoxWidth> ,<ComboBoxHeight> 
						//IActionsText  ~[GetList(OutputFileExtensions) Get]~
						Position		ExtensionPrompt(GetRight,Position) + $hGap,ExtensionPrompt(Gettop,Position),<ComboBoxWidth> ,20 
						IActionsText    ~[Get]~
						OActionsText    ~[Save]~
						GenConName       THIS
						GenConField      ~FileExtension~
						Mask			~%%%%%%~
						PromptChar		~ ~		
						Tooltip			~Extension to concatenate to the file name (ex.  .jpg  .tif)~

        Define: ViewingSizePrompt Using DDWinCtrlDef AsSymbol ViewingSizePrompt 
                Fields: TypeName		StaticText
                        Text			~Thumbnail Size~
						RightJustified	TRUE
                        Position		$x,ExtensionPrompt(GetBottom,Position) + $vGap*5,<TextWidth>,<StaticTextHeight>
 
        Define: ViewingSizeField Using DDWinCtrlDef AsSymbol ViewingSizeField 
                fields: TYPENAME		MaskedEditText
						Mask			~###~
						PromptChar		~ ~ 
                        Position		ViewingSizePrompt(GetRight,Position) + $hGap,ViewingSizePrompt(Gettop,Position),<EditTextWidth>, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~MaxThumbNailSize~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsTabStop		T
                        Tooltip			~Length of longest side (in pixels) of the thumbnail image that is embedded in the scanned image~

        Define: XResolutionStaticText Using DDWinCtrlDef AsSymbol XResolutionStaticText 
                Fields: TypeName		StaticText
                        Text			~Resolution~
						RightJustified	TRUE
                        Position		<x>,ViewingSizePrompt(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>

        Define: XResolutionEditText Using DDWinCtrlDef AsSymbol XResolutionEditText 
                fields: TypeName		MaskedEditText
                        Position		XResolutionStaticText(GetRight,Position) + $hGap,XResolutionStaticText(Gettop,Position),<EditTextWidth>, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~FileResolution~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsTabStop		T
                        Tooltip			~Enter the resolution in pixels per inch that would be used by other applications that export postscript~
						Mask			~#####~
						PromptChar		~ ~ ;
		IF 0
		{
			Define: IconStaticText Using DDWinCtrlDef AsSymbol IconStaticText 
					Fields: TypeName		StaticText
							Text			~Icon~
							Position		<x>,XResolutionStaticText(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>

			Define: SaveWithIconCheckBox Using DDWinCtrlDef AsSymbol SaveWithIconCheckBox 
					Fields: TypeName		CheckBox
							GenConName		THIS
							GenConField		~Icon~
							Text			~~
							Position		IconStaticText(GetRight,Position) + $hGap,IconStaticText(GetTop,Position),100, <StaticTextHeight>
							IActionsText	~[Get]~
							OActionsText	~[Save]~
							Tooltip			~Show an icon of the image in Explorer~
		}

		Define: SharpenDeltaStaticText Using DDWinCtrlDef AsSymbol SharpenDeltaStaticText 
                Fields: TypeName		StaticText
                        Text			~Delta Sharpening~
						RightJustified	TRUE
                        Position		<x>,XResolutionEditText(GetBottom,Position) + $vGap*5,<TextWidth>,<StaticTextHeight>

        Define: SharpenDeltaEditText Using DDWinCtrlDef AsSymbol SharpenDeltaEditText 
                Fields: TypeName		MaskedEditText
                        Position		SharpenDeltaStaticText(GetRight,Position) + $hGap,SharpenDeltaStaticText(Gettop,Position),<EditTextWidth>, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~SharpenDelta~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsTabStop		T
						Mask			~####~
						PromptChar		~ ~ 
						AllowedChars	~-~ 
                        Tooltip			~Specify a delta sharpening amount to be stored for the scanned image in the database~;

       Define: LutFileStaticText Using DDWinCtrlDef AsSymbol LutFileStaticText 
                Fields: TypeName		StaticText
                        Text			~Scanner Lut~
						RightJustified	TRUE
                        Position		<x>,SharpenDeltaStaticText(GetBottom,Position) + $vGap*5,<TextWidth>,<StaticTextHeight>

        Define: LutFileEditText Using DDWinCtrlDef AsSymbol LutFileEditText 
                Fields: TypeName		EditText
                        Position		LutFileStaticText(GetRight,Position) + $hGap,LutFileStaticText(Gettop,Position),250, <EditTextHeight>
                        GenConName		THIS
                        GenConField		~LutFile~
                        IActionsText	~[Get]~
                        OActionsText    ~[Save]~
						IsEnabled		T
						IsTabStop		T
                        Tooltip			~Select a linearization lut to apply to the image~

		Define: LutFileBrowseButton Using DDWinCtrlDef AsSymbol LutFileBrowseButton 
				Fields: TypeName		Button
						Text			Translate(~?~)
						Position		LutFileEditText(GetRight,Position) + $hGap,LutFileEditText(GetTop,Position), <StaticTextHeight>,  <StaticTextHeight>
						IsEnabled		T
						DActionsText	ACTION EXEC ( BrowseForLutFilePath() )
						TOOLTIP			~Find a Lut to apply to the scanned image~

 		Define: EmbedProfileBox Using DDWinCtrlDef AsSymbol EmbedProfileBox 
				Fields: TypeName		CheckBox
						Text			Translate( ~Embed Profile~ )
						Position		LutFileEditText(GetRight,Position),LutFileBrowseButton(GetBottom,Position) + $vGap*2, <StaticTextWidth> +25,  <StaticTextHeight>
						GenConName		THIS
                        GenConField		~EmbedProfile~	
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						IsEnabled		T
						Tooltip         ~Embed profile in image: if the Storage Profile is enabled, embed the Storage Profile, if the Scanner Profile is enabled, embed the Scanner Profile.~;

       Define: ScannerProfileStaticText Using DDWinCtrlDef AsSymbol ScannerProfileStaticText 
                Fields: TypeName        StaticText
                        Text            ~Scanner Profile~
						RightJustified	TRUE
                        Position		<x>,EmbedProfileBox(GetBottom,Position) + $vGap,
										<TextWidth>,<StaticTextHeight>

        Define: ScannerProfileComboBox Using DDWinCtrlDef AsSymbol ScannerProfileComboBox 
                Fields: TypeName		SComboBox  
                        Position		ScannerProfileStaticText(GetRight,Position) + $hGap,ScannerProfileStaticText(Gettop,Position),250 ,<ComboBoxHeight> 
                        IActionsText	ACTION EXEC ( RefreshScannerProfilesComboBox(TRUE) )
						DropDownActionsText ACTION CALL ( RefreshScannerProfilesComboBox(FALSE) )
						DActionsText		~[Save Exec("OnProfileChange(TRUE)")]~
                        OActionsText    ~[Save]~
                        GenConName       THIS
                        GenConField      ~ICCProfile~
                        Tooltip          ~Select the profile that characterizes the scanner~

		Define: ScannerProfileEnabledBox Using DDWinCtrlDef AsSymbol ScannerProfileEnabledBox 
				Fields: TypeName		CheckBox
						Text			Translate( ~Enabled~ )
						Position		ScannerProfileComboBox(GetRight,Position) + ($hGap * 1),ScannerProfileComboBox(GetTop,Position), <StaticTextWidth>+10,  <StaticTextHeight>
						GenConName		THIS
                        GenConField		~ScannerProfileEnabled~	
						IActionsText    ACTIONS ( Get )
						DActionsText	ACTION EXEC ( OnChangeProfilesEnabled() )
						OActionsText	ACTIONS ( Save )
						Tooltip         ~Enable or disable the use of the selected scanner profile~

      Define: OutputProfileStaticText Using DDWinCtrlDef AsSymbol OutputProfileStaticText 
                Fields: TypeName        StaticText
                        Text            ~Storage Profile~
						RightJustified	TRUE
                        Position		<x>,ScannerProfileStaticText(GetBottom,Position) + $vGap,<TextWidth>,<StaticTextHeight>

        Define: OutputProfileComboBox Using DDWinCtrlDef AsSymbol OutputProfileComboBox 
                Fields: TypeName			SComboBox  
                        Position			OutputProfileStaticText(GetRight,Position) + $hGap,OutputProfileStaticText(Gettop,Position),250 ,<ComboBoxHeight> 
                        IActionsText		ACTION EXEC ( RefreshOuputProfilesComboBox(TRUE) )
                        OActionsText		~[Save]~
                        GenConName			THIS
                        GenConField			~ICCOutputProfile~
						DropDownActionsText ACTION CALL ( RefreshOuputProfilesComboBox(FALSE) )
						DActionsText		~[Save Exec("OnProfileChange(FALSE)")]~
                        Tooltip				~Select the profile that describes the color space to store the image in~
 
 		Define: OutputProfileEnabledBox Using DDWinCtrlDef AsSymbol OutputProfileEnabledBox 
				Fields: TypeName		CheckBox
						Text			Translate( ~Enabled~ )
						Position		OutputProfileComboBox(GetRight,Position) + ($hGap * 1),OutputProfileComboBox(GetTop,Position), <StaticTextWidth>+10,  <StaticTextHeight>
						GenConName		THIS
                        GenConField		~OutputProfileEnabled~	
						IActionsText    ACTIONS ( Get )
						DActionsText	ACTION EXEC ( OnChangeProfilesEnabled() )
						OActionsText	ACTIONS ( Save )
						Tooltip         ~Enable or disable the use of the selected storage profile~
    }

    return OutputProfileStaticText(GetBottom,Position);
}

NUMERIC DefineFilterTab( tab,&x,&CurrentY,&hGap,&vGap,&TabWidth,&TabHeight )
{
	Helpfile = ~S_Filter.htm~;
    Define: Tab<tab> Using DDWinCtrlDef AsSymbol TheFilterTab 
        Fields: Text            ~Filter~
                TypeName        Tab
                Tooltip         ~Setup Parameters for applying filters to images~
				HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		TextWidth = 60;

		Define: SharpenFasterButton Using DDWinCtrlDef AsSymbol SharpenFasterButton
			Fields: TypeName		RadioButton
					POSITION		$x+25, $CurrentY+10, 75, 15
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateSharpenFasterSetting(TRUE))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~SharpenFaster~
					RadioTrueValue	TRUE
					Text			Translate(~Faster~)
					Tooltip			~Sharpen the image using the faster sharpening method~;

		Define: SharpenHigherQualityButton Using DDWinCtrlDef AsSymbol SharpenHigherQualityButton
			Fields: TypeName		RadioButton
					POSITION		SharpenFasterButton(GetRight,Position) + $hGap, $CurrentY+10, 90, 15
					IActionsText	~[Get]~
					DActionsText	~[ "Exec(UpdateSharpenFasterSetting(FALSE))" ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~SharpenFaster~
					RadioTrueValue	FALSE
					Text			Translate(~Higher Quality~)
					Tooltip			~Sharpen the image using the higher quality sharpening method~;

		Define: SharpenAmountPrompt Using DDWinCtrlDef AsSymbol SharpenAmountPrompt
			Fields:	POSITION		$x+5, SharpenFasterButton(GetBottom,Position)+$vGap*2, <TextWidth>, $StaticTextHeight
					TEXT			~Amount~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenAmountField Using DDWinCtrlDef AsSymbol SharpenAmountField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenAmountSlider) "Exec(OnSharpenChange())")
					GENCONFIELD		~SharpenAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenAmountPrompt(GetRight,Position) + $hGap), SharpenFasterButton(GetBottom,Position)+$vGap*2, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Percentage of sharpening to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					PromptChar		~ ~ ;

		Define: SharpenAmountSlider Using DDWinCtrlDef AsSymbol SharpenAmountSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenAmountField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenAmountField(GetRight,Position), SharpenFasterButton(GetBottom,Position)+$vGap*2, 250, $EditTextHeight
					TOOLTIP			~Percentage of sharpening to apply to the image~
					TYPENAME		~SLIDER~ 
					UNITS			1 ;

		Define: SharpenAmountMinusButton Using DDWinCtrlDef AsSymbol SharpenAmountMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenAmount(-1,0,2000))" Update(SharpenAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenAmountSlider(GetRight,Position)+$hGap * 2, SharpenFasterButton(GetBottom,Position)+$vGap*2, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					TEXT			~-~;

		Define: SharpenAmountZeroButton Using DDWinCtrlDef AsSymbol SharpenAmountZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenAmount(0,0,2000))" Update(SharpenAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenAmountMinusButton(GetRight,Position) + $hGap, SharpenFasterButton(GetBottom,Position)+$vGap*2, 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					TEXT			~0~

		Define: SharpenAmountPlusButton Using DDWinCtrlDef AsSymbol SharpenAmountPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenAmount(1,0,2000))" Update(SharpenAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenAmountZeroButton(GetRight,Position)+$hGap, SharpenFasterButton(GetBottom,Position)+$vGap*2, 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					TEXT			~+~;

		Define: AdaptiveSharpenCheckBox Using DDWinCtrlDef AsSymbol AdaptiveSharpenCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~AdaptiveSharpen~
					Text			Translate( ~Adaptive Sharpen~ )
					DActionsText	ACTIONS ( Save "Exec(OnSharpenChange())")
					Position		$x+30,SharpenAmountPlusButton(GetBottom,Position) + $vGap*3,120, 15
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					IsEnabled		F
					Tooltip			Translate( ~Use adaptive sharpening~ );

 		Define: SharpenLimitPrompt Using DDWinCtrlDef AsSymbol SharpenLimitPrompt
			Fields:	POSITION		$x+5, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, <TextWidth>, $StaticTextHeight
					TEXT			~Limit~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenLimitField Using DDWinCtrlDef AsSymbol SharpenLimitField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenLimitSlider) "Exec(OnSharpenChange())")
					GENCONFIELD		~SharpenLimit~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenLimitPrompt(GetRight,Position) + $hGap), AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Limit of sharpening to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					IsEnabled		F
					PromptChar		~ ~ ;

		Define: SharpenLimitSlider Using DDWinCtrlDef AsSymbol SharpenLimitSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenLimitField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenLimit~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenLimitField(GetRight,Position) , AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 250, $EditTextHeight
					TOOLTIP			~Limit of sharpening to apply to the image~
					TYPENAME		~SLIDER~ 
					IsEnabled		F
					UNITS			1 ;

		Define: SharpenLimitMinusButton Using DDWinCtrlDef AsSymbol SharpenLimitMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenLimit(-1,10,255))" Update(SharpenLimitSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenLimitSlider(GetRight,Position)+$hGap * 2, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~-~;

		Define: SharpenLimitZeroButton Using DDWinCtrlDef AsSymbol SharpenLimitZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenLimit(0,10,255))" Update(SharpenLimitSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenLimitMinusButton(GetRight,Position) + $hGap, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 15, $EditTextHeight
					TOOLTIP			~Reset to minimum (10)~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~0~

		Define: SharpenLimitPlusButton Using DDWinCtrlDef AsSymbol SharpenLimitPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenLimit(1,10,255))" Update(SharpenLimitSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenLimitZeroButton(GetRight,Position)+$hGap, AdaptiveSharpenCheckBox(GetBottom,Position) + $vGap*3, 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~+~;

 		Define: SharpenThresholdPrompt Using DDWinCtrlDef AsSymbol SharpenThresholdPrompt
			Fields:	POSITION		$x+5, SharpenLimitPrompt(GetBottom,Position) + $vGap, <TextWidth>, $StaticTextHeight
					TEXT			~Threshold~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenThresholdField Using DDWinCtrlDef AsSymbol SharpenThresholdField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenThresholdSlider) "Exec(OnSharpenChange())")
					GENCONFIELD		~SharpenThreshold~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenThresholdPrompt(GetRight,Position) + $hGap), SharpenLimitPrompt(GetBottom,Position) + $vGap, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Threshold of sharpening to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					IsEnabled		F
					PromptChar		~ ~ ;

		Define: SharpenThresholdSlider Using DDWinCtrlDef AsSymbol SharpenThresholdSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenThresholdField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenThreshold~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenThresholdField(GetRight,Position) , SharpenLimitPrompt(GetBottom,Position) + $vGap, 250, $EditTextHeight
					TOOLTIP			~Threshold of sharpening to apply to the image~
					TYPENAME		~SLIDER~ 
					IsEnabled		F
					UNITS			1 ;

		Define: SharpenThresholdMinusButton Using DDWinCtrlDef AsSymbol SharpenThresholdMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenThreshold(-1,0,100))" Update(SharpenThresholdSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenThresholdSlider(GetRight,Position)+$hGap * 2, SharpenLimitPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~-~;

		Define: SharpenThresholdZeroButton Using DDWinCtrlDef AsSymbol SharpenThresholdZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenThreshold(0,0,100))" Update(SharpenThresholdSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenThresholdMinusButton(GetRight,Position) + $hGap, SharpenLimitPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~0~

		Define: SharpenThresholdPlusButton Using DDWinCtrlDef AsSymbol SharpenThresholdPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenThreshold(1,0,100))" Update(SharpenThresholdSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenThresholdZeroButton(GetRight,Position)+$hGap, SharpenLimitPrompt(GetBottom,Position) + $vGap 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~+~;

 		Define: SharpenBlurAmountPrompt Using DDWinCtrlDef AsSymbol SharpenBlurAmountPrompt
			Fields:	POSITION		$x+5, SharpenThresholdPrompt(GetBottom,Position) + $vGap, <TextWidth>, $StaticTextHeight
					TEXT			~Blur~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: SharpenBlurAmountField Using DDWinCtrlDef AsSymbol SharpenBlurAmountField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenBlurAmountSlider) "Exec(OnSharpenChange())")
					GENCONFIELD		~SharpenBlurAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(SharpenBlurAmountPrompt(GetRight,Position) + $hGap), SharpenThresholdPrompt(GetBottom,Position) + $vGap, 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Percent of blurring to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					IsEnabled		F
					PromptChar		~ ~ ;

		Define: SharpenBlurAmountSlider Using DDWinCtrlDef AsSymbol SharpenBlurAmountSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(SharpenBlurAmountField) "Exec(OnSharpenChange())" )
					GENCONFIELD		~SharpenBlurAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		SharpenBlurAmountField(GetRight,Position) , SharpenThresholdPrompt(GetBottom,Position) + $vGap, 250, $EditTextHeight
					TOOLTIP			~Percent of blurring to apply to the image~
					TYPENAME		~SLIDER~ 
					IsEnabled		F
					UNITS			1 ;

		Define: SharpenBlurAmountMinusButton Using DDWinCtrlDef AsSymbol SharpenBlurAmountMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenBlurAmount(-1,0,100))" Update(SharpenBlurAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenBlurAmountSlider(GetRight,Position)+$hGap * 2, SharpenThresholdPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~-~;

		Define: SharpenBlurAmountZeroButton Using DDWinCtrlDef AsSymbol SharpenBlurAmountZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenBlurAmount(0,0,100))" Update(SharpenBlurAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenBlurAmountMinusButton(GetRight,Position) + $hGap, SharpenThresholdPrompt(GetBottom,Position) + $vGap, 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~0~

		Define: SharpenBlurAmountPlusButton Using DDWinCtrlDef AsSymbol SharpenBlurAmountPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeSharpenBlurAmount(1,0,100))" Update(SharpenBlurAmountSlider) "Exec(OnSharpenChange())" )
					POSITION		SharpenBlurAmountZeroButton(GetRight,Position)+$hGap, SharpenThresholdPrompt(GetBottom,Position) + $vGap 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					IsEnabled		F
					TEXT			~+~;

		Define: SharpenGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		~Sharpen~
					Position	$x, $CurrentY-5, 430, 150 ;

 		Define: NoiseReductionAmountPrompt Using DDWinCtrlDef AsSymbol NoiseReductionAmountPrompt
			Fields:	POSITION		$x+5, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), <TextWidth>, $StaticTextHeight
					TEXT			~Amount~
					RightJustified	TRUE
					TYPENAME		StaticText

		Define: NoiseReductionAmountField Using DDWinCtrlDef AsSymbol NoiseReductionAmountField
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(NoiseReductionAmountSlider) "Exec(OnNoiseReductionChange())")
					GENCONFIELD		~NoiseReductionAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		(NoiseReductionAmountPrompt(GetRight,Position) + $hGap), SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 35, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Percentage of noise reduction to apply to the image~
					TYPENAME		MaskedEditText
					Mask			~####~
					PromptChar		~ ~ ;

		Define: NoiseReductionAmountSlider Using DDWinCtrlDef AsSymbol NoiseReductionAmountSlider
			Fields:	DACTIONSTEXT	ACTIONS ( Save Update(NoiseReductionAmountField) "Exec(OnNoiseReductionChange())" )
					GENCONFIELD		~NoiseReductionAmount~
					GENCONNAME		THIS
					IACTIONSTEXT	~[Get]~
					OACTIONSTEXT	~[Save]~
					POSITION		NoiseReductionAmountField(GetRight,Position), SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 250, $EditTextHeight
					TOOLTIP			~Percentage of noise reduction to apply to the image~
					TYPENAME		~SLIDER~ 
					UNITS			1 ;

		Define: NoiseReductionAmountMinusButton Using DDWinCtrlDef AsSymbol NoiseReductionAmountMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeNoiseReductionAmount(-1,0,100))" Update(NoiseReductionAmountSlider) "Exec(OnNoiseReductionChange())" )
					POSITION		NoiseReductionAmountSlider(GetRight,Position)+$hGap * 2, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 15, $EditTextHeight
					TOOLTIP			~Decrease by 1~
					TYPENAME		~Button~ 
					TEXT			~-~;

		Define: NoiseReductionAmountZeroButton Using DDWinCtrlDef AsSymbol NoiseReductionAmountZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeNoiseReductionAmount(0,0,100))" Update(NoiseReductionAmountSlider) "Exec(OnNoiseReductionChange())" )
					POSITION		NoiseReductionAmountMinusButton(GetRight,Position) + $hGap, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 15, $EditTextHeight
					TOOLTIP			~Reset to 0~
					TYPENAME		~Button~ 
					TEXT			~0~;

		Define: NoiseReductionAmountPlusButton Using DDWinCtrlDef AsSymbol NoiseReductionAmountPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeNoiseReductionAmount(1,0,100))" Update(NoiseReductionAmountSlider) "Exec(OnNoiseReductionChange())" )
					POSITION		NoiseReductionAmountZeroButton(GetRight,Position)+$hGap, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*12), 15, $EditTextHeight
					TOOLTIP			~Increase by 1~
					TYPENAME		~Button~ 
					TEXT			~+~;

		Define: NoiseReductionGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		~Noise Reduction~
					Position	$x, SharpenBlurAmountPrompt(GetBottom,Position) + ($vGap*4), 430, 45 ;

		Define: ReapplyFiltersButton Using DDWinCtrlDef AsSymbol ReapplyFiltersButton 
			Fields:	TypeName		Button
					Text			~Rescan~
					Position		$x,NoiseReductionAmountPlusButton(GetBottom,Position) + ($vGap*7),<ButtonWidth>+7,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnRescanButton() ) 
					Tooltip			Translate( ~Rescan the current filter settings to the image~ )
					IsEnabled		F;
   }

    return $CurrentY;
}

VOID OnChangeProfilesEnabled()
{
	dlg( GetInput );

	if ( !dlgData( GetNumeric,ScannerProfileEnabled ) )
	{
		dlg( EnableControls,FALSE,OutputProfileEnabledBox );
		dlg( SetString,0,OutputProfileEnabled );
	}
	else	// scanner profile enabled
	{
		dlg( EnableControls,TRUE,OutputProfileEnabledBox );

		if ( dlgData( GetNumeric,OutputProfileEnabled ) )
		{
			dlg( EnableControls,TRUE,ScannerProfileEnabledBox );
			dlg( SetString,1,ScannerProfileEnabled );
		}
		else
		{
		}
	}

}


VOID OnLockScannerOffsets()
{
	dlg( GetInput );

	if ( dlgData( GetNumeric,LockScannerOffsets ) )
	{
		//if ( dlgData( GetNumeric, UseAnalyzerDRGBValues ) )
		//{
			LastAutoDRGBAdjustments = dlgData( GetNumeric, AutoDRGBAdjustments );
			LastDensityNormalization = dlgData( GetNumeric, DensityNormalization );
		//}

		dlg( SetStrings, AutoDRGBAdjustments, ~0~ );
		dlg( EnableControls,FALSE,AutoDRGBAdjustmentsCheckBox );

		dlg( SetStrings, DensityNormalization, ~0~ );
		dlg( EnableControls,FALSE,DenNormCheckBox );
	}
	else
	{
		//if ( dlgData( GetNumeric, UseAnalyzerDRGBValues ) )
		//{
			dlg( EnableControls,TRUE,AutoDRGBAdjustmentsCheckBox );
			dlg( SetStrings, AutoDRGBAdjustments, ~<LastAutoDRGBAdjustments>~ );

			dlg( EnableControls,TRUE,DenNormCheckBox );
			dlg( SetStrings, DensityNormalization, ~<LastDensityNormalization>~ );
		//}
	}
}


VOID OnProfileChange( IsScannerProfile )
{
	profile = ~~;

	if ( <IsScannerProfile> )
	{
		profile = ~<$con.DlgData[ICCProfile]>~;
	}
	else
	{
		profile = ~<$con.DlgData[ICCOutputProfile]>~;
	}

	Query = ~Select Path From Profiles Where Name = '<profile>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query for profile (<profile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	if ( List( GetFirst,ProfileRecord ) )
	{
		profilePath = ~<$pcon.ProfileRecord[Path]>~;

		if ( !Files( FileExists,~<profilePath>~ ) ) 
		{
			Warning( Translate( ~The profile (<profile>) does not exist in the path specified in the Profiles database table.\nVerify the profile information in the Profiles table and try the operation again.~ ) );
		}
	}

	return;
}


NUMERIC DefineTransportSetupTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	StaticWidth = 70;

	Helpfile = ~S_Transport.htm~;
    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text            ~Transport~
            TypeName        Tab
            Tooltip         ~Setup parameters pertaining to the film transport~
			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {

		Define: VendorStaticText Using DDWinCtrlDef AsSymbol VendorStaticText 
            Fields: TypeName		StaticText
                    Text			~Film Drive~
					RightJustified	TRUE
                    Position		$x,$y, <StaticWidth>,  <StaticTextHeight>

		Define: VendorComboBox Using DDWinCtrlDef AsSymbol VendorComboBox 
            Fields: TypeName		SComboBox  
                    Position		VendorStaticText(GetRight,Position) + $hGap,VendorStaticText(Gettop,Position),<ComboBoxWidth> ,<ComboBoxHeight> 
                    IActionsText	~[GetList(FilmDriveVendorList) Get]~
					DActionsText	~[Save Exec(UpdateFilmDriveSetupsCombo())]~
                    OActionsText	~[Save]~
                    GenConName		THIS
                    GenConField		~FilmDriveVendor~
                    Tooltip			~Select the film transport type~                     

		Define: VendorSetupStaticText Using DDWinCtrlDef AsSymbol VendorSetupStaticText 
            Fields: TypeName		StaticText
                    Text			~Setup~
					RightJustified	TRUE
                    Position		$x,VendorStaticText(GetBottom,Position) + $vGap, <StaticWidth>,  <StaticTextHeight> ;

		Define: VendorSetupComboBox Using DDWinCtrlDef AsSymbol VendorSetupComboBox 
            Fields: TypeName			SComboBox  
                    Position			VendorSetupStaticText(GetRight,Position) + $hGap,VendorSetupStaticText(GetTop,Position),<ComboBoxWidth> ,<ComboBoxHeight> 
					DActionsText		~[Save]~
                    OActionsText		~[Save]~
                    GenConName			THIS
                    GenConField			~FilmDriveSetup~
                    Tooltip				~Select a particular setup to use~                     
					DropDownActionsText ~[Call(UpdateFilmDriveSetupsCombo()) Get]~

		Define: EditVendorButton Using DDWinCtrlDef AsSymbol EditVendorButton 
			Fields: TypeName		Button
					Text			Translate( ~?~ )
					Position		VendorSetupComboBox(GetRight,Position) + $hGap,
									VendorSetupComboBox(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( EditFilmDriveSetup() )
					Tooltip			~Edit the transport setup parameters for the film drives~ 

		Define: EnableFilmDriveBox Using DDWinCtrlDef AsSymbol EnableFilmDriveBox 
			Fields: TypeName		CheckBox
					Text			Translate( ~Enabled~ )
					Position		EditVendorButton(GetRight,Position) + ($hGap * 3),
									EditVendorButton(GetTop,Position), <StaticTextWidth>,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( EnableFilmDriveChanged( FALSE,TRUE ) )
					GenConName		THIS
                    GenConField		~FilmDriveEnabled~	
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					IsEnabled		T
					Tooltip         ~Enable or Disable use of the film drive~

		Define: ViewFilmDriveControlsBox Using DDWinCtrlDef AsSymbol ViewFilmDriveControlsBox 
			Fields: TypeName		CheckBox
					Text			Translate( ~View Transport Controls~ )
					Position		EnableFilmDriveBox(GetLeft,Position),
									EnableFilmDriveBox(GetBottom,Position), 170,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( ShowFilmDriveControls() )
					GenConName		THIS
                    GenConField		~ViewDriveControls~	
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					IsEnabled		T
					Tooltip         Translate( ~View the controls used to actuate the film drive~ )

		Define: VendorYOffsetStaticText Using DDWinCtrlDef AsSymbol VendorYOffsetStaticText
			Fields: TypeName		StaticText
					Text			~Y Offset~
					RightJustified	TRUE
					IsEnabled		F
					Position		$x,ViewFilmDriveControlsBox(GetBottom,Position) + ($vGap * 3),
									40, <StaticTextHeight> ;

		Define: VendorYOffsetTextBox Using DDWinCtrlDef AsSymbol VendorYOffsetTextBox       
			Fields: TypeName		StaticText
					Position		VendorYOffsetStaticText(GetRight,Position) + $hGap,
									VendorYOffsetStaticText(GetTop,Position),45,<StaticTextHeight>
					GenConName		THIS
					GenConField		~EYOffsetPositionInInches~
					IsEnabled		F
					Tooltip			~Current Y Offset position of the film drive~ ;

		Define: VendorYOffsetClearButton Using DDWinCtrlDef AsSymbol VendorYOffsetClearButton
			Fields:	TypeName		Button
					IsEnabled		F
					Text			~Clear Y Offset~
					Position		VendorYOffsetTextBox(GetRight,Position) + ($hGap * 4),
									VendorYOffsetTextBox(GetTop,Position), 80, $EditTextHeight
					DActionsText	ACTIONS ( "Exec(SetDialogVendorYOffsetInfo(0,0.0))" )
					Tooltip			~Clear the Y Offset position~ ;

		Define: VendorXOffsetStaticText Using DDWinCtrlDef AsSymbol VendorXOffsetStaticText
			Fields: TypeName		StaticText
					Text			~X Offset~
					IsEnabled		F
					RightJustified	TRUE
					Position		$x,VendorYOffsetStaticText(GetBottom,Position) + ($vGap * 4),
									40, <StaticTextHeight> ;

		Define: VendorXOffsetTextBox Using DDWinCtrlDef AsSymbol VendorXOffsetTextBox       
			Fields: TypeName		StaticText
					Position		VendorXOffsetStaticText(GetRight,Position) + $hGap,
									VendorXOffsetStaticText(GetTop,Position),45,<StaticTextHeight>
					GenConName		THIS
					IsEnabled		F
					GenConField		~TXOffsetPositionInInches~
					Tooltip			~Current X Offset position of the film drive~ ;

		Define: VendorXOffsetZeroButton Using DDWinCtrlDef AsSymbol VendorXOffsetZeroButton
			Fields:	TypeName		Button
					IsEnabled		F
					Text			~Reset X Offset~
					Position		VendorXOffsetTextBox(GetRight,Position) + ($hGap * 4),
									VendorXOffsetTextBox(GetTop,Position), 80, $EditTextHeight
					DActionsText	ACTIONS ( "Exec(ResetVendorXOffset())" )
					Tooltip			~Reset the X Offset position of the film drive to 0~ ;

		Define: VendorXOffsetClearButton Using DDWinCtrlDef AsSymbol VendorXOffsetClearButton
			Fields:	TypeName		Button
					IsEnabled		F
					Text			~Clear X Offset~
					Position		VendorXOffsetZeroButton(GetRight,Position) + $hGap,
									VendorXOffsetZeroButton(GetTop,Position), 80, $EditTextHeight
					DActionsText	ACTIONS ( "Exec(SetDialogVendorXOffsetInfo(0,0.0))" )
					Tooltip			~Clear the X Offset position without adjusting the film drive~ ;

 		Define: XSliderIFactorStaticText Using DDWinCtrlDef AsSymbol XSliderIFactorStaticText
			Fields:	POSITION		$x, VendorXOffsetZeroButton(GetBottom,Position) + ($vGap * 3),
									120, <StaticTextHeight>
					TEXT			~X Offset (in <DisplayUnits>)~
					RightJustified	TRUE
					IsEnabled		F
					TYPENAME		StaticText

		Define: XSliderIFactorField Using DDWinCtrlDef AsSymbol XSliderIFactorField
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(AuditField(XSliderIFactorField,0,<MaxXIncrementsInDisplayUnits>,0))" )
					GENCONFIELD		~XSliderIFactor~
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		XSliderIFactorStaticText(GetRight,Position) + $hGap,
									XSliderIFactorStaticText(GetTop,Position),
									70, $EditTextHeight
					TEXT			~~
					TOOLTIP			~Number of <DisplayUnits> (greater than 0 and less than or equal to <MaxXIncrementsInDisplayUnits>) to move X Slider offset~
					TYPENAME		MaskedEditText
					AllowedChars	~.~
					Mask			~######~
					IsEnabled		F
					PromptChar		~ ~ ;

	    Define: GoTo_Button Using DDWinCtrlDef AsSymbol GoTo_Button 
            Fields: TypeName		Button
					IsEnabled		F
                    Text			~Go to Punch~
                    Position		$x,VendorXOffsetStaticText(GetBottom,Position) + ($vGap * 18)
									72  <buttonHeight>
					DActionsText	ACTIONS  ( "Exec(OnGotoButton( FALSE,FALSE ))" ) 
					IsEnabled		F
					Tooltip			~Go To Punch #~

		Define: GotoPunchNumberTextBox Using DDWinCtrlDef AsSymbol GotoPunchNumberTextBox       
			Fields: TYPENAME		MaskedEditText
					Mask			~#####~
					PromptChar		~ ~ 
					IsEnabled		F
                    Position		GoTo_Button(GetRight,Position) + <hGap>,
									GoTo_Button(GetTop,Position), 45, <buttonHeight>
                    GenConName		THIS
                    GenConField		~GotoPunchNumber~
                    IActionsText	~[Get]~
                    OActionsText	~[Save]~
                    Tooltip			~Enter Punch Number To Go To~ ;

		Define: EditorStaticText Using DDWinCtrlDef AsSymbol EditorStaticText 
            Fields: TypeName		StaticText
                    Text			~Editor~
					RightJustified	TRUE
					IsEnabled		F
					Position		ViewFilmDriveControlsBox(GetLeft,Position) - 8,
									ViewFilmDriveControlsBox(GetBottom,Position) + ($hGap * 1),
									35,<StaticTextHeight>

		Define: EditorComboBox Using DDWinCtrlDef AsSymbol EditorComboBox 
            Fields: TypeName		SComboBox  
					Position		EditorStaticText(GetRight,Position) + ($vGap * 2),
									EditorStaticText(GetTop,Position),
									<ComboBoxWidth>,<ComboBoxHeight>
                    IActionsText	~[GetList(EditorVendorList) Get]~
					DActionsText	~[Save Exec(UpdateEditorXYOffsetSetting())]~
                    OActionsText	~[Save]~
                    GenConName		THIS
					IsEnabled		F
                    GenConField		~FilmEditor~
                    Tooltip			~Select the film editor used to edit the current roll of film~


		Define: EditFilmEditorsButton Using DDWinCtrlDef AsSymbol EditFilmEditorsButton 
			Fields: TypeName		Button
					Text			Translate( ~?~ )
					Position		EditorComboBox(GetRight,Position) + $hGap,
									EditorComboBox(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	~[Exec(EditFilmEditors())]~
					IsEnabled		F
					Tooltip			~Edit the film editor setup~ 

		IF 0
		{
			Define: TestSlavedOperationButton Using DDWinCtrlDef AsSymbol TestSlavedOperationButton 
				Fields: TypeName		Button
						Text			Translate( ~Slaved Test~ )
						Position		$x,VendorSetupComboBox(GetBottom,Position) + $vGap, 70,  <StaticTextHeight>
						DActionsText	ACTION EXEC ( TestSlavedOperation() )
		}

	}

	return EnableFilmDriveBox(GetBottom,Position);
}



NUMERIC ColorControl( Prompt,Type,x,CurrentY,hGap,MinValue,MaxValue )
{
	Define: <Type>Prompt Using DDWinCtrlDef AsSymbol <Type>Prompt
		Fields:	POSITION		$x $CurrentY 50 $StaticTextHeight
				TEXT			~<Prompt>~
				RightJustified	TRUE
				TYPENAME		StaticText


	Define: <Type>Field Using DDWinCtrlDef AsSymbol <Type>Field
		Fields:	DACTIONSTEXT	ACTIONS ( Save Update(<Type>Slider) "Exec(OnColorChange())")
				GENCONFIELD		~<Type>~
				GENCONNAME		THIS
				IACTIONSTEXT	ACTIONS ( Get )
				OACTIONSTEXT	ACTIONS ( Save )
				POSITION		(<Type>Prompt(GetRight,Position) + $hGap) $CurrentY 30 $EditTextHeight
				TEXT			~~
				TOOLTIP			~Apply <Type> correction to the next scan~
				TYPENAME		MaskedEditText
				Mask			~####~
				AllowedChars	~-~
				PromptChar		~ ~ ;

	Define: <Type>Slider Using DDWinCtrlDef AsSymbol <Type>Slider
		Fields:	DACTIONSTEXT	ACTIONS ( Save   Update(<Type>Field) "Exec(OnColorChange())" )
				GENCONFIELD		~<Type>~
				GENCONNAME		THIS
				IACTIONSTEXT	~[Get]~
				OACTIONSTEXT	~[Save]~
				POSITION		<Type>Field(GetRight,Position) , $CurrentY 130 $EditTextHeight
				TOOLTIP			~Apply <Type> correction to the next scan~
				TYPENAME		~SLIDER~ 
				UNITS			1 ;

	Define: <Type>MinusButton Using DDWinCtrlDef AsSymbol <Type>MinusButton
		Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeColor(<Type>,-1,<MinValue>,<MaxValue>))" Update(<Type>Slider) "Exec(OnColorChange())" )
				POSITION		<Type>Slider(GetRight,Position)+$hGap * 2, $CurrentY, 15, $EditTextHeight
				TOOLTIP			~Decrease by 1~
				TYPENAME		~Button~ 
				TEXT			~-~;

	Define: <Type>ZeroButton Using DDWinCtrlDef AsSymbol <Type>ZeroButton
		Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeColor(<Type>,0,<MinValue>,<MaxValue>))" Update(<Type>Slider) "Exec(OnColorChange())" )
				POSITION		<Type>MinusButton(GetRight,Position) + $hGap, $CurrentY, 15, $EditTextHeight
				TOOLTIP			~Reset to 0~
				TYPENAME		~Button~ 
				TEXT			~0~

	Define: <Type>PlusButton Using DDWinCtrlDef AsSymbol <Type>PlusButton
		Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeColor(<Type>,1,<MinValue>,<MaxValue>))" Update(<Type>Slider) "Exec(OnColorChange())" )
				POSITION		<Type>ZeroButton(GetRight,Position)+$hGap, $CurrentY, 15, $EditTextHeight
				TOOLTIP			~Increase by 1~
				TYPENAME		~Button~ 
				TEXT			~+~;

	CurrentY = $CurrentY + $StaticTextHeight;

	return $CurrentY;
}


VOID ChangeColor( Type,Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,<Type> ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,<Type> );
}


NUMERIC DefineSizzleColorSetupTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	CurrentY = <y>;
	ThisButtonWidth = <ButtonWidth> * 2.2;

    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text    ~Color~
            TypeName        Tab
            Tooltip         Translate( ~Setup the color balance of the next scan~ )
			HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "S_Color.htm" )

	Contains: InListOrder
	{
	   Define: AnaDRGBStatic Using DDWinCtrlDef AsSymbol AnaDRGBStatic 
			Fields: TypeName        StaticText 
					Position		<X>+110,$CurrentY - 5,<ButtonWidth>*2,15 
					Text			~Analyzer DRGB~ ;

		StartX = <X>;	StartY = <CurrentY> + $vGap; 
		CurrentX = <StartX> + 2;	CurrentY = AnaDRGBStatic(GetBottom,Position) + $vGap;

		CurrentY = ColorControl( Translate( Density ),dDensity,$CurrentX,$CurrentY,$hGap,0,255 );
		CurrentY = ColorControl( Translate( Red ),dRed,$CurrentX,$CurrentY,$hGap,0,255 );
		CurrentY = ColorControl( Translate( Green ),dGreen,$CurrentX,$CurrentY,$hGap,0,255 );
		CurrentY = ColorControl( Translate( Blue ),dBlue,$CurrentX,$CurrentY,$hGap,0,255 );

		CurrentY += 10;

		Define: OffsetsCheckBox Using DDWinCtrlDef AsSymbol OffsetsCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~LockScannerOffsets~
					Text			Translate( ~Lock Scanner Offsets~ )
					Position		<X>+15,$CurrentY-2,<ButtonWidth>*2+10,15
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					DActionsText	ACTION EXEC ( OnLockScannerOffsets() )
					Tooltip			Translate( ~Lock down and use the scanner offsets for each scan~ );

		Define: DenNormCheckBox Using DDWinCtrlDef AsSymbol DenNormCheckBox
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~DensityNormalization~
					Text			Translate( ~Density Normalization~ )
					Position		<X>+150,$CurrentY-2,<ButtonWidth>*2+10,15
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~Auto adjust density so that RGB changes do not change density.~ );

		CurrentY = OffsetsCheckBox(GetBottom,Position) + $vGap;

		CurrentY = ColorControl( Translate( Brightness ),BrightnessOverride,$CurrentX,$CurrentY,$hGap,-300,300 );
		CurrentY = ColorControl( Translate( Red ),RedOverride,$CurrentX,$CurrentY,$hGap,-300,300 );
		CurrentY = ColorControl( Translate( Green ),GreenOverride,$CurrentX,$CurrentY,$hGap,-300,300 );
		CurrentY = ColorControl( Translate( Blue ),BlueOverride,$CurrentX,$CurrentY,$hGap,-300,300 );
		CurrentY = ColorControl( Translate( Contrast ),ContrastOverride,$CurrentX,$CurrentY,$hGap,-100,100 );

		StartX = <X>;	StartY = <Y> + $vGap; 
		CurrentX = <StartX> + 15;	CurrentY = <StartY> + 10;

	   Define: FilmTypesStatic Using DDWinCtrlDef AsSymbol FilmTypesStatic 
			Fields: TypeName        StaticText 
					Position		300,$CurrentY - 17,<ThisButtonWidth>,15 
					Text			~Film Type~

		Define: FilmTypesComboBox Using DDWinCtrlDef AsSymbol FilmTypesComboBox 
			Fields: TypeName        SComboBox  
					Position		FilmTypesStatic(GetLeft,Position),FilmTypesStatic(GetBottom,Position) + 3,<ThisButtonWidth>,<ButtonHeight> * 8
					IActionsText	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save )
					DropDownActionsText	ACTION EXEC ( UpdateFilmTypesList() )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~FilmType~
					Tooltip			~Select the type of film you are using~ ;

	IF 0
	{
	   Define: ExposureTableStatic Using DDWinCtrlDef AsSymbol ExposureTableStatic 
			Fields: TypeName        StaticText 
					Position		EditRefs_Button(GetLeft,Position),
									EditRefs_Button(GetBottom,Position) + $vGap*3,<ThisButtonWidth>,15
					Text			~Exposure Table~

		Define: ExposureProfileComboBox Using DDWinCtrlDef AsSymbol ExposureProfileComboBox 
            Fields: TypeName			SComboBox  
 					Position			 ExposureTableStatic(GetLeft,Position),ExposureTableStatic(GetBottom,Position) + 3,<ThisButtonWidth>,<ButtonHeight> * 3
                    IActionsText		ACTIONS ( Get )
                    OActionsText		~[Save]~
                    GenConName			THIS
                    GenConField			~DRGBProfileName~
					DropDownActionsText ACTION CALL ( RefreshExposureProfilesComboBox(FALSE) )
					DActionsText		ACTION EXEC ( NewExposureProfile() )
                    Tooltip				~Select the profile used to calculate scanner adjustments from your Analyzer DRGB values~ ;
	}

	   Define: RefDRGBStatic Using DDWinCtrlDef AsSymbol RefDRGBStatic 
			Fields: TypeName        StaticText
					Position		FilmTypesStatic(GetLeft,Position),FilmTypesStatic(GetBottom,Position) + $vGap*15,<ThisButtonWidth>,15
					Text			~Saved DRGB Refs~

	   Define: RefDRGBComboBox Using DDWinCtrlDef AsSymbol RefDRGBComboBox 
			Fields: TypeName        SComboBox  
					Position		RefDRGBStatic(GetLeft,Position),RefDRGBStatic(GetBottom,Position) + 3,<ThisButtonWidth>,<ButtonHeight> * 8
					IActionsText	ACTIONS ( UpdateList(DRGBRefsList "Select Name From DRGBRefs" Name) GetList(DRGBRefsList) Get )
					DropDownActionsText ACTIONS ( UpdateList(DRGBRefsList "Select Name From DRGBRefs" Name) GetList(DRGBRefsList) Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~DRGBRefs~
					Tooltip			~Select the DRGB reference for adjusting the scanner from your analyzer numbers~

		Define: EditRefs_Button Using DDWinCtrlDef AsSymbol EditRefs_Button 
			Fields:	TypeName		Button
					Text			Translate( ~Edit~ )
					Position		RefDRGBComboBox(GetLeft,Position),RefDRGBComboBox(GetTop,Position) + <ButtonHeight> + $vGap * 3,<ThisButtonWidth>,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnEditDRGBRefs() ) 
					Tooltip			Translate( ~Edit the reference values for DRGB Scanner calculations~ );

        if (Prototyping())
		{
		Define: ExposureProfileStatic Using DDWinCtrlDef AsSymbol ExposureProfileStatic 
			Fields: TypeName        StaticText 
					Position		RefDRGBStatic(GetLeft,Position),RefDRGBStatic(GetBottom,Position) + $vGap*18,<ThisButtonWidth>,15
					Text			~Exposure Profile~

		Define: ExposureProfileEditText Using DDWinCtrlDef AsSymbol ExposureProfileEditText 
			Fields: TypeName        EditText  
					Position		ExposureProfileStatic(GetLeft,Position),ExposureProfileStatic(GetBottom,Position) + 3,<ThisButtonWidth>-25,<EditTextHeight>
					IActionsText	ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~DRGBProfile~
					Tooltip			~Select an exposure profile to apply to the image~

		Define: ExposureProfileBrowseButton Using DDWinCtrlDef AsSymbol ExposureProfileBrowseButton 
            Fields: TypeName		Button
                    Text			Translate(~?~)
                    Position		ExposureProfileEditText(GetRight,Position) + $hGap,ExposureProfileEditText(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( BrowseForExposureProfile() )
					Tooltip			~Find the directory for the exposure profile~

		Define: DRGB2RGB_Button Using DDWinCtrlDef AsSymbol DRGB2RGB_Button 
			Fields:	TypeName		Button
					Text			~Calculate~
					Position		ExposureProfileStatic(GetLeft,Position),ExposureProfileStatic(GetBottom,Position) + <ButtonHeight> + $vGap * 6,<ButtonWidth>*2,<ButtonHeight>*1.5
					DActionsText	ACTION EXEC  ( OnDRGB_2_BRGBC( TRUE ) ) 
					Tooltip			Translate( ~Setup the scanner color adjustments from your DRGB settings~ );
	    }
		else
		{
		Define: DRGB2RGB_Button Using DDWinCtrlDef AsSymbol DRGB2RGB_Button 
			Fields:	TypeName		Button
					Text			~Calculate~
					Position		EditRefs_Button(GetLeft,Position),EditRefs_Button(GetBottom,Position) + $vGap*7,<ButtonWidth>*2,<ButtonHeight>*1.5
					DActionsText	ACTION EXEC  ( OnDRGB_2_BRGBC( TRUE ) ) 
					Tooltip			Translate( ~Setup the scanner color adjustments from your DRGB settings~ );
		}

		Define: AutoDRGBAdjustmentsCheckBox Using DDWinCtrlDef AsSymbol AutoDRGBAdjustmentsCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~AutoDRGBAdjustments~
					Text			Translate( ~Auto DRGB Calc~ )
					Position		DRGB2RGB_Button(GetLeft,Position),DRGB2RGB_Button(GetBottom,Position) + $vGap,<ThisButtonWidth>,<ButtonHeight>
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~Automatically setup the color adjustments from DRGB values that are stored in the database on every scan~ );

		Define: ReapplyButton Using DDWinCtrlDef AsSymbol ReapplyButton 
			Fields:	TypeName		Button
					Text			~Rescan~
					Position		AutoDRGBAdjustmentsCheckBox(GetLeft,Position)+$hGap*14+2,
									AutoDRGBAdjustmentsCheckBox(GetBottom,Position) + $vGap*13,
									<ButtonWidth>+7,<ButtonHeight>*1.2
					DActionsText	ACTION EXEC  ( OnRescanButton() ) 
					Tooltip			Translate( ~Rescan the current scanner offsets to the image~ )
					IsEnabled		F;
	}

	return TRUE;
}




NUMERIC DefineScannerTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	vertGap = 10;

	Helpfile = ~S_Setup.htm~;
    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text            ~Scanner~
                    TypeName        Tab
                    Tooltip         ~Select the scan area and calibration parameters that pertain to the scanner~
					HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		StaticWidth = 70;			ScanAreaWidth = 50;  ControlWidth = ($ScanAreaWidth)*4;

        Define: FilmFormatStaticText Using DDWinCtrlDef AsSymbol FilmFormatStaticText 
            Fields: TypeName		StaticText
                    Text			~Film Format~
					RIGHTJUSTIFIED	TRUE
                    Position		$x, $y, <StaticWidth>,<StaticTextHeight>

        Define: FilmFormatComboBox Using DDWinCtrlDef AsSymbol FilmFormatComboBox 
            Fields: TypeName		SComboBox  
                    Position		FilmFormatStaticText(Getright,Position) + $hGap,FilmFormatStaticText(GetTop,Position),150, <ComboBoxHeight> 
                    IActionsText    ACTIONS ( GetList(FilmSizeChoices) Get )
					DActionsText	ACTIONS ( Save "Exec(OnFormatChange(3, ~Film format changed.~, TRUE, TRUE))" )
				    OActionsText    ACTIONS ( Save )
                    GenConField		~Format~
                    GenConName		THIS
                    Tooltip			~Select the film format~

		Define: ResolutionText Using DDWinCtrlDef AsSymbol ResolutionText 
			Fields: TypeName		StaticText
					Text			~Resolution~
					RightJustified	TRUE
					Position		FilmFormatComboBox(GetRight,Position) + $hGap, $y,<StaticTextWidth>,<StaticTextHeight>

        Define: ResolutionComboBox1 Using DDWinCtrlDef AsSymbol ResolutionComboBox1
                Fields: TypeName		SComboBox  
						Position		ResolutionText(GetRight,Position) + $hGap,
										ResolutionText(Gettop,Position),
										<ComboBoxWidth> ,<ComboBoxHeight> 
						IActionsText    ~[GetList(ScanResolutionChoices) Get]~
						DActionsText	ACTIONS ( Save Update(ResolutionComboBox2) "Exec(UpdateScanSize(FALSE,FALSE))" )
						OActionsText    ~[Save]~
						GenConName		THIS
						GenConField		~ScanResolution~
						Tooltip			~Select the resolution to run the scanner at~   
                                
	   Define: ZoomPrompt Using DDWinCtrlDef AsSymbol ZoomPrompt
			Fields: POSITION		FilmFormatStaticText(GetLeft,Position),
									FilmFormatStaticText(GetBottom,Position) + 15, <StaticWidth>,<StaticTextHeight>
					TEXT			~Optical Zoom~
					RIGHTJUSTIFIED	TRUE
					TYPENAME		StaticText

		Define: ZoomSlider Using DDWinCtrlDef AsSymbol ZoomSlider
			Fields: //DACTIONSTEXT    ACTIONS ( Save Update(ZoomField) "Exec(OnFormatChange(5, ~Optical zoom changed.~, FALSE, FALSE))" )
					LCLICKUPACTIONSTEXT	ACTIONS ( Save Update(ZoomField) "Exec(OnFormatChange(5, ~Optical zoom changed.~, FALSE, FALSE))" )
					GENCONFIELD		OpticalZoom
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		ZoomPrompt(GetRight,Position) + $hGap,ZoomPrompt(GetTop,Position),$ControlWidth,<StaticTextHeight> 
					TOOLTIP			~Adjust Optical Zoom~
					TYPENAME		~SLIDER~ 
					UNITS			1;

 		Define: ZoomMinusButton Using DDWinCtrlDef AsSymbol ZoomMinusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeZoom(-1, TRUE))" Update(ZoomSlider) )
					POSITION		ZoomSlider(GetRight,Position) + $hGap, ZoomSlider(GetTop,Position), 20, 20
					TOOLTIP			~Decrease the Optical Zoom by 1~
					TYPENAME		~Button~ 
					TEXT			~-~

		Define: ZoomPlusButton Using DDWinCtrlDef AsSymbol ZoomPlusButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeZoom(1, TRUE))" Update(ZoomSlider) )
					POSITION		ZoomMinusButton(GetRight,Position) + $hGap, ZoomMinusButton(GetTop,Position) 20 20
					TOOLTIP			~Increase the Optical Zoom by 1~
					TYPENAME		~Button~ 
					TEXT			~+~

		Define: ZoomZeroButton Using DDWinCtrlDef AsSymbol ZoomZeroButton
			Fields:	DACTIONSTEXT	ACTIONS ( Save "Exec(ChangeZoom(~0~, FALSE))" Update(ZoomSlider) )
					POSITION		ZoomPlusButton(GetRight,Position) + $hGap, ZoomPlusButton(GetTop,Position) 20 20
					TOOLTIP			~Set the zoom to zero~
					TYPENAME		~Button~ 
					TEXT			~0~;
 
		Define: SetZoomButton Using DDWinCtrlDef AsSymbol SetZoomButton
			Fields:	DACTIONSTEXT	ACTION EXEC ( OnSetMagButton() )
					POSITION		ZoomZeroButton(GetRight,Position) + $hGap, ZoomPlusButton(GetTop,Position) 32 20
					TOOLTIP			~Setup the scanner to the selected format and zoom~
					TYPENAME		~Button~ 
					TEXT			~Set~

		Define: ZoomField Using DDWinCtrlDef AsSymbol ZoomField
			Fields: DACTIONSTEXT	ACTIONS ( Save Update(ZoomSlider)  )
					GENCONFIELD		OpticalZoom
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		SetZoomButton(GetRight,Position)+$hGap*3,SetZoomButton(GetTop,Position)+2,30, <EditTextHeight> 
					TOOLTIP			~Optical zoom~
					TYPENAME		StaticText // MaskedEditText
					IsTabStop		T
					Mask			~#####~
					AllowedChars	~-~
					PromptChar		~ ~ ;

		Define: PositionPrompt Using DDWinCtrlDef AsSymbol PositionPrompt 
			Fields: TypeName		StaticText
					Text			~Scan Area~
					RIGHTJUSTIFIED	TRUE
					Position		$x,ZoomPrompt(GetBottom,Position) + $vertGap+2, <StaticWidth>,  <StaticTextHeight> ;

		Define: MiddleXField Using DDWinCtrlDef AsSymbol MiddleXField
			Fields: GENCONFIELD		xPos
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		PositionPrompt(Getright,Position) + $hGap,PositionPrompt(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			~The X position (in percent) of the middle of the area to scan~
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: MiddleYField Using DDWinCtrlDef AsSymbol MiddleYField
			Fields: GENCONFIELD		yPos
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		MiddleXField(Getright,Position) + 1,MiddleXField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			~The Y position (in percent) of the middle of the area to scan~
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: ScanWidthField Using DDWinCtrlDef AsSymbol ScanWidthField
			Fields: GENCONFIELD		ScanWidth
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE))" )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		MiddleYField(Getright,Position) + 1,MiddleYField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			~The width (in percent) of the area to scan~
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: ScanHeightField Using DDWinCtrlDef AsSymbol ScanHeightField
			Fields: GENCONFIELD		ScanLength
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					DACTIONSTEXT	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE))" )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		ScanWidthField(Getright,Position) + 1,ScanWidthField(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
					TOOLTIP			~The height (in percent) of the area to scan~
					TYPENAME		MaskedEditText
					IsTabStop		T
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Global( MiddleXField,MiddleYField,ScanWidthField,ScanHeightField );

		Define: TestScanButton Using DDWinCtrlDef AsSymbol TestScanButton 
			Fields: TypeName		Button
					Text			Translate(~Test Scan~)
					Position		ScanHeightField(GetRight,Position) + $hGap,ScanHeightField(GetTop,Position), 70,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( OnTestScan() )
					TOOLTIP			~Performs a scan with no rotation to set the scan area~

		Define: AdjustScanAreaButton Using DDWinCtrlDef AsSymbol AdjustScanAreaButton 
			Fields: TypeName		Button
					Text			Translate(~Set~)
					Position		TestScanButton(GetRight,Position) + $hGap,TestScanButton(GetTop,Position), 32,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( OnAdjustScanArea( FALSE ) )
					IsEnabled		F
					TOOLTIP			~Set the active scan area from the current crop~

		Define: AllScanAreaButton Using DDWinCtrlDef AsSymbol AllScanAreaButton 
			Fields: TypeName		Button
					Text			Translate(~All~)
					Position		AdjustScanAreaButton(GetRight,Position) + $hGap,AdjustScanAreaButton(GetTop,Position), 35,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( OnAllScanArea() )
					TOOLTIP			~Set the active scan area to the largest possible size~


			Define: ScanSizePrompt Using DDWinCtrlDef AsSymbol ScanSizePrompt
				Fields: POSITION		PositionPrompt(GetLeft,Position),
										PositionPrompt(GetBottom,Position) + $vertGap, <StaticWidth>,<StaticTextHeight>
						TEXT			~Scan Size~
						RIGHTJUSTIFIED	TRUE
						TYPENAME		StaticText

			Define: ScanSizeWidthLength Using DDWinCtrlDef AsSymbol ScanSizeWidthLength
				Fields: POSITION		ScanSizePrompt(GetRight,Position) + $hGap,ScanSizePrompt(GetTop,Position),<StaticWidth> * 2,<StaticTextHeight> 
						GENCONFIELD		ScanSizeWidthLength
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						TOOLTIP			~Scan Size~
						TYPENAME		StaticText
						IsTabStop		T ;

			Define: CalFilePrompt Using DDWinCtrlDef AsSymbol CalFilePrompt 
				Fields: TypeName		StaticText
						Text			~Calibration File~
						RIGHTJUSTIFIED	TRUE
						Position		$x,PositionPrompt(GetBottom,Position)+($vertGap * 3),<StaticWidth>,<StaticTextHeight>

			Define: CalFileField Using DDWinCtrlDef AsSymbol CalFileField
				Fields: GENCONFIELD		CalibrationFile
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		CalFilePrompt(Getright,Position) + $hGap,CalFilePrompt(GetTop,Position),$ControlWidth , <EditTextHeight> 
						TOOLTIP			~The Calibration File to write to or read from~
						TYPENAME		EditText ;

		IF 0
		{
			Define: CalFileBrowseButton Using DDWinCtrlDef AsSymbol CalFileBrowseButton 
				Fields: TypeName		Button
						Text			Translate(~?~)
						TOOLTIP			~Manually find the calibration file to use~
						Position		CalFileField(GetLeft,Position),CalFileField(GetTop,Position), <StaticTextHeight>,  <StaticTextHeight>
						DActionsText	ACTION EXEC ( BrowseForCalFilePath() )
		}

		yPos = 0;

			Define: CalibrateButton Using DDWinCtrlDef AsSymbol CalibrateButton 
				Fields:	TypeName		Button
						Text			~Calibrate~
						Position		CalFileField(GetRight,Position) + $hGap,CalFilePrompt(GetTop,Position), 70,<ButtonHeight>
						DActionsText	ACTIONS  ( "Exec(OnSizzleCalibrateButton( FALSE,FALSE,TRUE ))" ) 
						Tooltip			~Calibrate the scanner~

			Define: FindScannerButton Using DDWinCtrlDef AsSymbol FindScannerButton 
				Fields:	TypeName		Button
						Text			~Search~
						Position		$x + $hGap,CalibrateButton(GetBottom,Position) + $vGap*10, $ButtonWidth - 15,<ButtonHeight>
						DActionsText	ACTIONS  ( "Exec(FindScanner(TRUE))" ) 
						Tooltip			~Search for scanners on the SCSI Bus~ ;

			yPos = CalibrateButton(GetBottom,Position);


			Define: SimulatingCheckBox Using DDWinCtrlDef AsSymbol SimulatingCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~Simulating~
						Text			~Simulate~
						IsEnabled		T
						Position		FindScannerButton(GetRight,Position) + $hGap,FindScannerButton(GetTop,Position),$ButtonWidth, <StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						DActionsText	ACTIONS ( Save "Exec(OnSimulateCheckBox())" )
						OActionsText	ACTIONS ( Save )
						Tooltip			~If checked, the Scanner Control can be used without a real scanner for learning, testing, or demonstration purposes.~;
			
			yPos = SimulatingCheckBox(GetBottom,Position);

		Define: LogActivityCheckBox Using DDWinCtrlDef AsSymbol LogActivityCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~LogActivity~
					Text			~Log Activity~
					IsEnabled		T
					Position		TestScanButton(GetLeft,Position) - 30,
									TestScanButton(GetBottom,Position)+72,95, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(OnLogActivity())" )
					OActionsText	ACTIONS ( Save )
					Tooltip			~If checked, activity information is written to the session log~;
// TBD
// Save for future testing purposes
		Define: AutoScanWrapCheckBox Using DDWinCtrlDef AsSymbol AutoScanWrapCheckBox 
			Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~AutoScanWrap~
					Text			~Auto Scan Wrap~
					IsEnabled		F
					IsHidden		T
					Position		LogActivityCheckBox(GetLeft,Position),
									LogActivityCheckBox(GetBottom,Position) + $vertGap,105, <StaticTextHeight>
					IActionsText    ACTIONS ( Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					Tooltip			~If checked, auto scan with unscanned frames will repeat nonstop.~;

	}
    return <yPos>;
}


NUMERIC DefineMiscTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	vertGap = 10;

	Helpfile = ~S_Misc.htm~;
    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text            ~Misc~
                    TypeName        Tab
                    Tooltip         ~Miscellaneous parameters pertaining to the scanning~
					HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: InListOrder
    {
		StaticWidth = 70;			ScanAreaWidth = 50;  ControlWidth = ($ScanAreaWidth)*4;

			Define: FrameToPunchCheckBox Using DDWinCtrlDef AsSymbol FrameToPunchCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~FrameToPunch~
						Text			~Set frame numbers to punch numbers~
						IsEnabled		T
						Position		$x+5,$y, $ButtonWidth + 145,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Tooltip			~If checked, frame numbers will be set to punch numbers during scanning~;

			Define: FrameToPunchPaddingField Using DDWinCtrlDef AsSymbol FrameToPunchPaddingField
				Fields: GENCONFIELD		FrameToPunchPadding
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						DACTIONSTEXT	ACTIONS ( Save )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		FrameToPunchCheckBox(GetRight,Position) + $hGap,FrameToPunchCheckBox(GetTop,Position),$ScanAreaWidth , <EditTextHeight> 
						TOOLTIP			~The number of 0's to pad the frame number to punch (between 0 to 5)~
						TYPENAME		MaskedEditText
						IsTabStop		T
						Mask			~#~
						DisallowedChars	~6789~
						PromptChar		~ ~ ;

			Define: OmitRollInPathCheckBox Using DDWinCtrlDef AsSymbol OmitRollInPathCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~OmitRollInPath~
						Text			~Omit roll number in image path~
						IsEnabled		T
						Position		$x+5,FrameToPunchCheckBox(GetBottom,Position)+$vertGap, $ButtonWidth + 145,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						DActionsText    ACTIONS ( Save )
						OActionsText	ACTIONS ( Save )
						Tooltip			~If checked, omit using the roll number in the image path name~;

	        Define: PathTemplateText Using DDWinCtrlDef AsSymbol PathTemplateText 
		        Fields: TypeName		StaticText
			            Text			~Image Path Template~
					    Position		OmitRollInPathCheckBox(GetLeft,Position),OmitRollInPathCheckBox(Getbottom,Position)+$vertGap,140, <EditTextHeight>

			Define: PathTemplateField Using DDWinCtrlDef AsSymbol PathTemplateField
				Fields: GENCONFIELD		PathTemplate
						GENCONNAME		THIS
						IACTIONSTEXT	ACTIONS ( Get )
						DACTIONSTEXT	ACTIONS ( Save )
						OACTIONSTEXT	ACTIONS ( Save )
						POSITION		OmitRollInPathCheckBox(GetLeft,Position),PathTemplateText(Getbottom,Position)+1,$TabWidth-$hgap*4 , <EditTextHeight> 
						TOOLTIP			~Describe the path to use for the saved image file. Leave blank to use Volume\Order\Roll\Frame~
						TYPENAME		EditText
						IsTabStop		T
						PromptChar		~ ~ ;

			Define: SequentialPunchesCheckBox Using DDWinCtrlDef AsSymbol SequentialPunchesCheckBox 
				Fields: TypeName		CheckBox
						GenConName		THIS
						GenConField		~SequentialPunches~
						Text			~Sequential punch numbers expected~
						IsEnabled		F
						Position		PathTemplateText(GetLeft,Position),PathTemplateText(GetBottom,Position)+(3 * $vertGap),$ButtonWidth + 150,<StaticTextHeight>
						IActionsText    ACTIONS ( Get )
						OActionsText	ACTIONS ( Save )
						Tooltip			~If checked, report an error if the punch numbers are out of sequence~;

			yPos = SequentialPunchesCheckBox(GetBottom,Position);
	}
    return <yPos>;
}


NUMERIC DefineScanTab( tab,&x,&y,&hGap,&vGap,&TabWidth,&TabHeight )
{
	Helpfile = ~S_Scan.htm~;
    Define: Tab<tab> Using DDWinCtrlDef
            Fields: Text			~Scan~
                    TypeName		Tab
                    Tooltip			~Normal tab for scanning~
					HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "<Helpfile>" )

    Contains: INLISTORDER
    {
		ypos = $y;
        ypos = DefineDestinationControls( x,ypos,hGap,vGap );

		Define: ScanSetupsText Using DDWinCtrlDef AsSymbol ScanSetupsText 
            Fields: TypeName		Button
                    Text			~Use Setup~
					DActionsText	ACTIONS ( Exec(LoadSettings(~~,TRUE,FALSE,FALSE,FALSE)) Exec(ResyncScanList()) )
					Tooltip			~Activate the selected scanning setup~
					Position		$x,$ypos + ($vGap*6),<StaticTextWidth>,<StaticTextHeight>

	    Define: ScanSetupsComboBox Using DDWinCtrlDef AsSymbol ScanSetupsComboBox 
			Fields: TypeName        ComboBox  
					Position		ScanSetupsText(GetRight,Position) + $hGap,ScanSetupsText(GetTop,Position),288,<ComboBoxHeight>
					IActionsText	ACTION EXEC ( UpdateScanSetupsList( FALSE ) )
					DropDownActionsText	ACTION EXEC ( UpdateScanSetupsList( FALSE ) )
					//IActionsText	ACTIONS ( UpdateList(ScanSetupsList "Select Name From ScanSetups Where ScannerType = '<$con.DlgData[ScannerType]>' Order By Name" Name) GetList(ScanSetupsList) Get )
					//DropDownActionsText ACTIONS ( UpdateList(ScanSetupsList "Select Name From ScanSetups Where ScannerType = '<$con.DlgData[ScannerType]>' Order By Name" Name) GetList(ScanSetupsList) Get )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~ScanSetup~
					Mask			~<$[DATABASE FieldTypes].ScanSetupName[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].ScanSetupName[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].ScanSetupName[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].ScanSetupName[DisallowedChars]>~
					Tooltip			~Select the setup to use for scanning~

		Define: EditSetups_Button Using DDWinCtrlDef AsSymbol EditSetups_Button 
			Fields:	TypeName		Button
					Text			Translate( ~?~ )
					Position		VolumeBrowseButton(GetLeft,Position),ScanSetupsComboBox(GetTop,Position),
									20,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnEditSetups() ) 
					Tooltip			Translate( ~Edit the ScanSetups table~ );

		Define: SaveSetup_Button Using DDWinCtrlDef AsSymbol SaveSetup_Button 
			Fields:	TypeName		Button
					Text			Translate( ~Save~ )
					Position		EditSetups_Button(GetRight,Position) + $hGap,EditSetups_Button(GetTop,Position),
									48,<ButtonHeight>
					DActionsText	ACTIONS ( Save "Exec(OnSaveSetup())" ) 
					Tooltip			Translate( ~Save the current settings in the ScanSetups table~ );

		Define: CropsStaticText Using DDWinCtrlDef AsSymbol CropsStaticText 
            Fields: TypeName		Button
                    Text			~Use Crop~
					Tooltip			~Activate the selected crop~
					DActionsText	ACTION EXEC  ( UpdateCrop( TRUE ) )
                    Position		$x,SaveSetup_Button(GetBottom,Position) + $vGap*5,<StaticTextWidth>,<StaticTextHeight>

		Define: CropsComboBox Using DDWinCtrlDef AsSymbol CropsComboBox 
			Fields: TypeName        SComboBox  
					Position		CropsStaticText(GetRight,Position) + $hGap,
									CropsStaticText(GetTop,Position),<ComboBoxWidth>,300
					DropDownActionsText	ACTIONS ( "Exec(RefreshCropsComboBox(FALSE))" )
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~CropName~
					Tooltip			~Select from a list of crops~;

		CropFieldWidth = 45;

		Define: TheCropXField Using DDWinCtrlDef AsSymbol TheCropXField
            Fields: GENCONFIELD		CropX
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropXField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		CropsComboBox(Getright,Position) + $hGap,
                                    CropsComboBox(GetTop,Position),
                                    <CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~X position (in percent) of the middle of the crop~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: TheCropYField Using DDWinCtrlDef AsSymbol TheCropYField
            Fields: GENCONFIELD		CropY
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropYField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		TheCropXField(Getright,Position) + 1,
                                    TheCropXField(GetTop,Position),
                                    <CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~Y position (in percent) of the middle of the crop~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: TheCropWidthField Using DDWinCtrlDef AsSymbol TheCropWidthField
            Fields: GENCONFIELD		CropWidth
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropWidthField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		TheCropYField(Getright,Position) + 1,
                                    TheCropYField(GetTop,Position),
                                    <CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~Width (in percent) of the crop ~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: TheCropLengthField Using DDWinCtrlDef AsSymbol TheCropLengthField
            Fields: GENCONFIELD		CropLength
                    GENCONNAME		THIS
                    IACTIONSTEXT	ACTIONS ( Get )
					DActionsText	ACTIONS ( Save "Exec(AuditField(TheCropLengthField,0,100,100))" )
                    OACTIONSTEXT	ACTIONS ( Save )
                    POSITION		TheCropWidthField(Getright,Position) + 1,TheCropWidthField(GetTop,Position),<CropFieldWidth>, <EditTextHeight> 
                    TOOLTIP			~Length (in percent) of the crop~
					TYPENAME		MaskedEditText
					Mask			~######~
					AllowedChars	~.~
					PromptChar		~ ~ ;

		Define: EditCrops_Button Using DDWinCtrlDef AsSymbol EditCrops_Button 
			Fields:	TypeName		Button
					Text			Translate( ~?~ )
					Position		EditSetups_Button(GetLeft,Position),TheCropLengthField(GetTop,Position),20,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnEditCrops() ) 
					Tooltip			Translate( ~Edit the stored crops~ );

		Define: SaveCrop_Button Using DDWinCtrlDef AsSymbol SaveCrop_Button 
			Fields:	TypeName		Button
					Text			Translate( ~Save As~ )
					Position		EditCrops_Button(GetRight,Position)+$hGap,EditCrops_Button(GetTop,Position),
									48,<ButtonHeight>
					DActionsText	ACTION EXEC  ( OnSaveCurrentCrop() ) 
					Tooltip			Translate( ~Save the current crop settings in the Crops table~ );


		Define: ResolutionText Using DDWinCtrlDef AsSymbol ResolutionText 
			Fields: TypeName		StaticText
					Text			~Resolution~
					RightJustified	TRUE
					Position		$x,SaveCrop_Button(GetBottom,Position) + ($vGap*3),<StaticTextWidth>,<StaticTextHeight>

        Define: ResolutionComboBox2 Using DDWinCtrlDef AsSymbol ResolutionComboBox2
                Fields: TypeName		SComboBox  
						Position		ResolutionText(GetRight,Position) + $hGap,
										ResolutionText(Gettop,Position),
										<ComboBoxWidth> ,<ComboBoxHeight> 
						IActionsText    ~[GetList(ScanResolutionChoices) Get]~
						DActionsText	ACTIONS ( Save Update(ResolutionComboBox1) "Exec(UpdateScanSize(FALSE,FALSE))" )
						OActionsText    ~[Save]~
						GenConName		THIS
						GenConField		~ScanResolution~
						Tooltip			~Select the resolution to run the scanner at~   
                                
        Define: RotationStaticText Using DDWinCtrlDef AsSymbol RotationStaticText 
            Fields: TypeName		StaticText
                    Text			~Rotation~
					RightJustified	TRUE
                    Position		$X,ResolutionText(GetBottom,Position) + $vGap,<StaticTextWidth>,<StaticTextHeight>

        Define: RotationComboBox Using DDWinCtrlDef AsSymbol RotationComboBox 
            Fields: TypeName		SComboBox  
                    Position		RotationStaticText(Getright,Position) + $hGap,
									RotationStaticText(GetTop,Position),<ComboBoxWidth>, <ComboBoxHeight> 
                    IActionsText    ~[GetList(SaveImageRotationChoices) Get]~
					DActionsText	ACTIONS ( Save "Exec(UpdateScanSize(FALSE,FALSE))" )
                    OActionsText    ~[Save]~
                    GenConField		~ScanRotation~
                    GenConName		THIS
                    Tooltip			~Select an angle of rotation~ ;

		Define: ScanFromDataBaseButton Using DDWinCtrlDef AsSymbol ScanFromDataBaseButton
			Fields: TypeName		RadioButton
					Position		ResolutionComboBox2(GetRight,Position) + $hGap * 3,
									ResolutionComboBox2(GetTop,Position), 170, 20
					IActionsText	~[Get]~
					DActionsText	~[  
										CheckButton(ScanFromDataBaseButton) 
										UncheckButton(ScanToDataBaseButton)
										Save
										"Exec(ResyncScanList())"
									 ]~
					// 02/12/02 DPT
					// This is the old way that called LockAutoDRGBAdjustments. We
					// no longer do this and as a result, density normalization and
					// auto DRGB calc are available in both scan from database and
					// scan every frame mode.
					//DActionsText	~[  
					//					CheckButton(ScanFromDataBaseButton) 
					//					UncheckButton(ScanToDataBaseButton)
					//					Save
					//					Call(LockAutoDRGBAdjustments(FALSE))
					//					"Exec(ResyncScanList())"
					//				 ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~ScanFromDataBase~
					RadioTrueValue	TRUE
					Text			Translate(~Scan unscanned frames~)
					Tooltip			~Frames needing scanning are selected from the database~;

		Define: FramesToScanButton Using DDWinCtrlDef AsSymbol FramesToScanButton 
			Fields: TypeName		Button
					Text			Translate(~?~)
					Position		ScanFromDataBaseButton(GetRight,Position) + $hGap,ScanFromDataBaseButton(GetTop,Position), 20 20
					DActionsText	ACTION EXEC ( OnFramesToScanButton() )
					TOOLTIP			~View the frames that need scanning~

	Define: UpdateScanListButton Using DDWinCtrlDef AsSymbol UpdateScanListButton 
			Fields: TypeName		Button
					Text			Translate(~Reload~)
					Position		FramesToScanButton(GetRight,Position) + $hGap,
									FramesToScanButton(GetTop,Position),
									48, 20
					DActionsText	ACTION EXEC ( ResyncScanList() )
					TOOLTIP			~Load the list of frames to be scanned for the selected Order~

		Define: ScanToDataBaseButton Using DDWinCtrlDef AsSymbol ScanToDataBaseButton
			Fields: TypeName		RadioButton
					Position		ScanFromDataBaseButton(GetLeft,Position),
									ScanFromDataBaseButton(GetBottom,Position) + $vGap, 170, 20
					IActionsText	~[Get]~
					DActionsText	~[  
										CheckButton(ScanToDataBaseButton) 
										UncheckButton(ScanFromDataBaseButton)
										Save
									 ]~
					// 02/12/02 DPT
					// This is the old way that called LockAutoDRGBAdjustments. We
					// no longer do this and as a result, density normalization and
					// auto DRGB calc are available in both scan from database and
					// scan every frame mode.
					//DActionsText	~[  
					//					CheckButton(ScanFromDataBaseButton) 
					//					UncheckButton(ScanToDataBaseButton)
					//					Save
					//					Call(LockAutoDRGBAdjustments(TRUE))
					//					"Exec(ResyncScanList())"
					//				 ]~
					OActionsText	~[Save]~
					GenConName		THIS
					GenConField		~ScanFromDataBase~
					RadioTrueValue	FALSE
					Text			Translate(~Scan every frame~)
					Tooltip			~Every frame is scanned and information is saved in the database~;

		Define: AllFramesToScanButton Using DDWinCtrlDef AsSymbol AllFramesToScanButton 
			Fields: TypeName		Button
					Text			Translate(~?~)
					Position		ScanToDataBaseButton(GetRight,Position) + $hGap,ScanToDataBaseButton(GetTop,Position), 20,20
					DActionsText	ACTION EXEC ( OpenFramesButton() )
					TOOLTIP			~View all frames~;

		ypos = RotationComboBox(GetBottom,Position);
    }

    return $ypos;
}


NUMERIC DefineTransportControl( &x,&y,&hGap,&vGap )
{
    Width = 51;	ShowFilmTransportControls = F;

    Define: TensionBox Using DDWinCtrlDef AsSymbol TensionBox 
            Fields: TypeName                CheckBox
                    IsEnabled				F
                    IsHidden				T
					Text                    ~Tension~
                    Position                <x> + 2, <y>, 65, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnTensionChange())" ) 
                    IActionsText			ACTIONS ( Get ) 
                    OActionsText			ACTIONS ( Save )
                    GenConName				THIS
                    GenConField				~Tension~
                    Tooltip                 ~Tension or Untension the Film~

    Define: FastRewindButton Using DDWinCtrlDef AsSymbol FastRewindButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~<<<<~
                    Position                TensionBox(GetRight,Position) + (<hGap> * 4),
                                            TensionBox(GetTop,Position),
                                            <Width>*3/4,  <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnRewindButton())" ) 
                    Tooltip                 ~Fast Rewind~
                    
    Define: PrevFrameButton Using DDWinCtrlDef AsSymbol PrevFrameButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~-1~
                    Position                FastRewindButton(GetRight,Position) + <hGap>,
                                            FastRewindButton(GetTop,Position),
                                            <Width>*3/4,  <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnPreviousFrameButton( FALSE ))" ) 
                    Tooltip                 ~Go To Previous Frame~

    Define: StopButton Using DDWinCtrlDef AsSymbol StopButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~Stop~
                    Position                PrevFrameButton(GetRight,Position) + <hGap>,
                                            PrevFrameButton(GetTop,Position),
                                            <Width>*3/4, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnStopButton())" ) 
                    Tooltip                 ~Stop transport~
                    
    Define: NextFrameButton Using DDWinCtrlDef AsSymbol NextFrameButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~+1~
                    Position                StopButton(GetRight,Position) + <hGap>,
                                            StopButton(GetTop,Position),
                                            <Width>*3/4, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnNextFrameButton( FALSE ))" ) 
                    Tooltip                 ~Next Frame~

    Define: FastForwardButton Using DDWinCtrlDef AsSymbol FastForwardButton 
            Fields: TypeName                Button
                    IsEnabled				F
                    IsHidden				T
                    Text                    ~>>>>~
                    Position                NextFrameButton(GetRight,Position) + <hGap>,
                                            NextFrameButton(GetTop,Position),
                                            <Width>*3/4, <buttonHeight>
                    DActionsText			ACTIONS  ( "Exec(OnFastForwardButton())" ) 
                    Tooltip                 ~Fast Forward~

	Define: IgnoreXAdjustmentsCheckBox Using DDWinCtrlDef AsSymbol IgnoreXAdjustmentsCheckBox 
			Fields: TypeName				CheckBox
					IsEnabled				F
					IsHidden				T
					GenConName				THIS
					GENCONFIELD				IgnoreXAdjustments
					Text					~Ignore X~
					Position				FastForwardButton(GetRight,Position)+3,FastForwardButton(GetTop,Position) - 4,
											<Width> + 15,<StaticTextHeight>
					IActionsText			ACTIONS ( Get )
					DActionsText			ACTIONS ( Save )
					OActionsText			ACTIONS ( Save )
					Tooltip					~Adjust the x position of the film drive without updating the current x offset information~

	Define: DisableFilmDriveCheckBox Using DDWinCtrlDef AsSymbol DisableFilmDriveCheckBox 
			Fields: TypeName				CheckBox
					IsEnabled				F
					IsHidden				T
					GenConName				THIS
					GENCONFIELD				DisableFilmDrive
					Text					~Disable~
					Position				IgnoreXAdjustmentsCheckBox(GetRight,Position)+7,
											IgnoreXAdjustmentsCheckBox(GetTop,Position),
											<Width> + 20,<StaticTextHeight>
					IActionsText			ACTIONS ( Get )
					DActionsText			ACTIONS ( Save "Exec(OnDisableFilmDrive())" )
					OActionsText			ACTIONS ( Save )
					Tooltip					~Disable film movement during scanning~

	Define: XPositionSlider Using DDWinCtrlDef AsSymbol XPositionSlider
			Fields:	TypeName				Slider
                    IsEnabled				F
                    IsHidden				T
					Position				FastRewindButton(GetLeft,Position) - 4,
											FastRewindButton(GetBottom,Position) + $vGap,220,$StaticTextHeight
					DActionsText			ACTIONS ( Save "Exec(UpdateTempSliderPosition())" )
					IActionsTEXT			ACTIONS ( Get )
					OActionsTEXT			ACTIONS ( Save )
					GenConName				THIS
					GenConField				~XSliderPosition~
					Units					1
					ToolTip					~Adjust the x position of the film drive~
					LCLICKUPACTIONSTEXT		ACTIONS ( "Exec( XPositionSliderChanged( FALSE, 0 ) ; UpdateTempSliderPosition() )" );

	Define: TempSliderPosition Using DDWinCtrlDef AsSymbol TempSliderPosition
			Fields: TypeName				StaticText
					Position				XPositionSlider(GetLeft,Position) - 83,
											XPositionSlider(GetTop,Position),45,<buttonHeight>
					GenConField				~XSliderPositionUI~
					Tooltip					~~ ;

		Define: XPositionSliderMinusButton Using DDWinCtrlDef AsSymbol XPositionSliderMinusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(-1,FALSE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSlider(GetLeft,Position)-18,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					~Adjust the x position of the film drive 1 step to the left~
					TYPENAME				~Button~ 
					TEXT					~-~;

		Define: XPositionSliderIMinusButton Using DDWinCtrlDef AsSymbol XPositionSliderIMinusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(-1,TRUE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSliderMinusButton(GetLeft,Position)-17,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					~Adjust the x position of the film drive in <DisplayUnits> to the left~
					TYPENAME				~Button~ 
					TEXT					~<~;

		Define: XPositionSliderPlusButton Using DDWinCtrlDef AsSymbol XPositionSliderPlusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(1,FALSE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSlider(GetRight,Position)+4,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					~Adjust the x position of the film drive 1 step to the right~
					TYPENAME				~Button~ 
					TEXT					~+~;

		Define: XPositionSliderIPlusButton Using DDWinCtrlDef AsSymbol XPositionSliderIPlusButton
			Fields:	DACTIONSTEXT			ACTION EXEC ( IncSliderPosition(1,TRUE) )
                    IsEnabled				F
                    IsHidden				T
					POSITION				XPositionSliderPlusButton(GetRight,Position)+2,
											XPositionSlider(GetTop,Position),
											15,
											$EditTextHeight
					TOOLTIP					~Adjust the x position of the film drive in <DisplayUnits> to the right~
					TYPENAME				~Button~ 
					TEXT					~>~;

    Define: CurrentPunchNumberText Using DDWinCtrlDef AsSymbol CurrentPunchNumberText
            Fields: TypeName				StaticText
                    Text					~Punch~
                    Position				XPositionSliderIPlusButton(GetRight,Position) + (<hGap> * 3) + 5,
											XPositionSliderIPlusButton(GetTop,Position),
											35,  <StaticTextHeight> ;

    Define: CurrentPunchNumberTextBox Using DDWinCtrlDef AsSymbol CurrentPunchNumberTextBox
            Fields: TypeName				StaticText
                    Position				CurrentPunchNumberText(GetRight,Position) + 5,
											CurrentPunchNumberText(GetTop,Position),45,<buttonHeight>
                    GenConName				THIS
                    GenConField				~CurrentPunchPosition~
                    Tooltip					~Current Punch Number~ ;

	IF 0
	{
		WidthOfRow = XPositionSlider(GetRight,Position) - TensionBox(GetLeft,Position);
		HeightOfRow = XPositionSlider(GetBottom,Position) - TensionBox(GetLeft,Position);

		Define: TransportGroupBox Using DDWinCtrlDef
			Fields: TypeName	GroupBox
					Text		~Transport~
					Position	TensionBox(GetLeft,Position) - 6,TensionBox(GetTop,Position)-12,<WidthOfRow> + 12,<HeightOfRow> + 20 ;
	}

    return XPositionSlider(GetBottom,Position);
}



NUMERIC DefineDestinationControls( &x,&y,&hGap,&vGap )
{
    Width = 45;             FieldWidth = 200;

    Define: VolumeText Using DDWinCtrlDef AsSymbol VolumeText 
            Fields: TypeName		StaticText
                    Text			~Path~
					RightJustified	TRUE
                    Position		$x,$y, <StaticTextWidth>,  <StaticTextHeight> ;

    Define: VolumeComboBox Using DDWinCtrlDef AsSymbol VolumeComboBox 
            Fields: TypeName		MaskedEditText	// SComboBox  
					Position		VolumeText(GetRight,Position) + $hGap,VolumeText(Gettop,Position),<FieldWidth> + 85 ,<StaticTextHeight>
                    IActionsText    ~[Get]~
					DActionsText	ACTIONS ( Save "Exec(UpdateFreeDiskSpace())" )
                    OActionsText    ACTIONS ( Save )
                    GenConName		THIS
                    GenConField		~Volume~
					Mask			~<$[DATABASE FieldTypes].Path[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].Path[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].Path[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].Path[DisallowedChars]>~
                    Tooltip			~Select the path to save the images for this order~ ;

	Define: VolumeBrowseButton Using DDWinCtrlDef AsSymbol VolumeBrowseButton 
            Fields: TypeName		Button
                    Text			Translate(~?~)
                    Position		VolumeComboBox(GetRight,Position) + $hGap,VolumeComboBox(GetTop,Position), 20,  <StaticTextHeight>
					DActionsText	ACTION EXEC ( BrowseForImagePath() )
					Tooltip			~Find the directory to store the scanned images~ ;

	Global(VolumeBrowseButton);

    Define: CustomerText Using DDWinCtrlDef AsSymbol CustomerText 
            Fields: TypeName		StaticText
                    Text			~Customer ID~
					RightJustified	True
                    Position		$x,VolumeText(GetBottom,Position) + $vGap,<StaticTextWidth>,  <StaticTextHeight> ;
                            
    Define: CustomerField Using DDWinCtrlDef AsSymbol CustomerField       
            Fields: TypeName		MaskedEditText
                    Position		CustomerText(GetRight,Position) + <hGap>, CustomerText(GetTop,Position) $FieldWidth $ButtonHeight               
                    GenConName		THIS
                    GenConField		~CustomerID~
                    IActionsText    ~[Get]~
                    DActionsText    ~[Save]~
                    OActionsText    ~[Save]~
					Mask			~<$[DATABASE FieldTypes].CustomerID[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].CustomerID[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].CustomerID[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].CustomerID[DisallowedChars]>~
                    Tooltip			~This is the Customer ID of the order you selected.  If adding a new order, specify the CustomerID here~ ;

	Define: AddCustomerButton Using DDWinCtrlDef AsSymbol AddCustomerButton 
			Fields: TypeName		Button
					Text			~Add Order~
					Position		CustomerField(GetRight,Position) + <hGap>, CustomerField(GetTop,Position), 80,  <buttonHeight>
					DActionsText    ACTION EXEC  ( AddCustomerAndOrder() ) 
					Tooltip         ~Add an order for the specified customer~

	Define: FindCustomerButton Using DDWinCtrlDef AsSymbol FindCustomerButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		VolumeBrowseButton(GetLeft,Position), AddCustomerButton(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( FindCustomer() ) 
                    Tooltip         ~Find the customers who begin with the selected ID~

    Define: OrderText Using DDWinCtrlDef AsSymbol OrderText 
            Fields: TypeName		StaticText
                    Text			~Order ID~
					RightJustified	True
                    Position		$x,CustomerText(GetBottom,Position) + $vGap, <StaticTextWidth>,  <StaticTextHeight> ;
           
    Define: OrderField Using DDWinCtrlDef AsSymbol OrderField       
            Fields: TypeName		MaskedEditText
                    Position		OrderText(GetRight,Position) + <hGap> OrderText(GetTop,Position) $FieldWidth $ButtonHeight          
                    GenConName		THIS
                    GenConField		~Order~
					IActionsText    ~[Get]~
                    DActionsText    ~[Save]~
                    OActionsText    ~[Save]~
					WantReturnKey	~T~
					ReturnKeyActionsText ACTION EXEC ( HandleOrderIDReturnKey(~~) )
					Mask			~<$[DATABASE FieldTypes].OrderID[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].OrderID[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].OrderID[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].OrderID[DisallowedChars]>~
                    Tooltip			~Enter the Order ID you wish to scan for.  You may enter part of the Order ID and press find.~ ;

	Define: FindOrdersNeedingScanningButton Using DDWinCtrlDef AsSymbol FindOrdersNeedingScanningButton 
            Fields: TypeName		Button
                    Text			~Scan Needed~
                    Position		OrderField(GetRight,Position) + <hGap>, OrderField(GetTop,Position),80,<buttonHeight>
                    DActionsText    ACTION EXEC ( FindOrdersNeedingScanning() ) 
                    Tooltip         ~View orders that need scanning~

	Define: SeeScannedImagesButton Using DDWinCtrlDef AsSymbol SeeScannedImagesButton 
            Fields: TypeName		Button
                    Text			~Images~
                    Position		FindOrdersNeedingScanningButton(GetLeft,Position), FindOrdersNeedingScanningButton(GetBottom,Position) + $vGap, 80,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ShowScannedImagesWindow() ) 
                    Tooltip         ~View the images for this roll of the selected order~

	Define: FindOrderButton Using DDWinCtrlDef AsSymbol FindOrderButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		FindOrdersNeedingScanningButton(GetRight,Position) + <hGap>, FindOrdersNeedingScanningButton(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( FindOrder() ) 
                    Tooltip         ~Find all orders that start with the characters of the Order ID~

	Define: ImportButton Using DDWinCtrlDef AsSymbol ImportButton 
            Fields: TypeName		Button
                    Text			~Import~
                    Position		FindOrderButton(GetRight,Position) + $hGap, FindCustomerButton(GetTop,Position), 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ImportFrameData() ) 
                    Tooltip         ~Import frame data for this order~;

	Define: ExportImagesButton Using DDWinCtrlDef AsSymbol ExportImagesButton 
            Fields: TypeName		Button
                    Text			~Export~
                    Position		ImportButton(GetLeft,Position), ImportButton(GetTop,Position) - $vGap - $buttonHeight, 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( ExportImages() ) 
                    Tooltip         ~Export Images for this order~;

	ThisPositionX = ImportButton(GetLeft,Position);
	ThisPositionY = ImportButton(GetBottom,Position)+$vGap;

	Define: SetForOrderButton Using DDWinCtrlDef AsSymbol SetForOrderButton 
            Fields: TypeName		Button
                    Text			~Update~
                    Position		<ThisPositionX>, <ThisPositionY>, 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( DisplayStatusChoices(Order,<ThisPositionX>,<ThisPositionY> ) ) 
                    Tooltip         ~Update the scanning information for the entire order~;

	ThisPositionX = SetForOrderButton(GetLeft,Position);
	ThisPositionY = SetForOrderButton(GetBottom,Position)+$vGap;

	Define: SetForRollButton Using DDWinCtrlDef AsSymbol SetForRollButton 
            Fields: TypeName		Button
                    Text			~Update~
                    Position		<ThisPositionX>, <ThisPositionY>, 48,  <buttonHeight>
                    DActionsText    ACTION EXEC ( DisplayStatusChoices(Roll,<ThisPositionX>,<ThisPositionY>) ) 
                    Tooltip         ~Update the scanning information for the entire roll~;

	ThisPositionX = SetForRollButton(GetLeft,Position);
	ThisPositionY = SetForRollButton(GetBottom,Position)+$vGap;

    Define: RollText Using DDWinCtrlDef AsSymbol RollText 
            Fields: TypeName		StaticText
                    Text			~Roll~
					RightJustified	True
                    Position		$x,OrderText(GetBottom,Position) + $vGap,<StaticTextWidth>,<StaticTextHeight> ;
  
  
    Define: RollField Using DDWinCtrlDef AsSymbol RollField 
        Fields: TypeName		ComboBox  
                Position        RollText(GetRight,Position) + <hGap>,RollText(GetTop,Position),$FieldWidth,$buttonHeight*4               
                DActionsText    ACTIONS  ( Save "Exec(UpdateFrameField())" ) 
				OActionsText	ACTIONS ( Save )
				DropDownActionsText ACTION CALL ( UpdateRollsCombo(FALSE)  )
                GenConName       THIS
                GenConField		~Roll~
				IsTabStop		T
				Mask			~<$[DATABASE FieldTypes].Roll[Mask]>~
				PromptChar		~<$[DATABASE FieldTypes].Roll[PromptChar]>~
				AllowedChars	~<$[DATABASE FieldTypes].Roll[AllowedChars]>~
				DisallowedChars ~<$[DATABASE FieldTypes].Roll[DisallowedChars]>~
                Tooltip         ~Enter or select a roll~;
              
if 0 
{            
    Define: RollField Using DDWinCtrlDef AsSymbol RollField         
            Fields: TypeName		MaskedEditText
                    Position        RollText(GetRight,Position) + <hGap>,RollText(GetTop,Position),$FieldWidth,$buttonHeight               
                    GenConName		THIS
                    GenConField		~Roll~
                    IActionsText	~[Get]~
                    DActionsText    ~[Save]~
                    OActionsText    ~[Save]~
					Mask			~<$[DATABASE FieldTypes].Roll[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].Roll[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].Roll[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].Roll[DisallowedChars]>~
                    Tooltip			~Enter Roll Number~ ;
}

	Define: FindRollButton Using DDWinCtrlDef AsSymbol FindRollButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		FindCustomerButton(GetLeft,Position), RollField(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( FindRolls() ) 
                    Tooltip         ~Find the roll information for the specified order~

    Define: FrameText Using DDWinCtrlDef AsSymbol FrameText 
            Fields: TypeName		Button
                    Text			~Frame~
					DActionsText    ACTION EXEC ( OpenImage() ) 
                    Tooltip         ~Open the image of the selected Order, Roll, Frame~
                    Position		$x,RollText(GetBottom,Position) + $vGap, <StaticTextWidth>,  <StaticTextHeight> ;
                            
    Define: FrameField Using DDWinCtrlDef AsSymbol FrameField       
            Fields: TypeName        MaskedEditText
                    Position		FrameText(GetRight,Position) + <hGap> FrameText(GetTop,Position) $FieldWidth $buttonHeight               
                    GenConName		THIS
                    GenConField		~Frame~
                    IActionsText	~[Get]~
					DActionsText	ACTIONS ( Save "Exec(UpdateScanButton())" )
                    OActionsText	~[Save]~
					Mask			~<$[DATABASE FieldTypes].Frame[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].Frame[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].Frame[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].Frame[DisallowedChars]>~
                    Tooltip			~Enter Frame Number~ ;

   Define: DisplayLastCheckBox Using DDWinCtrlDef AsSymbol DisplayLastCheckBox 
            Fields: TypeName		CheckBox
					GenConName		THIS
					GenConField		~DisplayLastImage~
					Text			Translate( ~Display~ )
					Position		FrameField(GetRight,Position) + $hGap,FrameField(GetTop,Position), 80, <StaticTextHeight>
					DActionsText	ACTIONS ( Save )
					IActionsText    ACTIONS ( Get )
					OActionsText	ACTIONS ( Save )
					Tooltip			Translate( ~If checked, display each image for cropping as it is scanned~ );

	Define: OpenFramesButton Using DDWinCtrlDef AsSymbol OpenFramesButton 
            Fields: TypeName		Button
                    Text			~?~
                    Position		FindCustomerButton(GetLeft,Position), FrameField(GetTop,Position), 20,  <buttonHeight>
                    DActionsText    ACTION EXEC ( OpenFramesButton() ) 
                    Tooltip         ~Find the order image information for the specified order, roll~ ;

    return FrameText(GetBottom,Position);
}


NUMERIC DefineScanControls( &x,&y,&hGap,&vGap )
{
    Width = 51; bHeight = 27;	

   Define: FocusButton Using DDWinCtrlDef AsSymbol FocusButton 
            Fields: TypeName		Button
					Text			~Focus~
					Position		<x> + 3 <y> <Width> <bHeight>
					DActionsText	ACTIONS  ( "Exec(OnFocusButton( Translate(~Do you want to focus the scanner now?  If so, insert the film and select Yes when ready.~)))" ) 
					Tooltip			~Focus the scanner~

   Define: PreScanCheckBox Using DDWinCtrlDef AsSymbol PreScanCheckBox 
            Fields: TypeName		Button
                    Text			~Preview~
					GenConName		THIS
                    GenConField		~Preview~
                    Position		FocusButton(GetRight,Position) + <hGap>,FocusButton(GetTop,Position),<Width>  <bHeight>
                    DActionsText    ACTIONS  ( Save "Exec(OnPreviewCheckBox())" ) 
                    Tooltip         ~Repeatedly scan the frame that is currently in the gate for positioning.  When correctly positioned, press Scan.~

    Define: PrevScanButton Using DDWinCtrlDef AsSymbol PrevScanButton 
            Fields: TypeName		Button
					Text			~<< 1~
					Position		PreScanCheckBox(GetRight,Position) + <hGap>*4,PreScanCheckBox(GetTop,Position),<Width>*3/4 <bHeight>
					DActionsText    ACTIONS ( "Exec(OnScanButton(-1,FALSE))" ) 
					Tooltip         ~Scan the previous frame~

    Define: ScanButton Using DDWinCtrlDef AsSymbol ScanButton 
            Fields: TypeName		Button
                    Text			~Scan~
                    Position		PrevScanButton(GetRight,Position) + <hGap>,PrevScanButton(GetTop,Position),<Width>*3/4  <bHeight>
                    DActionsText    ACTIONS  ( "Exec(OnScanButton(0,FALSE))" ) 
                    Tooltip			~Scan the current frame~

    Define: NextScanButton Using DDWinCtrlDef AsSymbol NextScanButton 
            Fields: TypeName		Button
                    Text			~1 >>~
                    Position		ScanButton(GetRight,Position) + <hGap>,ScanButton(GetTop,Position),<Width>*3/4 <bHeight>
                    DActionsText	ACTIONS  ( "Exec(OnScanButton(1,FALSE))" ) 
                    Tooltip			~Scan the next frame~

    Define: AutoScanCheckBox Using DDWinCtrlDef AsSymbol AutoScanCheckBox 
            Fields: TypeName		CheckBox
                    GenConName		THIS
					GENCONFIELD		AutoScan
                    Text			~Auto Scan~
                    Position		NextScanButton(GetRight,Position) + $hGap*2,NextScanButton(GetTop,Position)-3,<Width> + 20,<StaticTextHeight>
                    IActionsText    ACTIONS ( Get )
                    DActionsText	ACTIONS ( Save "Exec(OnAutoScan())")
                    OActionsText	ACTIONS ( Save )
                    Tooltip			~Automatically scan successive frames~;

    Define: CutNegPromptCheckBox Using DDWinCtrlDef AsSymbol CutNegPromptCheckBox 
            Fields: TypeName		CheckBox
                    GenConName		THIS
					GENCONFIELD		CutNegPrompt
                    Text			~Prompt~
                    Position		AutoScanCheckBox(GetRight,Position) + $hGap,AutoScanCheckBox(GetTop,Position),<Width> + 15,<StaticTextHeight>
                    IActionsText    ACTIONS ( Get )
                    DActionsText	ACTIONS ( Save )
                    OActionsText	ACTIONS ( Save )
                    Tooltip			~Prompt for next frame when scanning cut negatives~;

 	IF 0
	{
		Define: ScanCountField Using DDWinCtrlDef AsSymbol ScanCountField
			Fields: GENCONFIELD		ScanCount
					GENCONNAME		THIS
					IACTIONSTEXT	ACTIONS ( Get )
					OACTIONSTEXT	ACTIONS ( Save )
					POSITION		AutoScanCheckBox(Getright,Position) + $hGap * 2,AutoScanCheckBox(GetTop,Position),35,<EditTextHeight> 
					TOOLTIP			~A Count of the number of scans~
					TYPENAME		MaskedEditText
					Mask			~#####~
					PromptChar		~ ~ ;

		Define: ScanTimeStaticText Using DDWinCtrlDef AsSymbol ScanTimeStaticText 
			Fields: TypeName		StaticText
					GENCONFIELD		LastScanTime
					GENCONNAME		THIS
					Position		ScanCountField(GetRight,Position) + $hGap,ScanCountField(GetTop,Position),50,<StaticTextHeight>
					TOOLTIP			~Time in seconds of the last scan~ ;
	}

    return NextScanButton(GetBottom,Position)-5;
}

VOID UpdateTempSliderPosition( overrideValue )
{
	if ( DefinedAndNotNULL( overrideValue ) )
	{
		CurrentXSliderPosition = <overrideValue>;
	}
	else
	{
		CurrentXSliderPosition = NUMERIC(~<$Con.DlgData[XSliderPosition]>~);
	}
	DlgData( Get,TXOffsetIncrementUnit,TXOffsetIncrementUnit );
	if ( <CurrentXSliderPosition> )
	{
		CurrentXSliderPosition = <CurrentXSliderPosition> * <TXOffsetIncrementUnit>;
		CurrentXSliderPositionUI = InchesTo<DisplayUnits>( <CurrentXSliderPosition> );
		CurrentXSliderPositionUI = ntoa( <CurrentXSliderPositionUI>,~%.03f~ );
		//CurrentXSliderPositionUI = ~<CurrentXSliderPositionUI>"~;
	}
	else
	{
		CurrentXSliderPositionUI = ~~;
	}
	dlg( SetStrings,XSliderPositionUI, ~<CurrentXSliderPositionUI>~ );
}


VOID IncSliderPosition( value, AdjustByInches )
{
	dlg( GetInput );
	dlg( Update );	// Update dialog in case out of range number reset to min or max value

	if ( <AdjustByInches> )
	{
		inches = <DisplayUnits>ToInches( NUMERIC(~<$Con.DlgData[XSliderIFactor]>~) );
		TXOffsetIncrementUnit = NUMERIC( ~<$Con.DlgData[TXOffsetIncrementUnit]>~ );

		if ( ( <inches> <= 0 ) || ( <inches> > <MaxXIncrementsInInches> ) )
		{
			Warning( Translate( ~X Offset (in <DisplayUnits>) must be greater than 0 and less than or equal to <MaxXIncrementsInDisplayUnits> <DisplayUnits>~ ) );
			return;
		}

		if ( <TXOffsetIncrementUnit> <= 0 )
		{
			Warning( Translate( ~Measurement of units for the film transport X Offset is unknown~ ) );
			return;
		}
		
		totalSteps = <inches>/<TXOffsetIncrementUnit>;

		// Value indicates direction if adjust by inches
		if ( <value> < 0 )
		{
			totalSteps = <totalSteps> * (-1);
		}
		UpdateTempSliderPosition( <totalSteps> );
		XPositionSliderChanged( TRUE, <totalSteps> );
		UpdateTempSliderPosition();
	}
	else
	{
		dlg( SetStrings,XSliderPosition, <value> );
		UpdateTempSliderPosition();
		XPositionSliderChanged( FALSE, <value> );
		UpdateTempSliderPosition();
	}
}


VOID RightClick()
{
	if ( KeyState( RSHIFT ) && KeyState( RCONTROL ) )
	{
		dlg( EnableControls,TRUE,IgnoreFrameWidthsCheckBox );

		IgnoreControlCommands = FALSE;
		EnableScanningControls( TRUE );
		FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
	}
	else if ( KeyState( LSHIFT ) && KeyState( LCONTROL ) )
	{
		if ( DlgData( GetNumeric,AutoScan ) )
		{
			dlg( EnableControls,<CurrentControlsState>,ScanButton );
		}
		dlg( ShowControls,TRUE,AutoScanWrapCheckBox );
		dlg( EnableControls,<CurrentControlsState>,AutoScanWrapCheckBox );
	}
}


VOID DefineDialog()
{
    Left = 5; Top = 5;		hGap = 5; vGap = 2;  x = <Left>; y = <Top>;
    TextHeight = 20;        TextWidth = 110;  ButtonHeight = 20;
    EditTextWidth = 50;
    SliderWidth = 170;
    EditTextWidth = 50;		EditTextHeight = 20;
    ButtonWidth = 60;		ButtonHeight = 20;
    ComboBoxWidth = 100;	ComboBoxHeight = 150;

    TabWidth = $DialogWidth - $hGap * 3;  TabHeight = 260;

	ScreenWidth = App( thisApp,MainWindow,GetClientWidth );
	DialogLeft = ($ScreenWidth * .9) - 90 - $DialogWidth;
	DialogTop = 8;

	if ( <DialogLeft> < 0 )
	{
		DialogLeft = ($ScreenWidth * .9) / 2.0;
	}

    Define: ScannerDlgDefinition Using DDWinDef
            Fields: Position			$DialogLeft $DialogTop $DialogWidth $DialogHeight
                    Title				~RFS 3570 Plus~ + ~ Scanning Control~
                    TypeName			~Dialog~
					StatusBar			~2 80 20~
					WantsMinimizeBox	TRUE
					RClickDnActionsText	ACTION Exec ( RightClick() )
					HActionsText		ACTION SHOWHELPPAGE ( KPISHelpFile "Scanning.htm" )
					OACTIONSTEXT		ACTION EXEC ( CloseDialog() );

    Contains: InListOrder
    {
        x = $left + $hGap;      y = $top + 33;

        Define: TabWindow Using DDWinCtrlDef
                Fields: Position	<left> <top> <TabWidth>  <TabHeight>
                        TypeName	TabCtrl
                        Text		~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~
        Contains: InListOrder
        {
			tab = 0; 
            DefineScanTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );
			DefineSizzleColorSetupTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

            DefineFileTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

		    DefineFilterTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

		    DefineTransportSetupTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

            DefineScannerTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );

		    DefineMiscTab( <++tab>,x,y,hGap,vGap,TabWidth,TabHeight );
        }

		y += $TabHeight - 27;

		IF 0
		{
			Define: ScanProgressControl Using DDWinCtrlDef AsSymbol ScanProgressControl
				Fields:	GENCONFIELD		Progress
						GENCONNAME		This
						POSITION		$x,$y,<TabWidth> - $hGap*2,8
						TEXT			~Progress~
						TYPENAME		~Progress~ 
						IACTIONSTEXT	ACTIONS ( Get )
						OACTIONSTEXT	ACTIONS ( Save ) ;
		}

		y = DefineScanControls( Left,y,hGap,vGap ) +  10;

		BottomWithoutTransport = <y> + 25 + 3;

        y = DefineTransportControl( Left,y,hGap,vGap,ButtonHeight ) + 28;

		BottomWithTransport = <y> + 5;

		Global( BottomWithoutTransport,BottomWithTransport,DialogWidth );
    };

    ScannerDlgDefinition( Set,Position,~<DialogLeft> <DialogTop> <DialogWidth> <BottomWithOutTransport>~ );

    Global( ScannerDlgDefinition );
}


NUMERIC OnFileTypeChange(LoadingSettings)
{
	dlg( GetInput );

	ThumbNailsEnabled = SimilarStr( ~<$con.dlgData[SaveFileType]>~,JPEG ) == FALSE;

	JPEGEnabled = SimilarStr( ~<$con.dlgData[SaveFileType]>~,JPEG ) || SimilarStr( ~<$con.dlgData[SaveFileType]>~,EXIF );
	 
	TIFFEnabled = SimilarStr( ~<$con.dlgData[SaveFileType]>~,TIFF );

	dlg( EnableControls,<JPEGEnabled>,JPEGQualitySlider,JPEGQualityField );

	dlg( EnableControls,<ThumbNailsEnabled>,ViewingSizeField );

	if ( !<LoadingSettings> )
	{
		TheFileExtension = ~~;

		if ( <TIFFEnabled> ) { TheFileExtension = ~.tif~; }
		if ( <JPEGEnabled> ) { TheFileExtension = ~.jpg~; }

		dlg( SetString,~<TheFileExtension>~,FileExtension );
	}

	return TRUE;
}


NUMERIC CheckIfNetworkAccessable( &ImagePath )
{
	ImagePath = MakePath( Type,UNC,~<ImagePath>~ );

	if ( !Files( IsUNC,~<ImagePath>~ ) && NetworkOperation() )
	{
		Msg = Translate( UIMessages,UnsharedFile,~<ImagePath>~ );

		if ( MessageBox( "~<Msg>~",YESNO ) != YES )
			{ return FALSE; }
	}

	return TRUE;
}


NUMERIC CheckScanLength( maxCarriageMovement,pixelSize,DesiredMag,&scanLength )
{
	DlgData( GetValues,Format,Format );

	scanLength = GetScanLength(  FALSE, TRUE, TRUE ); // FORCE THIS TO RETURN FULL SCAN LENGTH FOR NEXT CALCULATIONS
	
	distance = floor( <scanLength> * <pixelSize> / <DesiredMag> );

	return (<distance> <= <maxCarriageMovement>);
}


VOID ChangeZoom( amount, adjust )
{
	if ( <adjust> )
	{
		sum = dlgData( GetNumeric,OpticalZoom ) + <amount>;
	}
	else
	{
		sum = <amount>;
	}

	lowVal = dlgData(GetAttrInfo, OpticalZoom, LowValue);
	highVal = dlgData(GetAttrInfo, OpticalZoom, HighValue);

	AdjustOpticalZoom( lowVal, highVal );

	newSum = Pin( <sum>, <lowVal>, <highVal> );

	dlg( SetStrings,OpticalZoom,~<newSum>~ );

	Msg = ~~;
	if ( <newSum> < <sum> )
	{
		Msg = ~Your optical zoom setting has exceeded the maximum optical zoom for this film format.\n\nThe optical zoom setting has been changed to the maximum allowed value.~;
	}
	else if ( <newSum> > <sum> )
	{
		Msg = ~Your optical zoom setting is lower than the minimum optical zoom for this film format.\n\nThe optical zoom setting has been changed to the minimum allowed value.~;
	}

	if ( ~<Msg>~ != ~~ )
	{
		Warning( Translate( ~<Msg>~ ) );
	}

	OnFormatChange( 5, ~Optical zoom changed.~, FALSE, FALSE );
}


VOID AdjustOpticalZoom( &lowVal, &highVal )
{
	DlgData( GetValues,Format,Format );

	Index = MagNames( IndexOf,~<Format>~ );
	MinMagnification = atof(MinMagnifications(ValueOf,$Index));
	MaxMagnification = atof(MaxMagnifications(ValueOf,$Index));

//	if ( ~<Format>~ == ~35mm~ || ~<Format>~ == ~35mm_Unperfed~)
//	{
//		highVal = 10;
//	}
//	else if ( ~<Format>~ == ~Split_70mm~ || ~<Format>~ == ~70mm~ || ~<Format>~ == ~70mm_Unperfed~ )
//	{
//		lowVal = 0;
//	}
	lowVal = <MinMagnification>;
	highVal = <MaxMagnification>;
}


VOID ClearCalibrationHandlers()
{
	OnCalibrationComplete = ~~;
}

OnCalibrationComplete = ~~;
ClearCalibrationHandlers();

NUMERIC OnFormatChange(reason, statusText, UpdateCrop, UpdateYCorrection)
{
	// Reason values:
	// 1 = Settings loaded
	// 2 = Film type changed (positive/negative)
	// 3 = Film format changed (35mm, etc)
	// 4 = Scan sized changed
	// 5 = Optical zoom changed
	// 6 = Crop loaded

	loadingSettings = FALSE;
	if ( <reason> == 1 ) 
	{
		loadingSettings = TRUE;
	}

	filmTypeChanged = FALSE;
	if ( <reason> == 2 ) 
	{
		filmTypeChanged = TRUE;
	}

	CurrentFilmFormat = ~<$Con.DlgData[Format]>~;
	filmFormatChanged = FALSE;
	if ( <reason> == 3 ) 
	{
		if ( ~<CurrentFilmFormat>~ != ~<LastFilmFormat>~ )
		{
			filmFormatChanged = TRUE;
			LastFilmFormat = ~<CurrentFilmFormat>~;
		}
	}

	opticalZoomChanged = FALSE;
	if ( <reason> == 5 ) 
	{
		opticalZoomChanged = TRUE;
	}

	preZoom = ~<$Con.DlgData[OpticalZoom]>~;

	lowVal = dlgData(GetAttrInfo, OpticalZoom, LowValue);
	highVal = dlgData(GetAttrInfo, OpticalZoom, HighValue);

	AdjustOpticalZoom( lowVal, highVal );
	zoom = Pin( <preZoom>, <lowVal>, <highVal> );

	dlg( SetStrings,OpticalZoom,~<zoom>~ );

	Msg = ~~;
	if ( <preZoom> > <zoom> )
	{
		Msg = ~Your optical zoom setting has exceeded the maximum optical zoom for this film format.\n\nThe optical zoom setting has been changed to the maximum allowed value.~;
	}
	else if ( <preZoom> < <zoom> )
	{
		Msg = ~Your optical zoom setting is lower than the minimum optical zoom for this film format.\n\nThe optical zoom setting has been changed to the minimum allowed value.~;
	}

	if ( ~<Msg>~ != ~~ )
	{
		Warning( Translate( ~<Msg>~ ) );
	}

	if ( <LastOpticalZoomSetting> == <zoom> )
	{	
		opticalZoomChanged = FALSE;
	}
	else
	{
		LastOpticalZoomSetting = <zoom>;
		opticalZoomChanged = TRUE;
	}

	if ( <UpdateCrop> && <reason> != 6 )
	{
		RefreshCropsComboBox(TRUE);
	}

	if ( <UpdateYCorrection> )
	{
		UpdateEditorXYOffsetSetting();
	}

	if ( <opticalZoomChanged> || <filmFormatChanged> )
	{
		UpdateScanSize(FALSE,TRUE);
		UpdateCalibrationFile(<loadingSettings>);
	}
	else
	{
		UpdateScanSize(FALSE,FALSE);

		UpdateCalibrationFile(<loadingSettings>);
	}

	return TRUE;
}


NUMERIC UpdateScanSize( userEnteredScanSize, displayMessage )
{
	AdjustScanWL( 0,0 );

	if ( !<userEnteredScanSize> )
	{
		ScanWidth = GetScanWidth();
		ScanLength = GetScanLength();

		Rotation = DlgData( GetNumeric,ScanRotation );
		if (<Rotation> == 90 || <Rotation> == 270)
		{
			temp = <ScanWidth>;
			ScanWidth = <ScanLength>;
			ScanLength = <temp>;
		}

		scanSize = RoundToDigit((<ScanWidth> * <ScanLength> * 3.0) / (1024.0 * 1024.0), 2);

		dlg( SetString,~<ScanWidth>~ + ~ x ~ + ~<ScanLength>~ + ~ (<scanSize> Mb)~,ScanSizeWidthLength );
	}

	dlg( GetStrings,Volume,Volume );
	diskSpace = GetDiskFreeMb(~<Volume>~);
	diskSpace = RoundToDigit(<diskSpace> / 1024.0, 2);
	dlg( SetStatus,1,~<diskSpace>~ + ~ Gb~ );

	return TRUE;
}

VOID AdjustScanWL( scanWidthMin,scanLengthMin )
{
	dlg( GetControlValue,~MiddleXField~,scanX );
	dlg( GetControlValue,~MiddleYField~,scanY );
	dlg( GetControlValue,~ScanWidthField~,scanW );
	dlg( GetControlValue,~ScanHeightField~,scanL );

	if ( ~<scanX>~ == ~~ )
	{
		scanX = 0;
	}
	if ( ~<scanY>~ == ~~ )
	{
		scanY = 0;
	}
	if ( ~<scanW>~ == ~~ )
	{
		scanW = 0;
	}
	if ( ~<scanL>~ == ~~ )
	{
		scanL = 0;
	}

	// Pin the values into valid range before adjusting
	// scan area to fit
	newScanX = Pin( <scanX>,2,98 );
	newScanY = Pin( <scanY>,2,98 );
	newScanW = RoundToDigit( Pin( <scanW>,<scanWidthMin>,100 ), 3 );
	newScanL = RoundToDigit( Pin( <scanL>,<scanLengthMin>,100 ), 3 );

	tmpMinScanX = <newScanW> / 2;
	tmpMaxScanX = 100 - <tmpMinScanX>;

	tmpMinScanY = <newScanL> / 2;
	tmpMaxScanY = 100 - <tmpMinScanY>;
	
	// Pin the values into valid range
	newScanX = RoundToDigit( Pin( <newScanX>,<tmpMinScanX>,<tmpMaxScanX> ), 3 );
	newScanY = RoundToDigit( Pin( <newScanY>,<tmpMinScanY>,<tmpMaxScanY> ), 3 );

	if ( ( <scanX> != <newScanX> ) || ( <scanY> != <newScanY> ) || ( <scanW> != <newScanW> ) || ( <scanL> != <newScanL> ) )
	{
		dlg( SetStrings,XPos,~<newScanX>~,YPos,~<newScanY>~,ScanWidth,~<newScanW>~,ScanLength,~<newScanL>~ );
	}
}


VOID UpdateFreeDiskSpace()
{
	dlg( GetStrings,Volume,Volume );
	diskSpace = GetDiskFreeMb(~<Volume>~);
	diskSpace = RoundToDigit(<diskSpace> / 1024.0, 2);
	dlg( SetStatus,1,~<diskSpace>~ + ~ Gb~ );
}


VOID UpdateScanButton()
{
	Frame = ~<$con.DlgData[Frame]>~;
	if ( ~<Frame>~ != ~<CurrentScanFrame>~ )
	{
		if ( DlgData( GetNumeric,AutoScan ) )
		{
			dlg( EnableControls,FALSE,ScanButton );
		}
		else if ( <Previewing> && !<CurrentControlsState> )
		{
			dlg( EnableControls,TRUE,ScanButton );
		}
		else
		{
			dlg( EnableControls,<CurrentControlsState>,ScanButton );
		}
	}
}


VOID UpdateCalibrationFile(loadingSettings)
{
	dlg( GetInput );

	UpdateSizzleCalibrationFile(<loadingSettings>);
}


VOID UpdateSizzleCalibrationFile(loadingSettings)
{
	CalibrationFile = ~<$con.DlgData[Format]>$<$con.DlgData[OpticalZoom]>~;

	dlg( SetString,~<CalibrationFile>~,CalibrationFile,0 );

	if ( !Files( FileExists,~<CalibrationDirectory>\<CalibrationFile>~ ) ) 
	{
		dlg( SetStatus,0,~Calibration for <$con.DlgData[Format]>(<$con.DlgData[OpticalZoom]>) does not exist.  You will have to calibrate.~ );
	}
	else
	{
		if ( !<loadingSettings> )
		{
			dlg( SetStatus,0,~~ );
		}
	}
}


LastFilmType = ~~;


VOID BrowseForLutFilePath()
{
	dlg( GetInput );
	StartingDirectory = ~<$App.Directory>\Scan\<$con.dlgData[ScannerType]>\Luts~;
	Directory( Create,~<StartingDirectory>~ );

	Title = ~Find the lut to apply to scanned images~;

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,Path,LutPath,Open) )
	{
		dlg( SetString,~<LutPath>~,LutFile,0 );
	}
}


VOID BrowseForSFSFile()
{
	dlg( GetInput );
	StartingDirectory = ~<$App.Directory>\Scan\<$con.dlgData[ScannerType]>\~;
	Directory( Create,~<StartingDirectory>~ );
	FileFilter = ~SFS Files|*.satdef|All Files|*.*||~;

	Title = ~Find the SFS Boundary Set to apply to scanned image~;

	if ( FileDialog( Title,~<Title>~,DefaultExt,~SATDEF~,Filter,~<FileFilter>~,DefaultDirectory,~<StartingDirectory>~,Path,SFSPath,Open) )
	{
		dlg( SetString,~<SFSPath>~,SFSFile,0 );
	}

}


VOID BrowseForImagePath()
{
	dlg( GetInput,GetStrings,Volume,Volume );
	StartingDirectory = ~<Volume>~;
	
	Title = ~Find the directory to save the scanned images~;

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,DefaultFile,Translate(~In this directory~),Path,Path,Save) )
	{
		TheDirectory = ~<$Str.$Path.Path>~;

		if ( CheckIfNetworkAccessable( TheDirectory ) )
		{
			dlg( SetString,~<TheDirectory>~ ,Volume,0 );
			dlg( GetInput,GetStrings,Volume,Volume );
			if ( ~<TheDirectory>~ != ~<Volume>~ )
			{
				Warning( Translate(~The path name that you have selected contains invalid characters.\n\nThese invalid characters have been removed before placing the path name in the dialog.~) );
			}

		}
	}
}


VOID BrowseForExposureProfile()
{
	StartingDirectory = ~<$App.Directory>\Scan\RFS 3570 Plus~;
	
	Title = ~Find the exposure profile~;

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<StartingDirectory>~,Path,Path,Open) )
	{
		dlg( SetString,~<$str.$Path.Path>~+~\~+~<$str.$Path.filename>~ ,DRGBProfile,0 );
	}
}


VOID BrowseForCalFilePath()
{
	SetupScannerParms();

	Title = ~Find calibration file for film size <$con.DlgData[Format]>~;

	if ( FileDialog( Title,~<Title>~,DefaultDirectory,~<CalibrationDirectory>~,Path,Path,Open ) )
	{
		dlg( SetString,~<$str.$Path.filename>~ ,CalibrationFile,0 );
	}
}

NUMERIC GetFilmDriveVendor()
{
	DlgData( GetValues,FilmDriveVendor,FDVendorTemp );
	FDVendor = ~<FDVendorTemp>~;

	if ( ~<FDVendor>~ == Translate( ~Hicks~ ) )
	{
		FDVendor = ~Hicks~;
	}
	else if ( ~<FDVendor>~ == Translate( ~Bremson~ ) )
	{
		FDVendor = ~Bremson~;
	}
	else if ( ~<FDVendor>~ == Translate( ~Cut Neg~ ) )
	{
		FDVendor = ~None~;
	}
	else
	{
		return Warning( Translate(~<FDVendor> is not supported in this version~) );
	}
	return TRUE;

}

NUMERIC EditFilmDriveSetup()
{
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~None~ || ~<FDVendor>~ == ~~ )
	{
		return FALSE;
	}
	
	Query = STR ( SELECT * From <FDVendor>FilmDrive Order By Name );

	Action = ACTION DOC ( ~<FDVendor>FilmDriveSetups~ OpenOnce <FDVendor>FDDoc "Init( ~<FDVendor> FilmDrive Setups~,~<Query>~ );" );

	return PerformActions( Action );
}


VOID UpdateFilmDriveSetupsCombo()
{
	// Call the FilmDriveUnselected method of the previously selected film drive
	if ( FunctionDefined( ~<FDVendor>_FilmDriveUnselected~ ) )
		{ <FDVendor>_FilmDriveUnselected(); }

	// Get the current selection translated to a vendor
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ != ~~ && ~<FDVendor>~ != ~None~ )
	{
		// Call the FilmDriveSelected method of the currently selected film drive
		FilmDriveSelected();

		Query = ~Select * from <FDVendor>FilmDrive Order By Name~;

		if ( PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			if ( List( GetFirst,EditorRecord ) )
			{
				List( MakeStringList,FilmDriveSetupList,Name );
				dlg( SetControlFromStringList,VendorSetupComboBox,FilmDriveSetupList,Selection );
				dlg( GetInput );
				return;
			}
		}
	}
	else
	{
		NoFilmDriveSelected();
		dlg( SetStrings,ViewDriveControls,~0~ );
		ShowFilmDriveControls();
		ClearScanList();
		ResyncScanList();
		ClearScanList();
	}
	StringList( EmptyList, New );
	dlg( SetControlFromStringList,VendorSetupComboBox,EmptyList );
	DlgData( SetValues,	FilmDriveSetup, ~~ );
	dlg( Update );
	dlg( GetInput );
	return;
}

NUMERIC EditFilmEditors()
{
	FilmEditorChanged = TRUE;

	DlgData( GetValues,FilmEditor,FilmEditor );

	Query = STR ( SELECT * From Editors Order By Vendor );

	Action = ACTION DOC ( ~FilmEditors~ OpenOnce EditorsDoc "Init( ~Vendor Editors~,~<Query>~ );" );

	return PerformActions( Action );
}

VOID UpdateEditorXYOffsetSetting()
{
	DlgData( GetValues,FilmEditor,FilmEditor );
	DlgData( GetValues,Format,Format );

	DlgData( SetValues, EXOffsetIncrementUnit, ~0~ );
	DlgData( SetValues, EYOffsetIncrementUnit, ~0~ );
	if ( ~<FilmEditor>~ != ~~  && ~<Format>~ != ~~ )
	{
		Query = ~Select * from Editors Where Vendor = '<FilmEditor>' AND FilmFormat = '<Format>' Order By Vendor,FilmFormat~;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query the Editors table.\n\n<Query>\n\n<theErr>~ ) ); 
			return;
		}

		if ( List( GetFirst,EditorRecord ) )
		{
			EXOffsetIncrementUnit = EditorRecord( GetNumeric,XOffsetIncrementUnit );
			EYOffsetIncrementUnit = EditorRecord( GetNumeric,YOffsetIncrementUnit );
			DlgData( SetValues, EXOffsetIncrementUnit, ~<EXOffsetIncrementUnit>~, EYOffsetIncrementUnit, ~<EYOffsetIncrementUnit>~ );
		}
	}
	FilmEditorChanged = FALSE;
}


NUMERIC ResetVendorXOffset()
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	retval = TRUE;

	GetFilmDriveVendor();

	Delta = DlgData( GetNumeric,TXOffsetPositionInUnits );

	Delta = <Delta> * (-1);

	if ( !FunctionDefined( ~<FDVendor>_MoveDeltaX~ ) )
	{
		retval = FALSE;
		VendorNotSelected( ~<FDVendor>_MoveDeltaX~ );
	}

	FilmDriveCmdInProgress( ~Resetting X Offset to 0...~ );

	SetTransportControlsRunning();

	if ( !<FDVendor>_MoveDeltaX( <Delta>, FALSE ) )
	{
		retval = FALSE;
		ReportFilmDriveError( ~MoveDeltaX~ );
	}

	SetDialogVendorXOffsetInfo( 0, 0.0 );
	SetTransportControlsStopped();

	FilmDriveCmdInProgress( ~~ );

	dlg( Update );

	return <retval>;
}


VOID SetDialogVendorXOffsetInfo( TotalXOffsetUnits, TXOffsetIncrementUnit )
{
	NewTotalXOffsetUnits = 0;
	NewTotalXOffsetInches = 0.0;
	if ( <TotalXOffsetUnits> && <TXOffsetIncrementUnit> )
	{
		NewTotalXOffsetUnits = <TotalXOffsetUnits>;
		NewTotalXOffsetInches = <TotalXOffsetUnits> * <TXOffsetIncrementUnit>;
	}
	NewTotalXOffsetUI = InchesTo<DisplayUnits>( <NewTotalXOffsetInches> );
	NewTotalXOffsetUI = ntoa( <NewTotalXOffsetUI>,~%.03f~ );
	dlg( SetStrings,TXOffsetPositionInUnits,~<NewTotalXOffsetUnits>~,TXOffsetPositionInInches,~<NewTotalXOffsetUI>~ );
	dlg( Save,TXOffsetPositionInUnits );
	dlg( Save,TXOffsetPositionInInches );
}


VOID SetDialogVendorYOffsetInfo( TotalYOffsetUnits, EYOffsetIncrementUnit )
{
	NewTotalYOffsetUnits = <TotalYOffsetUnits>;
	NewTotalYOffsetInches = 0.0;
	if ( <TotalYOffsetUnits> && <EYOffsetIncrementUnit> )
	{
		NewTotalYOffsetUnits = <TotalYOffsetUnits>;
		NewTotalYOffsetInches = <TotalYOffsetUnits> * <EYOffsetIncrementUnit>;
	}
	NewTotalYOffsetUI = InchesTo<DisplayUnits>( <NewTotalYOffsetInches> );
	NewTotalYOffsetUI = ntoa( <NewTotalYOffsetUI>,~%.03f~ );
	dlg( SetStrings,EYOffsetPositionInUnits,~<NewTotalYOffsetUnits>~,EYOffsetPositionInInches,~<NewTotalYOffsetUI>~ );
	dlg( Save,EYOffsetPositionInUnits );
	dlg( Save,EYOffsetPositionInInches );
}


NUMERIC Normalize_BRGB()
{
	dlg( GetInput );

	DlgData( GetValues,brightnessOverride,Brightness,redOverride,Red,greenOverride,Green,blueOverride,Blue );

	delta = 0 - <Red>;
	Brightness = <Brightness> + <delta>;
	Red = 0;
	Green = <Green> - <delta>;
	Blue = <Blue> - <delta>;

	DlgData( SetValues,brightnessOverride,~<Brightness>~,redOverride,~0~,greenOverride,~<Green>~,blueOverride,~<Blue>~ );

	return dlg( Update );
}


NUMERIC OnDRGB_2_BRGBC( buttonPressed )	// USER PRESSED THE CALC BUTTON OR AUTOCALC AND THE FRAME HASN'T CHANGED
{
	if ( <buttonPressed> )
	{
		dlg( GetInput );
	}

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not access the shared database. <theErr>~ ) );
	}

	// 02/11/02 DPT
	// Added this code (similar to HandleDRGB) to normalize the density
	// if the checkbox is selected.
	a_D = a_R = a_G = a_B = 0;
	t_D = t_R = t_G = t_B = 0;
	DlgData( GetValues,dDensity,a_D,dRed,a_R,dGreen,a_G,dBlue,a_B );
	
	//UseAnalyzerDRGBValues = DlgData( GetNumeric,UseAnalyzerDRGBValues );
	//if ( <UseAnalyzerDRGBValues> )
	//{
		t_D = <t_D> + <a_D>;
		t_R = <t_R> + <a_R>;
		t_G = <t_G> + <a_G>;
		t_B = <t_B> + <a_B>;
	//}
	//else
	//{
	//	t_D = t_R = t_G = t_B = 0;
	//}

	NormalizeDRGB(t_D,t_R,t_G,t_B);
	DlgData( SetValues,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );
	dlg( SetStrings,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );

	doCalc = TRUE;

	if ( !<buttonPressed> )
	{
		LockScannerOffsets = DlgData( GetNumeric,LockScannerOffsets );
		if ( <LockScannerOffsets> )
		{
			doCalc = FALSE;
		}

		//if ( !<UseAnalyzerDRGBValues> )
		//{
		//	a_D = a_R = a_G = a_B = 0;
		//	c_D = c_R = c_G = c_B = 0;
		//	o_Br = o_R = o_G = o_B = o_C = 0;
		//	t_D = t_R = t_G = t_B = 0;
			
		//	doCalc = FALSE;
		//}

		AutoDRGBAdjustments = DlgData( GetNumeric,AutoDRGBAdjustments );
		if ( !<AutoDRGBAdjustments> )
		{
			doCalc = FALSE;
		}
	}

	if ( !<doCalc> )
	{
		return TRUE;
	}

	if ( Calc_BRGBC_From_BRGBC( dBase,<doCalc>,TRUE ) )
	{
		return dlg( SetStatus,0,Translate( ~Selected Analyzer DRBG values were used to set the color balance~ ) );
	}

	dlg( SetStatus,0,Translate( ~Could not calculate a scan color balance~ ) );
	return FALSE;
} 


NUMERIC Calc_BRGBC_From_BRGBC( &dBase, DoCalc, DisplayDRBGError )
{
	DlgData( GetValues,dDensity,Density,dRed,Red,dGreen,Green,dBlue,Blue,DRGBRefs,Name );

	Density = Pin( ~<Density>~,0,255 );
	Red = Pin( ~<Red>~,0,255 );
	Green = Pin( ~<Green>~,0,255 );
	Blue = Pin( ~<Blue>~,0,255 );

	dlg( SetStrings,dDensity,~<Density>~,dRed,~<Red>~,dGreen,~<Green>~,dBlue,~<Blue>~ );

	if ( ~<Name>~ == ~~ )
	{
		dlg( SetStatus,0,Translate( ~No DRGB reference information is available.~ ) );
		return FALSE;
	}

	Fields = ~rfDensity,rfRed,rfGreen,rfBlue,Brightness,RedOffset,GreenOffset,BlueOffset,ContrastOffset,UseSlope,SlopeLut~;
	Query = ~Select <Fields> From DRGBRefs Where Name = '<Name>'~;

	if ( !dBase( GetValuesFor,~<Query>~,<Fields> ) )
	{
		if ( <DisplayDRBGError> )
		{
			Warning( Translate( ~Could not find <Name> in DRGBRefs.~ ) );
		}
		return FALSE;
	}

	DlgData( SetValues,rDensity,~<rfDensity>~,rRed,~<rfRed>~,rGreen,~<rfGreen>~,rBlue,~<rfBlue>~ );

	DlgData( SetValues,rfBrightness,<Brightness>,rfRed,~<RedOffset>~,rfGreen,~<GreenOffset>~,rfBlue,~<BlueOffset>~,rfContrast,~<ContrastOffset>~ );

	SlopeLutFile = Numeric( ~<UseSlope>~ ) ? ~<SlopeLut>~ : ~~;

	DlgData( Set,SlopeLutFile,~<SlopeLutFile>~ );

	if ( !LoadSlopeLut( ~<SlopeLutFile>~ ) )
	{	return FALSE;	}

	if ( <DoCalc> )
	{
		DRGB_2_BRGBC(DlgData);

		//CurrentBrightness = DlgData(GetNumeric,brightnessOverride);
		//DlgData( SetValues,brightnessOverride,<CurrentBrightness> + 1 );	// TEMPORARY

		DlgData( GetValues,brightnessOverride,Brightness,redOverride,Red,greenOverride,Green,blueOverride,Blue,contrastOverride,Contrast );

		dlg( SetStrings,brightnessOverride,~<Brightness>~,redOverride,~<Red>~,greenOverride,~<Green>~,blueOverride,~<Blue>~,contrastOverride,~<Contrast>~ );
	}

	return TRUE;
}

NUMERIC Reverse_Calc_BRGBC_From_BRGBC( &dBase, DoCalc, DisplayDRBGError )
{
	DlgData( GetValues,brightnessOverride,Brightness,redOverride,Red,greenOverride,Green,blueOverride,Blue,contrastOverride,Contrast,DRGBRefs,Name );

	Brightness = Pin( ~<Brightness>~,-300,300 );
	Red = Pin( ~<Red>~,-300,300 );
	Green = Pin( ~<Green>~,-300,300 );
	Blue = Pin( ~<Blue>~,-300,300 );
	Contrast = Pin( ~<Contrast>~,-100,100 );

	dlg( SetStrings,brightnessOverride,~<Brightness>~,redOverride,~<Red>~,greenOverride,~<Green>~,blueOverride,~<Blue>~,contrastOverride,~<Contrast>~ );

	if ( ~<Name>~ == ~~ )
	{
		return dlg( SetStatus,0,Translate( ~No DRGB reference information is available.~ ) );
	}

	Fields = ~rfDensity,rfRed,rfGreen,rfBlue,Brightness,RedOffset,GreenOffset,BlueOffset,ContrastOffset,UseSlope,SlopeLut~;
	Query = ~Select <Fields> From DRGBRefs Where Name = '<Name>'~;

	if ( !dBase( GetValuesFor,~<Query>~,<Fields> ) )
	{ 
		if ( <DisplayDRBGError> )
		{
			return Warning( Translate( ~Could not find <Name> in Reverse DRGBRefs.~ ) );
		}
	}

	DlgData( SetValues,rDensity,~<rfDensity>~,rRed,~<rfRed>~,rGreen,~<rfGreen>~,rBlue,~<rfBlue>~ );

	DlgData( SetValues,rfBrightness,<Brightness>,rfRed,~<RedOffset>~,rfGreen,~<GreenOffset>~,rfBlue,~<BlueOffset>~,rfContrast,~<ContrastOffset>~ );

	SlopeLutFile = Numeric( ~<UseSlope>~ ) ? ~<SlopeLut>~ : ~~;

	DlgData( Set,SlopeLutFile,~<SlopeLutFile>~ );

	if ( !LoadSlopeLut( ~<SlopeLutFile>~ ) )
	{	return FALSE;	}

	if ( <DoCalc> )
	{
		return Reverse_DRGB_2_BRGBC(DlgData);
	}

	return TRUE;
}


NUMERIC OnResetTo0Button( resetContrast )
{
	if ( <resetContrast> )
	{
		dlg( SetStrings,brightnessOverride,~0~,
			redOverride,~0~,greenOverride,~0~,
			blueOverride,~0~,contrastOverride,~0~ );
	}
	else
	{
		dlg( SetStrings,brightnessOverride,~0~,
			redOverride,~0~,greenOverride,~0~,
			blueOverride,~0~ );
	}

	return TRUE;
} 

NUMERIC OnColorChange()
{
	dlg( EnableControls,TRUE,ReapplyButton );

	return TRUE;
}

NUMERIC OnSharpenChange()
{
	AdaptiveSharpen = DlgData( GetNumeric,AdaptiveSharpen );
	if ( <AdaptiveSharpen> == TRUE )
	{
		dlg( EnableControls,TRUE,
			SharpenLimitField,SharpenLimitSlider,SharpenLimitMinusButton,SharpenLimitZeroButton,SharpenLimitPlusButton,
			SharpenThresholdField,SharpenThresholdSlider,SharpenThresholdMinusButton,SharpenThresholdZeroButton,SharpenThresholdPlusButton,
			SharpenBlurAmountField,SharpenBlurAmountSlider,SharpenBlurAmountMinusButton,SharpenBlurAmountZeroButton,SharpenBlurAmountPlusButton );
	}
	else
	{
		dlg( EnableControls,FALSE,
			SharpenLimitField,SharpenLimitSlider,SharpenLimitMinusButton,SharpenLimitZeroButton,SharpenLimitPlusButton,
			SharpenThresholdField,SharpenThresholdSlider,SharpenThresholdMinusButton,SharpenThresholdZeroButton,SharpenThresholdPlusButton,
			SharpenBlurAmountField,SharpenBlurAmountSlider,SharpenBlurAmountMinusButton,SharpenBlurAmountZeroButton,SharpenBlurAmountPlusButton );
	}

	dlg( EnableControls,TRUE,ReapplyFiltersButton );

	return TRUE;
}

NUMERIC OnNoiseReductionChange()
{
	dlg( EnableControls,TRUE,ReapplyFiltersButton );

	return TRUE;
}

VOID ChangeSharpenAmount( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenAmount ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenAmount );
}

VOID ChangeSharpenLimit( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenLimit ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenLimit );
}

VOID ChangeSharpenThreshold( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenThreshold ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenThreshold );
}

VOID ChangeSharpenBlurAmount( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,SharpenBlurAmount ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,SharpenBlurAmount );
}

VOID ChangeNoiseReductionAmount( Amount,MinValue,MaxValue )
{
	sum = (<amount> == 0) ? 0 : dlgData( GetNumeric,NoiseReductionAmount ) + <amount>;

	sum = Pin( <sum>,<MinValue>,<MaxValue> );

	dlg( SetString,~<sum>~,NoiseReductionAmount );
}

NUMERIC OnReapplyButton()
{
	if ( !Defined( Scanner ) )
	{
		return FALSE;
	}

	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame );
	DlgData( Set,DisplayLastImage,TRUE );
	dlg( Update );

	Ext = ~<$con.DlgData[FileExtension]>~;

	ImagesPath = CreateImagePath( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<Ext>~ );

	ImagesPath = MakePath( ~<ImagesPath>~ );

	if ( !BroadcastMessageToAllViews( CanReleaseImage,~<ImagesPath>~ ) )
		{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }

	if ( !DlgData( GetNumeric,ScanFromDatabase ) )
	{
		if ( !BroadcastMessageToAllViews( ReleaseImage,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}
	else
	{
		if ( !BroadcastMessageToAllViews( ReleaseThumbnail,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}

	SetupTheScanner(FALSE,FALSE,FALSE);

	EnableScanningControls( FALSE );

	ReapplyingScannerOffsets = TRUE;

	Scanner( ReapplyAsync,SizzleControl );

	return TRUE;
} 


IF 0
{
	Reference DRGB  64	0	0	0		BRGBC  -1   0   3   4   2

					46	0	0	0		10	0   3	5    2
					83	1	2	0	    -14	2   5	4    2	(-13 1 4 4 2)
					110	8	11  0	    -30	5  10	4    2
					94	10	10	0	    -20	7  10	4    2	(-19 6 9 4 2)
					69	6	5   0       -4	4	6   4    2
					45	3	5   0		12	0	5   4    2
					30	9	5   7		24	0	3	6	 2
}


VOID OnEditDRGBRefs()
{
	Query = STR ( SELECT * From DRGBRefs Order By Name );

	Actions = ACTION Doc ( ~DRGBRefs~ OpenOnce DRGBRefsDoc "Init( ~~,~<Query>~ );" );

	PerformActions( Actions );
}


VOID OnEditCrops()
{
	Query = STR ( SELECT * From Crops Order By Name );

	Actions = ACTION Doc ( ~Crops~ OpenOnce CropsDoc "Init( ~~,~<Query>~ );" );

	PerformActions( Actions );
}


VOID OnSaveCurrentCrop()
{
	Query = STR ( SELECT * From Crops Order By Name );

	dlg( GetInput );

	DlgData( GetValues,CropX,cX,CropY,cY,CropWidth,cW,CropLength,cL );
	DlgData( GetValues,XPOS,sX,YPOS,sY,SCANWIDTH,sW,SCANLENGTH,sL,ScanRotation,ScanRotation );
	DlgData( GetValues,Format,Format,OpticalZoom,OpticalZoom );

	Actions = ACTION Doc ( ~Crops~ OpenOnce CropsDoc "AddNewCrop( ~~,~<Query>~,<cX>,<cY>,<cW>,<cL>,<sX>,<sY>,<sW>,<sL>,<ScanRotation>,~<Format>~,<OpticalZoom>,<osX>,<osY>,<osW>,<osL> );" );

	PerformActions( Actions );
}


NUMERIC OnSaveSetup()
{
	dlg( GetInput );

	ScanSetupName = ~<$con.DlgData[ScanSetup]>~;

	if ( ~<ScanSetupName>~ == ~~ )
	{
		return Warning( Translate( ~No setup profile name specified in setup field~ ) );
	}

	Key = ~Name = '<$con.DlgData[ScanSetup]>'~;

	Query = ~Select * From ScanSetups Where <Key>~;

	if ( PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		if ( !List( GetFirst,Item ) )
		{
			if ( MessageBox( Translate(~Create a new setup called <$con.DlgData[ScanSetup]>?~),YESNO ) != YES )
			{
				return FALSE;
			}

			List( AddNew,Item );
			Item( Set,Name,~<$con.DlgData[ScanSetup]>~ );
		}
		else
		{
			if ( MessageBox( Translate(~Update the existing setup called <$con.DlgData[ScanSetup]>?~),YESNO ) != YES )
			{
				return FALSE;
			}
		}

		if ( ~<DisplayUnits>~ != ~Inches~ )
		{
			oldXSliderIFactor = DlgData( GetNumeric,XSliderIFactor );
			XSliderIFactor = <DisplayUnits>ToInches( <oldXSliderIFactor> );
			oldFixedNonFdaAdv = DlgData( GetNumeric,FixedNonFDAAdvance );
			FixedNonFDAAdvance = <DisplayUnits>ToInches( <oldFixedNonFdaAdv> );

			DlgData( SetValues,XSliderIFactor,<XSliderIFactor>,FixedNonFDAAdvance,<FixedNonFDAAdvance> );
		}

		if ( !Item( UpdateFrom,DlgData ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
			return Warning( Translate( ~Could not update ScanSetups record where <Key>. <theErr>~ ) );
		}

		if ( ~<DisplayUnits>~ != ~Inches~ )
		{
			DlgData( SetValues,XSliderIFactor,<oldXSliderIFactor>,FixedNonFDAAdvance,<oldFixedNonFdaAdv> );
		}

		return List( Update );
	}

	List( GetErrorDescription,0,theErr );
	return Warning( Translate( ~Query Failed: <Query>. <theErr>~ ) );

	// The old way

	Key = ~ScannerType = '<$con.DlgData[ScannerType]>'~;
	Query = ~Select * From ScanSetups Where <Key> Order By Name~;
	
	GenCon( ScanSetupToAdd,IsCopyOf,dlgData );

	ScanSetupToAdd( Set,Name,~<$con.DlgData[ScanSetup]>~ );

	ScanSetupToAdd( Hang,~[GenCons]~,ScanSetupToAdd );

	Actions = ACTION Doc ( ~ScanSetups~ OpenOnce ScanSetupsDoc "AddSetup( ~Scan Setups~,~<Query>~,ScanSetupToAdd );" );

	PerformActions( Actions );

	return TRUE;
}


VOID OnEditSetups()
{
	Key = ~ScannerType = '<$con.DlgData[ScannerType]>'~;
	Query = ~Select * From ScanSetups Where <Key> Order By Name~;

	Actions = ACTION Doc ( ~ScanSetups~ OpenOnce ScanSetupsDoc "Init( ~Scan Setups~,~<Query>~ );" );

	PerformActions( Actions );
}


NUMERIC LoadSettings( SetupName, ForceLoad, CheckIfLoaded, IgnoreFilmDriveEnable, LoadDefaults )
{
	retval = TRUE;
	if ( !DefinedAndNotNull( SetupName ) )
	{ 
		dlg( GetInput );
		SetupName = ~<$con.dlgData[ScanSetup]>~;
	}

	if ( ( ~<SetupName>~ == ~~ ) || ( !<ForceLoad> && ( ~<SetupName>~ == ~<LastSetupName>~ ) ) )
	{
		if ( !<ForceLoad> )
		{
			dlg( SetStatus,0,Translate( ~No settings changes required~ ) );
			return TRUE;
		}
		else
		{
			dlg( SetStatus,0,Translate( ~No settings were loaded~ ) );
			if ( !<LoadDefaults> )
			{
				return Warning( Translate( ~Please select a Setup first.~ ) );
			}
		}
		if ( !<IgnoreFilmDriveEnable> )
		{
			UpdateFilmDriveSetupsCombo();
			dlg( SetStrings,FilmDriveEnabled,~0~ );
		}
	}
	else
	{
		Key = ~Name = '<SetupName>' AND ScannerType = '<$con.DlgData[ScannerType]>'~;
		Query = ~Select * from ScanSetups Where <Key>~;

		if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate( ~Query Failed: <Query>. <theErr>~ ) );
		}

		if ( !List( GetFirst,Setup ) )
		{
			return Warning( Translate( ~Could not find a setup named <SetupName>~ ) );
		}

		// Disable the current vendor drive settings before changing
		// to a new drive/setup combo

		GetFilmDriveVendor();
		OldFDVendor = ~<FDVendor>~;

		SaveGotoPunchNumber = ~<$con.dlgData[GotoPunchNumber]>~;
		if ( !<IgnoreFilmDriveEnable> )
		{
			dlg( SetStrings,FilmDriveEnabled,~0~ );
			EnableFilmDriveChanged(<CheckIfLoaded>,TRUE);
		}

		if ( <IgnoreFilmDriveEnable> )
		{
			SaveScanFromDatabase = ~<$con.dlgData[ScanFromDatabase]>~;
			SaveFilmDriveVendor = ~<$con.dlgData[FilmDriveVendor]>~;
			SaveFilmDriveSetup = ~<$con.dlgData[FilmDriveSetup]>~;
			SaveFilmDriveEnabled = ~<$con.dlgData[FilmDriveEnabled]>~;
			SaveTension = ~<$con.dlgData[Tension]>~;
			SaveAutoScan = ~<$con.dlgData[AutoScan]>~;
			SaveIgnoreXAdjustments = ~<$con.dlgData[IgnoreXAdjustments]>~;
			SaveCutNegPrompt = ~<$con.dlgData[CutNegPrompt]>~;
		}

		if ( !Setup( UpdateIn,dlgData ) )
		{
			return Warning( Translate( ~Failed to update the dialog from <SetupName>~ ) );
		}

		// Use previous values, so that drive is not changed/detensioned, etc
		if ( <IgnoreFilmDriveEnable> )
		{
			DlgData( SetValues,
					 AutoScan, <SaveAutoScan>,
					 ScanFromDatabase, <SaveScanFromDatabase>,
					 FilmDriveVendor, ~<SaveFilmDriveVendor>~,
					 FilmDriveSetup, ~<SaveFilmDriveSetup>~,
					 FilmDriveEnabled, <SaveFilmDriveEnabled>,
					 FilmTension, <SaveTension>,
					 AutoScan, <SaveAutoScan>,
					 IgnoreXAdjustments, <SaveIgnoreXAdjustments>,
					 CutNegPrompt, <SaveCutNegPrompt> );
		}
		else
		{
			LastFrame = ~~;
			if ( ~<$pcon.Setup[FilmDriveVendor]>~ == ~None~ )
			{
				dlg( SetStrings,FilmDriveVendor,~Cut Neg~ );
			}

			DlgData( Set,UseAnalyzerDRGBValues,1 );
		}

		if ( <DisplayUnits> != ~Inches~ )
		{
			XSliderIFactor = NUMERIC( ~<$pcon.Setup[XSliderIFactor]>~ );
			XSliderIFactor = InchesTo<DisplayUnits>( <XSliderIFactor> );
			XSliderIFactor = ntoa( <XSliderIFactor>,~%.03f~ );

			FixedNonFdaAdv = NUMERIC( ~<$pcon.Setup[FixedNonFDAAdvance]>~ );
			FixedNonFdaAdv = InchesTo<DisplayUnits>( <FixedNonFdaAdv> );
			FixedNonFdaAdv = ntoa( <FixedNonFdaAdv>,~%.03f~ );

			dlg( SetStrings,XSliderIFactor,~<XSliderIFactor>~,FixedNonFDAAdvance,~<FixedNonFdaAdv>~ );
			dlg( Save,XSliderIFactor );
			dlg( Save,FixedNonFDAAdvance );
		}

		dlg( Update );

		FilmDriveSetup = ~<$con.dlgData[FilmDriveSetup]>~;
		UpdateFilmDriveSetupsCombo();
		dlg( SetStrings,FilmDriveSetup,~<FilmDriveSetup>~ );

		dlg( SetStatus,0,Translate( ~All settings were updated from the setting named: <SetupName>~ ) );

		dlg( Update );

		NewFilmType = ~<$pcon.Setup[FilmType]>~;
		NewFilmType = ~<$Str.$NewFilmType.WithOutExt>~;
		FilmTermsFile = ~~;
		FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<NewFilmType>~;

		if ( !Files( FileExists,~<FilmTermsFile>~ ) )
		{
			Warning( Translate( ~The film type associated with scan setup <SetupName> does not exist.\nChoose a different film type and save the scan setup again.~ ) );
		}
	}

	RefreshControls( TRUE );

	EnableFilmDriveChanged( <CheckIfLoaded>,FALSE );

	punchPadding = ~<$pcon.Setup[FrameToPunchPadding]>~;
	if ( ~<punchPadding>~ == ~~ )
	{
		punchPadding = ~5~;
	}
	dlg( SetStrings,FrameToPunch,~<$pcon.Setup[FrameToPunch]>~,
					FrameToPunchPadding,~<$pcon.Setup[FrameToPunchPadding]>~ );

	GetFilmDriveVendor();
	if ( ~<OldFDVendor>~ == ~<FDVendor>~ )
	{
		dlg( SetStrings,GotoPunchNumber,~<SaveGotoPunchNumber>~ );
	}

	retval = OnFormatChange( 1, ~Settings loaded.~, FALSE, FALSE );

	dlg( Update );

	FilmTypeToLoad = ~<$pcon.Setup[FilmType]>~;
	FilmTypeToLoad = ~<$Str.$FilmTypeToLoad.WithOutExt>~;
	dlg( SelectString,FilmTypesComboBox,~<FilmTypeToLoad>~ );
	dlg( SelectString,ExposureProfileComboBox,~<$pcon.Setup[DRGBProfileName]>~ );
	dlg( SelectString,FilmFormatComboBox,~<$pcon.Setup[Format]>~ );
 	dlg( SelectString,EditorComboBox,~<$pcon.Setup[FilmEditor]>~ );
	RefreshCropsComboBox(TRUE);

	setupICCProfile = ~<$pcon.Setup[ICCProfile]>~;
	setupOutputProfile = ~<$pcon.Setup[ICCOutputProfile]>~;

	if ( ~<setupICCProfile>~ != ~~)
	{
		Query = ~Select * From Profiles Where Name = '<setupICCProfile>'~;

		if ( !PGenConList( profileList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			profileList( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query for profile (<setupICCProfile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		}
		if ( profileList( Empty ) )
		{
			Warning( Translate( ~The Scanner Profile (<setupICCProfile>) in the Scan Setup (<SetupName>)\nis not in the Profiles table.\n\nReverting to the previous Scanner Profile...~ ) ); 
		}
	}
	dlg( SelectString,ScannerProfileComboBox,~<setupICCProfile>~ );

	if ( ~<setupOutputProfile>~ != ~~)
	{
		Query = ~Select * From Profiles Where Name = '<setupOutputProfile>'~;

		if ( !PGenConList( profileList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			profileList( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query for profile (<setupOutputProfile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		}
		if ( profileList( Empty ) )
		{
			Warning( Translate( ~The Storage Profile (<setupOutputProfile>) in the Scan Setup (<SetupName>)\nis not in the Profiles table.\n\nReverting to the previous Storage Profile...~ ) ); 
		}
	}
	dlg( SelectString,OutputProfileComboBox,~<setupOutputProfile>~ );

	dlg( SetControlValue,~ScanSetupsComboBox~,~<SetupName>~);

	LastSetupName = ~<SetupName>~;

	return <retval>;
}


NUMERIC Bremson_OpenFilmDrive( UpdateStatus )
{
	dlg( GetInput );
    DlgData( Get,FilmDriveSetup,FilmDriveSetup );

	if ( ~<FilmDriveSetup>~ == ~~ )
	{
		return Warning( Translate( ~You must select a film drive setup first~ ) );
	}

	Query = ~Select * From BremsonFilmDrive Where Name = '<FilmDriveSetup>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed: <DocumentQuery>. <theErr>~ ) );
	}

	if ( !List( GetFirst,Setup ) )
	{
		return Warning( Translate( ~Could not find a setup named <FilmDriveSetup>~ ) );
	}

	if ( !Defined( FilmDrive ) )
	{
		BremsonFilmDrive( FilmDrive );
		Global( FilmDrive );
		FilmDrive( Simulate,Setup( GetNumeric,Simulate ) );
	}

	Port = Setup( GetNumeric,Port );
	SimulateFilmDrive = Setup( GetNumeric, Simulate );
	MinPunchNumber = 1;
	MaxPunchNumber = 32767;

	TXOffsetIncrementUnit = 0.001;
	MaxXIncrements = <MaxXIncrementsInInches>/<TXOffsetIncrementUnit>;

	SettleTime = Setup( GetNumeric,SettleTime );

	if ( !FilmDrive( Open,<Port> ) )
	{
		return Warning( Translate( ~Could not open serial port <Port>~ ) );
	}

	// Halt the drive to clear the DLL
	FilmDrive( Stop );
	FilmDrive( Stop );

	// The Bremson DLL always fails on the first setup call, therefore
	// we call it twice (checking the return code on the second call)
	// This problem is linked to the DLL
	if ( FilmDrive( Setup,Setup ) )
	{
		FilmDrive( Initialize );
	}
	if ( !FilmDrive( Setup,Setup ) )
	{
		return Warning( Translate( ~Failed to setup the film drive~ ) );
	}
	if ( !FilmDrive( Initialize ) )
	{
		return Warning( Translate( ~Failed to initialize the film drive~ ) );
	}
	FilmDirection = Setup( GetNumeric, Direction );
	DlgData( SetValues,TXOffsetIncrementUnit,<TXOffsetIncrementUnit> );

	return TRUE;
}


NUMERIC Hicks_OpenFilmDrive( UpdateStatus )
{
	dlg( GetInput );

	DlgData( Get,FilmDriveSetup,FilmDriveSetup );

	if ( ~<FilmDriveSetup>~ == ~~ )
	{
		return Warning( Translate( ~You must select a film drive setup first~ ) );
	}

	Query = ~Select * From HicksFilmDrive Where Name = '<FilmDriveSetup>'~;	

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed: <DocumentQuery>. <theErr>~ ) );
	}

	if ( !List( GetFirst,Setup ) )
	{
		return Warning( Translate( ~Could not find a setup named <FilmDriveSetup>~ ) );
	}

	if ( !Defined( FilmDrive ) )
	{
		Device( FilmDrive );
		Global( FilmDrive );
	}

	Port = Setup( GetNumeric, Port );	// ~The port is <$pcon.Setup[Port]>~
	SimulateFilmDrive = Setup( GetNumeric, Simulate );
	MinPunchNumber = 1;
	MaxPunchNumber = 9999;

	TXOffsetIncrementUnit = 0.001;
	MaxXIncrements = <MaxXIncrementsInInches>/<TXOffsetIncrementUnit>;


	SettleTime = Setup( GetNumeric,SettleTime );
	// REM Hicks Starts the film roll at the high end punch numbers
	// REM ... so set the simulated punch number to one more than the
	// REM max valid punch number of 9999
	SimulatedPunchNumber = <MaxPunchNumber> + 1;

	Global( Port );
	Global( SimulatedPunchNumber );
	localPort = <Port>;

	Hicks_SetupGlobals();

	// REM - ByteSize 4 5 6 7 8 = 4 5 6 7 8
	// REM - Parity   0 1 2 3 4 = no, odd, even, mark, space
	// REM - StopBits 0 1 2     = 1 1.5 2
	HicksBaudRate = Setup( GetNumeric, BaudRate );
	HicksByteSize = Setup( GetNumeric, ByteSize );
	HicksParity   = Setup( GetNumeric, Parity );
	HicksStopBits = Setup( GetNumeric, StopBits );

	if ( !<SimulateFilmDrive> )
	{
		if ( !FilmDrive( Name,Com<Port>,Access,ReadWrite,Open ) )
		{
			return Warning( Translate( ~Could not open serial port <localPort>~ ) );
		}

		if ( !FilmDrive( GetCommParameters, parameters ) )
		{
			return Warning( Translate( ~Could not get parameters for serial port <localPort>~ ) );
		}

		parameters( SetValues,BaudRate,<HicksBaudRate>,ByteSize,<HicksByteSize>,
					Parity,<HicksParity>,StopBits,<HicksStopBits> ); 

		if ( !FilmDrive( SetCommParameters,parameters ) )
		{
			return Warning( Translate( ~Could not set parameters for serial port <localPort>~ ) );
		}

		if ( !FilmDrive( SetupCommDevice,1024,1024 ) )
		{
			return Warning( Translate( ~Could not set up parameters on serial port <localPort>~ ) );
		}
	}

	// Get Hicks Setup Attributes
	HicksSetupXOffset = Setup( GetNumeric,SetupXOffset );
	HicksDataBitWindow = Setup( GetNumeric,DataBitWindow );
	HicksMinIndex = Setup( GetNumeric,MinIndex );
	HicksMaxIndex = Setup( GetNumeric,MaxIndex );
	HicksSampleLength = Setup( GetNumeric,SampleLength );
	HicksInitialOffset = Setup( GetNumeric,InitialOffset );
	HicksFilmDriveSpeed = Setup( GetNumeric,FilmDriveSpeed );

	// Configure Hicks Film Device
IF 0
{
	// Order of Setup //
	// Stop the film drive
	// Set Data Window
	// Set Minimum Index
	// Set Maximum Index
	// Set Sample Length
	// Set Initial Offset
	// Set Film Drive Speed
	// Wait for Drive Stopped
	// Disable Notch
	// Set X Correction
}

	DlgData( GetValues,LogActivity,LogActivity );
	Hicks_SetLogSession( <LogActivity> );

	// Stop film drive - ignore first stop response
	Hicks_Halt();

	if ( !Hicks_Halt( ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not stop Hicks device on port <localPort>~) );
	}

	if ( !Hicks_DataBitWindow( <HicksDataBitWindow> ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not set data bit window on port <localPort>~) );
	}

	if ( !Hicks_MinIndex( <HicksMinIndex> ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not set min index window on port <localPort>~) );
	}

	if ( !Hicks_MaxIndex( <HicksMaxIndex> ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not set max index on port <localPort>~) );
	}

	if ( !Hicks_SampleLength( <HicksSampleLength> ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not set sample length on port <localPort>~) );
	}

	if ( !Hicks_InitialOffset( <HicksInitialOffset> ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not set initial offset on port <localPort>~) );
	}

	if ( !Hicks_FilmDriveSpeed( <HicksFilmDriveSpeed> ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not set film drive speed on port <localPort>~) );
	}

	if ( !Hicks_DisableNotch( ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not disable notch on port <localPort>~) );
	}

	if ( !Hicks_SetupXOffset( <HicksSetupXOffset> ) )
	{
		Hicks_ForgetGlobals( <UpdateStatus>,FALSE );
		return Warning( Translate( ~Could not set x correction on port <localPort>~) );
	}
	FilmDirection = 1; // Always reverse
	DlgData( SetValues,TXOffsetIncrementUnit,<TXOffsetIncrementUnit> );
	return TRUE;
}



NUMERIC CloseFilmDrive( UpdateStatus,ClosingDialog )
{
	if ( Defined( FilmDrive ) )
	{
		GetFilmDriveVendor();
		if ( FunctionDefined( ~<FDVendor>_Tension~ ) )
		{
			<FDVendor>_Tension( FALSE );
		}

		FilmDrive( Close );

		ForgetGlobal( FilmDrive );

		if ( FunctionDefined( ~<FDVendor>_ForgetGlobals~ ) )
		{
			return <FDVendor>_ForgetGlobals( <UpdateStatus>,<ClosingDialog> );
		}
	}

	return TRUE;
}

NUMERIC CloseFilmDriveComplete( UpdateStatus,ClosingDialog )
{
	if ( Defined( Port ) )
	{
		ForgetGlobal( Port );
	}
	
	SimulateFilmDrive = FALSE;
	FilmDirection = 0;
	MaxPunchNumber = 0;
	MinPunchNumber = 0;

	MaxXIncrements = 30000;

	SettleTime = 0;
	DlgData( SetValues,TXOffsetIncrementUnit,0.0 );

	dlg( SetStrings,ViewDriveControls,~0~ );

	if ( <UpdateStatus> )
	{
		FilmDriveCmdInProgress( Translate( ~Film drive disabled.~ ) );
	}

	dlg( SetStrings,ViewDriveControls,~0~ );
	dlg( SetStrings,Tension,~~,GotoPunchNumber,~~,CurrentPunchPosition,~????~ );
	dlg( EnableControls, 0, TensionBox );

	GetFilmDriveVendor();
	if ( ~<FDVendor>~ == ~None~ )
	{
		if ( FunctionDefined( ~NoFilmDriveSelected~ ) )
			{ NoFilmDriveSelected(); }
	}
	else
	{
		dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );
	}

	EnableTransportControls( 0 );
	// Make sure drive and setup are always accessible

	if ( <ClosingDialog> )
	{
		ForgetGlobal( Scanner );

		ImageCorrections( Free,~<LastPath>~ );
		ForgetGlobal( ImageData );

		Sleep(300);
		dlg( END );
		Exit();
		return FALSE;
	}

	ShowFilmDriveControls();

	return TRUE;
}


VOID ShowFilmDriveControls()
{
	dlg( GetInput,GetStrings,ViewDriveControls,ViewDriveControls );

	GetFilmDriveVendor();
	if (<ViewDriveControls>)
	{
		dlg( ShowControls,TRUE,TensionBox,FastRewindButton,PrevFrameButton,
			StopButton,NextFrameButton,FastForwardButton,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox,XPositionSlider,
			XPositionSliderIMinusButton,XPositionSliderMinusButton,
			XPositionSliderPlusButton,XPositionSliderIPlusButton);
	}
	else
	{
		dlg( ShowControls,FALSE,TensionBox,FastRewindButton,PrevFrameButton,
			StopButton,NextFrameButton,FastForwardButton,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox,XPositionSlider,
			XPositionSliderIMinusButton,XPositionSliderMinusButton,
			XPositionSliderPlusButton,XPositionSliderIPlusButton);
	}

	dlg( SetWindowSize,$DialogWidth ,<ViewDriveControls> ? $BottomWithTransport : $BottomWithoutTransport );
}


NUMERIC BuildJogFilmCommand( CurrentDirection )
{
	GetFilmDriveVendor();

	TmpXOffset = ~0~;
	TmpYOffset = ~0~;
	TmpScanMode = 0;
	TmpFrameToPunch = 0;

	NextRoutine = ~<FDVendor>_NextFrame~;
	PrevRoutine = ~<FDVendor>_PrevFrame~;

	if ( !FunctionDefined( ~<NextRoutine>~ ) || !FunctionDefined( ~<PrevRoutine>~ ) )
	{
		ClearJogFilmCommand();
		return FALSE;
	}

	JogInDirection = <CurrentDirection>;
	JogNextCommand = STR ( ~<NextRoutine>(<TmpXOffset>,<TmpYOffset>,<TmpScanMode>,<TmpFrameToPunch>) ~ );
	JogPrevCommand = STR ( ~<PrevRoutine>(<TmpXOffset>,<TmpYOffset>,<TmpScanMode>,<TmpFrameToPunch>) ~ );

	return TRUE;
}


VOID ClearJogFilmCommand()
{
	JogInDirection = 0;
	JogNextCommand = ~~;
	JogPrevCommand = ~~;
}


Thread( JogThread ); // Thread( JogThread, Debug) for debugging as single thread


VOID StartJogFilmCommand()
{
	JogThread( New,RunJogFilmCommand );
}


VOID RunJogFilmCommand()
{
	Action = STR ( JogFilmComplete(FALSE); );
	pauseTime = 500;

	GetFilmDriveVendor();
	// Build Jog Film Command
	if ( !BuildJogFilmCommand( <CurrentPosition> ) )
	{
		mesg = Translate( ~Unable to create jog film command sequence.~ );
		Warning( Translate( ~<mesg>~ ) );
		QueueContentsToMainThread( Action,1000 );
		return;
	}


	// Verify Jog Film Command sequence was built
	if ( ( ~<JogNextCommand>~ == ~~ ) || ( ~<JogPrevCommand>~ == ~~ ) )
	{
		mesg = Translate( ~Jog film commands are missing.~ );
		Warning( Translate( ~<mesg>~ ) );
		QueueContentsToMainThread( Action,1000 );
		return;
	}

	if ( <JogInDirection> < 0 )
	{
		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}
	}
	else
	{
		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogNextCommand> ;

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}

		ContinueRunning = TRUE;
		results = <JogPrevCommand> ;
		Sleep( <pauseTime> );

		if ( !<results> )
		{
			QueueContentsToMainThread( Action,1000 );
			return;
		}
	}

	Action = STR ( JogFilmComplete(TRUE); );

	QueueContentsToMainThread( Action,1000 );

	return;
}

OnJogFilmComplete = ~~;

VOID ClearJogFilmHandlers()
{
	OnJogFilmComplete = ~~;
}

NUMERIC Bremson_JogFilmSetup()
{
	dlg( GetInput );
	GetFilmDriveVendor();
    DlgData( Get,FilmDriveSetup,FilmDriveSetup );

	if ( !Defined( FilmDrive ) || ( ~<FDVendor>~ != ~Bremson~ ) )
	{
		return Warning( Translate( ~Bremson film drive not defined/selected to jog the film.~ ) );
	}

	if ( ~<FilmDriveSetup>~ == ~~ )
	{
		return Warning( Translate( ~Bremson film drive setup not defined to jog the film.~ ) );
	}

	Query = ~Select * From BremsonFilmDrive Where Name = '<FilmDriveSetup>'~;

	if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed: <DocumentQuery>. <theErr>~ ) );
	}

	if ( !List( GetFirst,Setup ) )
	{
		return Warning( Translate( ~Could not find a setup named <FilmDriveSetup> to jog the film.~ ) );
	}

	FilmDriveIsSimulated = Setup( GetNumeric, Simulate );

	// Halt the drive to clear the DLL
	FilmDrive( Stop );
	FilmDrive( Stop );

	// The Bremson DLL always fails on the first setup call, therefore
	// we call it twice (checking the return code on the second call)
	// This problem is linked to the DLL
	if ( FilmDrive( Setup,Setup ) )
	{
		FilmDrive( Initialize );
	}
	if ( !FilmDrive( Setup,Setup ) )
	{
		return Warning( Translate( ~Failed to setup the film drive to jog the film.~ ) );
	}
	if ( !FilmDrive( Initialize ) )
	{
		return Warning( Translate( ~Failed to initialize the film drive to jog the film.~ ) );
	}

	if ( <FilmDriveIsSimulated> )
	{
	    DlgData( Get,CurrentPunchPosition,CurrentPunch );
		FilmDrive( SeekPunch, ~<CurrentPunch>~ );
	}

	return TRUE;
}


VOID EnableFilmDriveChanged( CheckIfLoaded,UpdateStatus )
{
	dlg( GetInput );

	GetFilmDriveVendor();
    DlgData( Get,FilmDriveSetup,FilmDriveSetup );

	if ( <CheckIfLoaded> &&
		 ~<LastFilmDriveVendorName>~ != ~~ && ~<LastFilmDriveVendorName>~ == ~<FDVendor>~ &&
		 ~<LastFilmDriveSetupName>~ != ~~ && ~<LastFilmDriveSetupName>~ == ~<FilmDriveSetup>~ )
	{
		return;
	}

	LastFilmDriveVendorName = ~<FDVendor>~;
	LastFilmDriveSetupName = ~<FilmDriveSetup>~;

	if ( Defined( FilmDrive ) )
	{
		dlg( SetStrings, IgnoreXAdjustments, ~0~ );
		if ( DlgData( GetNumeric,Tension ) )
		{
			dlg( SetStrings,Tension,~~,GotoPunchNumber,~~,CurrentPunchPosition,~????~ );
			OnTensionChange();
		}

		dlg( EnableControls, 0, TensionBox );
		dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );

		CloseFilmDrive( <UpdateStatus>,FALSE );
		return;
	}

	if ( ~<FDVendor>~ == ~~ || ~<FDVendor>~ == ~None~ )
	{
		dlg( SetStrings,FilmDriveEnabled,~0~ );
	}

	// Always resync Order/Roll/Frame/Punch
	ClearScanList();
	ResyncScanList();
	ClearScanList();

	if ( DlgData( GetNumeric,FilmDriveEnabled ) )
	{
	    DlgData( Get,FilmDriveSetup,FilmDriveSetup );

		if ( ~<FilmDriveSetup>~ == ~~ )
		{
			dlg( SetStrings,FilmDriveEnabled,~0~ );
			Warning( Translate( ~You must select a film drive setup first~ ) );
			return;
		}

		GetFilmDriveVendor();

		if ( !FunctionDefined( ~<FDVendor>_OpenFilmDrive~ ) )
		{
			dlg( SetStrings,FilmDriveEnabled,~0~ );
			VendorNotSelected( ~<FDVendor>_OpenFilmDrive~ );
			return;
		}

		dlg( SetStrings,Tension,~~,GotoPunchNumber,~~,CurrentPunchPosition,~????~ );
		dlg( EnableControls, 0, TensionBox );
		dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );
		EnableTransportControls( 0 );

		if ( <FDVendor>_OpenFilmDrive( <UpdateStatus> ) )
		{
			FilmDriveSelected();

			if ( <UpdateStatus> )
			{
				FilmDriveCmdInProgress( Translate( ~Film drive enabled.~ ) );
			}

			// Resort incase of reverse order i.e. Bremson in reverse mode
			ResyncScanList();
			ClearScanList();

			dlg( EnableControls,1,TensionBox );
			dlg( EnableControls,0,VendorComboBox,VendorSetupComboBox );
			dlg( SetStrings,ViewDriveControls,~1~ );
		}
		else
		{
			if ( <UpdateStatus> )
			{
				FilmDriveCmdInProgress( Translate( ~Film drive disabled.~ ) );
			}

			dlg( SetStrings,FilmDriveEnabled,~0~ );
			dlg( SetStrings,ViewDriveControls,~0~ );
			dlg( EnableControls,1,VendorComboBox,VendorSetupComboBox );
			if ( Defined( FilmDrive ) ) { ForgetGlobal( FilmDrive ); }
		}
	}

	// Else make sure drive and setup are always accessible

	ShowFilmDriveControls();
}


NUMERIC OnTensionChange( TensionDriveOnly )
{
	if ( !Defined( FilmDrive ) )	{ return DriveNotActive(); }

	dlg( GetInput );	
	
	Tension = DlgData( GetNumeric,Tension );

	OnlyTensionTheDrive = FALSE;
	if ( DefinedAndNotNULL( TensionDriveOnly ) )
	{
		OnlyTensionTheDrive = <TensionDriveOnly> ? TRUE : FALSE;
	}

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_Tension~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_Tension~ );
	}

	if ( !<OnlyTensionTheDrive> )
	{
		SetCurrentPunchNumber( ~~ );
		SetDialogVendorXOffsetInfo( 0, 0.0 );
		SetDialogVendorYOffsetInfo( 0, 0.0 );
	}

	FilmDriveCmdInProgress( (<Tension> != 0) ? Translate( ~Film Tensioning ~ ) : Translate( ~Film Untensioning ~ ) );

	if ( !<FDVendor>_Tension( <Tension> ) )
	{
		dlg( SetStrings,Tension,~~ );
		EnableTransportControls( 0 );

		if ( !<TensionAborted> )
		{
			return ReportFilmDriveError( ~Tension~ );
		}
		TensionAborted = FALSE;
	}
	
	EnableTransportControls( <Tension> != 0 );

	return TRUE;
}


NUMERIC IsDriveTensioned( UpdateStatus )
{
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~None~ )
	{	return TRUE;	}

	if ( FunctionDefined( ~<FDVendor>_IsFilmDriveTensioned~ ) )
	{
		return <FDVendor>_IsFilmDriveTensioned( <UpdateStatus> );
	}
	else
	{
		dlg( GetInput );	
		Tension = DlgData( GetNumeric,Tension );
		if ( <Tension> )
		{
			return TRUE;
		}
	}
	return FALSE;
}


NUMERIC OnRewindButton()
{
	if ( !Defined( FilmDrive ) )	{ return DriveNotActive(); }

	GetFilmDriveVendor();
	// Give the transport a chance to override this behavior
	if ( FunctionDefined( ~<FDVendor>_HandleRewind~ ) )
	{
		return <FDVendor>_HandleRewind();
	}

	if ( !IsDriveTensioned( TRUE ) )		{ return DriveNotTensioned(); }

	FilmDriveCmdInProgress( Translate( ~Rewinding ... ~ ) );

	if ( !FunctionDefined( ~<FDVendor>_Rewind~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_Rewind~ );
	}

	if ( !FunctionDefined( ~<FDVendor>_Rewind~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_Rewind~ );
	}

	if ( <FDVendor>_Rewind() )
	{
		SetCurrentPunchNumber( ~~ );
		ScanFrameBeforeAdvance = TRUE;
		EnableScanningControls( FALSE );
		SetTransportControlsRunning();
	}
	else
	{
		return ReportFilmDriveError( ~Rewind~ );
	}
	return TRUE;
}


NUMERIC OnFastForwardButton()
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( FALSE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();

	// Give the transport a chance to override this behavior
	if ( FunctionDefined( ~<FDVendor>_HandleFastForward~ ) )
	{
		return <FDVendor>_HandleFastForward();
	}
	else
	{
		if ( !FunctionDefined( ~<FDVendor>_FastForward~ ) )
		{
			return VendorNotSelected( ~<FDVendor>_FastForward~ );
		}
	}

	FilmDriveCmdInProgress( Translate( ~Fast Forwarding ... ~ ) );

	if ( <FDVendor>_FastForward() )
	{
		SetCurrentPunchNumber( ~~ );
		ScanFrameBeforeAdvance = TRUE;
		EnableScanningControls( FALSE );
		SetTransportControlsRunning();
	}
	else
	{
		return ReportFilmDriveError( ~Fast Forward~ );
	}
	return TRUE;
}

Thread( TheThread ); // Thread( TheThread, Debug) for debugging as single thread

NUMERIC OnNextFrameButton( ScanMode )
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();
	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	YOffset = 0;
	FrameToPunch = ( <ScanMode> && DlgData( GetNumeric,FrameToPunch ) && !DlgData( GetNumeric,ScanFromDatabase ) );

	Routine = <FDVendor>_NextFrame;
	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	// Adjust the X Offset if Editor Information Available for XOffset
	TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
	EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
	if ( <ScanMode> && DlgData( GetNumeric,ScanFromDatabase ) && <XOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
	{
		TempXOffset = ( <XOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
		XOffset = Round( <TempXOffset> );
	}
	else
	{
		ScanFrameBeforeAdvance = TRUE;
	}

	if ( !<ScanMode> )
	{
		LastFrame = ~~;
	}
	FilmDriveCmdInProgress( ~Seeking Next Frame...~ );

	EnableScanningControls( FALSE );

	SetTransportControlsRunning();

	TheThread( New,<Routine>,<XOffset>,<YOffset>,<ScanMode>,<FrameToPunch>);

	return TRUE;
}


NUMERIC OnPreviousFrameButton( ScanMode )
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();
	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	YOffset = 0;
	FrameToPunch = ( <ScanMode> && DlgData( GetNumeric,FrameToPunch ) && !DlgData( GetNumeric,ScanFromDatabase ) );

	Routine = <FDVendor>_PrevFrame;

	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	// Adjust the X Offset if Editor Information Available for XOffset
	TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
	EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
	if ( <ScanMode> && DlgData( GetNumeric,ScanFromDatabase ) && <XOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
	{
		TempXOffset = ( <XOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
		XOffset = Round( <TempXOffset> );
	}
	else
	{
		ScanFrameBeforeAdvance = TRUE;
	}

	if ( !<ScanMode> )
	{
		LastFrame = ~~;
	}

	FilmDriveCmdInProgress( ~Seeking Previous Frame...~ );

	EnableScanningControls( FALSE );

	SetTransportControlsRunning();

	TheThread( New,<Routine>,<XOffset>,<YOffset>,<ScanMode>,<FrameToPunch> );

	return TRUE;
}


NUMERIC OnGoToButton( ScanMode )
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

    dlg( GetInput );
    DlgData( Get,GotoPunchNumber,GotoPunch );
    DlgData( Get,CurrentPunchPosition,CurrentPunch );

	GetFilmDriveVendor();
	UnknownPunchMsg = ~Film drive is not positioned at a valid punch location.\n\nPlease manually position the film to a punch location.~;

	if ( ~<GotoPunch>~ == ~~ )			{ return Warning( Translate( ~You must enter a Punch number~ ) ); }
	if ( ~<CurrentPunch>~ == ~????~ )	{ return Warning( Translate( ~<UnknownPunchMsg>~ ) ); }

	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	YOffset = 0;
	FrameToPunch = ( <ScanMode> && DlgData( GetNumeric,FrameToPunch ) && !DlgData( GetNumeric,ScanFromDatabase ) );

	Routine = <FDVendor>_SeekPunch;

	if ( !FunctionDefined( ~<Routine>~ ) )
	{
		return VendorNotSelected( ~<Routine>~ );
	}

	if ( <ScanMode> && ( <FirstPunchNumber> == 0 || <LastPunchNumber> == 0 ) )
	{
		return Warning( Translate( ~Unable to obtain first and last film Punch number~ ) );
	}

	// Adjust the X Offset if Editor Information Available for XOffset
	TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
	EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
	if ( <ScanMode> && DlgData( GetNumeric,ScanFromDatabase ) && <XOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
	{
		TempXOffset = ( <XOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
		XOffset = Round( <TempXOffset> );
	}

	FilmDriveCmdInProgress( ~Seeking Punch <GotoPunch>...~ );

	EnableScanningControls( FALSE );

	SetTransportControlsRunning();

	SFirstFilmPunch = ~0~;
	SLastFilmPunch  = ~0~;

	if ( <ScanMode> )
	{
		SFirstFilmPunch = <FDVendor>_FormatPunchNumber( <FirstPunchNumber> );
		SLastFilmPunch = <FDVendor>_FormatPunchNumber( <LastPunchNumber> );
	}
	else
	{
		ScanFrameBeforeAdvance = TRUE;
	}

	SGotoPunch = <FDVendor>_FormatPunchNumber( <GotoPunch> );

	TheThread( New,<Routine>,~<CurrentPunch>~,~<SGotoPunch>~,~<XOffset>~,~<YOffset>~,~<SFirstFilmPunch>~,~<SLastFilmPunch>~,~<ScanMode>~,~<FrameToPunch>~ );

	return TRUE;
}


NUMERIC OnStopButton()
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) { return DriveNotTensioned(); }

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_Stop~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_Stop~ );
	}

	// Disable auto scan if scanning
	StillScanning = FALSE;
	AutoScan = ~<$con.dlgData[AutoScan]>~;
	if ( Defined( Scanner ) )
	{
		StillScanning = Scanner( Scanning );	
	}
	if ( !<ForwardRewindFlag> && ( <StillScanning> || ( <CurrentControlsState> == FALSE ) ) && ( <AutoScan> || <AutoScanDeselectPending> ) )
	{
		dlg( SetStrings,AutoScan,~0~ );
		if ( ( <StillScanning> || ( <CurrentControlsState> == FALSE ) ) && !<AutoScanDeselectPending> )
		{
			AutoScanDeselectPending = TRUE;
			return FilmDriveCmdInProgress( ~Stopping after current scan~ );
		}
		else if ( ( <StillScanning> || ( <CurrentControlsState> == FALSE ) ) && <AutoScanDeselectPending> )
		{
			if ( MessageBox( ~There is still seems to be some scanning or film movement activity.\n\nWould you like to continue to wait for that activity to complete?~,YESNO ) == YES )
			{
				return FilmDriveCmdInProgress( ~Stopping after current scan~ );
			}
		}
	}

	if (  !<FDVendor>_Stop() )
	{
		// Allow the UI to enable the controls to allow user
		// to decide how to recover
		EnableScanningControls( TRUE );
		SetTransportControlsStopped();
		return ReportFilmDriveError( ~Stop~ );
	}

	return FilmDriveCmdInProgress( ~Stop~ );
}

VOID OnDisableFilmDrive()
{
	dlg( GetInput );
	DisableFilmDrive = DlgData( GetNumeric,DisableFilmDrive );
	if ( <DisableFilmDrive> )
	{
		dlg( SetStrings,AutoScan,0 );
	}
}

NUMERIC XPositionSliderChanged( OverrideSlider, increments )
{
	if ( !Defined( FilmDrive ) )	 { return DriveNotActive(); }
	if ( !IsDriveTensioned( TRUE ) ) 
	{ 
		dlg( SetStrings,XSliderPosition,~0~ );
		return DriveNotTensioned(); 
	}

	Delta = DlgData( GetNumeric,XSliderPosition );
	Ignore = DlgData( GetNumeric,IgnoreXAdjustments );

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_MoveDeltaX~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_MoveDeltaX~ );
	}

	if ( <OverrideSlider> )
	{
		Delta = <increments>;
	}

	if ( !<FDVendor>_MoveDeltaX( <Delta>, <Ignore> ) )
	{
		dlg( SetStrings,XSliderPosition,~0~ );
		return ReportFilmDriveError( ~MoveDeltaX~ );
	}

	DlgData( Set,XSliderPosition,0 );

	return dlg( Update );
}


LastXPosition = 0;

NUMERIC XPositionSliderCalibration()
{
	Delta = DlgData( GetNumeric,XPosition );
	Ignore = DlgData( GetNumeric,IgnoreXAdjustments );

	Delta = <NewXPosition> - <LastXPosition>;

	LastXPosition = <NewXPosition>;

	if ( !Defined( FilmDrive ) )	{ return DriveNotActive(); }

	GetFilmDriveVendor();
	if ( !FunctionDefined( ~<FDVendor>_MoveDeltaX~ ) )
	{
		return VendorNotSelected( ~<FDVendor>_MoveDeltaX~ );
	}

	<FDVendor>_MoveDeltaX( <Delta>, <Ignore> );

	return TRUE;
}


LastFilmDriveMessage = ~~;

NUMERIC FilmDriveCmdInProgress( Msg )
{
	LastFilmDriveMessage = ~<Msg>~;

	return dlg( SetStatus,0,Translate( ~<Msg>~ ) );
}


NUMERIC DriveNotActive()
{
	return Warning( Translate( ~You have not activated the Film Drive~ ) );
}

NUMERIC DriveNotTensioned()
{
	GetFilmDriveVendor();
	msg = ~You have not tensioned the film drive~;

	return Warning( Translate( ~<msg>~ ) );
}


NUMERIC VendorNotSelected( FilmDriveFunction )
{
	if ( ~<FilmDriveFunction>~ == ~~ )
	{
		return Warning( Translate( ~A valid transport vendor has not been selected~ ) );
	}
	else
	{
		return Warning( Translate( ~Vendor transport functionality (<FilmDriveFunction>) is not defined~ ) );
	}
}


NUMERIC ReportFilmDriveError( operation )
{
	return Warning( Translate( ~The film drive reported an error on <operation>~ ) );
}


//CalibrationNeeded = FALSE;
ImageIndex = 0;

ImagesPath = ~<$App.Directory>\ScannedImages~;

NUMERIC DoFocus( )
{
	ClearJogFilmHandlers();
	CheckScanWidthLengthMin();

 	dlg( GetInput);
	EnableScanningControls( FALSE );
	if ( !ScanOne(TRUE,FALSE,TRUE,FALSE) )
	{
		EnableScanningControls( TRUE );
		return FALSE;
	}

	SecondsWaiting = 0;
	Action = STR ( StillFocusing(); );
	QueueContentsAfter( Action,1000 );
	return TRUE;
}


NUMERIC OnFocusButton( Msg )
{
	dlg( GetInput );

	if ( !FindScanner(FALSE) )	{ return FALSE; }

	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );

	if ( CalibrationOK( TRUE ) )
	{
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> )
		{
			if ( !IsDriveTensioned() )
			{
				if ( !AskToLoadFilmAndTensionDrive(~~,FALSE) )
				{
					dlg( SetStatus,0,Translate( ~Focus cancelled.~ ) );
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					Warning( Translate( ~Focus cancelled.~ ) );
					return FALSE;
				}
			}
			dlg( GetStrings,CurrentPunchPosition,CurrentPunchPosition );
			if ( ~<CurrentPunchPosition>~ == ~~ || !IsNumeric( ~<CurrentPunchPosition>~ ) )
			{
				OnFilmDriveOperationComplete = STR ( OnFocusButton( ~~ ); );
				if ( !OnNextFrameButton( TRUE )  )
				{
					ClearFilmDriveOperationHandlers();
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					Warning( Translate( ~Focus cancelled.~ ) );
					return FALSE; // OnNextFrameButton will display error message
				}
				return TRUE;
			}
		}
		else 
		{
			if ( !IsNULL( Msg ) )
			{
				if ( ~<Msg>~ != ~~ )
				{
					if ( MessageBox( ~<Msg>~,YESNO ) == NO )
					{
						dlg( SetStatus,0,Translate( ~Focus cancelled.~ ) );
						EnableScanningControls( TRUE );
						SetTransportControlsStopped();
						Warning( Translate( ~Focus cancelled.~ ) );
						return FALSE;
					}
				}
			}
		}
		return DoFocus();
	}
	else
	{
		return Warning( Translate( ~Please calibrate the scanner before focusing.~ ) );
	}
	return FALSE;
}


VOID StillFocusing()		// KEEP THE USER UPDATED WHILE THE FOCUS IS IN PROCESS
{
	if ( Defined( dlg ) )
	{
		if (  Scanner( Focusing ) )
		{
			dlg( SetStatus,0,~Still Focusing (<++SecondsWaiting> Secs)~ );

			progressAmount = (<SecondsWaiting> / 40) * 100;
			dlg( SetString,~<progressAmount>~,Progress,0 );

			Action = STR ( StillFocusing(); );
			QueueContentsAfter( Action,1000 );
		}
	}
}


ScanListQuery = ~~;
LastScanListQuery = ~~;
LastOrderID = ~~;
LastRoll = ~~;
LastFrame = ~~;
KeepScanList = FALSE;


VOID ClearScanList()
{
	if ( <KeepScanList> ) 
	{
		return;
	}
	ScanListQuery = ~~;
	LastScanListQuery = ~~;
	LastOrderID = ~~;
	LastRoll = ~~;
	LastFrame = ~~;
}


NUMERIC ResyncScanList()
{
	if ( <KeepScanList> ) 
	{
		return TRUE;
	}
	dlg( GetInput );

	ScanFrameBeforeAdvance = TRUE;

	if ( DlgData(GetNumeric,ScanFromDataBase) )
	{
		ClearScanList();
		if ( GetScanList() )
		{
			if ( Defined( ScanList ) )
			{
				Count = ScanList( NumEntries );
				dlg( SetStatus,0,~<Count> Frames loaded~ );
			}
		}
	}
	return TRUE;	// Add this later
}


NUMERIC GetScanListQuery()
{
	OrderID = ~<$con.dlgData[Order]>~;
	Roll = ~<$con.dlgData[Roll]>~;
	FilmDriveEnabled = ~<$con.dlgData[FilmDriveEnabled]>~;
	AutoScan = ~<$con.dlgData[AutoScan]>~;
	AutoScanWrap = ~<$con.dlgData[AutoScanWrap]>~;

	GetFilmDriveVendor();

	SortDirection = ( <FilmDriveEnabled> && ( <FilmDirection> == 1 ) ) ? ~DESC~ : ~~;

	SortOrder = ~OrderID,Roll,Frame <SortDirection>~;

	if ( <FilmDriveEnabled> )
	{
		SortOrder = ~Punch <SortDirection>~;
	}

 	ScanListQuery = ~Select * From Images Where OrderID = '<OrderID>' AND Roll = '<Roll>' AND (Scan = 1) Order By <SortOrder>~;

	// This indicates test mode, select all records
	if ( <AutoScan> && <AutoScanWrap> )
	{
	 	ScanListQuery = ~Select * From Images Where OrderID = '<OrderID>' AND Roll = '<Roll>' Order By <SortOrder>~;
	}

	if ( !ADO( db,Connect,GetValuesFor,~Select BatchID from Orders Where ID = '<OrderID>'~,BatchID ) )
	{
		return TRUE;
	}

	if ( IsNULL(~<BatchID>~) )
	{
		return TRUE;
	}

	// THE FOLLOWING HANDLES MULTIPLE ROLLS IN A BATCH

	Fields = ~Orders.BatchID,Orders.BatchSeq,Rolls.BatchSeq,Images.*~;

	TheSort = ~Orders.BatchSeq <SortDirection>,Rolls.BatchSeq <SortDirection>,Images.Roll <SortDirection>,Images.Frame <SortDirection>~;

	if ( <FilmDriveEnabled> )
	{
		TheSort = ~Images.Punch <SortDirection>~;
	}

	Critieria = ~Orders.BatchID = '<BatchID>'~;

	TheJoin = ~Orders.ID = Images.OrderID AND Rolls.OrderID = Images.OrderID AND Rolls.Roll = Images.Roll~;

	Tables = ~Orders,Rolls,Images~;

	ScanListQuery = ~Select <Fields> From <Tables> Where <Critieria> AND <TheJoin> AND (Scan = 1) Order By <TheSort>~;

	return TRUE;
}


NUMERIC ViewScanList()
{
	GetScanListQuery();

	Actions = ACTION DOC ( ~ScanList~ Open ImagesDataDoc "Init( ~ScanList~,FALSE,~<ScanListQuery>~,0 );" );
	return PerformActions( Actions );
}


FirstPunchNumber = ~0~;
LastPunchNumber = ~0~;
ScanFrameBeforeAdvance = TRUE;

NUMERIC GetScanList()
{
	if ( !Defined( ScanList ) || ~<ScanListQuery>~ == ~~ || ~<ScanListQuery>~ != ~<LastScanListQuery>~ )
	{
		if ( ~<ScanListQuery>~ == ~~ )
		{
			GetScanListQuery();
		}

		FirstPunchNumber = ~0~;
		LastPunchNumber = ~0~;
		ScanFrameBeforeAdvance = TRUE;

		ForgetGlobal( ScanList );

		if ( !PGenConList( ScanList,Connect,CursorLocation,Client,Cursor,Static,Lock,BatchOptimistic,QUERY,~<ScanListQuery>~ ) )	
			{ return Warning( Translate( ~Failed to query the Images table~ ) ); }

		ScanList( SetConnection,~~ );	// DISCONNECT FROM THE DATABASE
		Global( ScanList );

		LastScanListQuery = ~<ScanListQuery>~;

		if ( ScanList( NumEntries ) == 0 )
		{
			ForgetGlobal( ScanList );
			return FALSE;
		}

		// TBD - Override DB range check
		LastPunchNumber = <MaxPunchNumber>;
		FirstPunchNumber = <MinPunchNumber>;
		ScanList( GetFirst,Record );

		CurrentScanFrame = ~<$pcon.Record[Frame]>~;
		dlg( SetStrings,Order,~<$pcon.Record[OrderID]>~,Roll,~<$pcon.Record[Roll]>~,Frame,~<$pcon.Record[Frame]>~ );
	}

	return TRUE;
}


NUMERIC SetColorControls()
{
	//UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);

	brightnessOverride = DlgData(GetNumeric,brightnessOverride);
	redOverride = DlgData(GetNumeric,redOverride);
	greenOverride = DlgData(GetNumeric,greenOverride);
	blueOverride = DlgData(GetNumeric,blueOverride);
	contrastOverride = DlgData(GetNumeric,contrastOverride);

	//if (<UseAnalyzerDRGBValues>)
	//{
		dlg( EnableControls,TRUE,
			dDensityPrompt,dDensityField,dDensitySlider,dDensityMinusButton,dDensityZeroButton,dDensityPlusButton,
			dRedPrompt,dRedField,dRedSlider,dRedMinusButton,dRedZeroButton,dRedPlusButton,
			dGreenPrompt,dGreenField,dGreenSlider,dGreenMinusButton,dGreenZeroButton,dGreenPlusButton,
			dBluePrompt,dBlueField,dBlueSlider,dBlueMinusButton,dBlueZeroButton,dBluePlusButton,
			RefDRGBStatic,RefDRGBComboBox,EditRefs_Button,DRGB2RGB_Button );

		if ( !dlgData( GetNumeric,LockScannerOffsets ) )
		{
			dlg( EnableControls,TRUE,AutoDRGBAdjustmentsCheckBox);
			dlg( EnableControls,TRUE,DenNormCheckBox);
		}
	//}
	//else
	//{
	//	if ( !dlgData( GetNumeric,LockScannerOffsets ) )
	//	{
	//		LastAutoDRGBAdjustments = dlgData( GetNumeric, AutoDRGBAdjustments );
	//		LastDensityNormalization = dlgData( GetNumeric, DensityNormalization );
	//	}
	//	dlg( SetStrings, AutoDRGBAdjustments, ~0~ );
	//	dlg( EnableControls,FALSE,AutoDRGBAdjustmentsCheckBox);

	//	dlg( SetStrings, DensityNormalization, ~0~ );
	//	dlg( EnableControls,FALSE,DenNormCheckBox );

	//	dlg( EnableControls,FALSE,
	//		dDensityPrompt,dDensityField,dDensitySlider,dDensityMinusButton,dDensityZeroButton,dDensityPlusButton,
	//		dRedPrompt,dRedField,dRedSlider,dRedMinusButton,dRedZeroButton,dRedPlusButton,
	//		dGreenPrompt,dGreenField,dGreenSlider,dGreenMinusButton,dGreenZeroButton,dGreenPlusButton,
	//		dBluePrompt,dBlueField,dBlueSlider,dBlueMinusButton,dBlueZeroButton,dBluePlusButton,
	//		RefDRGBStatic,RefDRGBComboBox,EditRefs_Button,DRGB2RGB_Button,AutoDRGBAdjustmentsCheckBox);

	//}

	return TRUE;
}

NUMERIC UpdateSharpenFasterSetting(SharpenFasterSelected)
{
	dlg( GetInput );
	SharpenFaster = DlgData(GetNumeric,SharpenFaster);

	if ((<SharpenFasterSelected> && <SharpenFaster>) ||
	    (!<SharpenFasterSelected> && !<SharpenFaster>))
	{
		return TRUE;
	}

	if (<SharpenFaster>)
	{
		dlg(SetCheck, FALSE, SharpenFasterButton);
		dlg(SetCheck, TRUE, SharpenHigherQualityButton);

		dlg(Save, SharpenFasterButton);
		dlg(Save, SharpenHigherQualityButton);
	}
	else
	{
		dlg(SetCheck, FALSE, SharpenHigherQualityButton);
		dlg(SetCheck, TRUE, SharpenFasterButton);

		dlg(Save, SharpenFasterButton);
		dlg(Save, SharpenHigherQualityButton);
	}

	return TRUE;
}


NUMERIC FindFrameData(Order,Roll,Frame)
{
	if ( !GetScanList() )
	{
		return FALSE;
	}

	ScanList( GetFirst,Item );

	if ( !ScanList( Find,~OrderID = '<Order>'~,0,1,~Current~ ) )
	{
		return Warning( Translate( ~Could not find Order '<Order>'~ ) );
	}

	if ( !ScanList( Find,~Roll = '<Roll>'~,0,1,~Current~ ) )
	{
		return Warning( Translate( ~Could not find Order '<Order>'  Roll '<Roll>'~ ) );
	}

	if ( !ScanList( Find,~Frame = '<Frame>'~,0,1,~Current~ ) )
	{
		return Warning( Translate( ~Could not find Order '<Order>'  Roll '<Roll>'  Frame '<Frame>'~ ) );
	}

	return TRUE;
}


NUMERIC GetPunchNumber(Order,Roll,Frame)
{
	if ( !FindFrameData(~<Order>~,~<Roll>~,~<Frame>~ ) )
	{
		return FALSE;
	}

	ScanList( GetRecord,Record );

	return Record( GetNumeric,Punch );
}

NUMERIC ResetNextFrameAfterError()
{
	if ( !Defined( ScanList ) || IsNull( ScanList ) )
	{
		return TRUE;
	}

	Direction = <LastPosition>;

	NextFrameReverseCmd = (<Direction> < 0) ? ~GetNext~ : ~GetPrev~;
	NextFrameForwardCmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;

	// Get the next frame (look ahead)
	// If look ahead failed, we've gone beyond the list in that direction.
	if ( !ScanList( <NextFrameReverseCmd>,Image ) )
	{
		if ( <Direction> < 0 )
		{
			ScanList( GetLast,Image );
		}
		else if ( <Direction> > 0 )
		{
			ScanList( GetFirst,Image );
		}
		ScanFrameBeforeAdvance = TRUE;
	}
	// Check to see if the selected frame has already been scanned
	if ( atof( ~<$pcon.Image[Scan]>~ ) == 1 )
	{
		if ( !ScanList( <NextFrameForwardCmd>,Image ) )
		{
			if ( <Direction> < 0 )
			{
				ScanList( GetFirst,Image );
			}
			else if ( <Direction> > 0 )
			{
				ScanList( GetLast,Image );
			}
		}
	}
	return TRUE;
}


NUMERIC GetNextFrameToScanInfo( Direction,AutoScanMode,AutoScanWrap,&Order,&Roll,&Frame, &Punch, &XOffset, &YOffset, &AtEndOfList, &NextPunch, &NextXOffset, &NextXPos, &NextYPos, &NextScanWidth, &NextScanLength )
{
	if ( ~<LastOrderID>~ != ~<Order>~  || ~<LastRoll>~ != ~<Roll>~ )
	{
		ResyncScanList();
	}
	if ( !GetScanList() )
	{
		return FALSE;
	}

	SaveFirstAutoScanPunch = FALSE;

	Cmd = ~GetRecord~;
	NextFrameCmd = ~GetRecord~;
	NextFrameReverseCmd = ~GetRecord~;

	if ( <ScanFrameBeforeAdvance> && <AutoScanMode> && <Direction> != 0 )
	{
		SaveFirstAutoScanPunch = TRUE;

		ScanFrameBeforeAdvance = FALSE;
		NextFrameCmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;
		NextFrameReverseCmd = (<Direction> < 0) ? ~GetNext~ : ~GetPrev~;
	}
	else if ( <Direction> == 0 )
	{
		FindFrameData(~<Order>~,~<Roll>~,~<Frame>~);
		ScanFrameBeforeAdvance = FALSE;
	}
	else
	{
		Cmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;
		NextFrameCmd = (<Direction> < 0) ? ~GetPrev~ : ~GetNext~;
		NextFrameReverseCmd = (<Direction> < 0) ? ~GetNext~ : ~GetPrev~;
	}

	AtEndOfList = FALSE;

	if ( !ScanList( <Cmd>,Image ) )
	{
		if ( <AutoScanMode> && <AutoScanWrap> )
		{
			AtEndOfList = TRUE;
		}
		else
		{
			PreviewCount = 0;
			Previewing = FALSE;
			AtEndOfList = TRUE;
			return FALSE;
		}
	}

	if ( <AutoScanMode> && <AutoScanWrap> && <AtEndOfList> )
	{
		if ( <Direction> > 0 )
		{
			if ( !ScanList( GetFirst, Image ) )
			{
				PreviewCount = 0;
				Previewing = FALSE;
				return FALSE;
			}
		}
		else if ( <Direction> < 0 )
		{
			if ( !ScanList( GetLast, Image ) )
			{
				PreviewCount = 0;
				Previewing = FALSE;
				return FALSE;
			}
		}
		AtEndOfList = FALSE;
	}
	Order = ~<$pcon.Image[OrderID]>~;
	Roll  = ~<$pcon.Image[Roll]>~;
	Frame = ~<$pcon.Image[Frame]>~;
	Punch = ~<$pcon.Image[Punch]>~;
	XOffset = ~<$pcon.Image[XOffset]>~;
	YOffset = ~<$pcon.Image[YOffset]>~;
	ImageScanSetup = ~<$pcon.Image[ScanSetup]>~;
	ImageFilmType = ~<$pcon.Image[FilmType]>~;

	NextPunch = 0;
	NextXOffset = 0;
	NextXPos = 0;
	NextYPos = 0;
	NextScanWidth = 0;
	NextScanLength = 0;

	if ( <SaveFirstAutoScanPunch> )
	{
		FirstAutoScanPunch  = ~<Punch>~;
		SaveFirstAutoScanPunch = FALSE;
	}

	// Get the next frame (look ahead)
	if ( ScanList( <NextFrameCmd>,Image ) )
	{
		NextPunch = ~<$pcon.Image[Punch]>~;
		NextXOffset = ~<$pcon.Image[XOffset]>~;
		NextXPos = 50.;
		NextYPos = 50.;
		NextScanWidth = 100.;
		NextScanLength = 100.;

	}
	else if ( <AutoScanMode> && <AutoScanWrap> )
	{
		NextPunch = ~<FirstAutoScanPunch>~;
	}

// TBD 
// If the above command fails then we are at the beginning
//	  Return to original record
	if ( !ScanList( <NextFrameReverseCmd>,Image ) )
	{
		PreviewCount = 0;
		Previewing = FALSE;
		AtEndOfList = TRUE;
		return FALSE;
	}

	return ~<Order>~ != ~~ && ~<Roll>~ != ~~ && ~<Frame>~ != ~~;
}

NUMERIC GetOffsetInfoFromDB( Order,Roll,Frame,&XOffset,&YOffset )
{
	FindFrameData(~<Order>~,~<Roll>~,~<Frame>~);
	if ( !ScanList( GetRecord,Image ) )
	{
		return FALSE;
	}
	XOffset = ~<$pcon.Image[XOffset]>~;
	YOffset = ~<$pcon.Image[YOffset]>~;

	return TRUE;
}

VOID FilmDriveOperationComplete( Punch )
{
	if ( !IsNull( ~<OnFilmDriveOperationComplete>~ ) )
	{
		dlg( SetStrings,Punch,~<Punch>~ );
		SizzleControl( Set,Punch,~<Punch>~ );
		dlg( GetInput );
		ScanFromDataBase = DlgData(GetNumeric,ScanFromDataBase);
		FrameToPunch = DlgData(GetNumeric,FrameToPunch);
		FrameToPunchPadding = DlgData(GetNumeric,FrameToPunchPadding);
		SequentialPunches = DlgData( GetNumeric,SequentialPunches );

		SizzleControl( Set,ScanFromDataBase,~<ScanFromDataBase>~);
		if ( <FrameToPunch> && !<ScanFromDataBase> )
		{
			NewFrame = Format( ~<Punch>~,~%ld~ );
			if ( <FrameToPunchPadding> )
			{
				NewFrame = Format( ~<Punch>~,~%0<FrameToPunchPadding>ld~ );
			}
			SetCurrentFrameNumber( ~<NewFrame>~ );
			SizzleControl( Set,Frame,~<NewFrame>~ );

			dlg( GetInput,GetStrings,Order,Order,Roll,Roll,
				 AutoDRGBAdjustments,AutoDRGBAdjustments );

			if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<NewFrame>~ )
			{
				if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<NewFrame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
				{
					dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return;	
				}
			}
			else
			{
				if ( !OnDRGB_2_BRGBC( FALSE ) )
				{	
					dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return;	
				}
			}
			LastOrderID = ~<Order>~;
			LastRoll = ~<Roll>~;
			LastFrame = ~<NewFrame>~;
		}

		// These will be set
		XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
		YOffset = DlgData( GetNumeric,EYOffsetPositionInUnits );
		YCorrection = DlgData( GetNumeric,EYOffsetIncrementUnit );

		SizzleControl( Set,XOffset,~<XOffset>~ );
		SizzleControl( Set,YOffset,~<YOffset>~ );
		SizzleControl( Set,EYOffsetIncrementUnit,~<YCorrection>~ );

		// Don't try to verify the punch number if we're jogging film
		if ( <SequentialPunches> && !<ScanFromDataBase> && ( ~<JogNextCommand>~ == ~~ ) && ( ~<JogPrevCommand>~ == ~~ ) )
		{
			if ( <ExpectedNextPunch> != <Punch> && <ExpectedNextPunch> != 0 )
			{
				if ( !HandleNonsequentialPunch( <Punch>,<ExpectedNextPunch> ) )
				{	
					EnableScanningControls( TRUE );
					SetTransportControlsStopped();
					return;	
				}
			}
		}

		prevSetting = ~<OnFilmDriveOperationComplete>~;
		retval = <OnFilmDriveOperationComplete>;

		if ( !<retval> )
		{
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
		}

		if ( ~<OnFilmDriveOperationComplete>~ == ~<prevSetting>~ )
		{
			ClearFilmDriveOperationHandlers();
		}
		if ( !DlgData(GetNumeric,ScanFromDataBase) )
		{
			dlg( SetStrings,EYOffsetPositionInUnits,~0~ );
		}

		if ( DlgData(GetNumeric,AutoScan) && !DlgData(GetNumeric,ScanFromDataBase) && <ScanFrameBeforeAdvance> && <ExpectedNextPunch> != 0 )
		{
			ScanFrameBeforeAdvance = FALSE;
		}
	}
}

VOID FilmDriveOperationError( Message )
{
	mesg = ~~;

	if ( IsNULL( ~<Message>~ ) )
	{
		Warning( Translate( ~Unable to obtain to seek frame~ ) );
	}
	else
	{
		Warning( Translate( ~Unable to <Message>~ ) );
	}
	ClearFilmDriveOperationHandlers();
}

VOID FilmDriveOperationStopped()
{
	Warning( Translate( ~Stop issued to film drive by user~ ) );
	ClearFilmDriveOperationHandlers();
}

VOID ClearFilmDriveOperationHandlers()
{
	OnFilmDriveOperationComplete = ~~;
}

ScanAfterPreview = FALSE;
LastPosition = 0;
CurrentPosition = 0;
OnFilmDriveOperationComplete = ~~;
ClearFilmDriveOperationHandlers();

NUMERIC ScanAgain()
{
	return OnScanButton( <LastPosition>,FALSE );
}

NUMERIC FilmDriveAtFrame( WhichFrame,XOffset )
{
	dlg( SetStatus,0,~Film Drive at <WhichFrame>:<XOffset>~ );
	return TRUE;
}

NUMERIC OnScanButton( Position,TestScan )
{
	FocusBeforeScan = <FocusNeeded>;
	DoFrameToPunch = FALSE;
	ClearCalibrationHandlers();
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );

	if ( !FindScanner( FALSE ) )
	{	return FALSE;	}

	if ( <LastScanIsTestScan> )
	{
		if ( ImageCorrections( GetCrop,~<LastPath>~,cX1,cY1,cW1,cL1 ) )
		{
			cX2 = DlgData( GetNumeric,CropX );
			cY2 = DlgData( GetNumeric,CropY );
			cW2 = DlgData( GetNumeric,CropWidth );
			cL2 = DlgData( GetNumeric,CropLength );

			if ( <cX1> != <cX2> || <cY1> != <cY2> || <cW1> != <cW2> || <cL1> != <cL2> )
			{
				ImageCorrections( UpdateCrop,~<LastPath>~,50,50,100,100 );
			}
		}
	}

	if ( !VerifyProfiles() )
	{
		return FALSE;
	}

	LastPosition = <Position>;
	CurrentPosition = <Position>;

	if ( <PreviewCount> )
	{
		dlg( SetStatus,0,~Scanning~ );
		PreviewCount = 0;
		ScanAfterPreview = TRUE;
		return TRUE;
	}

	SizzleControl( SetValues,FilmDriveAction,~~ );

	if ( <FilmEditorChanged> )
	{
		UpdateEditorXYOffsetSetting();
	}

	Tension = IsDriveTensioned( TRUE );
	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame,
	     Punch,Punch,SaveFileType,SaveFileType,AutoDRGBAdjustments,AutoDRGBAdjustments,
		 CurrentPunchPosition,CurrentPunchPosition,FilmDriveEnabled,FilmDriveEnabled,
		 CurrentXOffset,TXOffsetPositionInUnits,CurrentYOffset,EYOffsetPositionInUnits,
		 AutoScanWrap,AutoScanWrap,DisableFilmDrive,DisableFilmDrive,FrameToPunch,FrameToPunch,
		 TXOffsetIncrementUnit,TXOffsetIncrementUnit,EYOffsetIncrementUnit,EYOffsetIncrementUnit,
		 FrameToPunchPadding,FrameToPunchPadding );

	SequentialPunches = DlgData( GetNumeric,SequentialPunches ) && DefinedAndNotNull( FilmDrive ) && <FilmDriveEnabled>;

	if ( !OrderValid( ~<Order>~ ) )
	{
		return FALSE;
	}

	DisplayLastImage = DlgData( GetNumeric,DisplayLastImage );
	AutoScan = DlgData( GetNumeric,AutoScan );
	ScanFromDataBase = DlgData( GetNumeric,ScanFromDataBase );
	XPos = DlgData( GetNumeric, XPos );
	YPos = DlgData( GetNumeric, YPos );
	ScanWidth = DlgData( GetNumeric, ScanWidth );
	ScanLength = DlgData( GetNumeric, ScanLength );
	NextPunch = 0;
	NextXOffset = 0;
	NextXPos = 0;
	NextYPos = 0;
	NextScanWidth = 0;
	NextScanLength = 0;
	SizzleControl( SetValues,NextInfoAdjusted,FALSE,NextPunch,<NextPunch>,NextXOffset,<NextXOffset>,NextXPos,<NextXPos>,NextYPos,<NextYPos>,NextScanWidth,<NextScanWidth>,NextScanLength,<NextScanLength> );

	// Allow focus and scan before Advance and Scan
	GetFilmDriveVendor();

	if ( <AutoScan> && !<ScanFromDataBase> && <ScanFrameBeforeAdvance> )
	{
		ExpectedNextPunch =  atof( ~<CurrentPunchPosition>~ );
		if ( <Position> != 0 )
		{
			Position = 0;
			CurrentPosition = 0;
		}
	}

	// Do not display the image if we are repeatedly scanning the current frame
	if ( <DisplayLastImage> && <AutoScan> && <LastPosition> == 0 )
	{
		dlg( SetString,~0~,DisplayLastImage );
	}

	if ( ~<CurrentPunchPosition>~ == ~~ || !IsNumeric( ~<CurrentPunchPosition>~ ) )
	{
		CurrentPunchPosition = 0;
		SetCurrentPunchNumber( ~~ );
	}

	if ( ~<Volume>~ == ~~ || ~<Order>~ == ~~ || ~<Roll>~ == ~~ || ~<Frame>~ == ~~ )
	{
		return Warning( Translate( ~You must enter values for Path, Order, Roll, and Frame~ ) );
	}

	if ( <FilmDriveEnabled> )
	{
		if ( !FunctionDefined( ~<FDVendor>_FormatPunchNumber~ ) )
		{
			return VendorNotSelected( ~<FDVendor>_FormatPunchNumber~ );
		}
		if ( !FunctionDefined( ~<FDVendor>_ValidPunchRange~ ) )
		{
			return VendorNotSelected( ~<FDVendor>_ValidPunchRange~ );
		}
	}

	if ( !<ScanFromDataBase> )
	{
		if ( !CalibrationOk( TRUE ) )
		{
			return Warning( Translate( ~Please calibrate the scanner before scanning.~ ) );
		}
	}

	if ( <FilmDriveEnabled> && <Tension> && ( <CurrentPunchPosition> == 0 ) )
	{
		SetCurrentPunchNumber( ~~ );
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }

		Msg = ~Film drive is not positioned at a valid punch location.\n\nPlease manually position the film to a punch location.~;

		return Warning( Translate( ~<Msg>~ ) );
	}

	if ( <TestScan> )
	{
		SizzleControl( SetValues,TestScan,TRUE );
	}

	// GET THE FRAME NUMBER
	// If we are scanning from the database then ignore loading film drive info
	// from the ScanSetup records
	IgnoreFilmDriveEnable = <ScanFromDataBase>;

	// If no database, get the frame number info from the UI
	if ( !<ScanFromDataBase> )
	{
		if ( !<FilmDriveEnabled> )
		{
			CurrentPunchPosition = <FDVendor>_FormatPunchNumber( ~0~ );
		}
		// Film Drive should be positioned at a valid punch
		if ( <FilmDriveEnabled> ) 
		{
			if (!<FDVendor>_ValidPunchNumber( ~<CurrentPunchPosition>~ ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				Msg = ~Film drive is not positioned at a valid punch location.\n\nPlease manually position the film to a punch location.~;

				return Warning( Translate( ~<Msg>~ ) );
			}
			else if ( <FrameToPunch> )
			{
				NewFrame = Format( ~<CurrentPunchPosition>~,~%ld~ );
				FrameToPunchPadding = DlgData(GetNumeric,FrameToPunchPadding);
				if ( <FrameToPunchPadding> )
				{
					NewFrame = Format( ~<CurrentPunchPosition>~,~%0<FrameToPunchPadding>ld~ );
				}
				SetCurrentFrameNumber( ~<NewFrame>~ );
				Frame = ~<NewFrame>~;
				DoFrameToPunch = TRUE;
			}
		}

		if ( IsNumeric( ~<Frame>~ ) )
		{
			len = strlen(~<Frame>~);
			if ( <len> > <MAX_NUMERIC_LENGTH> )
			{
				Warning( ~The maximum numeric value for the frame number has been exceeded.\nPlease update the number manually.~ );
			}
			else
			{
				// Give the transport a chance to translate the position into a frame delta for us if it can; otherwise
				// default the delta to the position value.
				Routine = <FDVendor>_TranslateMoveToFrameDelta;
				
				if ( <FilmDriveEnabled> && FunctionDefined( ~<Routine>~ ) )
					{ FrameDelta = <Routine>( ~<Position>~ ); }
				else
				{
					FrameDelta = ( <FilmDriveEnabled> && ( <FilmDirection> == 1 ) ) ? ( <Position> * (-1) ) : <Position>;
 				}
					
				len = strlen(~<Frame>~);
				Frame = <Frame> + <FrameDelta>;
				if ( <Frame> <= 0 )
				{
					if ( <FilmDriveEnabled> && FunctionDefined( ~<FDVendor>_ClearAutoFlag~ ) )
					{
						<FDVendor>_ClearAutoFlag( FALSE );
					}
					Warning( Translate( ~Unable to scan.  The frame number cannot be less than or equal to 0.~ ) );
					return FALSE;
				}
				Frame = FormattedFrame( Format( ~<Frame>~,~%0<len>ld~ ) );
				CurrentScanFrame = ~<Frame>~;
				dlg( SetString,~<Frame>~,Frame,0 );
				DlgData( SetValues,Frame,~<Frame>~ );
			}
		}

		if ( atof(~<Frame>~) != atof(~<Punch>~)  && FunctionDefined( ~<FDVendor>_ResetFrameNumber~ ) )
		{
			<FDVendor>_ResetFrameNumber( ~<Frame>~,TRUE );
		}

		dlg( SetStrings,Punch,~<CurrentPunchPosition>~ );
		SizzleControl( SetValues,NextInfoAdjusted,FALSE,NextPunch,<NextPunch>,NextXOffset,<NextXOffset>,NextXPos,50.,NextYPos,50.,NextScanWidth,100.,NextScanLength,100. );

		// Special case for Cut Negative Scanning (No Database/No Transport)
		if ( ( !Defined( FilmDrive ) || !<FilmDriveEnabled> ) && DlgData(GetNumeric,CutNegPrompt) )
		{
			FocusBeforeScan = FALSE;
			if ( <FocusNeeded> )
			{
				Msg = Translate( ~Please insert frame <Frame>.\n\nIt is recommended that you do a focus after changing\nthe magnification or calibrating.\n\nDo you want to focus the scanner now?~ );
				FocusBeforeScan = TRUE;
			}
			else
			{
				Msg = Translate( ~Please insert frame <Frame>~ );
			}

			if ( MessageBox( ~<Msg>~,YESNO ) != YES )
			{
				FocusNeeded = FALSE;
				FocusBeforeScan = FALSE;
				dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return Warning( Translate( ~Scanning cancelled.~ ) );
			}
		}
	
		// Update the scanner dialog
		if ( IsNumeric( ~<Frame>~ ) && ( Numeric( ~<Frame>~ ) < 0 ) )
		{
			Frame = FormattedFrame(~000~);
		}

		Frame = FormattedFrame( ~<Frame>~ );

		// 02/08/02 DPT
		// If frame to punch is set and we are not scanning from the database,
		// a call will be made after the movement of the film to change the
		// order, roll, and frame.	So there is no need to make the call here.
		FrameToPunch = DlgData(GetNumeric,FrameToPunch);
		if ( !<FrameToPunch> || (<Position> == 0))
		{
			if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<Frame>~ )
			{
				// Warns for no DRGB refs (analyzer values)
				if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<Frame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
				{ 
					dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
					EnableScanningControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					return FALSE; 
				}
			}
			else
			{
				if ( !OnDRGB_2_BRGBC( FALSE ) )
				{	
					dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
					EnableScanningControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					return FALSE;	
				}
			}
		}
		LastOrderID = ~<Order>~;
		LastRoll = ~<Roll>~;
		LastFrame = ~<Frame>~;
	}
	// Else, get the frame number info from the database
	else if ( <ScanFromDataBase> )
	{
		AtEndOfList = FALSE;
		AutoScanMode = DlgData(GetNumeric,AutoScan);
		if ( !GetNextFrameToScanInfo( <Position>,<AutoScanMode>,<AutoScanWrap>,Order,Roll,Frame,Punch,CurrentXOffset,CurrentYOffset,AtEndOfList,NextPunch,NextXOffset,NextXPos,NextYPos,NextScanWidth,NextScanLength ) )
		{
			if ( <Position> < 0 && <AtEndOfList> )
			{
				Message = ( <AutoScanMode> ) ? ~Completed~ : ~ At beginning of~;
				Warning( Translate( ~<Message> Order/Roll/Frame scan~ ) );
				if ( Defined( ScanList ) ) { ScanList( GetFirst,Record ); }
				LastOrderID = ~~;
				LastRoll = ~~;
				LastFrame = ~~;
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return TRUE;
			}
			else if ( <Position> > 0 && <AtEndOfList> )
			{
				Message = ( <AutoScanMode> ) ? ~Completed~ : ~ At end of~;
				Warning( Translate( ~<Message> Order/Roll/Frame scan~ ) );
				if ( Defined( ScanList ) ) { ScanList( GetLast,Record ); }
				LastOrderID = ~~;
				LastRoll = ~~;
				LastFrame = ~~;
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return TRUE;
			}
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return Warning( Translate( ~Unable to obtain Order/Roll/Frame information for next scan~ ) );
		}

		if ( ( ~<NextPunch>~ == ~~ ) || !<AutoScanMode> || !<FilmDriveEnabled> )
		{
			NextPunch = 0;
			NextXOffset = 0;
			NextXPos = 0;
			NextYPos = 0;
			NextScanWidth = 0;
			NextScanLength = 0;
		}
		if ( Numeric( ~<NextPunch>~ ) != 0 )
		{
			TXOffsetIncrementUnit = DlgData( GetNumeric,TXOffsetIncrementUnit );
			EXOffsetIncrementUnit = DlgData( GetNumeric,EXOffsetIncrementUnit );
			if ( <ScanFromDataBase> && <NextXOffset> && <TXOffsetIncrementUnit> && <EXOffsetIncrementUnit> )
			{
				TempXOffset = ( <NextXOffset> * <EXOffsetIncrementUnit> ) / <TXOffsetIncrementUnit>;
				NextXOffset = Round( <TempXOffset> );
			}
		}
		SizzleControl( SetValues,NextInfoAdjusted,FALSE,NextPunch,<NextPunch>,NextXOffset,<NextXOffset>,NextXPos,<NextXPos>,NextYPos,<NextYPos>,NextScanWidth,<NextScanWidth>,NextScanLength,<NextScanLength> );

		// Check the punch number format if we have a defined and enabled Film Drive
		if ( Defined( FilmDrive ) && ( <Position> == 0 ) && <FilmDriveEnabled> )
		{
			// Validate database logic

			if ( FunctionDefined( ~<FDVendor>_ValidPunchRange~ ) )
			{
				if ( !<FDVendor>_ValidPunchRange( ~<Punch>~ ) )
				{
					EnableScanningControls( TRUE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
					return Warning( Translate( ~Punch number (<Punch>) is out of range for a <FDVendor> film drive~ ) );
				}
			}
		}

		// Update the dialog with offset information
		SetDialogVendorXOffsetInfo( <CurrentXOffset>, <TXOffsetIncrementUnit> );
		SetDialogVendorYOffsetInfo( <CurrentYOffset>, <EYOffsetIncrementUnit> );

		// Always set the Punch number in the UI (with the punch number in the db) even
		// if there is no Film Drive defined or enabled... StartScanAfterCalibration will need this
		// info
		Punch = <FDVendor>_FormatPunchNumber( ~<Punch>~ );
		dlg( SetStrings,Punch,~<Punch>~,GotoPunchNumber,~<Punch>~ );
		dlg( Update );

		// Update the scanner dialog
		if ( IsNumeric( ~<Frame>~ ) && ( Numeric( ~<Frame>~ ) < 0 ) )
		{
			Frame = FormattedFrame(~000~);
		}

		Frame = FormattedFrame( ~<Frame>~ );

		dlg( GetInput );
		dlg( SetStrings,GotoPunchNumber,~<Punch>~ ); // REM Punch formatted above
		dlg( Update );

		KeepScanList = TRUE;
		if ( !LoadSetup( <IgnoreFilmDriveEnable> ) )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			ResetNextFrameAfterError();
			return FALSE;
		}

		if ( !CalibrationOk( FALSE ) )
		{
			AutoScanAfterCal = TRUE;
			OnCalibrationComplete = STR ( StartScanAfterCalibration( <TestScan>,~<Frame>~ ); );

			Warning( Translate( ~The scanner needs calibration.~ ) );
			IsCalStarted = OnSizzleCalibrateButton( FALSE );

			if ( <IsCalStarted> )
			{
				EnableScanningControls( FALSE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsRunning(); }
				return FALSE;
			}
			else
			{
				AutoScanAfterCal = FALSE;
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				ResetNextFrameAfterError();
				return TRUE;
			}
		}

		if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<Frame>~ )
		{
			// Warns for no DRGB refs (analyzer values)
			if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<Frame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
			{ 
				dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				ResetNextFrameAfterError();
				return FALSE; 
			}
		}
		else
		{
			if ( !OnDRGB_2_BRGBC( FALSE ) )
			{
				dlg( SetStatus,0,Translate( ~Scanning cancelled.~) );
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				ResetNextFrameAfterError();
				return FALSE;
			}
		}
		LastOrderID = ~<Order>~;
		LastRoll = ~<Roll>~;
		LastFrame = ~<Frame>~;

		// Always set the Punch number in the UI (with the punch number in the db) even
		// if there is no Film Drive defined or enabled
		Punch = <FDVendor>_FormatPunchNumber( ~<Punch>~ );
		dlg( SetStrings,Punch,~<Punch>~,GotoPunchNumber,~<Punch>~ );

		// Special case for Cut Negative Scanning (Database/No Transport)
		if ( ( !Defined( FilmDrive ) || !<FilmDriveEnabled> ) && DlgData(GetNumeric,CutNegPrompt))
		{
			FocusBeforeScan = FALSE;
			if ( <FocusNeeded> )
			{
				Msg = Translate( ~Please insert frame <Frame>.\n\nIt is recommended that you do a focus after calibrating.\n\nDo you want to focus the scanner now?~ );
				FocusBeforeScan = TRUE;
			}
			else
			{
				Msg = Translate( ~Please insert frame <Frame>~ );
			}

			if ( MessageBox( ~<Msg>~,YESNO ) != YES )
			{
				FocusNeeded = FALSE;
				FocusBeforeScan = FALSE;
				dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
				EnableScanningControls( TRUE );
				ResetNextFrameAfterError();
				return Warning( Translate( ~Scanning cancelled.~ ) );
			}
		}
	}


	// Update the dialog with offset information
	SetDialogVendorXOffsetInfo( <CurrentXOffset>, <TXOffsetIncrementUnit> );
	SetDialogVendorYOffsetInfo( <CurrentYOffset>, <EYOffsetIncrementUnit> );

	ScanAfterPreview = FALSE;
	EndSettleTime = 0;

	// MAKE SURE SCAN AREA IS CORRECT
	if ( !<TestScan> )
	{
		UpdateScanSize(FALSE,TRUE);
	}

	if ( !DiskSpaceOK() )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError();	}
		return FALSE;
	}

	// DO THE FRAME MOVEMENT IF REQUIRED

	OnFilmDriveOperationComplete = STR ( ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,FALSE,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> ); );

	// If there is no film drive, or if film drive is disabled then clear the handlers
	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> )
	{
		ClearFilmDriveOperationHandlers();
	}

	// If no database and previous frame selected
	else if ( !<ScanFromDataBase>  && <Position> < 0 )
	{
		if ( <FilmDirection> == 0 )
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
		}
		else
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
		}
		if ( !OnPreviousFrameButton( TRUE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnPreviousFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If no database and next frame selected
	else if  ( !<ScanFromDataBase>  && <Position> > 0 )
	{
		if ( <FilmDirection> == 0 )
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
		}
		else
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
		}
		if ( !OnNextFrameButton( TRUE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			return FALSE; // REM OnNextFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If database, then seek punch
	else if ( <ScanFromDataBase> )
	{
		dlg( GetInput );
		dlg( SetStrings,GotoPunchNumber,~<Punch>~ ); // REM Punch formatted above
		if ( !OnGoToButton( TRUE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			return FALSE; // REM OnGoToButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}
	// Else just scan the current cut negative or current punch location

	// Check to see if the user would like to wait for the film
	// to settle
	if ( <SettleTime> && <EndSettleTime> )
	{
		DeltaSettleTime = ( <EndSettleTime> - Ticks() );
		if ( <DeltaSettleTime> > 0 )
		{
			Sleep( <DeltaSettleTime> );
		}
	}

	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> || ( !<ScanFromDataBase> && <Position> == 0 ) )
	{
		SizzleControl( Set,Punch,~<CurrentPunchPosition>~ );
		SizzleControl( Set,ScanFromDataBase,~<ScanFromDataBase>~ );
		dlg( GetInput );
		XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
		YOffset = DlgData( GetNumeric,EYOffsetPositionInUnits );
		EYOffsetIncrementUnit = DlgData( GetNumeric,EYOffsetIncrementUnit );

		SizzleControl( Set,XOffset,~<XOffset>~ );
		SizzleControl( Set,YOffset,~<YOffset>~ );
		SizzleControl( Set,EYOffsetIncrementUnit,~<EYOffsetIncrementUnit>~);
		
		retval = ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,FALSE,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> );

		if ( <retval> && <AutoScan> && !<ScanFromDataBase> && <ScanFrameBeforeAdvance> )
		{
			ScanFrameBeforeAdvance = FALSE;
		}

		if ( !<retval> )
		{
			KeepScanList = FALSE;
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		}

		return <retval>;
	}
	return TRUE;
}



NUMERIC OnRescanButton()
{
	Rescanning = TRUE;

	dlg( GetInput );

	AutoScanState = ~<$con.DlgData[AutoScan]>~;
	AutoCalculateState = ~<$con.DlgData[AutoDRGBAdjustments]>~;

	dlg( SetStrings, AutoScan, ~0~ );
	dlg( SetStrings, AutoDRGBAdjustments, ~0~ );

	OnScanButton( 0,FALSE );

	Rescanning = FALSE;

	return TRUE;
} 


NUMERIC VerifyProfiles( )
{
	if ( dlgData( GetNumeric,ScannerProfileEnabled ) )
	{
		profile = ~<$con.DlgData[ICCProfile]>~;

		Query = ~Select Path From Profiles Where Name = '<profile>'~;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr );
			return Warning( Translate( ~Failed to query for profile (<profile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		}

		if ( List( GetFirst,ProfileRecord ) )
		{
			profilePath = ~<$pcon.ProfileRecord[Path]>~;

			if ( !Files( FileExists,~<profilePath>~ ) ) 
			{
				return Warning( Translate( ~The scanner profile (<profile>) does not exist in the path specified in the Profiles database table.\nVerify the profile information in the Profiles table and try the operation again.~ ) );
			}
		}

		if ( dlgData( GetNumeric,OutputProfileEnabled ) )
		{
			profile = ~<$con.DlgData[ICCOutputProfile]>~;

			Query = ~Select Path From Profiles Where Name = '<profile>'~;

			List( GetConnection, Connection );
			if ( !PGenConList( List2,Connection,Connection,Cursor,Forward,QUERY,~<Query>~ ) )
			{ 
				List2( GetErrorDescription,0,theErr );
				return Warning( Translate( ~Failed to query for profile (<profile>) in the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
			}

			if ( List2( GetFirst,ProfileRecord ) )
			{
				profilePath = ~<$pcon.ProfileRecord[Path]>~;

				if ( !Files( FileExists,~<profilePath>~ ) ) 
				{
					return Warning( Translate( ~The storage profile (<profile>) does not exist in the path specified in the Profiles database table.\nVerify the profile information in the Profiles table and try the operation again.~ ) );
				}
			}
		}
	}

	return TRUE;
}


NUMERIC StartScanAfterCalibration( TestScan,Frame )
{
	ClearCalibrationHandlers();
	FocusBeforeScan = TRUE;

	dlg( GetInput,GetStrings,Punch,Punch,FilmDriveEnabled,FilmDriveEnabled );

	GetFilmDriveVendor();

	// Always set the Punch number in the UI (with the punch number in the db) even
	// if there is no Film Drive defined or enabled
	if ( FunctionDefined( ~<FDVendor>_FormatPunchNumber~ ) )
	{
		Punch = <FDVendor>_FormatPunchNumber( ~<Punch>~ );
	}
	dlg( SetStrings,Punch,~<Punch>~ );

	if ( ( !Defined( FilmDrive ) || !<FilmDriveEnabled> ) )
	{
		Msg = Translate( ~The scanner will automatically focus on the next scan.\n\nPlease insert frame <Frame>.\n\nDo you want to focus and scan now?~ );
		if ( MessageBox( ~<Msg> ~,YESNO ) == NO )
		{
			dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
			EnableScanningControls( TRUE );
			FocusNeeded = FALSE;
			FocusBeforeScan = FALSE;
			if ( DlgData( GetNumeric,ScanFromDatabase ) )
			{	ResetNextFrameAfterError();	}
			return Warning( Translate( ~Scanning cancelled.~ ) );
		}
	}
	return FinishScanAfterCalibration( <TestScan>, <FocusBeforeScan> );
}

NUMERIC FinishScanAfterCalibration( TestScan,FocusBeforeScan )
{
	FinishScanCommand = ~~;
	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame,
	     Punch,Punch,SaveFileType,SaveFileType,AutoDRGBAdjustments,AutoDRGBAdjustments,
		 CurrentPunchPosition,CurrentPunchPosition,FilmDriveEnabled,FilmDriveEnabled,
		 DisableFilmDrive,DisableFilmDrive,FrameToPunch,FrameToPunch,
		 CurrentXOffset,TXOffsetPositionInUnits,CurrentYOffset,EYOffsetPositionInUnits,
		 TXOffsetIncrementUnit,TXOffsetIncrementUnit,EYOffsetIncrementUnit,EYOffsetIncrementUnit );

	SequentialPunches = DlgData( GetNumeric,SequentialPunches ) && DefinedAndNotNull( FilmDrive ) && <FilmDriveEnabled>;
	GetFilmDriveVendor();

	ScanFromDatabase = DlgData(GetNumeric,ScanFromDataBase);
	AutoScan = DlgData( GetNumeric,AutoScan );
	
	DoFrameToPunch = FALSE;
	if ( !<ScanFromDatabase> && <FilmDriveEnabled> && <FrameToPunch> )
	{
		DoFrameToPunch = TRUE;
	}

	if ( <ScanFromDatabase> )
	{
		if ( GetOffsetInfoFromDB( ~<Order>~,~<Roll>~,~<Frame>~,CurrentXOffset,CurrentYOffset ) )
		{
			SetDialogVendorXOffsetInfo( <CurrentXOffset>, <TXOffsetIncrementUnit> );
			SetDialogVendorYOffsetInfo( <CurrentYOffset>, <EYOffsetIncrementUnit> );
		}	
	}
	Position = <CurrentPosition>;

	ScanAfterPreview = FALSE;
	EndSettleTime = 0;

	// MAKE SURE SCAN AREA IS CORRECT
	UpdateScanSize(FALSE,TRUE);

	if ( !DiskSpaceOK() )
	{
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError();	}
		return FALSE;
	}

	// DO THE FRAME MOVEMENT IF REQUIRED

	OnFilmDriveOperationComplete = STR ( ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,FALSE,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> ); );

	// If there is no film drive, or if film drive is disabled then clear the handlers
	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> )
	{
		ClearFilmDriveOperationHandlers();
	}

	// If no database and previous frame selected
	else if ( !<ScanFromDataBase>  && <Position> < 0 )
	{
		if ( <FilmDirection> == 0 )

		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
		}
		else
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
		}
		LastFrame = ~~;
		if ( !OnPreviousFrameButton( TRUE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnPreviousFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If no database and next frame selected
	else if  ( !<ScanFromDataBase>  && <Position> > 0 )
	{
		if ( <FilmDirection> == 0 )
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) + 1;
		}
		else
		{
			ExpectedNextPunch = atof( ~<CurrentPunchPosition>~ ) - 1;
		}
		LastFrame = ~~;
		if ( !OnNextFrameButton( TRUE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnNextFrameButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}

	// If database, then seek punch
	else if ( <ScanFromDataBase> )
	{
		dlg( GetInput );
		dlg( SetStrings,GotoPunchNumber,~<Punch>~ ); // REM Punch formatted above
		if ( !OnGoToButton( TRUE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
			return FALSE; // REM OnGoToButton will display error message
		}
		EndSettleTime = Ticks() + <SettleTime>;
	}
	// Else just scan the current cut negative or current punch location

	// Update the scanner dialog
	if ( IsNumeric( ~<Frame>~ ) && ( Numeric( ~<Frame>~ ) < 0 ) )
	{
		Frame = FormattedFrame(~000~);
	}

	Frame = FormattedFrame( ~<Frame>~ );
	
	// 02/08/02 DPT
	// If frame to punch is set and we are not scanning from the database,
	// a call will be made after the movement of the film to change the
	// order, roll, and frame.	So there is no need to make the call here.
	FrameToPunch = DlgData(GetNumeric,FrameToPunch);
	if ( !( <FrameToPunch> && !<ScanFromDataBase> && <Position> == 0 ) )
	{
		if ( ~<LastOrderID>~ != ~<Order>~ || ~<LastRoll>~ != ~<Roll>~ || ~<LastFrame>~ != ~<Frame>~ )
		{
			// Warns for no DRGB refs (analyzer values)
			if ( !ChangeOrderRollFrame( ~<Order>~,~<Roll>~,~<Frame>~,FALSE,<AutoDRGBAdjustments>,TRUE ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;
			}
		}
		else
		{
			if ( !OnDRGB_2_BRGBC( FALSE ) )
			{
				EnableScanningControls( TRUE );
				if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
				return FALSE;
			}
		}
		LastOrderID = ~<Order>~;
		LastRoll = ~<Roll>~;
		LastFrame = ~<Frame>~;
	}

	// Check to see if the user would like to wait for the film
	// to settle
	if ( <SettleTime> && <EndSettleTime> )
	{
		DeltaSettleTime = ( <EndSettleTime> - Ticks() );
		if ( <DeltaSettleTime> > 0 )
		{
			Sleep( <DeltaSettleTime> );
		}
	}

	// After all frame movement has completed check/setup for wait for next punch

	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> || <DisableFilmDrive> || ( !<ScanFromDataBase> && <Position> == 0 ) )
	{
		SizzleControl( Set,Punch,~<CurrentPunchPosition>~ );
		SizzleControl( Set,ScanFromDataBase,~<ScanFromDataBase>~ );
		dlg( GetInput );
		XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
		YOffset = DlgData( GetNumeric,EYOffsetPositionInUnits );
		EYOffsetIncrementUnit = DlgData( GetNumeric,EYOffsetIncrementUnit );

		SizzleControl( Set,XOffset,~<XOffset>~ );
		SizzleControl( Set,YOffset,~<YOffset>~ );
		SizzleControl( Set,EYOffsetIncrementUnit,~<EYOffsetIncrementUnit>~);
		
		retval = ScanAnImage( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<$con.DlgData[FileExtension]>~,FALSE,<TestScan>,<FocusBeforeScan>,<DoFrameToPunch> );

		if ( <retval> && <AutoScan> && !<ScanFromDataBase> && <ScanFrameBeforeAdvance> )
		{
			ScanFrameBeforeAdvance = FALSE;
		}
		if ( !<retval> )
		{
			EnableScanningControls( TRUE );
			if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		}
		return <retval>;
	}
	return TRUE;
}


STR CreateImagePath( Volume,Order,Roll,Frame,Ext )
{
	ImagesPath = ~<Volume>\<Order>\<Roll>\<Frame><Ext>~;

	if ( IsNULL( ~<$con.DlgData[PathTemplate]>~ ) )
	{
		if ( DlgData(GetNumeric,OmitRollInPath) )
		{
			ImagesPath = ~<Volume>\<Order>\<Frame><Ext>~;
		}

		return ~<ImagesPath>~;
	}

	if ( Defined( ScanList ) ) 
	{
		ScanList( GetRecord,ImageRec );
	}

	Padding = DlgData(GetNumeric,FrameToPunchPadding);
    DlgData( Get,CurrentPunchPosition,Punch );

	// <Volume>\Images\<Order>\<$pcon.ImageRec[Punch].%0<Padding>ld><Ext>

	ImagesPath = ~<$con.DlgData[PathTemplate]>~;

	return ~<ImagesPath>~;
}


NUMERIC ScanAnImage( Volume,Order,Roll,CurrentFrame,Ext,PreviewScan,TestScan,FocusBeforeScan,DoFrameToPunch )
{
	if ( !FindScanner(FALSE) )	{ return FALSE; }

	ClearFilmDriveOperationHandlers();

	if ( !OrderValid( ~<Order>~ ) ) { return FALSE; }

	//if ( !CalibrationOK( TRUE ) ) { return FALSE; }
	
	if ( !DiskSpaceOK() ) { return FALSE; }

	Frame = ~<CurrentFrame>~;
	// Override parameter with one set to punch number
	if ( <DoFrameToPunch> )
	{
		DlgData( Get,Frame,Frame );
	}

	FilmType = ~<$con.DlgData[FilmType]>~;
	SizzleControl( Set,FilmTermFile,~<FilmType>~ );

	CheckScanWidthLengthMin();

	ImagesPath = CreateImagePath( ~<Volume>~,~<Order>~,~<Roll>~,~<Frame>~,~<Ext>~ );

	ImagesPath = MakePath( ~<ImagesPath>~ );
	if ( <PreviewScan> )
	{
		ImagesPath = ~<PreviewPath>~;
	}

	if ( !BroadcastMessageToAllViews( CanReleaseImage,~<ImagesPath>~ ) )
		{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }

	if ( !DlgData( GetNumeric,ScanFromDatabase ) )
	{
		if ( !BroadcastMessageToAllViews( ReleaseImage,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}
	else
	{
		if ( !BroadcastMessageToAllViews( ReleaseThumbnail,~<ImagesPath>~ ) )		
			{ return Warning( Translate( ~Could not delete\n\n<ImagesPath>\n\nbecause it is still open in a job or layout.~ ) ); }
	}

	// DPT 03/12/01
	// Don't delete the image form disk if this is a test scan because this could cause an entry in the database
	// for this frame with no image on disk for it.
	if ( !Files( Delete,~<ImagesPath>~ ) )
	{
		// TBD - Temporary Commented out until I find a better
		// TBD - strategy to delete overlaping ImageCorrection Objects
		// TBD - The below statement somtimes gives an sharing violation
		// TBD - on faster machines
		// TBD return Warning( Translate( ~Could not delete <ImagesPath>.  <$Func.GetLastErrorMsg()>~ ) );
	}

	SizzleControl( SetValues,PATH,~<ImagesPath>~,ORDER,~<Order>~,ROLL,~<Roll>~,FRAME,~<Frame>~,PreviewScan,~<PreviewScan>~ );
	EnableScanningControls( FALSE );
	//CloseWindowsOfDocument( ~<ImagesPath>~ );
	if ( !ScanOne(FALSE,FALSE,<TestScan>,<FocusBeforeScan>) )
	{
		EnableScanningControls( TRUE );
		FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	return TRUE;
}


NUMERIC SetScanWindow()
{
	DlgData( Get,FilmType,FilmType );

	FilmTermsFile = ~~;

	FilmTypeData = ~~;
	FilmTermsFile = ~<$App.ShareDirectory>\Scan\<$con.dlgData[ScannerType]>\FilmTerms\<FilmType>~;

	if ( !Scanner( LoadFilmTermsFromFile,~<FilmTermsFile>~,FilmTypeData ) )
	{
		Warning( Translate( ~Could not find or load <FilmTermsFile>~ ) );
		return FALSE;
	}

	XOffset = DlgData( GetNumeric,TXOffsetPositionInUnits );
	SizzleControl( SetValues,XOffset,<XOffset> );

	if ( !Scanner( SetWindow,FilmTypeData,SizzleControl ) )
	{
		Warning( Translate( ~Could not setup the scanner as requested~ ) );
		return FALSE;
	}

	return TRUE;
}


NUMERIC HandleDRGB( &dBase,OrderID,Roll,Frame,AutoDRGBAdjustments,DisplayDRBGError )
{
	a_D = a_R = a_G = a_B = 0;
	c_D = c_R = c_G = c_B = 0;
	o_Br = o_R = o_G = o_B = o_C = 0;
	t_D = t_R = t_G = t_B = 0;
	UseOverrides = FALSE;
	CropX = 50.0;
	CropY= 50.0;
	CropWidth = 100.0;
	CropLength = 100.0;

	Query = ~Select aDen,aRed,aGrn,aBlu,cDen,cRed,cGrn,cBlu,UseOverrides,brightnessOverride,redOverride,greenOverride,blueOverride,contrastOverride,ScanRotation,CropX,CropY,CropWidth,CropLength From Images Where OrderID = '<OrderID>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

	a_D = a_R = a_G = a_B = 0;
	c_D = c_R = c_G = c_B = 0;
	o_Br = o_R = o_G = o_B = o_C = 0;
	UseOverrides = FALSE;
	CropX = 50.0;
	CropY= 50.0;
	CropWidth = 100.0;
	CropLength = 100.0;

	t_D = <Roll_aDen> + <Roll_cDen>;
	t_R = <Roll_aRed> + <Roll_cRed>;
	t_G = <Roll_aGrn> + <Roll_cGrn>;
	t_B = <Roll_aBlu> + <Roll_cBlu>;

	if ( dBase( GetValuesFor,~<Query>~,a_D,a_R,a_G,a_B,c_D,c_R,c_G,c_B,UseOverrides,o_Br,o_R,o_G,o_B,o_C,Rotation,CropX,CropY,CropWidth,CropLength ) )
	{
		a_D = Numeric( ~<a_D>~ ); a_R = Numeric( ~<a_R>~ ); a_G = Numeric( ~<a_G>~ ); a_B = Numeric( ~<a_B>~ );
		c_D = Numeric( ~<c_D>~ ); c_R = Numeric( ~<c_R>~ ); c_G = Numeric( ~<c_G>~ ); c_B = Numeric( ~<c_B>~ );
		o_Br = Numeric( ~<o_Br>~ ); o_R = Numeric( ~<o_R>~ ); o_G = Numeric( ~<o_G>~ ); o_B = Numeric( ~<o_B>~ ); o_C = Numeric( ~<o_C>~ );
		UseOverrides = Numeric( ~<UseOverrides>~ );

		t_D = <t_D> + <a_D> + <c_D>;
		t_R = <t_R> + <a_R> + <c_R>;
		t_G = <t_G> + <a_G> + <c_G>;
		t_B = <t_B> + <a_B> + <c_B>;
	}
	else
	{
		// 02/07/02 DPT
		// Changed this to leave the values in the dialog when the record doesn't exist
		// in the database.  We used to reset the values to 0 in this case.  This caused
		// problems for someone entering the DRGB numbers directly into the scanning
		// dialog.  In SBA mode, we will reset the values to 0.
		//UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);
		//if ( !<UseAnalyzerDRGBValues> )
		//{
		//	a_D = a_R = a_G = a_B = 0;
		//	c_D = c_R = c_G = c_B = 0;
		//	o_Br = o_R = o_G = o_B = o_C = 0;
		//	t_D = t_R = t_G = t_B = 0;
		//}
		//else
		//{
			DlgData( GetValues,dDensity,a_D,dRed,a_R,dGreen,a_G,dBlue,a_B );

			c_D = c_R = c_G = c_B = 0;
			o_Br = o_R = o_G = o_B = o_C = 0;

			t_D = <Roll_aDen> + <Roll_cDen>;
			t_R = <Roll_aRed> + <Roll_cRed>;
			t_G = <Roll_aGrn> + <Roll_cGrn>;
			t_B = <Roll_aBlu> + <Roll_cBlu>;

			if ( <t_D> != 0 || <t_R> != 0 || <t_G> != 0 || <t_B> != 0 )
			{
				a_D = a_R = a_G = a_B = 0;
			}

			t_D = <t_D> + <a_D>;
			t_R = <t_R> + <a_R>;
			t_G = <t_G> + <a_G>;
			t_B = <t_B> + <a_B>;
		//}

		UseOverrides = FALSE;
	}

	// THE VALUES FROM A PREVIOUS SCAN OVERRIDE THE ORIGINAL ANALYZER VALUES
	if ( <UseOverrides> )
	{
		UseImageOverrides = TRUE;
		NormalizeDRGB(t_D,t_R,t_G,t_B);
		DlgData( SetValues,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );
		dlg( SetStrings,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );

		LockScannerOffsets = DlgData( GetNumeric, LockScannerOffsets );
		if ( !<LockScannerOffsets> )
		{
			DlgData( SetValues,brightnessOverride,~<o_Br>~,redOverride,~<o_R>~,greenOverride,~<o_G>~,blueOverride,~<o_B>~,contrastOverride,~<o_C>~ );
			dlg( SetStrings,brightnessOverride,~<o_Br>~,redOverride,~<o_R>~,greenOverride,~<o_G>~,blueOverride,~<o_B>~,contrastOverride,~<o_C>~ );
		}

		DlgData( SetValues,CropX,~<CropX>~,CropY,~<CropY>~,CropWidth,~<CropWidth>~,CropLength,~<CropLength>~ );
		dlg( SetStrings,CropX,~<CropX>~,CropY,~<CropY>~,CropWidth,~<CropWidth>~,CropLength,~<CropLength>~);

		DlgData( SetValues,ScanRotation,~<Rotation>~ );
		dlg( SetStrings,ScanRotation,~<Rotation>~ );

		doCalc = TRUE;

		if ( <LockScannerOffsets> )
		{
			doCalc = FALSE;
		}

		//UseAnalyzerDRGBValues = DlgData( GetNumeric,UseAnalyzerDRGBValues );
		//if ( !<UseAnalyzerDRGBValues> )
		//{
		//	doCalc = FALSE;
		//}

		if ( !<AutoDRGBAdjustments> )
		{
			doCalc = FALSE;
		}
		
		if ( !<doCalc> )
		{
			return TRUE;
		}

		return Reverse_Calc_BRGBC_From_BRGBC(dBase, <doCalc>,<DisplayDRBGError>);
	}
	else if ( ~<a_D>~ != ~~ && Numeric( ~<a_D>~ ) >= 0 )
	{
		UseImageOverrides = FALSE;

		doCalc = TRUE;

		LockScannerOffsets = DlgData( GetNumeric,LockScannerOffsets );
		if ( <LockScannerOffsets> )
		{
			doCalc = FALSE;
		}

		//UseAnalyzerDRGBValues = DlgData( GetNumeric,UseAnalyzerDRGBValues );
		//if ( !<UseAnalyzerDRGBValues> )
		//{
		//	doCalc = FALSE;
		//}

		if ( !<AutoDRGBAdjustments> )
		{
			doCalc = FALSE;
		}
		
		NormalizeDRGB(t_D,t_R,t_G,t_B);
		DlgData( SetValues,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );
		dlg( SetStrings,dDensity,~<t_D>~,dRed,~<t_R>~,dGreen,~<t_G>~,dBlue,~<t_B>~ );

		if ( !<doCalc> )
		{
			return TRUE;
		}

		return Calc_BRGBC_From_BRGBC(dBase, <doCalc>,<DisplayDRBGError>);
	}
	else
	{
		UseImageOverrides = FALSE;
		//UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);
		a_D = a_R = a_G = a_B = 0;
		c_D = c_R = c_G = c_B = 0;
		o_Br = o_R = o_G = o_B = o_C = 0;
	}
	return TRUE;
}


VOID SelectControl(FieldName)
{
	dlg( PopupMsg );
	dlg( SetControlFocus,<FieldName> );
	dlg( EditText,<FieldName>,SetSel,999,999,TRUE );
}


VOID AuditField( FieldName,LowValue,HighValue,DefaultValue )
{
	dlg( GetControlValue,~<FieldName>~,Value );

	if ( ~<Value>~ == ~-~ )
	{
		if ( <LowValue> < 0 )
		{
			return;
		}
		else
		{
			 msg = ~Value must be greater than or equal to <LowValue>~;
			 dlg( PopupMsg,Translate( ~<msg>~ ) );
			 Action = STR ( SelectControl(~<FieldName>~) );
			 QueueContentsAfter( Action,2000 );
			 dlg( SetControlValue,~<FieldName>~,~<DefaultValue>~ );
			 return;
		}

	}

	if ( IsNumeric(~<Value>~) || (~<Value>~ == ~~) )
	{
//		if ( ~<Value>~ == ~~ )
//		{
//			Value = 0;
//			dlg( SetControlValue,~<FieldName>~,~<Value>~ );
//		}
		if ( Numeric(~<Value>~) < <LowValue> )
		{
			msg = ~Value must be greater than or equal to <LowValue>~;
			dlg( PopupMsg,Translate( ~<msg>~ ) );
			Action = STR ( SelectControl(~<FieldName>~) );
			QueueContentsAfter( Action,2000 );
			dlg( SetControlValue,~<FieldName>~,~<LowValue>~ );
		}
		else if ( Numeric(~<Value>~) > <HighValue> )
		{
			msg = ~Value must be less than or equal to <HighValue>~;
			dlg( PopupMsg,Translate( ~<msg>~ ) );
			Action = STR ( SelectControl(~<FieldName>~) );
			QueueContentsAfter( Action,2000 );
			dlg( SetControlValue,~<FieldName>~,~<HighValue>~ );
		}
	}
	else
	{
		msg = ~You have entered an invalid value. Please enter a value between <LowValue> and <HighValue>~;
		dlg( PopupMsg,Translate( ~<msg>~ ) );
		Action = STR ( SelectControl(~<FieldName>~) );
		QueueContentsAfter( Action,2000 );
		dlg( SetControlValue,~<FieldName>~,~<DefaultValue>~ );
		return;
	}
}


NUMERIC OpenImage()
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll,Frame,Frame );

	if ( ~<Order>~ == ~~ )		{ return Warning( Translate( ~Order ID cannot be NULL~ ) ); }
	if ( ~<Roll>~ == ~~ )		{ return Warning( Translate( ~Roll cannot be NULL~ ) ); }
	if ( ~<Frame>~ == ~~ )		{ return Warning( Translate( ~Frame cannot be NULL~ ) ); }

	Key = ~OrderID = '<Order>' AND Roll = '<Roll>' AND Frame = '<Frame>'~;

	if ( !Ado( dBase,Connect,GetValuesFor,~Select Path From Images Where <Key>~,Path ) )
	{
		return Warning( Translate( ~Could not find path for <Order>,<Roll>,<Frame> in the database~ ) );
	}

	if ( !DefinedAndNotNull( Path ) )
	{
		return Warning( Translate( ~Unable to get path specified for <Order>,<Roll>,<Frame> in the database~ ) );
	}

	if ( ~<Path>~ == ~~ )
	{
		return Warning( Translate( ~No path specified for <Order>,<Roll>,<Frame> in the database~ ) );
	}

	if ( !Open( Image,~<Path>~ ) )
	{
		return Warning( Translate( ~Could not open <Path>~ ) );
	}

	return TRUE;
}



NUMERIC OpenFramesButton()
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	if ( ~<Order>~ == ~~ )		
	{ 
		return Warning( Translate( ~Order ID cannot be NULL~ ) );
	}

	if ( ~<Roll>~ == ~~ )		
	{ 
		return Warning( Translate( ~Roll cannot be NULL~ ) );
	}

	Key = ~OrderID = '<Order>' AND Roll = '<Roll>'~;

	Query = ~Select * From Images Where <Key> Order By OrderID,Roll,Frame~;

	Actions = ACTION Doc ( ImagesDoc Open ImagesDataDoc "FrameDataForOrderRoll( ~<Order>~,0,~<Query>~,0,~<Order>~,~<Roll>~ );" );

	return PerformActions( Actions );
}


NUMERIC OpenEditorsTable()
{
	Query = ~Select * From Editors Order By Vendor,FilmFormat~;

	Actions = ACTION Doc ( EditorsDoc Open EditorsDoc "Init( ~FilmFormats~,~<Query>~ );" );

	return PerformActions( Actions );
}


NUMERIC OnFramesToScanButton()
{
	dlg( GetInput );
	return ViewScanList();
}


NUMERIC AddCustomer()
{
	dlg( GetInput,GetStrings,CustomerID,CustomerID );

	if ( ~<CustomerID>~ == ~~ )		{ return TRUE; }

	Query = ~Select ID From Customers Where ID = '<CustomerID>'~;

	if ( !Ado( dBase,Connect,GetValuesFor,~<Query>~,CustomerID ) )
	{
		Cmd = ~Insert Into Customers( ID ) Values( '<CustomerID>' )~;

		if ( !dbase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( ~Could not add customer <CustomerID>.  Database update failed <Cmd>. <theErr>~ ) );
		}
	}

	return TRUE;
}


NUMERIC AddOrder()
{
	dlg( GetInput,GetStrings,Order,Order,CustomerID,CustomerID );

	if ( ~<Order>~ == ~~ )		{ return Warning( Translate( ~Order ID cannot be NULL~ ) ); }

	Query = ~Select ID From Orders Where ID = '<Order>'~;

	if ( !Ado( dBase,Connect,GetValuesFor,~<Query>~,ID ) )
	{
		Today = ~<$Date.DataBaseDate.SharedDateQuoted>~;
		Fields = ~ID,CustomerID,Status,OrderDate,ShipDate,Priority,Owner,RunCount,Type~;
		Values = ~'<Order>','<CustomerID>','Scan',<Today>,<Today>,50,'<$App.UserName>',0,'Original'~;
		Cmd = ~Insert Into Orders( <Fields> ) Values( <Values>  )~;

		if ( !dbase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( ~Database update failed <Cmd>. <theErr>~ ) );
		}

		return dlg( SetStatus,0,Translate( ~Order <Order> for Customer <CustomerID> has been added.~) );

	}

	return dlg( SetStatus,0,Translate( ~Order <Order> for Customer <CustomerID> already exists.~) );
}


NUMERIC AddCustomerAndOrder()
{
	if ( !AddCustomer() )	{ return FALSE; }
	
	if ( !AddOrder() )		{ return FALSE; }

	return dlg( SetStatus,0,Translate( ~Customer and Order now exist~) );
}


NUMERIC DisplayStatusChoices( Type,x,y )
{
	GenCon( ListMenu,New,DDMenuDef,SetValues,Position,-1 );

	Count = 0;

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Scan - the frames need scanning~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Scan,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Scan - the frames do not need scanning~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Scan,0,FALSE); ) );	

	GenCon( NULL1,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Retouch~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Retouch - the images needing retouching~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Retouch,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Retouch  - the images do not need retouching~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Retouch,0,FALSE); ) );	

	GenCon( NULL2,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Inspect - the images need adjustment or cropping~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Inspect,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Inspect - the images do not need adjustment~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(Inspect,0,FALSE); ) );	

	GenCon( NULL3,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~&Use Scanner Color Offsets from database to scan the images~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(UseOverrides,1,FALSE); ) );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Use Scanner Color Offsets from database to scan the images~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( Update<Type>Images(UseOverrides,0,FALSE); ) );

	GenCon( NULL5,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~~,
			IDText,		~NULL~ );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Clear &Path - forget the path to the image~,
			IDText,		~ID~ );

	ActionsText = ACTION Exec ( Update<Type>Images(Path,~''~,TRUE); );	

	Choice<Count>( SetValuesFrom,ActionsText,ActionsText );

	GenCon( Choice<++Count>,New,DDMenuItemDef,AddTo,ListMenu,SetValues,
			Text,		~Set Order S&tatus - Update the status of the order~,
			IDText,		~ID~,
			ActionsText, ACTION Exec ( OnSetOrderStatus(); ) );

	dlg( DisplayMenu,ListMenu,<x>,<y> );

	return TRUE;
}



NUMERIC UpdateOrderImages( Field,Value,AskFirst )
{
	dlg( GetInput,GetStrings,Order,Order );

	if ( IsNULL(~<Order>~) )
	{
		return Warning( Translate( ~You must enter an Order first~ ) );
	}

	Cmd = ~Update Images Set <Field> = <Value> Where OrderID = '<Order>'~;

	if ( DefinedAndNotNull(AskFirst) && <AskFirst> )
	{
		if ( MessageBox( ~Are you sure you want to update all of the images in the Order? ~,YESNO ) == NO )
			{ return TRUE; }
	}

	if ( !Ado( dBase,Connect,Cmd,~<Cmd>~ ) )	
	{ 
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not <cmd>. <theErr>~ );
	}

	return TRUE;

}


NUMERIC UpdateRollImages( Field,Value,AskFirst )
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	if ( IsNULL(~<Order>~) )
	{
		return Warning( Translate( ~You must enter an Order first~ ) );
	}

	if ( IsNULL(~<Roll>~) )
	{
		return Warning( Translate( ~You must enter a Roll first~ ) );
	}

	if ( DefinedAndNotNull(AskFirst) && <AskFirst> )
	{
		if ( MessageBox( ~Are you sure you want to update all of the images in the Roll? ~,YESNO ) == NO )
			{ return TRUE; }
	}

	Cmd = ~Update Images Set <Field> = <Value> Where OrderID = '<Order>' AND Roll = '<Roll>'~;

	if ( !Ado( dBase,Connect,Cmd,~<Cmd>~ ) )	
	{ 
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not <cmd>. <theErr>~ );
	}

	return TRUE;
}



NUMERIC ImportFrameData()
{
	dlg( GetInput,GetStrings,Order,Order );

	ScannerDlgDefinition( GetWindowPosition,xPos,yPos );

	xPos = <xPos> + 72;

	Actions = ACTION Doc ( ~StartImportingDoc~ OpenOnce StartImportingDoc "Init(~<Order>~,<xPos>,<yPos>);" );
	return PerformActions( Actions );
}


NUMERIC ExportImages()
{
	dlg( GetInput,GetStrings,Order,Order );

	Actions = ACTION Doc ( ~ExportImagesDoc~ OpenOnce ExportImagesDoc "Init(~<Order>~);" );
	return PerformActions( Actions );
}


NUMERIC FindOrder()
{
	dlg( GetInput,GetStrings,Order,Order );

	if ( ~<Order>~ == ~~ )	
	{ 
		action = ACTION DOC ( AllOrders Open SearchDoc "Search(Orders);"  );
		return PerformActions( action );
	}

	Query = ~Select * From Orders Where ID Like '<Order>%' Order By ShipDate~;

	Actions = ACTION DOC ( ~Orders~ OpenOnce OrdersDoc "Init( ~<Order>~,~<Query>~);" );
	
	return PerformActions( Actions );
}


NUMERIC FindOrdersNeedingScanning()
{
	Query = ~Select * From Orders Where Status Like 'Scan%' Order By ShipDate ~;

	Which = Translate( ~Orders that are ready to be scanned~ );

	Actions = ACTION DOC ( ~Orders~ OpenOnce OrdersDoc "Init( ~<Which>~,~<Query>~);" );
	
	return PerformActions( Actions );
}


NUMERIC OnSetOrderStatus()
{
	ScannerDlgDefinition( GetWindowPosition,Left,Top);
	//Left -= 250;	

	dlg( GetInput,GetStrings,Order,Order );

	if ( ~<Order>~ == ~~ )	
	{ 
		return Warning( ~You must select an Order~ );
	}

	Actions = ACTIONS ( Doc( ~SetOrderStatusDoc~ Open SetOrderStatusDoc "Init( ~<Order>~,~<Left>~,~<Top>~ );" ) );
	return PerformActions( Actions );
}


NUMERIC FindCustomer()
{
	dlg( GetInput,GetStrings,CustomerID,CustomerID );

	if ( ~<CustomerID>~ == ~~ )	
	{ 
		action = ACTION DOC ( AllCustomers Open SearchDoc "Search(Customers);"  );
		return PerformActions( action );
	}

	Query = ~Select * From Customers Where ID Like '<CustomerID>%'~;

	Actions = ACTION DOC ( ~Customers~ OpenOnce CustomersDoc "Init( ~<CustomerID>~,~<Query>~);" );
	
	return PerformActions( Actions );
}


NUMERIC FindRolls()
{
	dlg( GetInput,GetStrings,Order,Order );

	if ( ~<Order>~ == ~~ )	
	{ 
		action = ACTION DOC ( AllOrders Open SearchDoc "Search(Orders);"  );
		return PerformActions( action );
	}

	Query = ~Select * From Rolls Where OrderID Like '<Order>%' Order By Roll~;

	Actions = ACTION DOC ( ~Rolls~ OpenOnce RollsDoc "Init( ~<Order>~,~<Query>~);" );
	
	return PerformActions( Actions );
}



NUMERIC OrderValid( OrderID )
{
	if ( !Ado( dBase,Connect,GetValuesFor,~Select CustomerID, ScanSetup, FilmType From Orders Where ID = '<OrderID>'~,CustomerID, ScanSetup, FilmType ) )	
	{ 
		dlg( SetStatus,0,Translate( ~Order <OrderID> does not exist~) );
		return FALSE;
	}

	OrderScanSetup = ~<ScanSetup>~;
	OrderFilmType = ~<FilmType>~;

	dlg( SetString,~<CustomerID>~,CustomerID,0 );

	return TRUE;
}


VOID FocusErrorNotification()
{
	FinishScanCommand = ~~;
	ErrMsg = Translate( ~The scanner returned an error while focusing.~ );

	dlg( SetStatus,0,~<ErrMsg>~ );

	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}


VOID ScanErrorNotification()
{
	ErrMsg = Translate( ~The scanner returned an error on the scan command.~ );

	dlg( SetStatus,0,~<ErrMsg>~ );

	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}


VOID FetchErrorNotification()
{
	ErrMsg = Translate( ~The scanner returned an error on the fetch command.~ );

	dlg( SetStatus,0,~<ErrMsg>~ );

	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
	if ( DlgData( GetNumeric,ScanFromDatabase ) )
	{	
		ScanFrameBeforeAdvance = TRUE;
	}
}


VOID FlushErrorNotification( AddrOfSaveControl )
{
	dlg( SetStatus,0,~The scanner returned an error on the flushing the image to disk~ );

	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
}


VOID PreviewErrorNotification()
{
	dlg( SetStatus,0,~The scanner returned an error during preview~ );
	EnableScanningControls(TRUE);
}


LastPath = ~~;		
LastImageDocument = 0;

VOID ImageFlushComplete( AddrOfFlushControl )
{
	SizzleImageFlushComplete( ~<AddrOfFlushControl>~ );

	dlg( SetStatus,1,Translate( ~~ ) );
}


VOID SizzleImageFlushComplete( Control )
{
	if ( !IsNULL( ~<Control>~ ) )
	{
		if ( !GenCon( ControlInfo,Is,~<Control>~, Temporary ) )
		{
			EnableScanningControls(TRUE);
			Warning( Translate( ~Image control information is not available.~ ) );
			return;
		}
	}
	else
	{
		EnableScanningControls(TRUE);
		Warning( Translate( ~Image control information is not available.~ ) );
		return;
	}

	SavedOrderID = ~<$con.ControlInfo[Order]>~;
	SavedRoll = ~<$con.ControlInfo[Roll]>~;
	SavedFrame = ~<$con.ControlInfo[Frame]>~;
	SavedPath = ~<$con.ControlInfo[Path]>~;

	LightTime = (ControlInfo( GetNumeric,DataAvailableTime ) - ControlInfo( GetNumeric,ScanStartTime )) / 1000;
	FetchTime = (ControlInfo( GetNumeric,FetchCompleteTime ) - ControlInfo( GetNumeric,DataAvailableTime )) / 1000;
	FlushTime = (ControlInfo( GetNumeric,FlushCompleteTime ) - ControlInfo( GetNumeric,FetchCompleteTime )) / 1000;
	TotalTime = (ControlInfo( GetNumeric,FlushCompleteTime ) - ControlInfo( GetNumeric,ScanStartTime )) / 1000;

	ControlInfo( SetValues,Focus,0 );
	//ImageCorrections( Free,~<LastPath>~ );	// ?????

	ThisPath = ~<$con.ControlInfo[Path]>~;

	dlg( GetInput );

	if ( !<Previewing> )
	{
		LastOrderID = ~<$con.ControlInfo[Order]>~;
		LastRoll = ~<$con.ControlInfo[Roll]>~;
		LastFrame = ~<$con.ControlInfo[Frame]>~;
	}

	LogActivity = ControlInfo( GetNumeric,LogActivity );
	TestScan = ControlInfo( GetNumeric,TestScan );
	if ( !<Previewing> )
	{
		ImageCorrections( Free,~<ThisPath>~ );
		ImageCorrections( Free,~<LastPath>~ );

		SizzleOpenScannedImage( ControlInfo,~<LastPath>~,~<ThisPath>~,<TestScan> );

		ImageCorrections( GetAndFreeWhenLastView,~<ThisPath>~ );	// NEED THIS TO RECEIVE CROP UPDATES
	}

	if ( !<Previewing> ) { LastPath = ~<ThisPath>~; }

	if ( !ControlInfo( GetNumeric,PreviewScan ) && !<TestScan> )
	{
		dlg( SetStrings,Progress,~100~,LastScanTime,~<TotalTime>~,ScanCount,DlgData(GetNumeric,ScanCount) + 1 );
		if ( <LogActivity> )
		{
			dlg( SetStatus,0,~Scan completed in <TotalTime> seconds~ );
		}
		else
		{
			dlg( SetStatus,0,~Scan completed~ );
		}
		//dlg( SetStatus,0,~Scanned <ThisPath>. Light=<LightTime> Fetch=<FetchTime> Flush=<FlushTime> Total=<TotalTime>~ );

		if ( !DlgData( GetNumeric,ScanFromDatabase ) )
		{
			Actions = ACTION Doc ( ImagesDoc "AddImageToList( ~<SavedOrderID>~,~<SavedRoll>~,~<SavedFrame>~,~<SavedPath>~,0 );" );
			QueueContentsAfter( Actions,1000 );
		}
		else
		{
			Actions = ACTION Doc ( ImagesDoc "UpdateImageInList( ~<SavedOrderID>~,~<SavedRoll>~,~<SavedFrame>~,~<SavedPath>~,0 );" );
			QueueContentsAfter( Actions,1000 );
		}

		Log( Session,~Image <LastPath> (<$con.ControlInfo[LastScanWidth]>x<$con.ControlInfo[LastScanHeight]>x<$con.ControlInfo[Depth]>)  On Disk. Light=<LightTime> Fetch=<FetchTime> Flush=<FlushTime> Total=<TotalTime>~ );
	}

	if ( !DlgData(GetNumeric,AutoScan) )
	{
		EnableScanningControls(TRUE);
		if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
		{
			SetTransportControlsStopped();
		}
	}

	if ( <TestScan> )
	{
		LastScanIsTestScan = TRUE;
		dlg( EnableControls,TRUE,AdjustScanAreaButton );
	}
	else
	{
		LastScanIsTestScan = FALSE;
		dlg( EnableControls,FALSE,AdjustScanAreaButton );
	}
}



VOID SizzleOpenScannedImage( &ControlInfo,LastPath,Path,TestScan )
{
	LastScanDirection = 0;
	if ( Defined( LastPosition ) )
	{
		LastScanDirection = <LastPosition>;
	}

	// Display the image if (display and not autoscan) or (display,autoscan,and Last direction != 0)
	DisplayTheImage = FALSE;
	if ( ( DlgData( GetNumeric,DisplayLastImage ) && !DlgData(GetNumeric,AutoScan) ) ||
		 ( DlgData( GetNumeric,DisplayLastImage ) && DlgData(GetNumeric,AutoScan) && <LastScanDirection> != 0 ) )
	{
		DisplayTheImage = TRUE;
	}
	else
	{
		dlg( SetString,~0~,DisplayLastImage );
	}

	if ( <DisplayTheImage> || <TestScan> )
	{
		Document( Doc );
		if ( Doc( FindByPath,~<LastPath>~ ) )
		{
			LastImageDocument = Doc( ReplaceImage,~<Path>~,NULL,NULL );
		}
		else
		{
			LastImageDocument = Open( Image,~<Path>~ );
		}
	}
}


VOID EnableScanningControls( value )
{
	if ( <IgnoreControlCommands> ) { return; }

	if ( <CurrentControlsState> != <value> )
	{
		dlg( EnableAllControls,<value>,<value> );
		CurrentControlsState = <value>;
	}

	if ( <KeepScanList> && <value> )
	{
		KeepScanList = FALSE;
	}

	GetFilmDriveVendor();
	if (FunctionDefined( ~<FDVendor>_SetupScanningControls~ ))
	{
		<FDVendor>_SetupScanningControls( <value> );
	}

	if ( <Previewing> && !<value> )
	{
		dlg( EnableControls,TRUE,ScanButton,PrevScanButton,NextScanButton,FrameField,RollField );
		if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
		{
			dlg( EnableControls,TRUE,XSliderIFactorField,XSliderIFactorStaticText,IgnoreXAdjustmentsCheckBox );
		}
	}
	else if ( DlgData( GetNumeric,AutoScan ) )
	{
		dlg( EnableControls,TRUE,AutoScanCheckBox,DisplayLastCheckBox );
		dlg( EnableControls,FALSE,ScanButton );
	}
	else
	{
		dlg( EnableControls,<value>,AutoScanCheckBox,DisplayLastCheckBox,ScanButton );
	}

	if ( <AutoScanDeselectPending> && ( <CurrentControlsState> == TRUE ) )
	{
		AutoScanDeselectPending = FALSE;
	}

	if ( DlgData(GetNumeric,FilmDriveEnabled) )
	{
		dlg( EnableControls,FALSE,VendorSetupComboBox );
	}
	else
	{
		dlg( EnableControls,<value>,VendorSetupComboBox );
	}

	EnableSequentialPunches( <value> );
	dlg( EnableControls,TRUE,SeeScannedImagesButton );
}

VOID EnableSequentialPunches( enableFlag )
{
	if ( <enableFlag> && DlgData( GetNumeric,FilmDriveEnabled ) && !dlgData(GetNumeric,ScanFromDatabase) )
	{
		dlg( EnableControls,TRUE,SequentialPunchesCheckBox );
	}
	else
	{
		dlg( EnableControls,FALSE,SequentialPunchesCheckBox );
	}
}

VOID FocusComplete()
{
	dlg( SetStatus,0,~Focus Complete~ );
	FocusNeeded = FALSE;
	if ( !IsNull( ~<FinishScanCommand>~ ) )
	{
		<FinishScanCommand> ;
		return;
	}
	EnableScanningControls(TRUE);
	if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
	{
		SetTransportControlsStopped();
	}
}


VOID ImageFetchComplete( AddrOfFlushControl )
{
	SizzleImageFetchComplete( ~<AddrOfFlushControl>~ );
}


VOID SizzleImageFetchComplete( ControlInfo )
{
	if ( !IsNULL( ~<ControlInfo>~ ) )
	{
		if ( GenCon( tempControlInfo,Is,~<ControlInfo>~,Temporary ) )	// THA - Added Temporary
		{
			ScanTime = (tempControlInfo( GetNumeric,FetchCompleteTime ) - tempControlInfo( GetNumeric,ScanStartTime )) / 1000;
			LogActivity = tempControlInfo( GetNumeric, LogActivity );
			if ( <LogActivity> )
			{
				dlg( SetStatus,0,~Image Scanned After <ScanTime> Seconds~ );
			}
			else
			{
				dlg( SetStatus,0,~Image Scan Completed~ );
			}
			dlg( SetString,~50~,Progress,0 );
		}
	}

	if ( DlgData(GetNumeric,AutoScan) )
	{
		if ( !ScanAgain() )
		{
			EnableScanningControls(TRUE);
			if ( Defined( FilmDrive ) && DlgData(GetNumeric,FilmDriveEnabled) )
			{
				SetTransportControlsStopped();
			}
		}
	}
}


VOID OnAutoScan()
{
	dlg( GetInput );

	if ( DlgData(GetNumeric,AutoScan) )
	{
		dlg( SetStrings,DisableFilmDrive,0 );
		dlg( EnableControls,FALSE,ScanButton );
	}
	else
	{
		dlg( EnableControls,<CurrentControlsState>,ScanButton );
	}
}



NUMERIC OnPreviewCheckBox()
{
	CloseWindowsOfDocument( ~<PreviewPath>~ );
	CloseWindowsOfDocument( ~<LastPath>~ );

	Previewing = TRUE;

	return Queue( ~StartPreview()~ );
}

Previewing = FALSE;

NUMERIC StartPreview()
{
	PreviewCount = 0;

	if ( <ScanAfterPreview> )
	{
		Previewing = ScanAfterPreview = FALSE;
		PreviewCount = 0;
		CloseWindowsOfDocument( ~<PreviewPath>~ );
		return Queue( ~OnScanButton( <LastPosition>,FALSE )~ );
	}

	dlg( GetInput );

	if ( !FindScanner(FALSE) )	{ return FALSE; }

	if ( !<Previewing> )
	{
		PreviewCount = 0;
		Previewing = TRUE;
		ScanAfterPreview = FALSE;
		
		return TRUE;
	}

	EnableScanningControls( FALSE );

	// Special case for the slider bar
	if ( Defined( FilmDrive ) )
	{
		if ( IsDriveTensioned( TRUE ) )
		{
			dlg( EnableControls,TRUE,XPositionSlider,
			XPositionSliderIMinusButton,XPositionSliderMinusButton,
			XPositionSliderPlusButton,XPositionSliderIPlusButton);
		}
	}

	dlg( GetInput,GetStrings,Volume,Volume,Order,Order,Roll,Roll,Frame,Frame,SaveFileType,SaveFileType );

	if ( ~<Volume>~ == ~~ || ~<Order>~ == ~~ || ~<Roll>~ == ~~ || ~<Frame>~ == ~~ )
	{
		return Warning( Translate( ~You must enter values for Path, Order, Roll, and Frame~ ) );
	}

	if ( IsNumeric( ~<Frame>~ ) )
	{
		len = strlen(~<Frame>~);
		if ( <len> > <MAX_NUMERIC_LENGTH> )
		{
			Warning( ~The maximum numeric value for the frame number has been exceeded.\nPlease update the number manually.~ );
		}
		else
		{
			if ( <Frame> < 0 )
				{ Frame = 0; }

			Frame = FormattedFrame( Format( ~<Frame>~,~%0<len>ld~ ) );
			CurrentScanFrame = ~<Frame>~;
			dlg( SetString,~<Frame>~,Frame,0 );
		}
	}

	if ( IsNumeric( ~<Roll>~ ) )
	{
		dlg( SetString,~<Roll>~ ,Roll,0 );
	}

	if ( !CalibrationOK( TRUE ) )		
	{
		EnableScanningControls(TRUE);
		Previewing = FALSE;
		return ( FALSE );	
	}

	SizzleControl( SetValues,Focus,0,PATH,~<PreviewPath>~,ORDER,~<Order>~,ROLL,~<Roll>~,FRAME,~<Frame>~,PreviewScan,1 );
	Files( Delete,~<PreviewPath>~ );

	SetupTheScanner( <Previewing>,FALSE,FALSE );
	ScanOne( FALSE,TRUE,FALSE,FALSE );
	Sleep( 500 );
	return TRUE;
}

PreviewCount = 0;

VOID PreviewComplete()
{
	Start = Ticks();

	if ( <Previewing> && ( <ScanAfterPreview> == FALSE ) )
	{
		if ( <PreviewCount> < 1 )	// First time?
		{
			ImageData( SetValues,ImageBuffer,Scanner( GetImageBuffer ) );
			ImageData( SetValues,ImageWidth,Scanner( GetImageBufferWidth ) );
			ImageData( SetValues,ImageHeight,Scanner( GetImageBufferHeight ) );
			ImageData( SetValues,ImageDepth,Scanner( GetImageBufferDepth ) );
			// TBD SizzleControl( GetValue,ImageBufferLayout,Layout );
			ImageData( SetValues,ImageLayout,BAND_INTERLEAVED );
			LastImageDocument = Open( Image,~<PreviewPath>~,NULL,ImageData );
			Scanner( PreviewScanAsync,SizzleControl );
		}
		else
		{
			Document( PreviewDoc );
			if ( PreviewDoc( FindByPath,~<PreviewPath>~ ) )
			{
				ImageData( SetValues,ImageBuffer,Scanner( GetImageBuffer ) );
				ImageData( SetValues,ImageWidth,Scanner( GetImageBufferWidth ) );
				ImageData( SetValues,ImageHeight,Scanner( GetImageBufferHeight ) );
				ImageData( SetValues,ImageDepth,Scanner( GetImageBufferDepth ) );
				ImageData( SetValues,ImageLayout,BAND_INTERLEAVED );
				LastImageDocument = PreviewDoc( ReplaceImage,~<PreviewPath>~,NULL,ImageData );
				Scanner( PreviewScanAsync,SizzleControl );
			}
			else
			{
				Previewing = FALSE;
				PreviewCount = 0;
				EnableScanningControls( TRUE );
			}
		}
	}

	if ( <ScanAfterPreview> )
	{
		ScanAfterPreview = FALSE;
		PreviewCount = 0;
		Previewing = FALSE;
		EnableScanningControls( TRUE );
		CloseWindowsOfDocument( ~<PreviewPath>~ );
		Queue( ~OnScanButton( <LastPosition>,FALSE )~ );
	}
	else
	{
		delta = Ticks() - <Start>;
		dlg( SetStatus,0,~Preview <++PreviewCount>   (<delta>)~ );
	}
}


VOID SetupScannerParms()
{
	dlg( GetInput );

	WhichScanner = ~<$con.dlgData[ScannerType]>~;

	dlgData( SetValues,NULLProfile,~<$App.Directory>\Scan\<WhichScanner>\NULL.pf~,
		DRGBProfile,~<$App.Directory>\Scan\<WhichScanner>\SizzleEx.pf~,
		ReverseDRGBProfile,~~,
		SlopeLutFile,~<$App.Directory>\Scan\<WhichScanner>\SlopeLut.txt~ );

	CalibrationDirectory = ~<$App.Directory>\Scan\<WhichScanner>\Calibration~;

	Global(CalibrationDirectory);

	Directory( Create,~<CalibrationDirectory>~ );
}


VOID  ShowScannedImagesWindow()
{
	dlg( GetInput,GetStrings,Order,Order,Roll,Roll );

	if ( ~<Order>~ == ~~ )
	{ 
		Warning( Translate( ~You must select an order~ ) );
		return;
	}

	if ( ~<Roll>~ == ~~ )
	{ 
		Warning( Translate( ~You must select a roll~ ) );
		return;
	}

	Query = STR ( SELECT * From Images WHERE OrderID = '<Order>' And Roll = '<Roll>' Order By OrderID,Roll,Frame );

	Actions = ACTION Doc ( ImagesDoc OpenOnce ImagesDoc "Init( ~<Order>~,1,~<Query>~,0 );" );

	PerformActions( Actions );
}	


NUMERIC SetMagnification( MoveIt )
{
	Mag = ~<$Con.DlgData[Format]>~;
	OpticalZoom = ~<$Con.DlgData[OpticalZoom]>~;

	if ( FindScanner(FALSE) )
	{

		SetupTheScanner(FALSE,FALSE,FALSE);

		if ( !SetScanWindow() )
		{
			return FALSE;
		}

		Index = MagNames( IndexOf,~<Mag>~ );
		Magnification = Magnifications( ValueOf,$Index );
		Offset = atof( ApertureOfs( ValueOf,$Index ) );
		RealMag = $Magnification * ((100 + <OpticalZoom>) / 100);
		Scanner( SetMagnification,$RealMag,$Offset,$MoveIt );

		return TRUE;
	}

	return FALSE;
}


NUMERIC AskIfFilmDriveDetensioned( msg )
{
	dlg( GetInput );
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~None~)
	{
		return TRUE;
	}

	theMsg = ~The film drive must be detensioned and the film unloaded before calibration.\n\nWould you like to detension the film drive now?~;
	if ( Defined( msg ) )
	{
		if ( ~<msg>~ != ~~ )
		{
			theMsg = ~<msg>~;
		}
	}

	DriveDetensioned = FALSE;
	DoneAsking = FALSE;

	while ( !<DoneAsking> )
	{
		if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) && IsDriveTensioned( TRUE ) )
		{
			DriveDetensioned = FALSE;
			DoneAsking = FALSE;
		}
		else
		{
			DriveDetensioned = TRUE;
			DoneAsking = TRUE;
		}

		if ( !<DriveDetensioned> )
		{
			if ( MessageBox( ~<theMsg>~,YESNO ) == YES )
			{
				dlg( SetStrings,Tension,~~ );
				OnTensionChange( TRUE );
				continue; // Check to see if the film drive is detensioned, ask again if not
			}
			else
			{
				DoneAsking = TRUE;
			}
		}
	}
	return <DriveDetensioned>;
}


NUMERIC CheckIfFilmDriveTensionOK()
{
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	if ( Defined( FilmDrive ) && <FilmDriveEnabled> && IsDriveTensioned( TRUE ) )
	{
		return TRUE;
	}

	if ( !Defined( FilmDrive ) || !<FilmDriveEnabled> )
	{
		return TRUE;
	}

	if ( Defined( FilmDrive ) && <FilmDriveEnabled> && !IsDriveTensioned( TRUE ) )
	{
		Msg = Translate( ~The film drive is enabled.  Does the film need to be tensioned?\n\n(Yes, for long roll film.  No, for cut negative film.)~ );
		GenCon( MbInfo,New,DDCustomMessageBox );
		MbInfo( SetValues,Title,Translate(~Focusing~),Message,~<Msg>~,
					Button1,Translate(~&Yes~),Button2,Translate(~&No~),Button3,Translate(~&Cancel~),
					SetWindowPos,1,X,-1,Y,-1,Width,325,Height,215 ) ;
		result = CustomMessageBox(MbInfo);
		button = MbInfo(GetNumeric, ButtonPressed);
		if ( <result> == 2 || <button> == 3 )	// result = 2 when X in dialog is pressed
		{
				return FALSE;
		}
		else if ( <button> == 1 )
		{
			TensionDrive = TRUE;
		}
	}

	if ( <button> == 2 )
	{
		return TRUE;
	}

	dlg( SetStrings,Tension,~1~ );
	return OnTensionChange( TRUE );
}


NUMERIC AskToLoadFilmAndTensionDrive( msg, checkForJogSetup )
{
	dlg( GetInput );
	GetFilmDriveVendor();

	if ( ~<FDVendor>~ == ~None~ )
	{
		return TRUE;
	}

	theMsg = ~The film must be loaded into the film transport and the film transport tensioned.\n\nIs the film loaded?~;
	if ( Defined( msg ) )
	{
		if ( ~<msg>~ != ~~ )
		{
			theMsg = ~<msg>~;
		}
	}

	JogSetupCommand = ~~;
	if ( Defined( checkForJogSetup ) )
	{
		if ( <checkForJogSetup> )
		{
			if ( FunctionDefined( ~<FDVendor>_JogFilmSetup~ ) )
			{
				JogSetupCommand = STR ( <FDVendor>_JogFilmSetup() );
			}
		}
	}


	DriveTensioned = FALSE;
	DoneAsking = FALSE;

	while ( !<DoneAsking> )
	{
		if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) && IsDriveTensioned( TRUE ) )
		{
			DriveTensioned = TRUE;
			DoneAsking = TRUE;
		}
		else
		{
			DriveTensioned = FALSE;
			DoneAsking = FALSE;
		}

		if ( !<DriveTensioned> )
		{
			if ( MessageBox( ~<theMsg>~,YESNO ) == YES )
			{
				if ( DefinedAndNotNULL( JogSetupCommand ) )
				{
					// Error from this should be caught in following tension command
					results = <JogSetupCommand> ;
					if ( !<results> ) { return FALSE; }
				}
				dlg( SetStrings,Tension,~1~ );
				OnTensionChange( TRUE );
				continue; // Check to see if the film drive is detensioned, ask again if not
			}
			else
			{
				DoneAsking = TRUE;
			}
		}
	}
	return <DriveTensioned>;
}


NUMERIC AskToLoadFilm( msg )
{
	dlg( GetInput );
	GetFilmDriveVendor();

	theMsg = ~The film must be loaded into the scanner.\n\nIs the film loaded?~;
	if ( Defined( msg ) )
	{
		if ( ~<msg>~ != ~~ )
		{
			theMsg = ~The film must be loaded into the scanner.\n\n<msg>~;
		}
	}

	if ( MessageBox( ~<theMsg>~,YESNO ) == YES )
	{
		return TRUE;
	}
	return FALSE;
}


VOID OnSetMagButton()
{
	if ( !FindScanner(FALSE) )	{ return; }
	
	dlg( GetInput );

	if ( !OnReloadButton( TRUE ) )
	{
		return;
	}

	OnSetSizzleMagButton();
}



VOID OnSetSizzleMagButton()
{
	if (!SetMagnification( FALSE ))
	{
		return;
	}

	if ( CalibrationOK( TRUE ) )
	{
		dlg( SetStatus,0,~Mag Set.  Calibration is not needed~ );
		return;
	}

	if ( MessageBox( ~You will have to recalibrate.  Are you sure you want to change the magnification?~,YESNO ) != YES )
		{ return; }

	if ( !AskIfFilmDriveDetensioned() )
	{
		Warning( Translate( ~The film drive is not detensioned.\n\nCalibration aborted.~ ) );
		FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return;
	}

	if ( MessageBox( ~Insert the calibration gate. Are you ready to Calibrate?~,YESNO ) == YES )
	{
		EnableScanningControls( FALSE );
		SetMagnification( TRUE );
		SecondsWaiting = 0;
		Action = STR ( StillMagMoving(); );
		QueueContentsAfter( Action,1000 );
		return;
	}
	Warning( Translate( ~The calibration gate is not loaded.\n\nCalibration aborted.~ ) );
	FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
	EnableScanningControls( TRUE );
	if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }

}


VOID StillMagMoving()
{
	if ( !Defined( dlg ) )
		{ return; }

	if ( Scanner( MagChanging ) || Scanner( Calibrating ) )
	{
		dlg( SetStatus,0,~Still Changing Magnification or Calibrating (<++SecondsWaiting> Secs)~ );
		PercentComplete = (<SecondsWaiting> / 130) * 100;
		dlg( SetString,~<SecondsWaiting>~,Progress );
		Action = STR ( StillMagMoving(); );
		QueueContentsAfter( Action,1000 );
		return;
	}

	dlg( SetString,~100~,Progress,0 );
	dlg( SetStatus,0,~Magnification Change Complete (<SecondsWaiting> Secs)~ );
	EnableScanningControls(TRUE);
}


NUMERIC OnSizzleCalibrateButton( updateFrame,ClearPunchNumber )	// COMES HERE WHEN THE CALIBRATE BUTTON IS PUSHED
{
	if ( DefinedAndNotNULL( ClearPunchNumber ) )
	{
		if ( <ClearPunchNumber> )
		{
			if ( DlgData( GetNumeric,FilmDriveEnabled ) && !DlgData( GetNumeric,ScanFromDataBase ) )
			{
				SetCurrentPunchNumber( ~~ );
			}
		}
	}

	if ( <updateFrame> )
	{
		UpdateFrameField();
	}

	if ( !AskIfFilmDriveDetensioned() )
	{
		FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
		Warning( Translate( ~The film drive is not detensioned.\n\nCalibration aborted.~ ) );
		EnableScanningControls( TRUE );
		if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
		return FALSE;
	}

	if ( MessageBox( Translate(~Insert the calibration gate. Are you ready to Calibrate?~),YESNO ) == YES )
	{ 
		dlg( GetInput );

		if ( !FindScanner(TRUE) )	{ return FALSE; }		// FORGET THE CURRENT CALIBRATION

		if ( SetCalibrationPath(FALSE,FALSE) )
		{
			DesiredMag = ~<$Con.DlgData[Format]>~;
			EnableScanningControls( FALSE );
			SetMagnification( TRUE );
			SecondsWaiting = 0;
			Action = STR ( StillCalibrating(); );
			QueueContentsAfter( Action,1000 );
		}
		return TRUE;
	}
	return FALSE;
}

VOID StillCalibrating( )		// KEEP THE USER UPDATED WHILE THE CALIBRATION IS IN PROCESS
{
	if ( Defined( dlg ) )
	{
		if (  Scanner( MagChanging ) || Scanner( Calibrating ) )
		{
			EnableScanningControls( FALSE );

			dlg( SetStatus,0,~Still Calibrating (<++SecondsWaiting> Secs)~ );
			dlg( SetString,~<SecondsWaiting>~,Progress );

			PercentComplete = (<SecondsWaiting> / 130) * 100;
			dlg( SetString,~<SecondsWaiting>~,Progress );

			Action = STR ( StillCalibrating(); );
			QueueContentsAfter( Action,1000 );
		}
		else
		{
			dlg( SetString,~100~,Progress,0 );
			dlg( SetStatus,0,~Calibration Complete (<SecondsWaiting> Secs)~ );

			FocusNeeded = TRUE;  // Always note focus needed when calibration is attempted

			SetMagnification( FALSE );

			if ( !Scanner( NeedCalibration ) )
			{
				dlg( GetInput );
				UpdateScanSize(FALSE,FALSE);

				GetFilmDriveVendor();
				FilmDriveEnabled = DlgData( GetNumeric,FilmDriveEnabled );
				if ( <AutoScanAfterCal> )
				{
					AutoScanAfterCal = FALSE;
					FrameInserted = FALSE;
					Tensioned = IsDriveTensioned( FALSE );

					if ( Defined( FilmDrive ) && <FilmDriveEnabled> && !<Tensioned> )
					{
						if ( !AskToLoadFilmAndTensionDrive(~~, TRUE) )
						{
							ClearCalibrationHandlers();
							dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
							EnableScanningControls( TRUE );
							if ( Defined( FilmDrive ) && <FilmDriveEnabled> ) { SetTransportControlsStopped(); }
							Warning( Translate( ~Scanning cancelled.~ ) );
							if ( DlgData( GetNumeric,ScanFromDatabase ) )
							{	ResetNextFrameAfterError();	}
							return;
						}
					}

					Tensioned = IsDriveTensioned( FALSE );
					if ( Defined( FilmDrive ) && <FilmDriveEnabled> && <Tensioned> && ~<FDVendor>~ != ~Halse~ )
					{
					    DlgData( Get,GotoPunchNumber,GotoPunch );
						OnJogFilmComplete = ~<OnCalibrationComplete>~;

						EnableScanningControls( FALSE );
						SetTransportControlsRunning();
						IgnoreControlCommands = TRUE;
						dlg( SetStatus,0,Translate( ~Jogging film to nearest punch...~ ) );
						StartJogFilmCommand();
						return;
					}
					<OnCalibrationComplete>;
				}
				else
				{
					EnableScanningControls(TRUE);
					if (  !Defined( FilmDrive ) || !<FilmDriveEnabled> )
					{
						OnFocusButton( Translate(~It is recommended that you do a focus after\ncalibrating the scanner.\n\nDo you want to focus the scanner now?  If so, insert the film and select Yes when ready.~));
					}
					else
					{
						Msg = ~It is recommended that you do a focus after\ncalibrating the scanner.\n\nThe film must be loaded into the film transport and the film transport tensioned.\n\nIs the film loaded?~;
						if ( !AskToLoadFilmAndTensionDrive(~<Msg>~,FALSE) )
						{
							dlg( SetStatus,0,Translate( ~Focus cancelled.~ ) );
							EnableScanningControls( TRUE );
							SetTransportControlsStopped();
							Warning( Translate( ~Focus cancelled.~ ) );
							if ( DlgData( GetNumeric,ScanFromDatabase ) )
							{	ResetNextFrameAfterError();	}
							return;
						}
						OnJogFilmComplete = STR ( DoFocus(); );
						StartJogFilmCommand();
						return;
					}
				}
			}
			else
			{
				AutoScanAfterCal = FALSE;
				ClearCalibrationHandlers();
				dlg( SetStatus,0,~Calibration failed~ );

				Warning( Translate( ~Scanner calibration failed.~ ) );

				UpdateScanSize(FALSE,FALSE);
				EnableScanningControls(TRUE);
				if ( DlgData( GetNumeric,ScanFromDatabase ) )
				{	ResetNextFrameAfterError();	}
			}
		}
	}
}



VOID JogFilmComplete( CommandStatus )
{
	IgnoreControlCommands = FALSE;
	ClearJogFilmCommand();
	if ( !<CommandStatus> )
	{
		dlg( SetStatus,0,Translate( ~Scanning cancelled.~ ) );
		EnableScanningControls( TRUE );
		SetTransportControlsStopped();
		Warning( Translate( ~Unable to jog film to nearest punch.  Scanning cancelled.~ ) );
		if ( DlgData( GetNumeric,ScanFromDatabase ) )
		{	ResetNextFrameAfterError();	}
		return;
	}
	OnFilmDriveOperationComplete = STR ( <OnCalibrationComplete> );

    DlgData( Get,GotoPunchNumber,GotoPunch );
	if ( ~<GotoPunch>~ != ~0~ && ~<GotoPunch>~ != ~~ )
	{
		ClearJogFilmHandlers();
		LastPunchNumber = <MaxPunchNumber>;
		FirstPunchNumber = <MinPunchNumber>;
		if ( !OnGoToButton( TRUE,FALSE ) )
		{
			ClearFilmDriveOperationHandlers();
			EnableScanningControls( TRUE );
			SetTransportControlsStopped();
			return; // REM OnGoToButton will display error message
		}
	}
	else if ( !IsNull( ~<OnJogFilmComplete>~ ) )
	{
		<OnJogFilmComplete>;
	}

	return;
}


VOID OnTestScan()
{
	dlg( SetStrings,XPOS,50,YPOS,50,ScanWidth,100,ScanLength,100 );
	dlg( SetStrings,AutoScan,0 );
	
	OnScanButton( 0,TRUE );
}


NUMERIC OnAdjustScanArea( calledFromRefresh )
{
	if ( <calledFromRefresh> )
	{
		if ( ImageCorrections( GetCrop,~<LastPath>~,cX,cY,cW,cL ) )
		{
			if ( !<LastScanIsTestScan> )
			{
				return Warning( Translate( ~The scan area can only be set on a test scan.~ ) );
			}

			ScanX = ntoa( Pin( <cX>,2,98 ),~%f~ );
			ScanY = ntoa( Pin( <cY>,2,98 ),~%f~ );
			ScanW = ntoa( Pin( <cW>,0,100 ),~%f~ );
			ScanL = ntoa( Pin( <cL>,0,100 ),~%f~ );

			DlgData( SetValues,XPOS,<ScanX>,YPOS,<ScanY>,ScanWidth,<ScanW>,ScanLength,<ScanL> );
			dlg( Update );

			UpdateScanSize(FALSE,FALSE);
		}
	}
	else
	{
		dlg( GetInput );

		DlgData( GetValues,CropX,cX,CropY,cY,CropWidth,cW,CropLength,cL );
		ScanX = ntoa( Pin( <cX>,2,98 ),~%f~ );
		ScanY = ntoa( Pin( <cY>,2,98 ),~%f~ );
		ScanW = ntoa( Pin( <cW>,0,100 ),~%f~ );
		ScanL = ntoa( Pin( <cL>,0,100 ),~%f~ );

		DlgData( SetValues,XPOS,<ScanX>,YPOS,<ScanY>,ScanWidth,<ScanW>,ScanLength,<ScanL> );
		DlgData( SetValues,CropX,50,CropY,50,CropWidth,100,CropLength,100 );
		dlg( Update );

		UpdateScanSize(FALSE,FALSE);
	}

	return TRUE ;
}


VOID OnAllScanArea()
{
	DlgData( SetValues,XPOS,50,YPOS,50,ScanWidth,100,ScanLength,100 );
	dlg( Update );

	UpdateScanSize(FALSE,FALSE);
}


NUMERIC UpdateCrop( checkFormatChange )
{
	dlg( GetInput );

	CropName = ~<$con.DlgData[CropName]>~;

	if ( ~<CropName>~ != ~~ )
	{
		return SetCropWhere( ~Name = '<CropName>'~ ,<checkFormatChange> );
	}
	else
	{
		dlg( SetStatus,0,Translate( ~No crop settings were loaded~ ) );
	}

	return TRUE;
}


NUMERIC SetCropWhere( Criteria,checkFormatChange )
{
	Query = ~Select * from Crops Where <Criteria>~; 

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Could not find Crop Where <Criteria>. <theErr>~ ) );
	}

	if ( !List( GetFirst,Crop ) )
		{ return Warning( Translate( ~Could not find crop Where <Criteria>~ ) ); }

	// NEED TO adjust for yoffset here
	// Expression y = <y> + ( yoffset * <yOffsetPPI> ) / 1000

	dlg( SetString,~<$pcon.Crop[CropX]>~,CropX );
	dlg( SetString,~<$pcon.Crop[CropY]>~,CropY );
	dlg( SetString,~<$pcon.Crop[CropWidth]>~,CropWidth );
	dlg( SetString,~<$pcon.Crop[CropLength]>~,CropLength );

	dlg( SetString,~<$pcon.Crop[Format]>~,Format );
	dlg( SetString,~<$pcon.Crop[OpticalZoom]>~,OpticalZoom );

	dlg( SetString,~<$pcon.Crop[ScanX]>~,XPOS );
	dlg( SetString,~<$pcon.Crop[ScanY]>~,YPOS );
	dlg( SetString,~<$pcon.Crop[ScanWidth]>~,ScanWidth );
	dlg( SetString,~<$pcon.Crop[ScanLength]>~,ScanLength );

	dlg( SetString,~<$pcon.Crop[Rotation]>~,ScanRotation );

	statusText = ~Crop, format, zoom and scan area were updated~;
	dlg( SetStatus,0,~<statusText>~ );
	dlg( Update );

	return TRUE;
}


VOID OnLogActivity()
{
	dlg( GetInput );
	DlgData( GetValues,LogActivity,LogActivity );
	GetFilmDriveVendor();

	if ( FunctionDefined( <FDVendor>_SetLogSession ) )
	{
		<FDVendor>_SetLogSession( <LogActivity> );
	}

	if ( <LogActivity> )
	{
		DlgData( SetValues,TraceCalls,<LogActivity> );
		SetTraceCallsFlag();
	}
}


VOID RecursiveDirectoryDelete( path,search,&count )
{
	count = 0;

	MoreFiles = findfile( aDirectoryEntry,Find,~<path>\<search>~ );

	while ( $Morefiles )
	{
		Morefiles = aDirectoryEntry( Next );

		aDirectoryEntry( Get,Path,aPath );
			
		if ( aDirectoryEntry( Dots ) )
			continue;
			
		if ( aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		{	
			RecursiveDirectoryDelete( ~<aPath>~,~<search>~,count );
			
			Directory( Remove,~<aPath>~ );
			continue;
		}

		if ( !Files( Delete,~<aPath>~ ) )
		{
			GetLastError( ErrorString,msg );
			MessageBox( ~<msg>~ );
			return;
		}
		++count;
	}
}


VOID UpdateScanSetupsList(wantSelection)
{
	Query = ~Select Name From ScanSetups Where ScannerType = '<$con.DlgData[ScannerType]>' Order By Name~;

	if ( !PGenConList( ScanSetupsList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ScanSetupsList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the ScanSetups table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ScanSetupsList( MakeStringList,ScanSetups,Name );

	dlg( SetControlFromStringList,ScanSetupsComboBox,ScanSetups,<wantSelection> ? ~Selection~ : ~NoSelection~ );

	//dlg( SelectString,ScanSetupsComboBox,~<$con.dlgData[ScanSetup]>~ );
}


NUMERIC UpdateFilmTypesList()
{
	StringList( List,New,NoDuplicateValues,InAlphaOrder );

	dlg( GetInput );

	WhichScanner = ~<$con.DlgData[ScannerType]>~;

	if ( ~<WhichScanner>~ == ~~ ) 
	{ 
		return Warning( Translate( ~No scanner has been selected~ ) );
	}

	MoreFiles = findfile( aDirectoryEntry,Find,~<$App.ShareDirectory>\Scan\<WhichScanner>\FilmTerms\*.*~ );

	while ( $Morefiles )
	{
		Morefiles = aDirectoryEntry( Next );
				
		if ( !aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		{
			aDirectoryEntry( Get,Path,aPath );
			List( AddString,~<$Str.$aPath.FileName.WithoutExt>~ );
		}
	}

	dlg( SetControlFromStringList,FilmTypesComboBox,List,Selection );
	dlg( SelectString,FilmTypesComboBox,~<$con.DlgData[FilmType]>~ );

	return TRUE;
}


NUMERIC CheckFilmType( )
{
	FilmType = ~<$con.DlgData[FilmType]>~;
	Result = 0.0;
	if ( (~<FilmType>~ != ~<LastFilmType>~) )
	{
		LastFilmType = ~<FilmType>~;
	}
	else
	{
		dlg( SetStatus,0,~~ );
	}

	return TRUE;
}


NUMERIC CloseDialog()
{
	dlg( GetInput );

	StillScanning = FALSE;

	if ( Defined( Scanner ) )
	{
		if ( Scanner( MagChanging ) )
		{
			Warning( Translate( ~Can't quit now ... Scanner is busy changing mag~ ) );
			dlg( SetDlgHandleActionsFlag, TRUE ) ;
			return FALSE;
		}
		if ( Scanner( Calibrating ) )
		{
			Warning( Translate( ~Can't quit now ... Scanner is busy calibrating~ ) );
			dlg( SetDlgHandleActionsFlag, TRUE ) ;
			return FALSE;
		}	
		
		StillScanning = Scanner( Scanning );	
	}

	if ( <Previewing> && <StillScanning> )
	{
		Warning( Translate( ~Stop previewing first.~ ) );
		dlg( SetDlgHandleActionsFlag, TRUE ) ;
		return FALSE;
	}

	if ( <StillScanning> )
	{
		Warning( Translate( ~Sorry, can't quit while the scanner is busy~ ) );
		dlg( SetDlgHandleActionsFlag, TRUE ) ;
		return FALSE;
	}

	if ( Defined( FilmDrive ) )
	{
		if (<gFilmDriveBusy> )
		{
			Warning( Translate( ~Sorry, can't quit while the film drive is moving film~ ) );
			dlg( SetDlgHandleActionsFlag, TRUE ) ;
			return FALSE;
		}
		return CloseFilmDrive( FALSE,TRUE );
	}
	else
	{
		ForgetGlobal( Scanner );

		ImageCorrections( Free,~<LastPath>~ );
		ForgetGlobal( ImageData );

		Sleep(300);
		dlg( END );
		Exit();
	}
	return FALSE;
}


NUMERIC CheckForSaveInProgress()
{
	if ( Scanner( SaveInProgress ) )
	{
		Msg = Translate( ~A scanned image is currently being saved.  Do you want to cancel the save operation?~ );

		if ( MessageBox( ~<Msg>~,YESNO ) == YES )
		{
			Scanner( CancelSave );
			dlg( SetStatus,1,Translate( ~~ ) );

			return FALSE;
		}
		else
		{
			return TRUE;
		}
	}
	else
	{
		return FALSE;
	}
}


NUMERIC ReOpen()
{
	dlg( SetWindowOrder,TopMost );	// NEEDS DEBUGGED
	return Warning( Translate( ~The Scanning Control is already active.~ ) );
}



NUMERIC UpdateRollsCombo(selectFirst)
{
	dlg( GetInput,GetStrings,OrderID,Order );

	ImagesQuery = ~Select Distinct Roll From Images Where OrderID = '<OrderID>'~;
	RollsQuery = ~Select Distinct Roll From Rolls Where OrderID = '<OrderID>'~;

	Query = ~<ImagesQuery> Union <RollsQuery> Order By Roll~;

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Failed to query the Rolls table.\n\n<Query>\n\n<theErr>~ ) ); 
	}

	List( MakeStringList,RollsList,Roll );
	
	if (<selectFirst>)
	{
		return dlg( SetControlFromStringList,RollField,RollsList,Selection );
	}
	else
	{
		return dlg( SetControlFromStringList,RollField,RollsList,NoSelection );
	}
}

NUMERIC UpdateFrameField()
{
	dlg( GetInput,GetStrings,Roll,Roll,Order,Order );

	if ( ~<Roll>~ != ~~ )
	{
		ScanFromDataBase = ~<$con.dlgData[ScanFromDataBase]>~;
		FilmDriveEnabled = ~<$con.dlgData[FilmDriveEnabled]>~;

		GetFilmDriveVendor();

		SortDirection = ( <FilmDriveEnabled> && ( <FilmDirection> == 1 ) ) ? ~DESC~ : ~~;
		SortOrder = ~OrderID,Roll,Frame <SortDirection>~;

		if ( <FilmDriveEnabled> && <ScanFromDataBase> )
		{
			SortOrder = ~Punch <SortDirection>~;
		}

		Query = ~Select Frame, ScanSetup, FilmType From Images Where OrderID = '<Order>' AND Roll = '<Roll>' AND (Scan = 1) Order By <SortOrder>~;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
		{ 
			List( GetErrorDescription,0,theErr );
			Warning( Translate( ~Failed to query the Images table.\n\n<Query>\n\n<theErr>~ ) ); 
			return;
		}

		if ( List( GetFirst,FrameRecord ) )
		{
			CurrentScanFrame = ~<$pcon.FrameRecord[Frame]>~;
			dlg( SetStrings,Frame,~<$pcon.FrameRecord[Frame]>~ );
			ImageScanSetup = ~<$pcon.FrameRecord[ScanSetup]>~;
			ImageFilmType = ~<$pcon.FrameRecord[FilmType]>~;
		}
	}
	
	return TRUE;
}


NUMERIC HandleOrderIDReturnKey()
{
	dlg( GetInput,GetStrings,OrderID,Order );

	if ( ~<OrderID>~ == ~~ )
	{
		return FALSE;
	}

	if ( !ADO( dBase,Connect,GetValuesFor,~Select ID From Orders where ID = '<OrderID>'~,OrderID ) )
	{
		if ( MessageBox( Translate(~Order <OrderID> does not exist.  Would you like to add it? ~ ),YESNO ) != YES )
		{
			return FALSE;
		}

		AddOrder();

		if ( MessageBox( Translate(~Order <OrderID> was added.  Would you like to edit it? ~ ),YESNO ) == YES )
		{
			Query = ~Select * From Orders Where ID = '<OrderID>'~;

			Actions = ACTIONS ( Doc( ~Orders~ OpenOnce OrdersDoc "Init( ~<OrderID>~,~<Query>~);" ) );
			PerformActions( Actions );
		}
	}
	return OnChangeOrderRollFrame( ~<ScannerModel>~,~<OrderID>~,~~,~~ );
}


VOID LockAutoDRGBAdjustments( DisableAutoDRGB )
{
	dlg( GetInput );
	
	//UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);

	if ( <DisableAutoDRGB> )
	{
		if ( !dlgData( GetNumeric,LockScannerOffsets ) ) //&& <UseAnalyzerDRGBValues> )
		{
			LastAutoDRGBAdjustments = dlgData( GetNumeric, AutoDRGBAdjustments );
			LastDensityNormalization = dlgData( GetNumeric, DensityNormalization );
		}
		dlg( SetStrings, AutoDRGBAdjustments, ~0~ );
		dlg( EnableControls,FALSE,AutoDRGBAdjustmentsCheckBox );

		dlg( SetStrings, DensityNormalization, ~0~ );
		dlg( EnableControls,FALSE,DenNormCheckBox );
	}
	else
	{
		if ( !dlgData( GetNumeric,LockScannerOffsets ) ) //&& <UseAnalyzerDRGBValues> )
		{
			dlg( EnableControls,TRUE,AutoDRGBAdjustmentsCheckBox );
			dlg( SetStrings, AutoDRGBAdjustments, ~<LastAutoDRGBAdjustments>~ );

			dlg( EnableControls,TRUE,DenNormCheckBox );
			dlg( SetStrings, DensityNormalization, ~<LastDensityNormalization>~ );
		}
	}
}


NUMERIC OnChangeOrderRollFrame( Model,OrderID,Roll,Frame )	// HANDLES MESSAGE FROM OTHER WINDOW TO USE A PARTICULAR ORDER		
{
	if ( !Defined( ScannerModel ) )
	{
		Init( ~<Model>~ );
	}

	ChangeOrderRollFrame( ~<OrderID>~,~<Roll>~,~<Frame>~,TRUE,FALSE,FALSE );
	ResyncScanList();

//	if ( DlgData(GetNumeric,ScanFromDataBase) )
//	{
		LoadSetup( FALSE );
//	}

	return TRUE;
}


NUMERIC ChangeOrderRollFrame( NewOrderID,NewRoll,NewFrame,UpdateFlag,AutoDRGBAdjustments,WarnDRGBError )	// HANDLES MESSAGE FROM OTHER WINDOW TO USE A PARTICULAR ORDER & ROLL		
{
	OrderID = ~<NewOrderID>~;
	Roll = ~<NewRoll>~;
	Frame = ~<NewFrame>~;

	if ( ~<Frame>~ == ~~ )
	{
		Frame = 1;
	}

	dlg( SetStrings,Order,~<OrderID>~,Roll,~<Roll>~,Frame,~<Frame>~ );

	if ( ~<LastOrderID>~ != ~<NewOrderID>~ )
	{
		Actions = ACTION Doc ( OrderNotifyDoc OpenOnce OrderNotifyDoc "Init( ~<NewOrderID>~,FALSE );" );
		PerformActions( Actions );
	}

	OrderValid( ~<OrderID>~ );

	UpdateRollFrameCombos = FALSE;
	if ( IsNULL( ~<UpdateFlag>~ ) )
	{
		UpdateRollFrameCombos = TRUE;
	}
	else if ( !IsNULL( ~<UpdateFlag>~ ) )
	{
		if ( <UpdateFlag> )
		{
			UpdateRollFrameCombos = TRUE;
		}
	}

	DisplayDRBGError = FALSE;
	if ( !IsNULL( ~<WarnDRGBError>~ ) )
	{
		if ( <WarnDRGBError> )
		{
			DisplayDRBGError = TRUE;
		}
	}

	if ( <UpdateRollFrameCombos> )
	{
		UpdateRollsCombo(TRUE);
		UpdateFrameField();
	}

	// Reget updated values
	dlg( GetInput,GetStrings,OrderID,Order,Roll,Roll,Frame,Frame );

	Roll_aDen  = Roll_aRed  = Roll_aGrn  = Roll_aBlu  = 0;
	Roll_cDen  = Roll_cRed  = Roll_cGrn  = Roll_cBlu  = 0;

	aDen = aRed = aGrn = aBlu = 0;
	cDen = cRed = cGrn = cBlu = 0;
	tDen = tRed = tGrn = tBlu = 0;

	GetFilmDriveVendor();
	if ( !DlgData( GetNumeric,FilmDriveEnabled ) )
	{
		// Roll DRGB Info
		Fields = ~ScanSetup,FilmType,FilmFormat,aDen,aRed,aGrn,aBlu,cDen,cRed,cGrn,cBlu~;
		Query = ~Select <Fields> From Rolls Where OrderID = '<OrderID>' And Roll = '<Roll>'~;

		if ( Ado( dBase,Connect,GetValuesFor,~<Query>~,<Fields> ) )
		{ 
			if ( ( ~<FilmType>~ != ~~ ) && ( ~<ImageFilmType>~ == ~~ ) )
			{
				FilmType = ~<$Str.$FilmType.WithOutExt>~;
				dlg( SelectString,FilmTypesComboBox,~<FilmType>~ );
			}
			if ( ~<FilmFormat>~ != ~~ ) { dlg( SelectString,FilmFormatComboBox,~<FilmFormat>~ ); }

			RollScanSetup = ~<ScanSetup>~;
			RollFilmType = ~<FilmType>~;

			Roll_aDen = Numeric( ~<aDen>~ );
			Roll_aRed = Numeric( ~<aRed>~ );
			Roll_aGrn = Numeric( ~<aGrn>~ );
			Roll_aBlu = Numeric( ~<aBlu>~ );
			Roll_cDen = Numeric( ~<cDen>~ );
			Roll_cRed = Numeric( ~<cRed>~ );
			Roll_cGrn = Numeric( ~<cGrn>~ );
			Roll_cBlu = Numeric( ~<cBlu>~ );
		}
	}
	else if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not access the shared database. <theErr>~ ) );
	}

	if ( !<Rescanning> )
	{
		if ( !HandleDRGB( dBase,~<OrderID>~,~<Roll>~,~<Frame>~,<AutoDRGBAdjustments>,<DisplayDRBGError> ) )
		{
			//UseAnalyzerDRGBValues = DlgData(GetNumeric,UseAnalyzerDRGBValues);
			//if ( <UseAnalyzerDRGBValues> && <DisplayDRBGError> )
			if ( <DisplayDRBGError> )
			{
				Warning( Translate( ~Unable to adjust DRGB values with order/roll change.~ ) );
				return FALSE;
			}
		}
	}

	if ( ~<FilmFormat>~ != ~~ )
	{
		if ( !OnFormatChange( 3, ~Film format changed.~, FALSE, FALSE ) )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC LoadSetup( IgnoreFilmDriveEnable )
{
	ScanSetupToLoad = ~~;
	FilmTypeToLoad = ~~;
	retval = TRUE;

	if ( ~<ImageScanSetup>~ != ~~ )
	{
		ScanSetupToLoad = ~<ImageScanSetup>~;
	}
	else if ( ~<RollScanSetup>~ != ~~ )
	{
		ScanSetupToLoad = ~<RollScanSetup>~;
	}
	else if ( ~<OrderScanSetup>~ != ~~ )
	{
		ScanSetupToLoad = ~<OrderScanSetup>~;
	}

	if ( ~<ImageFilmType>~ != ~~ )
	{
		FilmTypeToLoad = ~<ImageFilmType>~;
	}
	else if ( ~<RollFilmType>~ != ~~ )
	{
		FilmTypeToLoad = ~<RollFilmType>~;
	}
	else if ( ~<OrderFilmType>~ != ~~ )
	{
		FilmTypeToLoad = ~<OrderFilmType>~;
	}

	if ( ~<ScanSetupToLoad>~ != ~~ )
	{
		retval = LoadSettings( ~<ScanSetupToLoad>~, FALSE, TRUE, <IgnoreFilmDriveEnable>, FALSE );
	}

	if ( ~<FilmTypeToLoad>~ != ~~ )
	{
		FilmTypeToLoad = ~<$Str.$FilmTypeToLoad.WithOutExt>~;
		dlg( SelectString,FilmTypesComboBox,~<FilmTypeToLoad>~ );
	}

	return <retval>;
}


VOID GetProfiles( Type,Control )
{
	Query = ~Select * From Profiles Where Type = '<Type>' And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.  <theErr>~ ) ); 
		return;
	}

	ForgetGlobal( <Type>Profiles );

	ProfilesList( MakeStringList,<Type>Profiles,Name );

	<Type>Profiles( AddString,~None~ );

	Global( <Type>Profiles );
}


VOID RefreshScannerProfilesComboBox(wantSelection)
{
	Query = ~Select * From Profiles Where Type = 'Input' And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ProfilesList( MakeStringList,ScannerProfiles,Name );

	dlg( SetControlFromStringList,ScannerProfileComboBox,ScannerProfiles,<wantSelection> ? ~Selection~ : ~NoSelection~ );

	dlg( SelectString,ScannerProfileComboBox,~<$con.dlgData[ICCProfile]>~ );
}


NUMERIC NewExposureProfile()
{
	dlg( GetInput );

	ProfileName = ~<$con.dlgData[DRGBProfileName]>~;

	if ( IsNULL( ~<ProfileName>~ ) )		{ return dlgData( SetValues,DRGBProfile,~~ ); }

	if ( !ADO( dBase,Connect,GetValuesFor,~Select Path From Profiles Where Name = '<ProfileName>'~,Path ) )
	{ 
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Failed to find the profile <ProfileName>.\n\n<Query>\n\n<theErr>~ ) ); 
	}
	
	return dlgData( SetValues,DRGBProfile,~<Path>~ );
}


VOID RefreshExposureProfilesComboBox(wantSelection)
{
	Query = ~Select * From Profiles Where Type = 'Exposure' And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ProfilesList( MakeStringList,ExposureProfiles,Name );

	if (<wantSelection>)
	{
		dlg( SetControlFromStringList,ExposureProfileComboBox,ExposureProfiles,~Selection~);
	}
	else
	{
		dlg( SetControlFromStringList,ExposureProfileComboBox,ExposureProfiles,~NoSelection~);
	}
}


VOID RefreshOuputProfilesComboBox(wantSelection)
{
	Query = ~Select * From Profiles Where (Type = 'Output') Or (Type Like 'W%') And Path IS NOT NULL~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		ProfilesList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Profiles table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	ProfilesList( MakeStringList,OutputProfiles,Name );

	dlg( SetControlFromStringList,OutputProfileComboBox,OutputProfiles,<wantSelection> ? ~Selection~ : ~NoSelection~ );
}



VOID RefreshCropsComboBox(wantSelection)
{
	CurrentCropName = ~<$con.DlgData[CropName]>~;
	DlgData( SetValues,CropName,~~);

	Query = ~Select Name From Crops Where Format = '<$con.DlgData[Format]>' Order By Name~;

	if ( !PGenConList( CropsList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		CropsList( GetErrorDescription,0,theErr );
		Warning( Translate( ~Failed to query the Crops table.\n\n<Query>\n\n<theErr>~ ) ); 
		return;
	}

	CropsList( MakeStringList,Crops,Name );

	dlg( SetControlFromStringList,CropsComboBox,Crops,<wantSelection> ? ~Selection~ : ~NoSelection~  );
}



VOID OnDocumentRefresh( settingScanArea )
{
	if ( <settingScanArea> )
	{
		OnAdjustScanArea( <settingScanArea> );
	}
	else
	{
		if ( ImageCorrections( GetCrop,~<LastPath>~,cX,cY,cW,cL ) )
		{
			DlgData( SetValues,CropX,<cX>,CropY,<cY>,CropWidth,<cW>,CropLength,<cL> );
			dlg( Update );
		}
	}
}

/*
Not implemented 3/8/01
VOID OnDocumentFrameUpdate(Percent, TopOrBottom )
{
	Log( Session, ~The Percent is <Percent>.  TopOrBottom Is <TopOrBottom>~);
}
*/

VOID RefreshControls()
{
	UpdateFilmTypesList();

	UpdateEditorXYOffsetSetting();
		
	SetupScannerParms();

	RefreshExposureProfilesComboBox(TRUE);

	RefreshScannerProfilesComboBox(TRUE);

	RefreshOuputProfilesComboBox(TRUE);

	OnFileTypeChange(TRUE);

	OnChangeProfilesEnabled();

	SetColorControls();
}


// TRANSPORT CONTROL METHODS

VOID EnableTransportControls( EnableFlag )
{
	dlg( EnableControls,<EnableFlag>,FastForwardButton,FastRewindButton,StopButton,
		 NextFrameButton,PrevFrameButton,GoTo_Button,GotoPunchNumberTextBox,
		 CurrentPunchNumberTextBox,XPositionSlider,IgnoreXAdjustmentsCheckBox,DisableFilmDriveCheckBox,VendorXOffsetZeroButton,
		 XPositionSliderIMinusButton,XPositionSliderMinusButton,
		 XPositionSliderPlusButton,XPositionSliderIPlusButton);
}


VOID SetTransportControlsRunning()
{
	if ( <IgnoreControlCommands> ) { return; }

	ContinueRunning = TRUE;
	gFilmDriveBusy = TRUE;
	if ( !<Previewing> )
	{
		EnableTransportControls( FALSE );

		dlg( EnableControls,TRUE,StopButton ); 
	}
}


VOID SetTransportControlsStopped()
{
	if ( <IgnoreControlCommands> ) { return; }

	ContinueRunning = FALSE;
	gFilmDriveBusy = FALSE;

	if ( !<Previewing> )
	{
		EnableTransportControls( TRUE );
	}
}


VOID SetCurrentPunchNumber( NewCurrentPunchNumber, SetFrameNumber )
{
	if ( ~<NewCurrentPunchNumber>~ == ~~ )
	{
		dlg( SetStrings,CurrentPunchPosition,~????~ );
	}
	else
	{
		dlg( SetStrings,CurrentPunchPosition,~<NewCurrentPunchNumber>~ );
		if ( DefinedAndNotNull( SetFrameNumber ) )
		{
			if ( <SetFrameNumber> )
			{
				NewFrame = Format( ~<NewCurrentPunchNumber>~,~%ld~ );
				FrameToPunchPadding = DlgData(GetNumeric,FrameToPunchPadding);
				if ( <FrameToPunchPadding> )
				{
					NewFrame = Format( ~<NewCurrentPunchNumber>~,~%0<FrameToPunchPadding>ld~ );
				}
				SetCurrentFrameNumber( ~<NewFrame>~ );
			}
		}
	}
}

VOID GetStripSensorState()
{
	GetFilmDriveVendor();

	if ( FunctionDefined( ~<FDVendor>_GetStripSensorState~ ) )
	{	
		sensorState = <FDVendor>_GetStripSensorState();
		<FDVendor>_UpdateSensorState( <sensorState> );
	}
}	

VOID SetCurrentFrameNumber( NewCurrentFrameNumber )
{
	CurrentScanFrame = ~<NewCurrentFrameNumber>~;
	dlg( SetStrings,Frame,~<NewCurrentFrameNumber>~ );
}


NUMERIC UserFrameErrorMessage( Msg, SaveCurrentPunch, CheckScannerErrors )
{
	if ( !<SaveCurrentPunch> )
	{
		SetCurrentPunchNumber( ~~ );
	}
	FilmDriveCmdInProgress( ~<Msg>~ );

	EnableScanningControls( TRUE );
	SetTransportControlsStopped();
	return FALSE;
}


// ROUTINES TO COMMUNICATE WITH THE SERIAL PORT


NUMERIC SendFilmDriveCmdCheckResponse( Msg, SleepTimeAfterSend, Response, ResponseTimeoutDuration )
{
	SimulationMode = FALSE;
	if ( Defined( SimulateFilmDrive ) )
	{
		if ( <SimulateFilmDrive> )
		{
			SimulationMode = TRUE;
		}
	}

	Log( Session,~FilmDrive --> [<Msg>]~ );

	if ( !<SimulationMode> )
	{
		if ( !FilmDrive( SerialWriteString,~<Msg>~ ) )
		{
			return FALSE;
		}
	}

	Sleep( <SleepTimeAfterSend> );

	// If no response is required, then return
	if ( ~<Response>~ == ~~ )
	{
		return TRUE;
	}

	lastResponse = ~~;

	if ( !<SimulationMode> )
	{
		if ( !FilmDrive( SerialReadString,lastResponse,~<CR>~,<ResponseTimeoutDuration> ) )
		{
			return FALSE;
		}
	}

	if ( <SimulationMode> )
	{
		lastResponse = ~<Response>~;
	}

	if ( ~<Response>~ != ~ThrowAway~  && ~<Response>~ != ~<lastResponse>~ )
	{
		return FALSE;
	}

	return TRUE;
}


NUMERIC SendFilmDriveResponse( Msg )
{
	Log( Session,~FilmDrive --> [<Msg>]~ );

	if ( Defined( SimulateFilmDrive ) )
	{
		if ( <SimulateFilmDrive> )
		{
			return TRUE;
		}
	}
	return FilmDrive( SerialWriteString,~<Msg>~ );
}


STR GetFilmDriveResponse( TimeoutDuration, SimulatedResponse )
{
	// TBD need argument
	if ( Defined( SimulateFilmDrive ) )
	{
		if ( <SimulateFilmDrive> )
		{
			return ~<SimulatedResponse>~;
		}
	}

	if ( FilmDrive( SerialReadString,msg,~<CR>~,TimeoutDuration ) )
	{
		return ~<msg>~;
	}

	Log( Session,~FilmDrive <-- Timeout waiting for FilmDrive response~ );

	return ~~;
}


NUMERIC EmptySerialBuffer( &InPort )
{
	if ( !Defined( SimulateFilmDrive ) )
	{
		if ( !<SimulateFilmDrive> )
		{
			InPort( CancelIO );
		}
	}
	return TRUE;
}

IF 0
{
	simulateBremsonFD		= 1;
	simulateBremsonFDMsg1	= ~<LF><DC4>~;
	simulateBremsonFDMsg2	= ~       PRESS READY BUTTON       ~;	
	simulateBremsonFDMsg3	= ~<LF><BEL>~;
	simulateBremsonFDMsg4	= ~       ENTER OPERATOR ID        ~;	
	simulateBremsonFDMsg5	= ~<LF><DC4>~;
	simulateBremsonFDMsg6	= ~<filmTypeChanged>C   FILM TYPE HAS CHANGED TO 1 ~;			
	simulateBremsonFDMsg7	= ~<LF><STX>~;
	simulateBremsonFDMsg8	= ~12345671234123+99991H                128000004009-00+00-00+00~;	
}


// SIZZLE/FILM DRIVE COMMANDS (COMBINED - HIGH LEVEL UI COMMANDS)


VOID Sizzle_NoFilmDriveSelected()
{
	// Restore the UI
	
	// Leave the other labels at their last setting

	dlg( SetCheck,FALSE,ViewDriveControls );
	ShowFilmDriveControls();

	// Disable any controls that don't apply
	dlg( SetCheck, FALSE, FrameToPunchCheckBox );
	dlg( SetCheck, FALSE, SequentialPunchesCheckBox );
	dlg( EnableControls,TRUE,ScanFromDataBaseButton );
	dlg( EnableControls,FALSE,EditFilmEditorsButton );
	dlg( EnableControls,FALSE,EditVendorButton );
	dlg( EnableControls,FALSE,EditorStaticText );
	dlg( EnableControls,FALSE,EditorComboBox );
	dlg( EnableControls,FALSE,EnableFilmDriveBox );
	dlg( EnableControls,FALSE,ViewFilmDriveControlsBox );
	dlg( EnableControls,FALSE,VendorSetupComboBox );
	dlg( EnableControls,FALSE,FrameToPunchCheckBox );
	dlg( EnableControls,FALSE,FrameToPunchPaddingField );
	dlg( EnableControls,FALSE,VendorYOffsetStaticText );
	dlg( EnableControls,FALSE,VendorYOffsetTextBox );
	dlg( EnableControls,FALSE,VendorYOffsetClearButton );
	dlg( EnableControls,FALSE,VendorXOffsetStaticText );
	dlg( EnableControls,FALSE,VendorXOffsetTextBox );
	dlg( EnableControls,FALSE,VendorXOffsetClearButton );
	dlg( EnableControls,FALSE,VendorXOffsetZeroButton );
	dlg( EnableControls,FALSE,XSliderIFactorField );
	dlg( EnableControls,FALSE,XSliderIFactorStaticText );
	dlg( EnableControls,FALSE,GoToPunchNumberTextBox );
	dlg( EnableControls,FALSE,GoTo_Button );
	dlg( EnableControls,FALSE,SequentialPunchesCheckBox );

	dlg( EnableControls,TRUE,CutNegPromptCheckBox );
	dlg( ShowControls,  TRUE,CutNegPromptCheckBox );

	// Restore the film format selections - and current selection if possible
	CurrentFormat = ~<$con.DlgData[Format]>~;
	StringList( OriginalFilmSizeChoices,New,InListOrder,AddStrings,~35mm~,~35mm_Unperfed~,~46mm~,~62mm_4.5x6~,~62mm_6x4.5~,~62mm_6x6~,~62mm_6x7~,~62mm_6x9~,~Split_70mm~,~70mm~ );
	dlg( SetControlFromStringList, ~FilmSizeChoices~, OriginalFilmSizeChoices, Update );
	dlg( SetControlFromStringList, ~FilmFormatComboBox~, OriginalFilmSizeChoices, Update );
	if ( ~<CurrentFormat>~ != ~~ )
	{
		dlg( SelectString,FilmFormatComboBox,~<CurrentFormat>~ );
	}
    SizzleControl( Set, PreScanNotification, ~~ );
    SizzleControl( Set, ScanCompleteNotification, ~~ );

	// We are going to replace the following global variables
	ForgetGlobal( MagNames);
	ForgetGlobal( Magnifications);
	ForgetGlobal( ApertureWid);
	ForgetGlobal( ApertureLen);
	ForgetGlobal( ApertureOfs);
	ForgetGlobal( MinMagnifications);
	ForgetGlobal( MaxMagnifications);

	// Restore all the control strings

	NewString( MagNames,Set,		~Undefined,35mm,35mm_Unperfed,46mm,62mm_4.5x6,62mm_6x4.5,62mm_6x6,62mm_6x7,62mm_6x9,Split_70mm,70mm~,Delimiters,~,~ );
	NewString( Magnifications,Set,	~0,2150,1678,1291,1226,910,910,910,910,910,802~,Delimiters,~,~ );
	NewString( ApertureWid,Set,		~0,1427,1648,1963,2227,1650,2227,2744,3282,1650,3184~,Delimiters,~,~ );
	NewString( ApertureLen, Set,	~0,955,1220,1570,1650,2227,2227,2227,2227,2227,2528~,Delimiters,~,~ );
	NewString( ApertureOfs, Set,	~0,87,87,0,0,0,0,0,0,0,0~,Delimiters,~,~ );
	NewString( MinMagnifications,Set,~0,-62,-52,-37,-34,-11,-11,-11,-11,-11,0~,Delimiters,~,~ );
	NewString( MaxMagnifications,Set,~0,10,40,83,92,159,159,159,159,159,194~,Delimiters,~,~ );

	// Reglobalize the control string variables
	Global( MagNames);
	Global( Magnifications);
	Global( ApertureWid);
	Global( ApertureLen);
	Global( ApertureOfs);
	Global( MinMagnifications);
	Global( MaxMagnifications);

	MaxXIncrementsInInches = 30.00000;
	MaxXIncrementsInDisplayUnits = InchesTo<DisplayUnits>( <MaxXIncrementsInInches> );

	return;
}


VOID Sizzle_FilmDriveSelected()
{
	// Restore the UI
	
	// Reset the labels
	dlg( SetControlTitle, GoTo_Button, Translate( ~Go To Punch~ ));
	dlg( SetControlTitle, CurrentPunchNumberText, Translate( ~Punch~ ));
	dlg( SetControlTitle, TensionBox, Translate( ~Tension~ ));
	dlg( SetControlTitle, FastForwardButton, Translate( ~>>>>~ ));
	dlg( SetControlTitle, FastRewindButton, Translate( ~<<<<~ ));
	dlg( SetValueInCtrlDef, GotoPunchNumberTextBox,~Tooltip~,Translate( ~Enter Punch Number To Go To~ ));
	dlg( SetValueInCtrlDef, GoTo_Button,~Tooltip~,Translate( ~Go To Punch #~ ));
	dlg( SetValueInCtrlDef, FastForwardButton,~Tooltip~,Translate( ~Fast Forward~ ));
	dlg( SetValueInCtrlDef, FastRewindButton,~Tooltip~,Translate( ~Fast Rewind~ ));	

	// Reenable the controls
	dlg( EnableControls,TRUE,EditFilmEditorsButton );
	dlg( EnableControls,TRUE,EditorStaticText );
	dlg( EnableControls,TRUE,EditorComboBox );
	dlg( EnableControls,TRUE,EnableFilmDriveBox );
	dlg( EnableControls,TRUE,ViewFilmDriveControlsBox );
	dlg( EnableControls,TRUE,VendorSetupComboBox );
	dlg( EnableControls,TRUE,EditVendorButton );
	dlg( EnableControls,TRUE,FrameToPunchCheckBox );
	dlg( EnableControls,TRUE,FrameToPunchPaddingField );
	dlg( EnableControls,TRUE,ScanFromDataBaseButton );
	dlg( EnableControls,TRUE,VendorYOffsetStaticText );
	dlg( EnableControls,TRUE,VendorYOffsetTextBox );
	dlg( EnableControls,TRUE,VendorYOffsetClearButton );
	dlg( EnableControls,TRUE,VendorXOffsetClearButton );
	dlg( EnableControls,TRUE,VendorXOffsetZeroButton );
	dlg( EnableControls,TRUE,VendorXOffsetStaticText );
	dlg( EnableControls,TRUE,VendorXOffsetTextBox );
	dlg( EnableControls,TRUE,XSliderIFactorStaticText );
	dlg( EnableControls,TRUE,XSliderIFactorField );
	dlg( EnableControls,TRUE,IgnoreXAdjustmentsCheckBox );

	dlg( EnableControls,TRUE,GoTo_Button );
	dlg( EnableControls,TRUE,GoToPunchNumberTextBox );
	dlg( EnableControls,TRUE,SequentialPunchesCheckBox );

	dlg( EnableControls,FALSE,CutNegPromptCheckBox );
	dlg( ShowControls,  FALSE,CutNegPromptCheckBox );

	// Restore the film format selections - and current selection if possible
	CurrentFormat = ~<$con.DlgData[Format]>~;
	StringList( OriginalFilmSizeChoices,New,InListOrder,AddStrings,~35mm~,~35mm_Unperfed~,~46mm~,~62mm_4.5x6~,~62mm_6x4.5~,~62mm_6x6~,~62mm_6x7~,~62mm_6x9~,~Split_70mm~,~70mm~ );
	dlg( SetControlFromStringList, ~FilmSizeChoices~, OriginalFilmSizeChoices, Update );
	dlg( SetControlFromStringList, ~FilmFormatComboBox~, OriginalFilmSizeChoices, Update );
	if ( ~<CurrentFormat>~ != ~~ )
	{
		dlg( SelectString,FilmFormatComboBox,~<CurrentFormat>~ );
	}

    SizzleControl( Set, PreScanNotification, ~~ );
    SizzleControl( Set, ScanCompleteNotification, ~~ );
	SizzleControl( SetValues, OverScan, FALSE);
	dlg( SetString,~~,StripSensorState );

	// We are going to replace the following global variables
	ForgetGlobal( MagNames);
	ForgetGlobal( Magnifications);
	ForgetGlobal( ApertureWid);
	ForgetGlobal( ApertureLen);
	ForgetGlobal( ApertureOfs);
	ForgetGlobal( MinMagnifications);
	ForgetGlobal( MaxMagnifications);


	// Restore all the control strings

	NewString( MagNames,Set,		~Undefined,35mm,35mm_Unperfed,46mm,62mm_4.5x6,62mm_6x4.5,62mm_6x6,62mm_6x7,62mm_6x9,Split_70mm,70mm~,Delimiters,~,~ );
	NewString( Magnifications,Set,	~0,2150,1678,1291,1226,910,910,910,910,910,802~,Delimiters,~,~ );
	NewString( ApertureWid,Set,		~0,1427,1648,1963,2227,1650,2227,2744,3282,1650,3184~,Delimiters,~,~ );
	NewString( ApertureLen, Set,	~0,955,1220,1570,1650,2227,2227,2227,2227,2227,2528~,Delimiters,~,~ );
	NewString( ApertureOfs, Set,	~0,87,87,0,0,0,0,0,0,0,0~,Delimiters,~,~ );
	NewString( MinMagnifications,Set,~0,-62,-52,-37,-34,-11,-11,-11,-11,-11,0~,Delimiters,~,~ );
	NewString( MaxMagnifications,Set,~0,10,40,83,92,159,159,159,159,159,194~,Delimiters,~,~ );

	// Reglobalize the control string variables
	Global( MagNames);
	Global( Magnifications);
	Global( ApertureWid);
	Global( ApertureLen);
	Global( ApertureOfs);
	Global( MinMagnifications);
	Global( MaxMagnifications);

	MaxXIncrementsInInches = 30.00000;
	MaxXIncrementsInDisplayUnits = InchesTo<DisplayUnits>( <MaxXIncrementsInInches> );

	return;
}

NUMERIC HandleNonsequentialPunch( Punch,ExpectedPunchNumber )
{
	dlg( SetStrings,GotoPunchNumber,~<ExpectedPunchNumber>~ );
	dlg( Update );
	Msg = ~Nonsequential punch read:\nFound Punch <Punch>\nExpected Punch <ExpectedPunchNumber>\n\nDo you want to stop scanning?~ ;
	if ( MessageBox( Translate( ~<Msg>~ ),YESNO ) == YES )
	{ 
		dlg( SetStatus,0,Translate( ~Scanning cancelled~ ) );
		ClearFilmDriveOperationHandlers();
		EnableScanningControls( TRUE );
		SetTransportControlsStopped();
		return FALSE;
	}
	else
	{
		dlg( SetStatus,0,Translate( ~Scanning nonsequential punch~ ) );
		return TRUE;
	}
	return FALSE;
}


// HICKS FILM DRIVE SERIAL TRACE (CONFIGURATION - HIGH LEVEL)

VOID Hicks_SetLogSession( LogActivityFlag )
{
	if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) )
	{
		if ( <LogActivityFlag> )
		{
			FilmDrive( SessionLog );
		}
		else
		{
			FilmDrive( NoSessionLog );
		}
	}
}

VOID LogMessage( Message )
{
	Invoke( _LogMessage, ~<Message>~ );
}

VOID _LogMessage( Message )
{
	if ( Defined( FilmDrive ) && DlgData( GetNumeric,FilmDriveEnabled ) )
	{
		LogActivityFlag = DlgData( GetNumeric,LogActivity );
		if ( <LogActivityFlag> )
		{
			Log( Session, ~<Message>~ );
		}
	}
}

// NONE FILM DRIVE UTILITIES

// For use with default film drive vendor as NONE

// NONE FILM DRIVE COMMANDS (MISCELLANEOUS - HIGH LEVEL)
	
STR None_FormatPunchNumber( PunchNumber )
{
	return Format( Numeric( ~<PunchNumber>~ ), ~%05d~ );
}


VOID NoFilmDriveSelected()
{
	if ( FunctionDefined( ~<ScannerModel>_NoFilmDriveSelected~ ) )
	{
		<ScannerModel>_NoFilmDriveSelected();
	}
	return;
}


VOID FilmDriveSelected()
{
	if ( FunctionDefined( ~Sizzle_FilmDriveSelected~ ) )
	{
		Sizzle_FilmDriveSelected();
	}
}


SecondsWaiting = 0;
PreviewPath = ~<$App.Directory>\Scan\Preview~;

OptionalInclude( ~ScannerDocOverrides.txt~ );
NUMERIC Init( TheModel )
{
	if ( Defined( dlg ) )
	{
		if ( ~<TheModel>~ != ~<ScannerModel>~ )
		{
			return Warning( Translate(~Already scanning with the other scanner~) ) ;
		}

		return TRUE;
	}

	ScannerModel = ~<TheModel>~;

	Global( ScannerModel );

	WaitCursor( Begin );

	Version = 5.0;
	Global( Version );

	DisplayUnits = GetPreferredUnits();
	MaxXIncrementsInDisplayUnits = InchesTo<DisplayUnits>( <MaxXIncrementsInInches> );

	Tree( Location,~[STRINGS]~,Name,FilmSizeChoices,PluckAndFree );

	StringList:	Name ~FilmSizeChoices~
		Fields: String	~35mm~
		Fields: String	~35mm_Unperfed~
		Fields:	String	~46mm~
		Fields:	String	~46mm_Unperfed~
		Fields: String	~62mm_4.5x6~
		Fields: String	~62mm_6x4.5~
		Fields:	String	~62mm_6x6~
		Fields: String	~62mm_6x7~
		Fields: String	~62mm_6x9~
		Fields: String	~Split_70mm~
		Fields:	String	~70mm~
		Fields:	String	~70mm_Unperfed~
	Hang:	FilmSizeChoices	~[STRINGS]~

	Tree( Location,~[STRINGS]~,Name,ScanResolutionChoices,PluckAndFree );

	StringList:	Name ~ScanResolutionChoices~
		Fields: String	~LOW~
		Fields: String	~MEDIUM~
		Fields:	String	~HIGH~
		Fields: String	~DITHER~
	Hang:	ScanResolutionChoices	~[STRINGS]~

	Tree( Location,~[STRINGS]~,Name,FilmDriveVendorList,PluckAndFree );

	StringList: Name FilmDriveVendorList
		Fields: String	~Cut Neg~
		Fields:	String	~Bremson~
		Fields:	String	~Hicks~
	Hang:	FilmDriveVendorList	~[STRINGS]~

	if ( !Tree( Name,SizzleScanErrorStrings,Location,~[STRINGS]~,Exists ) )
	{
		Define:	SizzleScanErrorStrings	USING DDSymbol AsSymbol SizzleScanErrorStrings
			Fields:	Value	~These strings are messages used by the Sizzle Script.~
				Contains:
				{
					Define: LoadLibFailed	using DDText	Fields: Text ~Loading %1: %2~
				}
		Hang:	SizzleScanErrorStrings	~[STRINGS]~ ;

		StringList:	Name ~OutputFileTypes~
			Fields: String	~TIFF~
			Fields: String	~JPEG~
			Fields: String	~EXIF~
		Hang:	OutputFileTypes	~[STRINGS]~

		StringList:	Name ~OutputFileExtensions~
			Fields: String	~.tif~
			Fields: String	~.jpg~
		Hang:	OutputFileExtensions	~[STRINGS]~

		StringList:	Name ~VolumeChoices~
		Hang:	VolumeChoices	~[STRINGS]~ ;

		StringList: Name DRGBRefsList
			Fields:	String	~Default~
		Hang:	DRGBRefsList	~[STRINGS]~ ;

		StringList: Name EditorVendorList
			Fields:	String	~Bremson~
			Fields:	String	~Hicks~
			Fields:	String	~Lucht~
		Hang:	EditorVendorList	~[STRINGS]~ ;

		Dictionary: DDScannerImageData
			Fields:	Name ImageBuffer				Type long
			Fields:	Name ImageWidth					Type long
			Fields:	Name ImageHeight				Type long
			Fields:	Name ImageDepth					Type long
			Fields: Name ImageLayout				Type Text

		Dictionary: DDScannerDialogData
			Fields:	Name Location					Type long
			Fields: Name GotoPunchNumber			Type Text
			Fields: Name CurrentPunchPosition		Type Text
			Fields: Name xPos						Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name yPos						Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name Scanwidth					Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name Scanlength					Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name Depth						Type long LowValue 1	HighValue 3
			Fields: Name ScanAreaInPercent			Type long 

			Fields:	Name ScanRotation				Type long
			Fields:	Name Icon						Type long
			Fields:	Name SaveFileType				Type Text
			Fields:	Name FileExtension				Type Text
			Fields:	Name JPEGQuality				Type long LowValue 0	HighValue 100
			Fields: Name MaxThumbNailSize			Type long
			Fields:	Name FileResolution				Type long
			Fields: Name Baud						Type long
			Fields: Name ScannerType				Type Text
			Fields: Name ScanResolution				Type Text
			Fields: Name OpticalZoom				Type long	LowValue (-50)	HighValue 50
			Fields: Name ScanSizeWidthLength		Type Text
			Fields: Name ScanSizeField				Type Text
			Fields: Name Preview					Type long
			Fields: Name Volume						Type Text
			Fields: Name CustomerID					Type Text
			Fields: Name Order						Type Text
			Fields: Name Roll						Type Text
			Fields: Name Frame						Type Text
			Fields: Name PreviewCompleteNotification Type Text
			Fields: Name FetchCompleteNotification	Type Text
			Fields: Name FlushCompleteNotification	Type Text
			Fields: Name FlushErrorNotification		Type Text
			Fields: Name FocusProgressNotification	Type Text
			Fields: Name FocusCompleteNotification	Type Text
			Fields: Name Simulating					Type long
			Fields: Name DumpRawData				Type long
			Fields: Name FrameToPunch				Type long
			Fields: Name FrameToPunchPadding		Type long	LowValue 0	HighValue 5
			Fields: Name OmitRollInPath				Type long
			Fields:	Name PathTemplate				Type Text
			Fields: Name AutoScanWrap				Type long
			Fields: Name TraceCalls					Type long
			Fields: Name TimeCalls					Type long
			Fields: Name FilmType					Type text
			Fields:	Name Punch						Type long

			Fields: Name FrameFormat				Type Text
			Fields: Name RollFormat					Type Text

			Fields: Name Progress					Type long
			Fields: Name DisplayLastImage			Type long

			Fields: Name AutoScan					Type long
			Fields: Name ScanFromDataBase			Type long
			Fields: Name CutNegPrompt				Type long


			Fields: Name LockScannerOffsets			Type long
			Fields: Name DensityNormalization		Type long
			Fields: Name UseAnalyzerDRGBValues		Type long
			Fields: Name redOverride				Type  long LowValue (-300)	HighValue 300
			Fields: Name greenOverride				Type  long LowValue (-300)	HighValue 300
			Fields: Name blueOverride				Type  long LowValue (-300)	HighValue 300
			Fields: Name contrastOverride			Type  long LowValue (-100)	HighValue 100
			Fields: Name brightnessOverride			Type  long LowValue (-300)	HighValue 300

			Fields: Name saDensity					Type  long
			Fields: Name saRed						Type  long
			Fields: Name saGreen					Type  long
			Fields: Name saBlue						Type  long

			Fields: Name rDensity					Type  long	// reference DRGB
			Fields: Name rRed						Type  long
			Fields: Name rGreen						Type  long
			Fields: Name rBlue						Type  long

			Fields: Name rfBrightness				Type  long	// reference BRGBC
			Fields: Name rfRed						Type  long
			Fields: Name rfGreen					Type  long
			Fields: Name rfBlue						Type  long
			Fields: Name rfContrast					Type  long

			Fields: Name dDensity					Type  long LowValue 0	HighValue 255
			Fields: Name dRed						Type  long LowValue 0	HighValue 255
			Fields: Name dGreen						Type  long LowValue 0	HighValue 255
			Fields: Name dBlue						Type  long LowValue 0	HighValue 255

			Fields: Name SlopeLut					Type  Text
			Fields: Name SlopeLutFile				Type  Text
			Fields: Name CropName					Type  Text

			Fields: Name EmbedProfile				Type Long

			Fields: Name ScannerProfileEnabled		Type Long
			Fields: Name ICCProfile					Type Text 

			Fields: Name OutputProfileEnabled		Type Long
			Fields: Name ICCOutputProfile			Type Text 

			Fields: Name AutoDRGBAdjustments		Type Long
			Fields: Name DRGBProfile				Type Text 
			Fields: Name ReverseDRGBProfile			Type Text 
			Fields: Name DRGBProfileName			Type Text
			Fields: Name NULLProfile				Type Text
			Fields: Name DRGBRefs					Type Text

			Fields: Name TraceExposureDetermination Type Long

			Fields: Name CalibrationFile			Type Text
			Fields: Name CalibrationType			Type Text
			Fields: Name LutFile					Type Text
			Fields: Name ScanCount					Type long
			Fields: Name ScanSetup					Type Text
			Fields: Name LastScanTime				Type Double	Precision	6	Scale 2 LowValue 0
			Fields: Name LastScanFile				Type Text

			Fields: Name CropX						Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name CropY						Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name CropWidth					Type Double	Precision	6	Scale 2 LowValue 5	HighValue 100
			Fields: Name CropLength					Type Double	Precision	6	Scale 2 LowValue 5	HighValue 100

			Fields: Name Tension					Type long

			Fields: Name FilmDriveVendor			Type Text
			Fields: Name FilmDriveSetup				Type Text
			Fields: Name FilmDriveEnabled			Type long
			Fields:	Name ViewDriveControls			Type long

			Fields: Name TXOffsetPositionInUnits	Type long LowValue (-<MaxXIncrements>)	HighValue <MaxXIncrements>;
			Fields: Name TXOffsetPositionInInches	Type Text
			Fields: Name TXOffsetIncrementUnit		Type Double	Precision	1	Scale 6	LowValue 0	HighValue 1

			Fields: Name EXOffsetIncrementUnit		Type Double	Precision	1	Scale 6	LowValue 0	HighValue 1

			Fields: Name EYOffsetPositionInUnits	Type long LowValue (-<MaxYIncrements>)	HighValue <MaxYIncrements>;
			Fields: Name EYOffsetPositionInInches	Type Text
			Fields: Name EYOffsetIncrementUnit		Type Double	Precision	1	Scale 6	LowValue 0	HighValue 1

			Fields: Name FilmEditor					Type Text
			Fields: Name Format						Type Text
			Fields: Name FilmSize					Type Text

			Fields: Name XSliderPosition			Type long LowValue (-300)	HighValue 300
			Fields: Name XSliderPositionUI			Type Text
			Fields: Name XSliderIFactor				Type Double	Precision	2	Scale 5	LowValue 0.00000	HighValue 762.00000
			Fields: Name IgnoreXAdjustments			Type long

			Fields:	Name DisableFilmDrive			Type long

			Fields: Name LogActivity				Type long

			Fields: Name SharpenDelta				Type long

			Fields: Name AdaptiveSharpen			Type long
			Fields: Name SharpenAmount				Type Double Precision	6	Scale 2 LowValue 0	HighValue 2000
			Fields: Name SharpenFaster				Type long
			Fields: Name SharpenLimit				Type long LowValue (10)	HighValue 255
			Fields: Name SharpenThreshold			Type long LowValue (0)	HighValue 100
			Fields: Name SharpenBlurAmount			Type long LowValue (0)	HighValue 100

			Fields: Name NoiseReductionAmount		Type Double Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name SequentialPunches			Type long

		Dictionary:	DDSizzleControlDict
			Fields: Name	xPos				Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	yPos				Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	Scanwidth			Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	Scanlength			Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	DPI					Type long
			Fields: Name	OpticalZoom			Type Double	LowValue (-50.0)	HighValue 50.0
			Fields: Name	ScanSize			Type Double LowValue    0.5	HighValue 2.0
			Fields:	Name	NextInfoAdjusted	Type long
			Fields:	Name	NextPunch			Type long
			Fields:	Name	NextXOffset			Type long
			Fields: Name	NextXPos			Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	NextYPos			Type Double	Precision	6	Scale 2 LowValue 2	HighValue 98
			Fields: Name	NextScanwidth		Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	NextScanlength		Type Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			Fields: Name	Depth				Type long   LowValue 1	HighValue 3
			Fields: Name	ScanAreaInPercent	Type Double	Precision	6	Scale 2	

			Fields: Name	CropX				Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	CropY				Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	CropWidth			Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	CropLength			Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100

			Fields: Name	PreviewScan			Type  long
			Fields: Name	GrayScan			Type  long
			Fields: Name	BitsPerPixel		Type  long
			Fields: Name	ScannerSharpenAmount Type  long
			Fields: Name	SharpenDelta		Type  long
			Fields: Name	Rotation			Type  long
			Fields: Name	Focus				Type  long
			Fields: Name	AutoBalance			Type  long
			Fields: Name	ColorCorrection		Type  long	// 1 means use old
			Fields: Name	ApertureWidth		Type  long
			Fields: Name	ApertureHeight		Type  long
			Fields: Name	DynamicRange		Type  long
			Fields: Name	Size				Type  long

			Fields:	Name	Punch				Type long
			Fields: Name	ScanFromDataBase	Type long

			Fields:	Name	SaveFileType		Type  Text
			Fields:	Name	FileExtension		Type  Text
			Fields:	Name	JPEGQuality			Type  long LowValue 0	HighValue 100

			Fields: Name	RenderComplete		 Type  long
			Fields: Name	SaveComplete		 Type  long
			Fields: Name	DatabaseUpdateComplete Type  long
			Fields: Name	ImageBuffer			 Type  long
			Fields: Name	ImageBufferWidth	 Type  long
			Fields: Name	ImageBufferHeight	 Type  long
			Fields: Name	ImageBufferDepth	 Type  long
			Fields: Name	ImageBufferLayout	 Type  Text

			Fields: Name	DisplayLastImage	Type   long
			Fields: Name	LockScannerOffsets	Type   long
			Fields: Name	DensityNormalization  Type   long
			Fields: Name	UseAnalyzerDRGBValues Type long
			Fields: Name	redOverride			Type  long
			Fields: Name	greenOverride		Type  long
			Fields: Name	blueOverride		Type  long
			Fields: Name	contrastOverride	Type  long
			Fields: Name	brightnessOverride	Type  long 
			Fields: Name	UseImageOverrides	Type  long

			Fields: Name	saDensity			Type  long
			Fields: Name	saRed				Type  long
			Fields: Name	saGreen				Type  long
			Fields: Name	saBlue				Type  long

			Fields: Name	dDensity			Type  long LowValue 0	HighValue 255
			Fields: Name	dRed				Type  long LowValue 0	HighValue 255
			Fields: Name	dGreen				Type  long LowValue 0	HighValue 255
			Fields: Name	dBlue				Type  long LowValue 0	HighValue 255

			Fields: Name	DRGBRef				Type Text

			Fields: Name	FilmTermFile		Type  Text
			Fields: Name	FilmTermPath		Type  Text
			Fields: Name	LutFile				Type  Text

			Fields: Name	Order				Type  Text 
			Fields: Name	Roll				Type  Text 
			Fields: Name	Frame				Type  Text 
			Fields: Name	Path				Type  Text 
			Fields: Name	ICCProfile			Type  Text 
			Fields: Name	ScannerProfileEnabled Type Long
			Fields: Name	ICCOutputProfile	Type  Text
			Fields: Name	OutputProfileEnabled Type Long
			Fields: Name	EmbedProfile		Type Long
			Fields: Name	MaxThumbNailSize	Type  Long
			Fields: Name	FetchTimeout		Type  Long

			Fields: Name	XOffset					Type  Long
			Fields: Name	YOffset					Type  Double Precision 6
			Fields: Name	EYOffsetIncrementUnit	Type  Double Precision 2	Scale 6 LowValue 0	HighValue 1

			Fields: Name	RawImageBuffer		Type  long

			Fields: Name	FetchCompleteNotification	Type Text;
			Fields: Name	PreviewCompleteNotification	Type Text;
			Fields: Name	PreviewErrorNotification	Type Text;
			Fields: Name	FlushCompleteNotification	Type Text;
			Fields: Name	FlushErrorNotification		Type Text;
			Fields: Name	FocusProgressNotification	Type Text;
			Fields: Name	FocusCompleteNotification	Type Text;
			Fields: Name	FocusErrorNotification		Type Text;
			Fields: Name	PreScanNotification			Type Text;
			Fields: Name	ScanCompleteNotification	Type Text;
			Fields: Name	ScanErrorNotification		Type Text;
			Fields: Name	FetchErrorNotification		Type Text;
			Fields: Name	FilmDriveAction				Type Text;

			Fields: Name	SaveStartTime		Type long;
			Fields: Name	ScanStartTime		Type long;
			Fields: Name	DataAvailableTime	Type long;
			Fields: Name	FetchCompleteTime	Type long;
			Fields: Name	FlushCompleteTime	Type long;
			Fields: Name	DumpRawData			Type long 
			Fields: Name	TraceCalls			Type long 
			Fields: Name	TimeCalls			Type long 

			Fields: Name	LastScanX			Type long
			Fields: Name	LastScanY			Type long
			Fields: Name	LastScanWidth		Type long
			Fields: Name	LastScanHeight		Type long
			Fields: Name	LastPixelSumming	Type long
			Fields: Name	LastMagPosition		Type double

			Fields: Name	FullFrameWidth		Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100
			Fields: Name	FullFrameHeight		Type Double	Precision	6	Scale 2	LowValue 0	HighValue 100

			Fields: Name	TestScan			Type long

			Fields: Name	LogActivity			Type long

			Fields:	Name	FileResolution		Type long

			Fields: Name	AdaptiveSharpen		Type long
			Fields: Name	SharpenAmount		Type  Double	Precision	6	Scale 2 LowValue 0	HighValue 2000
			Fields: Name	SharpenFaster		Type long
			Fields: Name	SharpenLimit		Type long
			Fields: Name	SharpenThreshold	Type long
			Fields: Name	SharpenBlurAmount	Type long
			
			Fields: Name	NoiseReductionAmount Type  Double	Precision	6	Scale 2 LowValue 0	HighValue 100
			
			;
	}

	NewString( ResolutionNames,	Set,~PREVIEW,LOW,MEDIUM,HIGH,DITHER~,Delimiters,~,~ );
	Global( ResolutionNames );
	NewString( Resolutions,		Set,~200,250,500,1000,2000~,Delimiters,~,~ );
	Global( Resolutions );
	NewString( MaxWidths,		Set,~0,384,768,1536,3072~,Delimiters,~,~ );
	Global( MaxWidths );
	NewString( MaxLengths,		Set,~0,256,512,1024,2048~,Delimiters,~,~ );
	Global( MaxLengths );
	NewString( PixelSumming, Set, ~0,4,2,1,0~,Delimiters,~,~ );
	Global( PixelSumming );

	Define: ImageData Using DDScannerImageData 
			Fields: ImageBuffer					0
					ImageWidth					0
					ImageHeight					0
					ImageDepth					0
					ImageLayout					~~
	;
	Global( ImageData );

	Define: DlgData Using DDScannerDialogData 
			Fields: Location					0
					xPos						50.
					yPos						50.
					ScanWidth					100.
					ScanLength					100.
					ScanAreaInPercent			1
					FileResolution				250
					ScanResolution				250
					DisplayLastImage			TRUE
					ScanFromDataBase			TRUE
					JPEGQuality					100
					SaveFileType				~EXIF~
					FileExtension				~.jpg~
					MaxThumbNailSize			500
					Baud						9600
					Format						~35mm~
					LutFile						~~
					ScannerProfileEnabled		1
					EmbedProfile				0
					TraceExposureDetermination  1
					CalibrationFile				~~
					CalibrationType				~All~
					FilmType					~Vericolor III VPS~
					Roll						~1~
					Frame						~001~
					Progress					0
					ScanCount					0
					LastScanTime				0 
					CropName					~~
					CropX						50.
					CropY						50.
					CropWidth					100.
					CropLength					100.
					Volume						~<$App.ShareDirectory>\OrderImages~
					FilmDriveVendor				~Cut Neg~
					SlopeLut					~SlopeLut~
					LockScannerOffsets			FALSE
					DensityNormalization		FALSE
					UseAnalyzerDRGBValues		TRUE
					AutoDRGBAdjustments			1
					CustomerID					~Lab~
					Order						~Test~
					FrameFormat					~<$[Symbols].FrameFormat[Value]>~
					RollFormat					~<$[Symbols].RollFormat[Value]>~
					ScannerType					~RFS 3570 Plus~
					OpticalZoom					0
					ScanSizeWidthLength			0
					ScanSizeField				0
					Punch						0

					TXOffsetPositionInUnits		0
					TXOffsetPositionInInches	~0.0"~
					TXOffsetIncrementUnit		0.

					EXOffsetIncrementUnit		0.

					EYOffsetPositionInUnits		0
					EYOffsetPositionInInches	~0.0"~
					EYOffsetIncrementUnit		0.

					IgnoreXAdjustments			0
					DisableFilmDrive			0
					DumpRawData					0
					FrameToPunch				0
					FrameToPunchPadding			5
					OmitRollInPath				0
					PathTemplate				~~
					AutoScanWrap				0
					TraceCalls					0
					TimeCalls					0
					DRGBProfile					~<$App.Directory>\Scan\RFS 3570 Plus\SizzleEx.pf~
					ReverseDRGBProfile			~~
					DRGBProfileName				~SizzleEx~
					LogActivity					0
					CutNegPrompt				1
					AdaptiveSharpen				FALSE
					SharpenDelta				0
					SharpenAmount				0
					SharpenFaster				1
					SharpenLimit				150
					SharpenThreshold			90
					SharpenBlurAmount			0
					NoiseReductionAmount		0

					ScanRotation				0
					XSliderIFactor				0

					dDensity					0
					dRed						0
					dGreen						0
					dBlue						0
					rfBrightness				0
					rfRed						0
					rfGreen						0
					rfBlue						0
					rfContrast					0
					rDensity					0
					rRed						0
					rGreen						0
					rBlue						0
					brightnessOverride			0
					redOverride					0
					greenOverride				0
					blueOverride				0
					contrastOverride			0


	;
	Global( DlgData );

	StatusBarText( Translate( ~Loading scanning control~ ) );

	DefineDialog();

	GenDlg( dlg,Definition,ScannerDlgDefinition,Data,DlgData,Document,$Doc.This,New,Temporary );
	Global( dlg );

	SetupSizzleControl();

	dlg( GetInput );

	// Forced to Cut Neg/No Film Drive
	<TheModel>_NoFilmDriveSelected();

	UpdateCrop( FALSE );

	LoadSettings(~~, TRUE, FALSE, FALSE, TRUE );

	Action = STR ( UpdateRollsCombo(TRUE); );
	QueueContentsAfter( Action,500 );

	// TBD - remove ????? ResyncScanList();

	//WaitCursor( End );

	StatusBarText( Translate( ~Scanning control is ready~ ) );

	//SizzleControl( Set,DumpRawData,1 );

	//HeapCheck( Statements ); // THIS FOR DEBUGGING ONLY

	return WaitCursor( End );
}

RefreshRoutine = STR ( OnDocumentRefresh(%ld) );

//Init( ~Sizzle~ );

