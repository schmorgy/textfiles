// Global:  WhichCustomers
//          DocumentQuery
//          CustomerListViewMenu

Include: ~FormattingRoutines~;

VOID RefreshDoc()
{
	KillTimer( 1 );
	RefreshListView();
}


NUMERIC RefreshListView()
{
	if ( CustomersDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	if ( FALSE )
	{
		if ( MessageBox( Translate(DBMessages,LargeQuery,~<DocumentQuery>~,~<Count>~),YESNO ) != YES )
		{
			return TRUE;
		}
	}

	CustomersDataWindow( StatusBar,Text,Translate( CustomersMessages,ReadingCustomers,<Count> ) );

	//SetDocumentData( List(GetObject), TRUE );	
	SetDocumentData( List(GetObject) );	
	CustomersDataWindow( RefreshWindow );

	return TRUE;
}

VOID DelayedRefreshDoc()
{
	SetTimer( 1,2000,~RefreshDoc()~ );
}


NUMERIC OrderQuery( List,Query,CustomerID )
{
	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTIONS ( Doc( ~Orders~ <OpenMethod> OrdersDoc "Init2( ~<List>~,~<Query>~,~<CustomerID>~);" ) );
	return PerformActions( Actions );
}

NUMERIC OpenSelected()
{
	SeeOrdersForCustomers();
	return TRUE;
}


NUMERIC HandleTextDrop( &SrcView,&DstView,DropLocation )
{
	if ( !SrcView( GETSELECTED,SelectedData ) )
	{ 
		GenCon( SelectedData,Is,SrcView(GetCopyOf) );
	}

	Count = SelectedData( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There is no customer data to paste~ ) ); }

	WaitCursor( Begin );

	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Error connecting to the shared database: <theErr>~ );
	}

	while ( SelectedData( GetNext,Item ) )
	{
		Key = ~ID = '<$con.Item[ID]>'~;

		Query = ~Select * From Customers Where <Key>~;

		if ( !PGenConList( List,Connection,dBase,Cursor,Keyset,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate( ~Query Failed: <Query>. <theErr>~ ) );
		}

		IsNewRow = List( NumEntries ) == 0;

		if ( !List( UpdateFrom,Item,~<Key>~,<IsNewRow> ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate,ClearErrors );
			return Warning( Translate( ~Could not update customer record where <Key>. <theErr>~ ) );
		}
	}

	DelayedRefreshDoc();

	return TRUE;
}


NUMERIC HandleDrop()
{
	if ( !GenCon( DragDropInfo,GetDropInfo ) )
		{ return FALSE; }
	
	Tree( Location,~[GenCons]~,Name,DragDropInfo,Pluck );			// REMOVE THE DRAG INFO FROM THE TREE

	if ( !GenCon( SrcView,Is,~<$CON.DragDropInfo[SrcView]>~ ) )		// SEE IF THIS IS A DROP FROM OUTSIDE THE APPLICATION 
		{ return ExternalDrop(DragDropInfo); }			

	if ( !GenCon( DstView,Is,~<$CON.DragDropInfo[DstView]>~ ) ) 
		{ return Warning( ~The Destination View is invalid~ ); }	
		
	if ( ~<$con.SrcView[ViewDataType]>~ == ~Text~ )		// IS THE ITEM A LIST OF GENCONS CONTAINING TEXT?
		{ return HandleTextDrop( SrcView,DstView,~<$CON.DragDropInfo[DropLocation]>~ ); }

	return Warning( Translate( ~You can't paste this type of data here~ ) );

}

NUMERIC SeeProductsForCustomers()
{
	if ( !CustomersDataView( GetSelectedRows,SelectedCustomers ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	InList = ~~;		count = 0;

	while ( SelectedCustomers( GetNext,Customer ) )
	{	
		InList = ~<InList>~ == ~~ ? ~'<$con.Customer[ID]>'~ : ~<InList>,'<$con.Customer[ID]>'~;

		if ( ++count < 20 )		// BUILD UP A LIST OF UP TO 20 CUSTOMER ID'S
			continue;

		ProductQuery( ~<InList>~,~Select * From Products Where CustomerID in (<InList>) Order By Category,Sequence,ID~ );

		InList = ~~;		count = 0;
	}

	if ( ~<InList>~ != ~~ )
		{ ProductQuery( ~<InList>~,~Select * From Products Where CustomerID in (<InList>) Order By Category,Sequence,ID~ ); }
	
	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseCustomersDataView()~ ); }

	return TRUE;
}


NUMERIC SeeCustomersProducts()
{
	if ( !CustomersDataView( GetSelectedRows,SelectedCustomers ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	count = 0;

	while ( SelectedCustomers( GetNext,Customer ) )
	{	
		CustomerProductQuery( ~<$con.Customer[ID]>~,~Select * From CustomerProducts Where CustomerID = '<$con.Customer[ID]>' Order By CustomerID,ProgramID,ID,Sequence~ );

		if ( ++count >= 5 )		// BUILD UP A LIST OF UP TO 20 CUSTOMER ID'S
		{
			Warning( Translate( ~Too many windows will be opened.  Opening the first 5.~ ) );
			break;
		}
	}
	
	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseCustomersDataView()~ ); }

	return TRUE;
}


NUMERIC SeeStudioInfo()
{
	if ( !CustomersDataView( GetSelectedRows,SelectedCustomers ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	count = 0;

	while ( SelectedCustomers( GetNext,Customer ) )
	{	
		StudioQuery( ~<$con.Customer[ID]>~,~Select * From Studios Where ID = '<$con.Customer[ID]>' Order By ID~ );

		if ( ++count >= 5 )		// BUILD UP A LIST OF UP TO 20 CUSTOMER ID'S
		{
			Warning( Translate( ~Too many windows will be opened.  Opening the first 5.~ ) );
			break;
		}
	}
	
	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseCustomersDataView()~ ); }

	return TRUE;
}




NUMERIC ProductQuery( List,Query )
{
	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Actions = ACTIONS ( Doc( ~ProductsDoc2~ <OpenMethod> ProductsDoc2 "Init( ~<List>~,TRUE,~<Query>~);" ) );
	return PerformActions( Actions );
}


NUMERIC CustomerProductQuery( List,Query )
{
	Actions = ACTIONS ( Doc( ~CustomerProducts~ Open CustomerProductsDoc "Init( ~<List>~,~<Query>~);" ) );
	return PerformActions( Actions );
}


NUMERIC StudioQuery( List,Query )
{
	Actions = ACTIONS ( Doc( ~StudiosDoc~ Open StudiosDoc "Init( ~<List>~,~<Query>~);" ) );
	return PerformActions( Actions );
}


NUMERIC SeeOrdersForCustomers()
{
	if ( !CustomersDataView( GetSelectedRows,SelectedCustomers ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	InList = ~~;		count = 0;

	NumCustomers = SelectedCustomers( ChildCount );
	if ( <NumCustomers> > 25 )
	{
		if ( MessageBox( ~The orders for only the first 25 selected customers will be opened.  Continue?~,YESNO ) != YES ) 
				{ return FALSE; }
	}

	while ( SelectedCustomers( GetNext,Customer ) )
	{	
		InList = ~<InList>~ == ~~ ? ~'<$con.Customer[ID]>'~ : ~<InList>,'<$con.Customer[ID]>'~;

		if ( ++count >= 25 )		// BUILD UP A LIST OF UP TO 25 CUSTOMER ID'S
			break;
	}

	if ( ~<InList>~ != ~~ )
		{ OrderQuery( ~<InList>~,~Select Customers.Name, Orders.* From Orders,Customers Where CustomerID In (<InList>) And Orders.CustomerID = Customers.ID Order By CustomerID,Orders.ID~,~~ ); }
	
	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseCustomersDataView()~ ); }

	return TRUE;
}


NUMERIC SeeOrdersForCustomer()
{
	if ( !CustomersDataView( GetSelectedRows,SelectedCustomers ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected)  ); }

	if ( SelectedCustomers( GetFirst,Customer ) )
	{
		OrderQuery( ~<$con.Customer[ID]>,<$con.Customer[Name]>~,
						~Select Customers.Name, Orders.* From Orders,Customers Where CustomerID = '<$con.Customer[ID]>' And Orders.CustomerID = Customers.ID Order By Orders.ID~,~<$con.Customer[ID]>~ );
	}

	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseCustomersDataView()~ ); }

	return TRUE;
}


NUMERIC NewOrderForCustomer()
{
	if ( !CustomersDataView( GetSelectedRows,SelectedCustomers ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	if ( !SelectedCustomers( GetFirst,Customer ) )
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	
	Actions = ACTION DOC ( "Customer <$con.Customer[ID]>" <OpenMethod> OrdersDoc "NewOrderForCustomer( ~<$con.Customer[ID]>~ );" );

	PerformActions( Actions );

	if ( KeyState( LSHIFT ) ) { Queue( ~OnCloseCustomersDataView()~ ); }
	
	return TRUE;
}



NUMERIC ChangeRecord()
{
	if ( !CustomersDataView( GetChangedRow,ChangedCustomer,OrigCustomer,ChangedRow,IsNewRow ) )
		{ return Warning(  Translate(UIMessages,NoRowsSelected) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$con.ChangedCustomer[ID]>~ == ~~ )
		{ return Warning( Translate(CustomersMessages,BlankCustomerID) ); }

	Key = STR ( ID = '<$con.OrigCustomer[ID]>' );
	Query = ~Select * From Customers Where <Key>~;

	if ( <IsNewRow> )
	{
		if (!AddNew( ChangedCustomer,OrigCustomer,Query,Key ))
			{ return FALSE; }
	}
	else
	{
		if (!UpdateExisting( ChangedCustomer,OrigCustomer,Query,Key ))
			{ return FALSE; }
	}

	return TRUE;
}


NUMERIC AddNew( &ChangedCustomer,&OrigCustomer,&Query,&Key )
{
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( UpdateFrom,ChangedCustomer,~<Key>~,TRUE ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
	}

	CustomersDataView( CommitChanges );

	return TRUE;
}


NUMERIC UpdateExisting( &ChangedCustomer,&OrigCustomer,&Query,&Key )
{
	// If the customer ID hasn't changed, we only need to do an update of the fields
	// that have changed in the customers table.
	// If the customer ID has changed, we will insert a new row into the customers
	// table using the existing customer data along with the new customer id.  Then
	// we can update all of the orders in the orders table, CustomerProducts, and Products
	// tables that refer to this customer ID.
	// Finally, we can remove the old customer record from the customers table.
	// Since this is all done within a transaction, it will all be transparent to
	// the user.  Things need to be handled this way because of the foreign key
	// constraints placed on the customer ID.
	if ( ~<$con.OrigCustomer[ID]>~ == ~<$con.ChangedCustomer[ID]>~ )
	{
		if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
		}

		if ( !List( UpdateFrom,ChangedCustomer,~<Key>~,FALSE ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate );
			return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
		}
	}
	else
	{
		if ( !PGenConList( List,Connect,Cursor,Keyset,BeginTransaction,Query,~<Query>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
		}

		origCustomerID = ~<$con.OrigCustomer[ID]>~;
		OrigCustomer( SetValue,ID,~<$con.ChangedCustomer[ID]>~);

		if ( !List( UpdateFrom,OrigCustomer,~<Key>~,TRUE ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate,RollBackTransaction );
			return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
		}

		List( GetConnection,dBase );

		// *Update Orders table
		cmd = ~Update Orders SET CustomerID = '<$con.ChangedCustomer[ID]>' Where CustomerID = '<origCustomerID>'~;
		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr,RollBackTransaction );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		// *Update CustomerProducts table
		cmd = ~Update CustomerProducts SET CustomerID = '<$con.ChangedCustomer[ID]>' Where CustomerID = '<origCustomerID>'~;
		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr,RollBackTransaction );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		// *Update Studios table
		cmd = ~Update Studios SET ID = '<$con.ChangedCustomer[ID]>' Where ID = '<origCustomerID>'~;
		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr,RollBackTransaction );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}


		// *Update Products table
		cmd = ~Update Products SET CustomerID = '<$con.ChangedCustomer[ID]>' Where CustomerID = '<origCustomerID>'~;
		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr,RollBackTransaction );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		cmd = ~Delete From Customers Where ID = '<origCustomerID>'~;
		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr,RollBackTransaction );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		if ( !dBase( CommitTransaction ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( DBMessages,CommitFailed ) );
		}
		
		OrigCustomer( NotifyAffectedDocuments,CustomerID );
	}

	// List( RefreshConnectionCache );

	CustomersDataView( CommitChanges );

	return TRUE;
}


VOID RecursiveDirectoryDelete( path,search,&count )
{
	count = 0;

	MoreFiles = findfile( aDirectoryEntry,Find,~<path>\<search>~ );

	while ( $Morefiles )
	{
		Morefiles = aDirectoryEntry( Next );

		aDirectoryEntry( Get,Path,aPath );
			
		if ( aDirectoryEntry( Dots ) )
			continue;
			
		if ( aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		{	
			RecursiveDirectoryDelete( ~<aPath>~,~<search>~,count );
			
			Directory( Remove,~<aPath>~ );
			continue;
		}

		if ( !Files( Delete,~<aPath>~ ) )
		{
			GetLastError( ErrorString,msg );
			Warning( ~<msg>~ );
			return;
		}
		++count;
	}
}



NUMERIC CloseWindowOfPath( Path )
{
	Count = Index = 0;

	app( ThisApp,MessagePump,3 );

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( Window( GETNEXT,aView ) )
		{
			aView( GET,ViewType,ViewType );

			if ( ~<ViewType>~ == ~ImageEditView~ )
			{
				aView( GetDocumentPath,DocumentPath );

				if ( ~<DocumentPath>~ == ~<Path>~ )
				{ 
					Window( CloseWindow );
					ThisApp( MessagePump,3 );
					++Count;
					Index = 0;
				}
			}
		}
	}

	ThisApp( MessagePump,0 );

	return TRUE;
}


Include: ~Utilities2~;  // Needed for doNewWay() in DeleteOrder.txt
Include: ~DeleteOrder~;

NUMERIC CanDeleteCustomer( &dBase,CustomerID )
{
	if (SimilarStr(~<CustomerID>~,~Product~))
	{
		return Warning( Translate(CustomersMessages,CantDeleteCustomerProduct,~<Query>~,~<theErr>~) );	
	}
	
	Query = ~Select ID From Orders Where CustomerID = '<CustomerID>'~;
	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}
	

	while ( List( GetNext,Order ) )
	{
		OrderID = ~<$pcon.Order[ID]>~;

		result = CanDeleteOrder(dBase,~<OrderID>~);

		if (<result> != TRUE)
		{ return <result>; }

	}

	return TRUE;
}



NUMERIC DeleteCustomersItemsAndImages( &dBase,CustomerID )
{
	Query = ~Select ID From Orders Where CustomerID = '<CustomerID>'~;

	if ( !PGenConList( List,Connection,dBase,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	while ( List( GetNext,Order ) )
	{
		OrderID = ~<$pcon.Order[ID]>~;

		CustomersDataWindow( StatusBar,Text,Translate(CustomersMessages,RemovingImagesItems,~<OrderID>~) );

		result = DeleteOrdersItemsAndImages( dBase,~<OrderID>~,TRUE,TRUE,TRUE );  // TRUE - Delete Image Files, TRUE - delete RawImage files, TRUE - delete KPARS original images
		if (<result> != TRUE)
		{ return <result>; }
	}

	return TRUE;
}


// [Delete]
// Deletes: Order (all records for Order), CustomerProducts (cross reference), and Customer records
// Does Not Delete: Customer unique products, and ShootDescription

NUMERIC DeleteRecord()
{
	if ( !CustomersDataView( GetSelectedRows,CustomersToDelete ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	count = CustomersToDelete( ChildCount );

	if ( MessageBox( Translate(CustomersMessages,RemovingAllForCust,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	if ( MessageBox( Translate(CustomersMessages,RemovingAllForCust2),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	StringList( RowsToDelete,New );

	num = 1;
	while ( CustomersToDelete( GetNext,Customer ) )
	{
		// Determine if the customer can be deleted.  Open image and job files related
		// to the customer would be a reason that deleting a customer could fail since
		// we try to remove all order, order image and order item information and files
		// associated with the customer.
		result = CanDeleteCustomer(dBase,~<$con.Customer[ID]>~);
		if (<result> == TRUE)
		{
			Log( Session,~Deleting Customer <$con.Customer[ID]>~  );
			if ( DeleteCustomersItemsAndImages( dBase,~<$con.Customer[ID]>~ ) )
			{
				CustomersDataWindow( StatusBar,Text,Translate(CustomersMessages,DeletingCustomer,~<$con.Customer[ID]>~) );

				dBase( Cmd,~Delete From CustomerProducts Where CustomerID = '<$con.Customer[ID]>'~ );

				dBase( Cmd,~Delete From Studios Where ID = '<$con.Customer[ID]>'~ );

				dBase( Cmd,~Delete From ImageAdjustments Where CustomerID = '<$con.Customer[ID]>'~ );

				dBase( Cmd,~Update Products Set CustomerID = NULL Where CustomerID = '<$con.Customer[ID]>'~ );

				dBase( Cmd,~Delete From ProShotsProducts Where CustomerID = '<$con.Customer[ID]>'~ );

				// *Delete the Customers record			 
				Cmd = ~Delete From Customers Where ID = '<$con.Customer[ID]>'~;
				Log( Session,~Deleting Records: <Cmd>~  );

				if ( !dBase( Cmd,~<Cmd>~ ) )
				{
					dBase( GetErrorDescription,theErr );
					return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
				}

				RowsToDelete( AddString,CustomersToDelete(GetCurrentPosition) );

				dBase( LogActivity,Msg,~Deleted customer <$con.Customer[ID]>~,Type,Info );
			}
			else
			{
				if ( <num> == <count> )
				{
					MessageBox( Translate(CustomersMessages,CantDeleteCust1,~<$con.Customer[ID]>~),OK );
				}
				else
				{
					if ( MessageBox( Translate(CustomersMessages,CantDeleteCustContinue1,~<$con.Customer[ID]>~),YESNO ) != YES)
					{
						break;
					}
				}
			}
		}
		else
		{
			if (<result> == -1)
			{
				if ( <num> == <count> )
				{
					MessageBox( Translate(CustomersMessages,CantDeleteCust2,~<$con.Customer[ID]>~),OK );
				}
				else
				{
					if ( MessageBox( Translate(CustomersMessages,CantDeleteCustContinue2,~<$con.Customer[ID]>~),YESNO ) != YES)
					{
						break;
					}
				}
			}
			else if (<result> == -2)
			{
				if ( <num> == <count> )
				{
					MessageBox( Translate(CustomersMessages,CantDeleteCust3,~<$con.Customer[ID]>~),OK );
				}
				else
				{
					if ( MessageBox( Translate(CustomersMessages,CantDeleteCustContinue3,~<$con.Customer[ID]>~),YESNO ) != YES)
					{
						break;
					}
				}
			}
			else
			{
				if (~<$con.Customer[ID]>~ != Product) // already displayed that message
				{
					if ( <num> == <count> )
					{
						MessageBox( Translate(CustomersMessages,CantDeleteCust4,~<$con.Customer[ID]>~),OK );
					}
					else
					{
						if ( MessageBox( Translate(CustomersMessages,CantDeleteCustContinue4,~<$con.Customer[ID]>~),YESNO ) != YES)
						{
							break;
						}
					}
				}
			}
		}

		++num;
	}

	CustomersDataView( DeleteRows,SelectedIndex,RowsToDelete );

	CustomersToDelete( NotifyAffectedDocuments,OrderID );
	CustomersToDelete( NotifyAffectedDocuments,ID );

	return TRUE;
}


NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	ID = UniqueCustomerID();

	NewRow( Set,ID,~<ID>~ );

	RowBeingAdded = CustomersDataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate(UIMessages,AddRowFailed) ); }

	CustomersDataView( SetActiveCell,<RowBeingAdded>,~ID~ );

	return TRUE;
}


NUMERIC AllOptions()
{
	return CustomersDataView( DisplayMenu,CustomersListViewMenu,0,0  );
}

NUMERIC RightClickInListView()
{
	return CustomersDataView( DisplayMenu,CustomersListViewMenu );
}


VOID OnKeydown()
{
	GenCon( View,GetActiveView );

	Key = View( GetLastKeyStateless,KeyString );
	
	if (  !View( PerformMenuAction,CustomersListViewMenu,~<KeyString>~ ) )
	{
		CustomersDataView( DisplayMenu,CustomersListViewMenu,0,0  );
	}
}


NUMERIC NotImplementedYet( what )
{
	MessageBox( Translate(UIMessages,NotImplemented,~<what>~) );
	return TRUE;
}


VOID RememberWindowLocation( &theWindow,Item )
{
	theWindow( SaveWindowLocation,WindowLocation,~<Item>~ );
}

FirstTime = TRUE;

NUMERIC Init( WhichCustomers,DocumentQuery )
{
	CustomersDataWindow( Set,Title,~<WhichCustomers>~ == ~~ ? ~Customer Data~ : ~Customer Data - <WhichCustomers>~ );

	Global( WhichCustomers,DocumentQuery );

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !PGenConList( List,Connect,CursorLocation,Client,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{ 
			List(GetErrorDescription,0,theErr);
			Error( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
		}

		Count = List( NumEntries );

		if ( FALSE )
		{
			if ( MessageBox( Translate(DBMessages,LargeQuery,~<DocumentQuery>~,~<Count>~),YESNO ) != YES )
			{
				Exit();
			}
		}

		StatusBarText( Translate(CustomersMessages,ReadingCustomers,<Count>) );

		//SetDocumentData( List(GetObject), TRUE );
		SetDocumentData( List(GetObject) );

		WindowLocation = ~<$UserSettings.WindowLocation[CustomersList]>~;

		if ( ~<WindowLocation>~ != ~~ )
			{ CustomersDataWindow( Set,Position,~<WindowLocation>~ ); }

		DefineMenu( FALSE );

		if ( !CustomersDataWindow( CreateWindow,~Customers~ ) )
			{ Error( Translate(UIMessages,CreateWindowFailed,~Customers~) ); }

		return TRUE;
	}

	Document( Doc,This,SetTitle,~<WhichCustomers>~ == ~~ ? ~Customer Data~ : ~Customer Data - <WhichCustomers>~ );

	return RefreshListView( TRUE );
}




NUMERIC UpdateFromArchive()		// NOT USED
{
	if ( !CustomersList( SourceIsAfile ) )
		{ return Warning( Translate(~This recordset is not from a file~) ); }

	CustomersList( SetConnection,db );

	if ( !CustomersList( UpdateBatch ) )
	{
		db( GetErrorDescription,theErr );
		return Warning( Translate( ~Update Batch failed. <theErr>~ ) );
	}

	return TRUE;
}


NUMERIC InitAddNew( WhichCustomers,Query )
{
	Query = ~Select * From Customers where ID = 'NULL'~;

	if ( Init( New,~<Query>~ ) )
	{
		AddRecord();

		if ( CustomersDataView( GetSelected,SelectedRows ) )
		{
			if ( SelectedRows( GetNext,Row ) )
			{
				DocumentQuery = ~Select * From Customers Where ID = '<$con.Row[ID]>'~;
			}
		}

		return TRUE;
	}

	return FALSE;
}



STR GetAFile( Filter )
{
	if ( !FileDialog( PATH,theFile,FILTER,~<Filter>~,Open ) )	
		{ return FALSE; }										// ASK THE USER TO FIND THE FILE

	if ( !File( DataFile, OPEN, ~<theFile>~, READ ) )	
	{ 
		Warning( Translate(UIMessages,CouldNotOpen,~<theFile>~) ); 
		return ~~;
	}		
}



NUMERIC ArchiveAs()	// NOT USED
{
	if ( !FileDialog( PATH,theFile,FILTER,~*.*~,SAVE ) )	// ASK THE USER TO FIND THE FILE
		{ return FALSE; }										

	WaitCursor( Begin );

	Files( Delete,~<theFile>~ );

	if ( Files( FileExists,~<theFile>~ ) )
	{
		WaitCursor( End );
		return Warning( Translate( ~Could not delete <theFile>~ ) );
	}

	success = CustomersList( Save,~<theFile>~ );

	WaitCursor( End );

	PopupMsg( Translate( ~Archive Complete~ ) );

	return TRUE;
}


NUMERIC Archive()	// NOT USED
{
	if ( CustomersList( SourceIsAfile ) )
	{
		WaitCursor( Begin );

		if ( !CustomersList( Save ) )
		{
			WaitCursor( End );
			return Warning( Translate( ~Save operation failed~ ) );
		}

		WaitCursor( End );

		PopupMsg( Translate( ~Archive Complete~ ) );
	}

	return TRUE;
}


NUMERIC Search()
{
	Actions = ACTIONS ( Doc( ~Search~ Open SearchDoc "Search( Customers );" ) );
	return PerformActions( Actions );
}


NUMERIC SearchXref()
{
	Title = ~Customers with Product Cross References~;
	Query = ~Select * From Customers where ID IN ( Select Distinct CustomerID From CustomerProducts ) Order By ID~;
	Actions = ACTION DOC  ( CustomersDoc Open CustomersDoc "Init( ~<Title>~,~<Query>~ );" );
	return PerformActions( Actions );
}


NUMERIC OnCloseCustomersDataView()
{
	if ( CustomersDataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	CustomersDataWindow( ForceCloseWindow );

	return TRUE;
}



NUMERIC SaveAllChanges()
{
	while ( CustomersDataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !CustomersDataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( Translate(UIMessages,CancelChanges),YESNO ) != YES )
		{ return FALSE; }
				
	while ( CustomersDataView( PendingChanges ) )
	{
		CustomersDataView( RollBackChanges );
	}

	return TRUE;
}

NUMERIC RefreshComboBox()
{
	CustomersDataView( GetActiveCell,row,col );

	GenCon( Fields,Is,CustomersTableDefinition(GetReferenceTo,Fields) );

	CustomersDataView( GetColumnName,<col>,ColumnName );

	Fields( GetByName,<ColumnName>,ColumnDefinition );

	if ( ~<ColumnName>~ == ~ABSTRACTPROFILE~ )
	{
		UpdateAbstractProfileCombo(ColumnDefinition,<row>,<col>);
	}
	return TRUE;
}

NUMERIC UpdateAbstractProfileCombo( &ColumnDefinition,Row,Col )
{
	Query = STR ( Select Name From Profiles Where Type = 'ColorEffects' Order By Name );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed.\n\n<Query>\n\n<theErr>~ ) );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,Setups,Name );
		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,Setups(GetCopyOf) );

		CustomersDataView( SetComboBox,ColumnDefinition,<Col> );
	}

	return TRUE;
}



Include: ~ExportSelectedToFile~;


VOID DefineMenu( RecordSetIsAFile )
{
	Define:	CustomersListViewMenu Using DDMenuDef AsSymbol CustomersListViewMenu  // called once
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			Define:	SeeOrdersForCustomers	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuOpen )
						IDText		~ID~
						ActionsText  ACTION Exec ( OpenSelected() )

			Define:	AddRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuAdd )
						IDText		~ID~
						ActionsText  ACTION Exec ( AddRecord() )
						AcceleratorKey	~N~

			Define:	Search	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuFind )
						IDText		~ID~
						ActionsText  ACTION Exec ( Search() )
						//AcceleratorKey	~S~
						
	

			Define:	NULL1 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SaveAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuSaveChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( SaveAllChanges() )

			Define:	ForgetAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuCancelChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( RollBackAllChanges() )

			Define:	DeleteRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuDelete )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteRecord() )

			Define:	Refresh	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuRefresh )
						IDText		~ID~
						ActionsText  ACTION Exec ( RefreshListView(TRUE) )

			Define:	NULL2 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	NewOrderFor	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( CustomersMessages,MenuAddOrderForCust ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( NewOrderForCustomer() )

			Define:	SeeProductsForCustomers	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( CustomersMessages,ProductsForCustomers ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeProductsForCustomers() )

			Define:	NULL3 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SeeCustomersProducts	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( CustomersMessages,CustomersProducts ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeCustomersProducts() )
						
			Define:	SearchXRef	using	DDMenuItemDef
				Fields:	Text		~Find all customers with product cross references~
						IDText		~ID~
						ActionsText  ACTION Exec ( SearchXref() )


			Define:	NULL4 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	StudioInfo	using	DDMenuItemDef
				Fields:	Text		Translate( Translate( CustomersMessages,StudioInfo ) )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeStudioInfo() )


			Define:	NULL3 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	Export	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuExport )
						IDText		~ID~
						ActionsText  ACTION Exec ( ExportSelectedToFile(CustomersDataview,Customers) )

			IF 1
			{
				Define:	RememberWindowLoc	using	DDMenuItemDef
					Fields:	Text		Translate( UIMenuText,RememberWindowLoc )
							IDText		~ID~
							ActionsText  ACTION Exec ( RememberWindowLocation(CustomersDataWindow,CustomersList) )	
			}
		}

	Global( CustomersListViewMenu );
}




Include: ~DefineStdGridButtons~;

Include: ~FileBrowseButtonsInGridView~;


if ( !GenCon( CustomersTableDefinition,GetFrom,Customers,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The Customers Table is not properly defined~ ); }

ButtonWidth = 55;  ButtonHeight = 20;  hGap = 1; vGap = 2;

Define: CustomersDataWindow Using DDWinDef
	Fields:		Title					Translate(CustomersMessages,Title)
				Position				0 0 90 35
				IsPositionPercent		T
				TypeName				SplitterWnd
				SplitterRows			~2 10 90~
				SplitterColumns			1
				EnableStatusBar			T

	Contains:	INLISTORDER
	{
		Define: ControlView Using DDViewDef AsSymbol ControlView
			Fields:			ViewType				FormView
							KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
							HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "CustomersData.htm" )
				Contains:
				{
					position = DefineStdGridButtons(Customer) + 10;

					Define: AddOrderButton Using DDWinCtrlDef AsSymbol AddOrderButton
						Fields:	GENCONNAME		This
								DACTIONSTEXT	ACTION EXEC ( NewOrderForCustomer() )
								POSITION		$position + $hGap, $vGap $ButtonWidth $ButtonHeight
								TEXT			Translate( CustomersMessages,AddOrder )
								TOOLTIP			Translate( CustomersMessages,ToolAddOrder )
								TYPENAME		BUTTON
								//HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "CustomersFindButton.htm" )
				}
			
		Define: CustomersDataView Using DDViewDef AsSymbol CustomersDataView
			Fields:	ViewType				~ListView~
					GridControlTypes		CustomersTableDefinition( GetReferenceTo,Fields )
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					DoubleClickActionsText	ACTION Exec ( SeeOrdersForCustomer() )
					KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
					DropActionsText			ACTION Exec ( HandleDrop() )
					CloseActionsText		ACTION Call ( OnCloseCustomersDataView() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "CustomersData.htm" )
					ViewDataType			Text
					ButtonClickActionsText	ACTION Exec ( OnButtonClick(CustomersDataView,Translate( ~Find the desired file ...~ ),~<$App.ShareDirectory>~) )
					ComboBoxActionsText		ACTION Call ( RefreshComboBox() )
					//LoadAsync				T
	}
	

OptionalInclude( ~<$App.ShareDirectory>\Scripts\ScriptOverrides\CustomersDoc.txt~ );

