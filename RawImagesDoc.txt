Include: ~Classes\BaseGrid~;

VOID EditRawImages::EditRawImages()					// CONSTRUCTOR
{
	TableName = ~RawImages~;
	DocumentQuery = ~Select * from <TableName> Order By OrderID,Roll,Frame~;
	Title = ~Raw Images~;
	WindowWidth = 75; WindowHeight = 25;
	HelpFile = ~KPISHelpFile~;
	HelpPage = ~RawImages.htm~;
}

STR EditRawImages::GetKey( &Item )	{ return ~OrderID = '<$con.Item[OrderID]>' AND Roll = '<$con.Item[Roll]>' AND Frame = '<$con.Item[Frame]>'~; }  // PRIMARY KEY FOR THE TABLE

NUMERIC EditRawImages::ChangeRecordAudits( &Changed )		// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[OrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  OrderID cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Roll]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Roll cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Frame]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Frame cannot be blank.~ ) ); }

	return TRUE;
}


NUMERIC EditRawImages::UpdateICCProfileCombo( &ColumnDefinition,Row,Col )
{
	Query = STR ( Select Name From Profiles Where Type = 'Input' Or Type = 'WorkingSpace' Order By Name );

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		List( GetErrorDescription,0,theErr,ClearErrors );
		return Warning( ~Database query failed: <Query>. <theErr>~ );
	}

	if ( List( NumEntries ) > 0 )
	{
		List( MakeStringList,ICCProfiles,Name );

		ColumnDefinition( DeleteReference,ChoiceList,Set,ChoiceList,ICCProfiles(GetCopyOf) );

		DataView( SetComboBox,ColumnDefinition,<Col> );
	}

	return TRUE;
}

NUMERIC EditRawImages::UpdateImageTypeCombo( &ColumnDefinition,Row,Col ) { return TRUE; }
NUMERIC EditRawImages::UpdateRotationCombo( &ColumnDefinition,Row,Col ) { return TRUE; }

VOID EditRawImages::Init( theTitle,Query )
{
	Title = ~<theTitle>~ == ~~ ? ~Raw Images Data~  : ~<theTitle>~;
	DocumentQuery = ~<Query>~;
		
	BaseGrid::Init();
}

NUMERIC EditRawImages::DefineStdGridButtons( Subject )
{
	xPosition = $hGap;

	if ( MethodDefined( AllOptions ) )
	{
		Define: AllOptionsButton Using DDWinCtrlDef AsSymbol AllOptionsButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.AllOptions() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~Options~ )
					TOOLTIP			Translate( ~See all options~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap + 10;
	}

	if ( MethodDefined( OpenSelected ) )
	{
		Define: OpenButton Using DDWinCtrlDef AsSymbol OpenButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.OpenSelected() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~&Open~ )
					TOOLTIP			Translate( ~Display all of the selected <Subject>s~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap;
	}

	if ( MethodDefined( Search ) )
	{
		Define: FindButton Using DDWinCtrlDef AsSymbol FindButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.Search() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~&Find~ )
					TOOLTIP			Translate( ~Find a new set of <Subject>s~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap + 10;
	}

	if ( MethodDefined( SaveAllChanges ) )
	{
		Define: SaveButton Using DDWinCtrlDef AsSymbol SaveButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.SaveAllChanges() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~&Save~ )
					TOOLTIP			Translate( ~Save All <Subject> Changes~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap;
	}

	if ( MethodDefined( RollBackAllChanges ) )
	{
		Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.RollBackAllChanges() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~Cancel~ )
					TOOLTIP			Translate( ~Cancel All <Subject> Changes~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap;
	}

/*
	if ( MethodDefined( DeleteRecord ) )
	{
		Define: DeleteButton Using DDWinCtrlDef AsSymbol DeleteButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.DeleteRecord(TRUE) )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~&Delete~ )
					TOOLTIP			Translate( ~Delete the selected <Subject>s~ )
					TYPENAME		BUTTON ;

		xPosition += $StdButtonWidth + $hGap;
	}
*/
	if ( MethodDefined( RefreshListView ) )
	{
		Define: RefreshButton Using DDWinCtrlDef AsSymbol RefreshButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.RefreshListView() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~&Refresh~ )
					TOOLTIP			Translate( ~Refresh the list of <Subject>s~ )
					TYPENAME		BUTTON ;

			xPosition += $StdButtonWidth + $hGap;
	}

	if ( MethodDefined( ProcessSubjectInfo ) )
	{
		Define: ProcessSubjectInfoButton Using DDWinCtrlDef AsSymbol ProcessSubjectInfoButton
			Fields:	GENCONNAME		This
					DACTIONSTEXT	ACTION EXEC ( <THIS>.ProcessSubjectInfo() )
					POSITION		$xPosition, $vGap $StdButtonWidth $ButtonHeight
					TEXT			Translate( ~Subject~ )
					TOOLTIP			Translate( ~Process the data as SubjectInfo~ )
					TYPENAME		BUTTON ;

			xPosition += $StdButtonWidth + $hGap;
	}

	if ( MethodDefined( DisplayProcesses ) )
	{
		if ( ADO( database,Connect,RecordCountFor,~Select Name From Tasks Where Purpose = '<Subject>Process'~ ) )
		{
			Define: ProcessButton Using DDWinCtrlDef AsSymbol ProcessButton         
				Fields: TypeName		Button
						Text			Translate(~Process~)
						TOOLTIP			Translate( ~Process the list of <Subject>s~ )
						Position        $xPosition, $vGap $StdButtonWidth $ButtonHeight
						DActionsText	ACTION EXEC ( <THIS>.DisplayProcesses( ~<Subject>Process~,<xPosition>,<vGap>+<ButtonHeight> ) );	

				xPosition += $StdButtonWidth + $hGap;
		}
	}

	return $xPosition;
}

NUMERIC EditRawImages::DeleteRecord()
{
	MessageBox( Translate( ~Sorry, but you can not delete records in this view!~ ));

	return TRUE; // DataWindow( StatusBar,Text,Translate(BaseGridMessages,Deleted,<Count>) );
}

VOID EditRawImages::AddStdMenuItems()	// OVERRIDE TO REMOVE THE STANDARD EDITS
{
	AddMenuItem( DataView(PendingChanges),FALSE,Translate(UIMenuText,MenuSaveChanges),ACTION EXEC ( <THIS>.SaveAllChanges() ) );
	AddMenuItem( DataView(PendingChanges),FALSE,Translate(UIMenuText,MenuCancelChanges),ACTION EXEC ( <THIS>.RollBackAllChanges() ) );
	AddMenuItem( TRUE,	FALSE,Translate(UIMenuText,MenuRefresh),ACTION EXEC ( <THIS>.RefreshListView() ) );
}


NUMERIC Init( theTitle,Query )
{
	Class( EditRawImages,Extends,BaseGrid );

	EditRawImages( New,Grid );

	Grid.DefineWindow();
	Grid.Init( ~<theTitle>~,~<Query>~ );

	return Global( Grid );
}
