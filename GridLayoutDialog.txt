
DialogWidth = 300;
DialogHeight = 420;
LeftMargin = 20;
MiddleMargin = 200;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 200;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;
hGap = vGap = 5;

LeftOffset = 120;
EditTextWidth = 60;
SEditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 50;
ButtonHeight = 20; 
VerticalSeparation = 30;
InitialVerticalPosition = 70;
MaxRows = 60;


// get a copy of GridLayoutParameters from the tree, which was loaded at startup from
// the user settings table
GenCon(GridLayoutParameters,CopyFrom,GridLayoutParameters,[Gencons]);

VOID CreateDialog()
{

	Define: GridLayoutDialog Using DDWinDef
	fields: Position 100 100 <DialogWidth> <DialogHeight>
			Title ~Create New Nodes~
			TypeName ~Dialog~
			OActionsText ACTION EXEC ( CancelPressed() )
			HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "GridLayoutProperties.htm" )

	Contains: INLISTORDER
	{

		ypos = 10;

/*		Define: UnitsStatic Using DDWinCtrlDef AsSymbol UnitsStatic
		fields:	TypeName StaticText
				Text ~Units:~
				Position $LeftMargin  <ypos> 100 20

		Define: UnitsComboBox Using DDWinCtrlDef AsSymbol UnitsComboBox
		fields:	TypeName SComboBox
				GenConField ~Units~
				Position $LeftMargin +$LeftOffset  <ypos>  	100,80
				DActionsText ACTION EXEC ( UpdateUnits2(); )
				Tooltip ~Select your preferred units~;

		ypos = <ypos> + 30;
*/
		Define: LeftMarginStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Left Margin:~
				Position $LeftMargin  <ypos> 100 20

		Define: LeftMarginEditText Using DDWinCtrlDef AsSymbol LeftMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~LeftMargin:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.~
				DisallowedChars ~-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the left margin~;

		Define: LeftMarginUnitsStatic Using DDWinCtrlDef AsSymbol LeftMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position LeftMarginEditText(GetRight,Position) + 10, LeftMarginEditText(GetTop,Position)+ 5 20 30;

		ypos = <ypos> + 30;
		Define: RightMarginStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Right Margin:~
				Position $LeftMargin  <ypos> 100 50

		Define: RightMarginEditText Using DDWinCtrlDef AsSymbol RightMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~RightMargin:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.~
				DisallowedChars ~-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the right margin~;

		Define: RightMarginUnitsStatic Using DDWinCtrlDef AsSymbol RightMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position RightMarginEditText(GetRight,Position) + 10, RightMarginEditText(GetTop,Position)+ 5 20 30;

		ypos = <ypos> + 30;
		Define: TopMarginStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Top Margin:~
				Position $LeftMargin  <ypos> 100 20

		Define: TopMarginEditText Using DDWinCtrlDef AsSymbol TopMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~TopMargin:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				DisallowedChars ~-~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the top margin~;

		Define: TopMarginUnitsStatic Using DDWinCtrlDef AsSymbol TopMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position TopMarginEditText(GetRight,Position) + 10, TopMarginEditText(GetTop,Position)+ 5 20 30;

		ypos = <ypos> + 30;
		Define: BottomMarginStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Bottom Margin:~
				Position $LeftMargin  <ypos> 100 20

		Define: BottomMarginEditText Using DDWinCtrlDef AsSymbol BottomMarginEditText
		fields:	TypeName MaskedEditText
				GenConField ~BottomMargin:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.~
				DisallowedChars ~-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the bottom margin~;

		Define: BottomMarginUnitsStatic Using DDWinCtrlDef AsSymbol BottomMarginUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position BottomMarginEditText(GetRight,Position) + 10, BottomMarginEditText(GetTop,Position)+ 5 20 30;

		ypos = <ypos> + 30;
		Define: RowsStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Rows:~
				Position $LeftMargin  <ypos> 100 20

		Define: RowsEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~Rows:~
				Position $LeftMargin +$LeftOffset  <ypos>  50 20
				Mask		 ~######~
				AllowedChars ~~
				DisAllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the number of rows of nodes~;

		ypos = <ypos> + 30;
		Define: ColumnsStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Columns:~
				Position $LeftMargin  <ypos> 100 20

		Define: ColumnsEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~Columns:~
				Position $LeftMargin +$LeftOffset  <ypos>  50 20
				Mask		 ~######~
				AllowedChars ~~
				DisAllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the number of columns of nodes~;

		ypos = <ypos> + 30;
		Define: ImageNodeCheckBox Using DDWinCtrlDef AsSymbol ImageNodeCheckBox
		fields:	TypeName CheckBox
				GenConField ~IsImageNode:~
				Position $LeftMargin  <ypos>  150 20
				Text	~Image Node~
				DActionsText ACTION EXEC ( DoImageNodeCheckBoxStuff() )	
				Tooltip ~Check if you want image nodes~;

		ypos = <ypos> + 30;
		Define: TextNodeCheckBox Using DDWinCtrlDef AsSymbol TextNodeCheckBox
		fields:	TypeName CheckBox
				GenConField ~IsTextNode:~
				Position $LeftMargin  <ypos>  150 20
				Text	~Text Node~	
				DActionsText ACTION EXEC ( DoTextNodeCheckBoxStuff() )	
				Tooltip ~Check if you want text nodes~;

		ypos = <ypos> + 30;
		Define: TextRightOffsetStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Horizontal Text Gap %:~
				Position $LeftMargin  <ypos> 110 20

		Define: TextRightOffsetEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~TextLeft:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the offset from the left of the image node to the left of the text node as a percentage of the image node width~;

		ypos = <ypos> + 30;
		Define: TextWidthStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Text Node Width %:~
				Position $LeftMargin  <ypos> 100 20

		Define: TextWidthText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~TextWidth:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter text node width as a percentage of image node width~;

		ypos = <ypos> + 30;
		Define: TextTopOffsetStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Vertical Text Gap %:~
				Position $LeftMargin  <ypos> 100 20

		Define: TextTopOffsetEditText Using DDWinCtrlDef
		fields:	TypeName MaskedEditText
				GenConField ~TextTop:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the offset from the bottom of the image node to the top of the text node as a percentage of the image node height~;

		ypos = <ypos> + 30;
		Define: TextHeightStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Text Node Height %:~
				Position $LeftMargin  <ypos> 100 20

		Define: TextHeightText Using DDWinCtrlDef AsSymbol TextHeightText
		fields:	TypeName MaskedEditText
				GenConField ~TextHeight:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.-~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter text node height as a percentage of image node height~;

/*		ypos = <ypos> + 30;
		Define: AlignGridCheckBox Using DDWinCtrlDef
		fields:	TypeName CheckBox
				GenConField ~AlignGridToNodes~
				Position $LeftMargin  <ypos>  250 20
				Text	~Enable Grid and Calculate Grid Positions~	
				Tooltip ~Check if you want to calculate the grid lines on node edges and enable the grid~;
*/
		ypos = <ypos> + 30;
		Define: HorizGapStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Minimum Horizontal Gap:~
				Position $LeftMargin  <ypos> 120 50

		Define: HorizGapEdit Using DDWinCtrlDef AsSymbol HorizGapEdit
		fields:	TypeName MaskedEditText
				GenConField ~HorizGap:~
				Position $LeftMargin +130  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the minimum horizontal gap between nodes.~;

		Define: HorizGapUnitsStatic Using DDWinCtrlDef AsSymbol HorizGapUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position HorizGapEdit(GetRight,Position) + 10, HorizGapEdit(GetTop,Position)+ 5 20 30;

		ypos = <ypos> + 30;
		Define: VertGapStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Minimum Vertical Gap:~
				Position $LeftMargin  <ypos> 120 20

		Define: VertGapEdit Using DDWinCtrlDef AsSymbol VertGapEdit
		fields:	TypeName MaskedEditText
				GenConField ~VertGap:~
				Position $LeftMargin +130  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the minimum vertical gap between nodes~;


		Define: VertGapUnitsStatic Using DDWinCtrlDef AsSymbol VertGapUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position VertGapEdit(GetRight,Position) + 10, VertGapEdit(GetTop,Position)+ 5 20 30;

		ypos = <ypos> + 30;
		Define: HoldAspectRatioCheckBox Using DDWinCtrlDef
		fields:	TypeName CheckBox
				GenConField ~HoldAspectRatio:~
				Position $LeftMargin  <ypos>  150 20
				Text	~Hold Aspect Ratio~	
				Tooltip ~Check if you to want the new nodes to have the aspect ratio of the Maximum Width / Maximum Height values~;

		ypos = <ypos> + 30;
		Define: AspectRatioWidthStatic Using DDWinCtrlDef
		fields:	TypeName StaticText
				Text ~Maximum Width:~
				Position $LeftMargin  <ypos> 100 20

		Define: AspectRatioWidthEdit Using DDWinCtrlDef AsSymbol AspectRatioWidthEdit
		fields:	TypeName MaskedEditText
				GenConField ~MaxWidth:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				DisallowedChars ~-~
				Mask		 ~############~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the maximum width of an image node~;

		Define: AspectRatioWidthUnitsStatic Using DDWinCtrlDef AsSymbol AspectRatioWidthUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position AspectRatioWidthEdit(GetRight,Position) + 10, AspectRatioWidthEdit(GetTop,Position)+ 5 20 20;

		ypos = <ypos> + 30;
		Define: AspectRatioHeightStatic Using DDWinCtrlDef AsSymbol AspectRatioHeightStatic
		fields:	TypeName StaticText
				Text ~Maximum Height:~
				Position $LeftMargin  <ypos> 100 20

		Define: AspectRatioHeightEdit Using DDWinCtrlDef AsSymbol AspectRatioHeightEdit
		fields:	TypeName MaskedEditText
				GenConField ~MaxHeight:~
				Position $LeftMargin +$LeftOffset  <ypos>  $EditTextWidth 20
				Mask		 ~############~
				DisallowedChars ~-~
				AllowedChars ~.~
				PromptChar	 ~ ~		
				InsertOn	~T~	
				Tooltip ~Enter the maximum height of an image node~;

		Define: AspectRatioHeightUnitsStatic Using DDWinCtrlDef AsSymbol AspectRatioHeightUnitsStatic
		fields:	TypeName StaticText
				Text ~in.~
				Position AspectRatioHeightEdit(GetRight,Position) + 10, AspectRatioHeightEdit(GetTop,Position)+ 5 20 20;

		ypos = <ypos> + 30;

		Define: StyleStaticText Using DDWinCtrlDef AsSymbol StyleStaticText 
			Fields: TYPENAME        StaticText  
					POSITION		$LeftMargin  AspectRatioHeightStatic(GetBottom,Position) + 10 60, 80
					Text			~Style:~

		Define: StyleComboBox Using DDWinCtrlDef AsSymbol StyleComboBox 
            Fields: TypeName		SComboBox  
					POSITION		$LeftMargin +$LeftOffset,  
									StyleStaticText(GetTop,Position), 
									140,200
					GenConField		~NodeStyle:~
					DropDownActionsText	ACTION EXEC ( GetStyleList(0) )
					IActionsText	ACTION EXEC ( GetStyleList(1) ) // not executed Why?
					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					Tooltip			~Choose a Style~;

		ypos = <ypos> + 50;

		Define: OKButton Using DDWinCtrlDef AsSymbol OKButton
		fields:	TypeName DefaultButton
				Text ~Close~
				Position <DialogWidth> - 80, <ypos>, <SmallButtonWidth>, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( CancelPressed() )
				OActionsText ~[NULL]~
				Tooltip ~Close this dialog box~;

		Define: ApplyButton Using DDWinCtrlDef AsSymbol OKButton
		fields:	TypeName Button
				Text ~Apply~
				Position <DialogWidth> - 150, <ypos>, <SmallButtonWidth>, <ButtonHeight>
				IActionsText ~[Get]~
				DActionsText ACTION EXEC ( Apply() )
				OActionsText ~[NULL]~
				Tooltip ~Create nodes~;

	}

	ypos = OKButton(GetBottom, Position) + 50;

	GridLayoutDialog( Set, Position, ~550 10 <DialogWidth> <ypos> ~);
	// use the GenCon called GridLayoutParameters and refer to it as GridLayoutParameters inside this script
	GenDlg( dlg,Definition,GridLayoutDialog,Data,GridLayoutParameters,Document,$Doc.This,New,Temporary );
	Global( dlg );
}

Include: ~UpdateUserSettings~;


NUMERIC Apply()
{
	dlg( GetInput );

	dlg( GetControlValue,StyleComboBox,CurrentVal);
	if (~<CurrentVal>~ == ~None~)
	{
		GridLayoutParameters( SetValue, ~NodeStyle:~, ~~);
	}

	if (RunningVersion( 4.0))
	{
		GetStylePathFromStyleID();
	}

	if ( !GenCon( ActiveWindow,GetActiveWindow ) )
	{
		return dlg( SetStatus,0,~You have no open windows of data to process~ );
	}

	GridLayoutParameters( GetValue, ~Rows:~, theRows);

	if (MakeNumber(~<theRows>~) > <MaxRows>)
	{
		return Warning( Translate(~Rows cannot be greater than <MaxRows>.~ ));
	}

	ActiveWindow( Get, WindowAddr);

	if ( !Document( aDoc,FindByWindow,ActiveWindow(GetObject) ) )
	{
		return Warning( Translate(~Cannot find <JobPath>~));
	}

	// get a copy of the original parameters from the tree (which had been refreshed at startup)
	GenCon(OriginalParameters,GetGenCon,GridLayoutParameters);

	// copy the user's values to the original parameters
	OriginalParameters(SetValuesFrom,GridLayoutParameters);

	// update the database values 
	UpdateUserSettings( GridLayoutParameters,GridLayoutParameters );

	// do the work

	GridLayoutParameters( SetValue, ~Operation~, 0);

	if (!GenCon( GridLayoutParameters2,New,DDGridLayout ) )
	{ 
		Warning( ~Could not create grid nodes~ ); 
		return;
	}
	// make a copy of the GridLayoutParameters GenCon and call it 	GridLayoutParameters2
	GridLayoutParameters2( IsCopyOf,GridLayoutParameters);

	// Convert Units from Metric, if user has chosen centimeters or millimeters as the preferred units
	ConvertUnits(GridLayoutParameters2);


	aDoc( SendGenCon, GridLayoutParameters2);
	return 1;

}



VOID  EnableTextHeightBox() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextHeightText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextHeightText );
	}
}


VOID  EnableTextTopOffsetEditText() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextTopOffsetEditText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextTopOffsetEditText );
	}
}

VOID  EnableTextRightOffsetEditText() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextRightOffsetEditText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextRightOffsetEditText );
	}
}


VOID  EnableTextWidthText() 
{
	dlg( GetControlValue,ImageNodeCheckBox,value1);
	dlg( GetControlValue,TextNodeCheckBox,value2);
	if ( <value1> != 0 && <value2> != 0)
	{
		dlg( EnableControls,TRUE,TextWidthText );
	}
	else
	{

		dlg( EnableControls,FALSE,TextWidthText );
	}
}



VOID ReOpen()
{
}

VOID CancelPressed()
{
	dlg( End );
	Exit();
}

VOID Init( JobPath)
{
	if ( !Defined( dlg ) )
	{
		Global( JobPath);
		CreateDialog();
		EnableTextRightOffsetEditText();
		EnableTextWidthText();
		EnableTextTopOffsetEditText();
		EnableTextHeightBox();
		GetStyleList(1);
//		SetUnitsComboList();  // don't make this an IAction.  It will get called at the wrong time
		UpdateUnits2();

	}
	else
	{
		dlg(SetFocus);
	}
}


VOID DoImageNodeCheckBoxStuff()
{
	EnableTextRightOffsetEditText();
	EnableTextWidthText();
	EnableTextTopOffsetEditText();
	EnableTextHeightBox();

}


VOID DoTextNodeCheckBoxStuff()
{
	EnableTextRightOffsetEditText();
	EnableTextWidthText();
	EnableTextTopOffsetEditText();
	EnableTextHeightBox();
}


NUMERIC UpdateReferenceImagesList()
{
	return dlg( SetControlFromStringList,TitleBarComboBox,Images);
}

NUMERIC GetStyleList(WantSelection)
{
	StringList(NodeStyleList,New);
	NodeStyleList( AddString,~None~ );

	theQuery = ~Select ID From Products Where Style <> 0 Order By ID~;	
	
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List(NumEntries);

	if (<count> > 0)
	{
		while ( List( GetNext,Record ) )
		{
			++count;
			NodeStyleList( AddString,~<$pcon.Record[ID]>~ );
		}
	}

	GridLayoutParameters( GetValue, ~NodeStyle:~, CurrentVal);
	if (~<CurrentVal>~ == ~~)
	{
		GridLayoutParameters( SetValue, ~NodeStyle:~, ~None~);
	}

	if (<WantSelection>)
	{
		dlg( SetControlFromStringList,StyleComboBox,NodeStyleList,Selection );
		dlg( SetControlValue,StyleComboBox,~<CurrentVal>~);

	}
	else
	{
		dlg( SetControlFromStringList,StyleComboBox,NodeStyleList,NoSelection );
	}

	return TRUE;
}


NUMERIC GetStylePathFromStyleID()
{
	GridLayoutParameters( GetValue, ~NodeStyle:~, ID);
	if (~<ID>~ != ~~ && ~<ID>~ != ~None~)
	{
		theQuery = ~Select ProductLayoutPath From Products Where ID = '<ID>'~;	
		
		if ( !ADO( dBase,Connect,GetValuesFor,~<theQuery>~,StylePath ) ) 
		{
			dBase( GetErrorDescription,theErr );
			Invoke( ShowWarning,Translate(DBMessages,ConnectionFailed,~Products~,~<theErr>~) );
			return FALSE;
		}

		GridLayoutParameters( SetValue, ~NodeStylePath:~, ~<StylePath>~);
	}
	else
	{
		GridLayoutParameters( SetValue, ~NodeStylePath:~, ~~);
	}
	return TRUE;
}

VOID SetUnitsComboList()
{
	StringList(MyUnitsList,New);
	MyUnitsList(AddString,~Inches~);
	MyUnitsList(AddString,~Centimeters~);
	MyUnitsList(AddString,~Millimeters~);
	GridLayoutParameters( GetValue, ~Units~, CurrentUnits);
	dlg( SetControlFromStringList,UnitsComboBox,MyUnitsList,Selection );
	dlg( SetControlValue,UnitsComboBox, ~<CurrentUnits>~); 
	UpdateUnits(~<CurrentUnits>~ );
}

VOID UpdateUnits2()
{
//	dlg( GetControlValue,UnitsComboBox, NewUnits); 

	if ( GenCon( PreviewOptions,GetFrom,PreviewOptions,~[GENCONS]~ ) )
	{
		PreviewOptions( GetValue, PreferredUnits, NewUnits);
	}

	UpdateUnits(~<NewUnits>~);
}

// update the static text 'cm.' items
VOID UpdateUnits(CurrentUnits)
{
	if (~<CurrentUnits>~ == ~Inches~)
	{
		SetUnitsFields(~in.~);
	}
	else if (~<CurrentUnits>~ == ~Centimeters~)
	{
		SetUnitsFields(~cm.~);
	}
	else if (~<CurrentUnits>~ == ~Millimeters~)
	{
		SetUnitsFields(~mm.~);
	}

	GridLayoutParameters( SetValue, Units, ~<CurrentUnits>~);
}

VOID SetUnitsFields(UnitsValue)
{
	dlg( SetControlValue, BGWUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, BGHUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, LeftMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, RightMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, TopMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, BottomMarginUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, HorizGapUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, VertGapUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, AspectRatioWidthUnitsStatic, ~<UnitsValue>~);
	dlg( SetControlValue, AspectRatioHeightUnitsStatic, ~<UnitsValue>~);
}




VOID ConvertUnits( &GridLayoutParameters)
{
	GridLayoutParameters( GetValue, Units, theUnits);
	if (~<theUnits>~ == ~Inches~)
	{
		return;
	}

	if (~<theUnits>~ == ~Centimeters~)
	{
		ConversionFactor = 1.0 / 2.54;
	}

	else if (~<theUnits>~ == ~Millimeters~)
	{
		ConversionFactor = 1.0 / 25.4;
	}

	X = <ConversionFactor> * NUMERIC( ~<$Con.GridLayoutParameters[LeftMargin:]>~);
	GridLayoutParameters( SetValue, ~LeftMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[TopMargin:]>~);
	GridLayoutParameters( SetValue, ~TopMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[RightMargin:]>~);
	GridLayoutParameters( SetValue, ~RightMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[BottomMargin:]>~);
	GridLayoutParameters( SetValue, ~BottomMargin:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[HorizGap:]>~);
	GridLayoutParameters( SetValue, ~HorizGap:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[VertGap:]>~);
	GridLayoutParameters( SetValue, ~VertGap:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[MaxWidth:]>~);
	GridLayoutParameters( SetValue, ~MaxWidth:~, <X>);

	X = <ConversionFactor> *	NUMERIC( ~<$Con.GridLayoutParameters[MaxHeight:]>~);
	GridLayoutParameters( SetValue, ~MaxHeight:~, <X>);
}