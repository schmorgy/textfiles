// CompDoc.txt
//
// Globals:	WhichTable
//			DocumentQuery


Define:	CompMacrosMessages Using DDSymbol
	Fields:	Value	~These strings are Composite Macros related strings used by the user interface.~
	Contains:
	{
		Define: Title				using DDText	Fields: Text ~%1 Data~
		Define: ReadingRecords		using DDText	Fields: Text ~Reading %1 Records~
		Define: ReadRecords			using DDText	Fields: Text ~Read %1 Records in %2 seconds~
		Define: DeletingRecord		using DDText	Fields: Text ~Deleting record %1~
		Define: RemovingAllFor		using DDText	Fields:	Text ~Are you sure you want to delete the %1 selected Record(s)?~
		Define: MenuChangeField		using DDText	Fields:	Text ~Change Field~
		Define: FieldsMacroButtonTxt using DDText	Fields:	Text ~Macros~
		Define: ToolTipFieldsMacroButton using DDText Fields: Text ~Get macros for table field data~
	}

// Hang:	CompMacrosMessages	~[STRINGS]~ ;	No need to hang these


WhichTable = ~CompositeMacros~;
// PrimaryKeys: Name

Include: ~FormattingRoutines~;

//** [Refresh], "Refresh", Refresh Action, F5
NUMERIC RefreshListView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	Start = Ticks();

	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	if ( FALSE )
	{
		if ( MessageBox( Translate(DBMessages,LargeQuery,~<DocumentQuery>~,~<Count>~),YESNO ) != YES )
		{
			return TRUE;
		}
	}

	DataWindow( StatusBar,Text,Translate( CompMacrosMessages,ReadingRecords,<Count> ) );

	SetDocumentData( List(GetObject) );	
	DataWindow( RefreshWindow );

	Duration = (Ticks() - <Start>) / 1000;

	return DataWindow( StatusBar,Text,Translate(CompMacrosMessages,ReadRecords,~<Count>~,~<Duration>~) );
}


//** [Options]
NUMERIC AllOptions()
{
	return DataView( DisplayMenu,ListViewMenu,0,0 );

}


//** [New], "New"
NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

if (0)  // this needed only if want to copy data from selected record(theRecord) into new record
{
	if ( DataView( GetSelectedRows,SelectedRows ) )		
	{
		SelectedRows( GetFirst,theRecord );
	}
}

	NewRow( Set,UserDefined,TRUE );

	RowBeingAdded = DataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate(UIMessages,AddRowFailed) ); }

	DataView( SetActiveCell,<RowBeingAdded>,Name );

	return TRUE;
}


if (0)
{
//** [Find], "Find"
NUMERIC Search()
{
	Actions = ACTIONS ( Doc( ~Search~ Open SearchDoc "Search( <WhichTable> );" ) );
	return PerformActions( Actions );
}
}


//** [Save], "Save Changes"
NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


//** [Cancel], "Cancel Changes"
NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( Translate(UIMessages,CancelChanges),YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}

//** [Delete], "Delete", DeleteRecords Action
NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,RecordsToDelete ) )		
		{ return Warning( Translate(UIMessages,NoRowsSelected) ); }

	count = RecordsToDelete( ChildCount );

	if ( MessageBox( Translate(CompMacrosMessages,RemovingAllFor,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	StringList( RowsToDelete,New );

	num = 1;
	while ( RecordsToDelete( GetNext,theRecord ) )
	{
		DataWindow( StatusBar,Text,Translate(CompMacrosMessages,DeletingRecord,~~) );

		Key = ~Name = '<$con.theRecord[Name]>'~;

		Cmd = ~Delete From <WhichTable> Where <Key>~;

		if ( !dBase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate( DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		RowsToDelete( AddString,RecordsToDelete(GetCurrentPosition) );

		++num;
	}

	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}



Include: ~ChgFldDlg~;
NUMERIC SeeChangeField()
{
	return DisplayChangeFieldDlg(DataView);
}


VOID OnKeydown()
{
	GenCon( View,GetActiveView );

	Key = View( GetLastKeyStateless,KeyString );
	
	if (  !View( PerformMenuAction,ListViewMenu,~<KeyString>~ ) )
	{
		DataView( DisplayMenu,ListViewMenu,0,0  );
	}
}


//** ChangeRecord Action, (and result of [Save])
NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,ChangedOpenTable,OrigOpenTable,ChangedRow,IsNewRow ) )
		{ return Warning(  Translate(UIMessages,NoRowsSelected) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	Key = ~Name = '<$con.OrigOpenTable[Name]>'~;

	Query = ~Select * From <WhichTable> Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( !List( UpdateFrom,ChangedOpenTable,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
	}

	DataView( CommitChanges );

	return TRUE;
}


//** Close Action
NUMERIC OnCloseDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate(UIMessages,SaveChanges),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	DataWindow( ForceCloseWindow );

	return TRUE;
}


//** RightClick Action
NUMERIC RightClickInListView()
{
	return DataView( DisplayMenu,ListViewMenu );
}


Include: ~GenCompMacroDlg~;
//** [Macros]
VOID OnFieldsMacroButton()
{
// dlgShootDescType,dlgInfoType 
	 success = DisplayFieldsMacroDlg(~~,~~,TRUE);
}

FirstTime = TRUE;

NUMERIC Init(DocumentQuery)
{

	Global( DocumentQuery );

	theTitle = Translate(CompMacrosMessages,Title,~<WhichTable>~);

	if ( !<FirstTime> )
	{
	}

	if ( <FirstTime> )
	{
		DefineWindow();
		DataWindow( Set,Title,~<theTitle>~ );

		FirstTime = FALSE;


		if ( !PGenConList( List,Connect,CursorLocation,Client,Lock,ReadOnly,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{ 
			List(GetErrorDescription,0,theErr);
			Error( Translate(DBMessages,QueryFailed,~<DocumentQuery>~,~<theErr>~) );
		}

		Count = List( NumEntries );

		StatusBarText( Translate(CompMacrosMessages,ReadingRecords,<Count>) );

		Start = Ticks();

		SetDocumentData( List(GetObject) );

		WindowLocation = ~<$User.WindowLocation[List]>~;

		if ( ~<WindowLocation>~ != ~~ )
			{ DataWindow( Set,Position,~<WindowLocation>~ ); }

		DefineMenu( );

		if ( !DataWindow( CreateWindow,~CompositeMacros~ ) )
			{ Error( Translate(UIMessages,CreateWindowFailed,~CompositeMacros <WhichTable>~) ); }

		Duration = (Ticks() - <Start>) / 1000;

		return DataWindow( StatusBar,Text,Translate(CompMacrosMessages,ReadRecords,~<Count>~,~<Duration>~) );
	}

	Document( Doc,This,SetTitle,~<theTitle>~ );
	return RefreshListView();
}



Include: ~ExportSelectedToFile~;


VOID DefineMenu()
{
	Define:	ListViewMenu Using DDMenuDef AsSymbol ListViewMenu
		Fields:		Position	(-1)		
		Contains:	INLISTORDER
		{
			Define:	AddRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuAdd )
						IDText		~ID~
						ActionsText  ACTION Exec ( AddRecord() )
						AcceleratorKey	~N~

if (0)
{
			Define:	Search	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuFind )
						IDText		~ID~
						ActionsText  ACTION Exec ( Search() )
						//AcceleratorKey	~S~
}

			Define:	NULL1 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SaveAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuSaveChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( SaveAllChanges() )

			Define:	ForgetAllChanges	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuCancelChanges )
						IDText		~ID~
						ActionsText  ACTION Exec ( RollBackAllChanges() )

			Define:	DeleteRecord	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuDelete )
						IDText		~ID~
						ActionsText  ACTION Exec ( DeleteRecord() )

			Define:	Refresh	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuRefresh )
						IDText		~ID~
						ActionsText  ACTION Exec ( RefreshListView() )

			Define:	NULL2 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	SeeChangeField	using	DDMenuItemDef
				Fields:	Text		Translate( CompMacrosMessages,MenuChangeField )
						IDText		~ID~
						ActionsText  ACTION Exec ( SeeChangeField() )

			Define:	NULL4 using DDMenuItemDef
					Fields:	Text		~~
							IDText		~NULL~

			Define:	Export	using	DDMenuItemDef
				Fields:	Text		Translate( UIMenuText,MenuExport )
						IDText		~ID~
						ActionsText  ACTION Exec ( ExportSelectedToFile(DataView,<WhichTable>) )

		}

	Global( ListViewMenu );
}


// These values need to be public and these defined values for DefineStdGridButtons()
ButtonHeight = 20;
hGap = 1; vGap = 2;

Include: ~DefineStdGridButtons~;
VOID DefineWindow()
{
	if ( !GenCon( TableDefinition,GetFrom,<WhichTable>,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The <WhichTable> Table is not properly defined~ ); }

	ButtonWidth = 55; 

	Define: DataWindow Using DDWinDef
		Fields:	Title					Translate(CompMacrosMessages,Title)
				Position				0 0 90 35
				IsPositionPercent		T
				EnableStatusBar			F
				TypeName				SplitterWnd
				SplitterRows			~2 10 90~
				SplitterColumns			1

		Contains: INLISTORDER
		{
		Define: ControlView Using DDViewDef AsSymbol ControlView
			Fields:			ViewType				FormView
							KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
							HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "CompMacroData.htm" )
				Contains:
				{
					position = DefineStdGridButtons( <WhichTable> ) + 10;

					Define: FieldsMacroButton Using DDWinCtrlDef AsSymbol FieldsMacroButton
						Fields:	GENCONNAME		This
								DACTIONSTEXT	ACTION EXEC ( OnFieldsMacroButton() )
								POSITION		$position + $hGap, $vGap,
												$ButtonWidth $ButtonHeight
								TEXT			Translate( CompMacrosMessages,FieldsMacroButtonTxt )
								TOOLTIP			Translate( CompMacrosMessages,ToolTipFieldsMacroButton )
								TYPENAME		BUTTON
				}
			
		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				~ListView~
					GridControlTypes		TableDefinition( GetReferenceTo,Fields )
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					RefreshActionsText		ACTION Exec ( RefreshListView() )
					KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
					CloseActionsText		ACTION Call ( OnCloseDataView() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "CompMacroData.htm" )
					ViewDataType			Text

		}

		Global(DataWindow,DataView);
}

