


NUMERIC RefreshListView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <DocumentQuery>. <theErr>~ );
	}

	SetDocumentData( List(GetObject) );

	Count = List( NumEntries );
	
	DataWindow( StatusBar,Text,~Refreshing~ );
	DataWindow( RefreshWindow );
	DataWindow( StatusBar,Text,~<Count> Records~ );

	return TRUE;
}


NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,ChangedItem,OrigItem,ChangedRow,IsNewRow ) )
		{ return Warning( Translate( ~There was no changed row.~ ) ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$con.ChangedItem[Name]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Name cannot be blank.~ ) ); }

	Key = ~Name = '<$con.OrigItem[Name]>'~;
	
	Query = ~Select * From HalseFilmDrive Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	if ( !List( UpdateFrom,ChangedItem,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( ~Could not update record where <Key>. <theErr>~ );
	}

	DataView( CommitChanges );	

	return TRUE;
}


NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,ItemsToDelete ) )		
		{ return Warning( Translate( ~There were no items selected to delete~ ) ); }

	Count = ItemsToDelete( ChildCount );

	if ( <Count> <= 0 )
		{ return Warning( Translate( ~There were rows selected to delete~ ) ); }

	if ( MessageBox( Translate( ~Are you sure you want to delete the <Count> selected rows?~ ),YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( ~Could not connect to the database. <theErr>~ );
	}

	StringList( RowsToDelete,New );

	while ( ItemsToDelete( GetNext,ItemToDelete ) )
	{
		Key = ~Name = '<$con.ItemToDelete[Name]>'~;

		Cmd = ~Delete From HalseFilmDrive Where <Key>~;

		if ( !dBase( CMD,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( ~Could not delete item where <Key>. <theErr>~ );
		}

		RowsToDelete( AddString,RowsToDelete(GetCurrentPosition) );
	}

	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}


NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	NewRow( SetValues,Port,1);
	
	RowBeingAdded = DataView( AddRow, NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate( ~You are too low on memory to add any more rows~ ) ); }

	DataView( SetActiveCell,<RowBeingAdded>,Name );

	return TRUE;
}




NUMERIC RightClickInListView()
{
	DataView( DisplayMenu,ListViewMenu );

	return TRUE;
}


VOID OnKeydown()
{
	GenCon( View,GetActiveView );

	Key = View( GetLastKeyStateless,KeyString );
	
	if (  !View( PerformMenuAction,ListViewMenu,~<KeyString>~ ) )
	{
		DataView( DisplayMenu,ListViewMenu,0,0  );
	}
}


NUMERIC OnCloseDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( Translate( ~Would you like to save your pending changes?~ ),YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	return DataWindow( ForceCloseWindow );
}


NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new items that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}

FirstTime = TRUE; // Only open a new window the first time

NUMERIC Init( Title,DocumentQuery,ScannerSerialNumber)
{
	DataWindow( Set,Title,~<Title>~ );

	Global( DocumentQuery );

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
		{
			dBase( GetErrorDescription,0,theErr );
			Error( ~Database Query Failed: <DocumentQuery>. <theErr>~ );
		}
		SetDocumentData( List(GetObject) );

		if ( !DataWindow( CreateWindow,Translate( ~Halse Film Drive Setups~ ) ) )
		{ 
			Error( ~Failed to create the window for Halse Film Drive Setups~ ); 
		}

		return TRUE;
	}

	RefreshListView();

	return TRUE;
}

if ( !GenCon( TableDefinition,GetFrom,HalseFilmDrive,~[DATABASE TableDefinitions]~ ) )
	{ Error( Translate( ~The HalseFilmDrive Table is not properly defined~ ) ); }

Define:	ListViewMenu Using DDMenuDef AsSymbol ListViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{
		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )

		Define:	NULL1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~

		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

		Define:	DeleteRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Delete~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )
	}

Include: ~DefineStdGridButtons~;

ButtonWidth = 55;  ButtonHeight = 20;  hGap = 1; vGap = 2;

Define: DataWindow Using DDWinDef
	Fields:		Position				0 50 90 30
				IsPositionPercent		T
				EnableStatusBar			F
				TypeName				SplitterWnd
				SplitterRows			~2 1 90~
				SplitterColumns			1


	Contains:	INLISTORDER
	{
		Define: ControlView Using DDViewDef AsSymbol ControlView
			Fields:			ViewType				FormView
							KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
							HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "HalseFilmDrive.htm" )
				Contains:
				{
					position = DefineStdGridButtons(~FilmDrive Setup~) + 10;
				}

		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				ListView
					GridControlTypes		TableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION Exec ( ChangeRecord() )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord() )
					RClickUpActionsText		ACTION Exec ( RightClickInListView() )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
					//ButtonClickActionsText ACTION Exec ( OnButtonClick() )
					//DoubleClickActionsText ACTION Exec ( OpenJobs() )
					CloseActionsText		ACTION Call ( OnCloseDataView() )
					KeyboardActionsText		ACTION Exec ( OnKeydown() ) 
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "HalseFilmDrive.htm" );
	}
	

