
VOID ReOpen()
{
	RefreshDoc();
}

VOID RefreshDoc()
{
	RefreshAllViews( TRUE );
}


NUMERIC RefreshListView( Requery )
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate( ~Query Failed: <DocumentQuery>. <theErr>~ ) );
	}

	SetDocumentData( List(GetObject) );
	
	DataWindow( StatusBar,Text,~Refreshing~ );
	DataWindow( RefreshWindow );
	DataWindow( StatusBar,Text,~~ );

	return TRUE;
}


NUMERIC ChangeRecord()
{
	if ( !DataView( GetChangedRow,Changed,Original,ChangedRow,IsNewRow ) )
		{ return Warning( ~There was no changed row.~ ); }

	if ( <ChangedRow> <= 0 )
		{ return TRUE; }

	if ( ~<$Con.Changed[Name]>~ == ~~ )
		{ return Warning( Translate( ~Unable to save pending changes.  Name cannot be blank.~ ) ); }

	Key = STR ( Name = '<$Con.Original[Name]>' );

	Query = ~Select * From DRGBRefs Where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( ~Query Failed: <Query>. <theErr>~ );
	}

	if ( !List( UpdateFrom,Changed,~<Key>~,<IsNewRow> ) )
	{
		List( GetErrorDescription,0,theErr,CancelUpdate );
		return Warning( ~Could not update DRGBRef record where <Key>. <theErr>~ );
	}

	DataView( CommitChanges );
	
	return TRUE;
}


NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,SelectedRows ) )		
		{ return Warning( ~There was no row selected to delete~ ); }

	StringList( RowsToDelete,New );

	while ( SelectedRows( GetNext,Item ) )
	{
		Query = ~Delete From DRGBRefs Where Name = '<$con.Item[Name]>'~;

		if ( !db( CMD,~<Query>~ ) )
		{
			db( GetErrorDescription,theErr );
			Warning( ~Could not delete. <Query>  <theErr>~ );
			break;
		}

		RowsToDelete( AddString,SelectedRows(GetCurrentPosition) );
	}
		
	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}

NUMERIC DeleteRecord()
{
	if ( !DataView( GetSelectedRows,RefsToDelete ) )		
		{ return Warning( Translate( ~There was no row selected to delete~ ) ); }

	count = RefsToDelete( ChildCount );

	Prompt = Translate( ~Are you sure you want to delete the <count> selected DRGBRef(s)?~ );

	if ( MessageBox( ~<Prompt>~,YESNO ) != YES )
		{ return FALSE; }

	if ( !Ado( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
	}

	StringList( RowsToDelete,New );

	while ( RefsToDelete( GetNext,Ref ) )
	{
		Key = ~Name = '<$con.Ref[Name]>'~;

		Cmd = ~Delete From DRGBRefs Where <Key>~;

		if ( !dBase( Cmd,~<Cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			Warning( Translate( ~Database update failed:  <Cmd>. <theErr>~ ) );
			break;
		}

		RowsToDelete( AddString,RefsToDelete(GetCurrentPosition) );
	}
		
	DataView( DeleteRows,SelectedIndex,RowsToDelete );

	return TRUE;
}
NUMERIC UniqueKeyExists( Key )	// NOT USED
{
	List( Filter,~Name = '<Key>'~ ); 

	if ( !List(Empty) )
	{
		List( Remove );
	}

	List( ClearFilter );

	return TRUE;
}


NUMERIC AddRecord()
{
	Document( Doc,This );

	GenCon( NewRow,NewFrom,Doc(GetDataDictionary) );

	RowBeingAdded = DataView( AddRow,NewRow );

	if ( <RowBeingAdded> <= 0 )
		{ return Warning( Translate( ~You are too low on memory to add any more rows~ ) ); }

	DataView( SetActiveCell,<RowBeingAdded>,Name );

	return TRUE;
}


NUMERIC RightClickInListView()
{
	DataView( DisplayMenu,ListViewMenu );

	return TRUE;
}



NUMERIC OnButtonClick()
{	
	DataView( GetActiveCell,Row,Col );

	if ( FileDialog( Title,Translate( ~Find the slope lut~ ),Path,Path,Open ) )
	{
		Path = MakePath( Type,UNC,~<Path>~);

		if ( !Files( IsUNC,~<Path>~ ) && NetworkOperation() )
		{
			Msg = Translate( UIMessages,UnsharedFile,~<Path>~ );

			if ( MessageBox( ~<Msg>~,YESNO ) != YES )
				{ return FALSE; }
		}

		DataView( SetCellValue,<Row>,<Col>,~<Path>~ );
	}

	return TRUE;
}



NUMERIC OnCloseDRGBRefsDataView()
{
	if ( DataView( PendingChanges ) )
	{
		if ( MessageBox( ~Would you like to save your pending changes?~,YESNO ) == YES )
		{
			if ( !SaveAllChanges() )
			{
				return FALSE;
			}
		}
	}

	DataWindow( ForceCloseWindow );
	return TRUE;
}

NUMERIC SaveAllChanges()
{
	while ( DataView( PendingChanges ) )
	{
		if ( !ChangeRecord() )
		{
			return FALSE;
		}
	}

	return TRUE;
}


NUMERIC RollBackAllChanges()
{
	if ( !DataView( PendingChanges ) )
		{ return FALSE; }

	if ( MessageBox( ~Are you sure you want to cancel all changes including new references that have not been saved?~, YESNO ) != YES )
		{ return FALSE; }
				
	while ( DataView( PendingChanges ) )
	{
		DataView( RollBackChanges );
	}

	return TRUE;
}



NUMERIC EndEdit()
{
	DataView( GetEditedCell,row,col );
	DataView( GetEditedCellValue,value );

	GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );

	Fields( GetAt,<col> - 1,ColumnDefinition );

	ColumnDefinition( GetName,ColumnName );

	MessageBox( ~EndEdit On Field <ColumnName> Value is <value>~ );

	return TRUE;
}



NUMERIC OnFieldModified()
{
	DataView( GetActiveCellValue,value );

	// MessageBox( ~OnFieldModified(). Value is <value>~ );

	return TRUE;
}


NUMERIC TrapCellModifications( FieldName,TheAction )
{
	GenCon( Fields,Is,TableDefinition(GetReferenceTo,Fields) );

	if ( !Fields( GetByName,~<FieldName>~,ColumnDefinition ) )
		{ return FALSE; }

	ColumnDefinition( Set,OnModify,~[ Call ( <TheAction>() ) ]~ );

	return TRUE;
}

FirstTime = TRUE;

NUMERIC Init( WhichDRGBRefs,DocumentQuery )
{
	DataWindow( Set,Title,~<WhichDRGBRefs>~ == ~~ ? ~DRGB Reference Data~ : ~DRGB Reference Data - <WhichDRGBRefs>~ );

	Global( WhichDRGBRefs,DocumentQuery );

	if ( <FirstTime> )
	{
		FirstTime = FALSE;

		if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<DocumentQuery>~ ) )
			{ Error( ~Failed to query the DRGBRefs table~ ); }

		SetDocumentData( List(GetObject) );

		if ( !DataWindow( CreateWindow,~DRGBRefs~ ) )
			{ Error( ~Failed to create the window~ ); }

		return TRUE;
	}

	return RefreshListView();
}


if ( !GenCon( TableDefinition,GetFrom,DRGBRefs,~[DATABASE TableDefinitions]~ ) )
	{ Error( ~The DRGBRefs Table is not properly defined~ ); }
	
if ( !ado( db,CONNECT ) )
	{ Error( ~Could not open Database to access the DRGBRefs Table~ ); }	


Define:	ListViewMenu Using DDMenuDef AsSymbol ListViewMenu
	Fields:		Position	(-1)		
	Contains:	INLISTORDER
	{
		Define:	AddRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Add Reference~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( AddRecord(); )

		Define:	NULL1 using DDMenuItemDef
			Fields:	Text		~~
					IDText		~NULL~
		
		Define:	SaveAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Save Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( SaveAllChanges() )

		Define:	ForgetAllChanges	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Cancel Changes~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RollBackAllChanges() )

		Define:	DeleteRecord	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Delete~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( DeleteRecord(); )

		Define:	Refresh	using	DDMenuItemDef
			Fields:	Text		Translate( ~&Refresh (F5)~ )
					IDText		~ID~
					ActionsText  ACTION Exec ( RefreshListView(TRUE); )
	}


Define: DataWindow Using DDWinDef
	Fields:		Title					~DRGBRefs~
				Position				0 70 70 25
				IsPositionPercent		T

	Contains:	INLISTORDER
	{
		Define: DataView Using DDViewDef AsSymbol DataView
			Fields:	ViewType				~ListView~
					GridControlTypes		TableDefinition(GetReferenceTo,Fields)
					ChangeRecordActionsText ACTION Exec ( ChangeRecord(); )
					DeleteRecordActionsText ACTION Exec ( DeleteRecord(); )
				//	DoubleClickActionsText	ACTION Exec (  )
					RClickUpActionsText		ACTION Exec ( RightClickInListView(); )
					RefreshActionsText		ACTION Exec ( RefreshListView(TRUE) )
				//	EndEditActionsText		ACTION Call ( EndEdit() )
					ButtonClickActionsText	ACTION Exec ( OnButtonClick() )
					HActionsText			ACTION SHOWHELPPAGE ( KPISHelpFile "DRGBRefs.htm" )
					CloseActionsText		ACTION Call ( OnCloseDRGBRefsDataView() ) ;
	}
	

