

NUMERIC RecursiveSearchForDynamicJobs( path,search,&count )
{
	MoreFiles = findfile( aDirectoryEntry,Find,~<path>\<search>~ );

	while ( $Morefiles )
	{
		Morefiles = aDirectoryEntry( Next );

		aDirectoryEntry( Get,Path,aPath );
			
		if ( aDirectoryEntry( Dots ) )
			continue;
			
		if ( aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		{	
			count += RecursiveDirectoryCount( ~<aPath>~,~<search>~,count );
			continue;
		}

		++count;
		aDirectoryEntry( Get,Title,theFile );
		AddAnotherDynamicJob( $count,~<aPath>~,~<theFile>~ );
	}

	return 1;
}

VOID AddAnotherDynamicJob( count,path,file )
{
	Define: DynamicJob<count> using DDToolbarButtonDef
					Fields: Text					~<file>~
							ActionsText				~[OpenDocFile("<path>")]~
							Tooltip					~Start Dynamic Job <file>~
							IDText					ID
							IsEnabled				T
							IsPressed				F
							IsHidden				F
							IsIndeterminate			F
							IsChecked				F
}


	 
Tree( Name,~DynamicJobsToolbar~,Location,~[UI Toolbars]~,PluckAndFree );	// OUT WITH THE OLD

// Here is how we display toolbars and check its associated menu item in the View Toolbars menu
// 1.  CreateToolbar IAction when the view activates
// 2.  ToggleToolbar Action for the View Toolbars DynamicJobs menu item
// 3.  CheckMenu IAction for the DynamicJobsToolbar
// 4.  UncheckMenu OAction for the DynamicJobsToolbar

Define: DynamicJobsToolbar using DDToolbarDef								// IN WITH THE NEW
	Fields:	ToolBarType			Standard
			Position			50 150 0 0
			Text				~Dynamic Jobs~			
			Rows				1			
			IsInitiallyDocked	~T~
			AllowDocking		~T~
			IActionsText	~[CheckMenu(ViewToolbarDynamicJobs)]~
			OActionsText	~[UnCheckMenu(ViewToolbarDynamicJobs)]~

			Contains: InListOrder
			{
				count = 0;
				RecursiveSearchForDynamicJobs( ~<$app.dir>\DynamicJobs~,~*.*~,&count );
			};

Hang:	DynamicJobsToolbar ~[UI Toolbars]~;
