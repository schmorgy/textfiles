


Define: ImageEditData Using DDImageEdit 
	Fields:	orgD			64
			orgGamma		1.0	;	// all other fields default to 0 or NULL


HelpPage = ~ImageEdit.htm~;

hGap = 2; vGap = 1;
PromptHeight = 20;		PromptWidth = 50;		ValueWidth = 40;
ButtonWidth = 67;		ButtonHeight = 20;		SliderWidth = 115;
LeftX = $hGap;			CurrentY = $vGap+2;		CurrentRight = 0;
PlusMinusWidth = 20;

VOID DefineImageEditLine( Type,Increment,Prompt,ToolTip,Something,MinusText,PlusText )
{
	Define: <Type>Prompt Using DDWinCtrlDef AsSymbol <Type>Prompt
		Fields:	POSITION		$LeftX $CurrentY $PromptWidth $PromptHeight
				TEXT			~<Prompt>~
				RightJustified	TRUE
				TYPENAME		StaticText

	Define: <Type>Field Using DDWinCtrlDef AsSymbol <Type>Field
		Fields:	DACTIONSTEXT	ACTIONS ( Save Update(<Type>Slider) DialogTimer(0 1000) )
				GENCONFIELD		~<Type>~
				GENCONNAME		THIS
				IACTIONSTEXT	ACTIONS ( Get )
				OACTIONSTEXT	ACTIONS ( Save )
				POSITION		(<Type>Prompt(GetRight,Position) + $hGap) $CurrentY-2 $ValueWidth $PromptHeight
				TEXT			~~
				TOOLTIP			~<ToolTip>~
				TYPENAME		MaskedEditText
				Mask			(SimilarStr(~<Prompt>~,~Angle~,~Saturation~) || SimilarStr(~<Prompt>~,~Gamma~,~Saturation~)) ? ~######~ : ~####~
				PromptChar		~ ~ 
				AllowedChars	(SimilarStr(~<Prompt>~,~Angle~) || SimilarStr(~<Prompt>~,~Gamma~)) ? ~-.~ : ~-~
				HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" )

	Define: <Type>Slider Using DDWinCtrlDef AsSymbol <Type>Slider
		Fields:	DACTIONSTEXT	ACTIONS ( Save Update(<Type>Field) DialogTimer(0 250) )
				GENCONFIELD		~<Type>~
				GENCONNAME		THIS
				IACTIONSTEXT	~[Get]~
				OACTIONSTEXT	~[Save]~
				POSITION		(<Type>Field(GetRight,Position) + $hGap) $CurrentY $SliderWidth $PromptHeight
				TOOLTIP			~<ToolTip>~
				TYPENAME		~SLIDER~ 
				UNITS			$Increment
				HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

	Define: <Type>MinusButton Using DDWinCtrlDef AsSymbol <Type>MinusButton
		Fields:	DACTIONSTEXT	ACTION EXEC ( IncrementValue(<Type>,-<Increment>) )
				POSITION		(<Type>Slider(GetRight,Position) + $hGap) $CurrentY $PlusMinusWidth $PromptHeight
				TOOLTIP			~<ToolTip>~
				TYPENAME		~Button~ 
				TEXT			~<MinusText>~
				HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

	Define: <Type>PlusButton Using DDWinCtrlDef AsSymbol <Type>PlusButton
		Fields:	DACTIONSTEXT	ACTION EXEC ( IncrementValue(<Type>,<Increment>) )
				POSITION		(<Type>MinusButton(GetRight,Position) + $hGap) $CurrentY $PlusMinusWidth $PromptHeight
				TOOLTIP			~<ToolTip>~
				TYPENAME		~Button~ 
				TEXT			~<PlusText>~
				HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

	Define: <Type>ZeroButton Using DDWinCtrlDef AsSymbol <Type>ZeroButton
		Fields:	DACTIONSTEXT	ACTION EXEC ( ZeroValue(<Type>) )
				POSITION		(<Type>PlusButton(GetRight,Position) + $hGap) $CurrentY $PlusMinusWidth $PromptHeight
				TOOLTIP			~<ToolTip>~
				TYPENAME		~Button~ 
				TEXT			~0~
				HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

	CurrentY = <Type>ZeroButton(GetBottom,Position) + $vGap;
	CurrentRight = <Type>ZeroButton(GetRight,Position) + $hGap + $hGap;
}


VOID DefineImageEditDialog()
{
	Define: ImageEditDialog Using DDWinDef
		Fields:	POSITION			100, 100, 600, 600 
				TITLE				~Adjust Images~
				TYPENAME			~Dialog~ 
				WantsMinimizeBox	TRUE
				//StatusBar			~1 100~
				OACTIONSTEXT		ACTION EXEC ( CloseImageEditDialog() )
				HACTIONSTEXT		ACTION SHOWHELPPAGE ( KPISHelpFile "ImageEdit.htm" ) 

		Contains: INLISTORDER
		{
			//DefineImageEditLine( D,		1,	~Analyzer Density~,	~Adjust Analyzer Density~,	~AnalyzerDensity~ );
			//DefineImageEditLine( R,		1,	~Analyzer Red~,		~Adjust Analyzer Red~,		~AnalyzerRed~ );
			//DefineImageEditLine( G,		1,	~Analyzer Green~,	~Adjust Analyzer Green~,	~AnalyzerGreen~ );
			//DefineImageEditLine( B,		1,	~Analyzer Blue~,	~Adjust Analyzer Blue~,		~AnalyzerBlue~ );
			//CurrentY += $vGap + $vGap;

			DefineImageEditLine( cDensity,	1,	~Density~,			~Make the image Lighter or Darker~,~CorrectionDensity~,~&L~,~&D~ );
			DefineImageEditLine( cRed,		1,	~Red~,				~Make the image more Cyan or more Red~,~CorrectionRed~,~&C~,~&R~ );
			DefineImageEditLine( cGreen,	1,	~Green~,			~Make the image more Magenta or more Green~,~CorrectionGreen~,~&M~,~&G~ );
			DefineImageEditLine( cBlue,		1,	~Blue~,				~Make the image more Yellow or more Blue~,~CorrectionBlue~,~&Y~,~&B~ );

			CurrentY += $vGap + $vGap;

			DefineImageEditLine( cContrast,	1,	~Contrast~,			~Adjust the Contrast of the image~,~CorrectionContrast~,~-~,~+~ );
			DefineImageEditLine( cGamma,	.1, ~Gamma~,			~Adjust the Gamma of the image~,~CorrectionGamma~,~-~,~+~ );
			DefineImageEditLine( cSaturation,1,	~Saturation~,		~Adjust the Saturation of the image~,~CorrectionSaturation~,~-~,~+~ );

			if ( Numeric(~<$[Symbols].RunVersion[Value]>~) >= 2.1 )
			{
				CurrentY += $vGap + $vGap;

				DefineImageEditLine( cSharpen,	1,	~Sharpen~,		~Adjust the Sharpening for this image~,~Increase Sharpening for this image~,~CorrectionSharpen~,~-~,~+~ );
			}

			CurrentY += $vGap + $vGap;

			DefineImageEditLine( cArbitraryRotation,	.05,~Angle~,~Correct the horizontal angle of the image~,~CorrectionRotation~,~-~,~+~ );

			Define: RotatePrompt Using DDWinCtrlDef AsSymbol RotatePrompt
				Fields:	POSITION		$LeftX $CurrentY $PromptWidth $PromptHeight
						TEXT			~Rotate~
						RightJustified	TRUE
						TYPENAME		StaticText

			Define: RotateCCWButton Using DDWinCtrlDef AsSymbol RotateCCWButton
				Fields:	DACTIONSTEXT	ACTION EXEC ( IncrementRotateFromDisk(-90) )
						POSITION		(RotatePrompt(GetRight,Position) + $hGap) RotatePrompt(GetTop,Position)-2
										30, $ButtonHeight
						TOOLTIP			~Rotate the image left by 90 degrees~
						TYPENAME		~Button~ 
						TEXT			~CC&W~
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

			Define: RotateCWButton Using DDWinCtrlDef AsSymbol RotateCWButton
				Fields:	DACTIONSTEXT	ACTION EXEC ( IncrementRotateFromDisk(90) )
						POSITION		RotateCCWButton(GetRight,Position) + $hGap RotateCCWButton(GetTop,Position) 30, $ButtonHeight
						TOOLTIP			~Rotate the image right by 90 degrees to get an upright position~
						TYPENAME		~Button~ 
						TEXT			~CW~
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

			CurrentY = RotatePrompt( GetBottom,Position ) + $vGap;


			IF 0
			{
				Define: CropPrompt Using DDWinCtrlDef AsSymbol CropPrompt
					Fields:	POSITION		$LeftX, $CurrentY,$PromptWidth,$PromptHeight
							TEXT			Translate( ~Crop~ )
							TYPENAME		StaticText ;

				ValueWidth = $ValueWidth + ($ValueWidth / 2);

				Define: CropXField Using DDWinCtrlDef AsSymbol CropXField
					Fields:	DACTIONSTEXT	ACTIONS ( Save DialogTimer(0 1000) )
							GENCONFIELD		~cCropX~
							GENCONNAME		THIS
							IACTIONSTEXT	ACTIONS ( Get )
							OACTIONSTEXT	ACTIONS ( Save )
							POSITION		(CropPrompt(GetRight,Position) + $hGap) $CurrentY $ValueWidth $PromptHeight
							TEXT			~~
							TOOLTIP			~Crop X Position~
							TYPENAME		EditText
							HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" )

				Define: CropYField Using DDWinCtrlDef AsSymbol CropYField
					Fields:	DACTIONSTEXT	ACTIONS ( Save DialogTimer(0 1000) )
							GENCONFIELD		~cCropY~
							GENCONNAME		THIS
							IACTIONSTEXT	ACTIONS ( Get )
							OACTIONSTEXT	ACTIONS ( Save )
							POSITION		(CropXField(GetRight,Position) + $hGap) $CurrentY $ValueWidth $PromptHeight
							TEXT			~~
							TOOLTIP			~Crop Y Position~
							TYPENAME		EditText
							HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" )

				Define: CropWidthField Using DDWinCtrlDef AsSymbol CropWidthField
					Fields:	DACTIONSTEXT	ACTIONS ( Save DialogTimer(0 1000) )
							GENCONFIELD		~cCropWidth~
							GENCONNAME		THIS
							IACTIONSTEXT	ACTIONS ( Get )
							OACTIONSTEXT	ACTIONS ( Save )
							POSITION		(CropYField(GetRight,Position) + $hGap) $CurrentY $ValueWidth $PromptHeight
							TEXT			~~
							TOOLTIP			~Crop Width Position~
							TYPENAME		EditText
							HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" )

				Define: CropLengthField Using DDWinCtrlDef AsSymbol CropLengthField
					Fields:	DACTIONSTEXT	ACTIONS ( Save DialogTimer(0 1000) )
							GENCONFIELD		~cCropLength~
							GENCONNAME		THIS
							IACTIONSTEXT	ACTIONS ( Get )
							OACTIONSTEXT	ACTIONS ( Save )
							POSITION		(CropWidthField(GetRight,Position) + $hGap) $CurrentY $ValueWidth $PromptHeight
							TEXT			~~
							TOOLTIP			~Crop Length in percent~
							TYPENAME		EditText
							HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" )
			}

			IF 0
			{
				Define: InputProfileComboPrompt Using DDWinCtrlDef AsSymbol InputProfileComboPrompt
					Fields:	TypeName		StaticText
							Text			~ICC Profile~
							Position		$LeftX RotateCWButton(GetBottom,Position) + $vGap, $ButtonWidth $ButtonHeight

				Define: InputProfileComboBox Using DDWinCtrlDef AsSymbol InputProfileComboBox
					Fields:	TypeName		SComboBox
							Text			~Input Profile~
							Position		InputProfileComboPrompt(GetRight,Position) + $hGap,
											RotateCWButton(GetBottom,Position) + $vGap,
											$ButtonWidth ($ButtonHeight * 4)
							GenConName		THIS
							GenConField		~ICCProfile~

				CurrentY = InputProfileComboBox(GetTop,Position) + $ButtonHeight + $vGap;
			}

			CurrentY = RotatePrompt(GetBottom,Position) + $vGap*3;

			ButtonW = 42;

			Define: PrevButton Using DDWinCtrlDef AsSymbol PrevButton
				Fields:	DACTIONSTEXT	ACTION EXEC ( OnPrevButton() )
						POSITION		$LeftX ,$CurrentY, $ButtonW, $ButtonHeight
						TOOLTIP			~See the previous image~
						TYPENAME		~Button~ 
						TEXT			~&Prev~
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

			Define: NextButton Using DDWinCtrlDef AsSymbol NextButton
				Fields:	DACTIONSTEXT	ACTION EXEC ( OnNextButton() )
						POSITION		(PrevButton(GetRight,Position) + $hGap) $CurrentY $ButtonW, $ButtonHeight
						TOOLTIP			~See the next image~
						TYPENAME		~DEFAULTBUTTON~ 
						TEXT			~&Next~
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

			Define: OpenButton Using DDWinCtrlDef AsSymbol OpenButton
				Fields:	DACTIONSTEXT	ACTION EXEC ( OnOpenButton() )
						TYPENAME		~Button~ 
						TEXT			~&Open~
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

			Define: RefImageButton Using DDWinCtrlDef AsSymbol RefImageButton
				Fields:	//DACTIONSTEXT	ACTION RUNKPL ( LabReferenceImage )
						DACTIONSTEXT	ACTION DOC ( LabReferenceImage Open LabReferenceImage  )
						TYPENAME		~Button~ 
						TEXT			~Re&f~
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "<HelpPage>" ) ;

			Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton
				Fields:	GENCONNAME		This
						DACTIONSTEXT	ACTION EXEC ( CancelImageEdits(TRUE) )
						POSITION		(NextButton(GetRight,Position) + $hGap*5) $CurrentY $ButtonW, $ButtonHeight
						TEXT			~Cancel~
						TOOLTIP			~Cancel the changes you have been making without affecting the database~
						TYPENAME		BUTTON
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "ImageEditCancelButton.htm" ) ;

			Define: ApplyButton Using DDWinCtrlDef AsSymbol ApplyButton
				Fields:	GENCONNAME		This
						DACTIONSTEXT	ACTION EXEC ( ApplyUpdates() )
						POSITION		(CancelButton(GetRight,Position) + $hGap), $CurrentY, $ButtonW, $ButtonHeight
						TEXT			~&Apply~
						TOOLTIP			~Apply current settings to newly selected images~
						TYPENAME		BUTTON
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "ImageEditApplyButton.htm" ) ;

			Define: GoButton Using DDWinCtrlDef AsSymbol GoButton
				Fields:	GENCONNAME		THIS
						DACTIONSTEXT	ACTION EXEC ( AcceptImageEdits() )
						POSITION		(ApplyButton(GetRight,Position) + $hGap) ,$CurrentY, $ButtonW, $ButtonHeight
						TEXT			~&Save~
						TOOLTIP			~Save these changes in the database and reset the deltas to their nominal values~
						TYPENAME		BUTTON
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "ImageEditCommitButton.htm" ) 


			Define: ResetButton Using DDWinCtrlDef AsSymbol ResetButton
				Fields:	GENCONNAME		This
						DACTIONSTEXT	ACTION EXEC ( ResetImageEdits() )
						POSITION		(GoButton(GetRight,Position) + $hGap) ,$CurrentY, $ButtonW, $ButtonHeight
						TEXT			~Reset~
						TOOLTIP			~Forget all changes and restore to the original values in the database~
						TYPENAME		BUTTON
						HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "ImageEditResetButton.htm" ) ;


			IF PROTOTYPING()
			{
						Define: PortStaticText Using DDWinCtrlDef AsSymbol PortStaticText 
							Fields: TypeName        StaticText
									Text            ~Port~
									RightJustified	TRUE
									POSITION		GoButton(GetLeft,Position), RotateCWButton(GetTop,Position), 40, $ButtonHeight

						Define: PortListComboBox Using DDWinCtrlDef AsSymbol PortListComboBox 
							Fields: TypeName		SComboBox  
									POSITION		PortStaticText(GetRight,Position) + $hGap, PortStaticText(GetTop,Position)-2, 30, $ButtonHeight * 4
									IActionsText    ~[GetList(PortList) Get]~
									DActionsText	~[Save Exec("OnPortChange()")]~
									OActionsText    ~[Save]~
									GenConName       THIS
									GenConField      ~SerialInputPort~
									Tooltip          ~Select port to DRGB edit device.~
			}

			BottomButtonsRight = ResetButton(GetRight,Position) + 8;
			if ( <BottomButtonsRight> > <CurrentRight> )
			{
				CurrentRight = <BottomButtonsRight>;
			}

			CurrentY = ResetButton(GetBottom,Position) + $vGap;

			Define: ShiftCropLeftButton Using DDWinCtrlDef AsSymbol ShiftCropLeftButton 
					Fields: TypeName		Button
							Text			Translate( ~&[~ )
							DActionsText	ACTION EXEC ( ShiftCropLeft() ) 

			Define: ShiftCropRightButton Using DDWinCtrlDef AsSymbol ShiftCropRightButton 
					Fields: TypeName		Button
							Text			Translate( ~&]~ )
							DActionsText	ACTION EXEC ( ShiftCropRight() ) 

			Define: ShiftCropUpButton Using DDWinCtrlDef AsSymbol ShiftCropUpButton 
					Fields: TypeName		Button
							Text			Translate( ~&;~ )
							DActionsText	ACTION EXEC ( ShiftCropUp() ) 

			Define: ShiftCropDownButton Using DDWinCtrlDef AsSymbol ShiftCropDownButton 
					Fields: TypeName		Button
							Text			Translate( ~&'~ )
							DActionsText	ACTION EXEC ( ShiftCropDown() ) 

			Define: ShrinkCropButton Using DDWinCtrlDef AsSymbol ShrinkCropButton 
					Fields: TypeName		Button
							Text			Translate( ~&-~ )
							DActionsText	ACTION EXEC ( ShrinkCrop() ) 

			Define: ExpandCropButton Using DDWinCtrlDef AsSymbol ExpandCropButton 
					Fields: TypeName		Button
							Text			Translate( ~&=~ )
							DActionsText	ACTION EXEC ( ExpandCrop() ) 

			Define: UseLastCropButton Using DDWinCtrlDef AsSymbol UseLastCropButton 
					Fields: TypeName		Button
							Text			Translate( ~&\~ )
							DActionsText	ACTION EXEC ( OnUseLastCrop() ) 
		}

	CurrentY = <CurrentY> + 25;

	x = (App( thisApp,MainWindow,GetClientWidth ) / 2) - $CurrentRight - 5;
	y = (App( thisApp,MainWindow,GetClientHeight ) / 2) - $CurrentY - 22;
	y = 5;

	CurrentRight += 5;

	ImageEditDialog( Set,Position,~<x> <y>  <CurrentRight>  <CurrentY>~ );
	Global( ImageEditDialog );
}

NUMERIC OnPrevButton()
{
	ImageCorrections( GetCrop,GetOpenImagePath(),lastCropX,lastCropY,lastCropWidth,lastCropLength );

	if ( Document( Doc,FindByName,~FrameSelectorDoc~ ) )
	{
		AcceptImageEdits();
		Action = ACTION DOC ( FrameSelectorDoc "SelectPrev(FALSE);" );
		return PerformActions( Action );
	}

	if ( GenCon( TheWindow,GetWindow,~ImagesThumbNailWindow~ ) )
	{
		if ( TheWindow(GetActiveViewOfWindow,View) )
		{
			AcceptImageEdits();
			return View( PostViewMessage,0x0100,0x25,0 );
		}
	}

	return FALSE;
}

NUMERIC OnNextButton()
{
	ImageCorrections( GetCrop,GetOpenImagePath(),lastCropX,lastCropY,lastCropWidth,lastCropLength );

	if ( Document( Doc,FindByName,~FrameSelectorDoc~ ) )
	{
		AcceptImageEdits();
		Action = ACTION DOC  ( FrameSelectorDoc "SelectNext(FALSE);" );
		return PerformActions( Action );
	}

	if ( GenCon( TheWindow,GetWindow,~ImagesThumbNailWindow~ ) )
	{
		if ( TheWindow(GetActiveViewOfWindow,View) )
		{
			AcceptImageEdits();
			return View( PostViewMessage,0x0100,0x27,0 );
		}
	}

	return FALSE;
}

NUMERIC OnOpenButton()
{
	if ( GenCon( TheWindow,GetWindow,~ImagesThumbNailWindow~ ) )
	{
		TheChar = chr( ~o~ );

		if ( TheWindow(GetActiveViewOfWindow,View) )
		{
			return View( PostViewMessage,0x0100,0x4F,0 );
		}

	}
}



VOID IncrementRotateFromDisk( RotateFromDisk )
{
	RotateFromDisk = KeyState( SHIFT ) ? (0 - <RotateFromDisk>) : <RotateFromDisk>;

	NewRotateFromDisk = $RotateFromDisk + EditDialog( GetValue,cRotateFromDisk );

	while ( $NewRotateFromDisk >= 360 )
		{ NewRotateFromDisk -= 360; }

	while ( $NewRotateFromDisk < 0 )
		{ NewRotateFromDisk += 360; }

	ImageEditData( SetValue,cRotateFromDisk,$NewRotateFromDisk );
	EditDialog( SetString,RotateFromDiskField,$NewRotateFromDisk );
	EditDialog( Update );
	UpdateAffectedImages();
}


VOID ZeroValue( which )
{
	EditDialog( SetString,~0~,<which> );
	UpdateAffectedImages();
}

NUMERIC IncrementValue( which,amount )
{
	CurrentValue = EditDialog( GetValue,<which>);
	EditDialog( SetString,<CurrentValue> + <amount>,<which> );
	return UpdateAffectedImages();
}


NUMERIC AcceptImageEdits()
{
	KillTimer( 0 );

	if ( !GenCon( View,GetActiveView ) )
	{ 
		KillTimer( 0 );
		return Warning( Translate( ~There are no selected images~ ) ); 
	}

	if ( View( IsThumbNailView ) && (~<$con.View[ViewDataType]>~ == ~Image~) )
	{
		if ( !View( GetSelected,SelectedImages ) )		
			{ return Warning( ~There were no images selected~ ); }

		count = 0;
		while ( SelectedImages( GetNext,Image ) )
		{
			ImageEditData( SaveCorrections,~<$con.Image[Path]>~ );
			ResetDeltas();
			ImageEditData( RefreshCorrections,~<$con.Image[Path]>~ );	
			++count;
		}		
		
		if ( !<count> )
			{ return Warning( Translate( ~No images were selected~ ) ); }
	}
	else
	{
	
		ImageEditData( SaveCorrections );
		ResetDeltas();
		return ImageEditData( RefreshCorrections );	

		//return Warning( Translate( ~There were no images selected~ ) );
	}

	IF 0
	{
		if ( View( IsImageView ) )
		{
			if ( View( GetDocumentPath,Path ) )
			{
				ImageEditData( SaveCorrections,~<Path>~ );
				ResetDeltas();
				ImageEditData( RefreshCorrections,~<Path>~ );
			}
		}
	}

	return EditDialog( Update );
}


NUMERIC CancelImageEdits( ImagesMustBeSelected )
{
	KillTimer( 0 ); 
	count = 0;

	ImageEditData( CancelCorrections );
	ResetDeltas();
	return ImageEditData( RefreshCorrections );


	if ( GenCon( View,GetActiveView ) )
	{
		if ( View( IsThumbNailView ) && (~<$con.View[ViewDataType]>~ == ~Image~) )
		{
			if ( View( GetSelected,SelectedImages ) )		
			{
				while ( SelectedImages( GetNext,Image ) )
				{
					ImageEditData( CancelCorrections,~<$con.Image[Path]>~ );
					ResetDeltas();
					ImageEditData( RefreshCorrections,~<$con.Image[Path]>~ );
					++count;
				}

				EditDialog( Update );
			}
		}
	}


	if ( $ImagesMustBeSelected && (<count> == 0) )
	{
		return Warning( Translate( ~Nothing was selected~ ) );
	}

	return TRUE;
		

	IF 0
	{
		if ( View( IsImageView ) )
		{
			if ( View( GetDocumentPath,Path ) )
			{
				ImageEditData( CancelCorrections,~<Path>~ );
				ResetDeltas();
				ImageEditData( RefreshCorrections,~<Path>~ );
			}
		}
	}

	return EditDialog( Update );
}


VOID ResetDeltas()
{
	ImageEditData( SetValues,cDensity,0,cRed,0,cGreen,0,cBlue,0,cContrast,0,cGamma,0.0,cSaturation,0,cArbitraryRotation,0.0,cRotateFromDisk,0 );
	ImageEditData( SetValues,cCropX,50,cCropY,50,cCropWidth,100,cCropLength,100 );

	if ( Numeric(~<$[Symbols].RunVersion[Value]>~) >= 2.1 )
	{
		ImageEditData( SetValues,cSharpen,0 );
	}

	EditDialog( Update );
}



NUMERIC ResetImageEdits()
{
	if ( MessageBox( ~Are you sure you want to forget all current and previous changes?~,YESNO ) != YES )
		{ return FALSE; }

	ImageEditData( ResetCorrections );
	ResetDeltas();
	return ImageEditData( RefreshCorrections );

	if ( !GenCon( View,GetActiveView ) )
	{ 
		KillTimer( 0 );
		return Warning( ~There is no active image~ ); 
	}


	if ( View( IsThumbNailView ) && (~<$con.View[ViewDataType]>~ == ~Image~) )
	{
		if ( !View( GetSelected,SelectedImages ) )		
			{ return Warning( ~There were no images selected~ ); }

		count = 0;
		while ( SelectedImages( GetNext,Image ) )
		{
			ImageEditData( ResetCorrections,~<$con.Image[Path]>~ );
			ResetDeltas();
			ImageEditData( RefreshCorrections,~<$con.Image[Path]>~ );
			++count;
		}

		if ( !<count> )
			{ return Warning( Translate( ~No images were selected~ ) ); }
	}
	else
	{
		return Warning( Translate( ~Nothing was selected~ ) );
	}

	IF 0
	{
		if ( View( IsImageView ) )
		{
			if ( View( GetDocumentPath,Path ) )
			{
				ImageEditData( ResetCorrections,~<Path>~ );
				ResetDeltas();
				ImageEditData( RefreshCorrections,~<Path>~ );
			}
		}
	}

	return EditDialog( Update );
}


VOID CloseImageEditDialog()
{
IF PROTOTYPING()
{
	SetWorkStationSettings( ~<$Job.Title>~,SerialInputPort,~<$con.ImageEditData[SerialInputPort]>~,TRUE );

	CloseInputDevice();
}

	CancelImageEdits(FALSE);

	KillTimer( 0 );
	EditDialog( End );
	Exit();
}

NUMERIC ApplyUpdates()
{
	return UpdateAffectedImages();

	if ( !GenCon( View,GetActiveView ) )
		{ return Warning( ~There were no images selected~ ); }

	if ( !View( IsThumbNailView ) && (~<$con.View[ViewDataType]>~ == ~Image~) )
		{ return Warning( ~There were no images selected~ ); }
	
	if ( !View( GetSelected,SelectedImages ) )		
		{ return Warning( ~There were no images selected~ ); }

	count = SelectedImages( ChildCount );

	if ( !<count> )
		{ return Warning( ~There were no images selected~ ); }

	return UpdateAffectedImages();
}


NUMERIC UpdateAffectedImages()		// APPLIES THE MOST RECENT DIALOG CHANGE TO THE AFFECTED IMAGES
{
	KillTimer( 0 );

	return ImageEditData( UpdateCorrections );

}


VOID GetProfiles( Type,Control )
{
	Query = ~Select * From Profiles Where Type = '<Type>'~;

	if ( !PGenConList( ProfilesList,Connect,Cursor,Forward,QUERY,~<Query>~ ) )
	{ 
		dBase( GetErrorDescription,theErr );
		Error( ~Database Query Failed: <Query>.  <theErr>~ ); 
	}

	ProfilesList( MakeStringList,<Type>Profiles,Name );

	Global( <Type>Profiles );
}


VOID EditImages()	// BRINGS UP THE DIALOG 
{
	if ((~<$App.Name>~ !=~DP1.exe~) && (!GetUserPermissions( ImageEditing ) ))
	{
		Warning( Translate( ~You don't have permission to edit images.  See your administrator~ ) );
		Exit();
	}

	if ( !Defined(EditDialog) )
	{
		GetProfiles( Output,OutputProfileComboBox );
		GetProfiles( Input,InputProfileComboBox );
		GenDlg( EditDialog,Definition,ImageEditDialog,Data,ImageEditData,Document,$Doc.This,New,Temporary );
		
		EditDialog( SetControlFromStringList,OutputProfileComboBox,OutputProfiles,Selection,Update );
		EditDialog( SetControlFromStringList,InputProfileComboBox,InputProfiles,Selection,Update );

		Global( EditDialog );
	}
}

VOID ReOpen()
{
	EditDialog( SetWindowOrder,Top,SetFocus );
}

NUMERIC OpenInputDevice( Port )
{
	ForgetGlobal( InputDevice );
	Device( InputDevice );
	Global( InputDevice );

	if ( !InputDevice( Name,Com<Port>,Access,ReadWrite,Open ) )
	{
		return Warning( Translate( ~Could not open serial port <Port>~ ) );
	}

	if ( !InputDevice( GetCommParameters, parameters ) )
	{
		return Warning( Translate( ~Could not get parameters for serial port <Port>~ ) );
	}

	// REM - ByteSize 4 5 6 7 8 = 4 5 6 7 8
	// REM - Parity   0 1 2 3 4 = no, odd, even, mark, space
	// REM - StopBits 0 1 2     = 1 1.5 2

	parameters( SetValues,BaudRate,9600,ByteSize,8,Parity,0,StopBits,0 ); 

	if ( !InputDevice( SetCommParameters,parameters ) )
	{
		return Warning( Translate( ~Could not set parameters for serial port <Port>~ ) );
	}

	if ( !InputDevice( SetupCommDevice,1024,1024 ) )
	{
		return Warning( Translate( ~Could not set up parameters on serial port <Port>~ ) );
	}

	InputDevice( OnReadComplete,SerialInputReceived );
	InputDevice( SerialReadTermination,~chr(0x0D)~,1 );
	InputDevice( StartSerialReadThread );

	return TRUE;
}


VOID CloseInputDevice()
{
	if ( Defined( InputDevice ) )
	{
		InputDevice( Close );
		ForgetGlobal( InputDevice );
	}
}


NUMERIC SerialInputReceived( theChar )
{
	if ( IsNULL( ~<theChar>~ ) )	{ return FALSE; }
	if ( ~<theChar>~ == ~~  )		{ return FALSE; }

	if ( !KeyState( SHIFT ) )
	{
		if ( ~<theChar>~ == ~d~ )	{ return IncrementValue(cDensity,-1); }
		if ( ~<theChar>~ == ~D~ )	{ return IncrementValue(cDensity,1); }
		if ( ~<theChar>~ == ~r~ )	{ return IncrementValue(cRed,-1); }
		if ( ~<theChar>~ == ~R~ )	{ return IncrementValue(cRed,1); }
		if ( ~<theChar>~ == ~g~ )	{ return IncrementValue(cGreen,-1); }
		if ( ~<theChar>~ == ~G~ )	{ return IncrementValue(cGreen,1); }
		if ( ~<theChar>~ == ~b~ )	{ return IncrementValue(cBlue,-1); }
		if ( ~<theChar>~ == ~B~ )	{ return IncrementValue(cBlue,1); }
		return TRUE;
	}

	if ( ~<theChar>~ == ~d~ )	{ return ShrinkCrop(); }
	if ( ~<theChar>~ == ~D~ )	{ return ExpandCrop(); }
	if ( ~<theChar>~ == ~r~ )	{ return ShiftCropLeft(); }
	if ( ~<theChar>~ == ~R~ )	{ return ShiftCropRight(); }
	if ( ~<theChar>~ == ~g~ )	{ return ShiftCropDown(); }
	if ( ~<theChar>~ == ~G~ )	{ return ShiftCropUp(); }

	return FALSE;
}

VOID OnPortChange()
{
	CloseInputDevice();

	EditDialog( GetInput );
	if ( IsNumeric( ~<$con.ImageEditData[SerialInputPort]>~ ) )
	{
		OpenInputDevice( ~<$con.ImageEditData[SerialInputPort]>~ );
	}
}

LastCropX = 50;
LastCropY = 50;
LastCropWidth = 100;
LastCropLength = 100;
LastRotation = 0;

VOID ChangeCrop( SetTheCrop )
{
	EditDialog( GetInput );

	if ( ~<$con.ImageEditData[CropName]>~ != ~~ )
	{
		Query = ~Select CropX,CropY,CropWidth,CropLength,Rotation From Crops Where Name = '<$con.ImageEditData[CropName]>'~;

		if ( !Ado( dBase,Connect,GetValuesFor,~<Query>~,CropX,CropY,CropWidth,CropLength,Rotation ) )
		{
			return EditDialog( SetStatus,0,Translate( ~No crop exists for <$con.ImageEditData[CropName]>~ ) );
		}

		LastCropX = ~<CropX>~;			LastCropY = ~<CropY>~; 
		LastCropWidth = ~<CropWidth>~;	LastCropLength= ~<CropLength>~;
		LastRotation = ~<Rotation>~;

		if ( <SetTheCrop> )
		{
			OnUseLastCrop();
		}
	}
}


VOID OnSaveCrop()
{
	EditDialog( GetInput );

	Query = STR ( SELECT * From Crops Order By Name );
	Actions = ACTION Doc ( ~Crops~ OpenOnce CropsDoc "AddNewCrop( ~All~,~<Query>~,~<$con.ImageEditData[CropX]>~,~<$con.ImageEditData[CropY]>~,~<$con.ImageEditData[CropWidth]>~,~<$con.ImageEditData[CropLength]>~,50,50,100,100,0,~~,0);" );
	
	PerformActions( Actions );
}

VOID OnViewCrops()
{
	Query = STR ( SELECT * From Crops Order By Name );

	Actions = ACTION Doc ( ~Crops~ OpenOnce CropsDoc "Init( ~~,~<Query>~ );" );
	PerformActions( Actions );
}


STR GetOpenImagePath()
{
	DocumentPath = ~~;

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( !Window( GetNext,aView ) )
			continue;

		aView( Get,ViewType,ViewType );

		if ( ~<ViewType>~ == ImageEditView )
		{
			aView( GetDocumentPath,DocumentPath );
		}
	}

	return ~<DocumentPath>~;
}


NUMERIC ShrinkCrop()
{
	LastImagePath = GetOpenImagePath();

	if ( ImageCorrections( GetCrop,~<LastImagePath>~,cX,cY,cW,cL ) )
	{
		orgW = <cW>;

		if ( <--cW> < 10 )
		{
			cW = 10;
		}

		cL = <cW> * <cL> / <orgW>;

		EditDialog( SetStrings,CropWidth,~<cW>~,CropLength,~<cL>~ );
		EditDialog( SetStatus,0,Translate( ~Crop is <cX>,<cY>,<cW>,<cL>~ ) );
		return ImageCorrections( UpdateCrop,~<LastImagePath>~,~<cX>~,~<cY>~,~<cW>~,~<cL>~ );
	}

	return EditDialog( SetStatus,0,Translate( ~Can't alter crop.  No image selected~ ) );
}


NUMERIC ExpandCrop()
{
	LastImagePath = GetOpenImagePath();

	if ( ImageCorrections( GetCrop,~<LastImagePath>~,cX,cY,cW,cL ) )
	{
		orgW = <cW>;

		if ( <++cW> > 100 )
		{
			cW = 100;
		}

		cL = <cW> * <cL> / <orgW>;

		EditDialog( SetStrings,CropWidth,~<cW>~,CropLength,~<cL>~ );
		EditDialog( SetStatus,0,Translate( ~Crop is <cX>,<cY>,<cW>,<cL>~ ) );
		return ImageCorrections( UpdateCrop,~<LastImagePath>~,~<cX>~,~<cY>~,~<cW>~,~<cL>~ );
	}

	return EditDialog( SetStatus,0,Translate( ~Can't alter crop.  No image selected~ ) );
}


NUMERIC ShiftCropLeft()
{
	LastImagePath = GetOpenImagePath();

	if ( ImageCorrections( GetCrop,~<LastImagePath>~,cX,cY,cW,cL ) )
	{
		if ( <--cX> < 0 )
		{
			cX = 0;
		}

		EditDialog( SetStrings,CropX,~<cX>~ );
		EditDialog( SetStatus,0,Translate( ~Crop is <cX>,<cY>,<cW>,<cL>~ ) );
		return ImageCorrections( UpdateCrop,~<LastImagePath>~,~<cX>~,~<cY>~,~<cW>~,~<cL>~ );
	}

	return EditDialog( SetStatus,0,Translate( ~Can't alter crop.  No image selected~ ) );
}


NUMERIC ShiftCropDown()
{
	LastImagePath = GetOpenImagePath();

	if ( ImageCorrections( GetCrop,~<LastImagePath>~,cX,cY,cW,cL ) )
	{
		if ( <++cY> > 100 )
		{
			cY = 100;
		}

		EditDialog( SetStrings,CropY,~<cY>~ );
		EditDialog( SetStatus,0,Translate( ~Crop is <cX>,<cY>,<cW>,<cL>~ ) );
		return ImageCorrections( UpdateCrop,~<LastImagePath>~,~<cX>~,~<cY>~,~<cW>~,~<cL>~ );
	}

	return EditDialog( SetStatus,0,Translate( ~Can't alter crop.  No image selected~ ) );
}


NUMERIC ShiftCropRight()
{
	LastImagePath = GetOpenImagePath();

	if ( ImageCorrections( GetCrop,~<LastImagePath>~,cX,cY,cW,cL ) )
	{
		if ( <++cX> > 100 )
		{
			cX = 100;
		}

		EditDialog( SetStrings,CropX,~<cX>~ );
		EditDialog( SetStatus,0,Translate( ~Crop is <cX>,<cY>,<cW>,<cL>~ ) );
		return ImageCorrections( UpdateCrop,~<LastImagePath>~,~<cX>~,~<cY>~,~<cW>~,~<cL>~ );
	}

	return EditDialog( SetStatus,0,Translate( ~Can't alter crop.  No image selected~ ) );
}


NUMERIC ShiftCropUp()
{
	LastImagePath = GetOpenImagePath();

	if ( ImageCorrections( GetCrop,~<LastImagePath>~,cX,cY,cW,cL ) )
	{
		if ( <--cY> < 0 )
		{
			cY = 0;
		}

		EditDialog( SetStrings,CropY,~<cY>~ );
		EditDialog( SetStatus,0,Translate( ~Crop is <cX>,<cY>,<cW>,<cL>~ ) );
		return ImageCorrections( UpdateCrop,~<LastImagePath>~,~<cX>~,~<cY>~,~<cW>~,~<cL>~ );
	}

	return EditDialog( SetStatus,0,Translate( ~Can't alter crop.  No image selected~ ) );
}


VOID OnUseLastCrop()
{
	ImageCorrections( UpdateCrop,GetOpenImagePath(),~<LastCropX>~,~<LastCropY>~,~<LastCropWidth>~,~<LastCropLength>~ );
}


VOID RememberCrop()
{
	EditDialog( GetStrings,X,CropX,Y,CropY,Width,CropWidth,Length,CropLength );

	LastCropX = ~<X>~;	LastCropY = ~<Y>~;  LastCropWidth = ~<Width>~;  LastCropLength = ~<Length>~; 
}



Timer0_Action = ~UpdateAffectedImages()~;	// WHERE TO GO WHEN TIMER0 TRIPS

CorrectIndividualImages = FALSE;				// 

DefineImageEditDialog();

EditImages();

IF PROTOTYPING()
{
	if ( GetWorkStationSettings( ~<$Job.Title>~,SerialInputPort,SerialInputPort,Enabled ) )
	{
		if ( !IsNULL( ~<SerialInputPort>~ ) )
		{
			if ( IsNumeric( ~<SerialInputPort>~ ) )
			{
				EditDialog( SetString,~<SerialInputPort>~ ,SerialInputPort,0 ); 
				OpenInputDevice( ~<SerialInputPort>~ );
			}
		}
		else
		{
			EditDialog( SetString,~None~ ,SerialInputPort,0 );
		}
	}
}
