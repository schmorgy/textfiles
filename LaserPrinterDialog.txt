DialogWidth = 400;
DialogHeight = 390;
TabWidth = <DialogWidth> - 20;
TabHeight = <DialogHeight> - 50;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 150;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;
BigEditTextWidth = 115;
Gap = 20;

// use MediumEditTextWidth when after a static text on a line
MediumEditTextWidth = <TabWidth> - <StaticTextWidth> - <Gap> - <LeftMargin>;

// use LargeEditTextWidth when the only control on a line
LargeEditTextWidth = <TabWidth> - <LeftMargin>;
EditTextWidth = 80;
EditTextHeight = 20;
FileEditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 80;
ButtonHeight = 20;
VerticalSeparation = 30;
FileVerticalSeparation = 42;
InitialVerticalPosition = 50;

if ( !Tree( Name,LaserPrinterQueuesLists,Location,~[STRINGS]~,Exists ) )
{
	StringList: Name LaserPrinterQueuesLists
		Fields:	String	~Default~
	Hang:	LaserPrinterQueuesLists	~[STRINGS]~ ;
}


Define: LaserPrinterDialog Using DDWinDef // if the name is ever changed, you must also change UGenDlgBar::GetWindowPosition
fields: Position 440 60 <DialogWidth> <DialogHeight>
		Title ~Output to a Windows printer~
		AutoPosition 1
		TypeName ~DialogBar~
		IActionsText ~[NULL]~
		OActionsText ~[PerformOActions]~
		Purpose ~LaserPrinter~
		HActionsText ACTION SHOWHELPPAGE ( KPISHelpFile "LaserIntro.htm" ) ;


Contains:
{
	Define: OKButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Activate~
			Position <DialogWidth> - 100 , <DialogHeight> - 30,  <SmallButtonWidth> , <ButtonHeight>
			IActionsText ~[Get]~
			DActionsText ~[
							PerformOActions 
							ExecFile(LaserPrinterDialogRoutines.txt)
							Exec(ActivateButtonHit();)
							Close
							]~
			OActionsText ~[NULL]~
			Tooltip ~Close window and save values.  Make the Windows Printer the active device.~

	Define: CloseButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Close~
			Position <DialogWidth> - 190  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
							ExecFile(LaserPrinterDialogRoutines.txt)
							Exec(CloseButtonHit();)
							Close
							]~
			OActionsText ~[NULL]~
			Tooltip ~Close window and save values.  Don't change the active device.~

	Define: PreviewButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Preview~
			Position <DialogWidth> - 280  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
							HandleViewActions([
							ChangePPUUnits 
							ShowViewStatusBar
							PreviewAll
							]) 

						]~
			OActionsText ~[NULL]~
			Tooltip ~Preview the image.  Useful after you change the resolution if this is the active device.~


	Define: SaveSpecButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Save Output Spec~
			Position <DialogWidth> - 390  ,<DialogHeight> - 30, <SmallButtonWidth> + 20  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
						SaveOutputSpec(NTPrinter)
						]~
			OActionsText ~[NULL]~
			Tooltip ~Save an output specification in text format.~

	Define: LEDPrinterOptions Using DDWinCtrlDef
	fields:	Position 10 10 <TabWidth>  <TabHeight>
			TypeName TabCtrl
			Text ~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~


	Contains:
	{
		Define: Tab0 Using DDWinCtrlDef
		fields: Text ~Setup~
				TypeName Tab
				Tooltip ~Setup Windows Printer~

		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: ResolutionStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Resolution:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>

			Define: ResolutionEditText Using DDWinCtrlDef AsSymbol ResolutionEditText
			fields:	TypeName MaskedEditText
					GenConName THIS
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>, <BigEditTextWidth>,<EditTextHeight>
					GenConField ~Resolution:~
					IActionsText ~[GetConversion(Invert)]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Enter the resolution.~;

			Define: ResolutionUnitsStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~~
					Position ResolutionEditText(GetRight,Position) + 5, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>
					IActionsText ~[GetDisplayResolutionUnits]~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ResolutionOverrideMsgStaticText Using DDWinCtrlDef AsSymbol  ResolutionOverrideMsgStaticText
			fields:	TypeName StaticText
					Position <LeftMargin>, <ypos>,  350 ,  <StaticTextHeight>;


			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperWidthStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Paper Width:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>

			Define: PaperWidthEditText Using DDWinCtrlDef AsSymbol PaperWidthEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>, <BigEditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~PaperWidth:~
					IActionsText ~[GetConversion]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Enter paper width~;

			Define: PaperWidthUnitsStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~~
					Position PaperWidthEditText(GetRight,Position) + 5, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>
					IActionsText ~[GetDisplayUnits]~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperAdvanceStaticText Using DDWinCtrlDef AsSymbol PaperAdvanceStaticText
			fields:	TypeName StaticText
					Text ~Paper Advance:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: PaperAdvanceEditText Using DDWinCtrlDef AsSymbol PaperAdvanceEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>, <BigEditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~PaperAdvance:~
					IActionsText ~[GetConversion]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Enter paper advance~;


			Define: PaperAdvanceUnitsStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~~
					Position PaperAdvanceEditText(GetRight,Position) + 5, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>
					IActionsText ~[GetDisplayUnits]~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CopiesStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Copies:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CopiesEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~Copies:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter the number of copies to print~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: QueueNameStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Queue Name:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight> ;


			Query = ~Select QueueName From QueueDefinition Where PrinterModel = 'NT Printer' Or PrinterModel = 'Windows Printer' Order By QueueName~;

			Define: QueueNameComboBox Using DDWinCtrlDef
			fields:	TypeName SComboBox
					GenConName THIS
					GenConField ~QueueName:~
					Position <LeftMargin>  + <StaticTextWidth> + <Gap>, <ypos>,  <MediumEditTextWidth>, 150
					IActionsText ~[UpdateList(LaserPrinterQueuesLists "<Query>" QueueName) GetList(LaserPrinterQueuesLists) Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					Tooltip ~Enter queue name~;

			// Add support for a print record

			ypos = <ypos> + <VerticalSeparation>;
			Define: PrintRecordStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Printer Configuration:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight> ;

			Define: PrintRecordComboBox Using DDWinCtrlDef
			fields:	TypeName ComboBox
					GenConName THIS
					GenConField ~PrintRecord:~
					Position <LeftMargin>  + <StaticTextWidth> + <Gap>, <ypos>,  <MediumEditTextWidth>, 150
					IActionsText ~[ExecFile(LaserPrinterDialogRoutines.txt) Exec(PopulatePrintRecords();) Get]~
					DActionsText ~[ExecFile(LaserPrinterDialogRoutines.txt) Exec(SelectPrintRecord();)]~
					OActionsText ~[Save]~ 
					Tooltip ~Select a printer configuration~;

			ypos = <ypos> + <VerticalSeparation> + 10;
			Define: HorizontalMirrorCheckBox Using DDWinCtrlDef AsSymbol HorizontalMirrorCheckBox
			fields:	TypeName CheckBox
					GenConField ~HorizontalMirror:~
					Text ~Mirror Horizontal: ~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Position $LeftMargin <ypos> 180 15
					IsTabStop 1
					Tooltip ~Horizontally mirror the whole image before saving.~;

			Define: VerticalMirrorCheckBox Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConField ~VerticalMirror:~
					Text ~Mirror Vertical: ~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Position HorizontalMirrorCheckBox(GetRight,Position)+10 <ypos> 100 15
					IsTabStop 1
					Tooltip ~Vertically mirror the whole image before saving.~;
		}


		Define: Tab00 Using DDWinCtrlDef
		fields: Text ~Positioning~
				TypeName Tab
				Tooltip ~Image Location on Page. Including Rotation and multi-page sequencing.~

		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition> + 15;

			Define: RotatedRadioButton0 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 20 , <ypos> ,50 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton0) 
									UncheckButton(RotatedRadioButton180)
									UncheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~0~
 					Text ~None~
					Tooltip ~Do not rotate the image~;

			Define: RotatedRadioButton90 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 100 , <ypos> ,60 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~90~
 					Text ~90~
					Tooltip ~Rotate the image 90 degrees clockwise~;

			Define: RotatedRadioButton180 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 180 , <ypos> ,60 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~180~
 					Text ~180~
					Tooltip ~Rotate the image 180 degrees~;

			Define: RotatedRadioButton270 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 260 , <ypos> ,60 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton270) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton90) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~270~
					Text ~270~
					Tooltip ~Rotate the image 270 degrees clockwise~;

// attempt to put the group box last to allow tooltip messages to come in
// for the radio controls.  But it didn't work (PDF 9/3/98)
			apos = <ypos>  - 22;
			Define: ZZRotatedGroupBox Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Rotation~
					Tooltip ~Choose an angle of rotation~
					Position $LeftMargin <apos> 360  50;			

//=============================================================================

			ypos = <ypos> + <VerticalSeparation> ;
			ypos = <ypos> + <VerticalSeparation> ;
			apos = <ypos>  - 22;

			Define: OffsetStaticText Using DDWinCtrlDef AsSymbol OffsetStaticText
			fields:	TypeName StaticText
					Text ~Note: Checking "Center" will disable the X and Y Offsets.~
					Position <LeftMargin>+10 , <ypos>+5,  300  <StaticTextHeight> ;

			ypos = <ypos> + <VerticalSeparation> ;
			Define: CenterCheckBox Using DDWinCtrlDef AsSymbol CenterCheckBox
			fields:	TypeName CheckBox
					GenConName THIS
					GenConField ~Center:~
					Text ~Center~
					Position <LeftMargin> + 10, <ypos> + 3, 60, <CheckBoxHeight>
					IActionsText ~[Get]~
					DActionsText ACTIONS (
								Save
								ExecFile(UpdateFileType.txt)
								Exec(UpdateImagePosition(LaserPrinterDialog, CenterCheckBox , ~Center:~ , ~XOffsetEditText~, ~YOffsetEditText~ );)
								)
					OActionsText ~[Save]~
					IsTabStop 1
					Tooltip ~Center the image on the page. Note: If Center is checked, then X Offset and Y Offset are not used.~;

//=============================================================================

			ypos = <ypos> + <VerticalSeparation> ;
			Define: XOffsetStaticText Using DDWinCtrlDef AsSymbol XOffsetStaticText
			fields:	TypeName StaticText
					Text ~X Offset:~
					Position <LeftMargin>+10 , <ypos>+5,  60  <StaticTextHeight> ;

			Define: XOffsetEditText Using DDWinCtrlDef AsSymbol XOffsetEditText
			fields:	TypeName MaskedEditText
					Position XOffsetStaticText(GetRight,Position) + 10, <ypos>,  40, <EditTextHeight>
					GenConName THIS
					GenConField ~XOffsetOnPage:~
					IActionsText ~[GetConversion]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.-~
					PromptChar	 ~ ~		
					Tooltip ~The horizontal position of this image on the page. Note: This is not used if Center is checked.~;
					
			Define: XOffsetUnitsStaticText Using DDWinCtrlDef AsSymbol XOffsetUnitsStaticText
			fields:	TypeName StaticText
					Text ~~
					Position XOffsetEditText(GetRight,Position) + 5, <ypos>+3,  20 ,  <StaticTextHeight>
					IActionsText ~[GetDisplayUnits]~;

			Define: YOffsetStaticText Using DDWinCtrlDef AsSymbol YOffsetStaticText
			fields:	TypeName StaticText
					Text ~Y Offset:~
					Position XOffsetUnitsStaticText(GetRight,Position) + 10 , <ypos>+5,  60  <StaticTextHeight>
				
			Define: YOffsetEditText Using DDWinCtrlDef AsSymbol YOffsetEditText
			fields:	TypeName MaskedEditText
					Position YOffsetStaticText(GetRight,Position)+ 5, <ypos>,  40, <EditTextHeight>
					GenConName THIS
					GenConField ~YOffsetOnPage:~
					IActionsText ~[GetConversion]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.-~
					PromptChar	 ~ ~		
					Tooltip ~The vertical position of this image on the page. Note: This is not used if Center is checked.~;

			Define: YOffsetUnitsStaticText Using DDWinCtrlDef AsSymbol YOffsetUnitsStaticText
			fields:	TypeName StaticText
					Text ~~
					Position YOffsetEditText(GetRight,Position) + 5, <ypos>+3,  20 ,  <StaticTextHeight>
					IActionsText ~[GetDisplayUnits]~;

//			apos = <ypos>  - 22;	DONE ABOVE
			Define: ZZPagePosition Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Position Image On Page~
					Tooltip ~~
					Position $LeftMargin <apos> 360  115;			

//=============================================================================

			ypos = <ypos> + <VerticalSeparation> + <VerticalSeparation> ;
			apos = <ypos>  - 22;

			Define: MultiPageStaticText Using DDWinCtrlDef AsSymbol OffsetStaticText
			fields:	TypeName StaticText
					Text ~When creating multi-page products, please specify this page number and the total number of pages.~
					Position <LeftMargin>+10 , <ypos>+5,  300  2 * <StaticTextHeight> ;

			ypos = <ypos> + <VerticalSeparation> + <VerticalSeparation> / 2 ;
			Define: Page1StaticText Using DDWinCtrlDef AsSymbol Page1StaticText
			fields:	TypeName StaticText
					Text ~Page~
					Position <LeftMargin> + 10 , <ypos>+5,  40  <StaticTextHeight>

			Define: Page1EditText Using DDWinCtrlDef AsSymbol Page1EditText
			fields:	TypeName MaskedEditText
					Position XOffsetStaticText(GetRight,Position) + 10, <ypos>,  40, <EditTextHeight>
					GenConName THIS
					GenConField ~ProductPageSeqCurrent:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Set to current page number of a multi-page product. For example Page 1 OF 2~;
					
			Define: Page2StaticText Using DDWinCtrlDef AsSymbol Page2StaticText
			fields:	TypeName StaticText
					Text ~OF~
					Position XOffsetEditText(GetRight,Position) + 10 , <ypos>+5,  60  <StaticTextHeight>
				
			Define: Page2EditText Using DDWinCtrlDef AsSymbol Page2EditText
			fields:	TypeName MaskedEditText
					Position YOffsetStaticText(GetRight,Position)+ 5, <ypos>,  40, <EditTextHeight>
					GenConName THIS
					GenConField ~ProductPageSeqLast:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Set to the last page number of a multi-page product. For example Page 1 OF 2~;

//			apos = <ypos>  - 22;	DONE ABOVE
			Define: ZZPageSequence Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Multi-page Sequencing~
					Tooltip ~~
					Position $LeftMargin <apos> 360  115;			
		}


		Define: Tab0a Using DDWinCtrlDef
		fields: Text ~File~
				TypeName Tab
				Tooltip ~Set Punch Options~

		Contains: InListOrder
		{
					ypos = <InitialVerticalPosition>;
			Define: SaveImageButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Output File...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText 	ACTIONS (
									ExecFile(FileSave.txt)
									Exec(FileSave(LaserPrinterDialog, SaveImageButton, ~SaveName:~, ~SaveFileType:~, SaveImageEditText);)
									)
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~SaveName:~
					Tooltip ~Select a directory and file name~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: SaveImageEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~SaveName:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: FileTypeStaticText Using DDWinCtrlDef AsSymbol FileTypeStaticText
			fields:	TypeName StaticText
					Text ~File Type:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: FileTypeComboBox Using DDWinCtrlDef
			fields: TypeName SComboBox  
					Position FileTypeStaticText(GetRight,Position), <ypos> ,<ComboBoxWidth> ,<ComboBoxHeight> 
					IActionsText ACTIONS ( GetList(SaveImageFileTypeChoices) Get
									ExecFile(UpdateFileType.txt)
									Exec(UpdateFileType(LaserPrinterDialog, FileTypeComboBox , ~SaveName:~ , ~~);) )

					DActionsText ACTIONS (
								Save
								ExecFile(UpdateFileType.txt)
								Exec(UpdateFileType(LaserPrinterDialog, FileTypeComboBox , ~SaveName:~ , SaveImageEditText);)
								)
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~SaveFileType:~
					Tooltip ~Select a file type~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CompressionQualityStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Compression Quality:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CompressionQualityEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> , <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~CompressionQuality:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter quality value between 0 and 100.   0 = not used.   1 = extremely low quality (very high compression).  100 = very high quality ( low compression). ~;
		}

		Define: Tab3 Using DDWinCtrlDef
		fields: Text ~Adjustments~
				TypeName Tab
				Tooltip ~Gamma and LUTs~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: GammaStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Gamma:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: Gamma Using DDWinCtrlDef
			fields: TypeName MaskedEditText  
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos> ,60 ,20 
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~XGamma:~
					Mask		 ~############~
					AllowedChars ~.-~
					PromptChar	 ~ ~		
					Tooltip ~Enter gamma~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: LUTButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Lookup Table...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[FileOpen Update(LUTEditText)]~
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~Lookup:~
					Tooltip ~Select lookup table file~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: LUTEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~Lookup:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
//					NoHorizontalScroll 1
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit lookup table path~;

			ypos = <ypos> + <FileVerticalSeparation>;
			Define: ColorMatrixButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Color Matrix...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[FileOpen Update(ColorMatrixEditText)]~
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~ColorMat:~
					Tooltip ~Select color matrix file~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ColorMatrixEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~ColorMat:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
//					NoHorizontalScroll 1
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~		
					Tooltip ~Edit path to color matrix file~;

			ypos = <ypos> + <FileVerticalSeparation>;
			Define: GammaButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Gamma...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[FileOpen Update(GammaEditText)]~
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~GammaLut:~
					Tooltip ~Select gamma file~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: GammaEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~GammaLut:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
//					NoHorizontalScroll 1
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit gamma path~;

	//			This is required and is used to recompute values to Mask's number of digits
	//			Don't delete this; if you do Undo will stop working, and the doc will get dirty when it shouldn't
				Define: DummyEditText Using DDWinCtrlDef
				fields:	TypeName MaskedEditText
						Position (-1000) (-1000)  100  100
						GenConField ~Dummy~
						Mask		 ~##################~
						AllowedChars ~-.~
						PromptChar	 ~ ~		
		}
	}
}
Hang: LaserPrinterDialog ~[UI Dialogs]~ ;
