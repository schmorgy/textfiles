//	CREControlDlg.txt

ExecC() ;

//	THIS FILE CONTAINS THE CODE TO CONTROL THE RENDER ENGINE

//	SOME USEFUL GLOBALS

char	*NULL ;
int		 FALSE = 0 ;
int		 TRUE  = ! FALSE ;

UGenCon	*gDataGC ;			//	THE DIALOG DATA GENCON
UGenCon *gDlgDef ;			//	THE DIALOG DEFINITION
char	*gDlg ;				//	THE POINTER TO THE DIALOG OBJECT


main()
{
	Debug(0) ;
	printf(_T("main()\r\n")) ;
}

SetDialogData( UGenCon *LocalGC, char *Dlg, UGenCon *DlgDef)
{
	Debug(0) ;
	gDataGC = LocalGC ;
	gDlg = Dlg ;
	gDlgDef = DlgDef ;

}

term()
{
	printf(_T("term()\r\n")) ;

//	if( gDlg )
//	{
//		CloseDialog( gDlg ) ;		WE ARE CALLED FROM IT'S DESTRUCTOR
//		gDlg = delete gDlg ;		DON'T TRY TO DESTROY THE DIALOG
//	}
	Debug(0) ;

	if( gDataGC )
	{
		gDataGC = delete gDataGC ;
	}

	UGenCon	*CREControlExists = GetTreeObject(_T("CREControlDlg"), _T("[GenCons]")) ;
	if( CREControlExists )
	{
		PluckTreeObject(_T("CREControlDlg"), _T("[GenCons]")) ;
		delete CREControlExists ;
	}

//	if( gDlgDef )				THIS IS NOW DONE IN THE DIALOG
//	{
//		gDlgDef = delete gDlgDef ;
//	}
}

Close()
{
	Debug(0) ;
	CloseDialog( gDlg ) ;
}

Apply()
{
	Debug(0) ;
	long	ReadAhead ;
	long	ParseAhead ;
	long	ProgramAhead ;
	long	RenderAhead ;
	long	QtyToRender ;
	long	AllowPreProgram ;
	long	BatchPollTime ;
	long	PageAdvanceTime ;
	long	SuspendNow ;
	TCHAR	BarCodeColor[64] ;

	long	RELogLevel ;
	long	REBLogLevel ;
	long	HOPLogLevel ;
	long	ProgramIMA ;
	long	DebugIMA ;
	long	PerformRender ;
	long	ForceImaChainError ;
	long	ForceImaRenderError ;
	long	RunContinuous ;
	long	DeletePackageJob ;
	long	UseMMX ;
	long	UseNewTiff ;
	long	UseNewTiffSink ;
	long	ClearCRTBuffer ;
	double	PFCRTSpillOver ;
	double	PFLEDSpillOver ;
	long	KernelNumber ;
	long	theDP2Sharpen ;
	long	theSharpenThreshold ;
	long	theSharpenUpperLimit ;
	long	theSharpenLowerLimit ;
	long	X1 ;
	long	X2 ;
	long	BlurGain ;
	long	LogGainTable ;
	long	UseSparceKernel ;
	long	PreTranslateNoCatch ;
	long	CInterpLogLevel ;

	UGenCon	*theREGC = GetTreeObject( _T("RELookAhead"), _T("[GenCons]") ) ;
	UGenCon	*theCILogLevelGC = GetTreeObject( _T("CInterpLogValue"), _T("[GenCons]")) ;

	if( gDataGC )
	{
		ReadAhead = gDataGC->GetLongValue(_T("ReadAhead")) ;
		ParseAhead = gDataGC->GetLongValue(_T("ParseAhead")) ;
		ProgramAhead = gDataGC->GetLongValue(_T("ProgramAhead")) ;
		RenderAhead = gDataGC->GetLongValue(_T("RenderAhead")) ;
		QtyToRender = gDataGC->GetLongValue(_T("QtyToRender")) ;
		AllowPreProgram = gDataGC->GetLongValue(_T("AllowPreProgram")) ;
		BatchPollTime = gDataGC->GetLongValue(_T("BatchPollTime")) ;
		PageAdvanceTime = gDataGC->GetLongValue(_T("PageAdvanceTime")) ;
		SuspendNow = gDataGC->GetLongValue(_T("SuspendNow")) ;
		gDataGC->GetAttrValue( _T("BarCodeColor"), BarCodeColor ) ;
		PFCRTSpillOver = gDataGC->GetDoubleValue(_T("PFCRTSpillOver")) ;
		PFLEDSpillOver = gDataGC->GetDoubleValue(_T("PFLEDSpillOver")) ;
		ClearCRTBuffer = gDataGC->GetLongValue(_T("ClearCRTBuffer")) ;

		RunContinuous = gDataGC->GetLongValue(_T("RunContinuous")) ;
		DeletePackageJob = gDataGC->GetLongValue(_T("DeletePackageJob")) ;
		RELogLevel = gDataGC->GetLongValue(_T("RELogLevel")) ;
		REBLogLevel = gDataGC->GetLongValue(_T("REBatchLogLevel")) ;
		HOPLogLevel = gDataGC->GetLongValue(_T("HOPLogLevel")) ;
		CInterpLogLevel = gDataGC->GetLongValue(_T("CInterpLogLevel")) ;
		UseMMX = gDataGC->GetLongValue(_T("UseMMX")) ;
		UseNewTiff = gDataGC->GetLongValue(_T("UseNewTiff")) ;
		UseNewTiffSink = gDataGC->GetLongValue(_T("UseNewTiffSink")) ;
		ProgramIMA = gDataGC->GetLongValue(_T("ProgramIMA")) ;
		DebugIMA = gDataGC->GetLongValue(_T("DebugIMA")) ;
		PerformRender = gDataGC->GetLongValue(_T("PerformRender")) ;
		ForceImaChainError = gDataGC->GetLongValue(_T("ForceImaChainError")) ;
		ForceImaRenderError = gDataGC->GetLongValue(_T("ForceImaRenderError")) ;
		KernelNumber = gDataGC->GetLongValue(_T("KernelNumber")) ;
		theDP2Sharpen = gDataGC->GetLongValue(_T("DP2Sharpen")) ;
		theSharpenThreshold = gDataGC->GetLongValue(_T("SharpenThreshold")) ;
		theSharpenUpperLimit = gDataGC->GetLongValue(_T("SharpenUpperLimit")) ;
		theSharpenLowerLimit = gDataGC->GetLongValue(_T("SharpenLowerLimit")) ;
		X1 = gDataGC->GetLongValue(_T("X1")) ;
		X2 = gDataGC->GetLongValue(_T("X2")) ;
		BlurGain = gDataGC->GetLongValue(_T("BlurGain")) ;
		LogGainTable = gDataGC->GetLongValue(_T("LogGainTable")) ;
		UseSparceKernel = gDataGC->GetLongValue(_T("UseSparceKernel")) ;
		PreTranslateNoCatch = gDataGC->GetLongValue(_T("PreTranslateNoCatch")) ;
	}

	if( theREGC )
	{
		theREGC->SetLongValue( _T("ReadAhead"), ReadAhead ) ;
		theREGC->SetLongValue( _T("ParseAhead"), ParseAhead ) ;
		theREGC->SetLongValue( _T("ProgramAhead"), ProgramAhead ) ;
		theREGC->SetLongValue( _T("RenderAhead"), RenderAhead ) ;
		theREGC->SetLongValue( _T("QtyToRender"), QtyToRender ) ;
		theREGC->SetLongValue( _T("AllowPreProgram"), AllowPreProgram ) ;
		theREGC->SetLongValue( _T("BatchPollTime"), BatchPollTime ) ;
		theREGC->SetLongValue( _T("PageAdvanceTime"), PageAdvanceTime ) ;
		theREGC->SetLongValue( _T("SuspendNow"), SuspendNow ) ;
		theREGC->SetAttrValue( _T("BarCodeColor"), BarCodeColor ) ;

		if( PFCRTSpillOver < 0.75 )		{ PFCRTSpillOver = 0.75 ; }
		if( PFCRTSpillOver > 1.50 )		{ PFCRTSpillOver = 1.50 ; }
		if( PFLEDSpillOver < -0.304 )	{ PFLEDSpillOver = -0.304 ; }
		if( PFLEDSpillOver > 1.00 )		{ PFLEDSpillOver = 1.00 ; }

		theREGC->SetDoubleValue(_T("PFCRTSpillOver"), PFCRTSpillOver ) ;
		theREGC->SetDoubleValue(_T("PFLEDSpillOver"), PFLEDSpillOver ) ;

		theREGC->SetLongValue(_T("ClearCRTBuffer"), ClearCRTBuffer ) ;

		theREGC->SetLongValue( _T("RunContinuous"), RunContinuous ) ;
		theREGC->SetLongValue( _T("DeletePackageJob"), DeletePackageJob ) ;
		theREGC->SetLongValue( _T("RELogLevel"), RELogLevel ) ;
		theREGC->SetLongValue( _T("REBatchLogLevel"), REBLogLevel ) ;
		theREGC->SetLongValue( _T("HOPLogLevel"), HOPLogLevel ) ;
		theREGC->SetLongValue( _T("UseMMX"), UseMMX ) ;
		theREGC->SetLongValue( _T("UseNewTiff"), UseNewTiff ) ;
		theREGC->SetLongValue( _T("UseNewTiffSink"), UseNewTiffSink ) ;
		theREGC->SetLongValue( _T("ProgramIMA"), ProgramIMA ) ;
		theREGC->SetLongValue( _T("DebugIMA"), DebugIMA ) ;
		theREGC->SetLongValue( _T("PerformRender"), PerformRender ) ;
		theREGC->SetLongValue( _T("ForceImaChainError"), ForceImaChainError ) ;
		theREGC->SetLongValue( _T("ForceImaRenderError"), ForceImaRenderError ) ;
		theREGC->SetLongValue( _T("KernelNumber"), KernelNumber ) ;
		theREGC->SetLongValue( _T("DP2Sharpen"), theDP2Sharpen ) ;
		theREGC->SetLongValue( _T("SharpenThreshold"), theSharpenThreshold ) ;
		theREGC->SetLongValue( _T("SharpenUpperLimit"), theSharpenUpperLimit ) ;
		theREGC->SetLongValue( _T("SharpenLowerLimit"), theSharpenLowerLimit ) ;
		theREGC->SetLongValue( _T("X1"), X1 ) ;
		theREGC->SetLongValue( _T("X2"), X2 ) ;
		theREGC->SetLongValue( _T("BlurGain"), BlurGain ) ;
		theREGC->SetLongValue( _T("LogGainTable"), LogGainTable ) ;
		theREGC->SetLongValue( _T("UseSparceKernel"), UseSparceKernel ) ;
		theREGC->SetLongValue( _T("PreTranslateNoCatch"), PreTranslateNoCatch ) ;
	}

	if( theCILogLevelGC )
	{
		theCILogLevelGC->SetLongValue(_T("CInterpLogValue"), CInterpLogLevel) ;
	}
}

void Help()
{
	Debug(0) ;
	TCHAR	*KPISHelpFile = _T("KPISHelpFile") ;
	ShowHelpPage( KPISHelpFile, _T("Printercontrol.htm"), NULL ) ;
}



