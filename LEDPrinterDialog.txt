DialogWidth = 400;
DialogHeight = 430;
TabWidth = <DialogWidth> - 20;
TabHeight = <DialogHeight> - 50;
LeftMargin = 20;
StaticTextWidth = 110;
StaticTextHeight = 20;
CheckBoxWidth = 150;
CheckBoxHeight = 20;
ComboBoxWidth = 120;
ComboBoxHeight = 150;

BigEditTextWidth = 115;
Gap = 5;

// use MediumEditTextWidth when after a static text on a line
MediumEditTextWidth = <TabWidth> - <StaticTextWidth> - <Gap> - <LeftMargin>;

// use LargeEditTextWidth when the only control on a line
LargeEditTextWidth = <TabWidth> - <LeftMargin>;
EditTextWidth = 50;
FileEditTextHeight = 20;
EditTextHeight = 20;
SliderWidth = 170;
ButtonWidth = 150;
SmallButtonWidth = 80;
ButtonHeight = 20;
VerticalSeparation = 30;
InitialVerticalPosition = 50;

if ( !Tree( Name,LEDQueuesLists,Location,~[STRINGS]~,Exists ) )
{

	StringList: Name LEDQueuesLists
		Fields:	String	~Default~
	Hang:	LEDQueuesLists	~[STRINGS]~ ;

	StringList: Name ~ResolutionChoices~
		Fields:	String	~250~
//		Fields:	String	~125~
	Hang:	ResolutionChoices	~[STRINGS]~ ;

	Define: LEDMediaSizeTranslationA4 Using DDListBoxItemTranslations
		Fields: FieldName				~MediaSize:~
		Fields: ListBoxItemText			~A4~
		Fields: FieldValue				~9.6~
	Hang: LEDMediaSizeTranslationA4  ~[UI TranslationTables]~


	StringList: Name ~MediaSizeChoices~
		Fields:	String	~10~
		Fields:	String	~11~
		Fields:	String	~12~
		Fields:	String	~A4~
		Fields:	String	~20~
	Hang:	MediaSizeChoices	~[STRINGS]~ ;

	StringList: Name ~RotatedChoices~
		Fields:	String	~0~
		Fields:	String	~90~
		Fields:	String	~180~
		Fields:	String	~270~
	Hang:	RotatedChoices	~[STRINGS]~ ;
}


LELEDPrinterDialogTitle = ~Output to LED Printer~;


 LETab0TTip = ~Setup~;
 LETab0Text  = ~Setup~;


 LEResolutionStaticTextText  = ~Resolution:~;
 LEResolutionComboBoxTTip = ~Select a resolution~;
 LEPaperWidthEditTextTTip  = ~Set the paper width~;
 LEPaperWidthStaticTextText  = ~Paper Width:~;
 LEPaperAdvanceStaticTextText = ~Paper Advance:~;
 LEPaperAdvanceEditTextTTip = ~Set the paper advance~;
 LEBorderlessCheckBoxText  = ~Borderless (Spillover)~;
 LEBorderlessCheckBoxTTip = ~Make a borderless print~;
 LETab1Text  = ~Punch~;
 LETab1TTip = ~Set Punch options~;
 LEIDPunchCheckBoxTTip  = ~Make an ID Punch~;
 LEColorMatrixButtonText  = ~ColorMatrix...~;
 LEColorMatrixButtonTTip = ~Select a color matrix file~;
 LEColorMatrixEditTextTTip = ~Edit color matrix path~;
 LEGammaButtonText  = ~Gamma...~;
 LEGammaButtonTTip = ~Select a gamma file~;
 LEGammaEditTextTTip = ~Edit gamma file path~;
 LEFillBackgroundCheckBoxText  = ~White Background~;
 LEFillBackgroundCheckBoxTTip = ~Set background to white~;
 LEBufferedCheckBoxText  = ~Buffered~;
 LEBufferedCheckBoxTTip = ~Print when buffer in printer is full~;



Define: LEDPrinterDialog Using DDWinDef // if the name is ever changed, you must also change UGenDlgBar::GetWindowPosition
fields: Position 420 40 <DialogWidth> <DialogHeight>
		Title ~<LE<CurGenConName>Title>~
		AutoPosition 1
		TypeName ~DialogBar~
		Purpose ~LEDPrinter~
		OActionsText ~[PerformOActions]~
		HActionsText ACTION SHOWHELPPAGE ( KPISHelpFile "LED_Intro.htm" ) ;

Contains:
{
	Define: OKButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Activate~
			Position <DialogWidth> - 100 , <DialogHeight> - 30,  <SmallButtonWidth> , <ButtonHeight>
			IActionsText ~[Get]~
			DActionsText ~[
							PerformOActions 
							ExecFile(LEDPrinterDialogRoutines.txt)
							Exec(ActivateButtonHit();)
							Close
							]~
			OActionsText  ~[NULL]~
			Tooltip ~Close window and save values.  Make the LED Printer the active device.~

	Define: CloseButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Close~
			Position <DialogWidth> - 190  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
							ExecFile(LEDPrinterDialogRoutines.txt)
							Exec(CloseButtonHit();)
							Close
							]~
			OActionsText ~[NULL]~
			Tooltip ~Close window and save values.  Don't change the active device.~

	Define: PreviewButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Preview~
			Position <DialogWidth> - 280  ,<DialogHeight> - 30, <SmallButtonWidth>  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
							HandleViewActions([
							Preview
							Invalidate
							]) 
						]~
			OActionsText ~[NULL]~
			Tooltip ~Preview the image.  Useful after you change the resolution if this is the active device.~

	Define: SaveSpecButton Using DDWinCtrlDef
	fields:	TypeName Button
			Text ~Save Output Spec~
			Position <DialogWidth> - 390  ,<DialogHeight> - 30, <SmallButtonWidth> + 20  <ButtonHeight>
			IActionsText ~[NULL]~
			DActionsText ~[
						SaveOutputSpec(LED)
						]~
			OActionsText ~[NULL]~
			Tooltip ~Save an output specification in text format.~

	Define: LEDPrinterOptions Using DDWinCtrlDef
	fields:	Position 10 10 <TabWidth>  <TabHeight>
			TypeName TabCtrl
			Text ~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~


	Contains:
	{

		Define: Tab0 Using DDWinCtrlDef
		fields: Text ~<LE<CurGenConName>Text>~
				TypeName Tab
				Tooltip ~<LE<CurGenConName>Ttip>~

		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;

			Define: ResolutionStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~<LE<CurGenConName>Text>~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>

			Define: ResolutionComboBox Using DDWinCtrlDef AsSymbol ResolutionComboBox
			fields: TypeName SComboBox  
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos> ,60 ,150 
					IActionsText ~[GetList(ResolutionChoices) Get]~
					DActionsText ~[
									ExecFile(LEDPrinterDialogRoutines.txt)
									Exec(SaveResolution();)
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Resolution:~
					Tooltip ~<Enter the resolution>~;

			Define: ResolutionUnitsStaticText Using DDWinCtrlDef AsSymbol ResolutionUnitsStaticText
			fields:	TypeName StaticText
					Text ~pixels per inch~
					Position ResolutionComboBox(GetRight,Position) + 10, <ypos>,  70,<StaticTextHeight>;

			Define: ResolutionUnitsStaticText2 Using DDWinCtrlDef AsSymbol ResolutionUnitsStaticText2
			fields:	TypeName StaticText
					IActionsText ~GET~
					Text ~---~
					Position ResolutionUnitsStaticText(GetRight,Position)+3, <ypos>, 12,<StaticTextHeight>;

//			ypos = <ypos> + <VerticalSeparation>;
			Define: ResolutionStaticText1 Using DDWinCtrlDef AsSymbol ResolutionStaticText1
			fields:	TypeName StaticText
					GenConField ~Resolution:~
					IActionsText ~[GetConversion(Invert)]~
					DecimalPlaces 2
					Position ResolutionUnitsStaticText2(GetRight,Position), <ypos>, 30,<StaticTextHeight>;

			Define: ResolutionUnitsStaticText1 Using DDWinCtrlDef AsSymbol ResolutionUnitsStaticText1
			fields:	TypeName StaticText
					IActionsText ~[GetDisplayResolutionUnits]~
					Position ResolutionStaticText1(GetRight,Position)+1, <ypos>, 64,<StaticTextHeight>+20;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ResolutionOverrideMsgStaticText Using DDWinCtrlDef AsSymbol  ResolutionOverrideMsgStaticText
			fields:	TypeName StaticText
					Position <LeftMargin>, <ypos>,  350 ,  <StaticTextHeight>;

			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperWidthStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~<LE<CurGenConName>Text>~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight>

			Define: PaperWidthEditText Using DDWinCtrlDef AsSymbol PaperWidthEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>, <BigEditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~PaperWidth:~
					IActionsText ~[GetConversion]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Set the logical page size in the short direction of the paper.  Paper width must be in the range 0 -> Media size~;

			Define: PaperWidthUnitsStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~~
					Position PaperWidthEditText(GetRight,Position) + 5, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>
					IActionsText ~[GetDisplayUnits]~;


			ypos = <ypos> + <VerticalSeparation>;
			Define: PaperAdvanceStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~<LE<CurGenConName>Text>~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: PaperAdvanceEditText Using DDWinCtrlDef AsSymbol PaperAdvanceEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <BigEditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~PaperAdvance:~
					IActionsText ~[GetConversion]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~##################~
					AllowedChars ~.~
					PromptChar	 ~ ~		
					Tooltip ~Set the logical page size in the long direction of the paper.  Paper Advance must be larger than 6.5 and smaller than 32.99~;

			Define: PaperAdvanceUnitsStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~~
					Position PaperAdvanceEditText(GetRight,Position) + 5, <ypos>,  <StaticTextWidth> ,  <StaticTextHeight>
					IActionsText ~[GetDisplayUnits]~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CopiesStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Copies:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CopiesEditText Using DDWinCtrlDef AsSymbol CopiesEditText
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~Copies:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter the number of copies to print~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: BufferedCheckBox Using DDWinCtrlDef AsSymbol BufferedCheckBox
			fields:	TypeName CheckBox
					GenConName THIS
					GenConField ~Deferred:~
					Text ~<LE<CurGenConName>Text>~
					Position <LeftMargin>, <ypos>, <CheckBoxWidth>, <CheckBoxHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					IsTabStop 1
					Tooltip ~<LE<CurGenConName>Ttip>~;

			Define: BorderlessCheckBox Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConName THIS
					GenConField ~Borderless:~
					Text ~<LE<CurGenConName>Text>~
					Position BufferedCheckBox(GetRight,Position)+10, <ypos>, <CheckBoxWidth>, <CheckBoxHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					IsTabStop 1
					Tooltip ~<LE<CurGenConName>Ttip>~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: SaveImageButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Output File...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText 	ACTIONS (
									ExecFile(FileSave.txt)
									Exec(FileSave(LEDPrinterDialog, SaveImageButton, ~SaveName:~, ~SaveFileType:~, SaveImageEditText);)
									)
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~SaveName:~
					Tooltip ~Select a directory and file name~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: SaveImageEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~SaveName:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: FileTypeStaticText Using DDWinCtrlDef AsSymbol FileTypeStaticText
			fields:	TypeName StaticText
					Text ~File Type:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: FileTypeComboBox Using DDWinCtrlDef
			fields: TypeName SComboBox  
					Position FileTypeStaticText(GetRight,Position) + 6, <ypos> ,<ComboBoxWidth> ,<ComboBoxHeight> 
					IActionsText ACTIONS ( GetList(SaveImageFileTypeChoices) Get
									ExecFile(UpdateFileType.txt)
									Exec(UpdateFileType(LEDPrinterDialog, FileTypeComboBox , ~SaveName:~ , ~~);) )

					DActionsText ACTIONS (
								Save
								ExecFile(UpdateFileType.txt)
								Exec(UpdateFileType(LEDPrinterDialog, FileTypeComboBox , ~SaveName:~ , SaveImageEditText);)
								)
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~SaveFileType:~
					Tooltip ~Select a file type~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: CompressionQualityStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Compression Quality:~
					Position <LeftMargin> , <ypos>,  <StaticTextWidth>  <StaticTextHeight>

			Define: CompressionQualityEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					Position <LeftMargin> + <StaticTextWidth> + <Gap>, <ypos>,  <EditTextWidth>,<EditTextHeight>
					GenConName THIS
					GenConField ~CompressionQuality:~
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Enter quality value between 0 and 100.   0 = not used.   1 = extremely low quality (very high compression).  100 = very high quality ( low compression). ~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: QueueNameStaticText Using DDWinCtrlDef
			fields:	TypeName StaticText
					Text ~Queue Name:~
					Position <LeftMargin>, <ypos>,  <StaticTextWidth>,<StaticTextHeight> ;

			Query = ~Select QueueName From QueueDefinition Where PrinterModel = 'Kodak LED' Order By QueueName~;

			Define: QueueNameComboBox Using DDWinCtrlDef
			fields:	TypeName SComboBox
					GenConName THIS
					GenConField ~QueueName:~
					Position <LeftMargin>  + <StaticTextWidth> + <Gap>, <ypos>,  <MediumEditTextWidth>, 150
					IActionsText ~[UpdateList(LEDQueuesLists "<Query>" QueueName) GetList(LEDQueuesLists) Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					Tooltip ~Select a queue name~;
		}
		Define: Tab1 Using DDWinCtrlDef
		fields: Text ~Punch~
				TypeName Tab
				Tooltip ~Set Punches~

		Contains: InListOrder
		{

			ypos = <InitialVerticalPosition>;
			Define: IDPunchCheckBox Using DDWinCtrlDef
			fields:	TypeName CheckBox
					GenConName THIS
					GenConField ~IDPunch:~
					Text ~ID Punch~
					Position <LeftMargin>, <ypos>, <CheckBoxWidth>, <CheckBoxHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					IsTabStop 1
					Tooltip ~<LE<CurGenConName>Ttip>~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: MultiPunchPrompt Using DDWinCtrlDef	AsSymbol MultiPunchPrompt
			fields:	TypeName StaticText
					Position <LeftMargin>, <ypos>, <StaticTextWidth>, <StaticTextHeight>
					Text	~Bar Code~

			Define: MultiPunchField Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~MultiPunch:~
					Position MultiPunchPrompt(GetRight,Position) + $Gap, <ypos>, <EditTextWidth>, <EditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~
					IsTabStop 1
					Mask		 ~###~
					AllowedChars ~~
					PromptChar	 ~ ~		
					Tooltip ~Specify a multi punch code for package cutters~
		}
 
		Define: Tab2 Using DDWinCtrlDef
		fields: Text ~Positioning~
				TypeName Tab
				Tooltip ~Positioning~
		Contains: InListOrder
		{
			ypos = <InitialVerticalPosition>;
			ypos = <ypos> + <VerticalSeparation>;
			ypos = <ypos> + <VerticalSeparation>;

			Define: RotatedRadioButton0 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 20 , <ypos> ,50 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton0) 
									UncheckButton(RotatedRadioButton180)
									UncheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~0~
 					Text ~None~
					Tooltip ~Do not rotate the image~;

			Define: RotatedRadioButton90 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 100 , <ypos> ,60 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~90~
 					Text ~90~
					Tooltip ~Rotate the image 90 degrees clockwise~;

			Define: RotatedRadioButton180 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 180 , <ypos> ,60 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton90) 
									UncheckButton(RotatedRadioButton270) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~180~
 					Text ~180~
					Tooltip ~Rotate the image 180 degrees~;

			Define: RotatedRadioButton270 Using DDWinCtrlDef
			fields: TypeName RadioButton  
					Position $LeftMargin + 260 , <ypos> ,60 ,20 
					IActionsText ~[Get]~
					DActionsText	~[
									CheckButton(RotatedRadioButton270) 
									UncheckButton(RotatedRadioButton0)
									UncheckButton(RotatedRadioButton180) 
									UncheckButton(RotatedRadioButton90) 
									Save
									]~
					OActionsText ~[Save]~
					GenConName THIS
					GenConField ~Rotated:~
					RadioTrueValue ~270~
					Text ~270~
					Tooltip ~Rotate the image 270 degrees clockwise~;

// attempt to put the group box last to allow tooltip messages to come in
// for the radio controls.  But it didn't work (PDF 9/3/98)
			apos = <ypos>  - 20;
			Define: ZZRotatedGroupBox Using DDWinCtrlDef
			fields:	TypeName GroupBox
					Text ~Rotation~
					Tooltip ~Choose an angle of rotation~
					Position $LeftMargin <apos> 360  50;			
					
		}


		Define: Tab3 Using DDWinCtrlDef
		fields: Text ~Adjustments~
				TypeName Tab
				Tooltip ~Use Color Matrix or Gamma to adjust image~
		Contains:  InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: ColorMatrixButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~<LE<CurGenConName>Text>~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[FileOpen Update(ColorMatrixEditText)]~
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~ColorMat:~
					Tooltip ~<LE<CurGenConName>Ttip>~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: ColorMatrixEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~ColorMat:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
//					NoHorizontalScroll 1
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~<LE<CurGenConName>Ttip>~;

			ypos = <ypos> + <VerticalSeparation> + 30;
			Define: GammaButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~<LE<CurGenConName>Text>~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[FileOpen Update(GammaEditText)]~
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~Gamma:~
					Tooltip ~<LE<CurGenConName>Ttip>~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: GammaEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~Gamma:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
//					NoHorizontalScroll 1
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~<LE<CurGenConName>Ttip>~;

		}

		Define: Tab4 Using DDWinCtrlDef
		fields: Text ~Tables~
				TypeName Tab
				Tooltip ~Device Tables~
		Contains:  InListOrder
		{
			ypos = <InitialVerticalPosition>;
			Define: LUTButton Using DDWinCtrlDef
			fields:	TypeName Button
					Text ~Print LUT...~
					Position <LeftMargin>,  <ypos>,  <ButtonWidth>,<ButtonHeight>
					IActionsText ~[Get]~
					DActionsText ~[FileOpen Update(LUTEditText)]~
					OActionsText ~[Save]~ 
					GenConName THIS
					GenConField ~Lookup:~
					Tooltip ~Select a Print LUT~;

			ypos = <ypos> + <VerticalSeparation>;
			Define: LUTEditText Using DDWinCtrlDef
			fields:	TypeName MaskedEditText
					GenConName THIS
					GenConField ~Lookup:~
					Position <LeftMargin> , <ypos>,  <LargeEditTextWidth>,<FileEditTextHeight>
					IActionsText ~[Get]~
					DActionsText ~[Save]~
					OActionsText ~[Save]~ 
					InsertOn	~T~	
//					NoHorizontalScroll 1
					Mask			~<$[DATABASE FieldTypes].FilePath[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].FilePath[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].FilePath[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].FilePath[DisallowedChars]>~
					Tooltip ~Edit print LUT file path~;

	//			This is required and is used to recompute values to Mask's number of digits
	//			Don't delete this; if you do Undo will stop working, and the doc will get dirty when it shouldn't
				Define: DummyEditText Using DDWinCtrlDef
				fields:	TypeName MaskedEditText
						Position (-1000) (-1000)  100  100
						GenConField ~Dummy~
						Mask		 ~##################~
						AllowedChars ~-.~
						PromptChar	 ~ ~		
	}
}

Hang:	LEDPrinterDialog ~[UI Dialogs]~ ;

/*

result = GenDlg( MainDlg, Definition, LEDPrinterDialog, Data, SelectedNode, New );
 FileType: Job
Use: $App.Dir + ~Layouts\TestLayout~
Main:
  IFile: $App.Dir + ~Images\01~
IC: 1
  IFile: $App.Dir + ~Images\01~
IC: 2
  Text: ~304294 2057 1~
*/