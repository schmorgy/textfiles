
IncludeClass( BaseMenu );
IncludeClass( BaseGrid );

Class( DSbaPrefsDef,Extends,BaseGrid,
			Member,Dictionary,Str,~DDDSbaPreferences~,
			Member,ErrorDictionary,Str,~DDDSbaPrefsErrorInfo~ );	

VOID DSbaPrefsDef::DSbaPrefsDef( )					// CONSTRUCTOR
{
	TableName = ~DSbaPrefsDef~;
	Title = Translate( ~Auto Balance Preferences~ );
	DocumentQuery = ~Select * from <TableName> Order By Name ~;
	WindowTop = 0;
	WindowWidth = 90;
	WindowHeight = 25;
	HelpPage = ~AutoBalance_Pref.htm~;
	InsertActiveCell = ~Name~;
}


VOID DSbaPrefsDef::!DSbaPrefsDef()
{
	if ( Defined( DSbaPreferences ) )
	{
		ForgetPrivate( DSbaPreferences );
	}

	ForgetPrivate( DSbaPreferencesData );
	ForgetPrivate( DSbaPrefsErrorInfo );
}


VOID DSbaPrefsDef::DefineDictionary()
{
	Dictionary:	~<ErrorDictionary>~
		Fields:	Name APIErrorCode			Type long
		Fields:	Name PrefsErrorCode			Type long
		Fields:	Name Text					Type Text
		;
}

VOID DSbaPrefsDef::InitDictionaryData()
{
	if ( !Defined(DSbaPreferencesData ) )
	{
		Define: DSbaPreferencesData Using DDDSbaPreferences AsSymbol DSbaPreferencesData Private
				Fields: Name				~~
						CreationDate		~<$Date.Date>~
						Version				1.0
						FpaR				0
						FpaG				0
						FpaB				0
						NeuR				500
						NeuG				500
						NeuB				500
						NeoR				500
						NeoG				500
						NeoB				500
						SbaCMM				1000
						NeutralUC			(-1.0)
						NeutralOC			5.0
						NeutralBP			1679
						PCLS				0
						Enhanced			1
						FleshPrefAdj		0
						BackLitBeta			0.361
						FrontLitBeta		0.361
						PercFleshAdj		1.0
			;
	}

	Define:	DSbaPrefsErrorInfo Using ~<ErrorDictionary>~ AsSymbol DSbaPrefsErrorInfo Private
		Fields:	APIErrorCode		 0
				PrefsErrorCode		 0
				Text				~~
				;

}

STR DSbaPrefsDef::GetKey( &Item )	
{ 
	// PRIMARY KEY FOR THE TABLE
	return ~Name = '<$con.Item[Name]>'~; 
}


// update version # and date and strip SFS File to name only on change
// delete any tracking data when the preference data changes.
NUMERIC DSbaPrefsDef::ChangeRecordAudits( &Changed,&Original,ChangedRow,IsNewRow )	// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[Name]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Name cannot be blank.~ ) ); }

	if ( atof(~<$Con.Changed[NeuR]>~)  < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeuR must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[NeuG]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeuG must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[NeuB]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeuB must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[NeoR]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeoR must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[NeoG]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeoG must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[NeoB]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeoB must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[SbaCMM]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  SbaCMM must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[NeutralUC]>~) > 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeutralUC must be a negative real number.~ ) ); }

	if ( atof(~<$Con.Changed[NeutralOC]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeutralOC must be a positive real number.~ ) ); }

	if ( atof(~<$Con.Changed[NeutralBP]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  NeutralBP must be a positive integer.~ ) ); }

	if ( atof(~<$Con.Changed[BackLitBeta]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  BackLitBeta must be a positive real number.~ ) ); }

	if ( atof(~<$Con.Changed[FrontLitBeta]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  FrontLitBeta must be a positive real number.~ ) ); }

	if ( atof(~<$Con.Changed[PercFleshAdj]>~) < 0 )
		{ return Warning( Translate( ~Unable to save pending changes.  PercFleshAdj must be a positive real number.~ ) ); }



	DSbaPreferencesData( SetValues,Name,~<$Con.Changed[Name]>~,CreationDate,~<$Con.Changed[CreationDate]>~,
						 Version,~<$Con.Changed[Version]>~,SFSTable,~<$Con.Changed[SFSTable]>~);

	DSbaPreferencesData( SetValues,FpaR,~<$Con.Changed[FpaR]>~,FpaG,~<$Con.Changed[FpaG]>~,FpaB,~<$Con.Changed[FpaB]>~,
						 NeuR,~<$Con.Changed[NeuR]>~,NeuG,~<$Con.Changed[NeuG]>~,NeuB,~<$Con.Changed[NeuB]>~,
						 NeoR,~<$Con.Changed[NeoR]>~,NeoG,~<$Con.Changed[NeoG]>~,NeoB,~<$Con.Changed[NeoB]>~);
						 
	DSbaPreferencesData( SetValues,SbaCMM,~<$Con.Changed[SbaCMM]>~, NeutralBP,~<$Con.Changed[NeutralBP]>~,
						 NeutralUC,~<$Con.Changed[NeutralUC]>~,NeutralOC,~<$Con.Changed[NeutralOC]>~,
						 PCLS,~<$Con.Changed[PCLS]>~,FleshPrefAdj,~<$Con.Changed[FleshPrefAdj]>~ );

	DSbaPreferencesData( SetValues, BackLitBeta,~<$Con.Changed[BackLitBeta]>~,FrontLitBeta,~<$Con.Changed[FrontLitBeta]>~,
						 PercFleshAdj,~<$Con.Changed[PercFleshAdj]>~,Enhanced,~<$Con.Changed[Enhanced]>~ );
	
	if ( <IsNewRow> )
	{
		sfsRecord = ~<$Con.Changed[SFSTable]>~;
		sfsFileName = ~<$Str.$sfsRecord.Filename.WithExt>~;
		if ( ~<$Con.Changed[SFSTable]>~ != ~<sfsFileName>~  )
		{
			DSbaPreferencesData( SetValues, SFSTable, ~<sfsFileName>~ );
			SetCellValue( <ChangedRow>,SFSTable,~<sfsFileName>~ );
			Changed( SetValues,SFSTable,~<sfsFileName>~ );
		}

	}
	else if ( ~<$Con.Changed[FpaR]>~ != ~<$Con.Original[FpaR]>~ ||
			 ~<$Con.Changed[FpaG]>~ != ~<$Con.Original[FpaG]>~ ||
			 ~<$Con.Changed[FpaB]>~ != ~<$Con.Original[FpaB]>~ ||
			 ~<$Con.Changed[NeuR]>~ != ~<$Con.Original[NeuR]>~ ||
			 ~<$Con.Changed[NeuG]>~ != ~<$Con.Original[NeuG]>~ ||
			 ~<$Con.Changed[NeuB]>~ != ~<$Con.Original[NeuB]>~ ||
			 ~<$Con.Changed[NeoR]>~ != ~<$Con.Original[NeoR]>~ ||
			 ~<$Con.Changed[NeoG]>~ != ~<$Con.Original[NeoG]>~ ||
			 ~<$Con.Changed[NeoB]>~ != ~<$Con.Original[NeoB]>~ ||
			 ~<$Con.Changed[SbaCMM]>~ != ~<$Con.Original[SbaCMM]>~ ||
			 ~<$Con.Changed[NeutralUC]>~ != ~<$Con.Original[NeutralUC]>~ ||
			 ~<$Con.Changed[NeutralOC]>~ != ~<$Con.Original[NeutralOC]>~ ||
			 ~<$Con.Changed[NeutralBP]>~ != ~<$Con.Original[NeutralBP]>~ ||
			 ~<$Con.Changed[PCLS]>~ != ~<$Con.Original[PCLS]>~ ||
			 ~<$Con.Changed[FleshPrefAdj]>~ != ~<$Con.Original[FleshPrefAdj]>~ ||
			 ~<$Con.Changed[BackLitBeta]>~ != ~<$Con.Original[BackLitBeta]>~ ||
			 ~<$Con.Changed[FrontLitBeta]>~ != ~<$Con.Original[FrontLitBeta]>~ ||
			 ~<$Con.Changed[PercFleshAdj]>~ != ~<$Con.Original[PercFleshAdj]>~ ||
			 ~<$Con.Changed[Enhanced]>~ != ~<$Con.Original[Enhanced]>~ ||
			 ~<$Con.Changed[SFSTable]>~ != ~<$Con.Original[SFSTable]>~ )
	{
		if (~<$Con.Changed[Version]>~ == ~<$Con.Original[Version]>~ )
		{
			newVersion = atof(~<$Con.Changed[Version]>~ ) + 0.1;
			DSbaPreferencesData( SetValues, Version, <newVersion> );
			SetCellValue(<ChangedRow>,Version,~<newVersion>~ );
			Changed( SetValues,Version,<newVersion> );
		}

		if ( ~<$Con.Changed[CreationDate]~ != ~<$Date.date>~ )
		{
			DSbaPreferencesData( SetValues, CreationDate, ~<$Date.Date>~ );
			SetCellValue( <ChangedRow>,CreationDate,~<$Date.Date>~ );
			Changed( SetValues,CreationDate,~<$Date.Date>~ );
		}

		sfsRecord = ~<$Con.Changed[SFSTable]>~;
		sfsFileName = ~<$Str.$sfsRecord.Filename.WithExt>~;
		if ( ~<$Con.Changed[SFSTable]>~ != ~<sfsFileName>~  )
		{
			DSbaPreferencesData( SetValues, SFSTable, ~<sfsFileName>~ );
			SetCellValue( <ChangedRow>,SFSTable,~<sfsFileName>~ );
			Changed( SetValues,SFSTable,~<sfsFileName>~ );
		}

		if ( !Ado( dbase,Connect ) )
		{
			dbase( GetErrorDescription,theErr );
			return Warning( Translate( ~Could not connect to the database. <theErr>~ ) );
		}

		Cmd1 = ~Delete from DSbaPrefsData WHERE Name='<$Con.Original[Name]>'~;

		if ( !dbase( CMD,~<Cmd1>~ ) )
		{
			dbase( GetErrorDescription,theErr );
			return Warning( Translate( ~Database update failed <Cmd1>. <theErr>~ ) );
		}

		Cmd2 = ~Delete from DSbaImages WHERE PrefsFile='<$Con.Original[Name]>'~;
		
		if ( !dbase( CMD,~<Cmd2>~ ) )
		{
			dbase( GetErrorDescription,theErr );
			return Warning( Translate( ~Database update failed <Cmd2>. <theErr>~ ) );
		}
	}

	return TRUE;
}

VOID DSbaPrefsDef::AddMenuItems()					// ADD ADDITIONAL RIGHT CLICK MENU ITEMS
{
	AddMenuItem( TRUE,FALSE,Translate(~Export Data~),ACTION EXEC ( <THIS>.ExportSelectedToFile() ) );
	AddMenuSeparator();
	AddMenuItem( TRUE,FALSE,Translate(~Load Preference Files~),ACTION EXEC ( <THIS>.LoadPreferences(TRUE) ) );
	AddMenuSeparator();
	AddMenuItem( TRUE,FALSE,Translate(~Set System Default~),ACTION EXEC ( <THIS>.SetDefaultPref() ) );
}

NUMERIC DSbaPrefsDef::OnAddRecord( &NewRow )
{
	NewRow( SetValues,CreationDate,~<$Date.Date>~,Version,1.0 );
	NewRow( SetValues,FpaR,0,FpaG,0,FpaB,0 );
	NewRow( SetValues,NeuR,500,NeuG,500,NeuB,500  );
	NewRow( SetValues,NeoR,500,NeoG,500,NeoB,500  );
	NewRow( SetValues,SbaCMM,1000 );
	NewRow( SetValues,NeutralUC,-1.0,NeutralOC,5.0,NeutralBP,1679 );
	NewRow( SetValues,PCLS,0,Enhanced,1 );
	NewRow( SetValues,BackLitBeta,0.361,FrontLitBeta,0.361 );
	NewRow( SetValues,FleshPrefAdj,0,PercFleshAdj,1.0 );


	found = findfile( aDirectoryEntry,Find,~<$App.ShareDirectory>\KDSBA\*.satdef~ );

	SFSFile = ~~;
	while ( <found> )
	{
		found = aDirectoryEntry( Next );
				
		if ( !aDirectoryEntry( Is,aDirectoryEntry(Directory) ) )
		{
			aDirectoryEntry( Get,Path,aPath );
			SFSFile = ~<$Str.$aPath.FileName.WithExt>~ ;
			break;
		}
	}
	NewRow( SetValues,SFSTable,~<SFSFile>~ );

	return TRUE;
}


NUMERIC DSbaPrefsDef::ProcessTextDrop( &Item )	{ return TRUE; }


NUMERIC DSbaPrefsDef::HandlePrefsError( ErrMsg )
{
	Message = ~~;
	DiagMsg1 = ~~;
	DiagMsg2 = ~~;

	DiagAction = ~~;

	DSbaPrefsErrorInfo( GetValues, APIErrorCode, APIErrorCode, PrefsErrorCode, PrefsErrorCode, Text, ErrorMsg );

	// First check for a balancer error, then an API error.

	if ( GenCon( DiagMsg1,GetFrom,~<PrefsErrorCode>~,~[STRINGS DSbaPreferenceStrings]~ ) )
	{
		DiagMsg1( GetValues, Text, TextMsg );
		Temp = Translate( ~\n\n~ );
		Message = ~<ErrMsg>~ + ~<Temp>~ + ~<TextMsg>~;
	}
	else if ( GenCon( DiagMsg2,GetFrom,~<APIErrorCode>~,~[STRINGS DSbaPreferenceStrings]~ ) )
	{
		DiagMsg2( GetValues, Text, TextMsg );
		Temp = Translate( ~\n\n~ );
		Message = ~<ErrMsg>~ + ~<Temp>~ + ~<TextMsg>~;
	}
	else if ( DefinedAndNotNull( ErrMsg ) && DefinedAndNotNull( ErrorMsg ) ) 
	{
		Temp = Translate( ~\n\nDetailed error information:\n\n~ );
		Message = ~<ErrMsg>~ + ~<Temp>~ + ~<ErrorMsg>~;
	}
	else if ( DefinedAndNotNull( ErrMsg ) && !DefinedAndNotNull( ErrorMsg ) ) 
	{
		Message = ~<ErrMsg>~;
	}
	else if ( !DefinedAndNotNull( ErrMsg ) && DefinedAndNotNull( ErrorMsg ) ) 
	{
		Message = ~<ErrorMsg>~;
	}
	else
	{
		Message = Translate( ~\n\nUnable to get detailed error information:\n\n~ );
	}

	Warning( ~<Message>~ );

	DSbaPrefsErrorInfo( SetValues, APIErrorCode, 0, PrefsErrorCode, 0, Text, ~~ );

	return FALSE;
}

NUMERIC DSbaPrefsDef::PreferencesConnect()
{
	if ( Defined( DSbaPreferences ) )
	{
		return TRUE;
	}

	if (  !DSbaPreference( DSbaPreferences ) )
	{
		DataWindow( StatusBar,Text,Translate( ~Error connecting the Sba Preferences software.~ ) );
		return Warning( Translate( ~Error starting the Sba Preferences software.~ ) );
	}

	if ( !DSbaPreferences( SetSbaErrorInfo,DSbaPrefsErrorInfo ) )
	{
		ErrMsg = Translate( ~Unable to initialize the Sba Preferences software.~ );
		return Warning( ~<ErrMsg>~ );
	}

	Private( DSbaPreferences );
	return TRUE;
}

NUMERIC DSbaPrefsDef::LoadPreferences( FromDataView )
{
	WaitCursor( Begin );
	if (!Defined(DSbaPreferences) )
	{
		if ( !PreferencesConnect() )
		{
			return FALSE;
		}
	}

	if ( !DSbaPreferences( LoadPreferencesFromFiles ) )
	{
		HandlePrefsError( ~Unable to load Preference files.~ );
		return FALSE;
	}

	if ( <FromDataView> )
	{
		RefreshListView();
	}

	WaitCursor( End );
	return TRUE;
}


NUMERIC DSbaPrefsDef::SetDefaultPref()
{

	if ( !DataView( GetSelectedRows,RecordsSelected ) )	
	{
		return Warning( Translate( ~You must select one row as the default setting.~ ) );	
	}

	count = RecordsSelected( ChildCount );
	if ( <count> > 1 )
	{
		return Warning( Translate( ~You must select one row as the default setting.~ ) );	
	}

	RecordsSelected( GetFirst,theRecord );

	return SetSystemSettings( ~Analyzer~, ~DefaultAutoBalPref~, ~<$Con.theRecord[Name]>~, TRUE );

}

STR DSbaPrefsDef::OnButtonClickTitle(Row,Col)
{
	if ( IsColumnName(<Col>,~Name~ ) )				{ return Translate(~Preference file name.~); }

	return BaseGrid::OnButtonClickTitle(<Row>,<Col>);
}


NUMERIC DSbaPrefsDef::Init( ShowGrid )
{
	if ( !<ShowGrid> )
	{
		return TRUE;
	}

	return BaseGrid::Init();
}

NUMERIC Init( Grid )
{
	ShowGrid = TRUE;
	if ( DefinedAndNotNull( ~Grid~ ) )
	{
		ShowGrid = <Grid>;

	}
	if ( Defined(DSbaPrefsDefs) )
	{
		DSbaPrefsDefs.ReOpen();
		DSbaPrefsDefs.RefreshListView();
		return TRUE;
	}

	Class( DSbaPrefsDef,Extends,BaseGrid );

	DSbaPrefsDef( New,DSbaPrefsDefs );

	DSbaPrefsDefs.DefineDictionary();
	DSbaPrefsDefs.InitDictionaryData();
	DSbaPrefsDefs.DefineWindow();
	DSbaPrefsDefs.Init( <ShowGrid> );

	Global( DSbaPrefsDefs );

	return TRUE;
}

NUMERIC LoadPreferences()
{
	windowOpen = TRUE;
	if ( !Defined( DSbaPrefsDefs) )
	{
		Init( FALSE );
		windowOpen = FALSE;
	}

	result = DSbaPrefsDefs.LoadPreferences( <windowOpen> );

	if ( !<windowOpen> )
	{
		DSbaPrefsDefs.OnCloseDataView();

		ForgetGlobal( DSbaPrefsDefs );
		ForgetGlobal( BaseGridMessages );
	}

	return <result>;
}
