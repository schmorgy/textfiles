IncludeClass(BaseDialog);


Class( DeleteDlg,Extends,BaseDialog,
		Member,fDeleteThread,Object,Thread );


VOID	DeleteDlg::DeleteDlg()		{ Left = -300; }



NUMERIC	DeleteDlg::ThreadProc(Path,Timeout)		// RUNS ON A THREAD.  NO UI WORK ALLOWED
{ 
	Now = Ticks();
		
	while ( (Ticks() - <Now>) < <Timeout> )	// Wait up to <Timeout> seconds for the file to free up for deletion
	{
		Log( Session,~Attempting to delete <Path>. ~ );
		
		if ( !Files( Delete,~<Path>~ ) )
		{
			Log( Session,~Failed to delete <Path>.  <$func.GetLastErrorMsg()>~ );
		}
		else
		{
			Log( Session,~Deleted <Path>~ );
			break;
		}
		
		Sleep( 1000 );
	}

	Invoke( ~<THIS>.Complete~ );

	return TRUE;
}


VOID	DeleteDlg::Complete()
{
	Log( Session,~Closing~ );
	DoCancelButton();
}


VOID	DeleteDlg::Start(Path,Timeout)
{
	dlg( ShowDialog,FALSE );
	fDeleteThread( New,~<THIS>.ThreadProc~,~<Path>~,~<Timeout>~ );
}


VOID Init(Path,Timeout)
{
	DeleteDlg( New,thisDialog );	
	Global( thisDialog );
	ThisDialog.DefineDialog();
	ThisDialog.Start(~<Path>~,~<Timeout>~);	
}