Include: ~FormattingRoutines~;

IncludeClass( BaseGrid );

VOID Translations::Translations()					// CONSTRUCTOR
{
	TableName = ~Translations~;
	DocumentQuery = ~Select * from <TableName> Order By Lang,Category,ID~;
	Title = ~Translations~;
	WindowTop = 50;
	WindowWidth = 90;
	WindowHeight = 50;
}

STR Translations::GetKey( &Item )					// PRIMARY KEY FOR THE TABLE
{
	return ~Lang = '<$con.Item[Lang]>' AND Category = '<$con.Item[Category]>' AND ID = '<$con.Item[ID]>'~;
}

NUMERIC Translations::ChangeRecordAudits( &Changed )	// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[Lang]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Lang cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[Category]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Category cannot be blank.~ ) ); }

	if ( IsNULL(~<$Con.Changed[ID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  ID cannot be blank.~ ) ); }

	return TRUE;
}

NUMERIC Translations::Reload()		{ return Translations(Reset); }

NUMERIC Translations::AddControls( position )
{		
	Define: ReloadButton Using DDWinCtrlDef AsSymbol  ReloadButton Private
		Fields:	TYPENAME		BUTTON
				DACTIONSTEXT	ACTION EXEC ( <THIS>.Reload() )
				POSITION		$position + $hGap, $vGap 50 $ButtonHeight
				TEXT			Translate( ~Reload~ )
				TOOLTIP			Translate( ~Reload the in memory copy of the Transations~ );

	return ReloadButton( GetRight,Position );
}


NUMERIC Translations::OnAddRecord( &NewRow )
{
	// NewRow( Set,ID,~<fID>~ );
	
	return TRUE;
}



NUMERIC Init( Title,Query )
{
	if ( Defined( Grid ) )
	{
		return Grid.ReOpen();
	}

	Class( Translations,Extends,BaseGrid );

	Translations( New,Grid );

	Grid.Set(DocumentQuery,~<Query>~ );
	Grid.Set(Title,~Translations - <Title>~ );

	Grid.DefineWindow();
	Grid.Init();

	return Global( Grid );
}

