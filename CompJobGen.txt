// CompJobGen.txt
//		Globals:	WhichShootDesc	- Which InfoDesc displaying info for
// Invoke by:  Init(~<ShootDescID>~,~<NameToAddToTitle>~);
//      Only partially implemented to enter for all Orders in the system

Tab = Chr(9);
CR = ~\n~;
//CR = chr(0x0D);

MAX_TypeName_LEN = strlen(~<$[DATABASE FieldTypes].TypeName[Mask]>~);

MAX_OPEN_ITEMS_FROM_COMP = 6;

MAX_NUM_PROBLEMS_DISPLAYED = 30;
IncludeClass(BaseOrderItem);


// MultiImages =  // 0 = use all images if multiple exist
				  // 1 = use first image if multiple exist
				  // 2 = use last image

Define:	CompJobMessages Using DDSymbol
	Fields:	Value	~These strings are CompositeJobGenerator related strings used by the user interface.~
	Contains:
	{
		Define: Title				using DDText	Fields: Text ~Composite Job Generator - %1~
		Define: OrderTxt			using DDText	Fields: Text ~Order~
		Define: ShipTxt				using DDText	Fields: Text ~Ship Date~
		Define: UseOrderTxt			using DDText	Fields: Text ~Images From~
		Define: CollectionTxt		using DDText	Fields: Text ~Product~
		Define: GroupByTxt			using DDText	Fields: Text ~Group By~
		Define: SortByTxt			using DDText	Fields: Text ~Sort By~
		Define: QuantityTxt			using DDText	Fields: Text ~Quantity~
		Define: PlusNTxt			using DDText	Fields: Text ~+~
		Define: MultiImgTxt			using DDText	Fields: Text ~MultiImage~
		Define: DefinitionTxt		using DDText	Fields: Text ~Definition~
		Define: UseSetupText		using DDText	Fields: Text ~Reload Setup When Job Loaded~
		Define: OutputSpecTxt		using DDText	Fields: Text ~Output~
		Define: NotesTxt			using DDText	Fields: Text ~Notes~
		Define: DefinedCompsTabTxt	using DDText	Fields:	Text ~Job Setup~
		Define: DetailsTabTxt		using DDText	Fields:	Text ~Node Details~
		Define: CreateTabTxt		using DDText	Fields:	Text ~Groups~
		Define: ViewTabTxt			using DDText	Fields:	Text ~View~
		Define: OutputTabTxt		using DDText	Fields:	Text ~Output~
		Define: NewButton			using DDText	Fields: Text ~New~
		Define: DeleteButton		using DDText	Fields: Text ~Delete~
		Define: LoadButton			using DDText	Fields: Text ~Load~
		Define: SaveCompButton		using DDText	Fields: Text ~Save Job Setup~
		Define: SaveSetupButton		using DDText	Fields: Text ~Save Node Setup~
		Define: CreateButton		using DDText	Fields: Text ~Create~
		Define: CreateAllButton		using DDText	Fields: Text ~Create All~
		Define: RunButton			using DDText	Fields: Text ~Run~
		Define: CreateAndRunButton	using DDText	Fields: Text ~Create\Run~
		Define: RunAllButton		using DDText	Fields: Text ~Run All~
		Define: StopButton			using DDText	Fields: Text ~Stop~
		Define: CancelButton		using DDText	Fields: Text ~Close~
		Define: GroupsGenerateButton	using DDText	Fields: Text ~Show Groups~
		Define: ViewGenerateButton	using DDText	Fields: Text ~Show Items~
		Define: OpenButton			using DDText	Fields: Text ~Open~
		Define: OrderToolTip		using DDText	Fields: Text ~Select Order ID for job~
		Define: CollectionToolTip	using DDText	Fields: Text ~Select Composite Collection~
		Define: GroupByToolTip		using DDText	Fields: Text ~Select Grouping Definition~
		Define: SortByToolTip		using DDText	Fields: Text ~Select Sort Order for images in Group~
		Define: UseOrdersToolTip	using DDText	Fields: Text ~Select Orders to use images from~
		Define: ShipDateToolTip		using DDText	Fields: Text ~Enter Ship Date~
		Define: QuantityToolTip		using DDText	Fields: Text ~Select Quantity to print for each Composite~
		Define: MultiImgToolTip		using DDText	Fields: Text ~Select what to do if multiple images exist for on Subject record~
		Define: PlusNToolTip		using DDText	Fields: Text ~Additional number to add to Quantity~
		Define: DefinitionToolTip	using DDText	Fields: Text ~~
		Define: OutputSpecToolTip	using DDText	Fields: Text ~Optional File to override the Output Specifications for the job~
		Define: NotesToolTip		using DDText	Fields: Text ~Notes about the job~
		Define: UseSetupToolTip		using DDText	Fields: Text ~Use the values stored for this Setup when the job is loaded~
		Define: SetupComboToolTip	using DDText	Fields: Text ~Optional - Select the setup to use for Composite Node Details~
		Define: SetupEditToolTip	using DDText	Fields: Text ~View the Setups of the Composite Nodes Details table~
		Define: SaveSetupToolTip	using DDText	Fields: Text ~Save the current settings in the Composite Nodes Setups table for use by other Jobs~
		Define: DefinedCompsTabToolTip	using DDText	Fields: Text ~Displays define Composite Setups for this ShootDescription~
		Define: DetailsTabToolTip	using DDText	Fields: Text ~Specific details for the job~
		Define: CreateTabToolTip	using DDText	Fields: Text ~Create the Composite jobs~
		Define: ViewTabToolTip		using DDText	Fields: Text ~View the Composites created~
		Define: NotesToolTip		using DDText	Fields: Text ~Enter any info here~
		Define: SaveCompToolTip		using DDText	Fields: Text ~Save Composite Information for Order and Product combination~
		Define: CreateButtonToolTip	using DDText	Fields: Text ~Create ALL Composites~
		Define: RunButtonToolTip	using DDText	Fields: Text ~Run All Composites for OrderId and Product~
		Define: StopButtonToolTip	using DDText	Fields: Text ~Stop Creating Composites~
		Define: CancelButtonToolTip	using DDText	Fields: Text ~Exit from Composites~
		Define: OrderDataToolTip	using DDText	Fields: Text ~View Order Product Data~
		Define: ProductDataToolTip	using DDText	Fields: Text ~View Composite Product Data~
		Define: SortDataToolTip		using DDText	Fields: Text ~View Sort Product Data~
		Define: QtyNumImages		using DDText	Fields: Text ~# Images~
		Define: QtyNumOrders		using DDText	Fields: Text ~# Ordered Packages~
		Define: QtySetQty			using DDText	Fields: Text ~Set Quantity~
		Define: AllImages			using DDText	Fields: Text ~All Images~
		Define: FirstImage			using DDText	Fields: Text ~First Images~
		Define: LastImage			using DDText	Fields: Text ~Last Images~
		Define: PathTitleMsg		using DDText	Fields: Text ~Select the file path for the Output Details~ 
		Define: DefinedCompsHeader	using DDText	Fields: Text ~Defined Composite Records~
		Define: CreateHeader		using DDText	Fields:	Text ~Groups~
		Define: AddedRecord			using DDText	Fields: Text ~Record Inserted For %1 %2~
		Define: DeletedRecord		using DDText	Fields: Text ~Deleted record For %1 %2~
		Define: ViewHeader			using DDText	Fields: Text ~Id              Qty          ProductId             Group~
//		Define: ViewHeader			using DDText	Fields: Text ~Id<Tab>Qty<Tab>ProductId<Tab>Group~
		Define: ReadRecords			using DDText	Fields: Text ~%1 Composite Records defined.~
		Define: NoOrdersMsg			using DDText	Fields: Text ~No Orders defined for this ShootDescription ID.~
		Define: NoCompsMsg			using DDText	Fields: Text ~No Composite selected.~
		Define: NoSetupName			using DDText	Fields: Text ~No Setup Name specified.~
		Define: NoOrderItemMsg		using DDText	Fields: Text ~No Order Item selected.~
		Define: DeleteCompMsg		using DDText	Fields: Text ~Are you sure you want to Delete the Composite record: '%1 %2'?~
		Define: GenStoppedMsg		using DDText	Fields:	Text ~Generation stopped after %1 of %2 Items created.~
		Define: CannotCloseMsg		using DDText	Fields: Text ~Cannot close Composite Job Generator dialog while items are being processed.~
		Define: OrderItemDeletedMsg	using DDText	Fields: Text ~Order Item %1 Deleted~
		Define: ErrorResettingListBox using DDText	Fields: Text ~Error Clearing List for %1~;
		Define: NoItemsFound		using DDText	Fields: Text ~No Order Items found for this OrderID and Product~
		Define: TooManyOpenRequests	using DDText	Fields:	Text ~Can not open more than <MAX_OPEN_ITEMS_FROM_COMP> at one time~
		Define: ProcessingComplete	using DDText	Fields: Text ~Processing Complete for %1 Items.~
		Define: ProcessingStarted	using DDText	Fields: Text ~Starting~
//		Define: OrderIdBlank		using DDText	Fields: Text ~Order can not be blank.~
		Define: OrderIdGroupByBlank	using DDText	Fields: Text ~Order or Group By can not be blank.~
		Define: OrderIDCollectionBlank using DDText Fields: Text ~Order or Product can not be blank.~
		Define: JobAlreadyRunning	using DDText	Fields: Text ~A job is already running. You must wait for it to complete.~
		Define: ItemsNoLongerExist	using DDText	Fields:	Text ~Order items no longer exist.~
		Define: VerifyCreate		using DDText	Fields: Text ~Are you sure you want to Create all Composites for Order '%1' using Composite '%2'?~
		Define: VerifyCreateSelected using DDText	Fields: Text ~Are you sure you want to Create Composites for the %1 selected groups?~
		Define: VerifyCreateRunSelected using DDText Fields: Text ~Are you sure you want to Create Composites and Run the jobs for the %1 selected groups?~
		Define: VerifyViewSelected	using DDText	Fields: Text ~Are you sure you want to Open the %1 selected Order Item(s)?~
		Define: VerifyDeleteSelected using DDText	Fields: Text ~Are you sure you want to Delete the %1 selected Order Item(s)?~
		Define: VerfiySaveCompJob	using DDText	Fields: Text ~Are you sure you want to Save the Composite Job Definition for the Order and Product?~
		Define: VerfiySaveNodeSetup	using DDText	Fields: Text ~Are you sure you want to Save the Node Details to %1?~
		Define: DialogAlreadyOpen	using DDText	Fields: Text ~Dialog Already Open.~
		Define: UnableToGetValue	using DDText	Fields: Text ~For product %1, unable to get CompositeNodes for node: %2~
		Define: NumGroupsSts		using DDText	Fields: Text ~%1 Groups Generated~
		Define: NumOrderItemsSts	using DDText	Fields: Text ~%1 Order Items Found~
		Define: VerifyRunJobsFor	using DDText	Fields: Text ~Are you sure you want to Run the %1 Order Items for Order '%2' and Product '%3'?~
		Define: RanItemsSts			using DDText	Fields: Text ~%1 Items submitted to Job Queue~
		Define: SaveChangesMsg		using DDText	Fields: Text ~You have made changes for Order '%1' and Product '%2'.\n\nDo you want to save your changes?~
	}

Include: ~Utilities2~;

Include: ~FormattingRoutines~;

   Left = 5; Top = 5;		hGap = 5; vGap = 2;
	ButtonWidth = 70;       ButtonHeight = 20;		
	ButtonLongWidth = 100;		
//	StaticTextWidth = 50;	StaticTextHeight = 20;
	StaticTextWidth = 60;	StaticTextHeight = 20;
//	StaticHdrWidth = 250;
	StaticHdrWidth = 500;
    EditText31Width = 200;	EditTextHeight = 20;
	EditTextWidth = 150;
	EditBoxWidth = 200;		EditBoxHeight = 20 * 6;	
	ComboBoxHeight = 20 * 6;
	ListBoxWidth =	350;	ListBoxHeight = 20 * 10;
	Width3Digits = 25;		PathWidth = 460;
	x = $Left;				y = $Top;
//	TabWidth = 800;			TabHeight = 400;
	TabWidth = 940;			TabHeight = 400;
	TabEndLength = <TabWidth> - 20;
		
VOID DefineDialog(TitleSpecifier)
{
	if ( !DataDict( TheDictionary,Get,DDCompositeJob ) )
	{
		Dictionary: DDCompositeJob
			Fields:	Name OrderID		Type Text
			Fields:	Name JobStatus		Type Text
			Fields:	Name GroupBy		Type Text
			Fields:	Name SortBy			Type Text
			Fields:	Name Collection		Type Text
			Fields:	Name Quantity		Type Long
			Fields:	Name QtyN			Type Long
			Fields: Name ImagesFrom		Type Long
			Fields: Name SlctdOrders	Type Text
			Fields: Name MultiImages	Type Long
			Fields:	Name DefName		Type Text
			Fields: Name UseDefCheckBox	Type Long
			Fields: Name OutputSpecFile	Type Text
			Fields: Name Notes			Type Text
			Fields: Name ShipDate		Type Text
			Fields: Name SelectedComp	Type Text
			Fields: Name SubjectOrderID Type Text
			Fields: Name ImagesOrderList Type Text
			Fields: Name InfoType		Type Text
			Fields: Name ShootDescType	Type Text
			Fields: Name MacroType		Type Text
			Fields: Name MacroField		Type Text
			Fields: Name MacroText		Type Text
			Fields: Name NodeField		Type Text
			Fields: Name NodeStyle		Type Text
			Fields: Name NodeImage		Type Text
			Fields: Name NodeText		Type Text
			Fields: Name SelectedDetail Type Text


		// This data dictionary needs to match exactly Composite Table
		Dictionary: DDCompositeRecord
			Fields:	Name OrderID		Type Text
			Fields:	Name Collection		Type Text
			Fields:	Name GroupBy		Type Text
			Fields:	Name SortBy			Type Text
			Fields:	Name Quantity		Type Long
			Fields:	Name QtyN			Type Long
			Fields: Name ImagesFrom		Type Long
			Fields: Name SlctdOrders	Type Text
			Fields: Name Notes			Type Text
			Fields: Name ShipDate		Type Text
			Fields: Name Status			Type Text
			Fields: Name MultiImages	Type Long
			Fields:	Name Definition		Type Text
			Fields:	Name OutputSetup	Type Text

	}


	Define: dlgCompData Using DDCompositeJob ;
	Global( dlgCompData );

 m = 3;

    Define: CompDlgDefinition Using DDWinDef
            Fields: Position		90 0 $DialogWidth $DialogHeight
                    Title			Translate( CompJobMessages,Title,~<TitleSpecifier>~ )
                    TypeName		~Dialog~
					StatusBar		~1 100~
					WantsMinimizeBox TRUE
					HACTIONSTEXT	ACTION SHOWHELPPAGE ( KPISHelpFile "CompJob.htm" ) 
//					DropActionsText	ACTION EXEC ( HandleDrop() )
					RClickDnActionsText		ACTION EXEC ( RightClickInDialog(); )
                    OACTIONSTEXT	ACTION EXEC ( CloseDialog() ) ;

    Contains: InListOrder
    {
	    Define: OrderIDPrompt Using DDWinCtrlDef AsSymbol OrderIDPrompt 
            Fields: TypeName		StaticText
                    Position		$x,$y,$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,OrderTxt )
					RightJustified	TRUE

        Define: OrderComboBox Using DDWinCtrlDef AsSymbol OrderComboBox 
            Fields: TypeName		SComboBox  
                    Position		OrderIDPrompt(GetRight,Position) + $hGap,
									OrderIDPrompt(GetTop,Position),
									$EditText31Width ,$ComboBoxHeight 
					DropDownActionsText	ACTION EXEC ( GetOrderList() )
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnOrderChanges()")]~
					OActionsText	ACTIONS ( Save )
                    GenConName       THIS
                    GenConField		~OrderID~
                    Tooltip         Translate( CompJobMessages,OrderToolTip )

		Define: ViewOrderDataButton Using DDWinCtrlDef AsSymbol ViewOrderDataButton 
            Fields: TypeName		Button
                    Text			Translate( ~?~ )
                    Position		OrderComboBox(GetRight,Position) + $hGap,
									OrderComboBox(GetTop,Position),20,20
                    DActionsText	ACTION EXEC  ( ViewOrderData() ) 
                    Tooltip			Translate( CompJobMessages,OrderDataToolTip );

	    Define: UseOrdersPrompt Using DDWinCtrlDef AsSymbol UseOrdersPrompt 
            Fields: TypeName		StaticText
                    Position		ViewOrderDataButton(GetRight,Position) + 3*$hGap,
									ViewOrderDataButton(GetTop,Position),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,UseOrderTxt )
					RightJustified	TRUE

        Define: UseOrdersBox Using DDWinCtrlDef AsSymbol UseOrdersBox 
            Fields: TypeName		SComboBox  
                    Position		UseOrdersPrompt(GetRight,Position) + $hGap,
									UseOrdersPrompt(GetTop,Position),
									$EditText31Width,$ComboBoxHeight 
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnImagesFromTypeChanges()")]~
					OActionsText	ACTIONS ( Save )
					IsIndex			TRUE
                    GenConName      THIS
                    GenConField		~ImagesFrom~
                    Tooltip         Translate( CompJobMessages,UseOrdersToolTip )

	    Define: CollectionPrompt Using DDWinCtrlDef AsSymbol CollectionPrompt 
            Fields: TypeName		StaticText
                    Position		OrderIDPrompt(GetLeft,Position),
									OrderIDPrompt(GetBottom,Position)+($m*$vGap),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,CollectionTxt )
					RightJustified	TRUE

        Define: CollectionComboBox Using DDWinCtrlDef AsSymbol CollectionComboBox 
            Fields: TypeName		SComboBox  
                    Position		CollectionPrompt(GetRight,Position) + $hGap,
									CollectionPrompt(GetTop,Position),
									$EditText31Width,$ComboBoxHeight 
					DropDownActionsText	ACTION EXEC ( GetCollectionList() )
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnCollectionChanges(TRUE)")]~
					OActionsText	ACTIONS ( Save )
                    GenConName       THIS
                    GenConField		~Collection~
                    Tooltip         Translate( CompJobMessages,CollectionToolTip )

		Define: ViewProductDataButton Using DDWinCtrlDef AsSymbol ViewProductDataButton 
            Fields: TypeName		Button
                    Text			Translate( ~?~ )
                    Position		CollectionComboBox(GetRight,Position) + $hGap,
									CollectionComboBox(GetTop,Position),20,20
                    DActionsText	ACTION EXEC  ( ViewProductsData() ) 
                    Tooltip			Translate( CompJobMessages,ProductDataToolTip );

	    Define: ShipPrompt Using DDWinCtrlDef AsSymbol ShipPrompt 
            Fields: TypeName		StaticText
                    Position		ViewProductDataButton(GetRight,Position) + 3*$hGap,
									ViewProductDataButton(GetTop,Position),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,ShipTxt )
					RightJustified	TRUE

        Define: ShipField Using DDWinCtrlDef AsSymbol ShipField 
            Fields: TypeName		DateTime  
                    Position		ShipPrompt(GetRight,Position) + $hGap,
									ShipPrompt(GetTop,Position),
									$EditText31Width,$EditTextHeight 
					DActionsText	ACTION EXEC ( OnCalendarButton() )
					IActionsText	ACTIONS ( Get )
                    GenConName       THIS
                    GenConField		~ShipDate~  // currently a DateTime does not set the GenConField
					Mask			~##/##/##~

	    Define: GroupByPrompt Using DDWinCtrlDef AsSymbol GroupByPrompt 
            Fields: TypeName		StaticText
                    Position		CollectionPrompt(GetLeft,Position),
									CollectionPrompt(GetBottom,Position)+($m*$vGap),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,GroupByTxt )
					RightJustified	TRUE

        Define: GroupByComboBox Using DDWinCtrlDef AsSymbol GroupByComboBox 
            Fields: TypeName		SComboBox  
                    Position		GroupByPrompt(GetRight,Position) + $hGap,
									GroupByPrompt(GetTop,Position),
									$EditText31Width,$ComboBoxHeight 
					DropDownActionsText	ACTION EXEC ( GetGroupByList() )
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnDataChange(Group)")]~
//					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
                    GenConName       THIS
                    GenConField		~GroupBy~
                    Tooltip         Translate( CompJobMessages,GroupByToolTip )

		Define: ViewSortDataButton Using DDWinCtrlDef AsSymbol ViewSortDataButton 
            Fields: TypeName		Button
                    Text			Translate( ~?~ )
                    Position		GroupByComboBox(GetRight,Position) + $hGap,
									GroupByComboBox(GetTop,Position),20,20
                    DActionsText	ACTION EXEC  ( ViewSortsData() ) 
                    Tooltip			Translate( CompJobMessages,SortDataToolTip );

	    Define: SortByPrompt Using DDWinCtrlDef AsSymbol SortByPrompt 
            Fields: TypeName		StaticText
                    Position		ShipPrompt(GetLeft,Position),
									GroupByPrompt(GetTop,Position),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,SortByTxt )
					RightJustified	TRUE

        Define: SortComboBox Using DDWinCtrlDef AsSymbol SortComboBox 
            Fields: TypeName		SComboBox  
                    Position		SortByPrompt(GetRight,Position) + $hGap,
									SortByPrompt(GetTop,Position),
									$EditText31Width,$ComboBoxHeight 
					DropDownActionsText	ACTION EXEC ( GetSortList() )
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnDataChange(Sort)")]~
//					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
                    GenConName       THIS
                    GenConField		~SortBy~
                    Tooltip         Translate( CompJobMessages,SortByToolTip )

	    Define: QuantityPrompt Using DDWinCtrlDef AsSymbol QuantityPrompt 
            Fields: TypeName		StaticText
                    Position		GroupByPrompt(GetLeft,Position),
									GroupByPrompt(GetBottom,Position)+($m*$vGap),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,QuantityTxt )
					RightJustified	TRUE

       Define: QuantityField Using DDWinCtrlDef AsSymbol QuantityField 
            Fields: TypeName		SComboBox  
                    Position		QuantityPrompt(GetRight,Position) + $hGap,
									QuantityPrompt(GetTop,Position),
									$EditTextWidth ,$ComboBoxHeight 
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnDataChange(Quantity)")]~
//					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
					IsIndex			TRUE
                    GenConName       THIS
                    GenConField		~Quantity~
                    Tooltip         Translate( CompJobMessages,QuantityToolTip )

	    Define: PlusNPrompt Using DDWinCtrlDef AsSymbol PlusNPrompt 
            Fields: TypeName		StaticText
                    Text			Translate( CompJobMessages,PlusNTxt )
                    Position		QuantityField(GetRight,Position) + $hGap,
									QuantityField(GetTop,Position),
									10,$StaticTextHeight

        Define: PlusNField Using DDWinCtrlDef AsSymbol PlusNField 
            Fields: TypeName		MaskedEditText  
					Mask			~###~
//					PromptChar		~ ~
                    Position		PlusNPrompt(GetRight,Position) + $hGap,
									PlusNPrompt(GetTop,Position),
									$Width3Digits,$EditTextHeight 
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnDataChange(QtyN)")]~
//					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
                    GenConName       THIS
                    GenConField		~QtyN~
                    Tooltip         Translate( CompJobMessages,PlusNToolTip )

	    Define: MultiImgPrompt Using DDWinCtrlDef AsSymbol MultiImgPrompt 
            Fields: TypeName		StaticText
                    Position		SortbyPrompt(GetLeft,Position),
									QuantityPrompt(GetTop,Position),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,MultiImgTxt )
					RightJustified	TRUE

        Define: MultiImgComboBox Using DDWinCtrlDef AsSymbol MultiImgComboBox 
            Fields: TypeName		SComboBox  
                    Position		MultiImgPrompt(GetRight,Position) + $hGap,
									MultiImgPrompt(GetTop,Position),
									$EditText31Width,$ComboBoxHeight 
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnDataChange(MultiImages)")]~
					OActionsText	ACTIONS ( Save )
					IsIndex			TRUE
                    GenConName       THIS
                    GenConField		~MultiImages~
                    Tooltip         Translate( CompJobMessages,MultiImgToolTip )

		Define: OuputSpecText Using DDWinCtrlDef AsSymbol OuputSpecText 
            Fields: TypeName		StaticText
                    Position		QuantityPrompt(GetLeft,Position),
									QuantityPrompt(GetBottom,Position) + $vGap*7,
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,OutputSpecTxt )
					RightJustified	TRUE

		Define: OutputSpecField Using DDWinCtrlDef AsSymbol OutputSpecField 
            Fields: TypeName		MaskedEditText
                    Position		OuputSpecText(GetRight,Position) + $hGap,
									OuputSpecText(GetTop,Position),
									$PathWidth, $EditTextHeight
					GenConName		THIS
					GenConField		~OutputSpecFile~
//					IsEnabled		T
					IActionsText	~[Get]~
					DActionsText	~[Save Exec("OnDataChange(OutputSpec)")]~
					OActionsText    ~[Save]~
					Mask			~<$[DATABASE FieldTypes].Path[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].Path[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].Path[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].Path[DisallowedChars]>~
					Tooltip			Translate( CompJobMessages,OutputSpecToolTip )

		Define: OPBrowseButton Using DDWinCtrlDef AsSymbol OPBrowseButton 
			Fields:	TypeName		Button
					Text			Translate( ~?~ )
					Position		OutputSpecField(GetRight,Position)+ $hGap,
									OutputSpecField(GetTop,Position),
									20,$ButtonHeight
					DActionsText	ACTION EXEC  ( OnBrowseButton() ) 
//					Tooltip			Translate( CompJobMessages,DefinitionToolTip )

		Define: DefsSetupsText Using DDWinCtrlDef AsSymbol DefsSetupsText 
            Fields: TypeName		StaticText
                    Text			~Node Setup~
                    Position		OuputSpecText(GetLeft,Position),
									OuputSpecText(GetBottom,Position) + $vGap*6,
									$StaticTextWidth,$StaticTextHeight

	    Define: DefsSetupsComboBox Using DDWinCtrlDef AsSymbol DefsSetupsComboBox 
			Fields: TypeName        ComboBox  
					Position		DefsSetupsText(GetRight,Position) + $hGap,
									DefsSetupsText(GetTop,Position),
									$EditText31Width,$ComboBoxHeight
					DropDownActionsText	ACTION EXEC ( GetSetupsList() )
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("LoadSetupNodeDetails()")]~
					OActionsText	ACTIONS ( Save )
					GenConName		THIS
					GenConField		~DefName~
					Mask			~<$[DATABASE FieldTypes].ScanSetupName[Mask]>~
					PromptChar		~<$[DATABASE FieldTypes].ScanSetupName[PromptChar]>~
					AllowedChars	~<$[DATABASE FieldTypes].ScanSetupName[AllowedChars]>~
					DisallowedChars ~<$[DATABASE FieldTypes].ScanSetupName[DisallowedChars]>~
					Tooltip			Translate( CompJobMessages,SetupComboToolTip )

		Define: DefsSetups_Button Using DDWinCtrlDef AsSymbol DefsSetups_Button 
			Fields:	TypeName		Button
					Text			Translate( ~?~ )
					Position		DefsSetupsComboBox(GetRight,Position)+$hGap,
									DefsSetupsComboBox(GetTop,Position),
									20,$ButtonHeight
					DActionsText	ACTION EXEC  ( OnEditSetups() ) 
					Tooltip			Translate( CompJobMessages,SetupEditToolTip )
if (0)
{
		Define: SaveSetup_Button Using DDWinCtrlDef AsSymbol SaveSetup_Button 
			Fields:	TypeName		Button
					Text			Translate( CompJobMessages,SaveSetupButton )
					Position		DefsSetups_Button(GetRight,Position) + $hGap,
									DefsSetups_Button(GetTop,Position),
									$ButtonLongWidth,$ButtonHeight
					DActionsText	ACTION EXEC ( OnSaveSetup() ) 
					Tooltip			Translate( CompJobMessages,SaveSetupToolTip )
}
		Define: UseSetupBox Using DDWinCtrlDef AsSymbol UseSetupBox 
			Fields: TypeName		CheckBox
					Text			Translate( CompJobMessages,UseSetupText )
//					FontWeight		600
					GenConName       THIS
					GenConField		~UseDefCheckBox~
					DActionsText	ACTIONS ( Save "Exec(ToggleUseSetup())" )
//					Position		SaveSetup_Button(GetRight,Position) + $hGap,
//									SaveSetup_Button(GetTop,Position),
					Position		DefsSetups_Button(GetRight,Position) + $hGap,
									DefsSetups_Button(GetTop,Position),
									$StaticTextWidth*4,$StaticTextHeight
					Tooltip			Translate( CompJobMessages,UseSetupToolTip )


		if ( ShipField(GetLeft,Position) > SortComboBox(GetLeft,Position) )
		{
			FarthestPosX = ShipField(GetRight,Position);
		}
		else
		{
			FarthestPosX = SortComboBox(GetRight,Position);
		}

	    Define: NotesPrompt Using DDWinCtrlDef AsSymbol NotesPrompt 
            Fields: TypeName		StaticText
                    Position		$FarthestPosX + $hGap,
									OrderIDPrompt(GetTop,Position),
									$StaticTextWidth,$StaticTextHeight
                    Text			Translate( CompJobMessages,NotesTxt )
					RightJustified	TRUE

        Define: NotesField Using DDWinCtrlDef AsSymbol NotesField 
            Fields: TypeName		MLEditText  
                    Position		NotesPrompt(GetRight,Position) + $hGap,
									NotesPrompt(GetTop,Position),
									$EditBoxWidth,$EditBoxHeight 
                    GenConName       THIS
                    GenConField		~Notes~
					NOHORIZONTALSCROLL	TRUE
					IActionsText	ACTIONS ( Get )
					DActionsText	~[Save Exec("OnDataChange(Notes)")]~
//					DActionsText	ACTIONS ( Save )
					OActionsText	ACTIONS ( Save )
                    Tooltip			Translate( CompJobMessages,NotesToolTip );
 

		TabPositions = DefsSetupsText(GetBottom,Position) + 55;
		Define: TabWindow Using DDWinCtrlDef AsSymbol TabWindow
			Fields: Position	OrderIDPrompt(GetLeft,Position)-2,DefsSetupsText(GetBottom,Position) + $vGap*10,
								$TabWidth $TabHeight
					TypeName	TabCtrl
					Text		~TCS_HOTTRACK | TCS_MULTILINE | TCS_TOOLTIPS~
				Contains: InListOrder
				{

					Define: DefinedCompsTab Using DDWinCtrlDef
						Fields: Text			Translate( CompJobMessages,DefinedCompsTabTxt )
								TypeName		Tab
								Tooltip			Translate( CompJobMessages,DefinedCompsTabToolTip )

						Contains: INLISTORDER
						{
							DefineDefinedCompsTabControls($hGap,$TabPositions);
						}

					Define: DetailsTab Using DDWinCtrlDef
						Fields: Text			Translate( CompJobMessages,DetailsTabTxt )
								TypeName		Tab
								Tooltip			Translate( CompJobMessages,DetailsTabToolTip )
								HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "CompJobDetails.htm" )

						Contains: INLISTORDER
						{
							DefineDetailsTabControls($hGap,$TabPositions);
						}

					Define: CreateTab Using DDWinCtrlDef
						Fields: Text			Translate( CompJobMessages,CreateTabTxt )
								TypeName		Tab
								Tooltip			Translate( CompJobMessages,CreateTabToolTip )
								HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "CompJobCreate.htm" )

						Contains: INLISTORDER
						{
							DefineGroupTabControls($hGap,$TabPositions);
						}

					Define: ViewTab Using DDWinCtrlDef
						Fields: Text			Translate( CompJobMessages,ViewTabTxt )
								TypeName		Tab
								Tooltip			Translate( CompJobMessages,ViewTabToolTip )
								HActionsText	ACTION SHOWHELPPAGE ( KPISHelpFile "CompJobView.htm" )


						Contains: INLISTORDER
						{
							DefineViewTabControls($hGap,$TabPositions);
						}
				}

  
		DialogWidth = $TabWidth + ($hGap * 3);

		Define: CreateButton Using DDWinCtrlDef AsSymbol CreateButton 
            Fields: TypeName		Button
                    Text			Translate( CompJobMessages,CreateAllButton )
    				Position		TabWindow(GetLeft,Position) + $hGap,
									TabWindow(GetBottom,Position)+(2*$vGap),
									$ButtonWidth, $ButtonHeight
                    DActionsText	ACTION EXEC ( OnCreateAllButton() ) 
					IsEnabled		T
                    Tooltip			Translate( CompJobMessages,CreateButtonToolTip );

		Define: RunButton Using DDWinCtrlDef AsSymbol RunButton 
            Fields: TypeName		Button
                    Text			Translate( CompJobMessages,RunAllButton )
    				Position		CreateButton(GetRight,Position) + $hGap,
									CreateButton(GetTop,Position),
									$ButtonWidth, $ButtonHeight
                    DActionsText	ACTION EXEC ( OnRunAllButton() ) 
					IsEnabled		T
                    Tooltip			Translate( CompJobMessages,RunButtonToolTip );

		Define: StopButton Using DDWinCtrlDef AsSymbol StopButton 
            Fields: TypeName		Button
                    Text			Translate( CompJobMessages,StopButton )
					Position		RunButton(GetRight,Position) + $hGap*3,
									RunButton(GetTop,Position),
									$ButtonWidth, $ButtonHeight
                    DActionsText	ACTION EXEC ( OnStopButton() ) 
					IsEnabled		F
                    Tooltip			Translate( CompJobMessages,StopButtonToolTip );

		Define: CancelButton Using DDWinCtrlDef AsSymbol CancelButton 
			Fields: TypeName		Button
					Text			Translate( CompJobMessages,CancelButton)
	 				Position		TabWindow(GetRight,Position) - ($ButtonWidth+$hGap),
									CreateButton(GetTop,Position),
									$ButtonWidth, $ButtonHeight
					DActionsText	ACTION EXEC ( CloseDialog() ) 
					Tooltip			Translate( CompJobMessages,CancelButtonToolTip );

		Define: Save_Button Using DDWinCtrlDef AsSymbol Save_Button 
			Fields:	TypeName		Button
					Text			Translate( CompJobMessages,SaveCompButton )
					Position		$DialogWidth/2-($ButtonLongWidth - $hGap)/2,
									CreateButton(GetTop,Position),
									$ButtonLongWidth,$ButtonHeight
					DActionsText	ACTION EXEC ( OnSaveButton(TRUE) ) 
					Tooltip			Translate( CompJobMessages,SaveCompToolTip )

    };

	DialogHeight = CreateButton(GetBottom,Position) + $vGap + 35;

    CompDlgDefinition( Set,Position,~20 0 <DialogWidth> <DialogHeight>~ );

	GenDlg( dlgComp,Definition,CompDlgDefinition,Data,dlgCompData,Document,$Doc.This,New,Temporary );

    Global( dlgComp,CompDlgDefinition );
}


DataIsChanged = FALSE;

VOID OnDataChange(From)
{
}

VOID SetDataNoChanges()
{
}


VOID OnData1Change(From)
{
	// This doesn't work being called from all the fields as they are changed
	// When values are set in "MaskedEditText", their DActions are called.

	DataIsChanged = TRUE;
}


VOID SetDataNo1Changes()
{
	DataIsChanged = FALSE;
}

NUMERIC HasData1Changed()
{
	return <DataIsChanged>;
}


VOID SetData3NoChanges()
{
	// Set the data to indicate that no changes have been made to the data
// the following statement messes up the data when it is copied w/out the modified IsCopy
// needs change to UGenCon.cpp,UGenCon.h so copy copies data regardless of flag.
	dlgCompData(ResetChanged);
}


NUMERIC HasData3Changed()
{
// can't do following, cuz when select value to load SelectedDetail is changed.
// Similar with macro fields, etc.  Just need to check ones worried about.
//	status = dlgCompData(AnyChanged);

  // Problem: with IsIndex TRUE 
  // after a dlgComp(Update) the "IsIndex  TRUE" items are marked changed
	status = FALSE;

	if ( dlgCompData(Changed,OrderID) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,Collection) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,GroupBy) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,SortBy) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,Quantity) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,QtyN) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,ImagesFrom) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,SlctdOrders) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,ShipDate) )
	{	status = TRUE;	}
	// not JobStatus
	else if ( dlgCompData(Changed,MultiImages) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,Notes) )
	{	status = TRUE;	}
	else if ( dlgCompData(Changed,OutputSpecFile))
	{	status = TRUE;	}
	else 
	{
		CheckBox = ~<$con.dlgCompData[UseDefCheckBox]>~;
		if (<CheckBox>)
		{	status = dlgCompData(Changed,DefName);}
		else if (~<$con.dlgCompData[DefName]>~ != ~~)
		{	status = TRUE;	}
	}

	// check Node Details changed
	if (!<status>)
	{	status = HasNodeDetailsChanged();	}

	return <status>;
}


NUMERIC HasDataChanged()
{
	status = FALSE;

	if ( (~<$con.dlgCompData[OrderID]>~ == ~~ ) || ( ~<$con.dlgCompData[Collection]>~ == ~~ ) ) 
	{	return FALSE;	}

	Key = ~OrderId = '<$con.dlgCompData[OrderId]>' and Collection = '<$con.dlgCompData[Collection]>'~;
	Query = ~Select * from Composite where <Key>~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	if ( List(GetFirst,theRecord) )
	{

		if ( ~<$con.dlgCompData[OrderID]>~ != ~<$pcon.theRecord[OrderID]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[Collection]>~ != ~<$pcon.theRecord[Collection]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[GroupBy]>~ != ~<$pcon.theRecord[GroupBy]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[SortBy]>~ != ~<$pcon.theRecord[SortBy]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[Quantity]>~ != ~<$pcon.theRecord[Quantity]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[QtyN]>~ != ~<$pcon.theRecord[QtyN]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[ImagesFrom]>~ != ~<$pcon.theRecord[ImagesFrom]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[SlctdOrders]>~ != ~<$pcon.theRecord[SlctdOrders]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[ShipDate]>~ != ~<$pcon.theRecord[ShipDate]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[MultiImages]>~ != ~<$pcon.theRecord[MultiImages]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[Notes]>~ != ~<$pcon.theRecord[Notes]>~ )
		{	status = TRUE;	}
		else if ( ~<$con.dlgCompData[OutputSpecFile]>~ != ~<$pcon.theRecord[OutputSetup]>~ )
		{	status = TRUE;	}
		else 
		{
			CheckBox = ~<$con.dlgCompData[UseDefCheckBox]>~;
			if (<CheckBox>)
			{	
				if ( ~<$con.dlgCompData[DefName]>~ != ~<$con.dlgCompData[Definition]>~ )
				{	status = TRUE;	}
			}
			else if (~<$con.dlgCompData[Definition]>~ != ~~)
			{	status = TRUE;	}
		}
	
	}
	else
	{	status = TRUE;	}

	if (!<status>)
	{	status = HasNodeDetailsChanged();	}

	return <status>;
}


// Selected a date from the calender
VOID OnCalendarButton()
{
	OnDataChange();

	// Note:  The display is updated by the calander display (does not effect GenConField)
	// we update the GenConField here to have value when need to save it.
	dlgComp(DateTime,ShipField,Get,theDate);  //theDate is CDateTime / ScannerDateTime
	theDate(Format,DateStr,~%m/%d/%Y~ );
	dlgComp(SetValue,ShipDate,~<DateStr>~);
//	dlgComp( Update );
}

VOID DefineDefinedCompsTabControls(x,y)
{

	Define: HeadersTxt	Using	DDWinCtrlDef	AsSymbol	HeadersTxt
		Fields: TypeName	StaticText
				TEXT		Translate( CompJobMessages,DefinedCompsHeader)
				Position	$x + $hGap,$y,$StaticHdrWidth,$StaticTextHeight ;
			
	Define: CompsListBox Using DDWinCtrlDef AsSymbol CompsListBox
		Fields:	TypeName		ListBox
				Position		HeadersTxt(GetLeft,Position) + $hGap,
								HeadersTxt(GetBottom,Position) +$vGap,
								$ListBoxWidth, $ListBoxHeight
				GenConField		~SelectedComp~
				GenConName		THIS
				IActionsText	ACTIONS ( Get )
				DActionsText	ACTIONS ( Save )
				OActionsText	ACTIONS ( Save );

	ButtonX = CompsListBox(GetLeft,Position) + $hGap;
	ButtonY = CompsListBox(GetBottom,Position) + $vGap*4;


	Define: LoadButton Using DDWinCtrlDef AsSymbol LoadButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,LoadButton )
				Position		$ButtonX,$ButtonY,$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( LoadCompositeRecord(FALSE) )

	Define: DeleteButton Using DDWinCtrlDef AsSymbol DeleteButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,DeleteButton )
				Position		LoadButton(GetRight,Position) + $hGap*3,
								LoadButton(GetTop,Position),
								$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( DeleteCompositeRecord() )

}


NUMERIC GetCompositeList()
{
	//Get all orders associated with the list of IDs
	retVal = GetSQLOrdersList( TRUE, OrderList);
	if ( !<retVal> )
	{  return TRUE;  }  // problem reported in GetSQLOrdersList

	//Get all the Composites Records defined for the orders
	theQuery = ~Select OrderID,Collection,Status From Composite Where OrderID In (<OrderList>) Order By OrderID~;
	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	StringList(CompChoices,New);
	TabPos1 = List(GetMaxFieldData,OrderID) + 3;
	TabPos2 = List(GetMaxFieldData,Collection) + <TabPos1> + 3;

	Count = 0;
	more = List( GetFirst,theRecord );  // list is at end from getting Field Length
	while ( <more> )
	{
		CompChoices(AddString,~<$pcon.theRecord[OrderID]><Tab><$pcon.theRecord[Collection]>~);
//		CompChoices(AddString,~<$pcon.theRecord[OrderID]><Tab><$pcon.theRecord[Collection]><Tab><$pcon.theRecord[Status]>~);
		++Count;
		more = List( GetNext,theRecord );
	}

	dlgComp( ListBox,CompsListBox,SetTabStops,<TabPos1>,<TabPos2>);
	dlgComp( SetControlFromStringList,CompsListBox,CompChoices );

	dlgComp( SetStatus,0,Translate(CompJobMessages,ReadRecords,~<Count>~) )	;

	return TRUE;
}


// Saves Composite record information to OrderID and Product specified at top part
// of dialog.
NUMERIC OnSaveButton(AskToSave)
{
	dlgComp(GetInput);

	if ((~<$con.dlgCompData[OrderID]>~ == ~~) || (~<$con.dlgCompData[Collection]>~ == ~~) )
	{	return Warning( Translate( CompJobMessages,OrderIDCollectionBlank)); }

	if (<AskToSave>)
	{
		if ( MessageBox( Translate(CompJobMessages,VerfiySaveCompJob),YESNO ) != YES )
			{ return FALSE; }
	}

	if ( !SaveDetailsForOrder(~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~))
	{	return FALSE;  }

	if ( !Ado( dBase,Connect) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~));

	}

	Key = ~OrderId = '<$con.dlgCompData[OrderId]>' and Collection = '<$con.dlgCompData[Collection]>'~;
	Query = ~Select * from Composite where <Key>~;

//*** 12/10 Why separate ADO(dbase,Connect) above & only use here?
	if ( !PGenConList( List,Connection,dBase,Cursor,Keyset,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	// update table with a GenCon instead of "Insert" or "Update" statement, so will accept ',"
	GenCon( ChangedComposite,New,DDCompositeRecord);
	ChangedComposite(SetValue,OrderID,~<$con.dlgCompData[OrderID]>~);
	ChangedComposite(SetValue,Collection,~<$con.dlgCompData[Collection]>~);
	ChangedComposite(SetValue,Groupby,~<$con.dlgCompData[GroupBy]>~);
	ChangedComposite(SetValue,Sortby,~<$con.dlgCompData[SortBy]>~);
	ChangedComposite(SetValue,Quantity,~<$con.dlgCompData[Quantity]>~);
	ChangedComposite(SetValue,QtyN,~<$con.dlgCompData[QtyN]>~);
	ChangedComposite(SetValue,ImagesFrom,~<$con.dlgCompData[ImagesFrom]>~);

	if ( ~<$con.dlgCompData[ImagesFrom]>~ == ~2~) // 2 = Selected Orders
	{
		ChangedComposite(SetValue,SlctdOrders,~<$con.dlgCompData[SlctdOrders]>~);
	}
	else
	{
		ChangedComposite(SetValue,SlctdOrders,~~);
	}

	ChangedComposite(SetValue,MultiImages,~<$con.dlgCompData[MultiImages]>~);
	ChangedComposite(SetValue,Notes,~<$con.dlgCompData[Notes]>~);
	ChangedComposite(SetValue,ShipDate,~<$con.dlgCompData[ShipDate]>~);
	if (dlgCompData(GetNumeric,UseDefCheckBox) > 0)
	{
		ChangedComposite(SetValue,Definition,~<$con.dlgCompData[DefName]>~);
	}
	else
	{
		ChangedComposite(SetValue,Definition,~~);
	}

	ChangedComposite(SetValue,OutputSetup,~<$con.dlgCompData[OutputSpecFile]>~);
	ChangedComposite(SetValue,Status,~<$con.dlgCompData[JobStatus]>~);

	if ( List( NumEntries ) < 1)
	{  // record does not exist add it
		dlgComp( SetStrings,JobStatus,~~ );
		ChangedComposite(SetValue,Status,~~);

		if ( !List( UpdateFrom,ChangedComposite,~<Key>~,TRUE ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate );
			return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
		}

		// ISSUE:  can't do this if this is the first one being generated.  Have no Tab definitions.
		dlgComp( ListBox,CompsListBox,AddString,~<$con.dlgCompData[OrderID]><Tab><$con.dlgCompData[Collection]><Tab><$con.dlgCompData[JobStatus]>~ );
	//	GetCompositeList();
		dlgComp( SetStatus,0,Translate(CompJobMessages,AddedRecord,~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~)  )	;
	}

	else  // record exists, update it
	{
		if ( !List( UpdateFrom,ChangedComposite,~<Key>~,FALSE ) )
		{
			List( GetErrorDescription,0,theErr,CancelUpdate );
			return Warning( Translate(DBMessages,UpdateFailed,~<Key>~,~<theErr>~) );
		}

	}

	SetDataNoChanges();

	return TRUE;

}


NUMERIC LoadCompositeRecord(Startup)
{
	dlgComp(GetInput);

	if ( !<Startup> )
	{
		if ( HasDataChanged() )
		{
			if ( MessageBox( Translate(CompJobMessages,SaveChangesMsg,~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~),YESNO ) == YES )
			{
				if ( !OnSaveButton(FALSE) )
				{	return FALSE;	}			
			}
		}
	}


	theComp = ~<$con.dlgCompData[SelectedComp]>~;

	if (~<theComp>~ == ~~)
	{
		return Warning( Translate(CompJobMessages,NoCompsMsg) );
	}

	numTokens = GetTokens(~<theComp>~, ~<Tab>~, theOrderID, theCollection, theStatus);

	theQuery = ~Select * From Composite Where OrderID = '<theOrderId>' AND Collection = '<theCollection>'~;
	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	List(GetNext, CompRecord );
	
	dlgComp( SetStrings,OrderID,~<$pcon.CompRecord[OrderID]>~ );

	dlgComp( SetStrings,Collection,~<$pcon.CompRecord[Collection]>~ );
	dlgComp( SetStrings,Quantity,~<$pcon.CompRecord[Quantity]>~ );
	dlgComp( SetStrings,QtyN,~<$pcon.CompRecord[QtyN]>~ );
	dlgComp( SetStrings,ImagesFrom,~<$pcon.CompRecord[ImagesFrom]>~ );
	dlgComp( SetStrings,SlctdOrders,~<$pcon.CompRecord[SlctdOrders]>~ );
	dlgComp( SetStrings,MultiImages,~<$pcon.CompRecord[MultiImages]>~ );
	dlgComp( SetStrings,Notes,~<$pcon.CompRecord[Notes]>~ );
//	dlgComp( SetStrings,ShipDate,~<$pcon.CompRecord[ShipDate]>~ );
	// Note: updating the GenConField for the ShipDate does not effect the display
	// Must update the DateTime object separtely to update the display
	if (~<$pcon.CompRecord[ShipDate]>~ != ~~)
	{
		dlgCompData(SetValue,ShipDate,~<$pcon.CompRecord[ShipDate]>~);
		dlgComp( DateTime,ShipField,SetFromString,~<$pcon.CompRecord[ShipDate]>~);
	}
	else  // fix for Beta Customers who may have created the record before it was automatically set
	{
		dlgCompData(SetValue,ShipDate,~<$Date.Date>~);
		dlgComp( DateTime,ShipField,SetFromString,~<$Date.Date>~);
	}
	dlgComp( SetStrings,DefName,~<$pcon.CompRecord[Definition]>~ );
	dlgComp( SetStrings,OutputSpecFile,~<$pcon.CompRecord[OutputSetup]>~ );
	dlgComp( SetStrings,JobStatus,~<$pcon.CompRecord[Status]>~ );

	OnOrderChanges();  // here so can set SortBy and GroupBy lists based on InfoType

	dlgComp( SetStrings,GroupBy,~<$pcon.CompRecord[Groupby]>~ );
	dlgComp( SetStrings,SortBy,~<$pcon.CompRecord[Sortby]>~ );

	OnCollectionChanges(FALSE);

	if (~<$pcon.CompRecord[Definition]>~ != ~~)
	{
		dlgComp(SetValue,UseDefCheckBox,1);
		if ( !GetDetailsForOrder(~Setup~,~<$pcon.CompRecord[Definition]>~))
		{	return FALSE;  }
	}
	else
	{
		dlgComp(SetValue,UseDefCheckBox,0);
		if ( !GetDetailsForOrder(~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~))
		{	return FALSE;  }
	}

	dlgComp( Update );

	SetDataNoChanges();

	return TRUE;
}


NUMERIC DeleteCompositeRecord()
{
	theComp = ~<$con.dlgCompData[SelectedComp]>~;

	if (~<theComp>~ == ~~)
	{
		return Warning( Translate(CompJobMessages,NoCompsMsg) );
	}

	numTokens = GetTokens(~<theComp>~, ~<Tab>~, theOrderID, theCollection, theStatus);
	if ( MessageBox( Translate(CompJobMessages,DeleteCompMsg,~<theOrderID>~,~<theCollection>~),YESNO ) != YES )
	{
		return TRUE;
	}

	cmd = ~Delete From Composite Where OrderID = '<theOrderID>' And Collection = '<theCollection>'~;
	if ( !Ado( dBase,Connect,CMD,~<cmd>~) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( DBMessages,CmdFailed,~<cmd>~,~<theErr>~);
	}

	DeleteNodeDetails(theOrderID,theCollection);

	count = dlgComp( ListBox,CompsListBox,GetCount );
	retValue = dlgComp( ListBox,CompsListBox,DeleteSelected );
	dlgComp( SetStatus,0,Translate(CompJobMessages,DeletedRecord,~<theOrderID>~,~<theCollection>~)  )	;

	return TRUE;
}




VOID DefineGroupTabControls(x,y)
{
	Define: GroupTitleTxt	Using	DDWinCtrlDef	AsSymbol	GroupTitleTxt
		Fields: TypeName	StaticText
				TEXT		Translate( CompJobMessages,CreateHeader)
				Position	$x + 2*$hGap,$y,$StaticHdrWidth,$StaticTextHeight ;

	Define: GroupHeaderTxt	Using	DDWinCtrlDef	AsSymbol	GroupHeaderTxt
		Fields: TypeName	StaticText
				TEXT		Translate( CompJobMessages,CreateHeader)
				Position	$x + 2*$hGap,$y,$StaticHdrWidth,$StaticTextHeight ;
			
	Define: GroupsListBox Using DDWinCtrlDef AsSymbol GroupsListBox
		Fields:	TypeName		ListBox
				Position		GroupHeaderTxt(GetLeft,Position),
								GroupHeaderTxt(GetBottom,Position) +$vGap,
								$ListBoxWidth, $ListBoxHeight
				AllowMultipleSelection	TRUE
				GenConField		~NotUsedGrpsSelected~
				GenConName		THIS
				IActionsText	ACTIONS ( GetGroupsList() )
				DActionsText	ACTIONS ( Save )
				OActionsText	ACTIONS ( Save );

	ButtonX = GroupsListBox(GetLeft,Position) + $hGap;
	ButtonY = GroupsListBox(GetBottom,Position) + $vGap*4;

	Define: GroupGenerateButton Using DDWinCtrlDef AsSymbol GroupGenerateButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,GroupsGenerateButton )
				Position		$ButtonX,$ButtonY,$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( GetGroupsList() )

	Define: GroupsCreateButton Using DDWinCtrlDef AsSymbol GroupsCreateButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,CreateButton )
//				Position		GroupGenerateButton(GetRight,Position) + (3*$hGap),
//								GroupGenerateButton(GetTop,Position),
				Position		GroupsListBox(GetRight,Position) + (3*$hGap),
								GroupsListBox(GetTop,Position),
								$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( OnGroupCreateButton() )

	Define: GroupsRunButton Using DDWinCtrlDef AsSymbol GroupsRunButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,CreateAndRunButton )
//				Position		GroupsCreateButton(GetRight,Position) + $hGap,
//								GroupsCreateButton(GetTop,Position),
				Position		GroupsCreateButton(GetLeft,Position),
								GroupsCreateButton(GetBottom,Position) + (3*$hGap),
								$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( OnGroupsRunButton() )

}


NUMERIC GetGroupsList()
{

	OrderID = ~<$con.dlgCompData[OrderId]>~;
	Groupby = ~<$con.dlgCompData[GroupBy]>~;
	SubjectsOrderID = ~<$con.dlgCompData[SubjectOrderID]>~;
	InfoType = ~<$con.dlgCompData[InfoType]>~;

	if ( (~<OrderID>~ == ~~) || (~<Groupby>~ == ~~) )
	{  return Warning( Translate( CompJobMessages,OrderIdGroupByBlank) ); }

	//  Generates Globals:  GrpCmdList and GroupsList
	retVal = GenerateGroups(~<SubjectsOrderID>~,~<InfoType>~,~<Groupby>~,count,theHdrString,TabStops);

	if ( !<retVal> )
	{	return FALSE; }

	dlgComp( SetStatus,0,Translate( CompJobMessages,NumGroupsSts,<count> ) );
//	dlgComp(SetControlValue, GroupTitleTxt, ~<OrderID> <Groupby>~);
	dlgComp(SetControlValue, GroupTitleTxt, ~SubjectInfo<InfoType>: <SubjectsOrderID> <Groupby>~);
	ExpandedHeader = ExpandTabString(~<theHdrString>~,~<TabStops>~);
//	dlgComp(SetControlValue, GroupHeaderTxt, ~<ExpandedHeader>~);

	if (<count> > 0)
	{
		dlgComp( ListBox,GroupsListBox,SetTabStops,<TabStops>);
//		dlgComp( StaticText,HeadersTxt,SetTabStops,<TabStops>);
		return dlgComp(SetControlFromStringList,GroupsListBox,GroupsList);
	}
	else
	{
		if ( !dlgComp(ListBox,GroupsListBox,ResetContent) )
			{ return Warning( Translate(CompJobMessages, ErrorResettingListBox, ~<Groups>~) );}
		return TRUE;
	}

}

VOID Reopen()
{
}
VOID SelectATab( num )
{
	if ( Defined( dlg ) )
	{
		dlgComp( SelectTab,TabWindow,~<num>~ );
	}
}


NUMERIC OnGroupCreateButton()
{
	dlgComp( GetInput );

	if ( (~<$con.dlgCompData[OrderID]>~ == ~~) || (~<$con.dlgCompData[Collection]>~ == ~~) )
	{	return Warning( Translate( CompJobMessages,OrderIDCollectionBlank)); }

	// Verify Not Creating or Running another job
	if ( aThread(IsActive))
	{	return Warning(Translate(CompJobMessages,JobAlreadyRunning) );	}

	count = dlgComp( ListBox,GroupsListBox,GetSelectedCount );
	if ( MessageBox( Translate(CompJobMessages,VerifyCreateSelected,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	GenerationStarted();

	GenCon( Data,IsCopyOf,dlgCompData,Permanent );
//*	GenCon( Data,IsCopyOf,dlgCompData,TRUE );
	GenCon( NodeData,IsCopyOf,NodeDetailList,Permanent );  // NodeDetailList is Global from CompJobDetails

	aThread( New,GenerateSelectedClassPictures,Data(GetObject),NodeData(GetObject),FALSE );  // FALSE => only Order Items, don't run jobs


	return TRUE;
}


NUMERIC OnGroupsRunButton()
{
	dlgComp( GetInput );

	if ( (~<$con.dlgCompData[OrderID]>~ == ~~) || (~<$con.dlgCompData[Collection]>~ == ~~) )
	{	return Warning( Translate( CompJobMessages,OrderIDCollectionBlank)); }

	// Verify Not Creating or Running another job
	if ( aThread(IsActive))
	{	return Warning(Translate(CompJobMessages,JobAlreadyRunning) );	}

	count = dlgComp( ListBox,GroupsListBox,GetSelectedCount );
	if ( MessageBox( Translate(CompJobMessages,VerifyCreateRunSelected,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	GenerationStarted();

	GenCon( Data,IsCopyOf,dlgCompData,Permanent );
//*	GenCon( Data,IsCopyOf,dlgCompData,TRUE );
	GenCon( NodeData,IsCopyOf,NodeDetailList,Permanent );  // NodeDetailList is Global from CompJobDetails

	aThread( New,GenerateSelectedClassPictures,Data(GetObject),NodeData(GetObject),TRUE );  // TRUE => Run Jobs after create order items

	return TRUE;
}


VOID DefineViewTabControls(x,y)
{
	Define: ViewHeaderTxt	Using	DDWinCtrlDef	AsSymbol	ViewHeaderTxt
		Fields: TypeName	StaticText
				TEXT		Translate( CompJobMessages,ViewHeader)
				Position	$x + 2*$hGap,$y,$StaticHdrWidth,$StaticTextHeight ;
			
	Define: ItemsListBox Using DDWinCtrlDef AsSymbol ItemsListBox
		Fields:	TypeName		ListBox
				Position		ViewHeaderTxt(GetLeft,Position),
								ViewHeaderTxt(GetBottom,Position) +$vGap,
								$ListBoxWidth, $ListBoxHeight
				AllowMultipleSelection	TRUE
				GenConField		~NotUsedItemsSelected~
				GenConName		THIS
				IActionsText	ACTIONS ( GetItemsList() )
				DActionsText	ACTIONS ( Save )
				OActionsText	ACTIONS ( Save );

	Define: ViewItemsDataButton Using DDWinCtrlDef AsSymbol ViewItemsDataButton 
        Fields: TypeName		Button
                Text			Translate( ~?~ )
				Position		ItemsListBox(GetRight,Position)+$hGap,
								ItemsListBox(GetTop,Position),20,20
                DActionsText	ACTION EXEC ( OpenOrderItemsWindow() ) 
                Tooltip			Translate( ~See OrderItems Data~ );

	ButtonX = ItemsListBox(GetLeft,Position) + $hGap;
	ButtonY = ItemsListBox(GetBottom,Position) + $vGap*4;

	Define: GenerateViewButton Using DDWinCtrlDef AsSymbol GenerateViewButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,ViewGenerateButton )
				Position		$ButtonX,$ButtonY,$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( GetItemsList() )

	Define: OpenViewButton Using DDWinCtrlDef AsSymbol OpenViewButton 
		Fields: TypeName		Button
//				Position		OpenViewButton(GetRight,Position) + $hGap,
//								GenerateViewButton(GetTop,Position),
				Position		ItemsListBox(GetRight,Position) + (3*$hGap),
								ViewItemsDataButton(GetBottom,Position) + (3*$hGap),
								$ButtonWidth,$ButtonHeight
				Text			Translate( CompJobMessages,OpenButton )
				DActionsText	ACTION EXEC ( OnOpenViewButton() )

	Define: ViewRunButton Using DDWinCtrlDef AsSymbol ViewRunButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,RunButton )
//				Position		OpenViewButton(GetRight,Position) + $hGap,
//								OpenViewButton(GetTop,Position),
				Position		OpenViewButton(GetLeft,Position),
								OpenViewButton(GetBottom,Position) + (3*$hGap),
								$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( OnViewRunButton() )

	Define: ViewDeleteButton Using DDWinCtrlDef AsSymbol ViewDeleteButton 
		Fields: TypeName		Button
				Text			Translate( CompJobMessages,DeleteButton )
//				Position		ViewRunButton(GetRight,Position) + (3*$hGap),
//								ViewRunButton(GetTop,Position),
				Position		ViewRunButton(GetLeft,Position),
								ViewRunButton(GetBottom,Position) + (3*$hGap),
								$ButtonWidth,$ButtonHeight
				DActionsText	ACTION EXEC ( OnViewDeleteButton() )
}


NUMERIC GetItemsList()
{
	if ((~<$con.dlgCompData[OrderID]>~ == ~~) || (~<$con.dlgCompData[Collection]>~ == ~~) )
	{	return Warning( Translate( CompJobMessages,OrderIDCollectionBlank)); }

	Query = ~Select * from OrderItems Where OrderID = '<$con.dlgCompData[OrderID]>' And Type = 'Composite' And ProductID = '<$con.dlgCompData[Collection]>' Order by TypeName,ID~;
	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	Count = List( NumEntries );
	dlgComp( SetStatus,0,Translate( CompJobMessages,NumOrderItemsSts,<Count> ) );

	if ( <Count> < 1 )
	{
		if ( !dlgComp(ListBox,ItemsListBox,ResetContent) )
			{ return Warning( Translate(CompJobMessages, ErrorResettingListBox, ~<OrderItems>~) );}
		return Warning( Translate(CompJobMessages,NoItemsFound) );
	}

	StringList(ItemsList,New);

	while ( List( GetNext,theRecord ) )
	{
//		theDsplyString = ~<$pcon.theRecord[ID]><Tab><$pcon.theRecord[Quantity]><Tab><$pcon.theRecord[ProductID]><Tab><$pcon.theRecord[TypeName]><Tab><$pcon.theRecord[PrintStatus]>~;
		theDsplyString = ~<$pcon.theRecord[ID]><Tab><$pcon.theRecord[Quantity]><Tab><$pcon.theRecord[ProductID]><Tab><$pcon.theRecord[TypeName]>~;
		ItemsList(AddString,~<theDsplyString>~);
	}

	TabStops = ~9,16~;
	FieldLength = 16;
	FieldLength = <FieldLength> + List(GetMaxFieldData,ProductID)+3;
	TabStops = ~<TabStops>,<FieldLength>~;
	FieldLength = <FieldLength> + List(GetMaxFieldData,TypeName) + 3;
	TabStops = ~<TabStops>,<FieldLength>~;
	FieldLength = <FieldLength> + List(GetMaxFieldData,Status)+3;
	TabStops = ~<TabStops>,<FieldLength>~;

//	dlgComp( StaticText,ViewHeaderTxt,SetTabStops,<TabStops>);
	dlgComp( ListBox,ItemsListBox,SetTabStops,<TabStops>);
	return dlgComp(SetControlFromStringList,ItemsListBox,ItemsList);
}


NUMERIC OpenOrderItemsWindow()
{
	AsImages = FALSE;

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Key = ~ID,OrderID,Quantity,ProductID,TypeName,PrintStatus,Status,Sequence,Subsequence,PrinterName,TimePrinted,Printable,JobPath,PreviewPath~;
	Query = ~Select <Key> From OrderItems Where OrderID = '<$con.dlgCompData[OrderID]>' And Type = 'Composite' And ProductID = '<$con.dlgCompData[Collection]>' Order By Sequence,Subsequence~;
	Actions = ACTION Doc ( ~Items~ <OpenMethod> OrderItemsDoc "Init( ~<$con.dlgCompData[OrderID]>~,~<Query>~,<AsImages>,TRUE,TRUE );" );
	PerformActions( Actions );

	return TRUE;
}

NUMERIC OnOpenViewButton()
{
	count = dlgComp( ListBox,ItemsListBox,GetSelectedCount );
	
	if (<count> < 1)
	{	return Warning(Translate(CompJobMessages,NoOrderItemMsg) );	}

	if (<count> > <MAX_OPEN_ITEMS_FROM_COMP>)
	{	return Warning( Translate(CompJobMessages,TooManyOpenRequests) );	}

	if (<count> > 1)
	{
		if ( MessageBox( Translate(CompJobMessages,VerifyViewSelected,~<count>~),YESNO ) != YES )
			{ return FALSE; }
	}

	Index = -1;
	count = 0;
	IdList = ~~;

	while ( ( dlgComp( ListBox,ItemsListBox,GetNthSelectedItem,<++Index>,theItem ) > 0 )  && (<Stop> == FALSE) )
	{
		numTokens = GetTokens(~<theItem>~,~<Tab>~);
		theId = ~<Token1>~;  // First field is the OrderItem ID
		IdList = ~<IdList>~ == ~~ ? ~<theId>~ : ~<IdList>,<theId>~;
	}

	Query = ~Select * from OrderItems where OrderId = '<$con.dlgCompData[OrderId]>' And ID In (<IdList>)~;
	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	Count = List(NumEntries);
	if (<Count> < 1)
	{	return Warning(Translate(CompJobMessages,ItemsNoLongerExist) );	}

	return OpenSelectedOrderItems(List);

}


NUMERIC OnViewRunButton()
{

	if ((~<$con.dlgCompData[OrderID]>~ == ~~) || (~<$con.dlgCompData[Collection]>~ == ~~) )
	{	return Warning( Translate( CompJobMessages,OrderIDCollectionBlank)); }
		
	ForgetGlobal(SelectedOrderItemsToRun);

	count = dlgComp( ListBox,ItemsListBox,GetSelectedCount );
	if (<count> < 1)
	{ return Warning(Translate(CompJobMessages, NoOrderItemMsg) );  }

	if ( MessageBox( Translate(CompJobMessages,VerifyRunJobsFor,~<Count>~,~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~),YESNO ) != YES )
		{ return FALSE; }

	OrderId = ~<$con.dlgCompData[OrderID]>~;

	Index = -1;
	IdList = ~~;

	while ( ( dlgComp( ListBox,ItemsListBox,GetNthSelectedItem,<++Index>,theItem ) > 0 )  && (<Stop> == FALSE) )
	{
		numTokens = GetTokens(~<theItem>~,~<Tab>~);
		theId = ~<Token1>~;  // First field is the OrderItem ID
		IdList = ~<IdList>~ == ~~ ? ~<theId>~ : ~<IdList>,<theId>~;
	}

	return RunListOrderItems(~<OrderId>~,~<IdList>~);

}


NUMERIC RunListOrderItems(OrderId, IdList)
{
	Query = ~Select * from OrderItems Where OrderID = '<OrderId>' And Id in (<IdList>)~;
	if ( !PGenConList( SelectedOrderItemsToRun,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		SelectedOrderItemsToRun( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	ProductID = ~<$con.dlgCompData[Collection]>~;

	Count = SelectedOrderItemsToRun( NumEntries );
	if (<Count> < 1)
	{
		Warning( Translate(CompJobMessages,NoItemsFound) );
		return TRUE;
	}

	GenerationStarted();

	Global(SelectedOrderItemsToRun);
//	InitRunPropertiesDialog(~Print Selected <ProductID>, order <OrderID>~,
//							FALSE,~<OrderID>~,dlgComp);  // puts up dialog box
	RunOrderItemsNow( ~<OrderID>~ );  // does NOT put up dialog.

	dlgComp( SetStatus,0,Translate(CompJobMessages,RanItemsSts,~<Count>~) );

	GenerationComplete(~<Count>~);
		
	return TRUE;
}


NUMERIC OnViewDeleteButton()
{
	count = dlgComp( ListBox,ItemsListBox,GetSelectedCount );
	
	if (<count> < 1)
	{	return Warning(Translate(CompJobMessages,NoOrderItemMsg) );	}

	if ( MessageBox( Translate(CompJobMessages,VerifyDeleteSelected,~<count>~),YESNO ) != YES )
		{ return FALSE; }

	WaitCursor( Begin );
	Index = -1;
	count = 0;
	IdList = ~~;

	while ( ( dlgComp( ListBox,ItemsListBox,GetNthSelectedItem,<++Index>,theItem ) > 0 )  && (<Stop> == FALSE) )
	{
		numTokens = GetTokens(~<theItem>~,~<Tab>~);
		theId = ~<Token1>~;  // First field is the OrderItem ID
		IdList = ~<IdList>~ == ~~ ? ~<theId>~ : ~<IdList>,<theId>~;
	}

	Query = ~Select * from OrderItems where OrderId = '<$con.dlgCompData[OrderId]>' And ID In (<IdList>)~;
	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,Query,~<Query>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		WaitCursor( End );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	Count = List(NumEntries);
	if (<Count> < 1)
	{	
		WaitCursor( End );
		return Warning(Translate(CompJobMessages,ItemsNoLongerExist) );	
	}

	retVal = DeleteSelectedOrderItems(List);

	if (<retVal>)
	{
		retValue = dlgComp( ListBox,ItemsListBox,DeleteSelected );
		dlgComp( SetStatus,0,Translate(CompJobMessages,DeletedRecord,~<$con.dlgCompData[OrderId]>~,~<Count>~) );
		WaitCursor( End );
	}
	else
	{
		WaitCursor( End );
		Warning(~List may not represent Order Items which remain.  Select "Show Items" to recreate the list.~);
		//GetItemsList();  // does not always update correctly. Out of synch w/ dbase.
	}
		
	return <retVal>;
}



// Routines to be invoked by thread to put data to UI
NUMERIC GenerationStopped( NumCompleted, NumRequested )
{
	return dlgComp( SetStatus,0,Translate(CompJobMessages,GenStoppedMsg,~<NumCompleted>~,~<NumRequested>~) );
}


NUMERIC ShowWarning( Msg )
{
	return Warning( ~<Msg>~ );
}


NUMERIC ShowProgress( Msg )
{
	return dlgComp( SetStatus,0,~<Msg>~ );
}


NUMERIC ShowIncompleJobs( theList,theCount )
//NUMERIC ShowIncompleJobs(  )
{
	if ( <theCount> > <MAX_NUM_PROBLEMS_DISPLAYED> )
	{
		NumNotDisplayed = <theCount> - <MAX_NUM_PROBLEMS_DISPLAYED>;
		Warning(~<theCount> jobs require attention.\n\nFollowing is a partial list of the jobs: <theList>\n\nThe additional <NumNotDisplayed> problems are specified in the Session Log.~);
	}
	else
	{
		Warning(~The following <theCount> jobs require attention: <theList>~);
//		Warning(~The following <CountProblems> jobs require attention: <ProblemString>~);
	}

	return TRUE;
}


VOID AddProblemString( theString )
{
	if ( <CountProblems> < <MAX_NUM_PROBLEMS_DISPLAYED> )
	{
		ProblemString = ~<ProblemString><CR><theString>~;
	}

	Log( Session,~   <theString>~ );
	++CountProblems;
}


VOID ClearProblemString()
{
	ForgetGlobal(ProblemString,CountProblems);
	ProblemString = ~~;
	CountProblems = 0;
	Global(ProblemString,CountProblems);
}


NUMERIC UpdateJobStatus( StsString )
{
	StsString = ~<StsString> <$Date.Date>~;
//	dlgComp(SetStrings,JobStatus,~<StsString>~);

	// update Composite record if it exists

	return TRUE;
}





Stop = FALSE;

VOID OnStopButton()
{
	Stop = TRUE;
}




NUMERIC OnCreateAllButton()
{
	dlgComp( GetInput );

	if ( aThread(IsActive))
	{	return Warning(Translate(CompJobMessages,JobAlreadyRunning) );	}


	if ((~<$con.dlgCompData[OrderID]>~ == ~~) || (~<$con.dlgCompData[Collection]>~ == ~~) )
	{	return Warning( Translate( CompJobMessages,OrderIDCollectionBlank)); }

	if ( MessageBox( Translate(CompJobMessages,VerifyCreate,~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~),YESNO ) != YES )
		{ return FALSE; }
	
	GenerationStarted();

	GenCon( Data,IsCopyOf,dlgCompData,Permanent );
//*	GenCon( Data,IsCopyOf,dlgCompData,TRUE );
	GenCon( NodeData,IsCopyOf,NodeDetailList,Permanent );  // NodeDetailList is Global from CompJobDetails

	aThread( New,GenerateAllClassPictures,Data(GetObject),NodeData(GetObject) );

	return TRUE;
}


NUMERIC GenerationStarted(  )
{
	Stop = FALSE;
	dlgComp( EnableControls,TRUE,StopButton );	
	dlgComp( EnableControls,FALSE,CreateButton );
	dlgComp( EnableControls,FALSE,RunButton );
	dlgComp( EnableControls,FALSE,CancelButton );
	dlgComp( EnableControls,FALSE,GroupsCreateButton );
	dlgComp( EnableControls,FALSE,GroupsRunButton );
	dlgComp( EnableControls,FALSE,GroupGenerateButton );
	dlgComp( EnableControls,FALSE,ViewRunButton );
//	dlgComp( EnableControls,FALSE,AddButton );     // from Node Details
//	dlgComp( EnableControls,FALSE,NodeDeleteButton );  // from Node Details
	
	return StatusBarText( Translate(CompJobMessages,ProcessingStarted) );
}

NUMERIC GenerationComplete( Count )
{
	Stop = FALSE;
	dlgComp( EnableControls,FALSE,StopButton );	
	dlgComp( EnableControls,TRUE,CreateButton );
	dlgComp( EnableControls,TRUE,RunButton );
	dlgComp( EnableControls,TRUE,CancelButton );
	dlgComp( EnableControls,TRUE,GroupsCreateButton );
	dlgComp( EnableControls,TRUE,GroupsRunButton );
	dlgComp( EnableControls,TRUE,GroupGenerateButton );
	dlgComp( EnableControls,TRUE,ViewRunButton );
//	dlgComp( EnableControls,TRUE,AddButton );     // from Node Details
//	dlgComp( EnableControls,TRUE,NodeDeleteButton );  // from Node Details
	
	return StatusBarText( Translate(CompJobMessages,ProcessingComplete,~<Count>~) );
}


Include: ~RunJob.txt~;
NUMERIC OnRunAllButton()
{
	dlgComp( GetInput );

	if ((~<$con.dlgCompData[OrderID]>~ == ~~) || (~<$con.dlgCompData[Collection]>~ == ~~) )
	{	return Warning( Translate( CompJobMessages,OrderIDCollectionBlank)); }
		
	ForgetGlobal(SelectedOrderItemsToRun);

	OrderId = ~<$con.dlgCompData[OrderID]>~;
	ProductID = ~<$con.dlgCompData[Collection]>~;
		
	Query = ~Select * from OrderItems Where OrderID = '<OrderId>' And Type = 'Composite' And ProductID = '<ProductID>'~;
	if ( !PGenConList( SelectedOrderItemsToRun,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<Query>~ ) )
	{
		SelectedOrderItemsToRun( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
	}

	Count = SelectedOrderItemsToRun( NumEntries );

	if (<Count> < 1)
	{
		Warning( Translate(CompJobMessages,NoItemsFound) );
		return TRUE;
	}

	if ( MessageBox( Translate(CompJobMessages,VerifyRunJobsFor,~<Count>~,~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~),YESNO ) != YES )
		{ return FALSE; }

	Global(SelectedOrderItemsToRun);

	GenerationStarted();
	WaitCursor( Begin );

//	InitRunPropertiesDialog(~Print All Products <ProductID>, order <OrderID>~,
//							FALSE,~<OrderID>~,dlgComp);  // puts up dialog

	// SelectedOrderItemsToRun is global needed by Run routine - list of items to run
	RunOrderItemsNow( ~<OrderID>~ );  // does NOT put up dialog.

	GenerationComplete(~<Count>~);
	WaitCursor( End );

	dlgComp( SetStatus,0,Translate(CompJobMessages,RanItemsSts,~<Count>~) );

	return TRUE;
}

Include: ~GroupHndl.txt~;

NUMERIC GenerateAllClassPictures( GenConAddr,NodeGenConAddr )	// RUNS ON A THREAD
{

	GenCon(Data,Is,<GenConAddr>,Temporary);
	GenCon(NodeData,Is,<NodeGenConAddr>,Temporary);

	// Get all the Groups and their command lists
	GroupBy = ~<$con.Data[GroupBy]>~;
	SubjectInfoOrderID = ~<$con.Data[SubjectOrderID]>~;
	InfoType = ~<$con.Data[InfoType]>~;

	//  Generates Globals:  GrpCmdList and GroupsList
	retVal = GenerateGroups(~<SubjectInfoOrderID>~,~<InfoType>~,~<GroupBy>~,count,theHdrString,TabStops);
	
	ClearProblemString();

	Index = 0;

	Log( Session,~All Composites - Order:<$con.Data[OrderID]> ImagesOrder:<$con.Data[ImagesOrderList]> SubjectOrder:<SubjectInfoOrderID> GroupBy:<GroupBy>  Product:<$con.Data[Collection]>~ );

	if ( !ADO( dBase,Connect ) ) 
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate(DBMessages,ConnectionFailed,~<theErr>~) );
		return FALSE;
	}

	while ( (<Index> < <count> ) && (<Stop> == FALSE) )
	{

		GrpCmdList(GetStringAt,<Index>,theCmd);
		GroupsList(GetStringAt,<Index>,theDesc);
		theDesc = String(Replace,~<theDesc>~,~<Tab>~,~\~);
//		theDesc = String( GetStringBeforeString,~\:~, ~<theDesc>~); // remove the count

		if ( !GenerateClassPicture( dBase,Data,NodeData,~<theCmd>~,~<theDesc>~,ItemID ) )
		{
			Invoke( GenerationComplete,<Index> );
			return FALSE;
		}
		++Index;
	}

	if ( <Index> < <count> )
	{
		Invoke( UpdateJobStatus,~Partial Items~);
		Invoke( GenerationStopped,<Index>,<count> );
	}
	else
	{
		Invoke( UpdateJobStatus,~Items~);
	}

	Invoke( GenerationComplete,<count> );

	if ( <CountProblems> > 0 )  // Some jobs were not created
	{
		Invoke( ShowIncompleJobs,~<ProblemString>~,<CountProblems> );
//		Invoke( ShowIncompleJobs );
	}
	return TRUE;
}

// RunJobs = TRUE if run jobs after generate order items, FALSE if only create order items
NUMERIC GenerateSelectedClassPictures( GenConAddr,NodeGenConAddr,RunJobs)	// RUNS ON A THREAD
{

	GenCon(Data,Is,<GenConAddr>,Temporary);
	GenCon(NodeData,Is,<NodeGenConAddr>,Temporary);

	Index = 0;  // 0 => First Item Selected
	count = 0;

	ClearProblemString();
	ItemID = 0;
	ItemList = ~~;

	Log( Session,~Select Composites - Order:<$con.Data[OrderID]> ImagesOrder:<$con.Data[ImagesOrderList]> SubjectOrder:<$con.Data[SubjectOrderID]>  Product:<$con.Data[Collection]>~ );

	if ( !ADO( dBase,Connect ) ) 
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate(DBMessages,ConnectionFailed,~<theErr>~) );
		return FALSE;
	}

	while ( ( dlgComp( ListBox,GroupsListBox,GetNthSelectedItem,<Index>,theDesc ) > 0 )  && (<Stop> == FALSE) )
	{

		ListIndex = dlgComp( ListBox,GroupsListBox,GetNthSelectedIndex,<Index>);
		GrpCmdList(GetStringAt,<ListIndex>,theCmd);
		theDesc = String(Replace,~<theDesc>~,~<Tab>~,~\~);
//		theDesc = String( GetStringBeforeString,~\:~, ~<theDesc>~); // remove the count

		if ( !GenerateClassPicture( dBase,Data,NodeData,~<theCmd>~,~<theDesc>~,ItemID ) )
		{
			Invoke( UpdateJobStatus,~Partial Stopped~);
			Invoke( GenerationComplete,<count> );
			return FALSE;
		}

		if (<ItemID> > 0)
		{
			ItemList = ~<ItemList>~ == ~~ ? ~<ItemID>~ : ~<ItemList>,<ItemID>~;
			++count;
		}
		++Index;
	}


	Invoke( UpdateJobStatus,~Selected Items~);

	if ((<RunJobs> == TRUE) && (~<ItemList>~ != ~~))
	{
		ForgetGlobal(SelectedOrderItemsToRun);

		OrderId = ~<$con.dlgCompData[OrderID]>~;
		Query = ~Select * from OrderItems Where OrderID = '<OrderId>' And Id In (<ItemList>)~;
		if ( !PGenConList( SelectedOrderItemsToRun,Connection,dbase,Lock,ReadOnly,Cursor,Forward,QUERY,~<Query>~ ) )
		{
			SelectedOrderItemsToRun( GetErrorDescription,0,theErr );
			Invoke( ShowWarning,Translate(DBMessages,QueryFailed,~<Query>~,~<theErr>~) );
			Invoke( GenerationComplete,<count> );
			return FALSE;
		}

		SelectedCount = SelectedOrderItemsToRun( NumEntries );
		if (<SelectedCount> != <count>)
		{
			Log( Session,~Composite Job:Create/Run - Items Created (<count>) does not match items to run (<SelectedCount>)~ );
		}
		Global(SelectedOrderItemsToRun);
		RunOrderItemsNow( ~<OrderID>~ );  // does NOT put up dialog.
	}

	Invoke( GenerationComplete,<count> );

	if ( <CountProblems> > 0 )  // Some jobs were not created
	{
		Invoke( ShowIncompleJobs,~<ProblemString>~,<CountProblems> );
	}

	return TRUE;
}


// make sure that the theDesc does not exceed the size of the "TypeName" field.
// Truncate from beginning of theDesc, as end may be more unique.

STR GetTypeNameFromDesc(theDesc)
{
	len = strlen(~<theDesc>~);
	if (<len> > <MAX_TypeName_LEN>)
	{
		substr(~<theDesc>~,<len> - <MAX_TypeName_LEN>,<MAX_TypeName_LEN>,theDesc);
	}
	
	return (~<theDesc>~);
}


// CAUTION:  When modifying this routine, do NOT change the names of the following:
//		ImagesOrderIDList 
//		SubjectInfoOrderID 
//		InfoType 
//		CCList
// As these variables are assumed to be available by the CompJob Macros.

NUMERIC GenerateClassPicture( &dBase,&Data,&NodeDetailsData,theCmd,theDesc,&ItemID )	// RUNS ON A THREAD
{

	Log( Session,~Generate Composite for:  <theDesc>~ );
	Invoke( ShowProgress,~Checking <theDesc>~ );

	ItemID = 0;

	if ( !GetSortBy(~<$con.Data[SortBy]>~, theSortby,theRestriction) )
	{	return Warning( Translate(DBMessages,QueryFailed,~<SortName>~) );	}

//***12/10 moved getting dbase connection out one layer
	ProductID = ~<$con.Data[Collection]>~;
	if ( !dBase( GetValuesFor,~Select ProductType,ProductLayoutPath,PreviewPath From Products Where ID = '<ProductID>'~,ProductType,LayoutPath,PreviewPath ) )
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,~Error getting the layout path for product <ProductID>: <theErr>~ );
		return ~~;
	}

	ImagesOrderIDList = ~<$con.Data[ImagesOrderList]>~;
	SubjectInfoOrderID = ~<$con.Data[SubjectOrderID]>~;
	InfoType = ~<$con.Data[InfoType]>~;

	// **Get the Image Records
	theQuery = ~Select * from SubjectInfo<infoType>, Images where SubjectInfo<infoType>.Orderid = '<SubjectInfoOrderID>' AND Images.OrderId In (<ImagesOrderIDList>) and SubjectInfo<infoType>.SubjectId = Images.SubjectId And Images.Rejected <> 1 And <theCmd> Order By <theSortBy>,Images.SubjectId,Images.OrderId,Images.roll,Images.frame~;

	if ( !PGenConList( CCList,Connection,dbase,Lock,BatchOptimistic,Cursor,Static,QUERY,~<theQuery>~ ) )
	{
		CCList( GetErrorDescription,0,theErr );
		Invoke( ShowWarning,Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
		return FALSE;
	}

	CountRecords = CCList( NumEntries );
	if (<CountRecords> < 1)
	{
		AddProblemString( ~<theDesc>: No Images. No job generated.~ );
		return TRUE;
	}

	CCList( SetConnection,~~ );	// DISCONNECT LIST FROM THE DATABASE

	MultiImages = ~<$con.Data[MultiImages]>~;
    HandleMultiImages(dbase,<MultiImages>,CCList);

	CountRecords = CCList( NumEntries );

	//** Verify Appropriate # Layout File Exists
	NumCCNodes = <CountRecords> + GetCountCCDetailsNodes(~<ProductID>~);

	if (!Files( GetGridLayout,~<LayoutPath>~,<NumCCNodes>,UsePath ) || (~<UsePath>~ == ~~) )
	{
		AddProblemString( ~<theDesc>: No Layout at <LayoutPath> for <NumCCNodes> Images. No job generated.~ );
		return TRUE;
	}

	// ** Build Render List
	if ( !Document( theJob,ParseFile,~<UsePath>~ ) )  // theJob - ScannerUDocument
	{
		Invoke(ShowWarning( ~An error occured while parsing the job at <UsePath>~ ));
	}

	Index = 0;
	if ( !theJob( GetRenderList,<Index++>,RenderList ) )  // RenderList - ScannerRenderList
	{ 
		Invoke(ShowWarning( ~There was no render list for <UsePath>~ ));
	}

	OrderID = ~<$con.Data[OrderID]>~;
	QtyType = ~<$con.Data[Quantity]>~;

	Quantity = ~<$con.Data[QtyN]>~;
	// Determine Quanity
	if (<QtyType> == 0 )      // # Images
	{
		Quantity = <CountRecords> + <Quantity>;
	}
	else if (<QtyType> == 1 )  // # Ordered Packages
	{
		Quantity = DetermineQuantityFromPackages(dbase,CCList,~<OrderID>~,Upper(~SubjectInfo<InfoType>~)) + <Quantity>;
	}

	if (<Quantity> < 1)
	{  Quantity = 1;  }


	// ** Create the Job
	// Need to get here first record so data available for Macros
	moreRecords = CCList(GetFirst,SubjectImgRecord);  // position at top of list - incase used in Macros
	Global(SubjectImgRecord,CCList,MultiImages);

	theDesc = ~<theDesc>\<CountRecords>~;
	theDesc = GetTypeNameFromDesc(~<theDesc>~);

	ImagePath = ~~;
	Global(ImagePath);

//	OrderID = ~<$con.Data[OrderID]>~;
	newSequence=BaseOrderItem::CalcNext( dbase,~<OrderID>~,Sequence );
	ItemID=BaseOrderItem::CalcNext( dbase,~<OrderID>~,ID );
	JobPath = CreateJobPath( ~<OrderID>~,~<ItemID>~ );

	if (~<JobPath>~ == ~~)
	{	return FALSE;    }

	Global(ImagesOrderIDList,SubjectInfoOrderID,InfoType,theCmd,theSortby);

	Invoke( ShowProgress,~Adding Order Item <ItemID> for <theDesc>~ );
	if ( !File( Job,UnicodeOutput,Open,~<JobPath>~,Create,Write ) )
//	if ( !File( Job,Open,~<JobPath>~,Create,Write ) )
	{
		Invoke( ShowWarning,~Unable to open file <JobPath>~);
		return FALSE;
	}

	NamedCCNodes = 0;

	// **Generate the Job

	Job( ~FileType: Job~ );

	Job( ~LayoutPath: |<LayoutPath>|~ );

//	Job( ~Use: |<UsePath>|~ );

	Job( ~ ~ );

	// *** Add Named Detail Nodes to the Job ***
	DefaultStyle = ~ ~;
	DefaultTextField = ~~;
	StringList(CCIDList,New);

	more = NodeDetailsData(GetFirst,DetailRecord);
	while ( <more> )
	{
		NodeName = ~<$con.DetailRecord[NodeName]>~;
		if (~<NodeName>~ != Translate(CompJobDetailsMsgs,DefaultNode) )
		{
			ImagePath = ~<$con.DetailRecord[Image]>~;

			if (~<NodeName>~ == ~Background~ )
			{
				Job( ~Main:~ );
			}
			else if (NodeIsCountable(~<ProductID>~,~<NodeName>~) )
			{
				if (~<ImagePath>~ == ~~)  // don't create CC node if no image.
				{
					more = NodeDetailsData(GetNext,DetailRecord);
					continue;
				}
				Job( ~CC: $<NodeName>~ );
				if (RenderList(GetNamedNode, ~<NodeName>~, theNode) )
				{
					theNode(GetValues,~INTID:~,aNodeID);
					CCIDList(AddString,~<$str.$aNodeID.%06ld>~,InAlphaOrder);
				}
				++NamedCCNodes;
			}
			else
			{
				Job( ~IL: $<NodeName>~ );
			}

			if (~<ImagePath>~ != ~~)
			{
				Job( ~    IFile: |<ImagePath>|~ );
			}

			TextField = ~<$con.DetailRecord[Text]>~;
			if (~<TextField>~ != ~~)
			{
				Job( ~    Text: |<TextField>|~ );
			}

			Style = ~<$con.DetailRecord[Style]>~;
			if ((~<Style>~ != ~ ~ ) && (~<Style>~ != ~~ ))
			{
				if ((~<ImagePath>~ != ~~) || (~<TextField>~ != ~~))  // don't apply style if no image/text
				{
					if (!AddStyleInfo(~<Style>~, Job))
					{
					}
				}

			}
			Job( ~ ~ );
			
			ForgetGlobal(ImagesSubjectID);  // defined in image path macros
		}

		else //DetailRecord is the default node data
		{
			DetailRecord(GetValue,Text,DefaultTextField);
			DefaultStyle = ~<$con.DetailRecord[Style]>~;
		}

		more = NodeDetailsData(GetNext,DetailRecord);
	}


	//*** Determine Node numbers used by countable named nodes.
	UsedCCId = 0;
	moreIds = CCIDList(GetFirstString,UsedCCId);

	if ((~<DefaultStyle>~ != ~ ~ )  &&  (~<DefaultStyle>~ != ~~ ))
	{
		Job(~Default:~);
		AddStyleInfo(~<DefaultStyle>~, Job);
//		Job( ~Use: |<DefaultStylePath>|~ );
		Job( ~ ~ );
	}

	// *** Add Searched for (kids) nodes to the Job ***
	Node = 1;

	moreRecords = CCList(GetFirst,SubjectImgRecord);
	while ( <moreRecords> )
	{
		Global(SubjectImgRecord);

		while ( <moreIds> && (<Node> == <UsedCCId>))
		{
			++Node;
			moreIds = CCIDList(GetNextString,UsedCCId);
		}

		ImagePath = ~<$pcon.SubjectImgRecord[Path]>~;
		Job( ~CC: <Node++>~ );
		Job( ~    IFile: |<ImagePath>|~ );
		if (~<DefaultTextField>~ != ~~)
		{
			Job( ~    Text: |<DefaultTextField>|~ );
		}
		Job( ~ ~ );

		ForgetGlobal(SubjectImgRecord);

		moreRecords = CCList(GetNext,SubjectImgRecord);
	}

	// Add output specification if defined
	OutputSpecPath = ~<$con.Data[OutputSpecFile]>~;
	if (~<OutputSpecPath>~ != ~~)
	{
		// Disable any other device that may be enabled.
		// Don't just do one enabled at this time, as it could change.
		Job( ~Saveimage:~ );
		Job( ~    Enabled:  0~ );
		Job( ~Outputtocrt:~ );
		Job( ~    Enabled:  0~ );
		Job( ~Outputtoled:~ );
		Job( ~    Enabled:  0~ );
		Job( ~Outputtolaserprinter:~ );
		Job( ~    Enabled:  0~ );
		Job( ~Use: |<OutputSpecPath>|~ );
	}

	Job( Close );

	// Add record to database
	OrderItemPreviewPath = MakePreviewPathFromPath( ~<JobPath>~,TRUE );
	Files( Delete,~<OrderItemPreviewPath>~ );

	if ( !AddOrderItemToDataBase(dBase,<ItemID>,~<OrderID>~,~<ProductID>~,~<Quantity>~,<newSequence>,~<JobPath>~,~Composite~,~<theDesc>~ ) )	// ADD THE ORDER ITEM TO THE DATABASE
	{
		Files( Delete,~<JobPath>~ );
		return FALSE;
	}

	ForgetGlobal(ImagesOrderIDList,SubjectInfoOrderID,InfoType,theCmd,theSortby);
	ForgetGlobal(CCList);
	ForgetGlobal(MultiImages,ImagePath);

	return TRUE;
}


STR SubstituteMacros(theString)
{
	NewString = String( Replace,~<theString>~,~$~,~$func.~ );
	NewString = String( Replace,Upper(~<NewString>~),~$FUNC.FUNC.~,~$FUNC.~ );

	return(~<NewString>~);
}


VOID HandleMultiImages(&dbase,MultiChoice,&CCList)
{
	if (<MultiChoice> != 0)  // don't want all images - remove duplicate
	// may be best to remove duplicates when adding record to job - do here for now until other parts of system are implemented
	{
		i = 0;
		if (<MultiChoice> == '1')  // Use First
		{
			more = CCList(GetFirst,SubjectImgRecord);
			NextCmd = ~GetNext~;
		}
		else  // Use Last
		{
			more = CCList(GetLast,SubjectImgRecord);
			NextCmd = ~GetPrev~;
		}
		while (<more>)
		{
			if (dbase(IsJet))
			{	subjectid = ~<$pcon.SubjectImgRecord[Images.SubjectID]>~;	}
			else
			{	subjectid = ~<$pcon.SubjectImgRecord[SubjectID]>~;	}
			
			more = CCList(~<NextCmd>~,SubjectImgRecord);
			if (dbase(IsJet))
			{	nextSubjectid = ~<$pcon.SubjectImgRecord[Images.SubjectID]>~;	}
			else
			{	nextSubjectid = ~<$pcon.SubjectImgRecord[SubjectID]>~;	}
			++i;

			while ((<more>) && ( ~<subjectid>~ == ~<nextSubjectid>~))
			{
				CCList(Remove);

				more = CCList(~<NextCmd>~,SubjectImgRecord);
				if (dbase(IsJet))
				{	nextSubjectid = ~<$pcon.SubjectImgRecord[Images.SubjectID]>~;	}
				else
				{	nextSubjectid = ~<$pcon.SubjectImgRecord[SubjectID]>~;	}
			}
		}
	}
}


Include: ~CreatePackages.txt~;
Include: ~QtyComps.txt~;

NUMERIC DetermineQuantityFromPackages(&dbase,&List,OrderID,TableName)
{
	
	GetImagesOrderID( ~<OrderID>~, ImagesOrderID );

	Quantity = GetQtyFromCustomerPackages(dBase,~<ImagesOrderID>~,~<TableName>~,List,~Needs Composite~);

	return (<Quantity>);

}


NUMERIC NodeIsCountable(ProductID,NodeName)
{
	IsCountable = FALSE;
	Query = ~Select Countable From CompositeNodes Where ProductID = '<ProductID>' And NodeName = '<NodeName>' Order by NodeName~;
	if ( !ADO( dBase,Connect) ) 
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate(DBMessages,ConnectionFailed,~<theErr>~) );
		return FALSE;
	}

	if ( !dBase(GetValuesFor,~<Query>~,IsCountable) ) 
	{
		Invoke( ShowWarning,Translate(CompJobMessages,UnableToGetValue,~<ProductID>~,~<NodeName>~) );
		return FALSE;
	}

	return <IsCountable>;
}


NUMERIC AddStyleInfo(NodeStyle, &Job)
{
	// Get path for nodeStyle
	theQuery = ~Select ProductLayoutPath From Products Where Style <> 0 And ID = '<NodeStyle>'~;	
	if ( !ADO( dBase,Connect,GetValuesFor,~<theQuery>~,StylePath ) ) 
	{
		Invoke( ShowWarning,~Could not find a style named <NodeStyle>~ );
		return FALSE;
	}

	if ( !Document( theStyle,ParseFile,~<StylePath>~ ) )
	{	
		Invoke( ShowWarning,~An error occured while parsing the job at <StylePath>~ );
		return FASLE;
	 }

	Index = 0;
	if ( !theStyle( GetRenderList,<Index++>,StyleRenderList ) )
	{ 	
		Invoke( ShowWarning, ~There was no render list for <StylePath>~ );
		return FALSE;
	}

	if ( !StyleRenderList(GetFirstImageOrTextNode, theNode) )
	{	
		Invoke( ShowWarning, ~No Image or Text Node Properties in <StylePath>~);
		return FALSE;
	}

	if ( !Job(WriteRenderStyle,theNode) )
	{	
		Invoke( ShowWarning, ~Unable to write Node Properties to job file~ );
		return FALSE;
	}

	Job( Flush );

	return TRUE;
}


Include: ~CompJobDetails.txt~;
Include: ~CreateOrderItems.txt~;

if (0)   // Not called
{
NUMERIC DeleteOrderItemFromDataBase( &dBase,OrderID,JobPath )
{
	Query = Select ID,PreviewPath From OrderItems Where OrderID = '<OrderID>' And JobPath = '<JobPath>'~;
	if ( !dBase(GetValuesFor,~<Query>~,ID,OrderItemPreviewPath ) ) 
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate(DBMessages,ConnectionFailed,~<theErr>~) );
		return FALSE;
	}
	Files( ChMod,~<JobPath>~,ReadWrite );
	Files( ChMod~<OrderItemPreviewPath>~,ReadWrite );
	Files( Delete,~<JobPath>~,Delete,~<OrderItemPreviewPath>~ );

	theSQL = ~Delete From OrderItems Where ID = '<ID>' And OrderID = '<OrderID>'~;
	if ( !dBase( CMD,~<theSQL>~ ) )
	{
		dBase( GetErrorDescription,theErr );
		Invoke( ShowWarning,Translate(DBMessages,CmdFailed,~<theSQL>~,~<theErr>~) );
		return FALSE;
	}

	return TRUE;
}
}


//** Opening the Order Items

NUMERIC OpenSelectedOrderItems(&SelectedOrdersItems)
{
	WaitCursor( Begin );

	CurrentlyOpen = NumWindows( LayoutOrJob );

	MaxOpenJobsOrLayouts = ~<$[Symbols].MaxOpenJobsOrLayouts[Long]>~;

	if ( <MaxOpenJobsOrLayouts> < 1 )
	{ 
		MaxOpenJobsOrLayouts = 1;
	}

	while ( SelectedOrdersItems( GetNext,OrderItem ) )
	{
		if ( <++CurrentlyOpen> > <MaxOpenJobsOrLayouts> )
		{
			Warning( Translate( ~You can only have <MaxOpenJobsOrLayouts> jobs or layouts open at a time~ ) );
			break;
		}

		Operation = STR ( OpenAJob( ~<$pCon.OrderItem[JobPath]>~,~<$pCon.OrderItem[OrderID]>~,~<$pCon.OrderItem[ID]>~ ) );
		QueueContentsOf( Operation );
	}

	WaitCursor( End );

	return TRUE;

}


NUMERIC OpenAJob( JobPath,OrderID,OrderItem )
{
	if ( ~<JobPath>~ == ~~ )
		{ return FALSE; }

	while ( GenCon( Window,GetWindowByIndex,<Index++> ) )
	{
		if ( !Window( GetNext,aView ) )
			continue;

		aView( Get,ViewType,ViewType );

		if ( ~<ViewType>~ == JobView || ~<ViewType>~ == ImageView )
		{
			aView( GetDocumentPath,DocumentPath );

			if ( ~<DocumentPath>~ == ~<JobPath>~ )
			{ 
				Window( SetWindowOrder,Top );
				return TRUE;
			}
		}
	}

	if ( ~<JobPath>~ == ~~ )
		{ return FALSE; }

	if (!GenCon( Info,New,DDDocumentInfo ) )
		{ return Warning( ~Could not create document info for <JobPath>~ ); }

	Info( SetValues,OrderID,~<OrderID>~,OrderItemID,~<OrderItem>~ );

	if ( !Document( aJob,Open,~<JobPath>~,Job,~~,Info ) )
		{ return Warning( ~Could not open <JobPath>~ ); }

	return TRUE;
}

// //// End of code copied and modified from OrderItemsDoc


NUMERIC DeleteSelectedOrderItems(&OrderItemsList)
{
	if ( !ADO( dBase,Connect ) )
	{
		dBase( GetErrorDescription,theErr );
		return Warning( Translate(DBMessages,ConnectionFailed,~<theErr>~) );
	}

	more = OrderItemsList(GetFirst,OrderItem);

	while ( <more> )
	{
		Path = ~<$pCon.OrderItem[JobPath].Path>\Preview\<$pCon.OrderItem[JobPath].Filename>.jpg~;
		if ( ~<Path>~ != ~~ )
		{
			if ( !BroadcastMessageToAllViews( CanReleaseImage,~<Path>~ ) )
				{ return Warning( Translate( ~Could not delete\n\n<Path>\n\nbecause it is still open in a job or layout.~ ) ); }

			if ( !BroadcastMessageToAllViews( ReleaseImage,~<Path>~ ) )		
				{ return Warning( Translate( ~Could not delete\n\n<Path>\n\nbecause it is still open in a job or layout.~ ) ); }

			Files( ChMod,~<Path>~,ReadWrite );

			if ( !Files( Delete,~<Path>~ ) )
			{ 
				err = GetLastErrorMsg();
				Warning( ~Could not delete <Path>.  <err>~ );
			}
		}

		Key	= ~OrderID = '<$pCon.OrderItem[OrderID]>' AND ID = <$pCon.OrderItem[ID]>~;

		cmd = ~DELETE FROM OrderItems WHERE <Key>~;


		if ( !dBase( CMD,~<cmd>~ ) )
		{
			dBase( GetErrorDescription,theErr );
			return Warning( Translate(DBMessages,CmdFailed,~<cmd>~,~<theErr>~) );
		}

		Files( ChMod,~<$pcon.OrderItem[JobPath]>~,ReadWrite );

		if ( !Files( Delete,~<$pcon.OrderItem[JobPath]>~ ) )
		{ 
			Warning( ~Could not delete <$pcon.OrderItem[JobPath]>.  <$Func.GetLastErrorMsg()>~ );
		}

		StatusBarText( Translate(CompJobMessages,OrderItemDeletedMsg, ~<$pCon.OrderItem[ID]>~) );

		more = OrderItemsList(GetNext,OrderItem);
	}

	return TRUE;
}


//** Functions to Support Top functions of Dialog and Utility functions **


NUMERIC GetOrderList()
{
	if ( ~<WhichShootDesc>~ == ~~)
	{
		theQuery = ~Select ID From Orders Order By ID~;
	}
	else
	{
		theQuery = ~Select ID From Orders Where ShootDescID = '<WhichShootDesc>' Order By ID~;
	}
	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	List( MakeStringList,OrdersChoices,ID );
	dlgComp( SetControlFromStringList,OrderComboBox,OrdersChoices,NoSelection );

//R	dlgComp( GetInput );
	return TRUE;
}


NUMERIC GetSortList()
{

	infoType = ~<$con.dlgCompData[InfoType]>~;
	theQuery = ~Select Name From Sorts Where Type in ('Any SubjectInfo','SubjectInfo<infoType>') Order by Sequence,Name~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	List( MakeStringList,SortByChoices,NAME,TRUE);
	dlgComp( SetControlFromStringList,SortComboBox,SortByChoices,NoSelection );

//R	dlgComp( GetInput );
	return TRUE;
}


NUMERIC GetGroupByList()
{
	infoType = ~<$con.dlgCompData[InfoType]>~;
	theQuery = ~Select Name From Sorts Where Type in ('Any SubjectInfo','SubjectInfo<infoType>') Order by Sequence,Name~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	List( MakeStringList,SortByChoices,NAME,TRUE);  //TRUE - put in Alpha order
	dlgComp( SetControlFromStringList,GroupByComboBox,SortByChoices,NoSelection );


//R	dlgComp( GetInput );
	return TRUE;
}

NUMERIC GetCollectionList()
{
	theQuery = ~Select ID From Products Where Multiple <> 0 Order By Sequence~;

	if ( !PGenConList( List,Connect,Cursor,Keyset,Query,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List( NumEntries );

	List( MakeStringList,CollectionChoices,ID,TRUE );
	dlgComp( SetControlFromStringList,CollectionComboBox,CollectionChoices,NoSelection );

	return TRUE;

}


// Get Order Ids for all ShootDesc records whose id is in IDList
NUMERIC GetSQLOrdersList( AllTypes, &OrdersList)
{
	if ( <AllTypes> )
	{
		theQuery = ~Select ID From Orders Where ShootDescID = '<WhichShootDesc>' Order By ID~;
	}
	else
	{
		theQuery = ~Select ID From Orders Where ShootDescID = '<WhichShootDesc>' AND Type = 'Original' Order By ID~;
	}

	if ( !PGenConList( List,Connect,Lock,ReadOnly,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	count = List( NumEntries );

	if ( !<count> )
		{ return Warning( Translate(CompJobMessages, NoOrdersMsg) );}

	List(MakeSQLList,OrdersList,TRUE,ID);

	return TRUE;
}


NUMERIC OnImagesFromTypeChanges()
{
	if (~<$con.dlgCompData[OrderId]>~ == ~~)
	{	return TRUE;	}

	OnDataChange();

	GetImagesOrderID(~<$con.dlgCompData[OrderId]>~,theImagesOrderID);

	SetImagesList(~<$con.dlgCompData[ImagesFrom]>~,~<theImagesOrderID>~);

	return TRUE;
}


VOID SetImagesList(ImagesFromType,theImagesOrderID)
{
	theList = ~'<theImagesOrderID>'~;

	if ( <ImagesFromType> == 1 )	// 1 = All Orders
	{
		InfoType = ~<$con.dlgCompData[InfoType]>~;
		if (~<InfoType>~ != ~~)
		{	
			theQuery = ~Select ID From Orders Where InfoType = '<InfoType>' And ShootDescID = '<WhichShootDesc>' And ImagesOrderID Is Null Order By ID~;
		}
		else
		{
			theQuery = ~Select ID From Orders Where InfoType Is Null And ShootDescID = '<WhichShootDesc>' And ImagesOrderID Is Null Order By ID~;
		}

		if ( !PGenConList( List,Connect,Cursor,Forward,Query,~<theQuery>~ ) )
		{
			List( GetErrorDescription,0,theErr );
			Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
			dlgComp( SetStrings,ImagesFrom,0 );  // Set to "This Order"
		}
		else
		{
			Count = List(NumEntries);
			List( MakeSQLList,theList,TRUE,ID );  // TRUE - make list quoted ''
		}
	}

	else if ( <ImagesFromType> == 2 )  // 2 = From Selected Orders
	{
//		pull values from SlctdOrders and make into SQL list
		if (~<$con.dlgCompData[SlctdOrders]>~ != ~~)
		{
			theList = ~<$con.dlgCompData[SlctdOrders]>~;
		}
	}

//	else is 0 = This Order only - already set

	dlgCompData( SetValue,ImagesOrderList,~<theList>~ );

}


// Called when the OrderID changes
NUMERIC OnOrderChanges()
{
	if (~<$con.dlgCompData[OrderId]>~ == ~~)
	{	return TRUE;	}

	OnDataChange();

	theInfoType = ~~;
	theSubjectsOrderID = ~~;
	theImagesOrderID = ~~;
	theShootType = ~~;
	GetIdsAndTypesForOrder(~<$con.dlgCompData[OrderId]>~,theImagesOrderID,theSubjectsOrderID,theInfoType,theShootID,theShootType);

	// Regenerate Group and Sort lists as these are different based on Order InfoType
	if (~<theInfoType>~ != ~<$con.dlgCompData[InfoType]>~)
	{
		dlgCompData( SetValue,InfoType,~<theInfoType>~ );
		GetSortList();
		GetGroupByList();
	}

	if ( (!doNewWay() ) || (~<theInfoType>~ != ~<$con.dlgCompData[InfoType]>~) || (~<theSubjectsOrderID>~ != ~<$con.dlgCompData[SubjectOrderID]>~))
	{
//		dlgComp(SetControlValue, GroupTitleTxt, Translate( CompJobMessages,CreateHeader));
		dlgComp(SetControlValue, GroupHeaderTxt, ~~);
		if ( !dlgComp(ListBox,GroupsListBox,ResetContent) )
			{ return Warning( Translate(CompJobMessages, ErrorResettingListBox, ~<Groups>~) );}
	}

	// if error in Get..., just clear out fields
	dlgCompData( SetValue,SubjectOrderID,~<theSubjectsOrderID>~ );
	dlgCompData( SetValue,ShootDescType,~<theShootType>~ );

    SetImagesList(~<$con.dlgCompData[ImagesFrom]>~,~<theImagesOrderID>~);

//	dlgCompData( SetValue,JobStatus,~~ );

	if ( !dlgComp(ListBox,ItemsListBox,ResetContent) )
		{ return Warning( Translate(CompJobMessages, ErrorResettingListBox, ~<OrderItems>~) );}

//	ClearNodeDetailsChange();

	return TRUE;

}


NUMERIC OnCollectionChanges(ClearDetails)
{
	OnDataChange();

	dlgComp( SetStrings,JobStatus,~~ );

	if ( <ClearDetails> )
	{
		ClearNodeDetailsChange();

		if ( !dlgComp(ListBox,ItemsListBox,ResetContent) )
			{ return Warning( Translate(CompJobMessages, ErrorResettingListBox, ~<OrderItems>~) );}
	}

	GetNodeList();
	OnNodeFieldChanged();
		
	return TRUE;
}


NUMERIC LoadSetupNodeDetails()
{
	OnDataChange();

	dlgComp( GetInput );

	SetupName = ~<$con.dlgCompData[DefName]>~;

	if ( IsNull( ~<SetupName>~ ) )
	{
		return ShowWarning( Translate( ~You must select a setup to load~ ) );
	}

	if ( !GetDetailsForOrder(~Setup~,~<SetupName>~))
	{	return FALSE;  }

	// This Order has changed now
	NodeDetailsChanged = TRUE;

	return TRUE;

}


NUMERIC GetSetupsList()
{

//*** 12/10 Had separate ADO(dbase,connedt), & used this dbase connection in the following
	//Get all Setups of NodeDetails
	theQuery = ~Select Distinct ProductID From NodeDetails Where OrderID = 'Setup' Order By ProductID~;
	if ( !PGenConList( List,Connect,Cursor,Forward,QUERY,~<theQuery>~ ) )
	{
		List( GetErrorDescription,0,theErr );
		return Warning( Translate(DBMessages,QueryFailed,~<theQuery>~,~<theErr>~) );
	}

	Count = List( NumEntries );

	List( MakeStringList,SetupChoices,ProductID );

	dlgComp( SetControlFromStringList,DefsSetupsComboBox,SetupChoices,NoSelection );

	dlgComp( SetStatus,0,Translate(CompJobMessages,ReadRecords,~<Count>~) )	;
	return TRUE;
}


NUMERIC OnEditSetups()
{
	dlgComp(GetInput);

	// View Node Details table for only the Setups.
	if (~<$con.dlgCompData[DefName]>~ != ~~)
	{
		theQuery = ~Select * from NodeDetails where OrderID = 'Setup' And ProductID = '<$con.dlgCompData[DefName]>'~;
	}
	else
	{
		theQuery = ~Select * from NodeDetails where OrderID = 'Setup'~;
	}


	Actions = ACTION Doc ( NodeDetails OpenOnce OpenTableDoc "Init( ~NodeDetails~,~<theQuery>~,~ProductID,NodeName~ );" );
	PerformActions( Actions );

	return TRUE;
}


NUMERIC OnSaveSetup()
{
	dlgComp( GetInput );
	SetupName = ~<$con.dlgCompData[DefName]>~;
	if (~<SetupName>~ == ~~)
	{	return Warning(Translate(CompJobMessages,NoSetupName));	}

	if ( MessageBox( Translate(CompJobMessages,VerfiySaveNodeSetup,~<SetupName>~),YESNO ) != YES )
		{ return FALSE; }

	if ( !SaveDetailsForOrder(~Setup~,~<SetupName>~))
	{	return FALSE;  }

		
		return TRUE;
}


NUMERIC ToggleUseSetup()
{
	OnDataChange();

//	dlgComp( ShowControls,dlgCompData(GetNumeric,UseDefCheckBox),UseSetupBox );

	// reload in values for the setup

	return TRUE;
}



VOID OnBrowseButton()
{
	Title = Translate( CompJobMessages,PathTitleMsg );

	if ( !FileDialog( DefaultDirectory,~<$App.ShareDirectory>\OutputSpecifications~,Title,~<Title>~,PATH,theFile,Open ) )	// ASK THE USER TO FIND THE FILE
		{ return; }
		
	dlgComp( SetString,~<theFile>~ ,OutputSpecFile,0 );										
}


NUMERIC ViewOrderData()
{

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Query = ~Select * From Orders Where ShootDescID = '<WhichShootDesc>' Order By ID~;
	Actions = ACTION Doc ( ~Orders~ <OpenMethod> OrdersDoc "Init( ~<WhichShootDesc>~,~<Query>~ );" );
	PerformActions( Actions );

	return TRUE;

}


NUMERIC ViewProductsData()
{

	Query = ~Select * From Products Where Multiple <> 0 Order By Category,Sequence~;
	Actions = ACTION Doc ( ~ProductsDoc2~ OpenOnce ProductsDoc2 "Init( ~Multiple Layouts~,TRUE,~<Query>~ );" );
	PerformActions( Actions );
	return TRUE;

}


NUMERIC ViewSortsData()
{

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Query = ~Select * From Sorts Order By Name~;
	Actions = ACTION Doc ( ~Sorts~ <OpenMethod> SortsDoc "Init( ~All~,~<Query>~ );" );
	PerformActions( Actions );

	return TRUE;
}


NUMERIC ViewProducts()
{

	OpenMethod = KeyState( RSHIFT ) ? Open : OpenOnce;
	Query = ~Select * From Products Where Multiple <> 0 Or Style <> 0 Order By Category,Sequence~;
	Actions = ACTION Doc ( ~ProductsDoc2~ <OpenMethod> ProductsDoc2 "Init( ~Composites,Styles~,TRUE,~<Query>~ );" );
	PerformActions( Actions );

	return TRUE;
}


NUMERIC RightClickInDialog()
{

	return ViewProducts();
}


VOID CloseDialog()
{
	// don't let them close if operation still going on
	if ( aThread( IsActive ) )
	{
		dlgComp( SetDlgHandleActionsFlag,TRUE ) ;	// re-enable handling actions
		Invoke( ShowWarning,Translate( CompJobMessages,CannotCloseMsg ) );
		return;	
	}						


	dlgComp(GetInput);

	if ( HasDataChanged() )
	{
		if ( MessageBox( Translate(CompJobMessages,SaveChangesMsg,~<$con.dlgCompData[OrderID]>~,~<$con.dlgCompData[Collection]>~),YESNO ) == YES )
		{
			OnSaveButton(FALSE);
		}
	}

    dlgComp( END );
    Exit();
}


//Thread( aThread,Debug );	// ADD THE PARAMETER DEBUG TO RUN AS A SUBROUTINE RATHER THAN A THREAD FOR SOURCE DEBUGGING
Thread( aThread);

// If ShootDescID is blank (~~), then all the orders are displayed,
// Otherwise, only the orders for the ShootDescID are displayed
VOID Init( ShootDescID, ShootDescName )
{
	TitleSpec = ~<ShootDescID> <ShootDescName>~;
	if ( !Defined( dlgComp ) )
	{
		DefineDialog( ~<TitleSpec>~ );

		WhichShootDesc = ~<ShootDescID>~;
		Global(WhichShootDesc);

		GetCompositeList();
		dlgComp( SetStrings,Qty,0 );
		dlgComp( SetStrings,ImagesFrom,0 );
		dlgComp( SetStrings,MultiImages,0 );
		dlgComp( SetStrings,ShipDate,~<$Date.Date>~ );

		StringList( theStringList,New,Is,~<$[DATABASE FieldTypes].MultipleImages[ChoiceList]>~ );
		dlgComp( SetControlFromStringList,MultiImgComboBox,theStringList,NoSelection );
		StringList( theStringList2,New,Is,~<$[DATABASE FieldTypes].QtyType[ChoiceList]>~ );
		dlgComp( SetControlFromStringList,QuantityField,theStringList2,NoSelection );
		StringList( theStringList3,New,Is,~<$[DATABASE FieldTypes].ImagesFromType[ChoiceList]>~ );
		dlgComp( SetControlFromStringList,UseOrdersBox,theStringList3,NoSelection );

		SetupNodeDetails();
		GetOrderList();
		dlgComp( GetInput );
		GetSortList();
		GetGroupByList();
		OnOrderChanges();
		GetCollectionList();
		GetSetupsList();

		dlgComp( GetInput );

		SetDataNoChanges();

		// if there are composites defined, load in first one
		if ( dlgComp( ListBox,CompsListBox,GetCount ) > 0 )
		{
			dlgComp(ListBox,CompsListBox,Select,0);

			LoadCompositeRecord(TRUE);  // TRUE indicates is Startup - don't check for changes
		}
	}

	else
	{
		Warning(Translate(CompJobMessages,DialogAlreadyOpen) );
	}	

}
