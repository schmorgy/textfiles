IncludeClass( BaseMenu );
IncludeClass( BaseGrid );

VOID CompSbaData::CompSbaData( )					// CONSTRUCTOR
{
	TableName = ~CompSbaData~;
	Title = Translate( ~Auto Balance (Digital SBA) Images Data Table~ );
	DocumentQuery = ~Select * from <TableName> Order By OrderID,Roll,Frame ~;
	WindowTop = 0;
	WindowWidth = 90;
	WindowHeight = 25;
	HelpPage = ~AutoBalanceImages.htm~;
}

STR CompSbaData::GetKey( &Item )	
{ 
	// PRIMARY KEY FOR THE TABLE
		return ~OrderID = '<$con.Item[OrderID]>' AND Roll = '<$con.Item[Roll]>' AND Frame = '<$con.Item[Frame]>'~; 
}


NUMERIC CompSbaData::ChangeRecordAudits( &Changed )	// CALLED BEFORE ADDING OR CHANGING A RECORD
{
	if ( IsNULL(~<$Con.Changed[OrderID]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Order cannot be blank.~ ) ); }

	if ( IsNull(~<$Con.Changed[Roll]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Roll cannot be blank.~ ) ); }

	if ( IsNull(~<$Con.Changed[Frame]>~) )
		{ return Warning( Translate( ~Unable to save pending changes.  Frame cannot be blank.~ ) ); }

	return TRUE;
}

VOID CompSbaData::AddMenuItems()					// ADD ADDITIONAL RIGHT CLICK MENU ITEMS
{
	AddMenuItem( TRUE,FALSE,Translate(~Export Data~),ACTION EXEC ( <THIS>.ExportSelectedToFile() ) );

}

NUMERIC CompSbaData::DefineWindow()
{
	if ( !GenCon( TableDefinition,GetFrom,<TableName>,~[DATABASE <WhichTableDefinitions>]~ ) )
		{ return Warning( ~The <TableName> Table is not properly defined~ ); }

	Private( TableDefinition );

	Define: DataWindow Using DDWinDef AsSymbol DataWindow Private
		Fields:	Title					Translate(~<Title>~)
				Position				<WindowLeft> <WindowTop> <WindowWidth> <WindowHeight>
				IsPositionPercent		T
				TypeName				SplitterWnd
				SplitterRows			~<SplitterRows>~
				SplitterColumns			~<SplitterCols>~
				EnableStatusBar			<WantStatusBar> ? T : F ; 

				WindowDefinition();			// OVERRIDE to specify other DDWinDef parameters

		Contains:	INLISTORDER
		{
			Define: ControlView Using DDViewDef AsSymbol ControlView Private
				Fields:	ViewType				FormView
						KeyboardActionsText		ACTION Exec ( <THIS>.OnKeydown() ) 
						DropActionsText			ACTION Exec ( <THIS>.HandleDrop() )
						HActionsText			ACTION SHOWHELPPAGE ( <HelpFile> "<HelpPage>" );

						ControlViewDefinition();

				Contains:
				{
					position = AddControls( 0 );
				}

			Define: DataView Using DDViewDef AsSymbol DataView	Private
				Fields:	ViewType				~ListView~
						HActionsText			ACTION SHOWHELPPAGE ( <HelpFile> "<HelpPage>" )
						GridControlTypes		TableDefinition(GetReferenceTo,Fields)
						ChangeRecordActionsText ACTION Exec ( <THIS>.ChangeRecord() )
						DeleteRecordActionsText ACTION Exec ( <THIS>.DeleteRecord() )
						RClickUpActionsText		ACTION Exec ( <THIS>.RightClickInListView() )
						ComboBoxActionsText		ACTION Call ( <THIS>.OnComboBox() )
						DoubleClickActionsText	ACTION Exec ( <THIS>.DoubleClick() )
						ButtonClickActionsText	ACTION Exec ( <THIS>.OnButtonClick() )
						DropActionsText			ACTION Exec ( <THIS>.HandleDrop() )
						DragAcceptFiles			<DragAcceptFiles>
						CloseActionsText		ACTION Call ( <THIS>.OnCloseDataView() ) ;

						DataViewDefinition();
		}

	return TRUE;
}


NUMERIC CompSbaData::AddControls( position )
{
	Define: ExportDataButton Using DDWinCtrlDef AsSymbol ExportDataButton
		Fields:	GENCONNAME		This
				DACTIONSTEXT	ACTION EXEC ( <THIS>.ExportSelectedToFile() )
				POSITION		$position + $hGap, $vGap 60 $ButtonHeight
				TEXT			Translate( ~Export~ )
				TOOLTIP			Translate( ~Export data to a text file~ )
				TYPENAME		BUTTON

	return ExportDataButton( GetRight,Position );
}

NUMERIC CompSbaData::ProcessTextDrop( &Item )	{ return TRUE; }



STR CompSbaData::OnButtonClickTitle(Row,Col)
{
	if ( IsColumnName(<Col>,~Order~ ) )				{ return Translate(~Order ID for the image.~); }
	if ( IsColumnName(<Col>,~Roll~ ) )				{ return Translate(~Roll for the image..~); }
	if ( IsColumnName(<Col>,~Frame~ ) )				{ return Translate(~Frame for the image.~); }

	return BaseGrid::OnButtonClickTitle(<Row>,<Col>);
}


NUMERIC Init( OrderID )
{
	newDocQuery = ~~;
	if ( DefinedAndNotNULL( OrderID ) )
	{
		sort =  ~ Order By OrderID,Roll,Frame ~;
		newDocQuery = ~Select * from CompSbaData Where OrderID = '<OrderID>'~;

		newDocQuery = ~<newDocQuery><Sort>~;
	}
	else
	{
		newDocQuery = ~Select * from <TableName> Order By OrderID,Roll,Frame ~;
	}

	if ( Defined(CompSbaGrid) )
	{
		if ( ~<newDocQuery>~ != ~~ )
		{
			CompSbaGrid.Set( DocumentQuery,~<newDocQuery>~ );
		}

		CompSbaGrid.ReOpen();
		CompSbaGrid.RefreshListView();
		return TRUE;
	}

	Class( CompSbaData,Extends,BaseGrid );

	CompSbaData( New,CompSbaGrid );

	CompSbaGrid.DefineWindow();

	if ( ~<newDocQuery>~ != ~~ )
	{
		CompSbaGrid.Set( DocumentQuery,~<newDocQuery>~ );
	}

	CompSbaGrid.Init();
	return Global( CompSbaGrid );
}
